#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindManager

#include "Basic.hpp"

#include "StaticMeshMaterialArrayCombo_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FlowMapMaterials_structs.hpp"
#include "ArrayOfWaterMeshWaterBlueprintPairs_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass WindManager.WindManager_C
// 0x0118 (0x0598 - 0x0480)
class AWindManager_C final : public AFortWindManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0480(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               WaterInteractionParticle;                          // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EmptyStaticMesh;                                   // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               TopDownCaptureActorOfTheWorld;                     // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D01;                         // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SmallerRenderTargetOrthoWidth;                     // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         External_Test_Actor;                               // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AFortStaticMeshActor*>           World_Terrain_Meshes;                              // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                Camera_Height_Offset;                              // 0x04D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Particle_Z_Offset;                                 // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Water_Interaction_Enabled_Variable_Been_Set;   // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Water_Interaction_Enabled;                      // 0x04E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EA[0x6];                                      // 0x04EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStaticMeshMaterialArrayCombo>  WorldStaticMeshArray;                              // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FArrayOfWaterMeshWaterBlueprintPairs   Array_Of_Water_Assets;                             // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    PrototypicalStaticMeshes;                          // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         Current_Water_Mesh_Index;                          // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFlowMapMaterials>              WaterVectorMatToDefaultMaterialPairing;            // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          MaterialPairingFound;                              // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539[0x3];                                      // 0x0539(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           WorldBoundsMinMax;                                 // 0x053C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Black_Scene_Capture_Material;                      // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   Max_level_bounds_Minus_used_to_isolate_the_level_from_the_vista; // 0x0558(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_574[0x4];                                      // 0x0574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           StormCylinderMeshes;                               // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          Storm_Cyl_Mesh_Match;                              // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_589[0x3];                                      // 0x0589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Wind_Cyl_Mesh_Array_Match_Index;                   // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Wind_Falloff_in_World_Units;                 // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortWindImpulseHandle                 NewVar_1;                                          // 0x0594(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_WindManager(int32 EntryPoint);
	void Update_Test(float NewMagnitude);
	void ReceiveBeginPlay();
	void Add_Wind_Component(class UPrimitiveComponent* InComponent);
	void Play_Water_Splash_Particle_System_At_Location(const struct FTransform& Particle_Transform);
	void SpawnTestWind(float Radius, float ImpulseMagnitude);
	void OnWindImpulseCylinderDeltaComplete(const struct FFortWindImpulseCylinder& WindImpulseCylinder);
	void OnWindImpulseCylinderDeath(const struct FFortWindImpulseCylinder& WindImpulseCylinder);
	void OnWindImpulseCylinderCreation(const struct FFortWindImpulseCylinder& WindImpulseCylinder, const struct FFortWindImpulseCylinderDelta& WindImpulseCylinderDelta);
	void AddWindParticleSystemComponent(class UParticleSystemComponent* ParticleSystemComponent);
	void Register_player_for_render_to_texture_purposes(class UPrimitiveComponent* Effect_Water_Interaction_FX, class UPrimitiveComponent* Gameplay_Wind_INteraction_Effects);
	void ReceiveTick(float DeltaSeconds);
	void OnWorldReady();
	void Add_Render_To_Texture_Particle(class UParticleSystem* EmitterTemplate, const struct FTransform& InTransform);
	void UserConstructionScript();
	void InitializeOrthoSettings();
	void SetRenderOnlyAssets(class UPrimitiveComponent* InComponent);
	struct FVector Calculate_Camera_Position(float Scale, class USceneCaptureComponent2D* Scene_Capture);
	void UpdateStormWindCylinder(const struct FFortWindImpulseCylinder& Wind_Impulse, const struct FFortWindImpulseCylinderDelta& Wind_Delta);
	void RemoveWindCylinder(const struct FFortWindImpulseCylinder& WindImpulseCylinder);
	void UpdateWindDeltaCyl(float Static_Cylinder_Outer_Radius, float Duration, class UMaterialInstanceDynamic* Mid, bool Is_Wind_Circular_);
	void SetWindMatVariables(class UMaterialInstanceDynamic* Mid, bool Set_AnimatedCylinderCenter, const struct FVector& AnimatedCylinderCenter, bool Set_Animating_Wind_Magnitude, float Animating_Wind_Magnitude, bool Set_Static_Wind_Magnitude, float Static_Wind_Magnitude, bool Set_CylinderCenter, const struct FVector& CylinderCenter, bool Set_WindVector, const struct FVector& WindVector, bool Set_WindCrossVector, const struct FVector& WindCrossVector, bool Set_OverallOuterRadius, float OverallOuterRadius, bool Set_OverallInnerRadius, float OverallInnerRadius, bool Set_Wind_Still_0_or_Animating_1, float Wind_Still_0_or_Animating_1, bool Set_Circular_Shader_, float Circular_Shader_, bool* NewParam);
	void Find_Matching_Wind_Mesh_Index_And_Write_Bool(const struct FVector& Wind_location, bool* Param_Storm_Cyl_Mesh_Match, int32* Param_Wind_Cyl_Mesh_Array_Match_Index);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WindManager_C">();
	}
	static class AWindManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWindManager_C>();
	}
};
static_assert(alignof(AWindManager_C) == 0x000008, "Wrong alignment on AWindManager_C");
static_assert(sizeof(AWindManager_C) == 0x000598, "Wrong size on AWindManager_C");
static_assert(offsetof(AWindManager_C, UberGraphFrame) == 0x000480, "Member 'AWindManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WaterInteractionParticle) == 0x000488, "Member 'AWindManager_C::WaterInteractionParticle' has a wrong offset!");
static_assert(offsetof(AWindManager_C, EmptyStaticMesh) == 0x000490, "Member 'AWindManager_C::EmptyStaticMesh' has a wrong offset!");
static_assert(offsetof(AWindManager_C, TopDownCaptureActorOfTheWorld) == 0x000498, "Member 'AWindManager_C::TopDownCaptureActorOfTheWorld' has a wrong offset!");
static_assert(offsetof(AWindManager_C, SceneCaptureComponent2D01) == 0x0004A0, "Member 'AWindManager_C::SceneCaptureComponent2D01' has a wrong offset!");
static_assert(offsetof(AWindManager_C, DefaultSceneRoot) == 0x0004A8, "Member 'AWindManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AWindManager_C, SmallerRenderTargetOrthoWidth) == 0x0004B0, "Member 'AWindManager_C::SmallerRenderTargetOrthoWidth' has a wrong offset!");
static_assert(offsetof(AWindManager_C, External_Test_Actor) == 0x0004B8, "Member 'AWindManager_C::External_Test_Actor' has a wrong offset!");
static_assert(offsetof(AWindManager_C, World_Terrain_Meshes) == 0x0004C8, "Member 'AWindManager_C::World_Terrain_Meshes' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Camera_Height_Offset) == 0x0004D8, "Member 'AWindManager_C::Camera_Height_Offset' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Particle_Z_Offset) == 0x0004E4, "Member 'AWindManager_C::Particle_Z_Offset' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Has_Water_Interaction_Enabled_Variable_Been_Set) == 0x0004E8, "Member 'AWindManager_C::Has_Water_Interaction_Enabled_Variable_Been_Set' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Is_Water_Interaction_Enabled) == 0x0004E9, "Member 'AWindManager_C::Is_Water_Interaction_Enabled' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WorldStaticMeshArray) == 0x0004F0, "Member 'AWindManager_C::WorldStaticMeshArray' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Array_Of_Water_Assets) == 0x000500, "Member 'AWindManager_C::Array_Of_Water_Assets' has a wrong offset!");
static_assert(offsetof(AWindManager_C, PrototypicalStaticMeshes) == 0x000510, "Member 'AWindManager_C::PrototypicalStaticMeshes' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Current_Water_Mesh_Index) == 0x000520, "Member 'AWindManager_C::Current_Water_Mesh_Index' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WaterVectorMatToDefaultMaterialPairing) == 0x000528, "Member 'AWindManager_C::WaterVectorMatToDefaultMaterialPairing' has a wrong offset!");
static_assert(offsetof(AWindManager_C, MaterialPairingFound) == 0x000538, "Member 'AWindManager_C::MaterialPairingFound' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WorldBoundsMinMax) == 0x00053C, "Member 'AWindManager_C::WorldBoundsMinMax' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Black_Scene_Capture_Material) == 0x000550, "Member 'AWindManager_C::Black_Scene_Capture_Material' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Max_level_bounds_Minus_used_to_isolate_the_level_from_the_vista) == 0x000558, "Member 'AWindManager_C::Max_level_bounds_Minus_used_to_isolate_the_level_from_the_vista' has a wrong offset!");
static_assert(offsetof(AWindManager_C, StormCylinderMeshes) == 0x000578, "Member 'AWindManager_C::StormCylinderMeshes' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Storm_Cyl_Mesh_Match) == 0x000588, "Member 'AWindManager_C::Storm_Cyl_Mesh_Match' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Wind_Cyl_Mesh_Array_Match_Index) == 0x00058C, "Member 'AWindManager_C::Wind_Cyl_Mesh_Array_Match_Index' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Delta_Wind_Falloff_in_World_Units) == 0x000590, "Member 'AWindManager_C::Delta_Wind_Falloff_in_World_Units' has a wrong offset!");
static_assert(offsetof(AWindManager_C, NewVar_1) == 0x000594, "Member 'AWindManager_C::NewVar_1' has a wrong offset!");

}

