#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Solaris

#include "Basic.hpp"


namespace SDK::Params
{

// Function Solaris.MathLibrary_Bool.logical_not
// 0x0002 (0x0002 - 0x0000)
struct MathLibrary_Bool_Logical_not final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Bool_Logical_not) == 0x000001, "Wrong alignment on MathLibrary_Bool_Logical_not");
static_assert(sizeof(MathLibrary_Bool_Logical_not) == 0x000002, "Wrong size on MathLibrary_Bool_Logical_not");
static_assert(offsetof(MathLibrary_Bool_Logical_not, Value) == 0x000000, "Member 'MathLibrary_Bool_Logical_not::Value' has a wrong offset!");
static_assert(offsetof(MathLibrary_Bool_Logical_not, ReturnValue) == 0x000001, "Member 'MathLibrary_Bool_Logical_not::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Bool.logical_xor
// 0x0003 (0x0003 - 0x0000)
struct MathLibrary_Bool_Logical_xor final
{
public:
	bool                                          LHS;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RHS;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Bool_Logical_xor) == 0x000001, "Wrong alignment on MathLibrary_Bool_Logical_xor");
static_assert(sizeof(MathLibrary_Bool_Logical_xor) == 0x000003, "Wrong size on MathLibrary_Bool_Logical_xor");
static_assert(offsetof(MathLibrary_Bool_Logical_xor, LHS) == 0x000000, "Member 'MathLibrary_Bool_Logical_xor::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Bool_Logical_xor, RHS) == 0x000001, "Member 'MathLibrary_Bool_Logical_xor::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Bool_Logical_xor, ReturnValue) == 0x000002, "Member 'MathLibrary_Bool_Logical_xor::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.abs
// 0x0008 (0x0008 - 0x0000)
struct MathLibrary_Int_Abs final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Int_Abs) == 0x000004, "Wrong alignment on MathLibrary_Int_Abs");
static_assert(sizeof(MathLibrary_Int_Abs) == 0x000008, "Wrong size on MathLibrary_Int_Abs");
static_assert(offsetof(MathLibrary_Int_Abs, Value) == 0x000000, "Member 'MathLibrary_Int_Abs::Value' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Abs, ReturnValue) == 0x000004, "Member 'MathLibrary_Int_Abs::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.Add
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Add final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Int_Add) == 0x000004, "Wrong alignment on MathLibrary_Int_Add");
static_assert(sizeof(MathLibrary_Int_Add) == 0x00000C, "Wrong size on MathLibrary_Int_Add");
static_assert(offsetof(MathLibrary_Int_Add, LHS) == 0x000000, "Member 'MathLibrary_Int_Add::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Add, RHS) == 0x000004, "Member 'MathLibrary_Int_Add::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Add, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Add::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.Divide
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Divide final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Int_Divide) == 0x000004, "Wrong alignment on MathLibrary_Int_Divide");
static_assert(sizeof(MathLibrary_Int_Divide) == 0x00000C, "Wrong size on MathLibrary_Int_Divide");
static_assert(offsetof(MathLibrary_Int_Divide, LHS) == 0x000000, "Member 'MathLibrary_Int_Divide::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Divide, RHS) == 0x000004, "Member 'MathLibrary_Int_Divide::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Divide, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Divide::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.equal
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Equal final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Int_Equal) == 0x000004, "Wrong alignment on MathLibrary_Int_Equal");
static_assert(sizeof(MathLibrary_Int_Equal) == 0x00000C, "Wrong size on MathLibrary_Int_Equal");
static_assert(offsetof(MathLibrary_Int_Equal, LHS) == 0x000000, "Member 'MathLibrary_Int_Equal::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Equal, RHS) == 0x000004, "Member 'MathLibrary_Int_Equal::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Equal, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Equal::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.greater
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Greater final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Int_Greater) == 0x000004, "Wrong alignment on MathLibrary_Int_Greater");
static_assert(sizeof(MathLibrary_Int_Greater) == 0x00000C, "Wrong size on MathLibrary_Int_Greater");
static_assert(offsetof(MathLibrary_Int_Greater, LHS) == 0x000000, "Member 'MathLibrary_Int_Greater::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Greater, RHS) == 0x000004, "Member 'MathLibrary_Int_Greater::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Greater, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Greater::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.greater_equal
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Greater_equal final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Int_Greater_equal) == 0x000004, "Wrong alignment on MathLibrary_Int_Greater_equal");
static_assert(sizeof(MathLibrary_Int_Greater_equal) == 0x00000C, "Wrong size on MathLibrary_Int_Greater_equal");
static_assert(offsetof(MathLibrary_Int_Greater_equal, LHS) == 0x000000, "Member 'MathLibrary_Int_Greater_equal::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Greater_equal, RHS) == 0x000004, "Member 'MathLibrary_Int_Greater_equal::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Greater_equal, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Greater_equal::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.less
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Less final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Int_Less) == 0x000004, "Wrong alignment on MathLibrary_Int_Less");
static_assert(sizeof(MathLibrary_Int_Less) == 0x00000C, "Wrong size on MathLibrary_Int_Less");
static_assert(offsetof(MathLibrary_Int_Less, LHS) == 0x000000, "Member 'MathLibrary_Int_Less::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Less, RHS) == 0x000004, "Member 'MathLibrary_Int_Less::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Less, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Less::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.less_equal
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Less_equal final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Int_Less_equal) == 0x000004, "Wrong alignment on MathLibrary_Int_Less_equal");
static_assert(sizeof(MathLibrary_Int_Less_equal) == 0x00000C, "Wrong size on MathLibrary_Int_Less_equal");
static_assert(offsetof(MathLibrary_Int_Less_equal, LHS) == 0x000000, "Member 'MathLibrary_Int_Less_equal::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Less_equal, RHS) == 0x000004, "Member 'MathLibrary_Int_Less_equal::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Less_equal, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Less_equal::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.max
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Max final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Int_Max) == 0x000004, "Wrong alignment on MathLibrary_Int_Max");
static_assert(sizeof(MathLibrary_Int_Max) == 0x00000C, "Wrong size on MathLibrary_Int_Max");
static_assert(offsetof(MathLibrary_Int_Max, LHS) == 0x000000, "Member 'MathLibrary_Int_Max::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Max, RHS) == 0x000004, "Member 'MathLibrary_Int_Max::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Max, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Max::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.min
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Min final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Int_Min) == 0x000004, "Wrong alignment on MathLibrary_Int_Min");
static_assert(sizeof(MathLibrary_Int_Min) == 0x00000C, "Wrong size on MathLibrary_Int_Min");
static_assert(offsetof(MathLibrary_Int_Min, LHS) == 0x000000, "Member 'MathLibrary_Int_Min::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Min, RHS) == 0x000004, "Member 'MathLibrary_Int_Min::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Min, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Min::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.Multiply
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Multiply final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Int_Multiply) == 0x000004, "Wrong alignment on MathLibrary_Int_Multiply");
static_assert(sizeof(MathLibrary_Int_Multiply) == 0x00000C, "Wrong size on MathLibrary_Int_Multiply");
static_assert(offsetof(MathLibrary_Int_Multiply, LHS) == 0x000000, "Member 'MathLibrary_Int_Multiply::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Multiply, RHS) == 0x000004, "Member 'MathLibrary_Int_Multiply::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Multiply, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Multiply::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.negate
// 0x0008 (0x0008 - 0x0000)
struct MathLibrary_Int_Negate final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Int_Negate) == 0x000004, "Wrong alignment on MathLibrary_Int_Negate");
static_assert(sizeof(MathLibrary_Int_Negate) == 0x000008, "Wrong size on MathLibrary_Int_Negate");
static_assert(offsetof(MathLibrary_Int_Negate, Value) == 0x000000, "Member 'MathLibrary_Int_Negate::Value' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Negate, ReturnValue) == 0x000004, "Member 'MathLibrary_Int_Negate::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.not_equal
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Not_equal final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Int_Not_equal) == 0x000004, "Wrong alignment on MathLibrary_Int_Not_equal");
static_assert(sizeof(MathLibrary_Int_Not_equal) == 0x00000C, "Wrong size on MathLibrary_Int_Not_equal");
static_assert(offsetof(MathLibrary_Int_Not_equal, LHS) == 0x000000, "Member 'MathLibrary_Int_Not_equal::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Not_equal, RHS) == 0x000004, "Member 'MathLibrary_Int_Not_equal::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Not_equal, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Not_equal::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Int.Subtract
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Int_Subtract final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Int_Subtract) == 0x000004, "Wrong alignment on MathLibrary_Int_Subtract");
static_assert(sizeof(MathLibrary_Int_Subtract) == 0x00000C, "Wrong size on MathLibrary_Int_Subtract");
static_assert(offsetof(MathLibrary_Int_Subtract, LHS) == 0x000000, "Member 'MathLibrary_Int_Subtract::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Subtract, RHS) == 0x000004, "Member 'MathLibrary_Int_Subtract::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Int_Subtract, ReturnValue) == 0x000008, "Member 'MathLibrary_Int_Subtract::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.abs
// 0x0008 (0x0008 - 0x0000)
struct MathLibrary_Real_Abs final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Real_Abs) == 0x000004, "Wrong alignment on MathLibrary_Real_Abs");
static_assert(sizeof(MathLibrary_Real_Abs) == 0x000008, "Wrong size on MathLibrary_Real_Abs");
static_assert(offsetof(MathLibrary_Real_Abs, Value) == 0x000000, "Member 'MathLibrary_Real_Abs::Value' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Abs, ReturnValue) == 0x000004, "Member 'MathLibrary_Real_Abs::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.Add
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Add final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Real_Add) == 0x000004, "Wrong alignment on MathLibrary_Real_Add");
static_assert(sizeof(MathLibrary_Real_Add) == 0x00000C, "Wrong size on MathLibrary_Real_Add");
static_assert(offsetof(MathLibrary_Real_Add, LHS) == 0x000000, "Member 'MathLibrary_Real_Add::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Add, RHS) == 0x000004, "Member 'MathLibrary_Real_Add::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Add, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Add::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.Divide
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Divide final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Real_Divide) == 0x000004, "Wrong alignment on MathLibrary_Real_Divide");
static_assert(sizeof(MathLibrary_Real_Divide) == 0x00000C, "Wrong size on MathLibrary_Real_Divide");
static_assert(offsetof(MathLibrary_Real_Divide, LHS) == 0x000000, "Member 'MathLibrary_Real_Divide::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Divide, RHS) == 0x000004, "Member 'MathLibrary_Real_Divide::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Divide, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Divide::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.equal
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Equal final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Real_Equal) == 0x000004, "Wrong alignment on MathLibrary_Real_Equal");
static_assert(sizeof(MathLibrary_Real_Equal) == 0x00000C, "Wrong size on MathLibrary_Real_Equal");
static_assert(offsetof(MathLibrary_Real_Equal, LHS) == 0x000000, "Member 'MathLibrary_Real_Equal::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Equal, RHS) == 0x000004, "Member 'MathLibrary_Real_Equal::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Equal, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Equal::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.greater
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Greater final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Real_Greater) == 0x000004, "Wrong alignment on MathLibrary_Real_Greater");
static_assert(sizeof(MathLibrary_Real_Greater) == 0x00000C, "Wrong size on MathLibrary_Real_Greater");
static_assert(offsetof(MathLibrary_Real_Greater, LHS) == 0x000000, "Member 'MathLibrary_Real_Greater::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Greater, RHS) == 0x000004, "Member 'MathLibrary_Real_Greater::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Greater, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Greater::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.greater_equal
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Greater_equal final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Real_Greater_equal) == 0x000004, "Wrong alignment on MathLibrary_Real_Greater_equal");
static_assert(sizeof(MathLibrary_Real_Greater_equal) == 0x00000C, "Wrong size on MathLibrary_Real_Greater_equal");
static_assert(offsetof(MathLibrary_Real_Greater_equal, LHS) == 0x000000, "Member 'MathLibrary_Real_Greater_equal::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Greater_equal, RHS) == 0x000004, "Member 'MathLibrary_Real_Greater_equal::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Greater_equal, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Greater_equal::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.less
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Less final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Real_Less) == 0x000004, "Wrong alignment on MathLibrary_Real_Less");
static_assert(sizeof(MathLibrary_Real_Less) == 0x00000C, "Wrong size on MathLibrary_Real_Less");
static_assert(offsetof(MathLibrary_Real_Less, LHS) == 0x000000, "Member 'MathLibrary_Real_Less::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Less, RHS) == 0x000004, "Member 'MathLibrary_Real_Less::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Less, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Less::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.less_equal
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Less_equal final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Real_Less_equal) == 0x000004, "Wrong alignment on MathLibrary_Real_Less_equal");
static_assert(sizeof(MathLibrary_Real_Less_equal) == 0x00000C, "Wrong size on MathLibrary_Real_Less_equal");
static_assert(offsetof(MathLibrary_Real_Less_equal, LHS) == 0x000000, "Member 'MathLibrary_Real_Less_equal::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Less_equal, RHS) == 0x000004, "Member 'MathLibrary_Real_Less_equal::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Less_equal, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Less_equal::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.max
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Max final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Real_Max) == 0x000004, "Wrong alignment on MathLibrary_Real_Max");
static_assert(sizeof(MathLibrary_Real_Max) == 0x00000C, "Wrong size on MathLibrary_Real_Max");
static_assert(offsetof(MathLibrary_Real_Max, LHS) == 0x000000, "Member 'MathLibrary_Real_Max::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Max, RHS) == 0x000004, "Member 'MathLibrary_Real_Max::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Max, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Max::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.min
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Min final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Real_Min) == 0x000004, "Wrong alignment on MathLibrary_Real_Min");
static_assert(sizeof(MathLibrary_Real_Min) == 0x00000C, "Wrong size on MathLibrary_Real_Min");
static_assert(offsetof(MathLibrary_Real_Min, LHS) == 0x000000, "Member 'MathLibrary_Real_Min::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Min, RHS) == 0x000004, "Member 'MathLibrary_Real_Min::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Min, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Min::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.Multiply
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Multiply final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Real_Multiply) == 0x000004, "Wrong alignment on MathLibrary_Real_Multiply");
static_assert(sizeof(MathLibrary_Real_Multiply) == 0x00000C, "Wrong size on MathLibrary_Real_Multiply");
static_assert(offsetof(MathLibrary_Real_Multiply, LHS) == 0x000000, "Member 'MathLibrary_Real_Multiply::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Multiply, RHS) == 0x000004, "Member 'MathLibrary_Real_Multiply::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Multiply, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Multiply::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.negate
// 0x0008 (0x0008 - 0x0000)
struct MathLibrary_Real_Negate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Real_Negate) == 0x000004, "Wrong alignment on MathLibrary_Real_Negate");
static_assert(sizeof(MathLibrary_Real_Negate) == 0x000008, "Wrong size on MathLibrary_Real_Negate");
static_assert(offsetof(MathLibrary_Real_Negate, Value) == 0x000000, "Member 'MathLibrary_Real_Negate::Value' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Negate, ReturnValue) == 0x000004, "Member 'MathLibrary_Real_Negate::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.not_equal
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Not_equal final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MathLibrary_Real_Not_equal) == 0x000004, "Wrong alignment on MathLibrary_Real_Not_equal");
static_assert(sizeof(MathLibrary_Real_Not_equal) == 0x00000C, "Wrong size on MathLibrary_Real_Not_equal");
static_assert(offsetof(MathLibrary_Real_Not_equal, LHS) == 0x000000, "Member 'MathLibrary_Real_Not_equal::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Not_equal, RHS) == 0x000004, "Member 'MathLibrary_Real_Not_equal::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Not_equal, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Not_equal::ReturnValue' has a wrong offset!");

// Function Solaris.MathLibrary_Real.Subtract
// 0x000C (0x000C - 0x0000)
struct MathLibrary_Real_Subtract final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathLibrary_Real_Subtract) == 0x000004, "Wrong alignment on MathLibrary_Real_Subtract");
static_assert(sizeof(MathLibrary_Real_Subtract) == 0x00000C, "Wrong size on MathLibrary_Real_Subtract");
static_assert(offsetof(MathLibrary_Real_Subtract, LHS) == 0x000000, "Member 'MathLibrary_Real_Subtract::LHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Subtract, RHS) == 0x000004, "Member 'MathLibrary_Real_Subtract::RHS' has a wrong offset!");
static_assert(offsetof(MathLibrary_Real_Subtract, ReturnValue) == 0x000008, "Member 'MathLibrary_Real_Subtract::ReturnValue' has a wrong offset!");

}

