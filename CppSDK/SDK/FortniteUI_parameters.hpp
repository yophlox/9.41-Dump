#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteUI

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "MediaUtils_structs.hpp"
#include "Engine_structs.hpp"
#include "Party_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "CommonUI_structs.hpp"
#include "CommonInput_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "GameSubCatalog_structs.hpp"
#include "SocialUMG_structs.hpp"


namespace SDK::Params
{

// Function FortniteUI.FortGadgetsWidgetBase.OnGenerateTooltipWidget
// 0x0038 (0x0038 - 0x0000)
struct FortGadgetsWidgetBase_OnGenerateTooltipWidget final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGadgetsWidgetBase_OnGenerateTooltipWidget) == 0x000008, "Wrong alignment on FortGadgetsWidgetBase_OnGenerateTooltipWidget");
static_assert(sizeof(FortGadgetsWidgetBase_OnGenerateTooltipWidget) == 0x000038, "Wrong size on FortGadgetsWidgetBase_OnGenerateTooltipWidget");
static_assert(offsetof(FortGadgetsWidgetBase_OnGenerateTooltipWidget, Header) == 0x000000, "Member 'FortGadgetsWidgetBase_OnGenerateTooltipWidget::Header' has a wrong offset!");
static_assert(offsetof(FortGadgetsWidgetBase_OnGenerateTooltipWidget, Description) == 0x000018, "Member 'FortGadgetsWidgetBase_OnGenerateTooltipWidget::Description' has a wrong offset!");
static_assert(offsetof(FortGadgetsWidgetBase_OnGenerateTooltipWidget, ReturnValue) == 0x000030, "Member 'FortGadgetsWidgetBase_OnGenerateTooltipWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaChallengeScreenTileBase.OnChallengeSetEstablished
// 0x0088 (0x0088 - 0x0000)
struct AthenaChallengeScreenTileBase_OnChallengeSetEstablished final
{
public:
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsComplete;                                       // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocked;                                         // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaChallengeScreenTileBase_OnChallengeSetEstablished) == 0x000008, "Wrong alignment on AthenaChallengeScreenTileBase_OnChallengeSetEstablished");
static_assert(sizeof(AthenaChallengeScreenTileBase_OnChallengeSetEstablished) == 0x000088, "Wrong size on AthenaChallengeScreenTileBase_OnChallengeSetEstablished");
static_assert(offsetof(AthenaChallengeScreenTileBase_OnChallengeSetEstablished, DisplayStyle) == 0x000000, "Member 'AthenaChallengeScreenTileBase_OnChallengeSetEstablished::DisplayStyle' has a wrong offset!");
static_assert(offsetof(AthenaChallengeScreenTileBase_OnChallengeSetEstablished, bIsComplete) == 0x000080, "Member 'AthenaChallengeScreenTileBase_OnChallengeSetEstablished::bIsComplete' has a wrong offset!");
static_assert(offsetof(AthenaChallengeScreenTileBase_OnChallengeSetEstablished, bIsLocked) == 0x000081, "Member 'AthenaChallengeScreenTileBase_OnChallengeSetEstablished::bIsLocked' has a wrong offset!");

// Function FortniteUI.AthenaChallengeScreenTileBase.OnContainsPartyAssistedChallengeChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaChallengeScreenTileBase_OnContainsPartyAssistedChallengeChanged final
{
public:
	bool                                          bHasPartyAssistedChallenge;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeScreenTileBase_OnContainsPartyAssistedChallengeChanged) == 0x000001, "Wrong alignment on AthenaChallengeScreenTileBase_OnContainsPartyAssistedChallengeChanged");
static_assert(sizeof(AthenaChallengeScreenTileBase_OnContainsPartyAssistedChallengeChanged) == 0x000001, "Wrong size on AthenaChallengeScreenTileBase_OnContainsPartyAssistedChallengeChanged");
static_assert(offsetof(AthenaChallengeScreenTileBase_OnContainsPartyAssistedChallengeChanged, bHasPartyAssistedChallenge) == 0x000000, "Member 'AthenaChallengeScreenTileBase_OnContainsPartyAssistedChallengeChanged::bHasPartyAssistedChallenge' has a wrong offset!");

// Function FortniteUI.FortHUDElementWidget.HandleOnHUDElementVisibilityChanged
// 0x0020 (0x0020 - 0x0000)
struct FortHUDElementWidget_HandleOnHUDElementVisibilityChanged final
{
public:
	struct FGameplayTagContainer                  HiddenHUDElementTags;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDElementWidget_HandleOnHUDElementVisibilityChanged) == 0x000008, "Wrong alignment on FortHUDElementWidget_HandleOnHUDElementVisibilityChanged");
static_assert(sizeof(FortHUDElementWidget_HandleOnHUDElementVisibilityChanged) == 0x000020, "Wrong size on FortHUDElementWidget_HandleOnHUDElementVisibilityChanged");
static_assert(offsetof(FortHUDElementWidget_HandleOnHUDElementVisibilityChanged, HiddenHUDElementTags) == 0x000000, "Member 'FortHUDElementWidget_HandleOnHUDElementVisibilityChanged::HiddenHUDElementTags' has a wrong offset!");

// Function FortniteUI.FortHUDElementWidget.OnVisibilitySetEvent
// 0x0001 (0x0001 - 0x0000)
struct FortHUDElementWidget_OnVisibilitySetEvent final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDElementWidget_OnVisibilitySetEvent) == 0x000001, "Wrong alignment on FortHUDElementWidget_OnVisibilitySetEvent");
static_assert(sizeof(FortHUDElementWidget_OnVisibilitySetEvent) == 0x000001, "Wrong size on FortHUDElementWidget_OnVisibilitySetEvent");
static_assert(offsetof(FortHUDElementWidget_OnVisibilitySetEvent, InVisibility) == 0x000000, "Member 'FortHUDElementWidget_OnVisibilitySetEvent::InVisibility' has a wrong offset!");

// Function FortniteUI.LTMWidgetBase.OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct LTMWidgetBase_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              NewPhase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTMWidgetBase_OnGamePhaseChanged) == 0x000001, "Wrong alignment on LTMWidgetBase_OnGamePhaseChanged");
static_assert(sizeof(LTMWidgetBase_OnGamePhaseChanged) == 0x000001, "Wrong size on LTMWidgetBase_OnGamePhaseChanged");
static_assert(offsetof(LTMWidgetBase_OnGamePhaseChanged, NewPhase) == 0x000000, "Member 'LTMWidgetBase_OnGamePhaseChanged::NewPhase' has a wrong offset!");

// Function FortniteUI.LTMWidgetBase.OnHandleSpectatingChanged
// 0x0008 (0x0008 - 0x0000)
struct LTMWidgetBase_OnHandleSpectatingChanged final
{
public:
	class AFortPlayerStateZone*                   SpectatingTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTMWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong alignment on LTMWidgetBase_OnHandleSpectatingChanged");
static_assert(sizeof(LTMWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong size on LTMWidgetBase_OnHandleSpectatingChanged");
static_assert(offsetof(LTMWidgetBase_OnHandleSpectatingChanged, SpectatingTarget) == 0x000000, "Member 'LTMWidgetBase_OnHandleSpectatingChanged::SpectatingTarget' has a wrong offset!");

// Function FortniteUI.LTMWidgetBase.GetViewingTeam
// 0x0001 (0x0001 - 0x0000)
struct LTMWidgetBase_GetViewingTeam final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTMWidgetBase_GetViewingTeam) == 0x000001, "Wrong alignment on LTMWidgetBase_GetViewingTeam");
static_assert(sizeof(LTMWidgetBase_GetViewingTeam) == 0x000001, "Wrong size on LTMWidgetBase_GetViewingTeam");
static_assert(offsetof(LTMWidgetBase_GetViewingTeam, ReturnValue) == 0x000000, "Member 'LTMWidgetBase_GetViewingTeam::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortActivatablePanel.AsyncPlaySound2D
// 0x0040 (0x0040 - 0x0000)
struct FortActivatablePanel_AsyncPlaySound2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SoundToLoad;                                       // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortActivatablePanel_AsyncPlaySound2D) == 0x000008, "Wrong alignment on FortActivatablePanel_AsyncPlaySound2D");
static_assert(sizeof(FortActivatablePanel_AsyncPlaySound2D) == 0x000040, "Wrong size on FortActivatablePanel_AsyncPlaySound2D");
static_assert(offsetof(FortActivatablePanel_AsyncPlaySound2D, WorldContextObject) == 0x000000, "Member 'FortActivatablePanel_AsyncPlaySound2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortActivatablePanel_AsyncPlaySound2D, SoundToLoad) == 0x000008, "Member 'FortActivatablePanel_AsyncPlaySound2D::SoundToLoad' has a wrong offset!");
static_assert(offsetof(FortActivatablePanel_AsyncPlaySound2D, VolumeMultiplier) == 0x000030, "Member 'FortActivatablePanel_AsyncPlaySound2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FortActivatablePanel_AsyncPlaySound2D, PitchMultiplier) == 0x000034, "Member 'FortActivatablePanel_AsyncPlaySound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(FortActivatablePanel_AsyncPlaySound2D, StartTime) == 0x000038, "Member 'FortActivatablePanel_AsyncPlaySound2D::StartTime' has a wrong offset!");

// Function FortniteUI.FortActivatablePanel.RestoreCenterWidget
// 0x0008 (0x0008 - 0x0000)
struct FortActivatablePanel_RestoreCenterWidget final
{
public:
	class UWidget*                                FallbackWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanel_RestoreCenterWidget) == 0x000008, "Wrong alignment on FortActivatablePanel_RestoreCenterWidget");
static_assert(sizeof(FortActivatablePanel_RestoreCenterWidget) == 0x000008, "Wrong size on FortActivatablePanel_RestoreCenterWidget");
static_assert(offsetof(FortActivatablePanel_RestoreCenterWidget, FallbackWidget) == 0x000000, "Member 'FortActivatablePanel_RestoreCenterWidget::FallbackWidget' has a wrong offset!");

// Function FortniteUI.FortActivatablePanel.RestoreScrollWidget
// 0x0008 (0x0008 - 0x0000)
struct FortActivatablePanel_RestoreScrollWidget final
{
public:
	class UWidget*                                FallbackWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanel_RestoreScrollWidget) == 0x000008, "Wrong alignment on FortActivatablePanel_RestoreScrollWidget");
static_assert(sizeof(FortActivatablePanel_RestoreScrollWidget) == 0x000008, "Wrong size on FortActivatablePanel_RestoreScrollWidget");
static_assert(offsetof(FortActivatablePanel_RestoreScrollWidget, FallbackWidget) == 0x000000, "Member 'FortActivatablePanel_RestoreScrollWidget::FallbackWidget' has a wrong offset!");

// Function FortniteUI.FortActivatablePanelWithItemPreview.GetWidgetForFramingViewedItem
// 0x0008 (0x0008 - 0x0000)
struct FortActivatablePanelWithItemPreview_GetWidgetForFramingViewedItem final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanelWithItemPreview_GetWidgetForFramingViewedItem) == 0x000008, "Wrong alignment on FortActivatablePanelWithItemPreview_GetWidgetForFramingViewedItem");
static_assert(sizeof(FortActivatablePanelWithItemPreview_GetWidgetForFramingViewedItem) == 0x000008, "Wrong size on FortActivatablePanelWithItemPreview_GetWidgetForFramingViewedItem");
static_assert(offsetof(FortActivatablePanelWithItemPreview_GetWidgetForFramingViewedItem, ReturnValue) == 0x000000, "Member 'FortActivatablePanelWithItemPreview_GetWidgetForFramingViewedItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortActivatablePanelWithItemPreview.OnCosmeticSpecialActionPressed_0
// 0x0001 (0x0001 - 0x0000)
struct FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_0 final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_0) == 0x000001, "Wrong alignment on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_0");
static_assert(sizeof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_0) == 0x000001, "Wrong size on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_0");
static_assert(offsetof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_0, bPassThrough) == 0x000000, "Member 'FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_0::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortActivatablePanelWithItemPreview.OnCosmeticSpecialActionPressed_1
// 0x0001 (0x0001 - 0x0000)
struct FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_1 final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_1) == 0x000001, "Wrong alignment on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_1");
static_assert(sizeof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_1) == 0x000001, "Wrong size on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_1");
static_assert(offsetof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_1, bPassThrough) == 0x000000, "Member 'FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_1::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortActivatablePanelWithItemPreview.OnCosmeticSpecialActionPressed_2
// 0x0001 (0x0001 - 0x0000)
struct FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_2 final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_2) == 0x000001, "Wrong alignment on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_2");
static_assert(sizeof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_2) == 0x000001, "Wrong size on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_2");
static_assert(offsetof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_2, bPassThrough) == 0x000000, "Member 'FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_2::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortActivatablePanelWithItemPreview.OnCosmeticSpecialActionPressed_3
// 0x0001 (0x0001 - 0x0000)
struct FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_3 final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_3) == 0x000001, "Wrong alignment on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_3");
static_assert(sizeof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_3) == 0x000001, "Wrong size on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_3");
static_assert(offsetof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_3, bPassThrough) == 0x000000, "Member 'FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_3::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortActivatablePanelWithItemPreview.OnCosmeticSpecialActionPressed_4
// 0x0001 (0x0001 - 0x0000)
struct FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_4 final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_4) == 0x000001, "Wrong alignment on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_4");
static_assert(sizeof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_4) == 0x000001, "Wrong size on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_4");
static_assert(offsetof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_4, bPassThrough) == 0x000000, "Member 'FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_4::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortActivatablePanelWithItemPreview.OnCosmeticSpecialActionPressed_5
// 0x0001 (0x0001 - 0x0000)
struct FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_5 final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_5) == 0x000001, "Wrong alignment on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_5");
static_assert(sizeof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_5) == 0x000001, "Wrong size on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_5");
static_assert(offsetof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_5, bPassThrough) == 0x000000, "Member 'FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_5::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortActivatablePanelWithItemPreview.OnCosmeticSpecialActionPressed_6
// 0x0001 (0x0001 - 0x0000)
struct FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_6 final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_6) == 0x000001, "Wrong alignment on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_6");
static_assert(sizeof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_6) == 0x000001, "Wrong size on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_6");
static_assert(offsetof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_6, bPassThrough) == 0x000000, "Member 'FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_6::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortActivatablePanelWithItemPreview.OnCosmeticSpecialActionPressed_7
// 0x0001 (0x0001 - 0x0000)
struct FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_7 final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_7) == 0x000001, "Wrong alignment on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_7");
static_assert(sizeof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_7) == 0x000001, "Wrong size on FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_7");
static_assert(offsetof(FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_7, bPassThrough) == 0x000000, "Member 'FortActivatablePanelWithItemPreview_OnCosmeticSpecialActionPressed_7::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortActivatablePanelWithItemPreview.OnItemPreviewChanged
// 0x0010 (0x0010 - 0x0000)
struct FortActivatablePanelWithItemPreview_OnItemPreviewChanged final
{
public:
	class AActor*                                 NewPrefab;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              NewItem;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanelWithItemPreview_OnItemPreviewChanged) == 0x000008, "Wrong alignment on FortActivatablePanelWithItemPreview_OnItemPreviewChanged");
static_assert(sizeof(FortActivatablePanelWithItemPreview_OnItemPreviewChanged) == 0x000010, "Wrong size on FortActivatablePanelWithItemPreview_OnItemPreviewChanged");
static_assert(offsetof(FortActivatablePanelWithItemPreview_OnItemPreviewChanged, NewPrefab) == 0x000000, "Member 'FortActivatablePanelWithItemPreview_OnItemPreviewChanged::NewPrefab' has a wrong offset!");
static_assert(offsetof(FortActivatablePanelWithItemPreview_OnItemPreviewChanged, NewItem) == 0x000008, "Member 'FortActivatablePanelWithItemPreview_OnItemPreviewChanged::NewItem' has a wrong offset!");

// Function FortniteUI.FortActivatablePanelWithItemPreview.OnVaultItemsViewed
// 0x0010 (0x0010 - 0x0000)
struct FortActivatablePanelWithItemPreview_OnVaultItemsViewed final
{
public:
	TArray<class UFortItem*>                      Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivatablePanelWithItemPreview_OnVaultItemsViewed) == 0x000008, "Wrong alignment on FortActivatablePanelWithItemPreview_OnVaultItemsViewed");
static_assert(sizeof(FortActivatablePanelWithItemPreview_OnVaultItemsViewed) == 0x000010, "Wrong size on FortActivatablePanelWithItemPreview_OnVaultItemsViewed");
static_assert(offsetof(FortActivatablePanelWithItemPreview_OnVaultItemsViewed, Items) == 0x000000, "Member 'FortActivatablePanelWithItemPreview_OnVaultItemsViewed::Items' has a wrong offset!");

// Function FortniteUI.AthenaChallengeSetImageGrid.OnChallengeSetEstablished
// 0x0088 (0x0088 - 0x0000)
struct AthenaChallengeSetImageGrid_OnChallengeSetEstablished final
{
public:
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsComplete;                                       // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaChallengeSetImageGrid_OnChallengeSetEstablished) == 0x000008, "Wrong alignment on AthenaChallengeSetImageGrid_OnChallengeSetEstablished");
static_assert(sizeof(AthenaChallengeSetImageGrid_OnChallengeSetEstablished) == 0x000088, "Wrong size on AthenaChallengeSetImageGrid_OnChallengeSetEstablished");
static_assert(offsetof(AthenaChallengeSetImageGrid_OnChallengeSetEstablished, DisplayStyle) == 0x000000, "Member 'AthenaChallengeSetImageGrid_OnChallengeSetEstablished::DisplayStyle' has a wrong offset!");
static_assert(offsetof(AthenaChallengeSetImageGrid_OnChallengeSetEstablished, bIsComplete) == 0x000080, "Member 'AthenaChallengeSetImageGrid_OnChallengeSetEstablished::bIsComplete' has a wrong offset!");

// Function FortniteUI.AshtonWidgetBase.OnStoneChanged
// 0x0002 (0x0002 - 0x0000)
struct AshtonWidgetBase_OnStoneChanged final
{
public:
	EAshtonStoneType                              StoneType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAshtonStoneStateType                         StoneState;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AshtonWidgetBase_OnStoneChanged) == 0x000001, "Wrong alignment on AshtonWidgetBase_OnStoneChanged");
static_assert(sizeof(AshtonWidgetBase_OnStoneChanged) == 0x000002, "Wrong size on AshtonWidgetBase_OnStoneChanged");
static_assert(offsetof(AshtonWidgetBase_OnStoneChanged, StoneType) == 0x000000, "Member 'AshtonWidgetBase_OnStoneChanged::StoneType' has a wrong offset!");
static_assert(offsetof(AshtonWidgetBase_OnStoneChanged, StoneState) == 0x000001, "Member 'AshtonWidgetBase_OnStoneChanged::StoneState' has a wrong offset!");

// Function FortniteUI.AshtonWidgetBase.OnVillainRespawnCountChanged
// 0x0008 (0x0008 - 0x0000)
struct AshtonWidgetBase_OnVillainRespawnCountChanged final
{
public:
	int32                                         NumRespawnsLeft;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnPercentLeft;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AshtonWidgetBase_OnVillainRespawnCountChanged) == 0x000004, "Wrong alignment on AshtonWidgetBase_OnVillainRespawnCountChanged");
static_assert(sizeof(AshtonWidgetBase_OnVillainRespawnCountChanged) == 0x000008, "Wrong size on AshtonWidgetBase_OnVillainRespawnCountChanged");
static_assert(offsetof(AshtonWidgetBase_OnVillainRespawnCountChanged, NumRespawnsLeft) == 0x000000, "Member 'AshtonWidgetBase_OnVillainRespawnCountChanged::NumRespawnsLeft' has a wrong offset!");
static_assert(offsetof(AshtonWidgetBase_OnVillainRespawnCountChanged, RespawnPercentLeft) == 0x000004, "Member 'AshtonWidgetBase_OnVillainRespawnCountChanged::RespawnPercentLeft' has a wrong offset!");

// Function FortniteUI.AshtonWidgetBase.UpdateAllUI
// 0x0001 (0x0001 - 0x0000)
struct AshtonWidgetBase_UpdateAllUI final
{
public:
	bool                                          bFirstUpdate;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AshtonWidgetBase_UpdateAllUI) == 0x000001, "Wrong alignment on AshtonWidgetBase_UpdateAllUI");
static_assert(sizeof(AshtonWidgetBase_UpdateAllUI) == 0x000001, "Wrong size on AshtonWidgetBase_UpdateAllUI");
static_assert(offsetof(AshtonWidgetBase_UpdateAllUI, bFirstUpdate) == 0x000000, "Member 'AshtonWidgetBase_UpdateAllUI::bFirstUpdate' has a wrong offset!");

// Function FortniteUI.AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys.DisplaySurveys
// 0x0018 (0x0018 - 0x0000)
struct AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_DisplaySurveys final
{
public:
	class UFortPlayerSurveyDispatcher*            Param_Dispatcher;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurveyCount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncAction_FortPlayerSurveyDispatcherDisplaySurveys* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_DisplaySurveys) == 0x000008, "Wrong alignment on AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_DisplaySurveys");
static_assert(sizeof(AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_DisplaySurveys) == 0x000018, "Wrong size on AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_DisplaySurveys");
static_assert(offsetof(AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_DisplaySurveys, Param_Dispatcher) == 0x000000, "Member 'AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_DisplaySurveys::Param_Dispatcher' has a wrong offset!");
static_assert(offsetof(AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_DisplaySurveys, SurveyCount) == 0x000008, "Member 'AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_DisplaySurveys::SurveyCount' has a wrong offset!");
static_assert(offsetof(AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_DisplaySurveys, ReturnValue) == 0x000010, "Member 'AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_DisplaySurveys::ReturnValue' has a wrong offset!");

// Function FortniteUI.AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys.HandleAllSurveysFinished
// 0x0008 (0x0008 - 0x0000)
struct AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_HandleAllSurveysFinished final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_HandleAllSurveysFinished) == 0x000008, "Wrong alignment on AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_HandleAllSurveysFinished");
static_assert(sizeof(AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_HandleAllSurveysFinished) == 0x000008, "Wrong size on AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_HandleAllSurveysFinished");
static_assert(offsetof(AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_HandleAllSurveysFinished, Source) == 0x000000, "Member 'AsyncAction_FortPlayerSurveyDispatcherDisplaySurveys_HandleAllSurveysFinished::Source' has a wrong offset!");

// Function FortniteUI.AthenaAccountContext.GetBattleBookPurchaseLimit
// 0x0008 (0x0008 - 0x0000)
struct AthenaAccountContext_GetBattleBookPurchaseLimit final
{
public:
	int32                                         MaxNumLevelsPossibleToPurchase;                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusLevelsGranted;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAccountContext_GetBattleBookPurchaseLimit) == 0x000004, "Wrong alignment on AthenaAccountContext_GetBattleBookPurchaseLimit");
static_assert(sizeof(AthenaAccountContext_GetBattleBookPurchaseLimit) == 0x000008, "Wrong size on AthenaAccountContext_GetBattleBookPurchaseLimit");
static_assert(offsetof(AthenaAccountContext_GetBattleBookPurchaseLimit, MaxNumLevelsPossibleToPurchase) == 0x000000, "Member 'AthenaAccountContext_GetBattleBookPurchaseLimit::MaxNumLevelsPossibleToPurchase' has a wrong offset!");
static_assert(offsetof(AthenaAccountContext_GetBattleBookPurchaseLimit, BonusLevelsGranted) == 0x000004, "Member 'AthenaAccountContext_GetBattleBookPurchaseLimit::BonusLevelsGranted' has a wrong offset!");

// Function FortniteUI.AthenaAccountContext.GetCurrentSeasonDefinition
// 0x0008 (0x0008 - 0x0000)
struct AthenaAccountContext_GetCurrentSeasonDefinition final
{
public:
	class UAthenaSeasonItemDefinition*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAccountContext_GetCurrentSeasonDefinition) == 0x000008, "Wrong alignment on AthenaAccountContext_GetCurrentSeasonDefinition");
static_assert(sizeof(AthenaAccountContext_GetCurrentSeasonDefinition) == 0x000008, "Wrong size on AthenaAccountContext_GetCurrentSeasonDefinition");
static_assert(offsetof(AthenaAccountContext_GetCurrentSeasonDefinition, ReturnValue) == 0x000000, "Member 'AthenaAccountContext_GetCurrentSeasonDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaAccountContext.SimulateBattleBookPurchase
// 0x000C (0x000C - 0x0000)
struct AthenaAccountContext_SimulateBattleBookPurchase final
{
public:
	int32                                         NumLevelsToPurchase;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusLevelsGranted;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverLimit;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAccountContext_SimulateBattleBookPurchase) == 0x000004, "Wrong alignment on AthenaAccountContext_SimulateBattleBookPurchase");
static_assert(sizeof(AthenaAccountContext_SimulateBattleBookPurchase) == 0x00000C, "Wrong size on AthenaAccountContext_SimulateBattleBookPurchase");
static_assert(offsetof(AthenaAccountContext_SimulateBattleBookPurchase, NumLevelsToPurchase) == 0x000000, "Member 'AthenaAccountContext_SimulateBattleBookPurchase::NumLevelsToPurchase' has a wrong offset!");
static_assert(offsetof(AthenaAccountContext_SimulateBattleBookPurchase, BonusLevelsGranted) == 0x000004, "Member 'AthenaAccountContext_SimulateBattleBookPurchase::BonusLevelsGranted' has a wrong offset!");
static_assert(offsetof(AthenaAccountContext_SimulateBattleBookPurchase, bOverLimit) == 0x000008, "Member 'AthenaAccountContext_SimulateBattleBookPurchase::bOverLimit' has a wrong offset!");

// Function FortniteUI.AthenaAccountContext.GetCurrentSeasonName
// 0x0018 (0x0018 - 0x0000)
struct AthenaAccountContext_GetCurrentSeasonName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAccountContext_GetCurrentSeasonName) == 0x000008, "Wrong alignment on AthenaAccountContext_GetCurrentSeasonName");
static_assert(sizeof(AthenaAccountContext_GetCurrentSeasonName) == 0x000018, "Wrong size on AthenaAccountContext_GetCurrentSeasonName");
static_assert(offsetof(AthenaAccountContext_GetCurrentSeasonName, ReturnValue) == 0x000000, "Member 'AthenaAccountContext_GetCurrentSeasonName::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaAccountContext.GetCurrentSeasonNumber
// 0x0004 (0x0004 - 0x0000)
struct AthenaAccountContext_GetCurrentSeasonNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAccountContext_GetCurrentSeasonNumber) == 0x000004, "Wrong alignment on AthenaAccountContext_GetCurrentSeasonNumber");
static_assert(sizeof(AthenaAccountContext_GetCurrentSeasonNumber) == 0x000004, "Wrong size on AthenaAccountContext_GetCurrentSeasonNumber");
static_assert(offsetof(AthenaAccountContext_GetCurrentSeasonNumber, ReturnValue) == 0x000000, "Member 'AthenaAccountContext_GetCurrentSeasonNumber::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaAccountContext.IsAtMaxBattlePassTier
// 0x0001 (0x0001 - 0x0000)
struct AthenaAccountContext_IsAtMaxBattlePassTier final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAccountContext_IsAtMaxBattlePassTier) == 0x000001, "Wrong alignment on AthenaAccountContext_IsAtMaxBattlePassTier");
static_assert(sizeof(AthenaAccountContext_IsAtMaxBattlePassTier) == 0x000001, "Wrong size on AthenaAccountContext_IsAtMaxBattlePassTier");
static_assert(offsetof(AthenaAccountContext_IsAtMaxBattlePassTier, ReturnValue) == 0x000000, "Member 'AthenaAccountContext_IsAtMaxBattlePassTier::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaAccountContext.ShouldReplaceBattleStarsWithAlternateReward
// 0x0001 (0x0001 - 0x0000)
struct AthenaAccountContext_ShouldReplaceBattleStarsWithAlternateReward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAccountContext_ShouldReplaceBattleStarsWithAlternateReward) == 0x000001, "Wrong alignment on AthenaAccountContext_ShouldReplaceBattleStarsWithAlternateReward");
static_assert(sizeof(AthenaAccountContext_ShouldReplaceBattleStarsWithAlternateReward) == 0x000001, "Wrong size on AthenaAccountContext_ShouldReplaceBattleStarsWithAlternateReward");
static_assert(offsetof(AthenaAccountContext_ShouldReplaceBattleStarsWithAlternateReward, ReturnValue) == 0x000000, "Member 'AthenaAccountContext_ShouldReplaceBattleStarsWithAlternateReward::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerPowerRating.OnBasePowerRatingUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPowerRating_OnBasePowerRatingUpdated final
{
public:
	int32                                         BasePowerRating;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPowerRating_OnBasePowerRatingUpdated) == 0x000004, "Wrong alignment on FortPlayerPowerRating_OnBasePowerRatingUpdated");
static_assert(sizeof(FortPlayerPowerRating_OnBasePowerRatingUpdated) == 0x000004, "Wrong size on FortPlayerPowerRating_OnBasePowerRatingUpdated");
static_assert(offsetof(FortPlayerPowerRating_OnBasePowerRatingUpdated, BasePowerRating) == 0x000000, "Member 'FortPlayerPowerRating_OnBasePowerRatingUpdated::BasePowerRating' has a wrong offset!");

// Function FortniteUI.FortPlayerPowerRating.OnPowerRatingProgressUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPowerRating_OnPowerRatingProgressUpdated final
{
public:
	float                                         BaseRatingProgress;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamRatingProgress;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPowerRating_OnPowerRatingProgressUpdated) == 0x000004, "Wrong alignment on FortPlayerPowerRating_OnPowerRatingProgressUpdated");
static_assert(sizeof(FortPlayerPowerRating_OnPowerRatingProgressUpdated) == 0x000008, "Wrong size on FortPlayerPowerRating_OnPowerRatingProgressUpdated");
static_assert(offsetof(FortPlayerPowerRating_OnPowerRatingProgressUpdated, BaseRatingProgress) == 0x000000, "Member 'FortPlayerPowerRating_OnPowerRatingProgressUpdated::BaseRatingProgress' has a wrong offset!");
static_assert(offsetof(FortPlayerPowerRating_OnPowerRatingProgressUpdated, TeamRatingProgress) == 0x000004, "Member 'FortPlayerPowerRating_OnPowerRatingProgressUpdated::TeamRatingProgress' has a wrong offset!");

// Function FortniteUI.FortPlayerPowerRating.OnTeamPowerRatingUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPowerRating_OnTeamPowerRatingUpdated final
{
public:
	int32                                         TeamPowerRating;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPowerRating_OnTeamPowerRatingUpdated) == 0x000004, "Wrong alignment on FortPlayerPowerRating_OnTeamPowerRatingUpdated");
static_assert(sizeof(FortPlayerPowerRating_OnTeamPowerRatingUpdated) == 0x000004, "Wrong size on FortPlayerPowerRating_OnTeamPowerRatingUpdated");
static_assert(offsetof(FortPlayerPowerRating_OnTeamPowerRatingUpdated, TeamPowerRating) == 0x000000, "Member 'FortPlayerPowerRating_OnTeamPowerRatingUpdated::TeamPowerRating' has a wrong offset!");

// Function FortniteUI.FortPlayerPowerRating.GetBasePowerRating
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPowerRating_GetBasePowerRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPowerRating_GetBasePowerRating) == 0x000004, "Wrong alignment on FortPlayerPowerRating_GetBasePowerRating");
static_assert(sizeof(FortPlayerPowerRating_GetBasePowerRating) == 0x000004, "Wrong size on FortPlayerPowerRating_GetBasePowerRating");
static_assert(offsetof(FortPlayerPowerRating_GetBasePowerRating, ReturnValue) == 0x000000, "Member 'FortPlayerPowerRating_GetBasePowerRating::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerPowerRating.GetTeamPowerRating
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPowerRating_GetTeamPowerRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPowerRating_GetTeamPowerRating) == 0x000004, "Wrong alignment on FortPlayerPowerRating_GetTeamPowerRating");
static_assert(sizeof(FortPlayerPowerRating_GetTeamPowerRating) == 0x000004, "Wrong size on FortPlayerPowerRating_GetTeamPowerRating");
static_assert(offsetof(FortPlayerPowerRating_GetTeamPowerRating, ReturnValue) == 0x000000, "Member 'FortPlayerPowerRating_GetTeamPowerRating::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerPowerRating.HasTeamMembers
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPowerRating_HasTeamMembers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPowerRating_HasTeamMembers) == 0x000001, "Wrong alignment on FortPlayerPowerRating_HasTeamMembers");
static_assert(sizeof(FortPlayerPowerRating_HasTeamMembers) == 0x000001, "Wrong size on FortPlayerPowerRating_HasTeamMembers");
static_assert(offsetof(FortPlayerPowerRating_HasTeamMembers, ReturnValue) == 0x000000, "Member 'FortPlayerPowerRating_HasTeamMembers::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetBadgeScore
// 0x0010 (0x0010 - 0x0000)
struct FortUIScoreReport_GetBadgeScore final
{
public:
	class UFortItem*                              BadgeItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIScoreReport_GetBadgeScore) == 0x000008, "Wrong alignment on FortUIScoreReport_GetBadgeScore");
static_assert(sizeof(FortUIScoreReport_GetBadgeScore) == 0x000010, "Wrong size on FortUIScoreReport_GetBadgeScore");
static_assert(offsetof(FortUIScoreReport_GetBadgeScore, BadgeItem) == 0x000000, "Member 'FortUIScoreReport_GetBadgeScore::BadgeItem' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetBadgeScore, ReturnValue) == 0x000008, "Member 'FortUIScoreReport_GetBadgeScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetCurrentPlayerPawn
// 0x0010 (0x0010 - 0x0000)
struct FortUIScoreReport_GetCurrentPlayerPawn final
{
public:
	int32                                         ScoreReportIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetCurrentPlayerPawn) == 0x000008, "Wrong alignment on FortUIScoreReport_GetCurrentPlayerPawn");
static_assert(sizeof(FortUIScoreReport_GetCurrentPlayerPawn) == 0x000010, "Wrong size on FortUIScoreReport_GetCurrentPlayerPawn");
static_assert(offsetof(FortUIScoreReport_GetCurrentPlayerPawn, ScoreReportIndex) == 0x000000, "Member 'FortUIScoreReport_GetCurrentPlayerPawn::ScoreReportIndex' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetCurrentPlayerPawn, ReturnValue) == 0x000008, "Member 'FortUIScoreReport_GetCurrentPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetCurrentPlayerState
// 0x0010 (0x0010 - 0x0000)
struct FortUIScoreReport_GetCurrentPlayerState final
{
public:
	int32                                         ScoreReportIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetCurrentPlayerState) == 0x000008, "Wrong alignment on FortUIScoreReport_GetCurrentPlayerState");
static_assert(sizeof(FortUIScoreReport_GetCurrentPlayerState) == 0x000010, "Wrong size on FortUIScoreReport_GetCurrentPlayerState");
static_assert(offsetof(FortUIScoreReport_GetCurrentPlayerState, ScoreReportIndex) == 0x000000, "Member 'FortUIScoreReport_GetCurrentPlayerState::ScoreReportIndex' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetCurrentPlayerState, ReturnValue) == 0x000008, "Member 'FortUIScoreReport_GetCurrentPlayerState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetDifficultBonusMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortUIScoreReport_GetDifficultBonusMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetDifficultBonusMultiplier) == 0x000004, "Wrong alignment on FortUIScoreReport_GetDifficultBonusMultiplier");
static_assert(sizeof(FortUIScoreReport_GetDifficultBonusMultiplier) == 0x000004, "Wrong size on FortUIScoreReport_GetDifficultBonusMultiplier");
static_assert(offsetof(FortUIScoreReport_GetDifficultBonusMultiplier, ReturnValue) == 0x000000, "Member 'FortUIScoreReport_GetDifficultBonusMultiplier::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetDifficultBonusScore
// 0x0004 (0x0004 - 0x0000)
struct FortUIScoreReport_GetDifficultBonusScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetDifficultBonusScore) == 0x000004, "Wrong alignment on FortUIScoreReport_GetDifficultBonusScore");
static_assert(sizeof(FortUIScoreReport_GetDifficultBonusScore) == 0x000004, "Wrong size on FortUIScoreReport_GetDifficultBonusScore");
static_assert(offsetof(FortUIScoreReport_GetDifficultBonusScore, ReturnValue) == 0x000000, "Member 'FortUIScoreReport_GetDifficultBonusScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetLevelProgress
// 0x000C (0x000C - 0x0000)
struct FortUIScoreReport_GetLevelProgress final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayXp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetLevelProgress) == 0x000004, "Wrong alignment on FortUIScoreReport_GetLevelProgress");
static_assert(sizeof(FortUIScoreReport_GetLevelProgress) == 0x00000C, "Wrong size on FortUIScoreReport_GetLevelProgress");
static_assert(offsetof(FortUIScoreReport_GetLevelProgress, Level) == 0x000000, "Member 'FortUIScoreReport_GetLevelProgress::Level' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetLevelProgress, DisplayXp) == 0x000004, "Member 'FortUIScoreReport_GetLevelProgress::DisplayXp' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetLevelProgress, ReturnValue) == 0x000008, "Member 'FortUIScoreReport_GetLevelProgress::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct FortUIScoreReport_GetPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetPlayerCount) == 0x000004, "Wrong alignment on FortUIScoreReport_GetPlayerCount");
static_assert(sizeof(FortUIScoreReport_GetPlayerCount) == 0x000004, "Wrong size on FortUIScoreReport_GetPlayerCount");
static_assert(offsetof(FortUIScoreReport_GetPlayerCount, ReturnValue) == 0x000000, "Member 'FortUIScoreReport_GetPlayerCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetPlayerIDFromScoreReportIndex
// 0x0030 (0x0030 - 0x0000)
struct FortUIScoreReport_GetPlayerIDFromScoreReportIndex final
{
public:
	int32                                         ScoreReportIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       OutUniqueNetIdRepl;                                // 0x0008(0x0028)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetPlayerIDFromScoreReportIndex) == 0x000008, "Wrong alignment on FortUIScoreReport_GetPlayerIDFromScoreReportIndex");
static_assert(sizeof(FortUIScoreReport_GetPlayerIDFromScoreReportIndex) == 0x000030, "Wrong size on FortUIScoreReport_GetPlayerIDFromScoreReportIndex");
static_assert(offsetof(FortUIScoreReport_GetPlayerIDFromScoreReportIndex, ScoreReportIndex) == 0x000000, "Member 'FortUIScoreReport_GetPlayerIDFromScoreReportIndex::ScoreReportIndex' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetPlayerIDFromScoreReportIndex, OutUniqueNetIdRepl) == 0x000008, "Member 'FortUIScoreReport_GetPlayerIDFromScoreReportIndex::OutUniqueNetIdRepl' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetPlayerName
// 0x0020 (0x0020 - 0x0000)
struct FortUIScoreReport_GetPlayerName final
{
public:
	int32                                         ScoreReportIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetPlayerName) == 0x000008, "Wrong alignment on FortUIScoreReport_GetPlayerName");
static_assert(sizeof(FortUIScoreReport_GetPlayerName) == 0x000020, "Wrong size on FortUIScoreReport_GetPlayerName");
static_assert(offsetof(FortUIScoreReport_GetPlayerName, ScoreReportIndex) == 0x000000, "Member 'FortUIScoreReport_GetPlayerName::ScoreReportIndex' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetPlayerName, ReturnValue) == 0x000008, "Member 'FortUIScoreReport_GetPlayerName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetPlayerPlatform
// 0x0018 (0x0018 - 0x0000)
struct FortUIScoreReport_GetPlayerPlatform final
{
public:
	int32                                         ScoreReportIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetPlayerPlatform) == 0x000008, "Wrong alignment on FortUIScoreReport_GetPlayerPlatform");
static_assert(sizeof(FortUIScoreReport_GetPlayerPlatform) == 0x000018, "Wrong size on FortUIScoreReport_GetPlayerPlatform");
static_assert(offsetof(FortUIScoreReport_GetPlayerPlatform, ScoreReportIndex) == 0x000000, "Member 'FortUIScoreReport_GetPlayerPlatform::ScoreReportIndex' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetPlayerPlatform, ReturnValue) == 0x000008, "Member 'FortUIScoreReport_GetPlayerPlatform::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetPlayerScore
// 0x000C (0x000C - 0x0000)
struct FortUIScoreReport_GetPlayerScore final
{
public:
	int32                                         ScoreReportIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIScoreType                              ScoreType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetPlayerScore) == 0x000004, "Wrong alignment on FortUIScoreReport_GetPlayerScore");
static_assert(sizeof(FortUIScoreReport_GetPlayerScore) == 0x00000C, "Wrong size on FortUIScoreReport_GetPlayerScore");
static_assert(offsetof(FortUIScoreReport_GetPlayerScore, ScoreReportIndex) == 0x000000, "Member 'FortUIScoreReport_GetPlayerScore::ScoreReportIndex' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetPlayerScore, ScoreType) == 0x000004, "Member 'FortUIScoreReport_GetPlayerScore::ScoreType' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetPlayerScore, ReturnValue) == 0x000008, "Member 'FortUIScoreReport_GetPlayerScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetScoreReportIndex
// 0x0030 (0x0030 - 0x0000)
struct FortUIScoreReport_GetScoreReportIndex final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIScoreReport_GetScoreReportIndex) == 0x000008, "Wrong alignment on FortUIScoreReport_GetScoreReportIndex");
static_assert(sizeof(FortUIScoreReport_GetScoreReportIndex) == 0x000030, "Wrong size on FortUIScoreReport_GetScoreReportIndex");
static_assert(offsetof(FortUIScoreReport_GetScoreReportIndex, PlayerID) == 0x000000, "Member 'FortUIScoreReport_GetScoreReportIndex::PlayerID' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetScoreReportIndex, ReturnValue) == 0x000028, "Member 'FortUIScoreReport_GetScoreReportIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetScoreReportIndicesByPlayerID
// 0x0010 (0x0010 - 0x0000)
struct FortUIScoreReport_GetScoreReportIndicesByPlayerID final
{
public:
	TArray<int32>                                 SortedScoreReportIndices;                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetScoreReportIndicesByPlayerID) == 0x000008, "Wrong alignment on FortUIScoreReport_GetScoreReportIndicesByPlayerID");
static_assert(sizeof(FortUIScoreReport_GetScoreReportIndicesByPlayerID) == 0x000010, "Wrong size on FortUIScoreReport_GetScoreReportIndicesByPlayerID");
static_assert(offsetof(FortUIScoreReport_GetScoreReportIndicesByPlayerID, SortedScoreReportIndices) == 0x000000, "Member 'FortUIScoreReport_GetScoreReportIndicesByPlayerID::SortedScoreReportIndices' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetTeamScore
// 0x0008 (0x0008 - 0x0000)
struct FortUIScoreReport_GetTeamScore final
{
public:
	EFortUIScoreType                              ScoreType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetTeamScore) == 0x000004, "Wrong alignment on FortUIScoreReport_GetTeamScore");
static_assert(sizeof(FortUIScoreReport_GetTeamScore) == 0x000008, "Wrong size on FortUIScoreReport_GetTeamScore");
static_assert(offsetof(FortUIScoreReport_GetTeamScore, ScoreType) == 0x000000, "Member 'FortUIScoreReport_GetTeamScore::ScoreType' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetTeamScore, ReturnValue) == 0x000004, "Member 'FortUIScoreReport_GetTeamScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetXpInfo
// 0x0034 (0x0034 - 0x0000)
struct FortUIScoreReport_GetXpInfo final
{
public:
	int32                                         ScoreReportIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortUIXpInfo                          OutXpInfo;                                         // 0x0004(0x002C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIScoreReport_GetXpInfo) == 0x000004, "Wrong alignment on FortUIScoreReport_GetXpInfo");
static_assert(sizeof(FortUIScoreReport_GetXpInfo) == 0x000034, "Wrong size on FortUIScoreReport_GetXpInfo");
static_assert(offsetof(FortUIScoreReport_GetXpInfo, ScoreReportIndex) == 0x000000, "Member 'FortUIScoreReport_GetXpInfo::ScoreReportIndex' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetXpInfo, OutXpInfo) == 0x000004, "Member 'FortUIScoreReport_GetXpInfo::OutXpInfo' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetXpInfo, ReturnValue) == 0x000030, "Member 'FortUIScoreReport_GetXpInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.GetXpToCompleteLevel
// 0x0008 (0x0008 - 0x0000)
struct FortUIScoreReport_GetXpToCompleteLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIScoreReport_GetXpToCompleteLevel) == 0x000004, "Wrong alignment on FortUIScoreReport_GetXpToCompleteLevel");
static_assert(sizeof(FortUIScoreReport_GetXpToCompleteLevel) == 0x000008, "Wrong size on FortUIScoreReport_GetXpToCompleteLevel");
static_assert(offsetof(FortUIScoreReport_GetXpToCompleteLevel, Level) == 0x000000, "Member 'FortUIScoreReport_GetXpToCompleteLevel::Level' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_GetXpToCompleteLevel, ReturnValue) == 0x000004, "Member 'FortUIScoreReport_GetXpToCompleteLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIScoreReport.IsLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct FortUIScoreReport_IsLocalPlayer final
{
public:
	int32                                         ScoreReportIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIScoreReport_IsLocalPlayer) == 0x000004, "Wrong alignment on FortUIScoreReport_IsLocalPlayer");
static_assert(sizeof(FortUIScoreReport_IsLocalPlayer) == 0x000008, "Wrong size on FortUIScoreReport_IsLocalPlayer");
static_assert(offsetof(FortUIScoreReport_IsLocalPlayer, ScoreReportIndex) == 0x000000, "Member 'FortUIScoreReport_IsLocalPlayer::ScoreReportIndex' has a wrong offset!");
static_assert(offsetof(FortUIScoreReport_IsLocalPlayer, ReturnValue) == 0x000004, "Member 'FortUIScoreReport_IsLocalPlayer::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPlacementWidget.OnInsideGridStateChange
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolPlacementWidget_OnInsideGridStateChange final
{
public:
	bool                                          bInsideGrid;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPlacementWidget_OnInsideGridStateChange) == 0x000001, "Wrong alignment on HUDLayoutToolPlacementWidget_OnInsideGridStateChange");
static_assert(sizeof(HUDLayoutToolPlacementWidget_OnInsideGridStateChange) == 0x000001, "Wrong size on HUDLayoutToolPlacementWidget_OnInsideGridStateChange");
static_assert(offsetof(HUDLayoutToolPlacementWidget_OnInsideGridStateChange, bInsideGrid) == 0x000000, "Member 'HUDLayoutToolPlacementWidget_OnInsideGridStateChange::bInsideGrid' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPlacementWidget.OnLayoutVisibilityChanged
// 0x0004 (0x0004 - 0x0000)
struct HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged final
{
public:
	bool                                          bShowCombat;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBuild;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowEdit;                                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCreative;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged) == 0x000001, "Wrong alignment on HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged");
static_assert(sizeof(HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged) == 0x000004, "Wrong size on HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged");
static_assert(offsetof(HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged, bShowCombat) == 0x000000, "Member 'HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged::bShowCombat' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged, bShowBuild) == 0x000001, "Member 'HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged::bShowBuild' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged, bShowEdit) == 0x000002, "Member 'HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged::bShowEdit' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged, bShowCreative) == 0x000003, "Member 'HUDLayoutToolPlacementWidget_OnLayoutVisibilityChanged::bShowCreative' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPlacementWidget.OnWidgetSelected
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolPlacementWidget_OnWidgetSelected final
{
public:
	class UHUDLayoutToolPlacementWidget*          InSelectedWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPlacementWidget_OnWidgetSelected) == 0x000008, "Wrong alignment on HUDLayoutToolPlacementWidget_OnWidgetSelected");
static_assert(sizeof(HUDLayoutToolPlacementWidget_OnWidgetSelected) == 0x000008, "Wrong size on HUDLayoutToolPlacementWidget_OnWidgetSelected");
static_assert(offsetof(HUDLayoutToolPlacementWidget_OnWidgetSelected, InSelectedWidget) == 0x000000, "Member 'HUDLayoutToolPlacementWidget_OnWidgetSelected::InSelectedWidget' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPlacementWidget.BP_GetMobileVisualType
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolPlacementWidget_BP_GetMobileVisualType final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPlacementWidget_BP_GetMobileVisualType) == 0x000004, "Wrong alignment on HUDLayoutToolPlacementWidget_BP_GetMobileVisualType");
static_assert(sizeof(HUDLayoutToolPlacementWidget_BP_GetMobileVisualType) == 0x000008, "Wrong size on HUDLayoutToolPlacementWidget_BP_GetMobileVisualType");
static_assert(offsetof(HUDLayoutToolPlacementWidget_BP_GetMobileVisualType, ReturnValue) == 0x000000, "Member 'HUDLayoutToolPlacementWidget_BP_GetMobileVisualType::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPlacementWidget.CanEditVisibility
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolPlacementWidget_CanEditVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPlacementWidget_CanEditVisibility) == 0x000001, "Wrong alignment on HUDLayoutToolPlacementWidget_CanEditVisibility");
static_assert(sizeof(HUDLayoutToolPlacementWidget_CanEditVisibility) == 0x000001, "Wrong size on HUDLayoutToolPlacementWidget_CanEditVisibility");
static_assert(offsetof(HUDLayoutToolPlacementWidget_CanEditVisibility, ReturnValue) == 0x000000, "Member 'HUDLayoutToolPlacementWidget_CanEditVisibility::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPlacementWidget.GetIsOverlapping
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolPlacementWidget_GetIsOverlapping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPlacementWidget_GetIsOverlapping) == 0x000001, "Wrong alignment on HUDLayoutToolPlacementWidget_GetIsOverlapping");
static_assert(sizeof(HUDLayoutToolPlacementWidget_GetIsOverlapping) == 0x000001, "Wrong size on HUDLayoutToolPlacementWidget_GetIsOverlapping");
static_assert(offsetof(HUDLayoutToolPlacementWidget_GetIsOverlapping, ReturnValue) == 0x000000, "Member 'HUDLayoutToolPlacementWidget_GetIsOverlapping::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPlacementWidget.IsInsideGrid
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolPlacementWidget_IsInsideGrid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPlacementWidget_IsInsideGrid) == 0x000001, "Wrong alignment on HUDLayoutToolPlacementWidget_IsInsideGrid");
static_assert(sizeof(HUDLayoutToolPlacementWidget_IsInsideGrid) == 0x000001, "Wrong size on HUDLayoutToolPlacementWidget_IsInsideGrid");
static_assert(offsetof(HUDLayoutToolPlacementWidget_IsInsideGrid, ReturnValue) == 0x000000, "Member 'HUDLayoutToolPlacementWidget_IsInsideGrid::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaPlayerHitPointBarBase.OnDBNOStateChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaPlayerHitPointBarBase_OnDBNOStateChanged final
{
public:
	bool                                          IsDBNO;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerHitPointBarBase_OnDBNOStateChanged) == 0x000001, "Wrong alignment on AthenaPlayerHitPointBarBase_OnDBNOStateChanged");
static_assert(sizeof(AthenaPlayerHitPointBarBase_OnDBNOStateChanged) == 0x000001, "Wrong size on AthenaPlayerHitPointBarBase_OnDBNOStateChanged");
static_assert(offsetof(AthenaPlayerHitPointBarBase_OnDBNOStateChanged, IsDBNO) == 0x000000, "Member 'AthenaPlayerHitPointBarBase_OnDBNOStateChanged::IsDBNO' has a wrong offset!");

// Function FortniteUI.AthenaPlayerHitPointBarBase.OnMaxValueChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaPlayerHitPointBarBase_OnMaxValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerHitPointBarBase_OnMaxValueChanged) == 0x000004, "Wrong alignment on AthenaPlayerHitPointBarBase_OnMaxValueChanged");
static_assert(sizeof(AthenaPlayerHitPointBarBase_OnMaxValueChanged) == 0x000004, "Wrong size on AthenaPlayerHitPointBarBase_OnMaxValueChanged");
static_assert(offsetof(AthenaPlayerHitPointBarBase_OnMaxValueChanged, Value) == 0x000000, "Member 'AthenaPlayerHitPointBarBase_OnMaxValueChanged::Value' has a wrong offset!");

// Function FortniteUI.AthenaPlayerHitPointBarBase.OnValueChangedWithReason
// 0x0008 (0x0008 - 0x0000)
struct AthenaPlayerHitPointBarBase_OnValueChangedWithReason final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortHitPointModificationReason               Reason;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaPlayerHitPointBarBase_OnValueChangedWithReason) == 0x000004, "Wrong alignment on AthenaPlayerHitPointBarBase_OnValueChangedWithReason");
static_assert(sizeof(AthenaPlayerHitPointBarBase_OnValueChangedWithReason) == 0x000008, "Wrong size on AthenaPlayerHitPointBarBase_OnValueChangedWithReason");
static_assert(offsetof(AthenaPlayerHitPointBarBase_OnValueChangedWithReason, Value) == 0x000000, "Member 'AthenaPlayerHitPointBarBase_OnValueChangedWithReason::Value' has a wrong offset!");
static_assert(offsetof(AthenaPlayerHitPointBarBase_OnValueChangedWithReason, Reason) == 0x000004, "Member 'AthenaPlayerHitPointBarBase_OnValueChangedWithReason::Reason' has a wrong offset!");

// Function FortniteUI.AthenaPlayerHitPointBarBase.SetDataSource
// 0x0008 (0x0008 - 0x0000)
struct AthenaPlayerHitPointBarBase_SetDataSource final
{
public:
	class UAthenaPlayerViewModel*                 PlayerViewModel;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerHitPointBarBase_SetDataSource) == 0x000008, "Wrong alignment on AthenaPlayerHitPointBarBase_SetDataSource");
static_assert(sizeof(AthenaPlayerHitPointBarBase_SetDataSource) == 0x000008, "Wrong size on AthenaPlayerHitPointBarBase_SetDataSource");
static_assert(offsetof(AthenaPlayerHitPointBarBase_SetDataSource, PlayerViewModel) == 0x000000, "Member 'AthenaPlayerHitPointBarBase_SetDataSource::PlayerViewModel' has a wrong offset!");

// Function FortniteUI.AthenaPlayerHitPointBarBase.GetCurrentValuePercentage
// 0x0004 (0x0004 - 0x0000)
struct AthenaPlayerHitPointBarBase_GetCurrentValuePercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerHitPointBarBase_GetCurrentValuePercentage) == 0x000004, "Wrong alignment on AthenaPlayerHitPointBarBase_GetCurrentValuePercentage");
static_assert(sizeof(AthenaPlayerHitPointBarBase_GetCurrentValuePercentage) == 0x000004, "Wrong size on AthenaPlayerHitPointBarBase_GetCurrentValuePercentage");
static_assert(offsetof(AthenaPlayerHitPointBarBase_GetCurrentValuePercentage, ReturnValue) == 0x000000, "Member 'AthenaPlayerHitPointBarBase_GetCurrentValuePercentage::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaPlayerHitPointBarBase.GetLastValuePercentage
// 0x0004 (0x0004 - 0x0000)
struct AthenaPlayerHitPointBarBase_GetLastValuePercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerHitPointBarBase_GetLastValuePercentage) == 0x000004, "Wrong alignment on AthenaPlayerHitPointBarBase_GetLastValuePercentage");
static_assert(sizeof(AthenaPlayerHitPointBarBase_GetLastValuePercentage) == 0x000004, "Wrong size on AthenaPlayerHitPointBarBase_GetLastValuePercentage");
static_assert(offsetof(AthenaPlayerHitPointBarBase_GetLastValuePercentage, ReturnValue) == 0x000000, "Member 'AthenaPlayerHitPointBarBase_GetLastValuePercentage::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaAIKillsBase.SetKillsSourcePlayerController
// 0x0008 (0x0008 - 0x0000)
struct AthenaAIKillsBase_SetKillsSourcePlayerController final
{
public:
	class AFortPlayerControllerAthena*            InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIKillsBase_SetKillsSourcePlayerController) == 0x000008, "Wrong alignment on AthenaAIKillsBase_SetKillsSourcePlayerController");
static_assert(sizeof(AthenaAIKillsBase_SetKillsSourcePlayerController) == 0x000008, "Wrong size on AthenaAIKillsBase_SetKillsSourcePlayerController");
static_assert(offsetof(AthenaAIKillsBase_SetKillsSourcePlayerController, InPlayerController) == 0x000000, "Member 'AthenaAIKillsBase_SetKillsSourcePlayerController::InPlayerController' has a wrong offset!");

// Function FortniteUI.AthenaAIKillsBase.SetKillsSourcePlayerState
// 0x0008 (0x0008 - 0x0000)
struct AthenaAIKillsBase_SetKillsSourcePlayerState final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIKillsBase_SetKillsSourcePlayerState) == 0x000008, "Wrong alignment on AthenaAIKillsBase_SetKillsSourcePlayerState");
static_assert(sizeof(AthenaAIKillsBase_SetKillsSourcePlayerState) == 0x000008, "Wrong size on AthenaAIKillsBase_SetKillsSourcePlayerState");
static_assert(offsetof(AthenaAIKillsBase_SetKillsSourcePlayerState, InPlayerState) == 0x000000, "Member 'AthenaAIKillsBase_SetKillsSourcePlayerState::InPlayerState' has a wrong offset!");

// Function FortniteUI.AthenaAwardAlertBase.OnAwardGranted
// 0x0008 (0x0008 - 0x0000)
struct AthenaAwardAlertBase_OnAwardGranted final
{
public:
	class UFortAwardItemDefinition*               AwardDefinition;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAwardAlertBase_OnAwardGranted) == 0x000008, "Wrong alignment on AthenaAwardAlertBase_OnAwardGranted");
static_assert(sizeof(AthenaAwardAlertBase_OnAwardGranted) == 0x000008, "Wrong size on AthenaAwardAlertBase_OnAwardGranted");
static_assert(offsetof(AthenaAwardAlertBase_OnAwardGranted, AwardDefinition) == 0x000000, "Member 'AthenaAwardAlertBase_OnAwardGranted::AwardDefinition' has a wrong offset!");

// Function FortniteUI.AthenaAwardAlertBase.SetDataSource
// 0x0008 (0x0008 - 0x0000)
struct AthenaAwardAlertBase_SetDataSource final
{
public:
	class UAthenaPlayerViewModel*                 PlayerViewModel;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAwardAlertBase_SetDataSource) == 0x000008, "Wrong alignment on AthenaAwardAlertBase_SetDataSource");
static_assert(sizeof(AthenaAwardAlertBase_SetDataSource) == 0x000008, "Wrong size on AthenaAwardAlertBase_SetDataSource");
static_assert(offsetof(AthenaAwardAlertBase_SetDataSource, PlayerViewModel) == 0x000000, "Member 'AthenaAwardAlertBase_SetDataSource::PlayerViewModel' has a wrong offset!");

// Function FortniteUI.FortVehicleInfoIndicatorWidget.SetVehicle
// 0x0008 (0x0008 - 0x0000)
struct FortVehicleInfoIndicatorWidget_SetVehicle final
{
public:
	class AActor*                                 NewVehicle;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVehicleInfoIndicatorWidget_SetVehicle) == 0x000008, "Wrong alignment on FortVehicleInfoIndicatorWidget_SetVehicle");
static_assert(sizeof(FortVehicleInfoIndicatorWidget_SetVehicle) == 0x000008, "Wrong size on FortVehicleInfoIndicatorWidget_SetVehicle");
static_assert(offsetof(FortVehicleInfoIndicatorWidget_SetVehicle, NewVehicle) == 0x000000, "Member 'FortVehicleInfoIndicatorWidget_SetVehicle::NewVehicle' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapNodeTooltip.HandleCameraTypeChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaBattleMapNodeTooltip_HandleCameraTypeChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatorPC;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpectatorCameraType                          NewCameraType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaBattleMapNodeTooltip_HandleCameraTypeChanged) == 0x000008, "Wrong alignment on AthenaBattleMapNodeTooltip_HandleCameraTypeChanged");
static_assert(sizeof(AthenaBattleMapNodeTooltip_HandleCameraTypeChanged) == 0x000010, "Wrong size on AthenaBattleMapNodeTooltip_HandleCameraTypeChanged");
static_assert(offsetof(AthenaBattleMapNodeTooltip_HandleCameraTypeChanged, SpectatorPC) == 0x000000, "Member 'AthenaBattleMapNodeTooltip_HandleCameraTypeChanged::SpectatorPC' has a wrong offset!");
static_assert(offsetof(AthenaBattleMapNodeTooltip_HandleCameraTypeChanged, NewCameraType) == 0x000008, "Member 'AthenaBattleMapNodeTooltip_HandleCameraTypeChanged::NewCameraType' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapNodeTooltip.HandleHoveredNode
// 0x0010 (0x0010 - 0x0000)
struct AthenaBattleMapNodeTooltip_HandleHoveredNode final
{
public:
	const class ABattleMapNode*                   Node;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleMapHoveredReason                       Reason;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaBattleMapNodeTooltip_HandleHoveredNode) == 0x000008, "Wrong alignment on AthenaBattleMapNodeTooltip_HandleHoveredNode");
static_assert(sizeof(AthenaBattleMapNodeTooltip_HandleHoveredNode) == 0x000010, "Wrong size on AthenaBattleMapNodeTooltip_HandleHoveredNode");
static_assert(offsetof(AthenaBattleMapNodeTooltip_HandleHoveredNode, Node) == 0x000000, "Member 'AthenaBattleMapNodeTooltip_HandleHoveredNode::Node' has a wrong offset!");
static_assert(offsetof(AthenaBattleMapNodeTooltip_HandleHoveredNode, Reason) == 0x000008, "Member 'AthenaBattleMapNodeTooltip_HandleHoveredNode::Reason' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapNodeTooltip.HandleInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaBattleMapNodeTooltip_HandleInputMethodChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleMapNodeTooltip_HandleInputMethodChanged) == 0x000001, "Wrong alignment on AthenaBattleMapNodeTooltip_HandleInputMethodChanged");
static_assert(sizeof(AthenaBattleMapNodeTooltip_HandleInputMethodChanged) == 0x000001, "Wrong size on AthenaBattleMapNodeTooltip_HandleInputMethodChanged");
static_assert(offsetof(AthenaBattleMapNodeTooltip_HandleInputMethodChanged, NewInputType) == 0x000000, "Member 'AthenaBattleMapNodeTooltip_HandleInputMethodChanged::NewInputType' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapNodeTooltip.HandleTimelineModeChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaBattleMapNodeTooltip_HandleTimelineModeChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleMapNodeTooltip_HandleTimelineModeChanged) == 0x000001, "Wrong alignment on AthenaBattleMapNodeTooltip_HandleTimelineModeChanged");
static_assert(sizeof(AthenaBattleMapNodeTooltip_HandleTimelineModeChanged) == 0x000001, "Wrong size on AthenaBattleMapNodeTooltip_HandleTimelineModeChanged");
static_assert(offsetof(AthenaBattleMapNodeTooltip_HandleTimelineModeChanged, bEnabled) == 0x000000, "Member 'AthenaBattleMapNodeTooltip_HandleTimelineModeChanged::bEnabled' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapNodeTooltip.HandleUnhoveredNode
// 0x0010 (0x0010 - 0x0000)
struct AthenaBattleMapNodeTooltip_HandleUnhoveredNode final
{
public:
	const class ABattleMapNode*                   Node;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleMapHoveredReason                       Reason;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaBattleMapNodeTooltip_HandleUnhoveredNode) == 0x000008, "Wrong alignment on AthenaBattleMapNodeTooltip_HandleUnhoveredNode");
static_assert(sizeof(AthenaBattleMapNodeTooltip_HandleUnhoveredNode) == 0x000010, "Wrong size on AthenaBattleMapNodeTooltip_HandleUnhoveredNode");
static_assert(offsetof(AthenaBattleMapNodeTooltip_HandleUnhoveredNode, Node) == 0x000000, "Member 'AthenaBattleMapNodeTooltip_HandleUnhoveredNode::Node' has a wrong offset!");
static_assert(offsetof(AthenaBattleMapNodeTooltip_HandleUnhoveredNode, Reason) == 0x000008, "Member 'AthenaBattleMapNodeTooltip_HandleUnhoveredNode::Reason' has a wrong offset!");

// Function FortniteUI.AthenaPlayerKillsBase.SetKillsSourcePlayerController
// 0x0008 (0x0008 - 0x0000)
struct AthenaPlayerKillsBase_SetKillsSourcePlayerController final
{
public:
	class AFortPlayerControllerAthena*            InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerKillsBase_SetKillsSourcePlayerController) == 0x000008, "Wrong alignment on AthenaPlayerKillsBase_SetKillsSourcePlayerController");
static_assert(sizeof(AthenaPlayerKillsBase_SetKillsSourcePlayerController) == 0x000008, "Wrong size on AthenaPlayerKillsBase_SetKillsSourcePlayerController");
static_assert(offsetof(AthenaPlayerKillsBase_SetKillsSourcePlayerController, InPlayerController) == 0x000000, "Member 'AthenaPlayerKillsBase_SetKillsSourcePlayerController::InPlayerController' has a wrong offset!");

// Function FortniteUI.AthenaPlayerKillsBase.SetKillsSourcePlayerState
// 0x0008 (0x0008 - 0x0000)
struct AthenaPlayerKillsBase_SetKillsSourcePlayerState final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerKillsBase_SetKillsSourcePlayerState) == 0x000008, "Wrong alignment on AthenaPlayerKillsBase_SetKillsSourcePlayerState");
static_assert(sizeof(AthenaPlayerKillsBase_SetKillsSourcePlayerState) == 0x000008, "Wrong size on AthenaPlayerKillsBase_SetKillsSourcePlayerState");
static_assert(offsetof(AthenaPlayerKillsBase_SetKillsSourcePlayerState, InPlayerState) == 0x000000, "Member 'AthenaPlayerKillsBase_SetKillsSourcePlayerState::InPlayerState' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapTimelineWidget.HandleCameraTypeChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaBattleMapTimelineWidget_HandleCameraTypeChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatorPC;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpectatorCameraType                          NewCameraType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaBattleMapTimelineWidget_HandleCameraTypeChanged) == 0x000008, "Wrong alignment on AthenaBattleMapTimelineWidget_HandleCameraTypeChanged");
static_assert(sizeof(AthenaBattleMapTimelineWidget_HandleCameraTypeChanged) == 0x000010, "Wrong size on AthenaBattleMapTimelineWidget_HandleCameraTypeChanged");
static_assert(offsetof(AthenaBattleMapTimelineWidget_HandleCameraTypeChanged, SpectatorPC) == 0x000000, "Member 'AthenaBattleMapTimelineWidget_HandleCameraTypeChanged::SpectatorPC' has a wrong offset!");
static_assert(offsetof(AthenaBattleMapTimelineWidget_HandleCameraTypeChanged, NewCameraType) == 0x000008, "Member 'AthenaBattleMapTimelineWidget_HandleCameraTypeChanged::NewCameraType' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapTimelineWidget.HandleInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaBattleMapTimelineWidget_HandleInputMethodChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleMapTimelineWidget_HandleInputMethodChanged) == 0x000001, "Wrong alignment on AthenaBattleMapTimelineWidget_HandleInputMethodChanged");
static_assert(sizeof(AthenaBattleMapTimelineWidget_HandleInputMethodChanged) == 0x000001, "Wrong size on AthenaBattleMapTimelineWidget_HandleInputMethodChanged");
static_assert(offsetof(AthenaBattleMapTimelineWidget_HandleInputMethodChanged, NewInputType) == 0x000000, "Member 'AthenaBattleMapTimelineWidget_HandleInputMethodChanged::NewInputType' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapTimelineWidget.HandleSelectedNode
// 0x0008 (0x0008 - 0x0000)
struct AthenaBattleMapTimelineWidget_HandleSelectedNode final
{
public:
	const class ABattleMapNode*                   InSelectedNode;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleMapTimelineWidget_HandleSelectedNode) == 0x000008, "Wrong alignment on AthenaBattleMapTimelineWidget_HandleSelectedNode");
static_assert(sizeof(AthenaBattleMapTimelineWidget_HandleSelectedNode) == 0x000008, "Wrong size on AthenaBattleMapTimelineWidget_HandleSelectedNode");
static_assert(offsetof(AthenaBattleMapTimelineWidget_HandleSelectedNode, InSelectedNode) == 0x000000, "Member 'AthenaBattleMapTimelineWidget_HandleSelectedNode::InSelectedNode' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapTimelineWidget.HandleTimelineBackwardPressed
// 0x0001 (0x0001 - 0x0000)
struct AthenaBattleMapTimelineWidget_HandleTimelineBackwardPressed final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleMapTimelineWidget_HandleTimelineBackwardPressed) == 0x000001, "Wrong alignment on AthenaBattleMapTimelineWidget_HandleTimelineBackwardPressed");
static_assert(sizeof(AthenaBattleMapTimelineWidget_HandleTimelineBackwardPressed) == 0x000001, "Wrong size on AthenaBattleMapTimelineWidget_HandleTimelineBackwardPressed");
static_assert(offsetof(AthenaBattleMapTimelineWidget_HandleTimelineBackwardPressed, bPassThrough) == 0x000000, "Member 'AthenaBattleMapTimelineWidget_HandleTimelineBackwardPressed::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapTimelineWidget.HandleTimelineForwardPressed
// 0x0001 (0x0001 - 0x0000)
struct AthenaBattleMapTimelineWidget_HandleTimelineForwardPressed final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleMapTimelineWidget_HandleTimelineForwardPressed) == 0x000001, "Wrong alignment on AthenaBattleMapTimelineWidget_HandleTimelineForwardPressed");
static_assert(sizeof(AthenaBattleMapTimelineWidget_HandleTimelineForwardPressed) == 0x000001, "Wrong size on AthenaBattleMapTimelineWidget_HandleTimelineForwardPressed");
static_assert(offsetof(AthenaBattleMapTimelineWidget_HandleTimelineForwardPressed, bPassThrough) == 0x000000, "Member 'AthenaBattleMapTimelineWidget_HandleTimelineForwardPressed::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapTimelineWidget.HandleTimelineModeChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaBattleMapTimelineWidget_HandleTimelineModeChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleMapTimelineWidget_HandleTimelineModeChanged) == 0x000001, "Wrong alignment on AthenaBattleMapTimelineWidget_HandleTimelineModeChanged");
static_assert(sizeof(AthenaBattleMapTimelineWidget_HandleTimelineModeChanged) == 0x000001, "Wrong size on AthenaBattleMapTimelineWidget_HandleTimelineModeChanged");
static_assert(offsetof(AthenaBattleMapTimelineWidget_HandleTimelineModeChanged, bEnabled) == 0x000000, "Member 'AthenaBattleMapTimelineWidget_HandleTimelineModeChanged::bEnabled' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapTimelineWidget.HandleTimelineScrubToPressed
// 0x0001 (0x0001 - 0x0000)
struct AthenaBattleMapTimelineWidget_HandleTimelineScrubToPressed final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleMapTimelineWidget_HandleTimelineScrubToPressed) == 0x000001, "Wrong alignment on AthenaBattleMapTimelineWidget_HandleTimelineScrubToPressed");
static_assert(sizeof(AthenaBattleMapTimelineWidget_HandleTimelineScrubToPressed) == 0x000001, "Wrong size on AthenaBattleMapTimelineWidget_HandleTimelineScrubToPressed");
static_assert(offsetof(AthenaBattleMapTimelineWidget_HandleTimelineScrubToPressed, bPassThrough) == 0x000000, "Member 'AthenaBattleMapTimelineWidget_HandleTimelineScrubToPressed::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBattleMapTimelineWidget.HandleTimelineStopPressed
// 0x0001 (0x0001 - 0x0000)
struct AthenaBattleMapTimelineWidget_HandleTimelineStopPressed final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleMapTimelineWidget_HandleTimelineStopPressed) == 0x000001, "Wrong alignment on AthenaBattleMapTimelineWidget_HandleTimelineStopPressed");
static_assert(sizeof(AthenaBattleMapTimelineWidget_HandleTimelineStopPressed) == 0x000001, "Wrong size on AthenaBattleMapTimelineWidget_HandleTimelineStopPressed");
static_assert(offsetof(AthenaBattleMapTimelineWidget_HandleTimelineStopPressed, bPassThrough) == 0x000000, "Member 'AthenaBattleMapTimelineWidget_HandleTimelineStopPressed::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaEventScreenBase.OnPlayerDataAdded
// 0x0008 (0x0008 - 0x0000)
struct AthenaEventScreenBase_OnPlayerDataAdded final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventScreenBase_OnPlayerDataAdded) == 0x000008, "Wrong alignment on AthenaEventScreenBase_OnPlayerDataAdded");
static_assert(sizeof(AthenaEventScreenBase_OnPlayerDataAdded) == 0x000008, "Wrong size on AthenaEventScreenBase_OnPlayerDataAdded");
static_assert(offsetof(AthenaEventScreenBase_OnPlayerDataAdded, InPlayerData) == 0x000000, "Member 'AthenaEventScreenBase_OnPlayerDataAdded::InPlayerData' has a wrong offset!");

// Function FortniteUI.AthenaEventScreenBase.OnSquadDataAdded
// 0x0008 (0x0008 - 0x0000)
struct AthenaEventScreenBase_OnSquadDataAdded final
{
public:
	class UAthenaRemoteSquadViewData*             InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventScreenBase_OnSquadDataAdded) == 0x000008, "Wrong alignment on AthenaEventScreenBase_OnSquadDataAdded");
static_assert(sizeof(AthenaEventScreenBase_OnSquadDataAdded) == 0x000008, "Wrong size on AthenaEventScreenBase_OnSquadDataAdded");
static_assert(offsetof(AthenaEventScreenBase_OnSquadDataAdded, InPlayerData) == 0x000000, "Member 'AthenaEventScreenBase_OnSquadDataAdded::InPlayerData' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastAllPlayersGridBase.OnPlayerDataAdded_BP
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastAllPlayersGridBase_OnPlayerDataAdded_BP final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastAllPlayersGridBase_OnPlayerDataAdded_BP) == 0x000008, "Wrong alignment on AthenaBroadcastAllPlayersGridBase_OnPlayerDataAdded_BP");
static_assert(sizeof(AthenaBroadcastAllPlayersGridBase_OnPlayerDataAdded_BP) == 0x000008, "Wrong size on AthenaBroadcastAllPlayersGridBase_OnPlayerDataAdded_BP");
static_assert(offsetof(AthenaBroadcastAllPlayersGridBase_OnPlayerDataAdded_BP, InPlayerData) == 0x000000, "Member 'AthenaBroadcastAllPlayersGridBase_OnPlayerDataAdded_BP::InPlayerData' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastFollowedPlayerInfoBase.OnEliminatedStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaBroadcastFollowedPlayerInfoBase_OnEliminatedStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEliminated;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaBroadcastFollowedPlayerInfoBase_OnEliminatedStateChanged) == 0x000008, "Wrong alignment on AthenaBroadcastFollowedPlayerInfoBase_OnEliminatedStateChanged");
static_assert(sizeof(AthenaBroadcastFollowedPlayerInfoBase_OnEliminatedStateChanged) == 0x000010, "Wrong size on AthenaBroadcastFollowedPlayerInfoBase_OnEliminatedStateChanged");
static_assert(offsetof(AthenaBroadcastFollowedPlayerInfoBase_OnEliminatedStateChanged, PlayerData) == 0x000000, "Member 'AthenaBroadcastFollowedPlayerInfoBase_OnEliminatedStateChanged::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastFollowedPlayerInfoBase_OnEliminatedStateChanged, bIsEliminated) == 0x000008, "Member 'AthenaBroadcastFollowedPlayerInfoBase_OnEliminatedStateChanged::bIsEliminated' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastFollowedPlayerInfoBase.OnFollowedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatingPC;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       FollowedPlayerState;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerChanged) == 0x000008, "Wrong alignment on AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerChanged");
static_assert(sizeof(AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerChanged) == 0x000010, "Wrong size on AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerChanged");
static_assert(offsetof(AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerChanged, SpectatingPC) == 0x000000, "Member 'AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerChanged::SpectatingPC' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerChanged, FollowedPlayerState) == 0x000008, "Member 'AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerChanged::FollowedPlayerState' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastFollowedPlayerInfoBase.OnFollowedPlayerDataChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerDataChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InFollowedPlayerData;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerDataChanged) == 0x000008, "Wrong alignment on AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerDataChanged");
static_assert(sizeof(AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerDataChanged) == 0x000008, "Wrong size on AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerDataChanged");
static_assert(offsetof(AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerDataChanged, InFollowedPlayerData) == 0x000000, "Member 'AthenaBroadcastFollowedPlayerInfoBase_OnFollowedPlayerDataChanged::InFollowedPlayerData' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastFollowedPlayerInfoBase.OnPipModeChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastFollowedPlayerInfoBase_OnPipModeChanged final
{
public:
	bool                                          bPipModeEnabled;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastFollowedPlayerInfoBase_OnPipModeChanged) == 0x000001, "Wrong alignment on AthenaBroadcastFollowedPlayerInfoBase_OnPipModeChanged");
static_assert(sizeof(AthenaBroadcastFollowedPlayerInfoBase_OnPipModeChanged) == 0x000001, "Wrong size on AthenaBroadcastFollowedPlayerInfoBase_OnPipModeChanged");
static_assert(offsetof(AthenaBroadcastFollowedPlayerInfoBase_OnPipModeChanged, bPipModeEnabled) == 0x000000, "Member 'AthenaBroadcastFollowedPlayerInfoBase_OnPipModeChanged::bPipModeEnabled' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastFollowedPlayerInfoBase.OnVehicleStateChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaBroadcastFollowedPlayerInfoBase_OnVehicleStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewVehicle;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldVehicle;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastFollowedPlayerInfoBase_OnVehicleStateChanged) == 0x000008, "Wrong alignment on AthenaBroadcastFollowedPlayerInfoBase_OnVehicleStateChanged");
static_assert(sizeof(AthenaBroadcastFollowedPlayerInfoBase_OnVehicleStateChanged) == 0x000018, "Wrong size on AthenaBroadcastFollowedPlayerInfoBase_OnVehicleStateChanged");
static_assert(offsetof(AthenaBroadcastFollowedPlayerInfoBase_OnVehicleStateChanged, PlayerData) == 0x000000, "Member 'AthenaBroadcastFollowedPlayerInfoBase_OnVehicleStateChanged::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastFollowedPlayerInfoBase_OnVehicleStateChanged, NewVehicle) == 0x000008, "Member 'AthenaBroadcastFollowedPlayerInfoBase_OnVehicleStateChanged::NewVehicle' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastFollowedPlayerInfoBase_OnVehicleStateChanged, OldVehicle) == 0x000010, "Member 'AthenaBroadcastFollowedPlayerInfoBase_OnVehicleStateChanged::OldVehicle' has a wrong offset!");

// Function FortniteUI.FortMainTabsScreenBase.HandleFeatureNavigateRequest
// 0x0001 (0x0001 - 0x0000)
struct FortMainTabsScreenBase_HandleFeatureNavigateRequest final
{
public:
	EFortUIFeature                                Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMainTabsScreenBase_HandleFeatureNavigateRequest) == 0x000001, "Wrong alignment on FortMainTabsScreenBase_HandleFeatureNavigateRequest");
static_assert(sizeof(FortMainTabsScreenBase_HandleFeatureNavigateRequest) == 0x000001, "Wrong size on FortMainTabsScreenBase_HandleFeatureNavigateRequest");
static_assert(offsetof(FortMainTabsScreenBase_HandleFeatureNavigateRequest, Feature) == 0x000000, "Member 'FortMainTabsScreenBase_HandleFeatureNavigateRequest::Feature' has a wrong offset!");

// Function FortniteUI.FortMainTabsScreenBase.HandleFeatureStateChanged
// 0x0003 (0x0003 - 0x0000)
struct FortMainTabsScreenBase_HandleFeatureStateChanged final
{
public:
	EFortUIFeature                                ChangedFeature;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureState                           NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureStateReason                     Reason;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMainTabsScreenBase_HandleFeatureStateChanged) == 0x000001, "Wrong alignment on FortMainTabsScreenBase_HandleFeatureStateChanged");
static_assert(sizeof(FortMainTabsScreenBase_HandleFeatureStateChanged) == 0x000003, "Wrong size on FortMainTabsScreenBase_HandleFeatureStateChanged");
static_assert(offsetof(FortMainTabsScreenBase_HandleFeatureStateChanged, ChangedFeature) == 0x000000, "Member 'FortMainTabsScreenBase_HandleFeatureStateChanged::ChangedFeature' has a wrong offset!");
static_assert(offsetof(FortMainTabsScreenBase_HandleFeatureStateChanged, NewState) == 0x000001, "Member 'FortMainTabsScreenBase_HandleFeatureStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(FortMainTabsScreenBase_HandleFeatureStateChanged, Reason) == 0x000002, "Member 'FortMainTabsScreenBase_HandleFeatureStateChanged::Reason' has a wrong offset!");

// Function FortniteUI.FortMainTabsScreenBase.HandleMainTabCreated
// 0x0010 (0x0010 - 0x0000)
struct FortMainTabsScreenBase_HandleMainTabCreated final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButton*                          TabButton;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMainTabsScreenBase_HandleMainTabCreated) == 0x000008, "Wrong alignment on FortMainTabsScreenBase_HandleMainTabCreated");
static_assert(sizeof(FortMainTabsScreenBase_HandleMainTabCreated) == 0x000010, "Wrong size on FortMainTabsScreenBase_HandleMainTabCreated");
static_assert(offsetof(FortMainTabsScreenBase_HandleMainTabCreated, TabNameID) == 0x000000, "Member 'FortMainTabsScreenBase_HandleMainTabCreated::TabNameID' has a wrong offset!");
static_assert(offsetof(FortMainTabsScreenBase_HandleMainTabCreated, TabButton) == 0x000008, "Member 'FortMainTabsScreenBase_HandleMainTabCreated::TabButton' has a wrong offset!");

// Function FortniteUI.FortMainTabsScreenBase.HandleMainTabSelected
// 0x0008 (0x0008 - 0x0000)
struct FortMainTabsScreenBase_HandleMainTabSelected final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMainTabsScreenBase_HandleMainTabSelected) == 0x000004, "Wrong alignment on FortMainTabsScreenBase_HandleMainTabSelected");
static_assert(sizeof(FortMainTabsScreenBase_HandleMainTabSelected) == 0x000008, "Wrong size on FortMainTabsScreenBase_HandleMainTabSelected");
static_assert(offsetof(FortMainTabsScreenBase_HandleMainTabSelected, TabNameID) == 0x000000, "Member 'FortMainTabsScreenBase_HandleMainTabSelected::TabNameID' has a wrong offset!");

// Function FortniteUI.AthenaGamePhaseWidgetBase.HandleCountdownUpdate
// 0x0004 (0x0004 - 0x0000)
struct AthenaGamePhaseWidgetBase_HandleCountdownUpdate final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaGamePhaseWidgetBase_HandleCountdownUpdate) == 0x000004, "Wrong alignment on AthenaGamePhaseWidgetBase_HandleCountdownUpdate");
static_assert(sizeof(AthenaGamePhaseWidgetBase_HandleCountdownUpdate) == 0x000004, "Wrong size on AthenaGamePhaseWidgetBase_HandleCountdownUpdate");
static_assert(offsetof(AthenaGamePhaseWidgetBase_HandleCountdownUpdate, TimeRemaining) == 0x000000, "Member 'AthenaGamePhaseWidgetBase_HandleCountdownUpdate::TimeRemaining' has a wrong offset!");

// Function FortniteUI.AthenaGamePhaseWidgetBase.HandleGamePhaseStepChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaGamePhaseWidgetBase_HandleGamePhaseStepChanged final
{
public:
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaGamePhaseWidgetBase_HandleGamePhaseStepChanged) == 0x000001, "Wrong alignment on AthenaGamePhaseWidgetBase_HandleGamePhaseStepChanged");
static_assert(sizeof(AthenaGamePhaseWidgetBase_HandleGamePhaseStepChanged) == 0x000001, "Wrong size on AthenaGamePhaseWidgetBase_HandleGamePhaseStepChanged");
static_assert(offsetof(AthenaGamePhaseWidgetBase_HandleGamePhaseStepChanged, GamePhaseStep) == 0x000000, "Member 'AthenaGamePhaseWidgetBase_HandleGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function FortniteUI.AthenaGamePhaseWidgetBase.OnGamePhaseStepChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaGamePhaseWidgetBase_OnGamePhaseStepChanged final
{
public:
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaGamePhaseWidgetBase_OnGamePhaseStepChanged) == 0x000001, "Wrong alignment on AthenaGamePhaseWidgetBase_OnGamePhaseStepChanged");
static_assert(sizeof(AthenaGamePhaseWidgetBase_OnGamePhaseStepChanged) == 0x000001, "Wrong size on AthenaGamePhaseWidgetBase_OnGamePhaseStepChanged");
static_assert(offsetof(AthenaGamePhaseWidgetBase_OnGamePhaseStepChanged, GamePhaseStep) == 0x000000, "Member 'AthenaGamePhaseWidgetBase_OnGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function FortniteUI.AthenaGamePhaseWidgetBase.OnGameStateSet
// 0x0008 (0x0008 - 0x0000)
struct AthenaGamePhaseWidgetBase_OnGameStateSet final
{
public:
	class AFortGameState*                         InGameState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaGamePhaseWidgetBase_OnGameStateSet) == 0x000008, "Wrong alignment on AthenaGamePhaseWidgetBase_OnGameStateSet");
static_assert(sizeof(AthenaGamePhaseWidgetBase_OnGameStateSet) == 0x000008, "Wrong size on AthenaGamePhaseWidgetBase_OnGameStateSet");
static_assert(offsetof(AthenaGamePhaseWidgetBase_OnGameStateSet, InGameState) == 0x000000, "Member 'AthenaGamePhaseWidgetBase_OnGameStateSet::InGameState' has a wrong offset!");

// Function FortniteUI.AthenaGamePhaseWidgetBase.OnStormShieldUMGComponentAdded
// 0x0008 (0x0008 - 0x0000)
struct AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentAdded final
{
public:
	class UFortStormShieldUMGComponent*           AddedComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentAdded) == 0x000008, "Wrong alignment on AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentAdded");
static_assert(sizeof(AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentAdded) == 0x000008, "Wrong size on AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentAdded");
static_assert(offsetof(AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentAdded, AddedComponent) == 0x000000, "Member 'AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentAdded::AddedComponent' has a wrong offset!");

// Function FortniteUI.AthenaGamePhaseWidgetBase.OnStormShieldUMGComponentRemoved
// 0x0008 (0x0008 - 0x0000)
struct AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentRemoved final
{
public:
	class UFortStormShieldUMGComponent*           ComponentAboutToBeRemoved;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentRemoved) == 0x000008, "Wrong alignment on AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentRemoved");
static_assert(sizeof(AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentRemoved) == 0x000008, "Wrong size on AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentRemoved");
static_assert(offsetof(AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentRemoved, ComponentAboutToBeRemoved) == 0x000000, "Member 'AthenaGamePhaseWidgetBase_OnStormShieldUMGComponentRemoved::ComponentAboutToBeRemoved' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastGamePhaseWidget.SetMinigameOverride
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastGamePhaseWidget_SetMinigameOverride final
{
public:
	class AFortMinigame*                          Minigame;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastGamePhaseWidget_SetMinigameOverride) == 0x000008, "Wrong alignment on AthenaBroadcastGamePhaseWidget_SetMinigameOverride");
static_assert(sizeof(AthenaBroadcastGamePhaseWidget_SetMinigameOverride) == 0x000008, "Wrong size on AthenaBroadcastGamePhaseWidget_SetMinigameOverride");
static_assert(offsetof(AthenaBroadcastGamePhaseWidget_SetMinigameOverride, Minigame) == 0x000000, "Member 'AthenaBroadcastGamePhaseWidget_SetMinigameOverride::Minigame' has a wrong offset!");

// Function FortniteUI.RumbleLeaderBoard.OnThresholdPassed
// 0x0018 (0x0018 - 0x0000)
struct RumbleLeaderBoard_OnThresholdPassed final
{
public:
	struct FSoundThreshold                        SoundThreshold;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ThresholdIndex;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RumbleLeaderBoard_OnThresholdPassed) == 0x000008, "Wrong alignment on RumbleLeaderBoard_OnThresholdPassed");
static_assert(sizeof(RumbleLeaderBoard_OnThresholdPassed) == 0x000018, "Wrong size on RumbleLeaderBoard_OnThresholdPassed");
static_assert(offsetof(RumbleLeaderBoard_OnThresholdPassed, SoundThreshold) == 0x000000, "Member 'RumbleLeaderBoard_OnThresholdPassed::SoundThreshold' has a wrong offset!");
static_assert(offsetof(RumbleLeaderBoard_OnThresholdPassed, ThresholdIndex) == 0x000010, "Member 'RumbleLeaderBoard_OnThresholdPassed::ThresholdIndex' has a wrong offset!");
static_assert(offsetof(RumbleLeaderBoard_OnThresholdPassed, bIsLocalPlayer) == 0x000014, "Member 'RumbleLeaderBoard_OnThresholdPassed::bIsLocalPlayer' has a wrong offset!");

// Function FortniteUI.RumbleLeaderBoard.SetGoalValue
// 0x0004 (0x0004 - 0x0000)
struct RumbleLeaderBoard_SetGoalValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RumbleLeaderBoard_SetGoalValue) == 0x000004, "Wrong alignment on RumbleLeaderBoard_SetGoalValue");
static_assert(sizeof(RumbleLeaderBoard_SetGoalValue) == 0x000004, "Wrong size on RumbleLeaderBoard_SetGoalValue");
static_assert(offsetof(RumbleLeaderBoard_SetGoalValue, NewValue) == 0x000000, "Member 'RumbleLeaderBoard_SetGoalValue::NewValue' has a wrong offset!");

// Function FortniteUI.RumbleLeaderBoard.UpdateVisuals
// 0x0010 (0x0010 - 0x0000)
struct RumbleLeaderBoard_UpdateVisuals final
{
public:
	TArray<struct FFortInGameLeaderboardPlacementData> Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RumbleLeaderBoard_UpdateVisuals) == 0x000008, "Wrong alignment on RumbleLeaderBoard_UpdateVisuals");
static_assert(sizeof(RumbleLeaderBoard_UpdateVisuals) == 0x000010, "Wrong size on RumbleLeaderBoard_UpdateVisuals");
static_assert(offsetof(RumbleLeaderBoard_UpdateVisuals, Data) == 0x000000, "Member 'RumbleLeaderBoard_UpdateVisuals::Data' has a wrong offset!");

// Function FortniteUI.RumbleLeaderBoard.UpdateWidget
// 0x0010 (0x0010 - 0x0000)
struct RumbleLeaderBoard_UpdateWidget final
{
public:
	TArray<struct FFortInGameLeaderboardPlacementData> Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RumbleLeaderBoard_UpdateWidget) == 0x000008, "Wrong alignment on RumbleLeaderBoard_UpdateWidget");
static_assert(sizeof(RumbleLeaderBoard_UpdateWidget) == 0x000010, "Wrong size on RumbleLeaderBoard_UpdateWidget");
static_assert(offsetof(RumbleLeaderBoard_UpdateWidget, Data) == 0x000000, "Member 'RumbleLeaderBoard_UpdateWidget::Data' has a wrong offset!");

// Function FortniteUI.AthenaBaseStatView.GetStat
// 0x000C (0x000C - 0x0000)
struct AthenaBaseStatView_GetStat final
{
public:
	struct FGameplayTag                           InStat;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBaseStatView_GetStat) == 0x000004, "Wrong alignment on AthenaBaseStatView_GetStat");
static_assert(sizeof(AthenaBaseStatView_GetStat) == 0x00000C, "Wrong size on AthenaBaseStatView_GetStat");
static_assert(offsetof(AthenaBaseStatView_GetStat, InStat) == 0x000000, "Member 'AthenaBaseStatView_GetStat::InStat' has a wrong offset!");
static_assert(offsetof(AthenaBaseStatView_GetStat, ReturnValue) == 0x000008, "Member 'AthenaBaseStatView_GetStat::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaMatchStatView.GetMatchEndTime
// 0x0008 (0x0008 - 0x0000)
struct AthenaMatchStatView_GetMatchEndTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMatchStatView_GetMatchEndTime) == 0x000008, "Wrong alignment on AthenaMatchStatView_GetMatchEndTime");
static_assert(sizeof(AthenaMatchStatView_GetMatchEndTime) == 0x000008, "Wrong size on AthenaMatchStatView_GetMatchEndTime");
static_assert(offsetof(AthenaMatchStatView_GetMatchEndTime, ReturnValue) == 0x000000, "Member 'AthenaMatchStatView_GetMatchEndTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaMatchStatView.GetMatchID
// 0x0010 (0x0010 - 0x0000)
struct AthenaMatchStatView_GetMatchID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMatchStatView_GetMatchID) == 0x000008, "Wrong alignment on AthenaMatchStatView_GetMatchID");
static_assert(sizeof(AthenaMatchStatView_GetMatchID) == 0x000010, "Wrong size on AthenaMatchStatView_GetMatchID");
static_assert(offsetof(AthenaMatchStatView_GetMatchID, ReturnValue) == 0x000000, "Member 'AthenaMatchStatView_GetMatchID::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaMatchStatView.GetSortedWeaponViews
// 0x0018 (0x0018 - 0x0000)
struct AthenaMatchStatView_GetSortedWeaponViews final
{
public:
	struct FGameplayTag                           InStat;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAthenaWeaponStatView*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMatchStatView_GetSortedWeaponViews) == 0x000008, "Wrong alignment on AthenaMatchStatView_GetSortedWeaponViews");
static_assert(sizeof(AthenaMatchStatView_GetSortedWeaponViews) == 0x000018, "Wrong size on AthenaMatchStatView_GetSortedWeaponViews");
static_assert(offsetof(AthenaMatchStatView_GetSortedWeaponViews, InStat) == 0x000000, "Member 'AthenaMatchStatView_GetSortedWeaponViews::InStat' has a wrong offset!");
static_assert(offsetof(AthenaMatchStatView_GetSortedWeaponViews, ReturnValue) == 0x000008, "Member 'AthenaMatchStatView_GetSortedWeaponViews::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaMatchStatView.GetWeaponViewHighestStat
// 0x0010 (0x0010 - 0x0000)
struct AthenaMatchStatView_GetWeaponViewHighestStat final
{
public:
	struct FGameplayTag                           InStat;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaWeaponStatView*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMatchStatView_GetWeaponViewHighestStat) == 0x000008, "Wrong alignment on AthenaMatchStatView_GetWeaponViewHighestStat");
static_assert(sizeof(AthenaMatchStatView_GetWeaponViewHighestStat) == 0x000010, "Wrong size on AthenaMatchStatView_GetWeaponViewHighestStat");
static_assert(offsetof(AthenaMatchStatView_GetWeaponViewHighestStat, InStat) == 0x000000, "Member 'AthenaMatchStatView_GetWeaponViewHighestStat::InStat' has a wrong offset!");
static_assert(offsetof(AthenaMatchStatView_GetWeaponViewHighestStat, ReturnValue) == 0x000008, "Member 'AthenaMatchStatView_GetWeaponViewHighestStat::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaMatchStatView.GetWeaponViews
// 0x0010 (0x0010 - 0x0000)
struct AthenaMatchStatView_GetWeaponViews final
{
public:
	TArray<class UAthenaWeaponStatView*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMatchStatView_GetWeaponViews) == 0x000008, "Wrong alignment on AthenaMatchStatView_GetWeaponViews");
static_assert(sizeof(AthenaMatchStatView_GetWeaponViews) == 0x000010, "Wrong size on AthenaMatchStatView_GetWeaponViews");
static_assert(offsetof(AthenaMatchStatView_GetWeaponViews, ReturnValue) == 0x000000, "Member 'AthenaMatchStatView_GetWeaponViews::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.DynamicHandleLoadingScreenVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_NUI_DynamicHandleLoadingScreenVisibilityChanged final
{
public:
	bool                                          Param_IsVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_NUI_DynamicHandleLoadingScreenVisibilityChanged) == 0x000001, "Wrong alignment on FortUIStateWidget_NUI_DynamicHandleLoadingScreenVisibilityChanged");
static_assert(sizeof(FortUIStateWidget_NUI_DynamicHandleLoadingScreenVisibilityChanged) == 0x000001, "Wrong size on FortUIStateWidget_NUI_DynamicHandleLoadingScreenVisibilityChanged");
static_assert(offsetof(FortUIStateWidget_NUI_DynamicHandleLoadingScreenVisibilityChanged, Param_IsVisible) == 0x000000, "Member 'FortUIStateWidget_NUI_DynamicHandleLoadingScreenVisibilityChanged::Param_IsVisible' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.OnEnterState
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_NUI_OnEnterState final
{
public:
	EFortUIState                                  PreviousUIState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_NUI_OnEnterState) == 0x000001, "Wrong alignment on FortUIStateWidget_NUI_OnEnterState");
static_assert(sizeof(FortUIStateWidget_NUI_OnEnterState) == 0x000001, "Wrong size on FortUIStateWidget_NUI_OnEnterState");
static_assert(offsetof(FortUIStateWidget_NUI_OnEnterState, PreviousUIState) == 0x000000, "Member 'FortUIStateWidget_NUI_OnEnterState::PreviousUIState' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.OnExitState
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_NUI_OnExitState final
{
public:
	EFortUIState                                  NextUIState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_NUI_OnExitState) == 0x000001, "Wrong alignment on FortUIStateWidget_NUI_OnExitState");
static_assert(sizeof(FortUIStateWidget_NUI_OnExitState) == 0x000001, "Wrong size on FortUIStateWidget_NUI_OnExitState");
static_assert(offsetof(FortUIStateWidget_NUI_OnExitState, NextUIState) == 0x000000, "Member 'FortUIStateWidget_NUI_OnExitState::NextUIState' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.OnFrontEndVisibilityUpdated
// 0x0003 (0x0003 - 0x0000)
struct FortUIStateWidget_NUI_OnFrontEndVisibilityUpdated final
{
public:
	bool                                          bHideHeader;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideFooter;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChatWidget;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_NUI_OnFrontEndVisibilityUpdated) == 0x000001, "Wrong alignment on FortUIStateWidget_NUI_OnFrontEndVisibilityUpdated");
static_assert(sizeof(FortUIStateWidget_NUI_OnFrontEndVisibilityUpdated) == 0x000003, "Wrong size on FortUIStateWidget_NUI_OnFrontEndVisibilityUpdated");
static_assert(offsetof(FortUIStateWidget_NUI_OnFrontEndVisibilityUpdated, bHideHeader) == 0x000000, "Member 'FortUIStateWidget_NUI_OnFrontEndVisibilityUpdated::bHideHeader' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_NUI_OnFrontEndVisibilityUpdated, bHideFooter) == 0x000001, "Member 'FortUIStateWidget_NUI_OnFrontEndVisibilityUpdated::bHideFooter' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_NUI_OnFrontEndVisibilityUpdated, bHideChatWidget) == 0x000002, "Member 'FortUIStateWidget_NUI_OnFrontEndVisibilityUpdated::bHideChatWidget' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.OnHUDScaleChanged
// 0x0004 (0x0004 - 0x0000)
struct FortUIStateWidget_NUI_OnHUDScaleChanged final
{
public:
	float                                         HUDScale;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_NUI_OnHUDScaleChanged) == 0x000004, "Wrong alignment on FortUIStateWidget_NUI_OnHUDScaleChanged");
static_assert(sizeof(FortUIStateWidget_NUI_OnHUDScaleChanged) == 0x000004, "Wrong size on FortUIStateWidget_NUI_OnHUDScaleChanged");
static_assert(offsetof(FortUIStateWidget_NUI_OnHUDScaleChanged, HUDScale) == 0x000000, "Member 'FortUIStateWidget_NUI_OnHUDScaleChanged::HUDScale' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.OnLoadingScreenVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_NUI_OnLoadingScreenVisibilityChanged final
{
public:
	bool                                          Param_IsVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_NUI_OnLoadingScreenVisibilityChanged) == 0x000001, "Wrong alignment on FortUIStateWidget_NUI_OnLoadingScreenVisibilityChanged");
static_assert(sizeof(FortUIStateWidget_NUI_OnLoadingScreenVisibilityChanged) == 0x000001, "Wrong size on FortUIStateWidget_NUI_OnLoadingScreenVisibilityChanged");
static_assert(offsetof(FortUIStateWidget_NUI_OnLoadingScreenVisibilityChanged, Param_IsVisible) == 0x000000, "Member 'FortUIStateWidget_NUI_OnLoadingScreenVisibilityChanged::Param_IsVisible' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.PopContentWidget
// 0x0008 (0x0008 - 0x0000)
struct FortUIStateWidget_NUI_PopContentWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_NUI_PopContentWidget) == 0x000008, "Wrong alignment on FortUIStateWidget_NUI_PopContentWidget");
static_assert(sizeof(FortUIStateWidget_NUI_PopContentWidget) == 0x000008, "Wrong size on FortUIStateWidget_NUI_PopContentWidget");
static_assert(offsetof(FortUIStateWidget_NUI_PopContentWidget, ReturnValue) == 0x000000, "Member 'FortUIStateWidget_NUI_PopContentWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.PopContentWidgetInternal
// 0x0010 (0x0010 - 0x0000)
struct FortUIStateWidget_NUI_PopContentWidgetInternal final
{
public:
	struct FContentPushState                      State;                                             // 0x0000(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_NUI_PopContentWidgetInternal) == 0x000008, "Wrong alignment on FortUIStateWidget_NUI_PopContentWidgetInternal");
static_assert(sizeof(FortUIStateWidget_NUI_PopContentWidgetInternal) == 0x000010, "Wrong size on FortUIStateWidget_NUI_PopContentWidgetInternal");
static_assert(offsetof(FortUIStateWidget_NUI_PopContentWidgetInternal, State) == 0x000000, "Member 'FortUIStateWidget_NUI_PopContentWidgetInternal::State' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_NUI_PopContentWidgetInternal, ReturnValue) == 0x000008, "Member 'FortUIStateWidget_NUI_PopContentWidgetInternal::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.PushContentWidget
// 0x0008 (0x0008 - 0x0000)
struct FortUIStateWidget_NUI_PushContentWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_NUI_PushContentWidget) == 0x000008, "Wrong alignment on FortUIStateWidget_NUI_PushContentWidget");
static_assert(sizeof(FortUIStateWidget_NUI_PushContentWidget) == 0x000008, "Wrong size on FortUIStateWidget_NUI_PushContentWidget");
static_assert(offsetof(FortUIStateWidget_NUI_PushContentWidget, Widget) == 0x000000, "Member 'FortUIStateWidget_NUI_PushContentWidget::Widget' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.PushContentWidgetAdvanced
// 0x0010 (0x0010 - 0x0000)
struct FortUIStateWidget_NUI_PushContentWidgetAdvanced final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideHeader;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideFooter;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChatWidget;                                   // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIStateWidget_NUI_PushContentWidgetAdvanced) == 0x000008, "Wrong alignment on FortUIStateWidget_NUI_PushContentWidgetAdvanced");
static_assert(sizeof(FortUIStateWidget_NUI_PushContentWidgetAdvanced) == 0x000010, "Wrong size on FortUIStateWidget_NUI_PushContentWidgetAdvanced");
static_assert(offsetof(FortUIStateWidget_NUI_PushContentWidgetAdvanced, Widget) == 0x000000, "Member 'FortUIStateWidget_NUI_PushContentWidgetAdvanced::Widget' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_NUI_PushContentWidgetAdvanced, bHideHeader) == 0x000008, "Member 'FortUIStateWidget_NUI_PushContentWidgetAdvanced::bHideHeader' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_NUI_PushContentWidgetAdvanced, bHideFooter) == 0x000009, "Member 'FortUIStateWidget_NUI_PushContentWidgetAdvanced::bHideFooter' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_NUI_PushContentWidgetAdvanced, bHideChatWidget) == 0x00000A, "Member 'FortUIStateWidget_NUI_PushContentWidgetAdvanced::bHideChatWidget' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.PushContentWidgetInternal
// 0x0010 (0x0010 - 0x0000)
struct FortUIStateWidget_NUI_PushContentWidgetInternal final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FContentPushState                      State;                                             // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIStateWidget_NUI_PushContentWidgetInternal) == 0x000008, "Wrong alignment on FortUIStateWidget_NUI_PushContentWidgetInternal");
static_assert(sizeof(FortUIStateWidget_NUI_PushContentWidgetInternal) == 0x000010, "Wrong size on FortUIStateWidget_NUI_PushContentWidgetInternal");
static_assert(offsetof(FortUIStateWidget_NUI_PushContentWidgetInternal, Widget) == 0x000000, "Member 'FortUIStateWidget_NUI_PushContentWidgetInternal::Widget' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_NUI_PushContentWidgetInternal, State) == 0x000008, "Member 'FortUIStateWidget_NUI_PushContentWidgetInternal::State' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_NUI.SetFrontEndVisibility
// 0x0003 (0x0003 - 0x0000)
struct FortUIStateWidget_NUI_SetFrontEndVisibility final
{
public:
	bool                                          bHideHeader;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideFooter;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChatWidget;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_NUI_SetFrontEndVisibility) == 0x000001, "Wrong alignment on FortUIStateWidget_NUI_SetFrontEndVisibility");
static_assert(sizeof(FortUIStateWidget_NUI_SetFrontEndVisibility) == 0x000003, "Wrong size on FortUIStateWidget_NUI_SetFrontEndVisibility");
static_assert(offsetof(FortUIStateWidget_NUI_SetFrontEndVisibility, bHideHeader) == 0x000000, "Member 'FortUIStateWidget_NUI_SetFrontEndVisibility::bHideHeader' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_NUI_SetFrontEndVisibility, bHideFooter) == 0x000001, "Member 'FortUIStateWidget_NUI_SetFrontEndVisibility::bHideFooter' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_NUI_SetFrontEndVisibility, bHideChatWidget) == 0x000002, "Member 'FortUIStateWidget_NUI_SetFrontEndVisibility::bHideChatWidget' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.HandleCursorModeChanging
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDBase_HandleCursorModeChanging final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_HandleCursorModeChanging) == 0x000001, "Wrong alignment on AthenaHUDBase_HandleCursorModeChanging");
static_assert(sizeof(AthenaHUDBase_HandleCursorModeChanging) == 0x000001, "Wrong size on AthenaHUDBase_HandleCursorModeChanging");
static_assert(offsetof(AthenaHUDBase_HandleCursorModeChanging, bCursorModeEnabled) == 0x000000, "Member 'AthenaHUDBase_HandleCursorModeChanging::bCursorModeEnabled' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.HandleEnteredVolume
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDBase_HandleEnteredVolume final
{
public:
	class APlayerState*                           ClientState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortVolume*                            Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_HandleEnteredVolume) == 0x000008, "Wrong alignment on AthenaHUDBase_HandleEnteredVolume");
static_assert(sizeof(AthenaHUDBase_HandleEnteredVolume) == 0x000010, "Wrong size on AthenaHUDBase_HandleEnteredVolume");
static_assert(offsetof(AthenaHUDBase_HandleEnteredVolume, ClientState) == 0x000000, "Member 'AthenaHUDBase_HandleEnteredVolume::ClientState' has a wrong offset!");
static_assert(offsetof(AthenaHUDBase_HandleEnteredVolume, Volume) == 0x000008, "Member 'AthenaHUDBase_HandleEnteredVolume::Volume' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.HandleExitVolume
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDBase_HandleExitVolume final
{
public:
	class APlayerState*                           ClientState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortVolume*                            Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_HandleExitVolume) == 0x000008, "Wrong alignment on AthenaHUDBase_HandleExitVolume");
static_assert(sizeof(AthenaHUDBase_HandleExitVolume) == 0x000010, "Wrong size on AthenaHUDBase_HandleExitVolume");
static_assert(offsetof(AthenaHUDBase_HandleExitVolume, ClientState) == 0x000000, "Member 'AthenaHUDBase_HandleExitVolume::ClientState' has a wrong offset!");
static_assert(offsetof(AthenaHUDBase_HandleExitVolume, Volume) == 0x000008, "Member 'AthenaHUDBase_HandleExitVolume::Volume' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.HandleUpdateMinigameUIExtensions
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDBase_HandleUpdateMinigameUIExtensions final
{
public:
	class AFortMinigame*                          Minigame;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_HandleUpdateMinigameUIExtensions) == 0x000008, "Wrong alignment on AthenaHUDBase_HandleUpdateMinigameUIExtensions");
static_assert(sizeof(AthenaHUDBase_HandleUpdateMinigameUIExtensions) == 0x000008, "Wrong size on AthenaHUDBase_HandleUpdateMinigameUIExtensions");
static_assert(offsetof(AthenaHUDBase_HandleUpdateMinigameUIExtensions, Minigame) == 0x000000, "Member 'AthenaHUDBase_HandleUpdateMinigameUIExtensions::Minigame' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.HandleVolumeLoaded
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDBase_HandleVolumeLoaded final
{
public:
	class APlayerState*                           ClientState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortVolume*                            Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_HandleVolumeLoaded) == 0x000008, "Wrong alignment on AthenaHUDBase_HandleVolumeLoaded");
static_assert(sizeof(AthenaHUDBase_HandleVolumeLoaded) == 0x000010, "Wrong size on AthenaHUDBase_HandleVolumeLoaded");
static_assert(offsetof(AthenaHUDBase_HandleVolumeLoaded, ClientState) == 0x000000, "Member 'AthenaHUDBase_HandleVolumeLoaded::ClientState' has a wrong offset!");
static_assert(offsetof(AthenaHUDBase_HandleVolumeLoaded, Volume) == 0x000008, "Member 'AthenaHUDBase_HandleVolumeLoaded::Volume' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.HandleVolumeStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDBase_HandleVolumeStateChanged final
{
public:
	EVolumeState                                  NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortVolume*                            Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_HandleVolumeStateChanged) == 0x000008, "Wrong alignment on AthenaHUDBase_HandleVolumeStateChanged");
static_assert(sizeof(AthenaHUDBase_HandleVolumeStateChanged) == 0x000010, "Wrong size on AthenaHUDBase_HandleVolumeStateChanged");
static_assert(offsetof(AthenaHUDBase_HandleVolumeStateChanged, NewState) == 0x000000, "Member 'AthenaHUDBase_HandleVolumeStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(AthenaHUDBase_HandleVolumeStateChanged, Volume) == 0x000008, "Member 'AthenaHUDBase_HandleVolumeStateChanged::Volume' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.HandleVolumeUnloaded
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDBase_HandleVolumeUnloaded final
{
public:
	class APlayerState*                           ClientState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortVolume*                            Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_HandleVolumeUnloaded) == 0x000008, "Wrong alignment on AthenaHUDBase_HandleVolumeUnloaded");
static_assert(sizeof(AthenaHUDBase_HandleVolumeUnloaded) == 0x000010, "Wrong size on AthenaHUDBase_HandleVolumeUnloaded");
static_assert(offsetof(AthenaHUDBase_HandleVolumeUnloaded, ClientState) == 0x000000, "Member 'AthenaHUDBase_HandleVolumeUnloaded::ClientState' has a wrong offset!");
static_assert(offsetof(AthenaHUDBase_HandleVolumeUnloaded, Volume) == 0x000008, "Member 'AthenaHUDBase_HandleVolumeUnloaded::Volume' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.OnMinigameHideHUD
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDBase_OnMinigameHideHUD final
{
public:
	bool                                          bLoading;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_OnMinigameHideHUD) == 0x000001, "Wrong alignment on AthenaHUDBase_OnMinigameHideHUD");
static_assert(sizeof(AthenaHUDBase_OnMinigameHideHUD) == 0x000001, "Wrong size on AthenaHUDBase_OnMinigameHideHUD");
static_assert(offsetof(AthenaHUDBase_OnMinigameHideHUD, bLoading) == 0x000000, "Member 'AthenaHUDBase_OnMinigameHideHUD::bLoading' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.OnPlaylistExtensionWidgetCreated
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDBase_OnPlaylistExtensionWidgetCreated final
{
public:
	EPlaylistUIExtensionSlot                      ExtensionSlot;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_OnPlaylistExtensionWidgetCreated) == 0x000008, "Wrong alignment on AthenaHUDBase_OnPlaylistExtensionWidgetCreated");
static_assert(sizeof(AthenaHUDBase_OnPlaylistExtensionWidgetCreated) == 0x000010, "Wrong size on AthenaHUDBase_OnPlaylistExtensionWidgetCreated");
static_assert(offsetof(AthenaHUDBase_OnPlaylistExtensionWidgetCreated, ExtensionSlot) == 0x000000, "Member 'AthenaHUDBase_OnPlaylistExtensionWidgetCreated::ExtensionSlot' has a wrong offset!");
static_assert(offsetof(AthenaHUDBase_OnPlaylistExtensionWidgetCreated, Widget) == 0x000008, "Member 'AthenaHUDBase_OnPlaylistExtensionWidgetCreated::Widget' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.SetFullScreenMapVisibility
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDBase_SetFullScreenMapVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_SetFullScreenMapVisibility) == 0x000001, "Wrong alignment on AthenaHUDBase_SetFullScreenMapVisibility");
static_assert(sizeof(AthenaHUDBase_SetFullScreenMapVisibility) == 0x000001, "Wrong size on AthenaHUDBase_SetFullScreenMapVisibility");
static_assert(offsetof(AthenaHUDBase_SetFullScreenMapVisibility, bIsVisible) == 0x000000, "Member 'AthenaHUDBase_SetFullScreenMapVisibility::bIsVisible' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.SetQuickBarNative
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDBase_SetQuickBarNative final
{
public:
	bool                                          bShouldDoQuickBarNative;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_SetQuickBarNative) == 0x000001, "Wrong alignment on AthenaHUDBase_SetQuickBarNative");
static_assert(sizeof(AthenaHUDBase_SetQuickBarNative) == 0x000001, "Wrong size on AthenaHUDBase_SetQuickBarNative");
static_assert(offsetof(AthenaHUDBase_SetQuickBarNative, bShouldDoQuickBarNative) == 0x000000, "Member 'AthenaHUDBase_SetQuickBarNative::bShouldDoQuickBarNative' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.UpdateUIExtensions
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDBase_UpdateUIExtensions final
{
public:
	class AFortPlayerState*                       ClientState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortMinigame*                          Minigame;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_UpdateUIExtensions) == 0x000008, "Wrong alignment on AthenaHUDBase_UpdateUIExtensions");
static_assert(sizeof(AthenaHUDBase_UpdateUIExtensions) == 0x000010, "Wrong size on AthenaHUDBase_UpdateUIExtensions");
static_assert(offsetof(AthenaHUDBase_UpdateUIExtensions, ClientState) == 0x000000, "Member 'AthenaHUDBase_UpdateUIExtensions::ClientState' has a wrong offset!");
static_assert(offsetof(AthenaHUDBase_UpdateUIExtensions, Minigame) == 0x000008, "Member 'AthenaHUDBase_UpdateUIExtensions::Minigame' has a wrong offset!");

// Function FortniteUI.AthenaHUDBase.ViewModelChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDBase_ViewModelChanged final
{
public:
	class UAthenaPlayerViewModel*                 ViewModel;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDBase_ViewModelChanged) == 0x000008, "Wrong alignment on AthenaHUDBase_ViewModelChanged");
static_assert(sizeof(AthenaHUDBase_ViewModelChanged) == 0x000008, "Wrong size on AthenaHUDBase_ViewModelChanged");
static_assert(offsetof(AthenaHUDBase_ViewModelChanged, ViewModel) == 0x000000, "Member 'AthenaHUDBase_ViewModelChanged::ViewModel' has a wrong offset!");

// Function FortniteUI.FortMaterialProgressBar.SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct FortMaterialProgressBar_SetBackgroundColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMaterialProgressBar_SetBackgroundColor) == 0x000004, "Wrong alignment on FortMaterialProgressBar_SetBackgroundColor");
static_assert(sizeof(FortMaterialProgressBar_SetBackgroundColor) == 0x000010, "Wrong size on FortMaterialProgressBar_SetBackgroundColor");
static_assert(offsetof(FortMaterialProgressBar_SetBackgroundColor, Color) == 0x000000, "Member 'FortMaterialProgressBar_SetBackgroundColor::Color' has a wrong offset!");

// Function FortniteUI.FortMaterialProgressBar.SetProgressBarSectionColor
// 0x0018 (0x0018 - 0x0000)
struct FortMaterialProgressBar_SetProgressBarSectionColor final
{
public:
	EFortMaterialProgressBarSection               BarSection;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMaterialProgressBarSectionColorNumber    ColorNumber;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMaterialProgressBar_SetProgressBarSectionColor) == 0x000004, "Wrong alignment on FortMaterialProgressBar_SetProgressBarSectionColor");
static_assert(sizeof(FortMaterialProgressBar_SetProgressBarSectionColor) == 0x000018, "Wrong size on FortMaterialProgressBar_SetProgressBarSectionColor");
static_assert(offsetof(FortMaterialProgressBar_SetProgressBarSectionColor, BarSection) == 0x000000, "Member 'FortMaterialProgressBar_SetProgressBarSectionColor::BarSection' has a wrong offset!");
static_assert(offsetof(FortMaterialProgressBar_SetProgressBarSectionColor, Color) == 0x000004, "Member 'FortMaterialProgressBar_SetProgressBarSectionColor::Color' has a wrong offset!");
static_assert(offsetof(FortMaterialProgressBar_SetProgressBarSectionColor, ColorNumber) == 0x000014, "Member 'FortMaterialProgressBar_SetProgressBarSectionColor::ColorNumber' has a wrong offset!");

// Function FortniteUI.FortMaterialProgressBar.SetProgressBarSectionPercent
// 0x0008 (0x0008 - 0x0000)
struct FortMaterialProgressBar_SetProgressBarSectionPercent final
{
public:
	EFortMaterialProgressBarSection               BarSection;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Percent;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMaterialProgressBar_SetProgressBarSectionPercent) == 0x000004, "Wrong alignment on FortMaterialProgressBar_SetProgressBarSectionPercent");
static_assert(sizeof(FortMaterialProgressBar_SetProgressBarSectionPercent) == 0x000008, "Wrong size on FortMaterialProgressBar_SetProgressBarSectionPercent");
static_assert(offsetof(FortMaterialProgressBar_SetProgressBarSectionPercent, BarSection) == 0x000000, "Member 'FortMaterialProgressBar_SetProgressBarSectionPercent::BarSection' has a wrong offset!");
static_assert(offsetof(FortMaterialProgressBar_SetProgressBarSectionPercent, Percent) == 0x000004, "Member 'FortMaterialProgressBar_SetProgressBarSectionPercent::Percent' has a wrong offset!");

// Function FortniteUI.FortMaterialProgressBar.SetStyle
// 0x0008 (0x0008 - 0x0000)
struct FortMaterialProgressBar_SetStyle final
{
public:
	TSubclassOf<class UFortMaterialProgressBarStyle> BarStyle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMaterialProgressBar_SetStyle) == 0x000008, "Wrong alignment on FortMaterialProgressBar_SetStyle");
static_assert(sizeof(FortMaterialProgressBar_SetStyle) == 0x000008, "Wrong size on FortMaterialProgressBar_SetStyle");
static_assert(offsetof(FortMaterialProgressBar_SetStyle, BarStyle) == 0x000000, "Member 'FortMaterialProgressBar_SetStyle::BarStyle' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHUDBase.OnCursorModeChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaSpectatorHUDBase_OnCursorModeChanged final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CursorModeContentWidget;                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorHUDBase_OnCursorModeChanged) == 0x000008, "Wrong alignment on AthenaSpectatorHUDBase_OnCursorModeChanged");
static_assert(sizeof(AthenaSpectatorHUDBase_OnCursorModeChanged) == 0x000018, "Wrong size on AthenaSpectatorHUDBase_OnCursorModeChanged");
static_assert(offsetof(AthenaSpectatorHUDBase_OnCursorModeChanged, bCursorModeEnabled) == 0x000000, "Member 'AthenaSpectatorHUDBase_OnCursorModeChanged::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorHUDBase_OnCursorModeChanged, ActionName) == 0x000004, "Member 'AthenaSpectatorHUDBase_OnCursorModeChanged::ActionName' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorHUDBase_OnCursorModeChanged, CursorModeContentWidget) == 0x000010, "Member 'AthenaSpectatorHUDBase_OnCursorModeChanged::CursorModeContentWidget' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHUDBase.OnIndicatorModeChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorHUDBase_OnIndicatorModeChanged final
{
public:
	bool                                          bIndicatorsEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorHUDBase_OnIndicatorModeChanged) == 0x000001, "Wrong alignment on AthenaSpectatorHUDBase_OnIndicatorModeChanged");
static_assert(sizeof(AthenaSpectatorHUDBase_OnIndicatorModeChanged) == 0x000001, "Wrong size on AthenaSpectatorHUDBase_OnIndicatorModeChanged");
static_assert(offsetof(AthenaSpectatorHUDBase_OnIndicatorModeChanged, bIndicatorsEnabled) == 0x000000, "Member 'AthenaSpectatorHUDBase_OnIndicatorModeChanged::bIndicatorsEnabled' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHUDBase.OnNameplatesEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorHUDBase_OnNameplatesEnabledChanged final
{
public:
	bool                                          bInNameplatesEnabled;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorHUDBase_OnNameplatesEnabledChanged) == 0x000001, "Wrong alignment on AthenaSpectatorHUDBase_OnNameplatesEnabledChanged");
static_assert(sizeof(AthenaSpectatorHUDBase_OnNameplatesEnabledChanged) == 0x000001, "Wrong size on AthenaSpectatorHUDBase_OnNameplatesEnabledChanged");
static_assert(offsetof(AthenaSpectatorHUDBase_OnNameplatesEnabledChanged, bInNameplatesEnabled) == 0x000000, "Member 'AthenaSpectatorHUDBase_OnNameplatesEnabledChanged::bInNameplatesEnabled' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHUDBase.OnPlayerTargetingChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorHUDBase_OnPlayerTargetingChanged final
{
public:
	bool                                          bIsTargeting;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorHUDBase_OnPlayerTargetingChanged) == 0x000001, "Wrong alignment on AthenaSpectatorHUDBase_OnPlayerTargetingChanged");
static_assert(sizeof(AthenaSpectatorHUDBase_OnPlayerTargetingChanged) == 0x000001, "Wrong size on AthenaSpectatorHUDBase_OnPlayerTargetingChanged");
static_assert(offsetof(AthenaSpectatorHUDBase_OnPlayerTargetingChanged, bIsTargeting) == 0x000000, "Member 'AthenaSpectatorHUDBase_OnPlayerTargetingChanged::bIsTargeting' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHUDBase.OnUnableToPerformAction
// 0x0038 (0x0038 - 0x0000)
struct AthenaSpectatorHUDBase_OnUnableToPerformAction final
{
public:
	struct FGameplayTagContainer                  FailedReason;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class FText                                   FailureText;                                       // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorHUDBase_OnUnableToPerformAction) == 0x000008, "Wrong alignment on AthenaSpectatorHUDBase_OnUnableToPerformAction");
static_assert(sizeof(AthenaSpectatorHUDBase_OnUnableToPerformAction) == 0x000038, "Wrong size on AthenaSpectatorHUDBase_OnUnableToPerformAction");
static_assert(offsetof(AthenaSpectatorHUDBase_OnUnableToPerformAction, FailedReason) == 0x000000, "Member 'AthenaSpectatorHUDBase_OnUnableToPerformAction::FailedReason' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorHUDBase_OnUnableToPerformAction, FailureText) == 0x000020, "Member 'AthenaSpectatorHUDBase_OnUnableToPerformAction::FailureText' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnGameStateSet
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastHUDBase_OnGameStateSet final
{
public:
	class AFortGameState*                         NewGameState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnGameStateSet) == 0x000008, "Wrong alignment on AthenaBroadcastHUDBase_OnGameStateSet");
static_assert(sizeof(AthenaBroadcastHUDBase_OnGameStateSet) == 0x000008, "Wrong size on AthenaBroadcastHUDBase_OnGameStateSet");
static_assert(offsetof(AthenaBroadcastHUDBase_OnGameStateSet, NewGameState) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnGameStateSet::NewGameState' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnGameStateSet_BP
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastHUDBase_OnGameStateSet_BP final
{
public:
	class AFortGameStateAthena*                   GameStateAthena;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnGameStateSet_BP) == 0x000008, "Wrong alignment on AthenaBroadcastHUDBase_OnGameStateSet_BP");
static_assert(sizeof(AthenaBroadcastHUDBase_OnGameStateSet_BP) == 0x000008, "Wrong size on AthenaBroadcastHUDBase_OnGameStateSet_BP");
static_assert(offsetof(AthenaBroadcastHUDBase_OnGameStateSet_BP, GameStateAthena) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnGameStateSet_BP::GameStateAthena' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnMinigameChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastHUDBase_OnMinigameChanged final
{
public:
	class AFortMinigame*                          NewMinigame;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnMinigameChanged) == 0x000008, "Wrong alignment on AthenaBroadcastHUDBase_OnMinigameChanged");
static_assert(sizeof(AthenaBroadcastHUDBase_OnMinigameChanged) == 0x000008, "Wrong size on AthenaBroadcastHUDBase_OnMinigameChanged");
static_assert(offsetof(AthenaBroadcastHUDBase_OnMinigameChanged, NewMinigame) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnMinigameChanged::NewMinigame' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnPipModeChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnPipModeChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnPipModeChanged) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnPipModeChanged");
static_assert(sizeof(AthenaBroadcastHUDBase_OnPipModeChanged) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnPipModeChanged");
static_assert(offsetof(AthenaBroadcastHUDBase_OnPipModeChanged, bEnabled) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnPipModeChanged::bEnabled' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnPlaylistDataChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastHUDBase_OnPlaylistDataChanged final
{
public:
	const class UFortPlaylistAthena*              PlaylistData;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnPlaylistDataChanged) == 0x000008, "Wrong alignment on AthenaBroadcastHUDBase_OnPlaylistDataChanged");
static_assert(sizeof(AthenaBroadcastHUDBase_OnPlaylistDataChanged) == 0x000008, "Wrong size on AthenaBroadcastHUDBase_OnPlaylistDataChanged");
static_assert(offsetof(AthenaBroadcastHUDBase_OnPlaylistDataChanged, PlaylistData) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnPlaylistDataChanged::PlaylistData' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleActionFeedScreenActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleActionFeedScreenActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleActionFeedScreenActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleActionFeedScreenActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleActionFeedScreenActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleActionFeedScreenActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleActionFeedScreenActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleActionFeedScreenActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleActiveGridScreenActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleActiveGridScreenActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleActiveGridScreenActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleActiveGridScreenActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleActiveGridScreenActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleActiveGridScreenActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleActiveGridScreenActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleActiveGridScreenActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleAllPlayersGridActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleAllPlayersGridActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleAllPlayersGridActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleAllPlayersGridActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleAllPlayersGridActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleAllPlayersGridActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleAllPlayersGridActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleAllPlayersGridActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleEliminatedGridScreenActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleEliminatedGridScreenActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleEliminatedGridScreenActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleEliminatedGridScreenActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleEliminatedGridScreenActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleEliminatedGridScreenActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleEliminatedGridScreenActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleEliminatedGridScreenActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleFollowedPlayerInfoActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleFollowedPlayerInfoActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleFollowedPlayerInfoActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleFollowedPlayerInfoActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleFollowedPlayerInfoActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleFollowedPlayerInfoActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleFollowedPlayerInfoActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleFollowedPlayerInfoActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleGoToTimeScreen
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleGoToTimeScreen final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleGoToTimeScreen) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleGoToTimeScreen");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleGoToTimeScreen) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleGoToTimeScreen");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleGoToTimeScreen, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleGoToTimeScreen::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleKillFeedActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleKillFeedActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleKillFeedActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleKillFeedActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleKillFeedActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleKillFeedActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleKillFeedActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleKillFeedActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleMatchStatusActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleMatchStatusActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleMatchStatusActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleMatchStatusActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleMatchStatusActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleMatchStatusActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleMatchStatusActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleMatchStatusActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleMatchStatusScreenActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleMatchStatusScreenActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleMatchStatusScreenActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleMatchStatusScreenActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleMatchStatusScreenActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleMatchStatusScreenActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleMatchStatusScreenActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleMatchStatusScreenActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnTogglePipModeActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnTogglePipModeActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnTogglePipModeActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnTogglePipModeActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnTogglePipModeActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnTogglePipModeActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnTogglePipModeActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnTogglePipModeActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleRemainingPlayersActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleRemainingPlayersActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleRemainingPlayersActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleRemainingPlayersActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleRemainingPlayersActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleRemainingPlayersActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleRemainingPlayersActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleRemainingPlayersActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleScoreboardScreenActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleScoreboardScreenActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleScoreboardScreenActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleScoreboardScreenActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleScoreboardScreenActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleScoreboardScreenActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleScoreboardScreenActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleScoreboardScreenActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnToggleSquadStatusActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastHUDBase_OnToggleSquadStatusActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnToggleSquadStatusActionExecuted) == 0x000001, "Wrong alignment on AthenaBroadcastHUDBase_OnToggleSquadStatusActionExecuted");
static_assert(sizeof(AthenaBroadcastHUDBase_OnToggleSquadStatusActionExecuted) == 0x000001, "Wrong size on AthenaBroadcastHUDBase_OnToggleSquadStatusActionExecuted");
static_assert(offsetof(AthenaBroadcastHUDBase_OnToggleSquadStatusActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnToggleSquadStatusActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnVolumeAdded
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastHUDBase_OnVolumeAdded final
{
public:
	class AFortVolume*                            Volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnVolumeAdded) == 0x000008, "Wrong alignment on AthenaBroadcastHUDBase_OnVolumeAdded");
static_assert(sizeof(AthenaBroadcastHUDBase_OnVolumeAdded) == 0x000008, "Wrong size on AthenaBroadcastHUDBase_OnVolumeAdded");
static_assert(offsetof(AthenaBroadcastHUDBase_OnVolumeAdded, Volume) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnVolumeAdded::Volume' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnVolumeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct AthenaBroadcastHUDBase_OnVolumeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDBase_OnVolumeBeginOverlap) == 0x000008, "Wrong alignment on AthenaBroadcastHUDBase_OnVolumeBeginOverlap");
static_assert(sizeof(AthenaBroadcastHUDBase_OnVolumeBeginOverlap) == 0x0000A8, "Wrong size on AthenaBroadcastHUDBase_OnVolumeBeginOverlap");
static_assert(offsetof(AthenaBroadcastHUDBase_OnVolumeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnVolumeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastHUDBase_OnVolumeBeginOverlap, OtherActor) == 0x000008, "Member 'AthenaBroadcastHUDBase_OnVolumeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastHUDBase_OnVolumeBeginOverlap, OtherComp) == 0x000010, "Member 'AthenaBroadcastHUDBase_OnVolumeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastHUDBase_OnVolumeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'AthenaBroadcastHUDBase_OnVolumeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastHUDBase_OnVolumeBeginOverlap, bFromSweep) == 0x00001C, "Member 'AthenaBroadcastHUDBase_OnVolumeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastHUDBase_OnVolumeBeginOverlap, SweepResult) == 0x000020, "Member 'AthenaBroadcastHUDBase_OnVolumeBeginOverlap::SweepResult' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDBase.OnVolumeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct AthenaBroadcastHUDBase_OnVolumeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaBroadcastHUDBase_OnVolumeEndOverlap) == 0x000008, "Wrong alignment on AthenaBroadcastHUDBase_OnVolumeEndOverlap");
static_assert(sizeof(AthenaBroadcastHUDBase_OnVolumeEndOverlap) == 0x000020, "Wrong size on AthenaBroadcastHUDBase_OnVolumeEndOverlap");
static_assert(offsetof(AthenaBroadcastHUDBase_OnVolumeEndOverlap, OverlappedComponent) == 0x000000, "Member 'AthenaBroadcastHUDBase_OnVolumeEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastHUDBase_OnVolumeEndOverlap, OtherActor) == 0x000008, "Member 'AthenaBroadcastHUDBase_OnVolumeEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastHUDBase_OnVolumeEndOverlap, OtherComp) == 0x000010, "Member 'AthenaBroadcastHUDBase_OnVolumeEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastHUDBase_OnVolumeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'AthenaBroadcastHUDBase_OnVolumeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPanZoomWidget.StartOffsetLerp
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolPanZoomWidget_StartOffsetLerp final
{
public:
	struct FVector2D                              NewTargetOffset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPanZoomWidget_StartOffsetLerp) == 0x000004, "Wrong alignment on HUDLayoutToolPanZoomWidget_StartOffsetLerp");
static_assert(sizeof(HUDLayoutToolPanZoomWidget_StartOffsetLerp) == 0x000008, "Wrong size on HUDLayoutToolPanZoomWidget_StartOffsetLerp");
static_assert(offsetof(HUDLayoutToolPanZoomWidget_StartOffsetLerp, NewTargetOffset) == 0x000000, "Member 'HUDLayoutToolPanZoomWidget_StartOffsetLerp::NewTargetOffset' has a wrong offset!");

// Function FortniteUI.AthenaPlayerTeamKillsBase.SetKillsSourcePlayerController
// 0x0008 (0x0008 - 0x0000)
struct AthenaPlayerTeamKillsBase_SetKillsSourcePlayerController final
{
public:
	class AFortPlayerControllerAthena*            InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerTeamKillsBase_SetKillsSourcePlayerController) == 0x000008, "Wrong alignment on AthenaPlayerTeamKillsBase_SetKillsSourcePlayerController");
static_assert(sizeof(AthenaPlayerTeamKillsBase_SetKillsSourcePlayerController) == 0x000008, "Wrong size on AthenaPlayerTeamKillsBase_SetKillsSourcePlayerController");
static_assert(offsetof(AthenaPlayerTeamKillsBase_SetKillsSourcePlayerController, InPlayerController) == 0x000000, "Member 'AthenaPlayerTeamKillsBase_SetKillsSourcePlayerController::InPlayerController' has a wrong offset!");

// Function FortniteUI.AthenaPlayerTeamKillsBase.SetKillsSourcePlayerState
// 0x0008 (0x0008 - 0x0000)
struct AthenaPlayerTeamKillsBase_SetKillsSourcePlayerState final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerTeamKillsBase_SetKillsSourcePlayerState) == 0x000008, "Wrong alignment on AthenaPlayerTeamKillsBase_SetKillsSourcePlayerState");
static_assert(sizeof(AthenaPlayerTeamKillsBase_SetKillsSourcePlayerState) == 0x000008, "Wrong size on AthenaPlayerTeamKillsBase_SetKillsSourcePlayerState");
static_assert(offsetof(AthenaPlayerTeamKillsBase_SetKillsSourcePlayerState, InPlayerState) == 0x000000, "Member 'AthenaPlayerTeamKillsBase_SetKillsSourcePlayerState::InPlayerState' has a wrong offset!");

// Function FortniteUI.FortDropdownMenu.InternalOnButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct FortDropdownMenu_InternalOnButtonClicked final
{
public:
	class UCommonButton*                          AssociatedButton;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDropdownMenu_InternalOnButtonClicked) == 0x000008, "Wrong alignment on FortDropdownMenu_InternalOnButtonClicked");
static_assert(sizeof(FortDropdownMenu_InternalOnButtonClicked) == 0x000010, "Wrong size on FortDropdownMenu_InternalOnButtonClicked");
static_assert(offsetof(FortDropdownMenu_InternalOnButtonClicked, AssociatedButton) == 0x000000, "Member 'FortDropdownMenu_InternalOnButtonClicked::AssociatedButton' has a wrong offset!");
static_assert(offsetof(FortDropdownMenu_InternalOnButtonClicked, ButtonIndex) == 0x000008, "Member 'FortDropdownMenu_InternalOnButtonClicked::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortDropdownMenu.InternalOnSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct FortDropdownMenu_InternalOnSelectionChanged final
{
public:
	class UCommonButton*                          AssociatedButton;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDropdownMenu_InternalOnSelectionChanged) == 0x000008, "Wrong alignment on FortDropdownMenu_InternalOnSelectionChanged");
static_assert(sizeof(FortDropdownMenu_InternalOnSelectionChanged) == 0x000010, "Wrong size on FortDropdownMenu_InternalOnSelectionChanged");
static_assert(offsetof(FortDropdownMenu_InternalOnSelectionChanged, AssociatedButton) == 0x000000, "Member 'FortDropdownMenu_InternalOnSelectionChanged::AssociatedButton' has a wrong offset!");
static_assert(offsetof(FortDropdownMenu_InternalOnSelectionChanged, ButtonIndex) == 0x000008, "Member 'FortDropdownMenu_InternalOnSelectionChanged::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortDropdownMenu.RegisterButton
// 0x0008 (0x0008 - 0x0000)
struct FortDropdownMenu_RegisterButton final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDropdownMenu_RegisterButton) == 0x000008, "Wrong alignment on FortDropdownMenu_RegisterButton");
static_assert(sizeof(FortDropdownMenu_RegisterButton) == 0x000008, "Wrong size on FortDropdownMenu_RegisterButton");
static_assert(offsetof(FortDropdownMenu_RegisterButton, Button) == 0x000000, "Member 'FortDropdownMenu_RegisterButton::Button' has a wrong offset!");

// Function FortniteUI.FortDropdownMenu.GetSelectedButton
// 0x0008 (0x0008 - 0x0000)
struct FortDropdownMenu_GetSelectedButton final
{
public:
	class UCommonButton*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDropdownMenu_GetSelectedButton) == 0x000008, "Wrong alignment on FortDropdownMenu_GetSelectedButton");
static_assert(sizeof(FortDropdownMenu_GetSelectedButton) == 0x000008, "Wrong size on FortDropdownMenu_GetSelectedButton");
static_assert(offsetof(FortDropdownMenu_GetSelectedButton, ReturnValue) == 0x000000, "Member 'FortDropdownMenu_GetSelectedButton::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDropdownMenu.GetSelectedButtonIndex
// 0x0004 (0x0004 - 0x0000)
struct FortDropdownMenu_GetSelectedButtonIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDropdownMenu_GetSelectedButtonIndex) == 0x000004, "Wrong alignment on FortDropdownMenu_GetSelectedButtonIndex");
static_assert(sizeof(FortDropdownMenu_GetSelectedButtonIndex) == 0x000004, "Wrong size on FortDropdownMenu_GetSelectedButtonIndex");
static_assert(offsetof(FortDropdownMenu_GetSelectedButtonIndex, ReturnValue) == 0x000000, "Member 'FortDropdownMenu_GetSelectedButtonIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetArbitratorType
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfo_GetArbitratorType final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteArbitratorType                       ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetArbitratorType) == 0x000001, "Wrong alignment on FortMissionActivationInfo_GetArbitratorType");
static_assert(sizeof(FortMissionActivationInfo_GetArbitratorType) == 0x000002, "Wrong size on FortMissionActivationInfo_GetArbitratorType");
static_assert(offsetof(FortMissionActivationInfo_GetArbitratorType, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_GetArbitratorType::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_GetArbitratorType, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfo_GetArbitratorType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetVoteCounts
// 0x000C (0x000C - 0x0000)
struct FortMissionActivationInfo_GetVoteCounts final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutYesVoteCount;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNoVoteCount;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetVoteCounts) == 0x000004, "Wrong alignment on FortMissionActivationInfo_GetVoteCounts");
static_assert(sizeof(FortMissionActivationInfo_GetVoteCounts) == 0x00000C, "Wrong size on FortMissionActivationInfo_GetVoteCounts");
static_assert(offsetof(FortMissionActivationInfo_GetVoteCounts, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_GetVoteCounts::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_GetVoteCounts, OutYesVoteCount) == 0x000004, "Member 'FortMissionActivationInfo_GetVoteCounts::OutYesVoteCount' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_GetVoteCounts, OutNoVoteCount) == 0x000008, "Member 'FortMissionActivationInfo_GetVoteCounts::OutNoVoteCount' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetVoters
// 0x0018 (0x0018 - 0x0000)
struct FortMissionActivationInfo_GetVoters final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVoter>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetVoters) == 0x000008, "Wrong alignment on FortMissionActivationInfo_GetVoters");
static_assert(sizeof(FortMissionActivationInfo_GetVoters) == 0x000018, "Wrong size on FortMissionActivationInfo_GetVoters");
static_assert(offsetof(FortMissionActivationInfo_GetVoters, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_GetVoters::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_GetVoters, ReturnValue) == 0x000008, "Member 'FortMissionActivationInfo_GetVoters::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.HandleGameplayVoteUpdated
// 0x0018 (0x0018 - 0x0000)
struct FortMissionActivationInfo_HandleGameplayVoteUpdated final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteStatus                               VoteStatus;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoteResult;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoter>                         Voters;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_HandleGameplayVoteUpdated) == 0x000008, "Wrong alignment on FortMissionActivationInfo_HandleGameplayVoteUpdated");
static_assert(sizeof(FortMissionActivationInfo_HandleGameplayVoteUpdated) == 0x000018, "Wrong size on FortMissionActivationInfo_HandleGameplayVoteUpdated");
static_assert(offsetof(FortMissionActivationInfo_HandleGameplayVoteUpdated, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_HandleGameplayVoteUpdated::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_HandleGameplayVoteUpdated, VoteStatus) == 0x000001, "Member 'FortMissionActivationInfo_HandleGameplayVoteUpdated::VoteStatus' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_HandleGameplayVoteUpdated, VoteResult) == 0x000004, "Member 'FortMissionActivationInfo_HandleGameplayVoteUpdated::VoteResult' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_HandleGameplayVoteUpdated, Voters) == 0x000008, "Member 'FortMissionActivationInfo_HandleGameplayVoteUpdated::Voters' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.HandleTeamMemberAdded
// 0x0200 (0x0200 - 0x0000)
struct FortMissionActivationInfo_HandleTeamMemberAdded final
{
public:
	struct FFortTeamMemberInfo                    NewInfo;                                           // 0x0000(0x0200)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_HandleTeamMemberAdded) == 0x000008, "Wrong alignment on FortMissionActivationInfo_HandleTeamMemberAdded");
static_assert(sizeof(FortMissionActivationInfo_HandleTeamMemberAdded) == 0x000200, "Wrong size on FortMissionActivationInfo_HandleTeamMemberAdded");
static_assert(offsetof(FortMissionActivationInfo_HandleTeamMemberAdded, NewInfo) == 0x000000, "Member 'FortMissionActivationInfo_HandleTeamMemberAdded::NewInfo' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.HandleTeamMemberRemoved
// 0x0004 (0x0004 - 0x0000)
struct FortMissionActivationInfo_HandleTeamMemberRemoved final
{
public:
	int32                                         RemovedIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_HandleTeamMemberRemoved) == 0x000004, "Wrong alignment on FortMissionActivationInfo_HandleTeamMemberRemoved");
static_assert(sizeof(FortMissionActivationInfo_HandleTeamMemberRemoved) == 0x000004, "Wrong size on FortMissionActivationInfo_HandleTeamMemberRemoved");
static_assert(offsetof(FortMissionActivationInfo_HandleTeamMemberRemoved, RemovedIndex) == 0x000000, "Member 'FortMissionActivationInfo_HandleTeamMemberRemoved::RemovedIndex' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.HasPlayerVoted
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfo_HasPlayerVoted final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_HasPlayerVoted) == 0x000001, "Wrong alignment on FortMissionActivationInfo_HasPlayerVoted");
static_assert(sizeof(FortMissionActivationInfo_HasPlayerVoted) == 0x000002, "Wrong size on FortMissionActivationInfo_HasPlayerVoted");
static_assert(offsetof(FortMissionActivationInfo_HasPlayerVoted, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_HasPlayerVoted::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_HasPlayerVoted, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfo_HasPlayerVoted::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.RequestVote
// 0x0010 (0x0010 - 0x0000)
struct FortMissionActivationInfo_RequestVote final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VoteDuration;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FailedVoteLockOutDuration;                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteArbitratorType                       ArbitratorType;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionActivationInfo_RequestVote) == 0x000004, "Wrong alignment on FortMissionActivationInfo_RequestVote");
static_assert(sizeof(FortMissionActivationInfo_RequestVote) == 0x000010, "Wrong size on FortMissionActivationInfo_RequestVote");
static_assert(offsetof(FortMissionActivationInfo_RequestVote, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_RequestVote::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_RequestVote, VoteDuration) == 0x000004, "Member 'FortMissionActivationInfo_RequestVote::VoteDuration' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_RequestVote, FailedVoteLockOutDuration) == 0x000008, "Member 'FortMissionActivationInfo_RequestVote::FailedVoteLockOutDuration' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_RequestVote, ArbitratorType) == 0x00000C, "Member 'FortMissionActivationInfo_RequestVote::ArbitratorType' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.SubmitVote
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfo_SubmitVote final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApprove;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_SubmitVote) == 0x000001, "Wrong alignment on FortMissionActivationInfo_SubmitVote");
static_assert(sizeof(FortMissionActivationInfo_SubmitVote) == 0x000002, "Wrong size on FortMissionActivationInfo_SubmitVote");
static_assert(offsetof(FortMissionActivationInfo_SubmitVote, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_SubmitVote::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_SubmitVote, bApprove) == 0x000001, "Member 'FortMissionActivationInfo_SubmitVote::bApprove' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.CanRequestVote
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfo_CanRequestVote final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_CanRequestVote) == 0x000001, "Wrong alignment on FortMissionActivationInfo_CanRequestVote");
static_assert(sizeof(FortMissionActivationInfo_CanRequestVote) == 0x000002, "Wrong size on FortMissionActivationInfo_CanRequestVote");
static_assert(offsetof(FortMissionActivationInfo_CanRequestVote, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_CanRequestVote::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_CanRequestVote, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfo_CanRequestVote::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.DoesPrimaryMissionContainTags
// 0x0028 (0x0028 - 0x0000)
struct FortMissionActivationInfo_DoesPrimaryMissionContainTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionActivationInfo_DoesPrimaryMissionContainTags) == 0x000008, "Wrong alignment on FortMissionActivationInfo_DoesPrimaryMissionContainTags");
static_assert(sizeof(FortMissionActivationInfo_DoesPrimaryMissionContainTags) == 0x000028, "Wrong size on FortMissionActivationInfo_DoesPrimaryMissionContainTags");
static_assert(offsetof(FortMissionActivationInfo_DoesPrimaryMissionContainTags, Tags) == 0x000000, "Member 'FortMissionActivationInfo_DoesPrimaryMissionContainTags::Tags' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_DoesPrimaryMissionContainTags, ReturnValue) == 0x000020, "Member 'FortMissionActivationInfo_DoesPrimaryMissionContainTags::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetAvailableBluGloCount
// 0x0004 (0x0004 - 0x0000)
struct FortMissionActivationInfo_GetAvailableBluGloCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetAvailableBluGloCount) == 0x000004, "Wrong alignment on FortMissionActivationInfo_GetAvailableBluGloCount");
static_assert(sizeof(FortMissionActivationInfo_GetAvailableBluGloCount) == 0x000004, "Wrong size on FortMissionActivationInfo_GetAvailableBluGloCount");
static_assert(offsetof(FortMissionActivationInfo_GetAvailableBluGloCount, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfo_GetAvailableBluGloCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetDeltaRewards
// 0x0018 (0x0018 - 0x0000)
struct FortMissionActivationInfo_GetDeltaRewards final
{
public:
	int32                                         BaseDifficultyIncreaseTier;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComparedDifficultyIncreaseTier;                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemDelta>                 DeltaRewards;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetDeltaRewards) == 0x000008, "Wrong alignment on FortMissionActivationInfo_GetDeltaRewards");
static_assert(sizeof(FortMissionActivationInfo_GetDeltaRewards) == 0x000018, "Wrong size on FortMissionActivationInfo_GetDeltaRewards");
static_assert(offsetof(FortMissionActivationInfo_GetDeltaRewards, BaseDifficultyIncreaseTier) == 0x000000, "Member 'FortMissionActivationInfo_GetDeltaRewards::BaseDifficultyIncreaseTier' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_GetDeltaRewards, ComparedDifficultyIncreaseTier) == 0x000004, "Member 'FortMissionActivationInfo_GetDeltaRewards::ComparedDifficultyIncreaseTier' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_GetDeltaRewards, DeltaRewards) == 0x000008, "Member 'FortMissionActivationInfo_GetDeltaRewards::DeltaRewards' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetIncreaseDifficultyBluGloRequirement
// 0x0004 (0x0004 - 0x0000)
struct FortMissionActivationInfo_GetIncreaseDifficultyBluGloRequirement final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetIncreaseDifficultyBluGloRequirement) == 0x000004, "Wrong alignment on FortMissionActivationInfo_GetIncreaseDifficultyBluGloRequirement");
static_assert(sizeof(FortMissionActivationInfo_GetIncreaseDifficultyBluGloRequirement) == 0x000004, "Wrong size on FortMissionActivationInfo_GetIncreaseDifficultyBluGloRequirement");
static_assert(offsetof(FortMissionActivationInfo_GetIncreaseDifficultyBluGloRequirement, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfo_GetIncreaseDifficultyBluGloRequirement::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetInstigatorId
// 0x0030 (0x0030 - 0x0000)
struct FortMissionActivationInfo_GetInstigatorId final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetInstigatorId) == 0x000008, "Wrong alignment on FortMissionActivationInfo_GetInstigatorId");
static_assert(sizeof(FortMissionActivationInfo_GetInstigatorId) == 0x000030, "Wrong size on FortMissionActivationInfo_GetInstigatorId");
static_assert(offsetof(FortMissionActivationInfo_GetInstigatorId, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_GetInstigatorId::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_GetInstigatorId, ReturnValue) == 0x000008, "Member 'FortMissionActivationInfo_GetInstigatorId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetLockoutTimeRemaining
// 0x0020 (0x0020 - 0x0000)
struct FortMissionActivationInfo_GetLockoutTimeRemaining final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetLockoutTimeRemaining) == 0x000008, "Wrong alignment on FortMissionActivationInfo_GetLockoutTimeRemaining");
static_assert(sizeof(FortMissionActivationInfo_GetLockoutTimeRemaining) == 0x000020, "Wrong size on FortMissionActivationInfo_GetLockoutTimeRemaining");
static_assert(offsetof(FortMissionActivationInfo_GetLockoutTimeRemaining, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_GetLockoutTimeRemaining::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_GetLockoutTimeRemaining, ReturnValue) == 0x000008, "Member 'FortMissionActivationInfo_GetLockoutTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetMissionObjectiveTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct FortMissionActivationInfo_GetMissionObjectiveTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetMissionObjectiveTimeRemaining) == 0x000004, "Wrong alignment on FortMissionActivationInfo_GetMissionObjectiveTimeRemaining");
static_assert(sizeof(FortMissionActivationInfo_GetMissionObjectiveTimeRemaining) == 0x000004, "Wrong size on FortMissionActivationInfo_GetMissionObjectiveTimeRemaining");
static_assert(offsetof(FortMissionActivationInfo_GetMissionObjectiveTimeRemaining, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfo_GetMissionObjectiveTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetMissionVoteType
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationInfo_GetMissionVoteType final
{
public:
	EFortVoteType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetMissionVoteType) == 0x000001, "Wrong alignment on FortMissionActivationInfo_GetMissionVoteType");
static_assert(sizeof(FortMissionActivationInfo_GetMissionVoteType) == 0x000001, "Wrong size on FortMissionActivationInfo_GetMissionVoteType");
static_assert(offsetof(FortMissionActivationInfo_GetMissionVoteType, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfo_GetMissionVoteType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetPrimaryMission
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationInfo_GetPrimaryMission final
{
public:
	class AFortMission*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetPrimaryMission) == 0x000008, "Wrong alignment on FortMissionActivationInfo_GetPrimaryMission");
static_assert(sizeof(FortMissionActivationInfo_GetPrimaryMission) == 0x000008, "Wrong size on FortMissionActivationInfo_GetPrimaryMission");
static_assert(offsetof(FortMissionActivationInfo_GetPrimaryMission, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfo_GetPrimaryMission::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetPrimaryMissionInfo
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationInfo_GetPrimaryMissionInfo final
{
public:
	class UFortMissionInfo*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetPrimaryMissionInfo) == 0x000008, "Wrong alignment on FortMissionActivationInfo_GetPrimaryMissionInfo");
static_assert(sizeof(FortMissionActivationInfo_GetPrimaryMissionInfo) == 0x000008, "Wrong size on FortMissionActivationInfo_GetPrimaryMissionInfo");
static_assert(offsetof(FortMissionActivationInfo_GetPrimaryMissionInfo, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfo_GetPrimaryMissionInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetStartObjectiveBluGloRequirement
// 0x0004 (0x0004 - 0x0000)
struct FortMissionActivationInfo_GetStartObjectiveBluGloRequirement final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetStartObjectiveBluGloRequirement) == 0x000004, "Wrong alignment on FortMissionActivationInfo_GetStartObjectiveBluGloRequirement");
static_assert(sizeof(FortMissionActivationInfo_GetStartObjectiveBluGloRequirement) == 0x000004, "Wrong size on FortMissionActivationInfo_GetStartObjectiveBluGloRequirement");
static_assert(offsetof(FortMissionActivationInfo_GetStartObjectiveBluGloRequirement, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfo_GetStartObjectiveBluGloRequirement::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.GetVoteTimeRemaining
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationInfo_GetVoteTimeRemaining final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_GetVoteTimeRemaining) == 0x000004, "Wrong alignment on FortMissionActivationInfo_GetVoteTimeRemaining");
static_assert(sizeof(FortMissionActivationInfo_GetVoteTimeRemaining) == 0x000008, "Wrong size on FortMissionActivationInfo_GetVoteTimeRemaining");
static_assert(offsetof(FortMissionActivationInfo_GetVoteTimeRemaining, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_GetVoteTimeRemaining::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_GetVoteTimeRemaining, ReturnValue) == 0x000004, "Member 'FortMissionActivationInfo_GetVoteTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.IsAnyVoteActive
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationInfo_IsAnyVoteActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_IsAnyVoteActive) == 0x000001, "Wrong alignment on FortMissionActivationInfo_IsAnyVoteActive");
static_assert(sizeof(FortMissionActivationInfo_IsAnyVoteActive) == 0x000001, "Wrong size on FortMissionActivationInfo_IsAnyVoteActive");
static_assert(offsetof(FortMissionActivationInfo_IsAnyVoteActive, ReturnValue) == 0x000000, "Member 'FortMissionActivationInfo_IsAnyVoteActive::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.IsPlayerVoteInstigator
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfo_IsPlayerVoteInstigator final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_IsPlayerVoteInstigator) == 0x000001, "Wrong alignment on FortMissionActivationInfo_IsPlayerVoteInstigator");
static_assert(sizeof(FortMissionActivationInfo_IsPlayerVoteInstigator) == 0x000002, "Wrong size on FortMissionActivationInfo_IsPlayerVoteInstigator");
static_assert(offsetof(FortMissionActivationInfo_IsPlayerVoteInstigator, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_IsPlayerVoteInstigator::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_IsPlayerVoteInstigator, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfo_IsPlayerVoteInstigator::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.IsVoteActive
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfo_IsVoteActive final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_IsVoteActive) == 0x000001, "Wrong alignment on FortMissionActivationInfo_IsVoteActive");
static_assert(sizeof(FortMissionActivationInfo_IsVoteActive) == 0x000002, "Wrong size on FortMissionActivationInfo_IsVoteActive");
static_assert(offsetof(FortMissionActivationInfo_IsVoteActive, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_IsVoteActive::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_IsVoteActive, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfo_IsVoteActive::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.IsVoteLocked
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationInfo_IsVoteLocked final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_IsVoteLocked) == 0x000001, "Wrong alignment on FortMissionActivationInfo_IsVoteLocked");
static_assert(sizeof(FortMissionActivationInfo_IsVoteLocked) == 0x000002, "Wrong size on FortMissionActivationInfo_IsVoteLocked");
static_assert(offsetof(FortMissionActivationInfo_IsVoteLocked, VoteType) == 0x000000, "Member 'FortMissionActivationInfo_IsVoteLocked::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_IsVoteLocked, ReturnValue) == 0x000001, "Member 'FortMissionActivationInfo_IsVoteLocked::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionActivationInfo.TimeSecondsToText
// 0x0020 (0x0020 - 0x0000)
struct FortMissionActivationInfo_TimeSecondsToText final
{
public:
	float                                         InSeconds;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationInfo_TimeSecondsToText) == 0x000008, "Wrong alignment on FortMissionActivationInfo_TimeSecondsToText");
static_assert(sizeof(FortMissionActivationInfo_TimeSecondsToText) == 0x000020, "Wrong size on FortMissionActivationInfo_TimeSecondsToText");
static_assert(offsetof(FortMissionActivationInfo_TimeSecondsToText, InSeconds) == 0x000000, "Member 'FortMissionActivationInfo_TimeSecondsToText::InSeconds' has a wrong offset!");
static_assert(offsetof(FortMissionActivationInfo_TimeSecondsToText, ReturnValue) == 0x000008, "Member 'FortMissionActivationInfo_TimeSecondsToText::ReturnValue' has a wrong offset!");

// Function FortniteUI.MashPhaseWidget.HandleCountdownStarted
// 0x0004 (0x0004 - 0x0000)
struct MashPhaseWidget_HandleCountdownStarted final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashPhaseWidget_HandleCountdownStarted) == 0x000004, "Wrong alignment on MashPhaseWidget_HandleCountdownStarted");
static_assert(sizeof(MashPhaseWidget_HandleCountdownStarted) == 0x000004, "Wrong size on MashPhaseWidget_HandleCountdownStarted");
static_assert(offsetof(MashPhaseWidget_HandleCountdownStarted, TimeRemaining) == 0x000000, "Member 'MashPhaseWidget_HandleCountdownStarted::TimeRemaining' has a wrong offset!");

// Function FortniteUI.MashPhaseWidget.HandleMashPhaseChanged
// 0x0004 (0x0004 - 0x0000)
struct MashPhaseWidget_HandleMashPhaseChanged final
{
public:
	int32                                         NewPhase;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashPhaseWidget_HandleMashPhaseChanged) == 0x000004, "Wrong alignment on MashPhaseWidget_HandleMashPhaseChanged");
static_assert(sizeof(MashPhaseWidget_HandleMashPhaseChanged) == 0x000004, "Wrong size on MashPhaseWidget_HandleMashPhaseChanged");
static_assert(offsetof(MashPhaseWidget_HandleMashPhaseChanged, NewPhase) == 0x000000, "Member 'MashPhaseWidget_HandleMashPhaseChanged::NewPhase' has a wrong offset!");

// Function FortniteUI.MashPhaseWidget.HandlePlayersLeftChanged
// 0x0004 (0x0004 - 0x0000)
struct MashPhaseWidget_HandlePlayersLeftChanged final
{
public:
	int32                                         InPlayersLeft;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashPhaseWidget_HandlePlayersLeftChanged) == 0x000004, "Wrong alignment on MashPhaseWidget_HandlePlayersLeftChanged");
static_assert(sizeof(MashPhaseWidget_HandlePlayersLeftChanged) == 0x000004, "Wrong size on MashPhaseWidget_HandlePlayersLeftChanged");
static_assert(offsetof(MashPhaseWidget_HandlePlayersLeftChanged, InPlayersLeft) == 0x000000, "Member 'MashPhaseWidget_HandlePlayersLeftChanged::InPlayersLeft' has a wrong offset!");

// Function FortniteUI.MashPhaseWidget.OnCountdownStarted
// 0x0004 (0x0004 - 0x0000)
struct MashPhaseWidget_OnCountdownStarted final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashPhaseWidget_OnCountdownStarted) == 0x000004, "Wrong alignment on MashPhaseWidget_OnCountdownStarted");
static_assert(sizeof(MashPhaseWidget_OnCountdownStarted) == 0x000004, "Wrong size on MashPhaseWidget_OnCountdownStarted");
static_assert(offsetof(MashPhaseWidget_OnCountdownStarted, TimeRemaining) == 0x000000, "Member 'MashPhaseWidget_OnCountdownStarted::TimeRemaining' has a wrong offset!");

// Function FortniteUI.MashPhaseWidget.OnCountdownUpdate
// 0x0004 (0x0004 - 0x0000)
struct MashPhaseWidget_OnCountdownUpdate final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashPhaseWidget_OnCountdownUpdate) == 0x000004, "Wrong alignment on MashPhaseWidget_OnCountdownUpdate");
static_assert(sizeof(MashPhaseWidget_OnCountdownUpdate) == 0x000004, "Wrong size on MashPhaseWidget_OnCountdownUpdate");
static_assert(offsetof(MashPhaseWidget_OnCountdownUpdate, TimeRemaining) == 0x000000, "Member 'MashPhaseWidget_OnCountdownUpdate::TimeRemaining' has a wrong offset!");

// Function FortniteUI.MashPhaseWidget.OnPhaseChanged
// 0x000C (0x000C - 0x0000)
struct MashPhaseWidget_OnPhaseChanged final
{
public:
	EMashPhase                                    NewPhase;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentObjectiveIndex;                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalObjectiveArea;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashPhaseWidget_OnPhaseChanged) == 0x000004, "Wrong alignment on MashPhaseWidget_OnPhaseChanged");
static_assert(sizeof(MashPhaseWidget_OnPhaseChanged) == 0x00000C, "Wrong size on MashPhaseWidget_OnPhaseChanged");
static_assert(offsetof(MashPhaseWidget_OnPhaseChanged, NewPhase) == 0x000000, "Member 'MashPhaseWidget_OnPhaseChanged::NewPhase' has a wrong offset!");
static_assert(offsetof(MashPhaseWidget_OnPhaseChanged, CurrentObjectiveIndex) == 0x000004, "Member 'MashPhaseWidget_OnPhaseChanged::CurrentObjectiveIndex' has a wrong offset!");
static_assert(offsetof(MashPhaseWidget_OnPhaseChanged, TotalObjectiveArea) == 0x000008, "Member 'MashPhaseWidget_OnPhaseChanged::TotalObjectiveArea' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDMenuStatusLayerBase.AddHUDMenuStatus
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastHUDMenuStatusLayerBase_AddHUDMenuStatus final
{
public:
	class UAthenaBroadcastHUDMenuStatusBase*      HUDMenuStatusWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDMenuStatusLayerBase_AddHUDMenuStatus) == 0x000008, "Wrong alignment on AthenaBroadcastHUDMenuStatusLayerBase_AddHUDMenuStatus");
static_assert(sizeof(AthenaBroadcastHUDMenuStatusLayerBase_AddHUDMenuStatus) == 0x000008, "Wrong size on AthenaBroadcastHUDMenuStatusLayerBase_AddHUDMenuStatus");
static_assert(offsetof(AthenaBroadcastHUDMenuStatusLayerBase_AddHUDMenuStatus, HUDMenuStatusWidget) == 0x000000, "Member 'AthenaBroadcastHUDMenuStatusLayerBase_AddHUDMenuStatus::HUDMenuStatusWidget' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastHUDMenuStatusLayerBase.RemoveHUDMenuStatus
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastHUDMenuStatusLayerBase_RemoveHUDMenuStatus final
{
public:
	class UAthenaBroadcastHUDMenuStatusBase*      HUDMenuStatusWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastHUDMenuStatusLayerBase_RemoveHUDMenuStatus) == 0x000008, "Wrong alignment on AthenaBroadcastHUDMenuStatusLayerBase_RemoveHUDMenuStatus");
static_assert(sizeof(AthenaBroadcastHUDMenuStatusLayerBase_RemoveHUDMenuStatus) == 0x000008, "Wrong size on AthenaBroadcastHUDMenuStatusLayerBase_RemoveHUDMenuStatus");
static_assert(offsetof(AthenaBroadcastHUDMenuStatusLayerBase_RemoveHUDMenuStatus, HUDMenuStatusWidget) == 0x000000, "Member 'AthenaBroadcastHUDMenuStatusLayerBase_RemoveHUDMenuStatus::HUDMenuStatusWidget' has a wrong offset!");

// Function FortniteUI.FortOptionsTab.AreParentalControlsEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsTab_AreParentalControlsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsTab_AreParentalControlsEnabled) == 0x000001, "Wrong alignment on FortOptionsTab_AreParentalControlsEnabled");
static_assert(sizeof(FortOptionsTab_AreParentalControlsEnabled) == 0x000001, "Wrong size on FortOptionsTab_AreParentalControlsEnabled");
static_assert(offsetof(FortOptionsTab_AreParentalControlsEnabled, ReturnValue) == 0x000000, "Member 'FortOptionsTab_AreParentalControlsEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsTab.IsAthena
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsTab_IsAthena final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsTab_IsAthena) == 0x000001, "Wrong alignment on FortOptionsTab_IsAthena");
static_assert(sizeof(FortOptionsTab_IsAthena) == 0x000001, "Wrong size on FortOptionsTab_IsAthena");
static_assert(offsetof(FortOptionsTab_IsAthena, ReturnValue) == 0x000000, "Member 'FortOptionsTab_IsAthena::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsTab.IsPS4Platform
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsTab_IsPS4Platform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsTab_IsPS4Platform) == 0x000001, "Wrong alignment on FortOptionsTab_IsPS4Platform");
static_assert(sizeof(FortOptionsTab_IsPS4Platform) == 0x000001, "Wrong size on FortOptionsTab_IsPS4Platform");
static_assert(offsetof(FortOptionsTab_IsPS4Platform, ReturnValue) == 0x000000, "Member 'FortOptionsTab_IsPS4Platform::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsTab.IsSwitchPlatform
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsTab_IsSwitchPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsTab_IsSwitchPlatform) == 0x000001, "Wrong alignment on FortOptionsTab_IsSwitchPlatform");
static_assert(sizeof(FortOptionsTab_IsSwitchPlatform) == 0x000001, "Wrong size on FortOptionsTab_IsSwitchPlatform");
static_assert(offsetof(FortOptionsTab_IsSwitchPlatform, ReturnValue) == 0x000000, "Member 'FortOptionsTab_IsSwitchPlatform::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsTab.IsXboxPlatform
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsTab_IsXboxPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsTab_IsXboxPlatform) == 0x000001, "Wrong alignment on FortOptionsTab_IsXboxPlatform");
static_assert(sizeof(FortOptionsTab_IsXboxPlatform) == 0x000001, "Wrong size on FortOptionsTab_IsXboxPlatform");
static_assert(offsetof(FortOptionsTab_IsXboxPlatform, ReturnValue) == 0x000000, "Member 'FortOptionsTab_IsXboxPlatform::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsTab.ShouldShowSetting
// 0x01A0 (0x01A0 - 0x0000)
struct FortOptionsTab_ShouldShowSetting final
{
public:
	struct FSettingData                           SettingData;                                       // 0x0000(0x0198)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0198(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOptionsTab_ShouldShowSetting) == 0x000008, "Wrong alignment on FortOptionsTab_ShouldShowSetting");
static_assert(sizeof(FortOptionsTab_ShouldShowSetting) == 0x0001A0, "Wrong size on FortOptionsTab_ShouldShowSetting");
static_assert(offsetof(FortOptionsTab_ShouldShowSetting, SettingData) == 0x000000, "Member 'FortOptionsTab_ShouldShowSetting::SettingData' has a wrong offset!");
static_assert(offsetof(FortOptionsTab_ShouldShowSetting, ReturnValue) == 0x000198, "Member 'FortOptionsTab_ShouldShowSetting::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsTab.UpdateOptions
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsTab_UpdateOptions final
{
public:
	bool                                          UpdateQuality;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsTab_UpdateOptions) == 0x000001, "Wrong alignment on FortOptionsTab_UpdateOptions");
static_assert(sizeof(FortOptionsTab_UpdateOptions) == 0x000001, "Wrong size on FortOptionsTab_UpdateOptions");
static_assert(offsetof(FortOptionsTab_UpdateOptions, UpdateQuality) == 0x000000, "Member 'FortOptionsTab_UpdateOptions::UpdateQuality' has a wrong offset!");

// Function FortniteUI.FortGameOptions.SetControllerPlatform
// 0x0010 (0x0010 - 0x0000)
struct FortGameOptions_SetControllerPlatform final
{
public:
	class FString                                 InControllerPlatform;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameOptions_SetControllerPlatform) == 0x000008, "Wrong alignment on FortGameOptions_SetControllerPlatform");
static_assert(sizeof(FortGameOptions_SetControllerPlatform) == 0x000010, "Wrong size on FortGameOptions_SetControllerPlatform");
static_assert(offsetof(FortGameOptions_SetControllerPlatform, InControllerPlatform) == 0x000000, "Member 'FortGameOptions_SetControllerPlatform::InControllerPlatform' has a wrong offset!");

// Function FortniteUI.FortGameOptions.GetControllerPlatform
// 0x0010 (0x0010 - 0x0000)
struct FortGameOptions_GetControllerPlatform final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameOptions_GetControllerPlatform) == 0x000008, "Wrong alignment on FortGameOptions_GetControllerPlatform");
static_assert(sizeof(FortGameOptions_GetControllerPlatform) == 0x000010, "Wrong size on FortGameOptions_GetControllerPlatform");
static_assert(offsetof(FortGameOptions_GetControllerPlatform, ReturnValue) == 0x000000, "Member 'FortGameOptions_GetControllerPlatform::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGameOptions.GetHUDSettings
// 0x000C (0x000C - 0x0000)
struct FortGameOptions_GetHUDSettings final
{
public:
	struct FGameplayTag                           HUDMapping;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameOptions_GetHUDSettings) == 0x000004, "Wrong alignment on FortGameOptions_GetHUDSettings");
static_assert(sizeof(FortGameOptions_GetHUDSettings) == 0x00000C, "Wrong size on FortGameOptions_GetHUDSettings");
static_assert(offsetof(FortGameOptions_GetHUDSettings, HUDMapping) == 0x000000, "Member 'FortGameOptions_GetHUDSettings::HUDMapping' has a wrong offset!");
static_assert(offsetof(FortGameOptions_GetHUDSettings, ReturnValue) == 0x000008, "Member 'FortGameOptions_GetHUDSettings::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGameOptions.UpdateHUDSettings
// 0x000C (0x000C - 0x0000)
struct FortGameOptions_UpdateHUDSettings final
{
public:
	struct FGameplayTag                           HUDMapping;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewVisibility;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameOptions_UpdateHUDSettings) == 0x000004, "Wrong alignment on FortGameOptions_UpdateHUDSettings");
static_assert(sizeof(FortGameOptions_UpdateHUDSettings) == 0x00000C, "Wrong size on FortGameOptions_UpdateHUDSettings");
static_assert(offsetof(FortGameOptions_UpdateHUDSettings, HUDMapping) == 0x000000, "Member 'FortGameOptions_UpdateHUDSettings::HUDMapping' has a wrong offset!");
static_assert(offsetof(FortGameOptions_UpdateHUDSettings, NewVisibility) == 0x000008, "Member 'FortGameOptions_UpdateHUDSettings::NewVisibility' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchSquadWidgetBase.OnPlayerAdded
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchSquadWidgetBase_OnPlayerAdded final
{
public:
	class UAthenaRemoteSquadViewData*             InSquadData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchSquadWidgetBase_OnPlayerAdded) == 0x000008, "Wrong alignment on AthenaEventMatchSquadWidgetBase_OnPlayerAdded");
static_assert(sizeof(AthenaEventMatchSquadWidgetBase_OnPlayerAdded) == 0x000010, "Wrong size on AthenaEventMatchSquadWidgetBase_OnPlayerAdded");
static_assert(offsetof(AthenaEventMatchSquadWidgetBase_OnPlayerAdded, InSquadData) == 0x000000, "Member 'AthenaEventMatchSquadWidgetBase_OnPlayerAdded::InSquadData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchSquadWidgetBase_OnPlayerAdded, InPlayerData) == 0x000008, "Member 'AthenaEventMatchSquadWidgetBase_OnPlayerAdded::InPlayerData' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchSquadWidgetBase.OnSquadColorChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchSquadWidgetBase_OnSquadColorChanged final
{
public:
	class UAthenaRemoteSquadViewData*             InSquadData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InSquadColor;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchSquadWidgetBase_OnSquadColorChanged) == 0x000008, "Wrong alignment on AthenaEventMatchSquadWidgetBase_OnSquadColorChanged");
static_assert(sizeof(AthenaEventMatchSquadWidgetBase_OnSquadColorChanged) == 0x000018, "Wrong size on AthenaEventMatchSquadWidgetBase_OnSquadColorChanged");
static_assert(offsetof(AthenaEventMatchSquadWidgetBase_OnSquadColorChanged, InSquadData) == 0x000000, "Member 'AthenaEventMatchSquadWidgetBase_OnSquadColorChanged::InSquadData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchSquadWidgetBase_OnSquadColorChanged, InSquadColor) == 0x000008, "Member 'AthenaEventMatchSquadWidgetBase_OnSquadColorChanged::InSquadColor' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchSquadWidgetBase.OnSquadIdChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchSquadWidgetBase_OnSquadIdChanged final
{
public:
	class UAthenaRemoteSquadViewData*             InSquadData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InSquadId;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchSquadWidgetBase_OnSquadIdChanged) == 0x000008, "Wrong alignment on AthenaEventMatchSquadWidgetBase_OnSquadIdChanged");
static_assert(sizeof(AthenaEventMatchSquadWidgetBase_OnSquadIdChanged) == 0x000010, "Wrong size on AthenaEventMatchSquadWidgetBase_OnSquadIdChanged");
static_assert(offsetof(AthenaEventMatchSquadWidgetBase_OnSquadIdChanged, InSquadData) == 0x000000, "Member 'AthenaEventMatchSquadWidgetBase_OnSquadIdChanged::InSquadData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchSquadWidgetBase_OnSquadIdChanged, InSquadId) == 0x000008, "Member 'AthenaEventMatchSquadWidgetBase_OnSquadIdChanged::InSquadId' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchSquadWidgetBase.OnSquadKillscoreChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchSquadWidgetBase_OnSquadKillscoreChanged final
{
public:
	class UAthenaRemoteSquadViewData*             InSquadData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSquadKills;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchSquadWidgetBase_OnSquadKillscoreChanged) == 0x000008, "Wrong alignment on AthenaEventMatchSquadWidgetBase_OnSquadKillscoreChanged");
static_assert(sizeof(AthenaEventMatchSquadWidgetBase_OnSquadKillscoreChanged) == 0x000010, "Wrong size on AthenaEventMatchSquadWidgetBase_OnSquadKillscoreChanged");
static_assert(offsetof(AthenaEventMatchSquadWidgetBase_OnSquadKillscoreChanged, InSquadData) == 0x000000, "Member 'AthenaEventMatchSquadWidgetBase_OnSquadKillscoreChanged::InSquadData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchSquadWidgetBase_OnSquadKillscoreChanged, InSquadKills) == 0x000008, "Member 'AthenaEventMatchSquadWidgetBase_OnSquadKillscoreChanged::InSquadKills' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchSquadWidgetBase.OnSquadPlaceChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchSquadWidgetBase_OnSquadPlaceChanged final
{
public:
	class UAthenaRemoteSquadViewData*             InSquadData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSquadPlace;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchSquadWidgetBase_OnSquadPlaceChanged) == 0x000008, "Wrong alignment on AthenaEventMatchSquadWidgetBase_OnSquadPlaceChanged");
static_assert(sizeof(AthenaEventMatchSquadWidgetBase_OnSquadPlaceChanged) == 0x000010, "Wrong size on AthenaEventMatchSquadWidgetBase_OnSquadPlaceChanged");
static_assert(offsetof(AthenaEventMatchSquadWidgetBase_OnSquadPlaceChanged, InSquadData) == 0x000000, "Member 'AthenaEventMatchSquadWidgetBase_OnSquadPlaceChanged::InSquadData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchSquadWidgetBase_OnSquadPlaceChanged, InSquadPlace) == 0x000008, "Member 'AthenaEventMatchSquadWidgetBase_OnSquadPlaceChanged::InSquadPlace' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchSquadWidgetBase.SetSquadIdVisible
// 0x0001 (0x0001 - 0x0000)
struct AthenaEventMatchSquadWidgetBase_SetSquadIdVisible final
{
public:
	bool                                          bSquadIdVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchSquadWidgetBase_SetSquadIdVisible) == 0x000001, "Wrong alignment on AthenaEventMatchSquadWidgetBase_SetSquadIdVisible");
static_assert(sizeof(AthenaEventMatchSquadWidgetBase_SetSquadIdVisible) == 0x000001, "Wrong size on AthenaEventMatchSquadWidgetBase_SetSquadIdVisible");
static_assert(offsetof(AthenaEventMatchSquadWidgetBase_SetSquadIdVisible, bSquadIdVisible) == 0x000000, "Member 'AthenaEventMatchSquadWidgetBase_SetSquadIdVisible::bSquadIdVisible' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastKillFeedBase.AddKillFeedEntry
// 0x0050 (0x0050 - 0x0000)
struct AthenaBroadcastKillFeedBase_AddKillFeedEntry final
{
public:
	struct FAthenaBroadcastKillFeedEntryInfo      KillFeedEntryInfo;                                 // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastKillFeedBase_AddKillFeedEntry) == 0x000008, "Wrong alignment on AthenaBroadcastKillFeedBase_AddKillFeedEntry");
static_assert(sizeof(AthenaBroadcastKillFeedBase_AddKillFeedEntry) == 0x000050, "Wrong size on AthenaBroadcastKillFeedBase_AddKillFeedEntry");
static_assert(offsetof(AthenaBroadcastKillFeedBase_AddKillFeedEntry, KillFeedEntryInfo) == 0x000000, "Member 'AthenaBroadcastKillFeedBase_AddKillFeedEntry::KillFeedEntryInfo' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastKillFeedBase.OnToggleShowKillFeed
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastKillFeedBase_OnToggleShowKillFeed final
{
public:
	bool                                          bShowKillFeed;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastKillFeedBase_OnToggleShowKillFeed) == 0x000001, "Wrong alignment on AthenaBroadcastKillFeedBase_OnToggleShowKillFeed");
static_assert(sizeof(AthenaBroadcastKillFeedBase_OnToggleShowKillFeed) == 0x000001, "Wrong size on AthenaBroadcastKillFeedBase_OnToggleShowKillFeed");
static_assert(offsetof(AthenaBroadcastKillFeedBase_OnToggleShowKillFeed, bShowKillFeed) == 0x000000, "Member 'AthenaBroadcastKillFeedBase_OnToggleShowKillFeed::bShowKillFeed' has a wrong offset!");

// Function FortniteUI.AthenaRebootCardIndicator.HandleDisplayForSelf
// 0x0001 (0x0001 - 0x0000)
struct AthenaRebootCardIndicator_HandleDisplayForSelf final
{
public:
	bool                                          bSelf;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRebootCardIndicator_HandleDisplayForSelf) == 0x000001, "Wrong alignment on AthenaRebootCardIndicator_HandleDisplayForSelf");
static_assert(sizeof(AthenaRebootCardIndicator_HandleDisplayForSelf) == 0x000001, "Wrong size on AthenaRebootCardIndicator_HandleDisplayForSelf");
static_assert(offsetof(AthenaRebootCardIndicator_HandleDisplayForSelf, bSelf) == 0x000000, "Member 'AthenaRebootCardIndicator_HandleDisplayForSelf::bSelf' has a wrong offset!");

// Function FortniteUI.AthenaRebootCardIndicator.SetupCountdown
// 0x0008 (0x0008 - 0x0000)
struct AthenaRebootCardIndicator_SetupCountdown final
{
public:
	float                                         StartTimeLocalWorld;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimeLocalWorld;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRebootCardIndicator_SetupCountdown) == 0x000004, "Wrong alignment on AthenaRebootCardIndicator_SetupCountdown");
static_assert(sizeof(AthenaRebootCardIndicator_SetupCountdown) == 0x000008, "Wrong size on AthenaRebootCardIndicator_SetupCountdown");
static_assert(offsetof(AthenaRebootCardIndicator_SetupCountdown, StartTimeLocalWorld) == 0x000000, "Member 'AthenaRebootCardIndicator_SetupCountdown::StartTimeLocalWorld' has a wrong offset!");
static_assert(offsetof(AthenaRebootCardIndicator_SetupCountdown, EndTimeLocalWorld) == 0x000004, "Member 'AthenaRebootCardIndicator_SetupCountdown::EndTimeLocalWorld' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastKillFeedItemBase.SetKillFeedInfo
// 0x0050 (0x0050 - 0x0000)
struct AthenaBroadcastKillFeedItemBase_SetKillFeedInfo final
{
public:
	struct FAthenaBroadcastKillFeedEntryInfo      KillFeedEntryInfo;                                 // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastKillFeedItemBase_SetKillFeedInfo) == 0x000008, "Wrong alignment on AthenaBroadcastKillFeedItemBase_SetKillFeedInfo");
static_assert(sizeof(AthenaBroadcastKillFeedItemBase_SetKillFeedInfo) == 0x000050, "Wrong size on AthenaBroadcastKillFeedItemBase_SetKillFeedInfo");
static_assert(offsetof(AthenaBroadcastKillFeedItemBase_SetKillFeedInfo, KillFeedEntryInfo) == 0x000000, "Member 'AthenaBroadcastKillFeedItemBase_SetKillFeedInfo::KillFeedEntryInfo' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastMapPanelBase.OnMapIconAdded
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastMapPanelBase_OnMapIconAdded final
{
public:
	class UFortSpectateClickableMapIcon*          MapIconIn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastMapPanelBase_OnMapIconAdded) == 0x000008, "Wrong alignment on AthenaBroadcastMapPanelBase_OnMapIconAdded");
static_assert(sizeof(AthenaBroadcastMapPanelBase_OnMapIconAdded) == 0x000008, "Wrong size on AthenaBroadcastMapPanelBase_OnMapIconAdded");
static_assert(offsetof(AthenaBroadcastMapPanelBase_OnMapIconAdded, MapIconIn) == 0x000000, "Member 'AthenaBroadcastMapPanelBase_OnMapIconAdded::MapIconIn' has a wrong offset!");

// Function FortniteUI.FortMissionTracker.HandleDebugHUDObjectiveHeightChanged
// 0x0001 (0x0001 - 0x0000)
struct FortMissionTracker_HandleDebugHUDObjectiveHeightChanged final
{
public:
	bool                                          bIsDebugging;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTracker_HandleDebugHUDObjectiveHeightChanged) == 0x000001, "Wrong alignment on FortMissionTracker_HandleDebugHUDObjectiveHeightChanged");
static_assert(sizeof(FortMissionTracker_HandleDebugHUDObjectiveHeightChanged) == 0x000001, "Wrong size on FortMissionTracker_HandleDebugHUDObjectiveHeightChanged");
static_assert(offsetof(FortMissionTracker_HandleDebugHUDObjectiveHeightChanged, bIsDebugging) == 0x000000, "Member 'FortMissionTracker_HandleDebugHUDObjectiveHeightChanged::bIsDebugging' has a wrong offset!");

// Function FortniteUI.FortMissionTracker.HandleSizeEstimateChanged
// 0x0008 (0x0008 - 0x0000)
struct FortMissionTracker_HandleSizeEstimateChanged final
{
public:
	class UObject*                                ChangedElement;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTracker_HandleSizeEstimateChanged) == 0x000008, "Wrong alignment on FortMissionTracker_HandleSizeEstimateChanged");
static_assert(sizeof(FortMissionTracker_HandleSizeEstimateChanged) == 0x000008, "Wrong size on FortMissionTracker_HandleSizeEstimateChanged");
static_assert(offsetof(FortMissionTracker_HandleSizeEstimateChanged, ChangedElement) == 0x000000, "Member 'FortMissionTracker_HandleSizeEstimateChanged::ChangedElement' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatContext.CreateCurrentMatchStatView
// 0x0008 (0x0008 - 0x0000)
struct AthenaProfileStatContext_CreateCurrentMatchStatView final
{
public:
	class UAthenaMatchStatView*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatContext_CreateCurrentMatchStatView) == 0x000008, "Wrong alignment on AthenaProfileStatContext_CreateCurrentMatchStatView");
static_assert(sizeof(AthenaProfileStatContext_CreateCurrentMatchStatView) == 0x000008, "Wrong size on AthenaProfileStatContext_CreateCurrentMatchStatView");
static_assert(offsetof(AthenaProfileStatContext_CreateCurrentMatchStatView, ReturnValue) == 0x000000, "Member 'AthenaProfileStatContext_CreateCurrentMatchStatView::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatContext.CreateMatchStatView
// 0x0018 (0x0018 - 0x0000)
struct AthenaProfileStatContext_CreateMatchStatView final
{
public:
	class UAthenaSeasonStats*                     StatSet;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Bucket;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaMatchSetStatView*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatContext_CreateMatchStatView) == 0x000008, "Wrong alignment on AthenaProfileStatContext_CreateMatchStatView");
static_assert(sizeof(AthenaProfileStatContext_CreateMatchStatView) == 0x000018, "Wrong size on AthenaProfileStatContext_CreateMatchStatView");
static_assert(offsetof(AthenaProfileStatContext_CreateMatchStatView, StatSet) == 0x000000, "Member 'AthenaProfileStatContext_CreateMatchStatView::StatSet' has a wrong offset!");
static_assert(offsetof(AthenaProfileStatContext_CreateMatchStatView, Bucket) == 0x000008, "Member 'AthenaProfileStatContext_CreateMatchStatView::Bucket' has a wrong offset!");
static_assert(offsetof(AthenaProfileStatContext_CreateMatchStatView, ReturnValue) == 0x000010, "Member 'AthenaProfileStatContext_CreateMatchStatView::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatContext.CreateMatchViews
// 0x0020 (0x0020 - 0x0000)
struct AthenaProfileStatContext_CreateMatchViews final
{
public:
	TArray<struct FAthenaMatchStats>              InRecentMatches;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UAthenaMatchStatView*>           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatContext_CreateMatchViews) == 0x000008, "Wrong alignment on AthenaProfileStatContext_CreateMatchViews");
static_assert(sizeof(AthenaProfileStatContext_CreateMatchViews) == 0x000020, "Wrong size on AthenaProfileStatContext_CreateMatchViews");
static_assert(offsetof(AthenaProfileStatContext_CreateMatchViews, InRecentMatches) == 0x000000, "Member 'AthenaProfileStatContext_CreateMatchViews::InRecentMatches' has a wrong offset!");
static_assert(offsetof(AthenaProfileStatContext_CreateMatchViews, ReturnValue) == 0x000010, "Member 'AthenaProfileStatContext_CreateMatchViews::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaProfileStatContext.OnAthenaStatsProfileLoaded__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AthenaProfileStatContext_OnAthenaStatsProfileLoaded__DelegateSignature final
{
public:
	class UFortMcpProfileAthenaStats*             StatProfile;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatContext_OnAthenaStatsProfileLoaded__DelegateSignature) == 0x000008, "Wrong alignment on AthenaProfileStatContext_OnAthenaStatsProfileLoaded__DelegateSignature");
static_assert(sizeof(AthenaProfileStatContext_OnAthenaStatsProfileLoaded__DelegateSignature) == 0x000008, "Wrong size on AthenaProfileStatContext_OnAthenaStatsProfileLoaded__DelegateSignature");
static_assert(offsetof(AthenaProfileStatContext_OnAthenaStatsProfileLoaded__DelegateSignature, StatProfile) == 0x000000, "Member 'AthenaProfileStatContext_OnAthenaStatsProfileLoaded__DelegateSignature::StatProfile' has a wrong offset!");

// Function FortniteUI.MobileHUDVisual.GetVisualType
// 0x0008 (0x0008 - 0x0000)
struct MobileHUDVisual_GetVisualType final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobileHUDVisual_GetVisualType) == 0x000004, "Wrong alignment on MobileHUDVisual_GetVisualType");
static_assert(sizeof(MobileHUDVisual_GetVisualType) == 0x000008, "Wrong size on MobileHUDVisual_GetVisualType");
static_assert(offsetof(MobileHUDVisual_GetVisualType, ReturnValue) == 0x000000, "Member 'MobileHUDVisual_GetVisualType::ReturnValue' has a wrong offset!");

// Function FortniteUI.MobileHUDButtonVisual.SetButtonSprite
// 0x0008 (0x0008 - 0x0000)
struct MobileHUDButtonVisual_SetButtonSprite final
{
public:
	class UPaperSprite*                           NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobileHUDButtonVisual_SetButtonSprite) == 0x000008, "Wrong alignment on MobileHUDButtonVisual_SetButtonSprite");
static_assert(sizeof(MobileHUDButtonVisual_SetButtonSprite) == 0x000008, "Wrong size on MobileHUDButtonVisual_SetButtonSprite");
static_assert(offsetof(MobileHUDButtonVisual_SetButtonSprite, NewSprite) == 0x000000, "Member 'MobileHUDButtonVisual_SetButtonSprite::NewSprite' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastMatchStatusWidget.OnStormPhaseChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaBroadcastMatchStatusWidget_OnStormPhaseChanged final
{
public:
	int32                                         StormPhase;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastMatchStatusWidget_OnStormPhaseChanged) == 0x000004, "Wrong alignment on AthenaBroadcastMatchStatusWidget_OnStormPhaseChanged");
static_assert(sizeof(AthenaBroadcastMatchStatusWidget_OnStormPhaseChanged) == 0x000004, "Wrong size on AthenaBroadcastMatchStatusWidget_OnStormPhaseChanged");
static_assert(offsetof(AthenaBroadcastMatchStatusWidget_OnStormPhaseChanged, StormPhase) == 0x000000, "Member 'AthenaBroadcastMatchStatusWidget_OnStormPhaseChanged::StormPhase' has a wrong offset!");

// Function FortniteUI.FortGiftBoxButton.PlayGiftSelectedAnimation
// 0x0001 (0x0001 - 0x0000)
struct FortGiftBoxButton_PlayGiftSelectedAnimation final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGiftBoxButton_PlayGiftSelectedAnimation) == 0x000001, "Wrong alignment on FortGiftBoxButton_PlayGiftSelectedAnimation");
static_assert(sizeof(FortGiftBoxButton_PlayGiftSelectedAnimation) == 0x000001, "Wrong size on FortGiftBoxButton_PlayGiftSelectedAnimation");
static_assert(offsetof(FortGiftBoxButton_PlayGiftSelectedAnimation, bIsSelected) == 0x000000, "Member 'FortGiftBoxButton_PlayGiftSelectedAnimation::bIsSelected' has a wrong offset!");

// Function FortniteUI.AthenaChallengeDetailImageGrid.OnLockedToOwnedTransitions
// 0x000C (0x000C - 0x0000)
struct AthenaChallengeDetailImageGrid_OnLockedToOwnedTransitions final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOffset;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeDetailImageGrid_OnLockedToOwnedTransitions) == 0x000004, "Wrong alignment on AthenaChallengeDetailImageGrid_OnLockedToOwnedTransitions");
static_assert(sizeof(AthenaChallengeDetailImageGrid_OnLockedToOwnedTransitions) == 0x00000C, "Wrong size on AthenaChallengeDetailImageGrid_OnLockedToOwnedTransitions");
static_assert(offsetof(AthenaChallengeDetailImageGrid_OnLockedToOwnedTransitions, Count) == 0x000000, "Member 'AthenaChallengeDetailImageGrid_OnLockedToOwnedTransitions::Count' has a wrong offset!");
static_assert(offsetof(AthenaChallengeDetailImageGrid_OnLockedToOwnedTransitions, TimeOffset) == 0x000004, "Member 'AthenaChallengeDetailImageGrid_OnLockedToOwnedTransitions::TimeOffset' has a wrong offset!");
static_assert(offsetof(AthenaChallengeDetailImageGrid_OnLockedToOwnedTransitions, AdditionalTime) == 0x000008, "Member 'AthenaChallengeDetailImageGrid_OnLockedToOwnedTransitions::AdditionalTime' has a wrong offset!");

// Function FortniteUI.AthenaChallengeDetailImageGrid.OnOwnedToCompleteTransitions
// 0x000C (0x000C - 0x0000)
struct AthenaChallengeDetailImageGrid_OnOwnedToCompleteTransitions final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOffset;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeDetailImageGrid_OnOwnedToCompleteTransitions) == 0x000004, "Wrong alignment on AthenaChallengeDetailImageGrid_OnOwnedToCompleteTransitions");
static_assert(sizeof(AthenaChallengeDetailImageGrid_OnOwnedToCompleteTransitions) == 0x00000C, "Wrong size on AthenaChallengeDetailImageGrid_OnOwnedToCompleteTransitions");
static_assert(offsetof(AthenaChallengeDetailImageGrid_OnOwnedToCompleteTransitions, Count) == 0x000000, "Member 'AthenaChallengeDetailImageGrid_OnOwnedToCompleteTransitions::Count' has a wrong offset!");
static_assert(offsetof(AthenaChallengeDetailImageGrid_OnOwnedToCompleteTransitions, TimeOffset) == 0x000004, "Member 'AthenaChallengeDetailImageGrid_OnOwnedToCompleteTransitions::TimeOffset' has a wrong offset!");
static_assert(offsetof(AthenaChallengeDetailImageGrid_OnOwnedToCompleteTransitions, AdditionalTime) == 0x000008, "Member 'AthenaChallengeDetailImageGrid_OnOwnedToCompleteTransitions::AdditionalTime' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastPlayerEventScoreWidget.OnRemoteClientEventScoreChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaBroadcastPlayerEventScoreWidget_OnRemoteClientEventScoreChanged final
{
public:
	int32                                         NewEventScore;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastPlayerEventScoreWidget_OnRemoteClientEventScoreChanged) == 0x000004, "Wrong alignment on AthenaBroadcastPlayerEventScoreWidget_OnRemoteClientEventScoreChanged");
static_assert(sizeof(AthenaBroadcastPlayerEventScoreWidget_OnRemoteClientEventScoreChanged) == 0x000004, "Wrong size on AthenaBroadcastPlayerEventScoreWidget_OnRemoteClientEventScoreChanged");
static_assert(offsetof(AthenaBroadcastPlayerEventScoreWidget_OnRemoteClientEventScoreChanged, NewEventScore) == 0x000000, "Member 'AthenaBroadcastPlayerEventScoreWidget_OnRemoteClientEventScoreChanged::NewEventScore' has a wrong offset!");

// Function FortniteUI.KairosMessageBase.FindUnreadMessages
// 0x0001 (0x0001 - 0x0000)
struct KairosMessageBase_FindUnreadMessages final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KairosMessageBase_FindUnreadMessages) == 0x000001, "Wrong alignment on KairosMessageBase_FindUnreadMessages");
static_assert(sizeof(KairosMessageBase_FindUnreadMessages) == 0x000001, "Wrong size on KairosMessageBase_FindUnreadMessages");
static_assert(offsetof(KairosMessageBase_FindUnreadMessages, ReturnValue) == 0x000000, "Member 'KairosMessageBase_FindUnreadMessages::ReturnValue' has a wrong offset!");

// Function FortniteUI.KairosMessageBase.ForceClickCommonButton
// 0x0008 (0x0008 - 0x0000)
struct KairosMessageBase_ForceClickCommonButton final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KairosMessageBase_ForceClickCommonButton) == 0x000008, "Wrong alignment on KairosMessageBase_ForceClickCommonButton");
static_assert(sizeof(KairosMessageBase_ForceClickCommonButton) == 0x000008, "Wrong size on KairosMessageBase_ForceClickCommonButton");
static_assert(offsetof(KairosMessageBase_ForceClickCommonButton, Button) == 0x000000, "Member 'KairosMessageBase_ForceClickCommonButton::Button' has a wrong offset!");

// Function FortniteUI.KairosMessageBase.NumMessagesRemaining
// 0x0004 (0x0004 - 0x0000)
struct KairosMessageBase_NumMessagesRemaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KairosMessageBase_NumMessagesRemaining) == 0x000004, "Wrong alignment on KairosMessageBase_NumMessagesRemaining");
static_assert(sizeof(KairosMessageBase_NumMessagesRemaining) == 0x000004, "Wrong size on KairosMessageBase_NumMessagesRemaining");
static_assert(offsetof(KairosMessageBase_NumMessagesRemaining, ReturnValue) == 0x000000, "Member 'KairosMessageBase_NumMessagesRemaining::ReturnValue' has a wrong offset!");

// Function FortniteUI.KairosMessageBase.OnMessagesReady
// 0x0004 (0x0004 - 0x0000)
struct KairosMessageBase_OnMessagesReady final
{
public:
	float                                         SoundDuration;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KairosMessageBase_OnMessagesReady) == 0x000004, "Wrong alignment on KairosMessageBase_OnMessagesReady");
static_assert(sizeof(KairosMessageBase_OnMessagesReady) == 0x000004, "Wrong size on KairosMessageBase_OnMessagesReady");
static_assert(offsetof(KairosMessageBase_OnMessagesReady, SoundDuration) == 0x000000, "Member 'KairosMessageBase_OnMessagesReady::SoundDuration' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastPlayerLocationWidget.OnRemoteClientPoiTagIDChanged
// 0x0002 (0x0002 - 0x0000)
struct AthenaBroadcastPlayerLocationWidget_OnRemoteClientPoiTagIDChanged final
{
public:
	int16                                         RemoteClientPoiTagID;                              // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastPlayerLocationWidget_OnRemoteClientPoiTagIDChanged) == 0x000002, "Wrong alignment on AthenaBroadcastPlayerLocationWidget_OnRemoteClientPoiTagIDChanged");
static_assert(sizeof(AthenaBroadcastPlayerLocationWidget_OnRemoteClientPoiTagIDChanged) == 0x000002, "Wrong size on AthenaBroadcastPlayerLocationWidget_OnRemoteClientPoiTagIDChanged");
static_assert(offsetof(AthenaBroadcastPlayerLocationWidget_OnRemoteClientPoiTagIDChanged, RemoteClientPoiTagID) == 0x000000, "Member 'AthenaBroadcastPlayerLocationWidget_OnRemoteClientPoiTagIDChanged::RemoteClientPoiTagID' has a wrong offset!");

// Function FortniteUI.FortVariantPicker.InitFromCosmeticItem
// 0x0008 (0x0008 - 0x0000)
struct FortVariantPicker_InitFromCosmeticItem final
{
public:
	class UAthenaCosmeticAccountItem*             InCosmeticItem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVariantPicker_InitFromCosmeticItem) == 0x000008, "Wrong alignment on FortVariantPicker_InitFromCosmeticItem");
static_assert(sizeof(FortVariantPicker_InitFromCosmeticItem) == 0x000008, "Wrong size on FortVariantPicker_InitFromCosmeticItem");
static_assert(offsetof(FortVariantPicker_InitFromCosmeticItem, InCosmeticItem) == 0x000000, "Member 'FortVariantPicker_InitFromCosmeticItem::InCosmeticItem' has a wrong offset!");

// Function FortniteUI.FortVariantPicker.InitFromCosmeticItemDef
// 0x0008 (0x0008 - 0x0000)
struct FortVariantPicker_InitFromCosmeticItemDef final
{
public:
	class UAthenaCosmeticItemDefinition*          InCosmeticItemDef;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVariantPicker_InitFromCosmeticItemDef) == 0x000008, "Wrong alignment on FortVariantPicker_InitFromCosmeticItemDef");
static_assert(sizeof(FortVariantPicker_InitFromCosmeticItemDef) == 0x000008, "Wrong size on FortVariantPicker_InitFromCosmeticItemDef");
static_assert(offsetof(FortVariantPicker_InitFromCosmeticItemDef, InCosmeticItemDef) == 0x000000, "Member 'FortVariantPicker_InitFromCosmeticItemDef::InCosmeticItemDef' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastSquadStatusWidget.HandleFollowedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaBroadcastSquadStatusWidget_HandleFollowedPlayerChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatorController;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       NewFollowedPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastSquadStatusWidget_HandleFollowedPlayerChanged) == 0x000008, "Wrong alignment on AthenaBroadcastSquadStatusWidget_HandleFollowedPlayerChanged");
static_assert(sizeof(AthenaBroadcastSquadStatusWidget_HandleFollowedPlayerChanged) == 0x000010, "Wrong size on AthenaBroadcastSquadStatusWidget_HandleFollowedPlayerChanged");
static_assert(offsetof(AthenaBroadcastSquadStatusWidget_HandleFollowedPlayerChanged, SpectatorController) == 0x000000, "Member 'AthenaBroadcastSquadStatusWidget_HandleFollowedPlayerChanged::SpectatorController' has a wrong offset!");
static_assert(offsetof(AthenaBroadcastSquadStatusWidget_HandleFollowedPlayerChanged, NewFollowedPlayer) == 0x000008, "Member 'AthenaBroadcastSquadStatusWidget_HandleFollowedPlayerChanged::NewFollowedPlayer' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastSquadStatusWidget.OnBlockPartyTeamIdChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaBroadcastSquadStatusWidget_OnBlockPartyTeamIdChanged final
{
public:
	const class UFortBlockPartyTeamIdentification* BlockPartyTeamId;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastSquadStatusWidget_OnBlockPartyTeamIdChanged) == 0x000008, "Wrong alignment on AthenaBroadcastSquadStatusWidget_OnBlockPartyTeamIdChanged");
static_assert(sizeof(AthenaBroadcastSquadStatusWidget_OnBlockPartyTeamIdChanged) == 0x000008, "Wrong size on AthenaBroadcastSquadStatusWidget_OnBlockPartyTeamIdChanged");
static_assert(offsetof(AthenaBroadcastSquadStatusWidget_OnBlockPartyTeamIdChanged, BlockPartyTeamId) == 0x000000, "Member 'AthenaBroadcastSquadStatusWidget_OnBlockPartyTeamIdChanged::BlockPartyTeamId' has a wrong offset!");

// Function FortniteUI.AthenaBroadcastSquadStatusWidget.OnPipModeChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaBroadcastSquadStatusWidget_OnPipModeChanged final
{
public:
	bool                                          bPipModeEnabled;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBroadcastSquadStatusWidget_OnPipModeChanged) == 0x000001, "Wrong alignment on AthenaBroadcastSquadStatusWidget_OnPipModeChanged");
static_assert(sizeof(AthenaBroadcastSquadStatusWidget_OnPipModeChanged) == 0x000001, "Wrong size on AthenaBroadcastSquadStatusWidget_OnPipModeChanged");
static_assert(offsetof(AthenaBroadcastSquadStatusWidget_OnPipModeChanged, bPipModeEnabled) == 0x000000, "Member 'AthenaBroadcastSquadStatusWidget_OnPipModeChanged::bPipModeEnabled' has a wrong offset!");

// Function FortniteUI.FortEventPlayerStatProfileSelector.SetProfilesByLeaderboardData
// 0x0008 (0x0008 - 0x0000)
struct FortEventPlayerStatProfileSelector_SetProfilesByLeaderboardData final
{
public:
	const class UFortEventLeaderboardEntryData*   DataForDisplay;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventPlayerStatProfileSelector_SetProfilesByLeaderboardData) == 0x000008, "Wrong alignment on FortEventPlayerStatProfileSelector_SetProfilesByLeaderboardData");
static_assert(sizeof(FortEventPlayerStatProfileSelector_SetProfilesByLeaderboardData) == 0x000008, "Wrong size on FortEventPlayerStatProfileSelector_SetProfilesByLeaderboardData");
static_assert(offsetof(FortEventPlayerStatProfileSelector_SetProfilesByLeaderboardData, DataForDisplay) == 0x000000, "Member 'FortEventPlayerStatProfileSelector_SetProfilesByLeaderboardData::DataForDisplay' has a wrong offset!");

// Function FortniteUI.AthenaChallengeCountdownDisplay.OnChallengeSet
// 0x0038 (0x0038 - 0x0000)
struct AthenaChallengeCountdownDisplay_OnChallengeSet final
{
public:
	struct FTimerDisplayData                      DisplayStyle;                                      // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeCountdownDisplay_OnChallengeSet) == 0x000008, "Wrong alignment on AthenaChallengeCountdownDisplay_OnChallengeSet");
static_assert(sizeof(AthenaChallengeCountdownDisplay_OnChallengeSet) == 0x000038, "Wrong size on AthenaChallengeCountdownDisplay_OnChallengeSet");
static_assert(offsetof(AthenaChallengeCountdownDisplay_OnChallengeSet, DisplayStyle) == 0x000000, "Member 'AthenaChallengeCountdownDisplay_OnChallengeSet::DisplayStyle' has a wrong offset!");

// Function FortniteUI.GoosePlanePickupWidget.OpenWidget
// 0x0028 (0x0028 - 0x0000)
struct GoosePlanePickupWidget_OpenWidget final
{
public:
	int32                                         DisplayIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChestName;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoosePlanePickupWidget_OpenWidget) == 0x000008, "Wrong alignment on GoosePlanePickupWidget_OpenWidget");
static_assert(sizeof(GoosePlanePickupWidget_OpenWidget) == 0x000028, "Wrong size on GoosePlanePickupWidget_OpenWidget");
static_assert(offsetof(GoosePlanePickupWidget_OpenWidget, DisplayIndex) == 0x000000, "Member 'GoosePlanePickupWidget_OpenWidget::DisplayIndex' has a wrong offset!");
static_assert(offsetof(GoosePlanePickupWidget_OpenWidget, ChestName) == 0x000004, "Member 'GoosePlanePickupWidget_OpenWidget::ChestName' has a wrong offset!");
static_assert(offsetof(GoosePlanePickupWidget_OpenWidget, DisplayText) == 0x000010, "Member 'GoosePlanePickupWidget_OpenWidget::DisplayText' has a wrong offset!");

// Function FortniteUI.GenericLeaderboardDisplayWidgetBase.UpdateDisplay
// 0x0010 (0x0010 - 0x0000)
struct GenericLeaderboardDisplayWidgetBase_UpdateDisplay final
{
public:
	TArray<struct FFortInGameLeaderboardPlacementData> Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericLeaderboardDisplayWidgetBase_UpdateDisplay) == 0x000008, "Wrong alignment on GenericLeaderboardDisplayWidgetBase_UpdateDisplay");
static_assert(sizeof(GenericLeaderboardDisplayWidgetBase_UpdateDisplay) == 0x000010, "Wrong size on GenericLeaderboardDisplayWidgetBase_UpdateDisplay");
static_assert(offsetof(GenericLeaderboardDisplayWidgetBase_UpdateDisplay, Data) == 0x000000, "Member 'GenericLeaderboardDisplayWidgetBase_UpdateDisplay::Data' has a wrong offset!");

// Function FortniteUI.AthenaChallengeDisplayLibrary.ApplyChallengeSetStyleColorsToImageMaterial
// 0x0088 (0x0088 - 0x0000)
struct AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToImageMaterial final
{
public:
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UImage*                                 ImageWidget;                                       // 0x0080(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToImageMaterial) == 0x000008, "Wrong alignment on AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToImageMaterial");
static_assert(sizeof(AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToImageMaterial) == 0x000088, "Wrong size on AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToImageMaterial");
static_assert(offsetof(AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToImageMaterial, DisplayStyle) == 0x000000, "Member 'AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToImageMaterial::DisplayStyle' has a wrong offset!");
static_assert(offsetof(AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToImageMaterial, ImageWidget) == 0x000080, "Member 'AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToImageMaterial::ImageWidget' has a wrong offset!");

// Function FortniteUI.AthenaChallengeDisplayLibrary.ApplyChallengeSetStyleColorsToMaterial
// 0x0088 (0x0088 - 0x0000)
struct AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToMaterial final
{
public:
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               StyleMaterial;                                     // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToMaterial) == 0x000008, "Wrong alignment on AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToMaterial");
static_assert(sizeof(AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToMaterial) == 0x000088, "Wrong size on AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToMaterial");
static_assert(offsetof(AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToMaterial, DisplayStyle) == 0x000000, "Member 'AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToMaterial::DisplayStyle' has a wrong offset!");
static_assert(offsetof(AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToMaterial, StyleMaterial) == 0x000080, "Member 'AthenaChallengeDisplayLibrary_ApplyChallengeSetStyleColorsToMaterial::StyleMaterial' has a wrong offset!");

// Function FortniteUI.AthenaChallengeDisplayLibrary.GetChallengeStyleLightAccentColor
// 0x0090 (0x0090 - 0x0000)
struct AthenaChallengeDisplayLibrary_GetChallengeStyleLightAccentColor final
{
public:
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeDisplayLibrary_GetChallengeStyleLightAccentColor) == 0x000008, "Wrong alignment on AthenaChallengeDisplayLibrary_GetChallengeStyleLightAccentColor");
static_assert(sizeof(AthenaChallengeDisplayLibrary_GetChallengeStyleLightAccentColor) == 0x000090, "Wrong size on AthenaChallengeDisplayLibrary_GetChallengeStyleLightAccentColor");
static_assert(offsetof(AthenaChallengeDisplayLibrary_GetChallengeStyleLightAccentColor, DisplayStyle) == 0x000000, "Member 'AthenaChallengeDisplayLibrary_GetChallengeStyleLightAccentColor::DisplayStyle' has a wrong offset!");
static_assert(offsetof(AthenaChallengeDisplayLibrary_GetChallengeStyleLightAccentColor, ReturnValue) == 0x000080, "Member 'AthenaChallengeDisplayLibrary_GetChallengeStyleLightAccentColor::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalActionDetailsDataSource.AddOnChangeDelegate
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalActionDetailsDataSource_AddOnChangeDelegate final
{
public:
	TDelegate<void(class UObject* Source)>        InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalActionDetailsDataSource_AddOnChangeDelegate) == 0x000004, "Wrong alignment on FortGlobalActionDetailsDataSource_AddOnChangeDelegate");
static_assert(sizeof(FortGlobalActionDetailsDataSource_AddOnChangeDelegate) == 0x000010, "Wrong size on FortGlobalActionDetailsDataSource_AddOnChangeDelegate");
static_assert(offsetof(FortGlobalActionDetailsDataSource_AddOnChangeDelegate, InDelegate) == 0x000000, "Member 'FortGlobalActionDetailsDataSource_AddOnChangeDelegate::InDelegate' has a wrong offset!");

// Function FortniteUI.FortGlobalActionDetailsDataSource.RemoveOnChangeDelegate
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalActionDetailsDataSource_RemoveOnChangeDelegate final
{
public:
	TDelegate<void(class UObject* Source)>        InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalActionDetailsDataSource_RemoveOnChangeDelegate) == 0x000004, "Wrong alignment on FortGlobalActionDetailsDataSource_RemoveOnChangeDelegate");
static_assert(sizeof(FortGlobalActionDetailsDataSource_RemoveOnChangeDelegate) == 0x000010, "Wrong size on FortGlobalActionDetailsDataSource_RemoveOnChangeDelegate");
static_assert(offsetof(FortGlobalActionDetailsDataSource_RemoveOnChangeDelegate, InDelegate) == 0x000000, "Member 'FortGlobalActionDetailsDataSource_RemoveOnChangeDelegate::InDelegate' has a wrong offset!");

// Function FortniteUI.FortGlobalActionDetailsDataSource.GetValue
// 0x000C (0x000C - 0x0000)
struct FortGlobalActionDetailsDataSource_GetValue final
{
public:
	struct FFortGlobalActionDetails               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalActionDetailsDataSource_GetValue) == 0x000004, "Wrong alignment on FortGlobalActionDetailsDataSource_GetValue");
static_assert(sizeof(FortGlobalActionDetailsDataSource_GetValue) == 0x00000C, "Wrong size on FortGlobalActionDetailsDataSource_GetValue");
static_assert(offsetof(FortGlobalActionDetailsDataSource_GetValue, ReturnValue) == 0x000000, "Member 'FortGlobalActionDetailsDataSource_GetValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaChallengeImageGridEntry.OnChallengeSet
// 0x0002 (0x0002 - 0x0000)
struct AthenaChallengeImageGridEntry_OnChallengeSet final
{
public:
	bool                                          bIsComplete;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocked;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeImageGridEntry_OnChallengeSet) == 0x000001, "Wrong alignment on AthenaChallengeImageGridEntry_OnChallengeSet");
static_assert(sizeof(AthenaChallengeImageGridEntry_OnChallengeSet) == 0x000002, "Wrong size on AthenaChallengeImageGridEntry_OnChallengeSet");
static_assert(offsetof(AthenaChallengeImageGridEntry_OnChallengeSet, bIsComplete) == 0x000000, "Member 'AthenaChallengeImageGridEntry_OnChallengeSet::bIsComplete' has a wrong offset!");
static_assert(offsetof(AthenaChallengeImageGridEntry_OnChallengeSet, bIsLocked) == 0x000001, "Member 'AthenaChallengeImageGridEntry_OnChallengeSet::bIsLocked' has a wrong offset!");

// Function FortniteUI.FortExpeditionExpiresWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionExpiresWidget_SetData final
{
public:
	class UFortExpeditionItem*                    InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionExpiresWidget_SetData) == 0x000008, "Wrong alignment on FortExpeditionExpiresWidget_SetData");
static_assert(sizeof(FortExpeditionExpiresWidget_SetData) == 0x000008, "Wrong size on FortExpeditionExpiresWidget_SetData");
static_assert(offsetof(FortExpeditionExpiresWidget_SetData, InItem) == 0x000000, "Member 'FortExpeditionExpiresWidget_SetData::InItem' has a wrong offset!");

// Function FortniteUI.AthenaChallengeInfoPanel.HandleCycleQuestsInputAction
// 0x0001 (0x0001 - 0x0000)
struct AthenaChallengeInfoPanel_HandleCycleQuestsInputAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeInfoPanel_HandleCycleQuestsInputAction) == 0x000001, "Wrong alignment on AthenaChallengeInfoPanel_HandleCycleQuestsInputAction");
static_assert(sizeof(AthenaChallengeInfoPanel_HandleCycleQuestsInputAction) == 0x000001, "Wrong size on AthenaChallengeInfoPanel_HandleCycleQuestsInputAction");
static_assert(offsetof(AthenaChallengeInfoPanel_HandleCycleQuestsInputAction, bPassThrough) == 0x000000, "Member 'AthenaChallengeInfoPanel_HandleCycleQuestsInputAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.ClearLayout
// 0x0018 (0x0018 - 0x0000)
struct HUDLayoutToolContext_ClearLayout final
{
public:
	ELayoutDataType                               LayoutType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_ClearLayout) == 0x000008, "Wrong alignment on HUDLayoutToolContext_ClearLayout");
static_assert(sizeof(HUDLayoutToolContext_ClearLayout) == 0x000018, "Wrong size on HUDLayoutToolContext_ClearLayout");
static_assert(offsetof(HUDLayoutToolContext_ClearLayout, LayoutType) == 0x000000, "Member 'HUDLayoutToolContext_ClearLayout::LayoutType' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_ClearLayout, Reason) == 0x000008, "Member 'HUDLayoutToolContext_ClearLayout::Reason' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.CloseLayoutTool
// 0x0010 (0x0010 - 0x0000)
struct HUDLayoutToolContext_CloseLayoutTool final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_CloseLayoutTool) == 0x000008, "Wrong alignment on HUDLayoutToolContext_CloseLayoutTool");
static_assert(sizeof(HUDLayoutToolContext_CloseLayoutTool) == 0x000010, "Wrong size on HUDLayoutToolContext_CloseLayoutTool");
static_assert(offsetof(HUDLayoutToolContext_CloseLayoutTool, Reason) == 0x000000, "Member 'HUDLayoutToolContext_CloseLayoutTool::Reason' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.LoadLayout
// 0x0018 (0x0018 - 0x0000)
struct HUDLayoutToolContext_LoadLayout final
{
public:
	ELayoutDataType                               LayoutType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_LoadLayout) == 0x000008, "Wrong alignment on HUDLayoutToolContext_LoadLayout");
static_assert(sizeof(HUDLayoutToolContext_LoadLayout) == 0x000018, "Wrong size on HUDLayoutToolContext_LoadLayout");
static_assert(offsetof(HUDLayoutToolContext_LoadLayout, LayoutType) == 0x000000, "Member 'HUDLayoutToolContext_LoadLayout::LayoutType' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_LoadLayout, Reason) == 0x000008, "Member 'HUDLayoutToolContext_LoadLayout::Reason' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.OnToolOpened
// 0x0010 (0x0010 - 0x0000)
struct HUDLayoutToolContext_OnToolOpened final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_OnToolOpened) == 0x000008, "Wrong alignment on HUDLayoutToolContext_OnToolOpened");
static_assert(sizeof(HUDLayoutToolContext_OnToolOpened) == 0x000010, "Wrong size on HUDLayoutToolContext_OnToolOpened");
static_assert(offsetof(HUDLayoutToolContext_OnToolOpened, Reason) == 0x000000, "Member 'HUDLayoutToolContext_OnToolOpened::Reason' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.SaveLayout
// 0x0018 (0x0018 - 0x0000)
struct HUDLayoutToolContext_SaveLayout final
{
public:
	ELayoutDataType                               LayoutType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_SaveLayout) == 0x000008, "Wrong alignment on HUDLayoutToolContext_SaveLayout");
static_assert(sizeof(HUDLayoutToolContext_SaveLayout) == 0x000018, "Wrong size on HUDLayoutToolContext_SaveLayout");
static_assert(offsetof(HUDLayoutToolContext_SaveLayout, LayoutType) == 0x000000, "Member 'HUDLayoutToolContext_SaveLayout::LayoutType' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_SaveLayout, Reason) == 0x000008, "Member 'HUDLayoutToolContext_SaveLayout::Reason' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.SetCustomFireMode
// 0x0004 (0x0004 - 0x0000)
struct HUDLayoutToolContext_SetCustomFireMode final
{
public:
	bool                                          bAutofireEnabled;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTouchEnabled;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTapToShootEnabled;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowDedicatedButton;                        // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_SetCustomFireMode) == 0x000001, "Wrong alignment on HUDLayoutToolContext_SetCustomFireMode");
static_assert(sizeof(HUDLayoutToolContext_SetCustomFireMode) == 0x000004, "Wrong size on HUDLayoutToolContext_SetCustomFireMode");
static_assert(offsetof(HUDLayoutToolContext_SetCustomFireMode, bAutofireEnabled) == 0x000000, "Member 'HUDLayoutToolContext_SetCustomFireMode::bAutofireEnabled' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_SetCustomFireMode, bForceTouchEnabled) == 0x000001, "Member 'HUDLayoutToolContext_SetCustomFireMode::bForceTouchEnabled' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_SetCustomFireMode, bTapToShootEnabled) == 0x000002, "Member 'HUDLayoutToolContext_SetCustomFireMode::bTapToShootEnabled' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_SetCustomFireMode, bAlwaysShowDedicatedButton) == 0x000003, "Member 'HUDLayoutToolContext_SetCustomFireMode::bAlwaysShowDedicatedButton' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.SetFireMode
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_SetFireMode final
{
public:
	EFireModeType                                 NewFireMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_SetFireMode) == 0x000001, "Wrong alignment on HUDLayoutToolContext_SetFireMode");
static_assert(sizeof(HUDLayoutToolContext_SetFireMode) == 0x000001, "Wrong size on HUDLayoutToolContext_SetFireMode");
static_assert(offsetof(HUDLayoutToolContext_SetFireMode, NewFireMode) == 0x000000, "Member 'HUDLayoutToolContext_SetFireMode::NewFireMode' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.SetFireModeOpenState
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_SetFireModeOpenState final
{
public:
	bool                                          bNewlyOpened;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_SetFireModeOpenState) == 0x000001, "Wrong alignment on HUDLayoutToolContext_SetFireModeOpenState");
static_assert(sizeof(HUDLayoutToolContext_SetFireModeOpenState) == 0x000001, "Wrong size on HUDLayoutToolContext_SetFireModeOpenState");
static_assert(offsetof(HUDLayoutToolContext_SetFireModeOpenState, bNewlyOpened) == 0x000000, "Member 'HUDLayoutToolContext_SetFireModeOpenState::bNewlyOpened' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.SetLayoutVisibility
// 0x0004 (0x0004 - 0x0000)
struct HUDLayoutToolContext_SetLayoutVisibility final
{
public:
	bool                                          bShowCombat;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBuild;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowEdit;                                         // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCreative;                                     // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_SetLayoutVisibility) == 0x000001, "Wrong alignment on HUDLayoutToolContext_SetLayoutVisibility");
static_assert(sizeof(HUDLayoutToolContext_SetLayoutVisibility) == 0x000004, "Wrong size on HUDLayoutToolContext_SetLayoutVisibility");
static_assert(offsetof(HUDLayoutToolContext_SetLayoutVisibility, bShowCombat) == 0x000000, "Member 'HUDLayoutToolContext_SetLayoutVisibility::bShowCombat' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_SetLayoutVisibility, bShowBuild) == 0x000001, "Member 'HUDLayoutToolContext_SetLayoutVisibility::bShowBuild' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_SetLayoutVisibility, bShowEdit) == 0x000002, "Member 'HUDLayoutToolContext_SetLayoutVisibility::bShowEdit' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_SetLayoutVisibility, bShowCreative) == 0x000003, "Member 'HUDLayoutToolContext_SetLayoutVisibility::bShowCreative' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.SetPropertyMenuState
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_SetPropertyMenuState final
{
public:
	bool                                          bNewlyOpen;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_SetPropertyMenuState) == 0x000001, "Wrong alignment on HUDLayoutToolContext_SetPropertyMenuState");
static_assert(sizeof(HUDLayoutToolContext_SetPropertyMenuState) == 0x000001, "Wrong size on HUDLayoutToolContext_SetPropertyMenuState");
static_assert(offsetof(HUDLayoutToolContext_SetPropertyMenuState, bNewlyOpen) == 0x000000, "Member 'HUDLayoutToolContext_SetPropertyMenuState::bNewlyOpen' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.SetSelectedWidget
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolContext_SetSelectedWidget final
{
public:
	class UHUDLayoutToolPlacementWidget*          NewSelectedWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_SetSelectedWidget) == 0x000008, "Wrong alignment on HUDLayoutToolContext_SetSelectedWidget");
static_assert(sizeof(HUDLayoutToolContext_SetSelectedWidget) == 0x000008, "Wrong size on HUDLayoutToolContext_SetSelectedWidget");
static_assert(offsetof(HUDLayoutToolContext_SetSelectedWidget, NewSelectedWidget) == 0x000000, "Member 'HUDLayoutToolContext_SetSelectedWidget::NewSelectedWidget' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.StartLerping
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolContext_StartLerping final
{
public:
	struct FVector2D                              NewViewOffset;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_StartLerping) == 0x000004, "Wrong alignment on HUDLayoutToolContext_StartLerping");
static_assert(sizeof(HUDLayoutToolContext_StartLerping) == 0x000008, "Wrong size on HUDLayoutToolContext_StartLerping");
static_assert(offsetof(HUDLayoutToolContext_StartLerping, NewViewOffset) == 0x000000, "Member 'HUDLayoutToolContext_StartLerping::NewViewOffset' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.CloudHUDAvailable
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_CloudHUDAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_CloudHUDAvailable) == 0x000001, "Wrong alignment on HUDLayoutToolContext_CloudHUDAvailable");
static_assert(sizeof(HUDLayoutToolContext_CloudHUDAvailable) == 0x000001, "Wrong size on HUDLayoutToolContext_CloudHUDAvailable");
static_assert(offsetof(HUDLayoutToolContext_CloudHUDAvailable, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_CloudHUDAvailable::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.CloudHUDLayoutEnabled
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_CloudHUDLayoutEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_CloudHUDLayoutEnabled) == 0x000001, "Wrong alignment on HUDLayoutToolContext_CloudHUDLayoutEnabled");
static_assert(sizeof(HUDLayoutToolContext_CloudHUDLayoutEnabled) == 0x000001, "Wrong size on HUDLayoutToolContext_CloudHUDLayoutEnabled");
static_assert(offsetof(HUDLayoutToolContext_CloudHUDLayoutEnabled, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_CloudHUDLayoutEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.GetCurrentOffset
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolContext_GetCurrentOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_GetCurrentOffset) == 0x000004, "Wrong alignment on HUDLayoutToolContext_GetCurrentOffset");
static_assert(sizeof(HUDLayoutToolContext_GetCurrentOffset) == 0x000008, "Wrong size on HUDLayoutToolContext_GetCurrentOffset");
static_assert(offsetof(HUDLayoutToolContext_GetCurrentOffset, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_GetCurrentOffset::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.GetFireMode
// 0x0005 (0x0005 - 0x0000)
struct HUDLayoutToolContext_GetFireMode final
{
public:
	EFireModeType                                 FireMode;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutofireEnabled;                                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTouchEnabled;                                // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTapToShootEnabled;                                // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowDedicatedButton;                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_GetFireMode) == 0x000001, "Wrong alignment on HUDLayoutToolContext_GetFireMode");
static_assert(sizeof(HUDLayoutToolContext_GetFireMode) == 0x000005, "Wrong size on HUDLayoutToolContext_GetFireMode");
static_assert(offsetof(HUDLayoutToolContext_GetFireMode, FireMode) == 0x000000, "Member 'HUDLayoutToolContext_GetFireMode::FireMode' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_GetFireMode, bAutofireEnabled) == 0x000001, "Member 'HUDLayoutToolContext_GetFireMode::bAutofireEnabled' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_GetFireMode, bForceTouchEnabled) == 0x000002, "Member 'HUDLayoutToolContext_GetFireMode::bForceTouchEnabled' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_GetFireMode, bTapToShootEnabled) == 0x000003, "Member 'HUDLayoutToolContext_GetFireMode::bTapToShootEnabled' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_GetFireMode, bAlwaysShowDedicatedButton) == 0x000004, "Member 'HUDLayoutToolContext_GetFireMode::bAlwaysShowDedicatedButton' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.GetFireModeOpenState
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_GetFireModeOpenState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_GetFireModeOpenState) == 0x000001, "Wrong alignment on HUDLayoutToolContext_GetFireModeOpenState");
static_assert(sizeof(HUDLayoutToolContext_GetFireModeOpenState) == 0x000001, "Wrong size on HUDLayoutToolContext_GetFireModeOpenState");
static_assert(offsetof(HUDLayoutToolContext_GetFireModeOpenState, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_GetFireModeOpenState::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.GetIsLerping
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_GetIsLerping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_GetIsLerping) == 0x000001, "Wrong alignment on HUDLayoutToolContext_GetIsLerping");
static_assert(sizeof(HUDLayoutToolContext_GetIsLerping) == 0x000001, "Wrong size on HUDLayoutToolContext_GetIsLerping");
static_assert(offsetof(HUDLayoutToolContext_GetIsLerping, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_GetIsLerping::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.GetIsPanning
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_GetIsPanning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_GetIsPanning) == 0x000001, "Wrong alignment on HUDLayoutToolContext_GetIsPanning");
static_assert(sizeof(HUDLayoutToolContext_GetIsPanning) == 0x000001, "Wrong size on HUDLayoutToolContext_GetIsPanning");
static_assert(offsetof(HUDLayoutToolContext_GetIsPanning, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_GetIsPanning::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.GetPropertyMenuState
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_GetPropertyMenuState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_GetPropertyMenuState) == 0x000001, "Wrong alignment on HUDLayoutToolContext_GetPropertyMenuState");
static_assert(sizeof(HUDLayoutToolContext_GetPropertyMenuState) == 0x000001, "Wrong size on HUDLayoutToolContext_GetPropertyMenuState");
static_assert(offsetof(HUDLayoutToolContext_GetPropertyMenuState, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_GetPropertyMenuState::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.HasSavedLayout
// 0x0002 (0x0002 - 0x0000)
struct HUDLayoutToolContext_HasSavedLayout final
{
public:
	ELayoutDataType                               LayoutType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_HasSavedLayout) == 0x000001, "Wrong alignment on HUDLayoutToolContext_HasSavedLayout");
static_assert(sizeof(HUDLayoutToolContext_HasSavedLayout) == 0x000002, "Wrong size on HUDLayoutToolContext_HasSavedLayout");
static_assert(offsetof(HUDLayoutToolContext_HasSavedLayout, LayoutType) == 0x000000, "Member 'HUDLayoutToolContext_HasSavedLayout::LayoutType' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_HasSavedLayout, ReturnValue) == 0x000001, "Member 'HUDLayoutToolContext_HasSavedLayout::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.HasSelectedWidget
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_HasSelectedWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_HasSelectedWidget) == 0x000001, "Wrong alignment on HUDLayoutToolContext_HasSelectedWidget");
static_assert(sizeof(HUDLayoutToolContext_HasSelectedWidget) == 0x000001, "Wrong size on HUDLayoutToolContext_HasSelectedWidget");
static_assert(offsetof(HUDLayoutToolContext_HasSelectedWidget, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_HasSelectedWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.IsCentered
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_IsCentered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_IsCentered) == 0x000001, "Wrong alignment on HUDLayoutToolContext_IsCentered");
static_assert(sizeof(HUDLayoutToolContext_IsCentered) == 0x000001, "Wrong size on HUDLayoutToolContext_IsCentered");
static_assert(offsetof(HUDLayoutToolContext_IsCentered, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_IsCentered::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.IsFireModeAvailable
// 0x0002 (0x0002 - 0x0000)
struct HUDLayoutToolContext_IsFireModeAvailable final
{
public:
	EFireModeType                                 NewFireMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_IsFireModeAvailable) == 0x000001, "Wrong alignment on HUDLayoutToolContext_IsFireModeAvailable");
static_assert(sizeof(HUDLayoutToolContext_IsFireModeAvailable) == 0x000002, "Wrong size on HUDLayoutToolContext_IsFireModeAvailable");
static_assert(offsetof(HUDLayoutToolContext_IsFireModeAvailable, NewFireMode) == 0x000000, "Member 'HUDLayoutToolContext_IsFireModeAvailable::NewFireMode' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolContext_IsFireModeAvailable, ReturnValue) == 0x000001, "Member 'HUDLayoutToolContext_IsFireModeAvailable::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.IsLayoutDirty
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_IsLayoutDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_IsLayoutDirty) == 0x000001, "Wrong alignment on HUDLayoutToolContext_IsLayoutDirty");
static_assert(sizeof(HUDLayoutToolContext_IsLayoutDirty) == 0x000001, "Wrong size on HUDLayoutToolContext_IsLayoutDirty");
static_assert(offsetof(HUDLayoutToolContext_IsLayoutDirty, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_IsLayoutDirty::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.IsSelectedWidgetUnderPanel
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_IsSelectedWidgetUnderPanel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_IsSelectedWidgetUnderPanel) == 0x000001, "Wrong alignment on HUDLayoutToolContext_IsSelectedWidgetUnderPanel");
static_assert(sizeof(HUDLayoutToolContext_IsSelectedWidgetUnderPanel) == 0x000001, "Wrong size on HUDLayoutToolContext_IsSelectedWidgetUnderPanel");
static_assert(offsetof(HUDLayoutToolContext_IsSelectedWidgetUnderPanel, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_IsSelectedWidgetUnderPanel::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolContext.ShouldShowSelectedWidgetProperties
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolContext_ShouldShowSelectedWidgetProperties final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolContext_ShouldShowSelectedWidgetProperties) == 0x000001, "Wrong alignment on HUDLayoutToolContext_ShouldShowSelectedWidgetProperties");
static_assert(sizeof(HUDLayoutToolContext_ShouldShowSelectedWidgetProperties) == 0x000001, "Wrong size on HUDLayoutToolContext_ShouldShowSelectedWidgetProperties");
static_assert(offsetof(HUDLayoutToolContext_ShouldShowSelectedWidgetProperties, ReturnValue) == 0x000000, "Member 'HUDLayoutToolContext_ShouldShowSelectedWidgetProperties::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUserWidget.AddGrantCheatMenu
// 0x0020 (0x0020 - 0x0000)
struct FortUserWidget_AddGrantCheatMenu final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceId;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUserWidget_AddGrantCheatMenu) == 0x000008, "Wrong alignment on FortUserWidget_AddGrantCheatMenu");
static_assert(sizeof(FortUserWidget_AddGrantCheatMenu) == 0x000020, "Wrong size on FortUserWidget_AddGrantCheatMenu");
static_assert(offsetof(FortUserWidget_AddGrantCheatMenu, TemplateId) == 0x000000, "Member 'FortUserWidget_AddGrantCheatMenu::TemplateId' has a wrong offset!");
static_assert(offsetof(FortUserWidget_AddGrantCheatMenu, InstanceId) == 0x000010, "Member 'FortUserWidget_AddGrantCheatMenu::InstanceId' has a wrong offset!");

// Function FortniteUI.GooseRadarIconWidget.OnNewIconState
// 0x0001 (0x0001 - 0x0000)
struct GooseRadarIconWidget_OnNewIconState final
{
public:
	ERadarIconState                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseRadarIconWidget_OnNewIconState) == 0x000001, "Wrong alignment on GooseRadarIconWidget_OnNewIconState");
static_assert(sizeof(GooseRadarIconWidget_OnNewIconState) == 0x000001, "Wrong size on GooseRadarIconWidget_OnNewIconState");
static_assert(offsetof(GooseRadarIconWidget_OnNewIconState, NewState) == 0x000000, "Member 'GooseRadarIconWidget_OnNewIconState::NewState' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntry.OnTeammateDisplayNameAdded
// 0x0008 (0x0008 - 0x0000)
struct FortEventLeaderboardEntry_OnTeammateDisplayNameAdded final
{
public:
	const class UFortEventLeaderboardEntryData*   LeaderboardEntryData;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntry_OnTeammateDisplayNameAdded) == 0x000008, "Wrong alignment on FortEventLeaderboardEntry_OnTeammateDisplayNameAdded");
static_assert(sizeof(FortEventLeaderboardEntry_OnTeammateDisplayNameAdded) == 0x000008, "Wrong size on FortEventLeaderboardEntry_OnTeammateDisplayNameAdded");
static_assert(offsetof(FortEventLeaderboardEntry_OnTeammateDisplayNameAdded, LeaderboardEntryData) == 0x000000, "Member 'FortEventLeaderboardEntry_OnTeammateDisplayNameAdded::LeaderboardEntryData' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntry.SetPlayerFlag
// 0x0028 (0x0028 - 0x0000)
struct FortEventLeaderboardEntry_SetPlayerFlag final
{
public:
	TSoftObjectPtr<class UTexture2D>              PlayerFlag;                                        // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntry_SetPlayerFlag) == 0x000008, "Wrong alignment on FortEventLeaderboardEntry_SetPlayerFlag");
static_assert(sizeof(FortEventLeaderboardEntry_SetPlayerFlag) == 0x000028, "Wrong size on FortEventLeaderboardEntry_SetPlayerFlag");
static_assert(offsetof(FortEventLeaderboardEntry_SetPlayerFlag, PlayerFlag) == 0x000000, "Member 'FortEventLeaderboardEntry_SetPlayerFlag::PlayerFlag' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.ConvertCMSStringToColor
// 0x0020 (0x0020 - 0x0000)
struct FortShowdownDetailView_ConvertCMSStringToColor final
{
public:
	class FString                                 ColorString;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_ConvertCMSStringToColor) == 0x000008, "Wrong alignment on FortShowdownDetailView_ConvertCMSStringToColor");
static_assert(sizeof(FortShowdownDetailView_ConvertCMSStringToColor) == 0x000020, "Wrong size on FortShowdownDetailView_ConvertCMSStringToColor");
static_assert(offsetof(FortShowdownDetailView_ConvertCMSStringToColor, ColorString) == 0x000000, "Member 'FortShowdownDetailView_ConvertCMSStringToColor::ColorString' has a wrong offset!");
static_assert(offsetof(FortShowdownDetailView_ConvertCMSStringToColor, ReturnValue) == 0x000010, "Member 'FortShowdownDetailView_ConvertCMSStringToColor::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventId
// 0x0010 (0x0010 - 0x0000)
struct FortShowdownDetailView_GetEventId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventId) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetEventId");
static_assert(sizeof(FortShowdownDetailView_GetEventId) == 0x000010, "Wrong size on FortShowdownDetailView_GetEventId");
static_assert(offsetof(FortShowdownDetailView_GetEventId, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventResultsSummary
// 0x0018 (0x0018 - 0x0000)
struct FortShowdownDetailView_GetEventResultsSummary final
{
public:
	struct FFortShowdownEventBestResultsSummary   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventResultsSummary) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetEventResultsSummary");
static_assert(sizeof(FortShowdownDetailView_GetEventResultsSummary) == 0x000018, "Wrong size on FortShowdownDetailView_GetEventResultsSummary");
static_assert(offsetof(FortShowdownDetailView_GetEventResultsSummary, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventResultsSummary::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentEvents
// 0x0010 (0x0010 - 0x0000)
struct FortShowdownDetailView_GetTournamentEvents final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentEvents) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetTournamentEvents");
static_assert(sizeof(FortShowdownDetailView_GetTournamentEvents) == 0x000010, "Wrong size on FortShowdownDetailView_GetTournamentEvents");
static_assert(offsetof(FortShowdownDetailView_GetTournamentEvents, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentEvents::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentScoringRules
// 0x0010 (0x0010 - 0x0000)
struct FortShowdownDetailView_GetTournamentScoringRules final
{
public:
	TArray<struct FFortShowdownScoringRuleInfo>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentScoringRules) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetTournamentScoringRules");
static_assert(sizeof(FortShowdownDetailView_GetTournamentScoringRules) == 0x000010, "Wrong size on FortShowdownDetailView_GetTournamentScoringRules");
static_assert(offsetof(FortShowdownDetailView_GetTournamentScoringRules, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentScoringRules::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.SetTournament
// 0x0020 (0x0020 - 0x0000)
struct FortShowdownDetailView_SetTournament final
{
public:
	class FString                                 TournamentId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_SetTournament) == 0x000008, "Wrong alignment on FortShowdownDetailView_SetTournament");
static_assert(sizeof(FortShowdownDetailView_SetTournament) == 0x000020, "Wrong size on FortShowdownDetailView_SetTournament");
static_assert(offsetof(FortShowdownDetailView_SetTournament, TournamentId) == 0x000000, "Member 'FortShowdownDetailView_SetTournament::TournamentId' has a wrong offset!");
static_assert(offsetof(FortShowdownDetailView_SetTournament, EventId) == 0x000010, "Member 'FortShowdownDetailView_SetTournament::EventId' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.DoCalloutMFARequirement
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_DoCalloutMFARequirement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_DoCalloutMFARequirement) == 0x000001, "Wrong alignment on FortShowdownDetailView_DoCalloutMFARequirement");
static_assert(sizeof(FortShowdownDetailView_DoCalloutMFARequirement) == 0x000001, "Wrong size on FortShowdownDetailView_DoCalloutMFARequirement");
static_assert(offsetof(FortShowdownDetailView_DoCalloutMFARequirement, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_DoCalloutMFARequirement::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.DoDisplayRoundNumber
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_DoDisplayRoundNumber final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_DoDisplayRoundNumber) == 0x000001, "Wrong alignment on FortShowdownDetailView_DoDisplayRoundNumber");
static_assert(sizeof(FortShowdownDetailView_DoDisplayRoundNumber) == 0x000001, "Wrong size on FortShowdownDetailView_DoDisplayRoundNumber");
static_assert(offsetof(FortShowdownDetailView_DoDisplayRoundNumber, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_DoDisplayRoundNumber::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetBestEventScore
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDetailView_GetBestEventScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetBestEventScore) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetBestEventScore");
static_assert(sizeof(FortShowdownDetailView_GetBestEventScore) == 0x000004, "Wrong size on FortShowdownDetailView_GetBestEventScore");
static_assert(offsetof(FortShowdownDetailView_GetBestEventScore, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetBestEventScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetCurrentEventScore
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDetailView_GetCurrentEventScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetCurrentEventScore) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetCurrentEventScore");
static_assert(sizeof(FortShowdownDetailView_GetCurrentEventScore) == 0x000004, "Wrong size on FortShowdownDetailView_GetCurrentEventScore");
static_assert(offsetof(FortShowdownDetailView_GetCurrentEventScore, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetCurrentEventScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetCurrentEventTeamNumMatchesPlayed
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDetailView_GetCurrentEventTeamNumMatchesPlayed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetCurrentEventTeamNumMatchesPlayed) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetCurrentEventTeamNumMatchesPlayed");
static_assert(sizeof(FortShowdownDetailView_GetCurrentEventTeamNumMatchesPlayed) == 0x000004, "Wrong size on FortShowdownDetailView_GetCurrentEventTeamNumMatchesPlayed");
static_assert(offsetof(FortShowdownDetailView_GetCurrentEventTeamNumMatchesPlayed, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetCurrentEventTeamNumMatchesPlayed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetCurrentRegionName
// 0x0018 (0x0018 - 0x0000)
struct FortShowdownDetailView_GetCurrentRegionName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetCurrentRegionName) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetCurrentRegionName");
static_assert(sizeof(FortShowdownDetailView_GetCurrentRegionName) == 0x000018, "Wrong size on FortShowdownDetailView_GetCurrentRegionName");
static_assert(offsetof(FortShowdownDetailView_GetCurrentRegionName, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetCurrentRegionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventBeginTime
// 0x0008 (0x0008 - 0x0000)
struct FortShowdownDetailView_GetEventBeginTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventBeginTime) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetEventBeginTime");
static_assert(sizeof(FortShowdownDetailView_GetEventBeginTime) == 0x000008, "Wrong size on FortShowdownDetailView_GetEventBeginTime");
static_assert(offsetof(FortShowdownDetailView_GetEventBeginTime, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventBeginTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventDateAsText
// 0x0028 (0x0028 - 0x0000)
struct FortShowdownDetailView_GetEventDateAsText final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDateTimeStyle                            Style;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventDateAsText) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetEventDateAsText");
static_assert(sizeof(FortShowdownDetailView_GetEventDateAsText) == 0x000028, "Wrong size on FortShowdownDetailView_GetEventDateAsText");
static_assert(offsetof(FortShowdownDetailView_GetEventDateAsText, DateTime) == 0x000000, "Member 'FortShowdownDetailView_GetEventDateAsText::DateTime' has a wrong offset!");
static_assert(offsetof(FortShowdownDetailView_GetEventDateAsText, Style) == 0x000008, "Member 'FortShowdownDetailView_GetEventDateAsText::Style' has a wrong offset!");
static_assert(offsetof(FortShowdownDetailView_GetEventDateAsText, ReturnValue) == 0x000010, "Member 'FortShowdownDetailView_GetEventDateAsText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventEndTime
// 0x0008 (0x0008 - 0x0000)
struct FortShowdownDetailView_GetEventEndTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventEndTime) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetEventEndTime");
static_assert(sizeof(FortShowdownDetailView_GetEventEndTime) == 0x000008, "Wrong size on FortShowdownDetailView_GetEventEndTime");
static_assert(offsetof(FortShowdownDetailView_GetEventEndTime, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventEndTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventIdForEligibilityToken
// 0x0020 (0x0020 - 0x0000)
struct FortShowdownDetailView_GetEventIdForEligibilityToken final
{
public:
	class FString                                 Token;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventIdForEligibilityToken) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetEventIdForEligibilityToken");
static_assert(sizeof(FortShowdownDetailView_GetEventIdForEligibilityToken) == 0x000020, "Wrong size on FortShowdownDetailView_GetEventIdForEligibilityToken");
static_assert(offsetof(FortShowdownDetailView_GetEventIdForEligibilityToken, Token) == 0x000000, "Member 'FortShowdownDetailView_GetEventIdForEligibilityToken::Token' has a wrong offset!");
static_assert(offsetof(FortShowdownDetailView_GetEventIdForEligibilityToken, ReturnValue) == 0x000010, "Member 'FortShowdownDetailView_GetEventIdForEligibilityToken::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventLeaderboardPercentile
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDetailView_GetEventLeaderboardPercentile final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventLeaderboardPercentile) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetEventLeaderboardPercentile");
static_assert(sizeof(FortShowdownDetailView_GetEventLeaderboardPercentile) == 0x000004, "Wrong size on FortShowdownDetailView_GetEventLeaderboardPercentile");
static_assert(offsetof(FortShowdownDetailView_GetEventLeaderboardPercentile, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventLeaderboardPercentile::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventLeaderboardRank
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDetailView_GetEventLeaderboardRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventLeaderboardRank) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetEventLeaderboardRank");
static_assert(sizeof(FortShowdownDetailView_GetEventLeaderboardRank) == 0x000004, "Wrong size on FortShowdownDetailView_GetEventLeaderboardRank");
static_assert(offsetof(FortShowdownDetailView_GetEventLeaderboardRank, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventLeaderboardRank::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventPinState
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_GetEventPinState final
{
public:
	EFortShowdownPinState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventPinState) == 0x000001, "Wrong alignment on FortShowdownDetailView_GetEventPinState");
static_assert(sizeof(FortShowdownDetailView_GetEventPinState) == 0x000001, "Wrong size on FortShowdownDetailView_GetEventPinState");
static_assert(offsetof(FortShowdownDetailView_GetEventPinState, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventPinState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventPlayerParticipationState
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_GetEventPlayerParticipationState final
{
public:
	EFortShowdownEventState                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventPlayerParticipationState) == 0x000001, "Wrong alignment on FortShowdownDetailView_GetEventPlayerParticipationState");
static_assert(sizeof(FortShowdownDetailView_GetEventPlayerParticipationState) == 0x000001, "Wrong size on FortShowdownDetailView_GetEventPlayerParticipationState");
static_assert(offsetof(FortShowdownDetailView_GetEventPlayerParticipationState, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventPlayerParticipationState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventTimeAsText
// 0x0028 (0x0028 - 0x0000)
struct FortShowdownDetailView_GetEventTimeAsText final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDateTimeStyle                            Style;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventTimeAsText) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetEventTimeAsText");
static_assert(sizeof(FortShowdownDetailView_GetEventTimeAsText) == 0x000028, "Wrong size on FortShowdownDetailView_GetEventTimeAsText");
static_assert(offsetof(FortShowdownDetailView_GetEventTimeAsText, DateTime) == 0x000000, "Member 'FortShowdownDetailView_GetEventTimeAsText::DateTime' has a wrong offset!");
static_assert(offsetof(FortShowdownDetailView_GetEventTimeAsText, Style) == 0x000008, "Member 'FortShowdownDetailView_GetEventTimeAsText::Style' has a wrong offset!");
static_assert(offsetof(FortShowdownDetailView_GetEventTimeAsText, ReturnValue) == 0x000010, "Member 'FortShowdownDetailView_GetEventTimeAsText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventTimeLeft
// 0x0008 (0x0008 - 0x0000)
struct FortShowdownDetailView_GetEventTimeLeft final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventTimeLeft) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetEventTimeLeft");
static_assert(sizeof(FortShowdownDetailView_GetEventTimeLeft) == 0x000008, "Wrong size on FortShowdownDetailView_GetEventTimeLeft");
static_assert(offsetof(FortShowdownDetailView_GetEventTimeLeft, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventTimeLeft::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventTimespanAsText
// 0x0028 (0x0028 - 0x0000)
struct FortShowdownDetailView_GetEventTimespanAsText final
{
public:
	struct FTimespan                              InTimeRemaining;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowSeconds;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimespanAsTextFormat                         FormatType;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventTimespanAsText) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetEventTimespanAsText");
static_assert(sizeof(FortShowdownDetailView_GetEventTimespanAsText) == 0x000028, "Wrong size on FortShowdownDetailView_GetEventTimespanAsText");
static_assert(offsetof(FortShowdownDetailView_GetEventTimespanAsText, InTimeRemaining) == 0x000000, "Member 'FortShowdownDetailView_GetEventTimespanAsText::InTimeRemaining' has a wrong offset!");
static_assert(offsetof(FortShowdownDetailView_GetEventTimespanAsText, bShowSeconds) == 0x000008, "Member 'FortShowdownDetailView_GetEventTimespanAsText::bShowSeconds' has a wrong offset!");
static_assert(offsetof(FortShowdownDetailView_GetEventTimespanAsText, FormatType) == 0x000009, "Member 'FortShowdownDetailView_GetEventTimespanAsText::FormatType' has a wrong offset!");
static_assert(offsetof(FortShowdownDetailView_GetEventTimespanAsText, ReturnValue) == 0x000010, "Member 'FortShowdownDetailView_GetEventTimespanAsText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventTimeState
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_GetEventTimeState final
{
public:
	EFortShowdownEventState                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventTimeState) == 0x000001, "Wrong alignment on FortShowdownDetailView_GetEventTimeState");
static_assert(sizeof(FortShowdownDetailView_GetEventTimeState) == 0x000001, "Wrong size on FortShowdownDetailView_GetEventTimeState");
static_assert(offsetof(FortShowdownDetailView_GetEventTimeState, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventTimeState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventWindowEligibility
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_GetEventWindowEligibility final
{
public:
	EFortEventWindowEligibility                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventWindowEligibility) == 0x000001, "Wrong alignment on FortShowdownDetailView_GetEventWindowEligibility");
static_assert(sizeof(FortShowdownDetailView_GetEventWindowEligibility) == 0x000001, "Wrong size on FortShowdownDetailView_GetEventWindowEligibility");
static_assert(offsetof(FortShowdownDetailView_GetEventWindowEligibility, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventWindowEligibility::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventWindowRoundNumber
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDetailView_GetEventWindowRoundNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventWindowRoundNumber) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetEventWindowRoundNumber");
static_assert(sizeof(FortShowdownDetailView_GetEventWindowRoundNumber) == 0x000004, "Wrong size on FortShowdownDetailView_GetEventWindowRoundNumber");
static_assert(offsetof(FortShowdownDetailView_GetEventWindowRoundNumber, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventWindowRoundNumber::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetEventWindowSessionNumber
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDetailView_GetEventWindowSessionNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetEventWindowSessionNumber) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetEventWindowSessionNumber");
static_assert(sizeof(FortShowdownDetailView_GetEventWindowSessionNumber) == 0x000004, "Wrong size on FortShowdownDetailView_GetEventWindowSessionNumber");
static_assert(offsetof(FortShowdownDetailView_GetEventWindowSessionNumber, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetEventWindowSessionNumber::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetNumEventRounds
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDetailView_GetNumEventRounds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetNumEventRounds) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetNumEventRounds");
static_assert(sizeof(FortShowdownDetailView_GetNumEventRounds) == 0x000004, "Wrong size on FortShowdownDetailView_GetNumEventRounds");
static_assert(offsetof(FortShowdownDetailView_GetNumEventRounds, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetNumEventRounds::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentBeginTime
// 0x0008 (0x0008 - 0x0000)
struct FortShowdownDetailView_GetTournamentBeginTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentBeginTime) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetTournamentBeginTime");
static_assert(sizeof(FortShowdownDetailView_GetTournamentBeginTime) == 0x000008, "Wrong size on FortShowdownDetailView_GetTournamentBeginTime");
static_assert(offsetof(FortShowdownDetailView_GetTournamentBeginTime, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentBeginTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentBestPinState
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_GetTournamentBestPinState final
{
public:
	EFortShowdownPinState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentBestPinState) == 0x000001, "Wrong alignment on FortShowdownDetailView_GetTournamentBestPinState");
static_assert(sizeof(FortShowdownDetailView_GetTournamentBestPinState) == 0x000001, "Wrong size on FortShowdownDetailView_GetTournamentBestPinState");
static_assert(offsetof(FortShowdownDetailView_GetTournamentBestPinState, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentBestPinState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentBestScore
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDetailView_GetTournamentBestScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentBestScore) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetTournamentBestScore");
static_assert(sizeof(FortShowdownDetailView_GetTournamentBestScore) == 0x000004, "Wrong size on FortShowdownDetailView_GetTournamentBestScore");
static_assert(offsetof(FortShowdownDetailView_GetTournamentBestScore, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentBestScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentEligibility
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_GetTournamentEligibility final
{
public:
	EFortEventWindowEligibility                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentEligibility) == 0x000001, "Wrong alignment on FortShowdownDetailView_GetTournamentEligibility");
static_assert(sizeof(FortShowdownDetailView_GetTournamentEligibility) == 0x000001, "Wrong size on FortShowdownDetailView_GetTournamentEligibility");
static_assert(offsetof(FortShowdownDetailView_GetTournamentEligibility, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentEligibility::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentEndTime
// 0x0008 (0x0008 - 0x0000)
struct FortShowdownDetailView_GetTournamentEndTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentEndTime) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetTournamentEndTime");
static_assert(sizeof(FortShowdownDetailView_GetTournamentEndTime) == 0x000008, "Wrong size on FortShowdownDetailView_GetTournamentEndTime");
static_assert(offsetof(FortShowdownDetailView_GetTournamentEndTime, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentEndTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentId
// 0x0010 (0x0010 - 0x0000)
struct FortShowdownDetailView_GetTournamentId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentId) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetTournamentId");
static_assert(sizeof(FortShowdownDetailView_GetTournamentId) == 0x000010, "Wrong size on FortShowdownDetailView_GetTournamentId");
static_assert(offsetof(FortShowdownDetailView_GetTournamentId, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentMatchCap
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDetailView_GetTournamentMatchCap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentMatchCap) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetTournamentMatchCap");
static_assert(sizeof(FortShowdownDetailView_GetTournamentMatchCap) == 0x000004, "Wrong size on FortShowdownDetailView_GetTournamentMatchCap");
static_assert(offsetof(FortShowdownDetailView_GetTournamentMatchCap, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentMatchCap::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentMatchType
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_GetTournamentMatchType final
{
public:
	EFortShowdownMatchType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentMatchType) == 0x000001, "Wrong alignment on FortShowdownDetailView_GetTournamentMatchType");
static_assert(sizeof(FortShowdownDetailView_GetTournamentMatchType) == 0x000001, "Wrong size on FortShowdownDetailView_GetTournamentMatchType");
static_assert(offsetof(FortShowdownDetailView_GetTournamentMatchType, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentMatchType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentNextEvent
// 0x0010 (0x0010 - 0x0000)
struct FortShowdownDetailView_GetTournamentNextEvent final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentNextEvent) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetTournamentNextEvent");
static_assert(sizeof(FortShowdownDetailView_GetTournamentNextEvent) == 0x000010, "Wrong size on FortShowdownDetailView_GetTournamentNextEvent");
static_assert(offsetof(FortShowdownDetailView_GetTournamentNextEvent, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentNextEvent::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentPinUnlockScore
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDetailView_GetTournamentPinUnlockScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentPinUnlockScore) == 0x000004, "Wrong alignment on FortShowdownDetailView_GetTournamentPinUnlockScore");
static_assert(sizeof(FortShowdownDetailView_GetTournamentPinUnlockScore) == 0x000004, "Wrong size on FortShowdownDetailView_GetTournamentPinUnlockScore");
static_assert(offsetof(FortShowdownDetailView_GetTournamentPinUnlockScore, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentPinUnlockScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentTimeLeft
// 0x0008 (0x0008 - 0x0000)
struct FortShowdownDetailView_GetTournamentTimeLeft final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentTimeLeft) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetTournamentTimeLeft");
static_assert(sizeof(FortShowdownDetailView_GetTournamentTimeLeft) == 0x000008, "Wrong size on FortShowdownDetailView_GetTournamentTimeLeft");
static_assert(offsetof(FortShowdownDetailView_GetTournamentTimeLeft, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentTimeLeft::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetTournamentTimeState
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_GetTournamentTimeState final
{
public:
	EFortShowdownEventState                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetTournamentTimeState) == 0x000001, "Wrong alignment on FortShowdownDetailView_GetTournamentTimeState");
static_assert(sizeof(FortShowdownDetailView_GetTournamentTimeState) == 0x000001, "Wrong size on FortShowdownDetailView_GetTournamentTimeState");
static_assert(offsetof(FortShowdownDetailView_GetTournamentTimeState, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetTournamentTimeState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetWindowRoundAndSessionDisplayString
// 0x0018 (0x0018 - 0x0000)
struct FortShowdownDetailView_GetWindowRoundAndSessionDisplayString final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetWindowRoundAndSessionDisplayString) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetWindowRoundAndSessionDisplayString");
static_assert(sizeof(FortShowdownDetailView_GetWindowRoundAndSessionDisplayString) == 0x000018, "Wrong size on FortShowdownDetailView_GetWindowRoundAndSessionDisplayString");
static_assert(offsetof(FortShowdownDetailView_GetWindowRoundAndSessionDisplayString, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetWindowRoundAndSessionDisplayString::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetWindowRoundDisplayString
// 0x0018 (0x0018 - 0x0000)
struct FortShowdownDetailView_GetWindowRoundDisplayString final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetWindowRoundDisplayString) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetWindowRoundDisplayString");
static_assert(sizeof(FortShowdownDetailView_GetWindowRoundDisplayString) == 0x000018, "Wrong size on FortShowdownDetailView_GetWindowRoundDisplayString");
static_assert(offsetof(FortShowdownDetailView_GetWindowRoundDisplayString, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetWindowRoundDisplayString::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.GetWindowSessionDisplayString
// 0x0018 (0x0018 - 0x0000)
struct FortShowdownDetailView_GetWindowSessionDisplayString final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_GetWindowSessionDisplayString) == 0x000008, "Wrong alignment on FortShowdownDetailView_GetWindowSessionDisplayString");
static_assert(sizeof(FortShowdownDetailView_GetWindowSessionDisplayString) == 0x000018, "Wrong size on FortShowdownDetailView_GetWindowSessionDisplayString");
static_assert(offsetof(FortShowdownDetailView_GetWindowSessionDisplayString, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_GetWindowSessionDisplayString::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.HasScoreInEvent
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_HasScoreInEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_HasScoreInEvent) == 0x000001, "Wrong alignment on FortShowdownDetailView_HasScoreInEvent");
static_assert(sizeof(FortShowdownDetailView_HasScoreInEvent) == 0x000001, "Wrong size on FortShowdownDetailView_HasScoreInEvent");
static_assert(offsetof(FortShowdownDetailView_HasScoreInEvent, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_HasScoreInEvent::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.IsEventLeaderboardAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_IsEventLeaderboardAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_IsEventLeaderboardAvailable) == 0x000001, "Wrong alignment on FortShowdownDetailView_IsEventLeaderboardAvailable");
static_assert(sizeof(FortShowdownDetailView_IsEventLeaderboardAvailable) == 0x000001, "Wrong size on FortShowdownDetailView_IsEventLeaderboardAvailable");
static_assert(offsetof(FortShowdownDetailView_IsEventLeaderboardAvailable, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_IsEventLeaderboardAvailable::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.IsWorldCupQualifierEvent
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_IsWorldCupQualifierEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_IsWorldCupQualifierEvent) == 0x000001, "Wrong alignment on FortShowdownDetailView_IsWorldCupQualifierEvent");
static_assert(sizeof(FortShowdownDetailView_IsWorldCupQualifierEvent) == 0x000001, "Wrong size on FortShowdownDetailView_IsWorldCupQualifierEvent");
static_assert(offsetof(FortShowdownDetailView_IsWorldCupQualifierEvent, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_IsWorldCupQualifierEvent::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDetailView.ShouldShowCrossplayError
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDetailView_ShouldShowCrossplayError final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDetailView_ShouldShowCrossplayError) == 0x000001, "Wrong alignment on FortShowdownDetailView_ShouldShowCrossplayError");
static_assert(sizeof(FortShowdownDetailView_ShouldShowCrossplayError) == 0x000001, "Wrong size on FortShowdownDetailView_ShouldShowCrossplayError");
static_assert(offsetof(FortShowdownDetailView_ShouldShowCrossplayError, ReturnValue) == 0x000000, "Member 'FortShowdownDetailView_ShouldShowCrossplayError::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionEventView.GetAmountEarnedWithinDivision
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDivisionEventView_GetAmountEarnedWithinDivision final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionEventView_GetAmountEarnedWithinDivision) == 0x000004, "Wrong alignment on FortShowdownDivisionEventView_GetAmountEarnedWithinDivision");
static_assert(sizeof(FortShowdownDivisionEventView_GetAmountEarnedWithinDivision) == 0x000004, "Wrong size on FortShowdownDivisionEventView_GetAmountEarnedWithinDivision");
static_assert(offsetof(FortShowdownDivisionEventView_GetAmountEarnedWithinDivision, ReturnValue) == 0x000000, "Member 'FortShowdownDivisionEventView_GetAmountEarnedWithinDivision::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionEventView.GetDivisionRank
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDivisionEventView_GetDivisionRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionEventView_GetDivisionRank) == 0x000004, "Wrong alignment on FortShowdownDivisionEventView_GetDivisionRank");
static_assert(sizeof(FortShowdownDivisionEventView_GetDivisionRank) == 0x000004, "Wrong size on FortShowdownDivisionEventView_GetDivisionRank");
static_assert(offsetof(FortShowdownDivisionEventView_GetDivisionRank, ReturnValue) == 0x000000, "Member 'FortShowdownDivisionEventView_GetDivisionRank::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionEventView.GetLeaguePrefixDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortShowdownDivisionEventView_GetLeaguePrefixDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionEventView_GetLeaguePrefixDisplayName) == 0x000008, "Wrong alignment on FortShowdownDivisionEventView_GetLeaguePrefixDisplayName");
static_assert(sizeof(FortShowdownDivisionEventView_GetLeaguePrefixDisplayName) == 0x000018, "Wrong size on FortShowdownDivisionEventView_GetLeaguePrefixDisplayName");
static_assert(offsetof(FortShowdownDivisionEventView_GetLeaguePrefixDisplayName, ReturnValue) == 0x000000, "Member 'FortShowdownDivisionEventView_GetLeaguePrefixDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionEventView.GetLeaguePrefixDisplayNameByDivision
// 0x0020 (0x0020 - 0x0000)
struct FortShowdownDivisionEventView_GetLeaguePrefixDisplayNameByDivision final
{
public:
	int32                                         InDivision;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionEventView_GetLeaguePrefixDisplayNameByDivision) == 0x000008, "Wrong alignment on FortShowdownDivisionEventView_GetLeaguePrefixDisplayNameByDivision");
static_assert(sizeof(FortShowdownDivisionEventView_GetLeaguePrefixDisplayNameByDivision) == 0x000020, "Wrong size on FortShowdownDivisionEventView_GetLeaguePrefixDisplayNameByDivision");
static_assert(offsetof(FortShowdownDivisionEventView_GetLeaguePrefixDisplayNameByDivision, InDivision) == 0x000000, "Member 'FortShowdownDivisionEventView_GetLeaguePrefixDisplayNameByDivision::InDivision' has a wrong offset!");
static_assert(offsetof(FortShowdownDivisionEventView_GetLeaguePrefixDisplayNameByDivision, ReturnValue) == 0x000008, "Member 'FortShowdownDivisionEventView_GetLeaguePrefixDisplayNameByDivision::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionEventView.GetLeagueSuffixDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortShowdownDivisionEventView_GetLeagueSuffixDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionEventView_GetLeagueSuffixDisplayName) == 0x000008, "Wrong alignment on FortShowdownDivisionEventView_GetLeagueSuffixDisplayName");
static_assert(sizeof(FortShowdownDivisionEventView_GetLeagueSuffixDisplayName) == 0x000018, "Wrong size on FortShowdownDivisionEventView_GetLeagueSuffixDisplayName");
static_assert(offsetof(FortShowdownDivisionEventView_GetLeagueSuffixDisplayName, ReturnValue) == 0x000000, "Member 'FortShowdownDivisionEventView_GetLeagueSuffixDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionEventView.GetLeagueSuffixDisplayNameByDivision
// 0x0020 (0x0020 - 0x0000)
struct FortShowdownDivisionEventView_GetLeagueSuffixDisplayNameByDivision final
{
public:
	int32                                         InDivision;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionEventView_GetLeagueSuffixDisplayNameByDivision) == 0x000008, "Wrong alignment on FortShowdownDivisionEventView_GetLeagueSuffixDisplayNameByDivision");
static_assert(sizeof(FortShowdownDivisionEventView_GetLeagueSuffixDisplayNameByDivision) == 0x000020, "Wrong size on FortShowdownDivisionEventView_GetLeagueSuffixDisplayNameByDivision");
static_assert(offsetof(FortShowdownDivisionEventView_GetLeagueSuffixDisplayNameByDivision, InDivision) == 0x000000, "Member 'FortShowdownDivisionEventView_GetLeagueSuffixDisplayNameByDivision::InDivision' has a wrong offset!");
static_assert(offsetof(FortShowdownDivisionEventView_GetLeagueSuffixDisplayNameByDivision, ReturnValue) == 0x000008, "Member 'FortShowdownDivisionEventView_GetLeagueSuffixDisplayNameByDivision::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionEventView.GetNumericalDisplayAmountForNextDivision
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDivisionEventView_GetNumericalDisplayAmountForNextDivision final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionEventView_GetNumericalDisplayAmountForNextDivision) == 0x000004, "Wrong alignment on FortShowdownDivisionEventView_GetNumericalDisplayAmountForNextDivision");
static_assert(sizeof(FortShowdownDivisionEventView_GetNumericalDisplayAmountForNextDivision) == 0x000004, "Wrong size on FortShowdownDivisionEventView_GetNumericalDisplayAmountForNextDivision");
static_assert(offsetof(FortShowdownDivisionEventView_GetNumericalDisplayAmountForNextDivision, ReturnValue) == 0x000000, "Member 'FortShowdownDivisionEventView_GetNumericalDisplayAmountForNextDivision::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionEventView.GetRequiredAmountToAdvanceDivision
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDivisionEventView_GetRequiredAmountToAdvanceDivision final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionEventView_GetRequiredAmountToAdvanceDivision) == 0x000004, "Wrong alignment on FortShowdownDivisionEventView_GetRequiredAmountToAdvanceDivision");
static_assert(sizeof(FortShowdownDivisionEventView_GetRequiredAmountToAdvanceDivision) == 0x000004, "Wrong size on FortShowdownDivisionEventView_GetRequiredAmountToAdvanceDivision");
static_assert(offsetof(FortShowdownDivisionEventView_GetRequiredAmountToAdvanceDivision, ReturnValue) == 0x000000, "Member 'FortShowdownDivisionEventView_GetRequiredAmountToAdvanceDivision::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionEventView.GetTotalDivisionPoints
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDivisionEventView_GetTotalDivisionPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionEventView_GetTotalDivisionPoints) == 0x000004, "Wrong alignment on FortShowdownDivisionEventView_GetTotalDivisionPoints");
static_assert(sizeof(FortShowdownDivisionEventView_GetTotalDivisionPoints) == 0x000004, "Wrong size on FortShowdownDivisionEventView_GetTotalDivisionPoints");
static_assert(offsetof(FortShowdownDivisionEventView_GetTotalDivisionPoints, ReturnValue) == 0x000000, "Member 'FortShowdownDivisionEventView_GetTotalDivisionPoints::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionEventView.GetTotalNumberOfDivisions
// 0x0004 (0x0004 - 0x0000)
struct FortShowdownDivisionEventView_GetTotalNumberOfDivisions final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionEventView_GetTotalNumberOfDivisions) == 0x000004, "Wrong alignment on FortShowdownDivisionEventView_GetTotalNumberOfDivisions");
static_assert(sizeof(FortShowdownDivisionEventView_GetTotalNumberOfDivisions) == 0x000004, "Wrong size on FortShowdownDivisionEventView_GetTotalNumberOfDivisions");
static_assert(offsetof(FortShowdownDivisionEventView_GetTotalNumberOfDivisions, ReturnValue) == 0x000000, "Member 'FortShowdownDivisionEventView_GetTotalNumberOfDivisions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionEventView.IsDivisionEvent
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDivisionEventView_IsDivisionEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionEventView_IsDivisionEvent) == 0x000001, "Wrong alignment on FortShowdownDivisionEventView_IsDivisionEvent");
static_assert(sizeof(FortShowdownDivisionEventView_IsDivisionEvent) == 0x000001, "Wrong size on FortShowdownDivisionEventView_IsDivisionEvent");
static_assert(offsetof(FortShowdownDivisionEventView_IsDivisionEvent, ReturnValue) == 0x000000, "Member 'FortShowdownDivisionEventView_IsDivisionEvent::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaChallengeTreeEntry_ChallengeSet.OnChallengeSetEstablished
// 0x0080 (0x0080 - 0x0000)
struct AthenaChallengeTreeEntry_ChallengeSet_OnChallengeSetEstablished final
{
public:
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeTreeEntry_ChallengeSet_OnChallengeSetEstablished) == 0x000008, "Wrong alignment on AthenaChallengeTreeEntry_ChallengeSet_OnChallengeSetEstablished");
static_assert(sizeof(AthenaChallengeTreeEntry_ChallengeSet_OnChallengeSetEstablished) == 0x000080, "Wrong size on AthenaChallengeTreeEntry_ChallengeSet_OnChallengeSetEstablished");
static_assert(offsetof(AthenaChallengeTreeEntry_ChallengeSet_OnChallengeSetEstablished, DisplayStyle) == 0x000000, "Member 'AthenaChallengeTreeEntry_ChallengeSet_OnChallengeSetEstablished::DisplayStyle' has a wrong offset!");

// Function FortniteUI.AthenaChallengeListEntry_Challenge.OnChallengeInfoSet
// 0x0004 (0x0004 - 0x0000)
struct AthenaChallengeListEntry_Challenge_OnChallengeInfoSet final
{
public:
	bool                                          bIsComplete;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocked;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompact;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideRewards;                                       // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeListEntry_Challenge_OnChallengeInfoSet) == 0x000001, "Wrong alignment on AthenaChallengeListEntry_Challenge_OnChallengeInfoSet");
static_assert(sizeof(AthenaChallengeListEntry_Challenge_OnChallengeInfoSet) == 0x000004, "Wrong size on AthenaChallengeListEntry_Challenge_OnChallengeInfoSet");
static_assert(offsetof(AthenaChallengeListEntry_Challenge_OnChallengeInfoSet, bIsComplete) == 0x000000, "Member 'AthenaChallengeListEntry_Challenge_OnChallengeInfoSet::bIsComplete' has a wrong offset!");
static_assert(offsetof(AthenaChallengeListEntry_Challenge_OnChallengeInfoSet, bIsLocked) == 0x000001, "Member 'AthenaChallengeListEntry_Challenge_OnChallengeInfoSet::bIsLocked' has a wrong offset!");
static_assert(offsetof(AthenaChallengeListEntry_Challenge_OnChallengeInfoSet, bCompact) == 0x000002, "Member 'AthenaChallengeListEntry_Challenge_OnChallengeInfoSet::bCompact' has a wrong offset!");
static_assert(offsetof(AthenaChallengeListEntry_Challenge_OnChallengeInfoSet, HideRewards) == 0x000003, "Member 'AthenaChallengeListEntry_Challenge_OnChallengeInfoSet::HideRewards' has a wrong offset!");

// Function FortniteUI.AthenaChallengeListEntry_Challenge.OnPartyAssistEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaChallengeListEntry_Challenge_OnPartyAssistEnabledChanged final
{
public:
	bool                                          bIsPartyAssistEnabled;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeListEntry_Challenge_OnPartyAssistEnabledChanged) == 0x000001, "Wrong alignment on AthenaChallengeListEntry_Challenge_OnPartyAssistEnabledChanged");
static_assert(sizeof(AthenaChallengeListEntry_Challenge_OnPartyAssistEnabledChanged) == 0x000001, "Wrong size on AthenaChallengeListEntry_Challenge_OnPartyAssistEnabledChanged");
static_assert(offsetof(AthenaChallengeListEntry_Challenge_OnPartyAssistEnabledChanged, bIsPartyAssistEnabled) == 0x000000, "Member 'AthenaChallengeListEntry_Challenge_OnPartyAssistEnabledChanged::bIsPartyAssistEnabled' has a wrong offset!");

// Function FortniteUI.AthenaChallengeListEntry_Challenge.GetChallengeWeight
// 0x0004 (0x0004 - 0x0000)
struct AthenaChallengeListEntry_Challenge_GetChallengeWeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeListEntry_Challenge_GetChallengeWeight) == 0x000004, "Wrong alignment on AthenaChallengeListEntry_Challenge_GetChallengeWeight");
static_assert(sizeof(AthenaChallengeListEntry_Challenge_GetChallengeWeight) == 0x000004, "Wrong size on AthenaChallengeListEntry_Challenge_GetChallengeWeight");
static_assert(offsetof(AthenaChallengeListEntry_Challenge_GetChallengeWeight, ReturnValue) == 0x000000, "Member 'AthenaChallengeListEntry_Challenge_GetChallengeWeight::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaChallengeListEntry_DetailedChallenge.HandleCloseChallengeOptionsInputAction
// 0x0001 (0x0001 - 0x0000)
struct AthenaChallengeListEntry_DetailedChallenge_HandleCloseChallengeOptionsInputAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeListEntry_DetailedChallenge_HandleCloseChallengeOptionsInputAction) == 0x000001, "Wrong alignment on AthenaChallengeListEntry_DetailedChallenge_HandleCloseChallengeOptionsInputAction");
static_assert(sizeof(AthenaChallengeListEntry_DetailedChallenge_HandleCloseChallengeOptionsInputAction) == 0x000001, "Wrong size on AthenaChallengeListEntry_DetailedChallenge_HandleCloseChallengeOptionsInputAction");
static_assert(offsetof(AthenaChallengeListEntry_DetailedChallenge_HandleCloseChallengeOptionsInputAction, bPassThrough) == 0x000000, "Member 'AthenaChallengeListEntry_DetailedChallenge_HandleCloseChallengeOptionsInputAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaChallengeListEntry_Header.OnSectionTypeSet
// 0x0001 (0x0001 - 0x0000)
struct AthenaChallengeListEntry_Header_OnSectionTypeSet final
{
public:
	EChallengeListSection                         SectionType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeListEntry_Header_OnSectionTypeSet) == 0x000001, "Wrong alignment on AthenaChallengeListEntry_Header_OnSectionTypeSet");
static_assert(sizeof(AthenaChallengeListEntry_Header_OnSectionTypeSet) == 0x000001, "Wrong size on AthenaChallengeListEntry_Header_OnSectionTypeSet");
static_assert(offsetof(AthenaChallengeListEntry_Header_OnSectionTypeSet, SectionType) == 0x000000, "Member 'AthenaChallengeListEntry_Header_OnSectionTypeSet::SectionType' has a wrong offset!");

// Function FortniteUI.FortDualBladeMenu.HandleAccountPickerResult
// 0x0008 (0x0008 - 0x0000)
struct FortDualBladeMenu_HandleAccountPickerResult final
{
public:
	int32                                         ControllerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUserSwitched;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDualBladeMenu_HandleAccountPickerResult) == 0x000004, "Wrong alignment on FortDualBladeMenu_HandleAccountPickerResult");
static_assert(sizeof(FortDualBladeMenu_HandleAccountPickerResult) == 0x000008, "Wrong size on FortDualBladeMenu_HandleAccountPickerResult");
static_assert(offsetof(FortDualBladeMenu_HandleAccountPickerResult, ControllerId) == 0x000000, "Member 'FortDualBladeMenu_HandleAccountPickerResult::ControllerId' has a wrong offset!");
static_assert(offsetof(FortDualBladeMenu_HandleAccountPickerResult, bUserSwitched) == 0x000004, "Member 'FortDualBladeMenu_HandleAccountPickerResult::bUserSwitched' has a wrong offset!");

// Function FortniteUI.FortDualBladeMenu.HandleMainMenuInputActionTriggered
// 0x0001 (0x0001 - 0x0000)
struct FortDualBladeMenu_HandleMainMenuInputActionTriggered final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDualBladeMenu_HandleMainMenuInputActionTriggered) == 0x000001, "Wrong alignment on FortDualBladeMenu_HandleMainMenuInputActionTriggered");
static_assert(sizeof(FortDualBladeMenu_HandleMainMenuInputActionTriggered) == 0x000001, "Wrong size on FortDualBladeMenu_HandleMainMenuInputActionTriggered");
static_assert(offsetof(FortDualBladeMenu_HandleMainMenuInputActionTriggered, bPassThrough) == 0x000000, "Member 'FortDualBladeMenu_HandleMainMenuInputActionTriggered::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortDualBladeMenu.HandleSocialPanelInputActionTriggered
// 0x0001 (0x0001 - 0x0000)
struct FortDualBladeMenu_HandleSocialPanelInputActionTriggered final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDualBladeMenu_HandleSocialPanelInputActionTriggered) == 0x000001, "Wrong alignment on FortDualBladeMenu_HandleSocialPanelInputActionTriggered");
static_assert(sizeof(FortDualBladeMenu_HandleSocialPanelInputActionTriggered) == 0x000001, "Wrong size on FortDualBladeMenu_HandleSocialPanelInputActionTriggered");
static_assert(offsetof(FortDualBladeMenu_HandleSocialPanelInputActionTriggered, bPassThrough) == 0x000000, "Member 'FortDualBladeMenu_HandleSocialPanelInputActionTriggered::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortDualBladeMenu.HandleSwitchProfileActionTriggered
// 0x0001 (0x0001 - 0x0000)
struct FortDualBladeMenu_HandleSwitchProfileActionTriggered final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDualBladeMenu_HandleSwitchProfileActionTriggered) == 0x000001, "Wrong alignment on FortDualBladeMenu_HandleSwitchProfileActionTriggered");
static_assert(sizeof(FortDualBladeMenu_HandleSwitchProfileActionTriggered) == 0x000001, "Wrong size on FortDualBladeMenu_HandleSwitchProfileActionTriggered");
static_assert(offsetof(FortDualBladeMenu_HandleSwitchProfileActionTriggered, bPassThrough) == 0x000000, "Member 'FortDualBladeMenu_HandleSwitchProfileActionTriggered::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaChallengeListEntry_CompletionReward.OnRewardInfoSet
// 0x0088 (0x0088 - 0x0000)
struct AthenaChallengeListEntry_CompletionReward_OnRewardInfoSet final
{
public:
	bool                                          bIsCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeListEntry_CompletionReward_OnRewardInfoSet) == 0x000008, "Wrong alignment on AthenaChallengeListEntry_CompletionReward_OnRewardInfoSet");
static_assert(sizeof(AthenaChallengeListEntry_CompletionReward_OnRewardInfoSet) == 0x000088, "Wrong size on AthenaChallengeListEntry_CompletionReward_OnRewardInfoSet");
static_assert(offsetof(AthenaChallengeListEntry_CompletionReward_OnRewardInfoSet, bIsCompleted) == 0x000000, "Member 'AthenaChallengeListEntry_CompletionReward_OnRewardInfoSet::bIsCompleted' has a wrong offset!");
static_assert(offsetof(AthenaChallengeListEntry_CompletionReward_OnRewardInfoSet, DisplayStyle) == 0x000008, "Member 'AthenaChallengeListEntry_CompletionReward_OnRewardInfoSet::DisplayStyle' has a wrong offset!");

// Function FortniteUI.UINavigationManager.GetDisplayName
// 0x0020 (0x0020 - 0x0000)
struct UINavigationManager_GetDisplayName final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationManager_GetDisplayName) == 0x000008, "Wrong alignment on UINavigationManager_GetDisplayName");
static_assert(sizeof(UINavigationManager_GetDisplayName) == 0x000020, "Wrong size on UINavigationManager_GetDisplayName");
static_assert(offsetof(UINavigationManager_GetDisplayName, Param_Index) == 0x000000, "Member 'UINavigationManager_GetDisplayName::Param_Index' has a wrong offset!");
static_assert(offsetof(UINavigationManager_GetDisplayName, ReturnValue) == 0x000008, "Member 'UINavigationManager_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.UINavigationManager.GetStackSize
// 0x0004 (0x0004 - 0x0000)
struct UINavigationManager_GetStackSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationManager_GetStackSize) == 0x000004, "Wrong alignment on UINavigationManager_GetStackSize");
static_assert(sizeof(UINavigationManager_GetStackSize) == 0x000004, "Wrong size on UINavigationManager_GetStackSize");
static_assert(offsetof(UINavigationManager_GetStackSize, ReturnValue) == 0x000000, "Member 'UINavigationManager_GetStackSize::ReturnValue' has a wrong offset!");

// Function FortniteUI.UINavigationManager.NavigationToIndex
// 0x0004 (0x0004 - 0x0000)
struct UINavigationManager_NavigationToIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINavigationManager_NavigationToIndex) == 0x000004, "Wrong alignment on UINavigationManager_NavigationToIndex");
static_assert(sizeof(UINavigationManager_NavigationToIndex) == 0x000004, "Wrong size on UINavigationManager_NavigationToIndex");
static_assert(offsetof(UINavigationManager_NavigationToIndex, Param_Index) == 0x000000, "Member 'UINavigationManager_NavigationToIndex::Param_Index' has a wrong offset!");

// Function FortniteUI.UINavigationManager.PushNavigation
// 0x0050 (0x0050 - 0x0000)
struct UINavigationManager_PushNavigation final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                ObjectData;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IdData;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntData;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FUINavigationData& Data)> OnNavigateTo;                                      // 0x002C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FUINavigationData& Data)> OnNavigateFrom;                                    // 0x003C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINavigationManager_PushNavigation) == 0x000008, "Wrong alignment on UINavigationManager_PushNavigation");
static_assert(sizeof(UINavigationManager_PushNavigation) == 0x000050, "Wrong size on UINavigationManager_PushNavigation");
static_assert(offsetof(UINavigationManager_PushNavigation, DisplayName) == 0x000000, "Member 'UINavigationManager_PushNavigation::DisplayName' has a wrong offset!");
static_assert(offsetof(UINavigationManager_PushNavigation, ObjectData) == 0x000018, "Member 'UINavigationManager_PushNavigation::ObjectData' has a wrong offset!");
static_assert(offsetof(UINavigationManager_PushNavigation, IdData) == 0x000020, "Member 'UINavigationManager_PushNavigation::IdData' has a wrong offset!");
static_assert(offsetof(UINavigationManager_PushNavigation, IntData) == 0x000028, "Member 'UINavigationManager_PushNavigation::IntData' has a wrong offset!");
static_assert(offsetof(UINavigationManager_PushNavigation, OnNavigateTo) == 0x00002C, "Member 'UINavigationManager_PushNavigation::OnNavigateTo' has a wrong offset!");
static_assert(offsetof(UINavigationManager_PushNavigation, OnNavigateFrom) == 0x00003C, "Member 'UINavigationManager_PushNavigation::OnNavigateFrom' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.AttemptMatchmakeForQuest
// 0x0010 (0x0010 - 0x0000)
struct FortUINavigationManager_AttemptMatchmakeForQuest final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutContentNotDownloaded;                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUINavigationManager_AttemptMatchmakeForQuest) == 0x000008, "Wrong alignment on FortUINavigationManager_AttemptMatchmakeForQuest");
static_assert(sizeof(FortUINavigationManager_AttemptMatchmakeForQuest) == 0x000010, "Wrong size on FortUINavigationManager_AttemptMatchmakeForQuest");
static_assert(offsetof(FortUINavigationManager_AttemptMatchmakeForQuest, Quest) == 0x000000, "Member 'FortUINavigationManager_AttemptMatchmakeForQuest::Quest' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_AttemptMatchmakeForQuest, OutContentNotDownloaded) == 0x000008, "Member 'FortUINavigationManager_AttemptMatchmakeForQuest::OutContentNotDownloaded' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_AttemptMatchmakeForQuest, ReturnValue) == 0x000009, "Member 'FortUINavigationManager_AttemptMatchmakeForQuest::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.AttemptPlayQuest
// 0x0010 (0x0010 - 0x0000)
struct FortUINavigationManager_AttemptPlayQuest final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUINavigationManager_AttemptPlayQuest) == 0x000008, "Wrong alignment on FortUINavigationManager_AttemptPlayQuest");
static_assert(sizeof(FortUINavigationManager_AttemptPlayQuest) == 0x000010, "Wrong size on FortUINavigationManager_AttemptPlayQuest");
static_assert(offsetof(FortUINavigationManager_AttemptPlayQuest, Quest) == 0x000000, "Member 'FortUINavigationManager_AttemptPlayQuest::Quest' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_AttemptPlayQuest, ReturnValue) == 0x000008, "Member 'FortUINavigationManager_AttemptPlayQuest::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.CanAccessCollectionBook
// 0x0001 (0x0001 - 0x0000)
struct FortUINavigationManager_CanAccessCollectionBook final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_CanAccessCollectionBook) == 0x000001, "Wrong alignment on FortUINavigationManager_CanAccessCollectionBook");
static_assert(sizeof(FortUINavigationManager_CanAccessCollectionBook) == 0x000001, "Wrong size on FortUINavigationManager_CanAccessCollectionBook");
static_assert(offsetof(FortUINavigationManager_CanAccessCollectionBook, ReturnValue) == 0x000000, "Member 'FortUINavigationManager_CanAccessCollectionBook::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.CanAccessHeroLoadoutScreen
// 0x0010 (0x0010 - 0x0000)
struct FortUINavigationManager_CanAccessHeroLoadoutScreen final
{
public:
	class UFortCampaignHeroLoadoutItem*           HeroLoadout;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUINavigationManager_CanAccessHeroLoadoutScreen) == 0x000008, "Wrong alignment on FortUINavigationManager_CanAccessHeroLoadoutScreen");
static_assert(sizeof(FortUINavigationManager_CanAccessHeroLoadoutScreen) == 0x000010, "Wrong size on FortUINavigationManager_CanAccessHeroLoadoutScreen");
static_assert(offsetof(FortUINavigationManager_CanAccessHeroLoadoutScreen, HeroLoadout) == 0x000000, "Member 'FortUINavigationManager_CanAccessHeroLoadoutScreen::HeroLoadout' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_CanAccessHeroLoadoutScreen, ReturnValue) == 0x000008, "Member 'FortUINavigationManager_CanAccessHeroLoadoutScreen::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.CanAccessItemManagementScreen
// 0x0002 (0x0002 - 0x0000)
struct FortUINavigationManager_CanAccessItemManagementScreen final
{
public:
	EFortFrontendInventoryFilter                  ItemManagementFilter;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_CanAccessItemManagementScreen) == 0x000001, "Wrong alignment on FortUINavigationManager_CanAccessItemManagementScreen");
static_assert(sizeof(FortUINavigationManager_CanAccessItemManagementScreen) == 0x000002, "Wrong size on FortUINavigationManager_CanAccessItemManagementScreen");
static_assert(offsetof(FortUINavigationManager_CanAccessItemManagementScreen, ItemManagementFilter) == 0x000000, "Member 'FortUINavigationManager_CanAccessItemManagementScreen::ItemManagementFilter' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_CanAccessItemManagementScreen, ReturnValue) == 0x000001, "Member 'FortUINavigationManager_CanAccessItemManagementScreen::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.CanAccessSquadManagementScreen
// 0x0010 (0x0010 - 0x0000)
struct FortUINavigationManager_CanAccessSquadManagementScreen final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUINavigationManager_CanAccessSquadManagementScreen) == 0x000004, "Wrong alignment on FortUINavigationManager_CanAccessSquadManagementScreen");
static_assert(sizeof(FortUINavigationManager_CanAccessSquadManagementScreen) == 0x000010, "Wrong size on FortUINavigationManager_CanAccessSquadManagementScreen");
static_assert(offsetof(FortUINavigationManager_CanAccessSquadManagementScreen, SquadId) == 0x000000, "Member 'FortUINavigationManager_CanAccessSquadManagementScreen::SquadId' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_CanAccessSquadManagementScreen, SquadSlotIndex) == 0x000008, "Member 'FortUINavigationManager_CanAccessSquadManagementScreen::SquadSlotIndex' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_CanAccessSquadManagementScreen, ReturnValue) == 0x00000C, "Member 'FortUINavigationManager_CanAccessSquadManagementScreen::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.CanNavigateToQuestObjective
// 0x0010 (0x0010 - 0x0000)
struct FortUINavigationManager_CanNavigateToQuestObjective final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUINavigationManager_CanNavigateToQuestObjective) == 0x000008, "Wrong alignment on FortUINavigationManager_CanNavigateToQuestObjective");
static_assert(sizeof(FortUINavigationManager_CanNavigateToQuestObjective) == 0x000010, "Wrong size on FortUINavigationManager_CanNavigateToQuestObjective");
static_assert(offsetof(FortUINavigationManager_CanNavigateToQuestObjective, QuestItem) == 0x000000, "Member 'FortUINavigationManager_CanNavigateToQuestObjective::QuestItem' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_CanNavigateToQuestObjective, ReturnValue) == 0x000008, "Member 'FortUINavigationManager_CanNavigateToQuestObjective::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.CenterWidget
// 0x0008 (0x0008 - 0x0000)
struct FortUINavigationManager_CenterWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_CenterWidget) == 0x000008, "Wrong alignment on FortUINavigationManager_CenterWidget");
static_assert(sizeof(FortUINavigationManager_CenterWidget) == 0x000008, "Wrong size on FortUINavigationManager_CenterWidget");
static_assert(offsetof(FortUINavigationManager_CenterWidget, Widget) == 0x000000, "Member 'FortUINavigationManager_CenterWidget::Widget' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.CompletePendingNavigationOp
// 0x0001 (0x0001 - 0x0000)
struct FortUINavigationManager_CompletePendingNavigationOp final
{
public:
	EFortUINavigationOp                           NavigationOp;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_CompletePendingNavigationOp) == 0x000001, "Wrong alignment on FortUINavigationManager_CompletePendingNavigationOp");
static_assert(sizeof(FortUINavigationManager_CompletePendingNavigationOp) == 0x000001, "Wrong size on FortUINavigationManager_CompletePendingNavigationOp");
static_assert(offsetof(FortUINavigationManager_CompletePendingNavigationOp, NavigationOp) == 0x000000, "Member 'FortUINavigationManager_CompletePendingNavigationOp::NavigationOp' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.HasPendingNavigationOp
// 0x0002 (0x0002 - 0x0000)
struct FortUINavigationManager_HasPendingNavigationOp final
{
public:
	EFortUINavigationOp                           NavigationOp;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_HasPendingNavigationOp) == 0x000001, "Wrong alignment on FortUINavigationManager_HasPendingNavigationOp");
static_assert(sizeof(FortUINavigationManager_HasPendingNavigationOp) == 0x000002, "Wrong size on FortUINavigationManager_HasPendingNavigationOp");
static_assert(offsetof(FortUINavigationManager_HasPendingNavigationOp, NavigationOp) == 0x000000, "Member 'FortUINavigationManager_HasPendingNavigationOp::NavigationOp' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_HasPendingNavigationOp, ReturnValue) == 0x000001, "Member 'FortUINavigationManager_HasPendingNavigationOp::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.NavigateForGift
// 0x0008 (0x0008 - 0x0000)
struct FortUINavigationManager_NavigateForGift final
{
public:
	class UFortGiftBoxItem*                       Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_NavigateForGift) == 0x000008, "Wrong alignment on FortUINavigationManager_NavigateForGift");
static_assert(sizeof(FortUINavigationManager_NavigateForGift) == 0x000008, "Wrong size on FortUINavigationManager_NavigateForGift");
static_assert(offsetof(FortUINavigationManager_NavigateForGift, Item) == 0x000000, "Member 'FortUINavigationManager_NavigateForGift::Item' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.NavigateToFeature
// 0x0001 (0x0001 - 0x0000)
struct FortUINavigationManager_NavigateToFeature final
{
public:
	EFortUIFeature                                Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_NavigateToFeature) == 0x000001, "Wrong alignment on FortUINavigationManager_NavigateToFeature");
static_assert(sizeof(FortUINavigationManager_NavigateToFeature) == 0x000001, "Wrong size on FortUINavigationManager_NavigateToFeature");
static_assert(offsetof(FortUINavigationManager_NavigateToFeature, Feature) == 0x000000, "Member 'FortUINavigationManager_NavigateToFeature::Feature' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.NavigateToItem
// 0x0008 (0x0008 - 0x0000)
struct FortUINavigationManager_NavigateToItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_NavigateToItem) == 0x000008, "Wrong alignment on FortUINavigationManager_NavigateToItem");
static_assert(sizeof(FortUINavigationManager_NavigateToItem) == 0x000008, "Wrong size on FortUINavigationManager_NavigateToItem");
static_assert(offsetof(FortUINavigationManager_NavigateToItem, Item) == 0x000000, "Member 'FortUINavigationManager_NavigateToItem::Item' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.NavigateToItemManagementScreen
// 0x0001 (0x0001 - 0x0000)
struct FortUINavigationManager_NavigateToItemManagementScreen final
{
public:
	EFortFrontendInventoryFilter                  Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_NavigateToItemManagementScreen) == 0x000001, "Wrong alignment on FortUINavigationManager_NavigateToItemManagementScreen");
static_assert(sizeof(FortUINavigationManager_NavigateToItemManagementScreen) == 0x000001, "Wrong size on FortUINavigationManager_NavigateToItemManagementScreen");
static_assert(offsetof(FortUINavigationManager_NavigateToItemManagementScreen, Filter) == 0x000000, "Member 'FortUINavigationManager_NavigateToItemManagementScreen::Filter' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.NavigateToQuestObjective
// 0x0008 (0x0008 - 0x0000)
struct FortUINavigationManager_NavigateToQuestObjective final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_NavigateToQuestObjective) == 0x000008, "Wrong alignment on FortUINavigationManager_NavigateToQuestObjective");
static_assert(sizeof(FortUINavigationManager_NavigateToQuestObjective) == 0x000008, "Wrong size on FortUINavigationManager_NavigateToQuestObjective");
static_assert(offsetof(FortUINavigationManager_NavigateToQuestObjective, QuestItem) == 0x000000, "Member 'FortUINavigationManager_NavigateToQuestObjective::QuestItem' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.NavigateToSquadSlot
// 0x000C (0x000C - 0x0000)
struct FortUINavigationManager_NavigateToSquadSlot final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_NavigateToSquadSlot) == 0x000004, "Wrong alignment on FortUINavigationManager_NavigateToSquadSlot");
static_assert(sizeof(FortUINavigationManager_NavigateToSquadSlot) == 0x00000C, "Wrong size on FortUINavigationManager_NavigateToSquadSlot");
static_assert(offsetof(FortUINavigationManager_NavigateToSquadSlot, SquadId) == 0x000000, "Member 'FortUINavigationManager_NavigateToSquadSlot::SquadId' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_NavigateToSquadSlot, SquadSlotIndex) == 0x000008, "Member 'FortUINavigationManager_NavigateToSquadSlot::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.PushHeroLoadoutScreen
// 0x0008 (0x0008 - 0x0000)
struct FortUINavigationManager_PushHeroLoadoutScreen final
{
public:
	class UFortCampaignHeroLoadoutItem*           HeroLoadout;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_PushHeroLoadoutScreen) == 0x000008, "Wrong alignment on FortUINavigationManager_PushHeroLoadoutScreen");
static_assert(sizeof(FortUINavigationManager_PushHeroLoadoutScreen) == 0x000008, "Wrong size on FortUINavigationManager_PushHeroLoadoutScreen");
static_assert(offsetof(FortUINavigationManager_PushHeroLoadoutScreen, HeroLoadout) == 0x000000, "Member 'FortUINavigationManager_PushHeroLoadoutScreen::HeroLoadout' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.PushItemInspectionScreen
// 0x0020 (0x0020 - 0x0000)
struct FortUINavigationManager_PushItemInspectionScreen final
{
public:
	class UFortItem*                              ItemToInspect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemInspectionMode                       Mode;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemTileView*                      CycleTileView;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadOnly;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFavoriting;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTemporaryItem;                                  // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRarityUpgrading;                             // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUINavigationManager_PushItemInspectionScreen) == 0x000008, "Wrong alignment on FortUINavigationManager_PushItemInspectionScreen");
static_assert(sizeof(FortUINavigationManager_PushItemInspectionScreen) == 0x000020, "Wrong size on FortUINavigationManager_PushItemInspectionScreen");
static_assert(offsetof(FortUINavigationManager_PushItemInspectionScreen, ItemToInspect) == 0x000000, "Member 'FortUINavigationManager_PushItemInspectionScreen::ItemToInspect' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_PushItemInspectionScreen, Mode) == 0x000008, "Member 'FortUINavigationManager_PushItemInspectionScreen::Mode' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_PushItemInspectionScreen, CycleTileView) == 0x000010, "Member 'FortUINavigationManager_PushItemInspectionScreen::CycleTileView' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_PushItemInspectionScreen, bReadOnly) == 0x000018, "Member 'FortUINavigationManager_PushItemInspectionScreen::bReadOnly' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_PushItemInspectionScreen, bAllowFavoriting) == 0x000019, "Member 'FortUINavigationManager_PushItemInspectionScreen::bAllowFavoriting' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_PushItemInspectionScreen, bIsTemporaryItem) == 0x00001A, "Member 'FortUINavigationManager_PushItemInspectionScreen::bIsTemporaryItem' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_PushItemInspectionScreen, bAllowRarityUpgrading) == 0x00001B, "Member 'FortUINavigationManager_PushItemInspectionScreen::bAllowRarityUpgrading' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.PushItemManagementScreen
// 0x0010 (0x0010 - 0x0000)
struct FortUINavigationManager_PushItemManagementScreen final
{
public:
	EFortFrontendInventoryFilter                  ItemManagementFilter;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ItemToSelect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_PushItemManagementScreen) == 0x000008, "Wrong alignment on FortUINavigationManager_PushItemManagementScreen");
static_assert(sizeof(FortUINavigationManager_PushItemManagementScreen) == 0x000010, "Wrong size on FortUINavigationManager_PushItemManagementScreen");
static_assert(offsetof(FortUINavigationManager_PushItemManagementScreen, ItemManagementFilter) == 0x000000, "Member 'FortUINavigationManager_PushItemManagementScreen::ItemManagementFilter' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_PushItemManagementScreen, ItemToSelect) == 0x000008, "Member 'FortUINavigationManager_PushItemManagementScreen::ItemToSelect' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.PushSquadManagementScreen
// 0x000C (0x000C - 0x0000)
struct FortUINavigationManager_PushSquadManagementScreen final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_PushSquadManagementScreen) == 0x000004, "Wrong alignment on FortUINavigationManager_PushSquadManagementScreen");
static_assert(sizeof(FortUINavigationManager_PushSquadManagementScreen) == 0x00000C, "Wrong size on FortUINavigationManager_PushSquadManagementScreen");
static_assert(offsetof(FortUINavigationManager_PushSquadManagementScreen, SquadId) == 0x000000, "Member 'FortUINavigationManager_PushSquadManagementScreen::SquadId' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_PushSquadManagementScreen, SquadSlotIndex) == 0x000008, "Member 'FortUINavigationManager_PushSquadManagementScreen::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.SetScrollWidget
// 0x0008 (0x0008 - 0x0000)
struct FortUINavigationManager_SetScrollWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINavigationManager_SetScrollWidget) == 0x000008, "Wrong alignment on FortUINavigationManager_SetScrollWidget");
static_assert(sizeof(FortUINavigationManager_SetScrollWidget) == 0x000008, "Wrong size on FortUINavigationManager_SetScrollWidget");
static_assert(offsetof(FortUINavigationManager_SetScrollWidget, Widget) == 0x000000, "Member 'FortUINavigationManager_SetScrollWidget::Widget' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.TryGetPendingNavigationOp
// 0x0038 (0x0038 - 0x0000)
struct FortUINavigationManager_TryGetPendingNavigationOp final
{
public:
	struct FFortUINavigationOperation             NavigationOp;                                      // 0x0000(0x0030)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUINavigationManager_TryGetPendingNavigationOp) == 0x000008, "Wrong alignment on FortUINavigationManager_TryGetPendingNavigationOp");
static_assert(sizeof(FortUINavigationManager_TryGetPendingNavigationOp) == 0x000038, "Wrong size on FortUINavigationManager_TryGetPendingNavigationOp");
static_assert(offsetof(FortUINavigationManager_TryGetPendingNavigationOp, NavigationOp) == 0x000000, "Member 'FortUINavigationManager_TryGetPendingNavigationOp::NavigationOp' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_TryGetPendingNavigationOp, ReturnValue) == 0x000030, "Member 'FortUINavigationManager_TryGetPendingNavigationOp::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUINavigationManager.IsWidgetCentered
// 0x0010 (0x0010 - 0x0000)
struct FortUINavigationManager_IsWidgetCentered final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUINavigationManager_IsWidgetCentered) == 0x000008, "Wrong alignment on FortUINavigationManager_IsWidgetCentered");
static_assert(sizeof(FortUINavigationManager_IsWidgetCentered) == 0x000010, "Wrong size on FortUINavigationManager_IsWidgetCentered");
static_assert(offsetof(FortUINavigationManager_IsWidgetCentered, Widget) == 0x000000, "Member 'FortUINavigationManager_IsWidgetCentered::Widget' has a wrong offset!");
static_assert(offsetof(FortUINavigationManager_IsWidgetCentered, ReturnValue) == 0x000008, "Member 'FortUINavigationManager_IsWidgetCentered::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMultiSizeImage.SetBrushSize
// 0x0001 (0x0001 - 0x0000)
struct FortMultiSizeImage_SetBrushSize final
{
public:
	EFortBrushSize                                Param_BrushSize;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeImage_SetBrushSize) == 0x000001, "Wrong alignment on FortMultiSizeImage_SetBrushSize");
static_assert(sizeof(FortMultiSizeImage_SetBrushSize) == 0x000001, "Wrong size on FortMultiSizeImage_SetBrushSize");
static_assert(offsetof(FortMultiSizeImage_SetBrushSize, Param_BrushSize) == 0x000000, "Member 'FortMultiSizeImage_SetBrushSize::Param_BrushSize' has a wrong offset!");

// Function FortniteUI.FortMultiSizeImage.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct FortMultiSizeImage_SetColorAndOpacity final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeImage_SetColorAndOpacity) == 0x000004, "Wrong alignment on FortMultiSizeImage_SetColorAndOpacity");
static_assert(sizeof(FortMultiSizeImage_SetColorAndOpacity) == 0x000010, "Wrong size on FortMultiSizeImage_SetColorAndOpacity");
static_assert(offsetof(FortMultiSizeImage_SetColorAndOpacity, Color) == 0x000000, "Member 'FortMultiSizeImage_SetColorAndOpacity::Color' has a wrong offset!");

// Function FortniteUI.FortMultiSizeImage.SetMultiSizeBrush
// 0x0330 (0x0330 - 0x0000)
struct FortMultiSizeImage_SetMultiSizeBrush final
{
public:
	struct FFortMultiSizeBrush                    Param_MultiSizeBrush;                              // 0x0000(0x0330)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeImage_SetMultiSizeBrush) == 0x000008, "Wrong alignment on FortMultiSizeImage_SetMultiSizeBrush");
static_assert(sizeof(FortMultiSizeImage_SetMultiSizeBrush) == 0x000330, "Wrong size on FortMultiSizeImage_SetMultiSizeBrush");
static_assert(offsetof(FortMultiSizeImage_SetMultiSizeBrush, Param_MultiSizeBrush) == 0x000000, "Member 'FortMultiSizeImage_SetMultiSizeBrush::Param_MultiSizeBrush' has a wrong offset!");

// Function FortniteUI.FortSimpleItemConditionIconIndicator.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortSimpleItemConditionIconIndicator_SetItemToRepresent final
{
public:
	class UFortItem*                              ItemToRepresent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSimpleItemConditionIconIndicator_SetItemToRepresent) == 0x000008, "Wrong alignment on FortSimpleItemConditionIconIndicator_SetItemToRepresent");
static_assert(sizeof(FortSimpleItemConditionIconIndicator_SetItemToRepresent) == 0x000008, "Wrong size on FortSimpleItemConditionIconIndicator_SetItemToRepresent");
static_assert(offsetof(FortSimpleItemConditionIconIndicator_SetItemToRepresent, ItemToRepresent) == 0x000000, "Member 'FortSimpleItemConditionIconIndicator_SetItemToRepresent::ItemToRepresent' has a wrong offset!");

// Function FortniteUI.FortSimpleItemConditionIconIndicator.ShouldCollapseWhenConditionIsFalse
// 0x0001 (0x0001 - 0x0000)
struct FortSimpleItemConditionIconIndicator_ShouldCollapseWhenConditionIsFalse final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSimpleItemConditionIconIndicator_ShouldCollapseWhenConditionIsFalse) == 0x000001, "Wrong alignment on FortSimpleItemConditionIconIndicator_ShouldCollapseWhenConditionIsFalse");
static_assert(sizeof(FortSimpleItemConditionIconIndicator_ShouldCollapseWhenConditionIsFalse) == 0x000001, "Wrong size on FortSimpleItemConditionIconIndicator_ShouldCollapseWhenConditionIsFalse");
static_assert(offsetof(FortSimpleItemConditionIconIndicator_ShouldCollapseWhenConditionIsFalse, Value) == 0x000000, "Member 'FortSimpleItemConditionIconIndicator_ShouldCollapseWhenConditionIsFalse::Value' has a wrong offset!");

// Function FortniteUI.FortSimpleItemConditionIconIndicator.GetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortSimpleItemConditionIconIndicator_GetItemToRepresent final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSimpleItemConditionIconIndicator_GetItemToRepresent) == 0x000008, "Wrong alignment on FortSimpleItemConditionIconIndicator_GetItemToRepresent");
static_assert(sizeof(FortSimpleItemConditionIconIndicator_GetItemToRepresent) == 0x000008, "Wrong size on FortSimpleItemConditionIconIndicator_GetItemToRepresent");
static_assert(offsetof(FortSimpleItemConditionIconIndicator_GetItemToRepresent, ReturnValue) == 0x000000, "Member 'FortSimpleItemConditionIconIndicator_GetItemToRepresent::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.DoesLeaderboardHaveQualifiedIcons
// 0x0001 (0x0001 - 0x0000)
struct FortEventLeaderboardEntryData_DoesLeaderboardHaveQualifiedIcons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_DoesLeaderboardHaveQualifiedIcons) == 0x000001, "Wrong alignment on FortEventLeaderboardEntryData_DoesLeaderboardHaveQualifiedIcons");
static_assert(sizeof(FortEventLeaderboardEntryData_DoesLeaderboardHaveQualifiedIcons) == 0x000001, "Wrong size on FortEventLeaderboardEntryData_DoesLeaderboardHaveQualifiedIcons");
static_assert(offsetof(FortEventLeaderboardEntryData_DoesLeaderboardHaveQualifiedIcons, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_DoesLeaderboardHaveQualifiedIcons::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetAverageMatchScore
// 0x0004 (0x0004 - 0x0000)
struct FortEventLeaderboardEntryData_GetAverageMatchScore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetAverageMatchScore) == 0x000004, "Wrong alignment on FortEventLeaderboardEntryData_GetAverageMatchScore");
static_assert(sizeof(FortEventLeaderboardEntryData_GetAverageMatchScore) == 0x000004, "Wrong size on FortEventLeaderboardEntryData_GetAverageMatchScore");
static_assert(offsetof(FortEventLeaderboardEntryData_GetAverageMatchScore, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetAverageMatchScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetAveragePlacement
// 0x0004 (0x0004 - 0x0000)
struct FortEventLeaderboardEntryData_GetAveragePlacement final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetAveragePlacement) == 0x000004, "Wrong alignment on FortEventLeaderboardEntryData_GetAveragePlacement");
static_assert(sizeof(FortEventLeaderboardEntryData_GetAveragePlacement) == 0x000004, "Wrong size on FortEventLeaderboardEntryData_GetAveragePlacement");
static_assert(offsetof(FortEventLeaderboardEntryData_GetAveragePlacement, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetAveragePlacement::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetEventId
// 0x0010 (0x0010 - 0x0000)
struct FortEventLeaderboardEntryData_GetEventId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetEventId) == 0x000008, "Wrong alignment on FortEventLeaderboardEntryData_GetEventId");
static_assert(sizeof(FortEventLeaderboardEntryData_GetEventId) == 0x000010, "Wrong size on FortEventLeaderboardEntryData_GetEventId");
static_assert(offsetof(FortEventLeaderboardEntryData_GetEventId, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetEventId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetEventWindowId
// 0x0010 (0x0010 - 0x0000)
struct FortEventLeaderboardEntryData_GetEventWindowId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetEventWindowId) == 0x000008, "Wrong alignment on FortEventLeaderboardEntryData_GetEventWindowId");
static_assert(sizeof(FortEventLeaderboardEntryData_GetEventWindowId) == 0x000010, "Wrong size on FortEventLeaderboardEntryData_GetEventWindowId");
static_assert(offsetof(FortEventLeaderboardEntryData_GetEventWindowId, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetEventWindowId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetLiveSessionId
// 0x0010 (0x0010 - 0x0000)
struct FortEventLeaderboardEntryData_GetLiveSessionId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetLiveSessionId) == 0x000008, "Wrong alignment on FortEventLeaderboardEntryData_GetLiveSessionId");
static_assert(sizeof(FortEventLeaderboardEntryData_GetLiveSessionId) == 0x000010, "Wrong size on FortEventLeaderboardEntryData_GetLiveSessionId");
static_assert(offsetof(FortEventLeaderboardEntryData_GetLiveSessionId, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetLiveSessionId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetNumTeammates
// 0x0004 (0x0004 - 0x0000)
struct FortEventLeaderboardEntryData_GetNumTeammates final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetNumTeammates) == 0x000004, "Wrong alignment on FortEventLeaderboardEntryData_GetNumTeammates");
static_assert(sizeof(FortEventLeaderboardEntryData_GetNumTeammates) == 0x000004, "Wrong size on FortEventLeaderboardEntryData_GetNumTeammates");
static_assert(offsetof(FortEventLeaderboardEntryData_GetNumTeammates, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetNumTeammates::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetPageIndex
// 0x0004 (0x0004 - 0x0000)
struct FortEventLeaderboardEntryData_GetPageIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetPageIndex) == 0x000004, "Wrong alignment on FortEventLeaderboardEntryData_GetPageIndex");
static_assert(sizeof(FortEventLeaderboardEntryData_GetPageIndex) == 0x000004, "Wrong size on FortEventLeaderboardEntryData_GetPageIndex");
static_assert(offsetof(FortEventLeaderboardEntryData_GetPageIndex, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetPageIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetRank
// 0x0004 (0x0004 - 0x0000)
struct FortEventLeaderboardEntryData_GetRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetRank) == 0x000004, "Wrong alignment on FortEventLeaderboardEntryData_GetRank");
static_assert(sizeof(FortEventLeaderboardEntryData_GetRank) == 0x000004, "Wrong size on FortEventLeaderboardEntryData_GetRank");
static_assert(offsetof(FortEventLeaderboardEntryData_GetRank, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetRank::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetScore
// 0x0004 (0x0004 - 0x0000)
struct FortEventLeaderboardEntryData_GetScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetScore) == 0x000004, "Wrong alignment on FortEventLeaderboardEntryData_GetScore");
static_assert(sizeof(FortEventLeaderboardEntryData_GetScore) == 0x000004, "Wrong size on FortEventLeaderboardEntryData_GetScore");
static_assert(offsetof(FortEventLeaderboardEntryData_GetScore, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetTeamAccountId
// 0x0018 (0x0018 - 0x0000)
struct FortEventLeaderboardEntryData_GetTeamAccountId final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetTeamAccountId) == 0x000008, "Wrong alignment on FortEventLeaderboardEntryData_GetTeamAccountId");
static_assert(sizeof(FortEventLeaderboardEntryData_GetTeamAccountId) == 0x000018, "Wrong size on FortEventLeaderboardEntryData_GetTeamAccountId");
static_assert(offsetof(FortEventLeaderboardEntryData_GetTeamAccountId, Param_Index) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetTeamAccountId::Param_Index' has a wrong offset!");
static_assert(offsetof(FortEventLeaderboardEntryData_GetTeamAccountId, ReturnValue) == 0x000008, "Member 'FortEventLeaderboardEntryData_GetTeamAccountId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetTeamDisplayNameText
// 0x0018 (0x0018 - 0x0000)
struct FortEventLeaderboardEntryData_GetTeamDisplayNameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetTeamDisplayNameText) == 0x000008, "Wrong alignment on FortEventLeaderboardEntryData_GetTeamDisplayNameText");
static_assert(sizeof(FortEventLeaderboardEntryData_GetTeamDisplayNameText) == 0x000018, "Wrong size on FortEventLeaderboardEntryData_GetTeamDisplayNameText");
static_assert(offsetof(FortEventLeaderboardEntryData_GetTeamDisplayNameText, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetTeamDisplayNameText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetTeammateDisplayNames
// 0x0010 (0x0010 - 0x0000)
struct FortEventLeaderboardEntryData_GetTeammateDisplayNames final
{
public:
	TArray<class FString>                         DisplayNames;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetTeammateDisplayNames) == 0x000008, "Wrong alignment on FortEventLeaderboardEntryData_GetTeammateDisplayNames");
static_assert(sizeof(FortEventLeaderboardEntryData_GetTeammateDisplayNames) == 0x000010, "Wrong size on FortEventLeaderboardEntryData_GetTeammateDisplayNames");
static_assert(offsetof(FortEventLeaderboardEntryData_GetTeammateDisplayNames, DisplayNames) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetTeammateDisplayNames::DisplayNames' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetTotalEliminations
// 0x0004 (0x0004 - 0x0000)
struct FortEventLeaderboardEntryData_GetTotalEliminations final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetTotalEliminations) == 0x000004, "Wrong alignment on FortEventLeaderboardEntryData_GetTotalEliminations");
static_assert(sizeof(FortEventLeaderboardEntryData_GetTotalEliminations) == 0x000004, "Wrong size on FortEventLeaderboardEntryData_GetTotalEliminations");
static_assert(offsetof(FortEventLeaderboardEntryData_GetTotalEliminations, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetTotalEliminations::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetTotalMatchesPlayed
// 0x0004 (0x0004 - 0x0000)
struct FortEventLeaderboardEntryData_GetTotalMatchesPlayed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetTotalMatchesPlayed) == 0x000004, "Wrong alignment on FortEventLeaderboardEntryData_GetTotalMatchesPlayed");
static_assert(sizeof(FortEventLeaderboardEntryData_GetTotalMatchesPlayed) == 0x000004, "Wrong size on FortEventLeaderboardEntryData_GetTotalMatchesPlayed");
static_assert(offsetof(FortEventLeaderboardEntryData_GetTotalMatchesPlayed, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetTotalMatchesPlayed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetTotalPointsForCategory
// 0x000C (0x000C - 0x0000)
struct FortEventLeaderboardEntryData_GetTotalPointsForCategory final
{
public:
	class FName                                   ScoreCategoryId;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetTotalPointsForCategory) == 0x000004, "Wrong alignment on FortEventLeaderboardEntryData_GetTotalPointsForCategory");
static_assert(sizeof(FortEventLeaderboardEntryData_GetTotalPointsForCategory) == 0x00000C, "Wrong size on FortEventLeaderboardEntryData_GetTotalPointsForCategory");
static_assert(offsetof(FortEventLeaderboardEntryData_GetTotalPointsForCategory, ScoreCategoryId) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetTotalPointsForCategory::ScoreCategoryId' has a wrong offset!");
static_assert(offsetof(FortEventLeaderboardEntryData_GetTotalPointsForCategory, ReturnValue) == 0x000008, "Member 'FortEventLeaderboardEntryData_GetTotalPointsForCategory::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.GetTotalVictoryRoyales
// 0x0004 (0x0004 - 0x0000)
struct FortEventLeaderboardEntryData_GetTotalVictoryRoyales final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_GetTotalVictoryRoyales) == 0x000004, "Wrong alignment on FortEventLeaderboardEntryData_GetTotalVictoryRoyales");
static_assert(sizeof(FortEventLeaderboardEntryData_GetTotalVictoryRoyales) == 0x000004, "Wrong size on FortEventLeaderboardEntryData_GetTotalVictoryRoyales");
static_assert(offsetof(FortEventLeaderboardEntryData_GetTotalVictoryRoyales, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_GetTotalVictoryRoyales::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardEntryData.ShouldShowQualifiedIcon
// 0x0001 (0x0001 - 0x0000)
struct FortEventLeaderboardEntryData_ShouldShowQualifiedIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardEntryData_ShouldShowQualifiedIcon) == 0x000001, "Wrong alignment on FortEventLeaderboardEntryData_ShouldShowQualifiedIcon");
static_assert(sizeof(FortEventLeaderboardEntryData_ShouldShowQualifiedIcon) == 0x000001, "Wrong size on FortEventLeaderboardEntryData_ShouldShowQualifiedIcon");
static_assert(offsetof(FortEventLeaderboardEntryData_ShouldShowQualifiedIcon, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardEntryData_ShouldShowQualifiedIcon::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaChallengeScreen.HandleDetailsDeactivated
// 0x0008 (0x0008 - 0x0000)
struct AthenaChallengeScreen_HandleDetailsDeactivated final
{
public:
	class UCommonActivatablePanel*                DetailsPanel;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeScreen_HandleDetailsDeactivated) == 0x000008, "Wrong alignment on AthenaChallengeScreen_HandleDetailsDeactivated");
static_assert(sizeof(AthenaChallengeScreen_HandleDetailsDeactivated) == 0x000008, "Wrong size on AthenaChallengeScreen_HandleDetailsDeactivated");
static_assert(offsetof(AthenaChallengeScreen_HandleDetailsDeactivated, DetailsPanel) == 0x000000, "Member 'AthenaChallengeScreen_HandleDetailsDeactivated::DetailsPanel' has a wrong offset!");

// Function FortniteUI.AthenaChallengeScreen.HandleNextCategoryAction
// 0x0001 (0x0001 - 0x0000)
struct AthenaChallengeScreen_HandleNextCategoryAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeScreen_HandleNextCategoryAction) == 0x000001, "Wrong alignment on AthenaChallengeScreen_HandleNextCategoryAction");
static_assert(sizeof(AthenaChallengeScreen_HandleNextCategoryAction) == 0x000001, "Wrong size on AthenaChallengeScreen_HandleNextCategoryAction");
static_assert(offsetof(AthenaChallengeScreen_HandleNextCategoryAction, bPassThrough) == 0x000000, "Member 'AthenaChallengeScreen_HandleNextCategoryAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaChallengeScreen.HandlePrevCategoryAction
// 0x0001 (0x0001 - 0x0000)
struct AthenaChallengeScreen_HandlePrevCategoryAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeScreen_HandlePrevCategoryAction) == 0x000001, "Wrong alignment on AthenaChallengeScreen_HandlePrevCategoryAction");
static_assert(sizeof(AthenaChallengeScreen_HandlePrevCategoryAction) == 0x000001, "Wrong size on AthenaChallengeScreen_HandlePrevCategoryAction");
static_assert(offsetof(AthenaChallengeScreen_HandlePrevCategoryAction, bPassThrough) == 0x000000, "Member 'AthenaChallengeScreen_HandlePrevCategoryAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaChallengeScreen.HandleTabClicked
// 0x0010 (0x0010 - 0x0000)
struct AthenaChallengeScreen_HandleTabClicked final
{
public:
	class UCommonButton*                          TabButton;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabIdx;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaChallengeScreen_HandleTabClicked) == 0x000008, "Wrong alignment on AthenaChallengeScreen_HandleTabClicked");
static_assert(sizeof(AthenaChallengeScreen_HandleTabClicked) == 0x000010, "Wrong size on AthenaChallengeScreen_HandleTabClicked");
static_assert(offsetof(AthenaChallengeScreen_HandleTabClicked, TabButton) == 0x000000, "Member 'AthenaChallengeScreen_HandleTabClicked::TabButton' has a wrong offset!");
static_assert(offsetof(AthenaChallengeScreen_HandleTabClicked, TabIdx) == 0x000008, "Member 'AthenaChallengeScreen_HandleTabClicked::TabIdx' has a wrong offset!");

// Function FortniteUI.AthenaChallengeScreen.HandleTabSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaChallengeScreen_HandleTabSelectionChanged final
{
public:
	class UCommonButton*                          TabButton;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabIdx;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaChallengeScreen_HandleTabSelectionChanged) == 0x000008, "Wrong alignment on AthenaChallengeScreen_HandleTabSelectionChanged");
static_assert(sizeof(AthenaChallengeScreen_HandleTabSelectionChanged) == 0x000010, "Wrong size on AthenaChallengeScreen_HandleTabSelectionChanged");
static_assert(offsetof(AthenaChallengeScreen_HandleTabSelectionChanged, TabButton) == 0x000000, "Member 'AthenaChallengeScreen_HandleTabSelectionChanged::TabButton' has a wrong offset!");
static_assert(offsetof(AthenaChallengeScreen_HandleTabSelectionChanged, TabIdx) == 0x000008, "Member 'AthenaChallengeScreen_HandleTabSelectionChanged::TabIdx' has a wrong offset!");

// Function FortniteUI.AthenaChallengeScreen.IsPartyAssistedChallengeSet
// 0x0001 (0x0001 - 0x0000)
struct AthenaChallengeScreen_IsPartyAssistedChallengeSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaChallengeScreen_IsPartyAssistedChallengeSet) == 0x000001, "Wrong alignment on AthenaChallengeScreen_IsPartyAssistedChallengeSet");
static_assert(sizeof(AthenaChallengeScreen_IsPartyAssistedChallengeSet) == 0x000001, "Wrong size on AthenaChallengeScreen_IsPartyAssistedChallengeSet");
static_assert(offsetof(AthenaChallengeScreen_IsPartyAssistedChallengeSet, ReturnValue) == 0x000000, "Member 'AthenaChallengeScreen_IsPartyAssistedChallengeSet::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Login.GetPlatformDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortUIStateWidget_Login_GetPlatformDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Login_GetPlatformDisplayName) == 0x000008, "Wrong alignment on FortUIStateWidget_Login_GetPlatformDisplayName");
static_assert(sizeof(FortUIStateWidget_Login_GetPlatformDisplayName) == 0x000018, "Wrong size on FortUIStateWidget_Login_GetPlatformDisplayName");
static_assert(offsetof(FortUIStateWidget_Login_GetPlatformDisplayName, ReturnValue) == 0x000000, "Member 'FortUIStateWidget_Login_GetPlatformDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaChallengeSetDetails.OnChallengeSetEstablished
// 0x0088 (0x0088 - 0x0000)
struct AthenaChallengeSetDetails_OnChallengeSetEstablished final
{
public:
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsComplete;                                       // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaChallengeSetDetails_OnChallengeSetEstablished) == 0x000008, "Wrong alignment on AthenaChallengeSetDetails_OnChallengeSetEstablished");
static_assert(sizeof(AthenaChallengeSetDetails_OnChallengeSetEstablished) == 0x000088, "Wrong size on AthenaChallengeSetDetails_OnChallengeSetEstablished");
static_assert(offsetof(AthenaChallengeSetDetails_OnChallengeSetEstablished, DisplayStyle) == 0x000000, "Member 'AthenaChallengeSetDetails_OnChallengeSetEstablished::DisplayStyle' has a wrong offset!");
static_assert(offsetof(AthenaChallengeSetDetails_OnChallengeSetEstablished, bIsComplete) == 0x000080, "Member 'AthenaChallengeSetDetails_OnChallengeSetEstablished::bIsComplete' has a wrong offset!");

// Function FortniteUI.FortExpeditionOverviewWidget.HandleExpeditionTabButtonCreated
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButton*                          TabButton;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated) == 0x000008, "Wrong alignment on FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated");
static_assert(sizeof(FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated) == 0x000010, "Wrong size on FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated");
static_assert(offsetof(FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated, TabNameID) == 0x000000, "Member 'FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated::TabNameID' has a wrong offset!");
static_assert(offsetof(FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated, TabButton) == 0x000008, "Member 'FortExpeditionOverviewWidget_HandleExpeditionTabButtonCreated::TabButton' has a wrong offset!");

// Function FortniteUI.FortExpeditionOverviewWidget.HandleExpeditionTabSelected
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionOverviewWidget_HandleExpeditionTabSelected final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionOverviewWidget_HandleExpeditionTabSelected) == 0x000004, "Wrong alignment on FortExpeditionOverviewWidget_HandleExpeditionTabSelected");
static_assert(sizeof(FortExpeditionOverviewWidget_HandleExpeditionTabSelected) == 0x000008, "Wrong size on FortExpeditionOverviewWidget_HandleExpeditionTabSelected");
static_assert(offsetof(FortExpeditionOverviewWidget_HandleExpeditionTabSelected, TabNameID) == 0x000000, "Member 'FortExpeditionOverviewWidget_HandleExpeditionTabSelected::TabNameID' has a wrong offset!");

// Function FortniteUI.FortExpeditionOverviewWidget.OnExpeditionTabSelected
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionOverviewWidget_OnExpeditionTabSelected final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionOverviewWidget_OnExpeditionTabSelected) == 0x000004, "Wrong alignment on FortExpeditionOverviewWidget_OnExpeditionTabSelected");
static_assert(sizeof(FortExpeditionOverviewWidget_OnExpeditionTabSelected) == 0x000008, "Wrong size on FortExpeditionOverviewWidget_OnExpeditionTabSelected");
static_assert(offsetof(FortExpeditionOverviewWidget_OnExpeditionTabSelected, TabNameID) == 0x000000, "Member 'FortExpeditionOverviewWidget_OnExpeditionTabSelected::TabNameID' has a wrong offset!");

// Function FortniteUI.FortContentControls.HandleConfirmPinChanged
// 0x0018 (0x0018 - 0x0000)
struct FortContentControls_HandleConfirmPinChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentControls_HandleConfirmPinChanged) == 0x000008, "Wrong alignment on FortContentControls_HandleConfirmPinChanged");
static_assert(sizeof(FortContentControls_HandleConfirmPinChanged) == 0x000018, "Wrong size on FortContentControls_HandleConfirmPinChanged");
static_assert(offsetof(FortContentControls_HandleConfirmPinChanged, InText) == 0x000000, "Member 'FortContentControls_HandleConfirmPinChanged::InText' has a wrong offset!");

// Function FortniteUI.FortContentControls.HandleConfirmPinCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortContentControls_HandleConfirmPinCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitInfo;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortContentControls_HandleConfirmPinCommitted) == 0x000008, "Wrong alignment on FortContentControls_HandleConfirmPinCommitted");
static_assert(sizeof(FortContentControls_HandleConfirmPinCommitted) == 0x000020, "Wrong size on FortContentControls_HandleConfirmPinCommitted");
static_assert(offsetof(FortContentControls_HandleConfirmPinCommitted, InText) == 0x000000, "Member 'FortContentControls_HandleConfirmPinCommitted::InText' has a wrong offset!");
static_assert(offsetof(FortContentControls_HandleConfirmPinCommitted, CommitInfo) == 0x000018, "Member 'FortContentControls_HandleConfirmPinCommitted::CommitInfo' has a wrong offset!");

// Function FortniteUI.FortContentControls.HandleSetupPinChanged
// 0x0018 (0x0018 - 0x0000)
struct FortContentControls_HandleSetupPinChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentControls_HandleSetupPinChanged) == 0x000008, "Wrong alignment on FortContentControls_HandleSetupPinChanged");
static_assert(sizeof(FortContentControls_HandleSetupPinChanged) == 0x000018, "Wrong size on FortContentControls_HandleSetupPinChanged");
static_assert(offsetof(FortContentControls_HandleSetupPinChanged, InText) == 0x000000, "Member 'FortContentControls_HandleSetupPinChanged::InText' has a wrong offset!");

// Function FortniteUI.FortContentControls.HandleSetupPinCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortContentControls_HandleSetupPinCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitInfo;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortContentControls_HandleSetupPinCommitted) == 0x000008, "Wrong alignment on FortContentControls_HandleSetupPinCommitted");
static_assert(sizeof(FortContentControls_HandleSetupPinCommitted) == 0x000020, "Wrong size on FortContentControls_HandleSetupPinCommitted");
static_assert(offsetof(FortContentControls_HandleSetupPinCommitted, InText) == 0x000000, "Member 'FortContentControls_HandleSetupPinCommitted::InText' has a wrong offset!");
static_assert(offsetof(FortContentControls_HandleSetupPinCommitted, CommitInfo) == 0x000018, "Member 'FortContentControls_HandleSetupPinCommitted::CommitInfo' has a wrong offset!");

// Function FortniteUI.FortContentControls.HandleVerificationPinChanged
// 0x0018 (0x0018 - 0x0000)
struct FortContentControls_HandleVerificationPinChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentControls_HandleVerificationPinChanged) == 0x000008, "Wrong alignment on FortContentControls_HandleVerificationPinChanged");
static_assert(sizeof(FortContentControls_HandleVerificationPinChanged) == 0x000018, "Wrong size on FortContentControls_HandleVerificationPinChanged");
static_assert(offsetof(FortContentControls_HandleVerificationPinChanged, InText) == 0x000000, "Member 'FortContentControls_HandleVerificationPinChanged::InText' has a wrong offset!");

// Function FortniteUI.FortContentControls.HandleVerificationPinCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortContentControls_HandleVerificationPinCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitInfo;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortContentControls_HandleVerificationPinCommitted) == 0x000008, "Wrong alignment on FortContentControls_HandleVerificationPinCommitted");
static_assert(sizeof(FortContentControls_HandleVerificationPinCommitted) == 0x000020, "Wrong size on FortContentControls_HandleVerificationPinCommitted");
static_assert(offsetof(FortContentControls_HandleVerificationPinCommitted, InText) == 0x000000, "Member 'FortContentControls_HandleVerificationPinCommitted::InText' has a wrong offset!");
static_assert(offsetof(FortContentControls_HandleVerificationPinCommitted, CommitInfo) == 0x000018, "Member 'FortContentControls_HandleVerificationPinCommitted::CommitInfo' has a wrong offset!");

// Function FortniteUI.FortContentControls.IsAccountLinkingRequired
// 0x0001 (0x0001 - 0x0000)
struct FortContentControls_IsAccountLinkingRequired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentControls_IsAccountLinkingRequired) == 0x000001, "Wrong alignment on FortContentControls_IsAccountLinkingRequired");
static_assert(sizeof(FortContentControls_IsAccountLinkingRequired) == 0x000001, "Wrong size on FortContentControls_IsAccountLinkingRequired");
static_assert(offsetof(FortContentControls_IsAccountLinkingRequired, ReturnValue) == 0x000000, "Member 'FortContentControls_IsAccountLinkingRequired::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortContentControls.OnBeginContentControlsFlow
// 0x0001 (0x0001 - 0x0000)
struct FortContentControls_OnBeginContentControlsFlow final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentControls_OnBeginContentControlsFlow) == 0x000001, "Wrong alignment on FortContentControls_OnBeginContentControlsFlow");
static_assert(sizeof(FortContentControls_OnBeginContentControlsFlow) == 0x000001, "Wrong size on FortContentControls_OnBeginContentControlsFlow");
static_assert(offsetof(FortContentControls_OnBeginContentControlsFlow, Enabled) == 0x000000, "Member 'FortContentControls_OnBeginContentControlsFlow::Enabled' has a wrong offset!");

// Function FortniteUI.FortContentControls.OnEmailSetupFinished
// 0x0001 (0x0001 - 0x0000)
struct FortContentControls_OnEmailSetupFinished final
{
public:
	bool                                          bSuccessful;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentControls_OnEmailSetupFinished) == 0x000001, "Wrong alignment on FortContentControls_OnEmailSetupFinished");
static_assert(sizeof(FortContentControls_OnEmailSetupFinished) == 0x000001, "Wrong size on FortContentControls_OnEmailSetupFinished");
static_assert(offsetof(FortContentControls_OnEmailSetupFinished, bSuccessful) == 0x000000, "Member 'FortContentControls_OnEmailSetupFinished::bSuccessful' has a wrong offset!");

// Function FortniteUI.FortContentControls.OnPinRegistrationComplete
// 0x0001 (0x0001 - 0x0000)
struct FortContentControls_OnPinRegistrationComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentControls_OnPinRegistrationComplete) == 0x000001, "Wrong alignment on FortContentControls_OnPinRegistrationComplete");
static_assert(sizeof(FortContentControls_OnPinRegistrationComplete) == 0x000001, "Wrong size on FortContentControls_OnPinRegistrationComplete");
static_assert(offsetof(FortContentControls_OnPinRegistrationComplete, bSuccess) == 0x000000, "Member 'FortContentControls_OnPinRegistrationComplete::bSuccess' has a wrong offset!");

// Function FortniteUI.FortContentControls.OnPinVerificationComplete
// 0x0001 (0x0001 - 0x0000)
struct FortContentControls_OnPinVerificationComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentControls_OnPinVerificationComplete) == 0x000001, "Wrong alignment on FortContentControls_OnPinVerificationComplete");
static_assert(sizeof(FortContentControls_OnPinVerificationComplete) == 0x000001, "Wrong size on FortContentControls_OnPinVerificationComplete");
static_assert(offsetof(FortContentControls_OnPinVerificationComplete, bSuccess) == 0x000000, "Member 'FortContentControls_OnPinVerificationComplete::bSuccess' has a wrong offset!");

// Function FortniteUI.FortContentControls.OnSettingFocused
// 0x0001 (0x0001 - 0x0000)
struct FortContentControls_OnSettingFocused final
{
public:
	EFortContentControlsSettingType               Setting;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentControls_OnSettingFocused) == 0x000001, "Wrong alignment on FortContentControls_OnSettingFocused");
static_assert(sizeof(FortContentControls_OnSettingFocused) == 0x000001, "Wrong size on FortContentControls_OnSettingFocused");
static_assert(offsetof(FortContentControls_OnSettingFocused, Setting) == 0x000000, "Member 'FortContentControls_OnSettingFocused::Setting' has a wrong offset!");

// Function FortniteUI.AthenaMinimalChallengeInfoEntry.OnChallengeInfoSet
// 0x0001 (0x0001 - 0x0000)
struct AthenaMinimalChallengeInfoEntry_OnChallengeInfoSet final
{
public:
	bool                                          bIsInProgress;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMinimalChallengeInfoEntry_OnChallengeInfoSet) == 0x000001, "Wrong alignment on AthenaMinimalChallengeInfoEntry_OnChallengeInfoSet");
static_assert(sizeof(AthenaMinimalChallengeInfoEntry_OnChallengeInfoSet) == 0x000001, "Wrong size on AthenaMinimalChallengeInfoEntry_OnChallengeInfoSet");
static_assert(offsetof(AthenaMinimalChallengeInfoEntry_OnChallengeInfoSet, bIsInProgress) == 0x000000, "Member 'AthenaMinimalChallengeInfoEntry_OnChallengeInfoSet::bIsInProgress' has a wrong offset!");

// Function FortniteUI.FortTextStyleList.GetTextStyles
// 0x0010 (0x0010 - 0x0000)
struct FortTextStyleList_GetTextStyles final
{
public:
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTextStyleList_GetTextStyles) == 0x000008, "Wrong alignment on FortTextStyleList_GetTextStyles");
static_assert(sizeof(FortTextStyleList_GetTextStyles) == 0x000010, "Wrong size on FortTextStyleList_GetTextStyles");
static_assert(offsetof(FortTextStyleList_GetTextStyles, ReturnValue) == 0x000000, "Member 'FortTextStyleList_GetTextStyles::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativeAdTile.PopulateAdTile
// 0x0068 (0x0068 - 0x0000)
struct FortCreativeAdTile_PopulateAdTile final
{
public:
	struct FCreativeAdData                        Entry;                                             // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeAdTile_PopulateAdTile) == 0x000008, "Wrong alignment on FortCreativeAdTile_PopulateAdTile");
static_assert(sizeof(FortCreativeAdTile_PopulateAdTile) == 0x000068, "Wrong size on FortCreativeAdTile_PopulateAdTile");
static_assert(offsetof(FortCreativeAdTile_PopulateAdTile, Entry) == 0x000000, "Member 'FortCreativeAdTile_PopulateAdTile::Entry' has a wrong offset!");

// Function FortniteUI.FortFeatureUnlockWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct FortFeatureUnlockWidget_SetData final
{
public:
	class FString                                 ItemTemplateID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_SetData) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_SetData");
static_assert(sizeof(FortFeatureUnlockWidget_SetData) == 0x000010, "Wrong size on FortFeatureUnlockWidget_SetData");
static_assert(offsetof(FortFeatureUnlockWidget_SetData, ItemTemplateID) == 0x000000, "Member 'FortFeatureUnlockWidget_SetData::ItemTemplateID' has a wrong offset!");

// Function FortniteUI.FortFeatureUnlockWidget.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct FortFeatureUnlockWidget_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_GetDescription) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_GetDescription");
static_assert(sizeof(FortFeatureUnlockWidget_GetDescription) == 0x000018, "Wrong size on FortFeatureUnlockWidget_GetDescription");
static_assert(offsetof(FortFeatureUnlockWidget_GetDescription, ReturnValue) == 0x000000, "Member 'FortFeatureUnlockWidget_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFeatureUnlockWidget.GetLargeIcon
// 0x0028 (0x0028 - 0x0000)
struct FortFeatureUnlockWidget_GetLargeIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_GetLargeIcon) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_GetLargeIcon");
static_assert(sizeof(FortFeatureUnlockWidget_GetLargeIcon) == 0x000028, "Wrong size on FortFeatureUnlockWidget_GetLargeIcon");
static_assert(offsetof(FortFeatureUnlockWidget_GetLargeIcon, ReturnValue) == 0x000000, "Member 'FortFeatureUnlockWidget_GetLargeIcon::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFeatureUnlockWidget.GetSmallIcon
// 0x0028 (0x0028 - 0x0000)
struct FortFeatureUnlockWidget_GetSmallIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_GetSmallIcon) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_GetSmallIcon");
static_assert(sizeof(FortFeatureUnlockWidget_GetSmallIcon) == 0x000028, "Wrong size on FortFeatureUnlockWidget_GetSmallIcon");
static_assert(offsetof(FortFeatureUnlockWidget_GetSmallIcon, ReturnValue) == 0x000000, "Member 'FortFeatureUnlockWidget_GetSmallIcon::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFeatureUnlockWidget.GetTitle
// 0x0018 (0x0018 - 0x0000)
struct FortFeatureUnlockWidget_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_GetTitle) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_GetTitle");
static_assert(sizeof(FortFeatureUnlockWidget_GetTitle) == 0x000018, "Wrong size on FortFeatureUnlockWidget_GetTitle");
static_assert(offsetof(FortFeatureUnlockWidget_GetTitle, ReturnValue) == 0x000000, "Member 'FortFeatureUnlockWidget_GetTitle::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFeatureUnlockWidget.GetVideo
// 0x0008 (0x0008 - 0x0000)
struct FortFeatureUnlockWidget_GetVideo final
{
public:
	class UMediaSource*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeatureUnlockWidget_GetVideo) == 0x000008, "Wrong alignment on FortFeatureUnlockWidget_GetVideo");
static_assert(sizeof(FortFeatureUnlockWidget_GetVideo) == 0x000008, "Wrong size on FortFeatureUnlockWidget_GetVideo");
static_assert(offsetof(FortFeatureUnlockWidget_GetVideo, ReturnValue) == 0x000000, "Member 'FortFeatureUnlockWidget_GetVideo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUINotificationQueue.GetNextNotification
// 0x0008 (0x0008 - 0x0000)
struct FortUINotificationQueue_GetNextNotification final
{
public:
	class UFortUINotification*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINotificationQueue_GetNextNotification) == 0x000008, "Wrong alignment on FortUINotificationQueue_GetNextNotification");
static_assert(sizeof(FortUINotificationQueue_GetNextNotification) == 0x000008, "Wrong size on FortUINotificationQueue_GetNextNotification");
static_assert(offsetof(FortUINotificationQueue_GetNextNotification, ReturnValue) == 0x000000, "Member 'FortUINotificationQueue_GetNextNotification::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUINotificationQueue.QueueNotification
// 0x0010 (0x0010 - 0x0000)
struct FortUINotificationQueue_QueueNotification final
{
public:
	class UFortUINotification*                    Notification;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowImmediately;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUINotificationQueue_QueueNotification) == 0x000008, "Wrong alignment on FortUINotificationQueue_QueueNotification");
static_assert(sizeof(FortUINotificationQueue_QueueNotification) == 0x000010, "Wrong size on FortUINotificationQueue_QueueNotification");
static_assert(offsetof(FortUINotificationQueue_QueueNotification, Notification) == 0x000000, "Member 'FortUINotificationQueue_QueueNotification::Notification' has a wrong offset!");
static_assert(offsetof(FortUINotificationQueue_QueueNotification, bShowImmediately) == 0x000008, "Member 'FortUINotificationQueue_QueueNotification::bShowImmediately' has a wrong offset!");

// Function FortniteUI.FortUINotificationQueue.RegisterToReceiveNotifications
// 0x0010 (0x0010 - 0x0000)
struct FortUINotificationQueue_RegisterToReceiveNotifications final
{
public:
	TDelegate<void()>                             NotificationDelegate;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINotificationQueue_RegisterToReceiveNotifications) == 0x000004, "Wrong alignment on FortUINotificationQueue_RegisterToReceiveNotifications");
static_assert(sizeof(FortUINotificationQueue_RegisterToReceiveNotifications) == 0x000010, "Wrong size on FortUINotificationQueue_RegisterToReceiveNotifications");
static_assert(offsetof(FortUINotificationQueue_RegisterToReceiveNotifications, NotificationDelegate) == 0x000000, "Member 'FortUINotificationQueue_RegisterToReceiveNotifications::NotificationDelegate' has a wrong offset!");

// Function FortniteUI.FortUINotificationQueue.RemoveNotification
// 0x0008 (0x0008 - 0x0000)
struct FortUINotificationQueue_RemoveNotification final
{
public:
	const class UFortUINotification*              InNotificationDescription;                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINotificationQueue_RemoveNotification) == 0x000008, "Wrong alignment on FortUINotificationQueue_RemoveNotification");
static_assert(sizeof(FortUINotificationQueue_RemoveNotification) == 0x000008, "Wrong size on FortUINotificationQueue_RemoveNotification");
static_assert(offsetof(FortUINotificationQueue_RemoveNotification, InNotificationDescription) == 0x000000, "Member 'FortUINotificationQueue_RemoveNotification::InNotificationDescription' has a wrong offset!");

// Function FortniteUI.FortUINotificationQueue.CanNotificationBeQueued
// 0x0002 (0x0002 - 0x0000)
struct FortUINotificationQueue_CanNotificationBeQueued final
{
public:
	EFortNotificationPriority                     Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINotificationQueue_CanNotificationBeQueued) == 0x000001, "Wrong alignment on FortUINotificationQueue_CanNotificationBeQueued");
static_assert(sizeof(FortUINotificationQueue_CanNotificationBeQueued) == 0x000002, "Wrong size on FortUINotificationQueue_CanNotificationBeQueued");
static_assert(offsetof(FortUINotificationQueue_CanNotificationBeQueued, Priority) == 0x000000, "Member 'FortUINotificationQueue_CanNotificationBeQueued::Priority' has a wrong offset!");
static_assert(offsetof(FortUINotificationQueue_CanNotificationBeQueued, ReturnValue) == 0x000001, "Member 'FortUINotificationQueue_CanNotificationBeQueued::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaCompassBase.BindToModel
// 0x0008 (0x0008 - 0x0000)
struct AthenaCompassBase_BindToModel final
{
public:
	class UAthenaPlayerViewModel*                 ViewModel;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCompassBase_BindToModel) == 0x000008, "Wrong alignment on AthenaCompassBase_BindToModel");
static_assert(sizeof(AthenaCompassBase_BindToModel) == 0x000008, "Wrong size on AthenaCompassBase_BindToModel");
static_assert(offsetof(AthenaCompassBase_BindToModel, ViewModel) == 0x000000, "Member 'AthenaCompassBase_BindToModel::ViewModel' has a wrong offset!");

// Function FortniteUI.AthenaCountdownWidgetBase.HandleCountdownStarted
// 0x0004 (0x0004 - 0x0000)
struct AthenaCountdownWidgetBase_HandleCountdownStarted final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCountdownWidgetBase_HandleCountdownStarted) == 0x000004, "Wrong alignment on AthenaCountdownWidgetBase_HandleCountdownStarted");
static_assert(sizeof(AthenaCountdownWidgetBase_HandleCountdownStarted) == 0x000004, "Wrong size on AthenaCountdownWidgetBase_HandleCountdownStarted");
static_assert(offsetof(AthenaCountdownWidgetBase_HandleCountdownStarted, TimeRemaining) == 0x000000, "Member 'AthenaCountdownWidgetBase_HandleCountdownStarted::TimeRemaining' has a wrong offset!");

// Function FortniteUI.AthenaCountdownWidgetBase.HandleCountdownUpdate
// 0x0004 (0x0004 - 0x0000)
struct AthenaCountdownWidgetBase_HandleCountdownUpdate final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCountdownWidgetBase_HandleCountdownUpdate) == 0x000004, "Wrong alignment on AthenaCountdownWidgetBase_HandleCountdownUpdate");
static_assert(sizeof(AthenaCountdownWidgetBase_HandleCountdownUpdate) == 0x000004, "Wrong size on AthenaCountdownWidgetBase_HandleCountdownUpdate");
static_assert(offsetof(AthenaCountdownWidgetBase_HandleCountdownUpdate, TimeRemaining) == 0x000000, "Member 'AthenaCountdownWidgetBase_HandleCountdownUpdate::TimeRemaining' has a wrong offset!");

// Function FortniteUI.AthenaCountdownWidgetBase.HandleGamePhaseStepChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaCountdownWidgetBase_HandleGamePhaseStepChanged final
{
public:
	EAthenaGamePhaseStep                          Step;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCountdownWidgetBase_HandleGamePhaseStepChanged) == 0x000001, "Wrong alignment on AthenaCountdownWidgetBase_HandleGamePhaseStepChanged");
static_assert(sizeof(AthenaCountdownWidgetBase_HandleGamePhaseStepChanged) == 0x000001, "Wrong size on AthenaCountdownWidgetBase_HandleGamePhaseStepChanged");
static_assert(offsetof(AthenaCountdownWidgetBase_HandleGamePhaseStepChanged, Step) == 0x000000, "Member 'AthenaCountdownWidgetBase_HandleGamePhaseStepChanged::Step' has a wrong offset!");

// Function FortniteUI.AthenaCountdownWidgetBase.OnCountdownStarted
// 0x0020 (0x0020 - 0x0000)
struct AthenaCountdownWidgetBase_OnCountdownStarted final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CountdownIntroText;                                // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCountdownWidgetBase_OnCountdownStarted) == 0x000008, "Wrong alignment on AthenaCountdownWidgetBase_OnCountdownStarted");
static_assert(sizeof(AthenaCountdownWidgetBase_OnCountdownStarted) == 0x000020, "Wrong size on AthenaCountdownWidgetBase_OnCountdownStarted");
static_assert(offsetof(AthenaCountdownWidgetBase_OnCountdownStarted, TimeRemaining) == 0x000000, "Member 'AthenaCountdownWidgetBase_OnCountdownStarted::TimeRemaining' has a wrong offset!");
static_assert(offsetof(AthenaCountdownWidgetBase_OnCountdownStarted, CountdownIntroText) == 0x000008, "Member 'AthenaCountdownWidgetBase_OnCountdownStarted::CountdownIntroText' has a wrong offset!");

// Function FortniteUI.AthenaCountdownWidgetBase.OnCountdownUpdate
// 0x0020 (0x0020 - 0x0000)
struct AthenaCountdownWidgetBase_OnCountdownUpdate final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CountdownUpdateText;                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCountdownWidgetBase_OnCountdownUpdate) == 0x000008, "Wrong alignment on AthenaCountdownWidgetBase_OnCountdownUpdate");
static_assert(sizeof(AthenaCountdownWidgetBase_OnCountdownUpdate) == 0x000020, "Wrong size on AthenaCountdownWidgetBase_OnCountdownUpdate");
static_assert(offsetof(AthenaCountdownWidgetBase_OnCountdownUpdate, TimeRemaining) == 0x000000, "Member 'AthenaCountdownWidgetBase_OnCountdownUpdate::TimeRemaining' has a wrong offset!");
static_assert(offsetof(AthenaCountdownWidgetBase_OnCountdownUpdate, CountdownUpdateText) == 0x000008, "Member 'AthenaCountdownWidgetBase_OnCountdownUpdate::CountdownUpdateText' has a wrong offset!");

// Function FortniteUI.AthenaCountdownWidgetBase.OnDisplayWarningMessage
// 0x0030 (0x0030 - 0x0000)
struct AthenaCountdownWidgetBase_OnDisplayWarningMessage final
{
public:
	class FText                                   FirstLineText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   SecondLineText;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCountdownWidgetBase_OnDisplayWarningMessage) == 0x000008, "Wrong alignment on AthenaCountdownWidgetBase_OnDisplayWarningMessage");
static_assert(sizeof(AthenaCountdownWidgetBase_OnDisplayWarningMessage) == 0x000030, "Wrong size on AthenaCountdownWidgetBase_OnDisplayWarningMessage");
static_assert(offsetof(AthenaCountdownWidgetBase_OnDisplayWarningMessage, FirstLineText) == 0x000000, "Member 'AthenaCountdownWidgetBase_OnDisplayWarningMessage::FirstLineText' has a wrong offset!");
static_assert(offsetof(AthenaCountdownWidgetBase_OnDisplayWarningMessage, SecondLineText) == 0x000018, "Member 'AthenaCountdownWidgetBase_OnDisplayWarningMessage::SecondLineText' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.AttemptToOpenBattlePassTabForNewSeason
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_AttemptToOpenBattlePassTabForNewSeason final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_AttemptToOpenBattlePassTabForNewSeason) == 0x000001, "Wrong alignment on FortUIStateWidget_CampaignFrontend_AttemptToOpenBattlePassTabForNewSeason");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_AttemptToOpenBattlePassTabForNewSeason) == 0x000001, "Wrong size on FortUIStateWidget_CampaignFrontend_AttemptToOpenBattlePassTabForNewSeason");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_AttemptToOpenBattlePassTabForNewSeason, ReturnValue) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_AttemptToOpenBattlePassTabForNewSeason::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.CheckBanStatus
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_CheckBanStatus final
{
public:
	bool                                          bBanned;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_CheckBanStatus) == 0x000001, "Wrong alignment on FortUIStateWidget_CampaignFrontend_CheckBanStatus");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_CheckBanStatus) == 0x000001, "Wrong size on FortUIStateWidget_CampaignFrontend_CheckBanStatus");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_CheckBanStatus, bBanned) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_CheckBanStatus::bBanned' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.CheckForGifts
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_CheckForGifts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_CheckForGifts) == 0x000001, "Wrong alignment on FortUIStateWidget_CampaignFrontend_CheckForGifts");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_CheckForGifts) == 0x000001, "Wrong size on FortUIStateWidget_CampaignFrontend_CheckForGifts");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_CheckForGifts, ReturnValue) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_CheckForGifts::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.HandleGiftBoxRemoved
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_HandleGiftBoxRemoved final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_HandleGiftBoxRemoved) == 0x000001, "Wrong alignment on FortUIStateWidget_CampaignFrontend_HandleGiftBoxRemoved");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_HandleGiftBoxRemoved) == 0x000001, "Wrong size on FortUIStateWidget_CampaignFrontend_HandleGiftBoxRemoved");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_HandleGiftBoxRemoved, bSuccess) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_HandleGiftBoxRemoved::bSuccess' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.IsOkToCheckForGifts
// 0x0002 (0x0002 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_IsOkToCheckForGifts final
{
public:
	bool                                          bTemporary;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_IsOkToCheckForGifts) == 0x000001, "Wrong alignment on FortUIStateWidget_CampaignFrontend_IsOkToCheckForGifts");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_IsOkToCheckForGifts) == 0x000002, "Wrong size on FortUIStateWidget_CampaignFrontend_IsOkToCheckForGifts");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_IsOkToCheckForGifts, bTemporary) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_IsOkToCheckForGifts::bTemporary' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_IsOkToCheckForGifts, ReturnValue) == 0x000001, "Member 'FortUIStateWidget_CampaignFrontend_IsOkToCheckForGifts::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.MarkTrailerMovieSeenByIndex
// 0x0004 (0x0004 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_MarkTrailerMovieSeenByIndex final
{
public:
	int32                                         IndexOfMovieToMarkSeen;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_MarkTrailerMovieSeenByIndex) == 0x000004, "Wrong alignment on FortUIStateWidget_CampaignFrontend_MarkTrailerMovieSeenByIndex");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_MarkTrailerMovieSeenByIndex) == 0x000004, "Wrong size on FortUIStateWidget_CampaignFrontend_MarkTrailerMovieSeenByIndex");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_MarkTrailerMovieSeenByIndex, IndexOfMovieToMarkSeen) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_MarkTrailerMovieSeenByIndex::IndexOfMovieToMarkSeen' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.OnMatchmakingV2Changed
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_OnMatchmakingV2Changed final
{
public:
	bool                                          MatchmakingActive;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_OnMatchmakingV2Changed) == 0x000001, "Wrong alignment on FortUIStateWidget_CampaignFrontend_OnMatchmakingV2Changed");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_OnMatchmakingV2Changed) == 0x000001, "Wrong size on FortUIStateWidget_CampaignFrontend_OnMatchmakingV2Changed");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_OnMatchmakingV2Changed, MatchmakingActive) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_OnMatchmakingV2Changed::MatchmakingActive' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.SetVideoActive
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_SetVideoActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_SetVideoActive) == 0x000001, "Wrong alignment on FortUIStateWidget_CampaignFrontend_SetVideoActive");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_SetVideoActive) == 0x000001, "Wrong size on FortUIStateWidget_CampaignFrontend_SetVideoActive");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_SetVideoActive, bActive) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_SetVideoActive::bActive' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.ShowInitialCrossplayDialog
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_ShowInitialCrossplayDialog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_ShowInitialCrossplayDialog) == 0x000001, "Wrong alignment on FortUIStateWidget_CampaignFrontend_ShowInitialCrossplayDialog");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_ShowInitialCrossplayDialog) == 0x000001, "Wrong size on FortUIStateWidget_CampaignFrontend_ShowInitialCrossplayDialog");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_ShowInitialCrossplayDialog, ReturnValue) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_ShowInitialCrossplayDialog::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.TryMFAModal
// 0x0008 (0x0008 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_TryMFAModal final
{
public:
	TSubclassOf<class UEnableMultiFactorModal>    BPClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_TryMFAModal) == 0x000008, "Wrong alignment on FortUIStateWidget_CampaignFrontend_TryMFAModal");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_TryMFAModal) == 0x000008, "Wrong size on FortUIStateWidget_CampaignFrontend_TryMFAModal");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_TryMFAModal, BPClass) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_TryMFAModal::BPClass' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.GetTrailerMovieIndexThatNeedsToBeShownForQuest
// 0x0008 (0x0008 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_GetTrailerMovieIndexThatNeedsToBeShownForQuest final
{
public:
	int32                                         IndexOfMovieToShow;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_GetTrailerMovieIndexThatNeedsToBeShownForQuest) == 0x000004, "Wrong alignment on FortUIStateWidget_CampaignFrontend_GetTrailerMovieIndexThatNeedsToBeShownForQuest");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_GetTrailerMovieIndexThatNeedsToBeShownForQuest) == 0x000008, "Wrong size on FortUIStateWidget_CampaignFrontend_GetTrailerMovieIndexThatNeedsToBeShownForQuest");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_GetTrailerMovieIndexThatNeedsToBeShownForQuest, IndexOfMovieToShow) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_GetTrailerMovieIndexThatNeedsToBeShownForQuest::IndexOfMovieToShow' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_GetTrailerMovieIndexThatNeedsToBeShownForQuest, ReturnValue) == 0x000004, "Member 'FortUIStateWidget_CampaignFrontend_GetTrailerMovieIndexThatNeedsToBeShownForQuest::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_CampaignFrontend.NeedSeeTrailerMovie
// 0x0002 (0x0002 - 0x0000)
struct FortUIStateWidget_CampaignFrontend_NeedSeeTrailerMovie final
{
public:
	bool                                          bAllowUpdate;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_CampaignFrontend_NeedSeeTrailerMovie) == 0x000001, "Wrong alignment on FortUIStateWidget_CampaignFrontend_NeedSeeTrailerMovie");
static_assert(sizeof(FortUIStateWidget_CampaignFrontend_NeedSeeTrailerMovie) == 0x000002, "Wrong size on FortUIStateWidget_CampaignFrontend_NeedSeeTrailerMovie");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_NeedSeeTrailerMovie, bAllowUpdate) == 0x000000, "Member 'FortUIStateWidget_CampaignFrontend_NeedSeeTrailerMovie::bAllowUpdate' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_CampaignFrontend_NeedSeeTrailerMovie, ReturnValue) == 0x000001, "Member 'FortUIStateWidget_CampaignFrontend_NeedSeeTrailerMovie::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaCreativeItemTileButton.MakeFortItemEntryObjectWrapper
// 0x0130 (0x0130 - 0x0000)
struct AthenaCreativeItemTileButton_MakeFortItemEntryObjectWrapper final
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemEntry                         InItemEntry;                                       // 0x0008(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAthenaCreativeItemEntryObjectWrapper*  ReturnValue;                                       // 0x0128(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCreativeItemTileButton_MakeFortItemEntryObjectWrapper) == 0x000008, "Wrong alignment on AthenaCreativeItemTileButton_MakeFortItemEntryObjectWrapper");
static_assert(sizeof(AthenaCreativeItemTileButton_MakeFortItemEntryObjectWrapper) == 0x000130, "Wrong size on AthenaCreativeItemTileButton_MakeFortItemEntryObjectWrapper");
static_assert(offsetof(AthenaCreativeItemTileButton_MakeFortItemEntryObjectWrapper, Target) == 0x000000, "Member 'AthenaCreativeItemTileButton_MakeFortItemEntryObjectWrapper::Target' has a wrong offset!");
static_assert(offsetof(AthenaCreativeItemTileButton_MakeFortItemEntryObjectWrapper, InItemEntry) == 0x000008, "Member 'AthenaCreativeItemTileButton_MakeFortItemEntryObjectWrapper::InItemEntry' has a wrong offset!");
static_assert(offsetof(AthenaCreativeItemTileButton_MakeFortItemEntryObjectWrapper, ReturnValue) == 0x000128, "Member 'AthenaCreativeItemTileButton_MakeFortItemEntryObjectWrapper::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaCreativeItemTileButton.CompareToItemEntry
// 0x0128 (0x0128 - 0x0000)
struct AthenaCreativeItemTileButton_CompareToItemEntry final
{
public:
	struct FFortItemEntry                         InItemEntry;                                       // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaCreativeItemTileButton_CompareToItemEntry) == 0x000008, "Wrong alignment on AthenaCreativeItemTileButton_CompareToItemEntry");
static_assert(sizeof(AthenaCreativeItemTileButton_CompareToItemEntry) == 0x000128, "Wrong size on AthenaCreativeItemTileButton_CompareToItemEntry");
static_assert(offsetof(AthenaCreativeItemTileButton_CompareToItemEntry, InItemEntry) == 0x000000, "Member 'AthenaCreativeItemTileButton_CompareToItemEntry::InItemEntry' has a wrong offset!");
static_assert(offsetof(AthenaCreativeItemTileButton_CompareToItemEntry, ReturnValue) == 0x000120, "Member 'AthenaCreativeItemTileButton_CompareToItemEntry::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaCreativeItemTileButton.GetItemTypeCount
// 0x0004 (0x0004 - 0x0000)
struct AthenaCreativeItemTileButton_GetItemTypeCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCreativeItemTileButton_GetItemTypeCount) == 0x000004, "Wrong alignment on AthenaCreativeItemTileButton_GetItemTypeCount");
static_assert(sizeof(AthenaCreativeItemTileButton_GetItemTypeCount) == 0x000004, "Wrong size on AthenaCreativeItemTileButton_GetItemTypeCount");
static_assert(offsetof(AthenaCreativeItemTileButton_GetItemTypeCount, ReturnValue) == 0x000000, "Member 'AthenaCreativeItemTileButton_GetItemTypeCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaCreativeItemTileButton.OnEntryClick
// 0x0008 (0x0008 - 0x0000)
struct AthenaCreativeItemTileButton_OnEntryClick final
{
public:
	class UAthenaCreativeItemTileButton*          Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCreativeItemTileButton_OnEntryClick) == 0x000008, "Wrong alignment on AthenaCreativeItemTileButton_OnEntryClick");
static_assert(sizeof(AthenaCreativeItemTileButton_OnEntryClick) == 0x000008, "Wrong size on AthenaCreativeItemTileButton_OnEntryClick");
static_assert(offsetof(AthenaCreativeItemTileButton_OnEntryClick, Entry) == 0x000000, "Member 'AthenaCreativeItemTileButton_OnEntryClick::Entry' has a wrong offset!");

// Function FortniteUI.FortCreativeItemListPanelData.GetCreativeItemListPanelData
// 0x0028 (0x0028 - 0x0000)
struct FortCreativeItemListPanelData_GetCreativeItemListPanelData final
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortCreativeItemListPanelData> PanelDataClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             InItemListSource;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             InItemListCategorySource;                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortCreativeItemListPanelData*         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeItemListPanelData_GetCreativeItemListPanelData) == 0x000008, "Wrong alignment on FortCreativeItemListPanelData_GetCreativeItemListPanelData");
static_assert(sizeof(FortCreativeItemListPanelData_GetCreativeItemListPanelData) == 0x000028, "Wrong size on FortCreativeItemListPanelData_GetCreativeItemListPanelData");
static_assert(offsetof(FortCreativeItemListPanelData_GetCreativeItemListPanelData, Target) == 0x000000, "Member 'FortCreativeItemListPanelData_GetCreativeItemListPanelData::Target' has a wrong offset!");
static_assert(offsetof(FortCreativeItemListPanelData_GetCreativeItemListPanelData, PanelDataClass) == 0x000008, "Member 'FortCreativeItemListPanelData_GetCreativeItemListPanelData::PanelDataClass' has a wrong offset!");
static_assert(offsetof(FortCreativeItemListPanelData_GetCreativeItemListPanelData, InItemListSource) == 0x000010, "Member 'FortCreativeItemListPanelData_GetCreativeItemListPanelData::InItemListSource' has a wrong offset!");
static_assert(offsetof(FortCreativeItemListPanelData_GetCreativeItemListPanelData, InItemListCategorySource) == 0x000018, "Member 'FortCreativeItemListPanelData_GetCreativeItemListPanelData::InItemListCategorySource' has a wrong offset!");
static_assert(offsetof(FortCreativeItemListPanelData_GetCreativeItemListPanelData, ReturnValue) == 0x000020, "Member 'FortCreativeItemListPanelData_GetCreativeItemListPanelData::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativeItemListPanelData.LoadItems
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeItemListPanelData_LoadItems final
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeItemListPanelData_LoadItems) == 0x000008, "Wrong alignment on FortCreativeItemListPanelData_LoadItems");
static_assert(sizeof(FortCreativeItemListPanelData_LoadItems) == 0x000008, "Wrong size on FortCreativeItemListPanelData_LoadItems");
static_assert(offsetof(FortCreativeItemListPanelData_LoadItems, Target) == 0x000000, "Member 'FortCreativeItemListPanelData_LoadItems::Target' has a wrong offset!");

// Function FortniteUI.FortCreativeItemListPanelData.GetInteractionText
// 0x0018 (0x0018 - 0x0000)
struct FortCreativeItemListPanelData_GetInteractionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeItemListPanelData_GetInteractionText) == 0x000008, "Wrong alignment on FortCreativeItemListPanelData_GetInteractionText");
static_assert(sizeof(FortCreativeItemListPanelData_GetInteractionText) == 0x000018, "Wrong size on FortCreativeItemListPanelData_GetInteractionText");
static_assert(offsetof(FortCreativeItemListPanelData_GetInteractionText, ReturnValue) == 0x000000, "Member 'FortCreativeItemListPanelData_GetInteractionText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativeItemListPanelData.GetItemToSpawn
// 0x0128 (0x0128 - 0x0000)
struct FortCreativeItemListPanelData_GetItemToSpawn final
{
public:
	class UFortItemDefinition*                    InItemDefinition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemEntry                         ReturnValue;                                       // 0x0008(0x0120)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeItemListPanelData_GetItemToSpawn) == 0x000008, "Wrong alignment on FortCreativeItemListPanelData_GetItemToSpawn");
static_assert(sizeof(FortCreativeItemListPanelData_GetItemToSpawn) == 0x000128, "Wrong size on FortCreativeItemListPanelData_GetItemToSpawn");
static_assert(offsetof(FortCreativeItemListPanelData_GetItemToSpawn, InItemDefinition) == 0x000000, "Member 'FortCreativeItemListPanelData_GetItemToSpawn::InItemDefinition' has a wrong offset!");
static_assert(offsetof(FortCreativeItemListPanelData_GetItemToSpawn, ReturnValue) == 0x000008, "Member 'FortCreativeItemListPanelData_GetItemToSpawn::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemPickerBase.CanItemBeComitted
// 0x0010 (0x0010 - 0x0000)
struct FortItemPickerBase_CanItemBeComitted final
{
public:
	const class UFortItem*                        ItemToCommit;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemPickerBase_CanItemBeComitted) == 0x000008, "Wrong alignment on FortItemPickerBase_CanItemBeComitted");
static_assert(sizeof(FortItemPickerBase_CanItemBeComitted) == 0x000010, "Wrong size on FortItemPickerBase_CanItemBeComitted");
static_assert(offsetof(FortItemPickerBase_CanItemBeComitted, ItemToCommit) == 0x000000, "Member 'FortItemPickerBase_CanItemBeComitted::ItemToCommit' has a wrong offset!");
static_assert(offsetof(FortItemPickerBase_CanItemBeComitted, ReturnValue) == 0x000008, "Member 'FortItemPickerBase_CanItemBeComitted::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemPickerBase.GetListViewInterface
// 0x0010 (0x0010 - 0x0000)
struct FortItemPickerBase_GetListViewInterface final
{
public:
	TScriptInterface<class IFortItemListViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemPickerBase_GetListViewInterface) == 0x000008, "Wrong alignment on FortItemPickerBase_GetListViewInterface");
static_assert(sizeof(FortItemPickerBase_GetListViewInterface) == 0x000010, "Wrong size on FortItemPickerBase_GetListViewInterface");
static_assert(offsetof(FortItemPickerBase_GetListViewInterface, ReturnValue) == 0x000000, "Member 'FortItemPickerBase_GetListViewInterface::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteUI.FortItemPickerBase.OnItemSelectionEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortItemPickerBase_OnItemSelectionEvent__DelegateSignature final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemPickerBase_OnItemSelectionEvent__DelegateSignature) == 0x000008, "Wrong alignment on FortItemPickerBase_OnItemSelectionEvent__DelegateSignature");
static_assert(sizeof(FortItemPickerBase_OnItemSelectionEvent__DelegateSignature) == 0x000008, "Wrong size on FortItemPickerBase_OnItemSelectionEvent__DelegateSignature");
static_assert(offsetof(FortItemPickerBase_OnItemSelectionEvent__DelegateSignature, SelectedItem) == 0x000000, "Member 'FortItemPickerBase_OnItemSelectionEvent__DelegateSignature::SelectedItem' has a wrong offset!");

// Function FortniteUI.FortItemPickerBase.SetSelectedIndex
// 0x0008 (0x0008 - 0x0000)
struct FortItemPickerBase_SetSelectedIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemPickerBase_SetSelectedIndex) == 0x000004, "Wrong alignment on FortItemPickerBase_SetSelectedIndex");
static_assert(sizeof(FortItemPickerBase_SetSelectedIndex) == 0x000008, "Wrong size on FortItemPickerBase_SetSelectedIndex");
static_assert(offsetof(FortItemPickerBase_SetSelectedIndex, Param_Index) == 0x000000, "Member 'FortItemPickerBase_SetSelectedIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(FortItemPickerBase_SetSelectedIndex, ReturnValue) == 0x000004, "Member 'FortItemPickerBase_SetSelectedIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemPickerBase.SetSelectedItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemPickerBase_SetSelectedItem final
{
public:
	const class UFortItem*                        ItemToSelect;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemPickerBase_SetSelectedItem) == 0x000008, "Wrong alignment on FortItemPickerBase_SetSelectedItem");
static_assert(sizeof(FortItemPickerBase_SetSelectedItem) == 0x000008, "Wrong size on FortItemPickerBase_SetSelectedItem");
static_assert(offsetof(FortItemPickerBase_SetSelectedItem, ItemToSelect) == 0x000000, "Member 'FortItemPickerBase_SetSelectedItem::ItemToSelect' has a wrong offset!");

// Function FortniteUI.FortItemPickerBase.TryCommitSelectedItem
// 0x0001 (0x0001 - 0x0000)
struct FortItemPickerBase_TryCommitSelectedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemPickerBase_TryCommitSelectedItem) == 0x000001, "Wrong alignment on FortItemPickerBase_TryCommitSelectedItem");
static_assert(sizeof(FortItemPickerBase_TryCommitSelectedItem) == 0x000001, "Wrong size on FortItemPickerBase_TryCommitSelectedItem");
static_assert(offsetof(FortItemPickerBase_TryCommitSelectedItem, ReturnValue) == 0x000000, "Member 'FortItemPickerBase_TryCommitSelectedItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemPickerBase.GetIndexForItem
// 0x0010 (0x0010 - 0x0000)
struct FortItemPickerBase_GetIndexForItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemPickerBase_GetIndexForItem) == 0x000008, "Wrong alignment on FortItemPickerBase_GetIndexForItem");
static_assert(sizeof(FortItemPickerBase_GetIndexForItem) == 0x000010, "Wrong size on FortItemPickerBase_GetIndexForItem");
static_assert(offsetof(FortItemPickerBase_GetIndexForItem, Item) == 0x000000, "Member 'FortItemPickerBase_GetIndexForItem::Item' has a wrong offset!");
static_assert(offsetof(FortItemPickerBase_GetIndexForItem, ReturnValue) == 0x000008, "Member 'FortItemPickerBase_GetIndexForItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemPickerBase.GetSelectedItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemPickerBase_GetSelectedItem final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemPickerBase_GetSelectedItem) == 0x000008, "Wrong alignment on FortItemPickerBase_GetSelectedItem");
static_assert(sizeof(FortItemPickerBase_GetSelectedItem) == 0x000008, "Wrong size on FortItemPickerBase_GetSelectedItem");
static_assert(offsetof(FortItemPickerBase_GetSelectedItem, ReturnValue) == 0x000000, "Member 'FortItemPickerBase_GetSelectedItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationPicker.BeginCustomizationCategory
// 0x0008 (0x0008 - 0x0000)
struct AthenaCustomizationPicker_BeginCustomizationCategory final
{
public:
	EAthenaCustomizationCategory                  Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubslotToEdit;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationPicker_BeginCustomizationCategory) == 0x000004, "Wrong alignment on AthenaCustomizationPicker_BeginCustomizationCategory");
static_assert(sizeof(AthenaCustomizationPicker_BeginCustomizationCategory) == 0x000008, "Wrong size on AthenaCustomizationPicker_BeginCustomizationCategory");
static_assert(offsetof(AthenaCustomizationPicker_BeginCustomizationCategory, Category) == 0x000000, "Member 'AthenaCustomizationPicker_BeginCustomizationCategory::Category' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationPicker_BeginCustomizationCategory, SubslotToEdit) == 0x000004, "Member 'AthenaCustomizationPicker_BeginCustomizationCategory::SubslotToEdit' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationPicker.HandleFilterTabButtonCreated
// 0x0010 (0x0010 - 0x0000)
struct AthenaCustomizationPicker_HandleFilterTabButtonCreated final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButton*                          TabButton;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationPicker_HandleFilterTabButtonCreated) == 0x000008, "Wrong alignment on AthenaCustomizationPicker_HandleFilterTabButtonCreated");
static_assert(sizeof(AthenaCustomizationPicker_HandleFilterTabButtonCreated) == 0x000010, "Wrong size on AthenaCustomizationPicker_HandleFilterTabButtonCreated");
static_assert(offsetof(AthenaCustomizationPicker_HandleFilterTabButtonCreated, TabNameID) == 0x000000, "Member 'AthenaCustomizationPicker_HandleFilterTabButtonCreated::TabNameID' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationPicker_HandleFilterTabButtonCreated, TabButton) == 0x000008, "Member 'AthenaCustomizationPicker_HandleFilterTabButtonCreated::TabButton' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationPicker.HandleFilterTabSelected
// 0x0008 (0x0008 - 0x0000)
struct AthenaCustomizationPicker_HandleFilterTabSelected final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationPicker_HandleFilterTabSelected) == 0x000004, "Wrong alignment on AthenaCustomizationPicker_HandleFilterTabSelected");
static_assert(sizeof(AthenaCustomizationPicker_HandleFilterTabSelected) == 0x000008, "Wrong size on AthenaCustomizationPicker_HandleFilterTabSelected");
static_assert(offsetof(AthenaCustomizationPicker_HandleFilterTabSelected, TabNameID) == 0x000000, "Member 'AthenaCustomizationPicker_HandleFilterTabSelected::TabNameID' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationPicker.HandleSelectedItemHasChanged
// 0x0003 (0x0003 - 0x0000)
struct AthenaCustomizationPicker_HandleSelectedItemHasChanged final
{
public:
	bool                                          ItemChanged;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AmmoChanged;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IngredientsChanged;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationPicker_HandleSelectedItemHasChanged) == 0x000001, "Wrong alignment on AthenaCustomizationPicker_HandleSelectedItemHasChanged");
static_assert(sizeof(AthenaCustomizationPicker_HandleSelectedItemHasChanged) == 0x000003, "Wrong size on AthenaCustomizationPicker_HandleSelectedItemHasChanged");
static_assert(offsetof(AthenaCustomizationPicker_HandleSelectedItemHasChanged, ItemChanged) == 0x000000, "Member 'AthenaCustomizationPicker_HandleSelectedItemHasChanged::ItemChanged' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationPicker_HandleSelectedItemHasChanged, AmmoChanged) == 0x000001, "Member 'AthenaCustomizationPicker_HandleSelectedItemHasChanged::AmmoChanged' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationPicker_HandleSelectedItemHasChanged, IngredientsChanged) == 0x000002, "Member 'AthenaCustomizationPicker_HandleSelectedItemHasChanged::IngredientsChanged' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationPicker.OnNoItemsAvailableInFilter
// 0x0018 (0x0018 - 0x0000)
struct AthenaCustomizationPicker_OnNoItemsAvailableInFilter final
{
public:
	class FText                                   EmptyDisplayText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationPicker_OnNoItemsAvailableInFilter) == 0x000008, "Wrong alignment on AthenaCustomizationPicker_OnNoItemsAvailableInFilter");
static_assert(sizeof(AthenaCustomizationPicker_OnNoItemsAvailableInFilter) == 0x000018, "Wrong size on AthenaCustomizationPicker_OnNoItemsAvailableInFilter");
static_assert(offsetof(AthenaCustomizationPicker_OnNoItemsAvailableInFilter, EmptyDisplayText) == 0x000000, "Member 'AthenaCustomizationPicker_OnNoItemsAvailableInFilter::EmptyDisplayText' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationPicker.RefreshView
// 0x0002 (0x0002 - 0x0000)
struct AthenaCustomizationPicker_RefreshView final
{
public:
	bool                                          CategoryChanging;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FilterChanged;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationPicker_RefreshView) == 0x000001, "Wrong alignment on AthenaCustomizationPicker_RefreshView");
static_assert(sizeof(AthenaCustomizationPicker_RefreshView) == 0x000002, "Wrong size on AthenaCustomizationPicker_RefreshView");
static_assert(offsetof(AthenaCustomizationPicker_RefreshView, CategoryChanging) == 0x000000, "Member 'AthenaCustomizationPicker_RefreshView::CategoryChanging' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationPicker_RefreshView, FilterChanged) == 0x000001, "Member 'AthenaCustomizationPicker_RefreshView::FilterChanged' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationPicker.SetFilter
// 0x0008 (0x0008 - 0x0000)
struct AthenaCustomizationPicker_SetFilter final
{
public:
	class FName                                   FilterName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationPicker_SetFilter) == 0x000004, "Wrong alignment on AthenaCustomizationPicker_SetFilter");
static_assert(sizeof(AthenaCustomizationPicker_SetFilter) == 0x000008, "Wrong size on AthenaCustomizationPicker_SetFilter");
static_assert(offsetof(AthenaCustomizationPicker_SetFilter, FilterName) == 0x000000, "Member 'AthenaCustomizationPicker_SetFilter::FilterName' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationPicker.GetQualifiedFilterDisplayName
// 0x0020 (0x0020 - 0x0000)
struct AthenaCustomizationPicker_GetQualifiedFilterDisplayName final
{
public:
	EAthenaFilterDisplayType                      InTopFilterDisplaySetting;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationPicker_GetQualifiedFilterDisplayName) == 0x000008, "Wrong alignment on AthenaCustomizationPicker_GetQualifiedFilterDisplayName");
static_assert(sizeof(AthenaCustomizationPicker_GetQualifiedFilterDisplayName) == 0x000020, "Wrong size on AthenaCustomizationPicker_GetQualifiedFilterDisplayName");
static_assert(offsetof(AthenaCustomizationPicker_GetQualifiedFilterDisplayName, InTopFilterDisplaySetting) == 0x000000, "Member 'AthenaCustomizationPicker_GetQualifiedFilterDisplayName::InTopFilterDisplaySetting' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationPicker_GetQualifiedFilterDisplayName, ReturnValue) == 0x000008, "Member 'AthenaCustomizationPicker_GetQualifiedFilterDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTierIndicator.SetBrushSize
// 0x0001 (0x0001 - 0x0000)
struct FortTierIndicator_SetBrushSize final
{
public:
	EFortBrushSize                                Param_BrushSize;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTierIndicator_SetBrushSize) == 0x000001, "Wrong alignment on FortTierIndicator_SetBrushSize");
static_assert(sizeof(FortTierIndicator_SetBrushSize) == 0x000001, "Wrong size on FortTierIndicator_SetBrushSize");
static_assert(offsetof(FortTierIndicator_SetBrushSize, Param_BrushSize) == 0x000000, "Member 'FortTierIndicator_SetBrushSize::Param_BrushSize' has a wrong offset!");

// Function FortniteUI.FortTierIndicator.SetInterPipPadding
// 0x0004 (0x0004 - 0x0000)
struct FortTierIndicator_SetInterPipPadding final
{
public:
	float                                         Param_InterPipPadding;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTierIndicator_SetInterPipPadding) == 0x000004, "Wrong alignment on FortTierIndicator_SetInterPipPadding");
static_assert(sizeof(FortTierIndicator_SetInterPipPadding) == 0x000004, "Wrong size on FortTierIndicator_SetInterPipPadding");
static_assert(offsetof(FortTierIndicator_SetInterPipPadding, Param_InterPipPadding) == 0x000000, "Member 'FortTierIndicator_SetInterPipPadding::Param_InterPipPadding' has a wrong offset!");

// Function FortniteUI.FortTierIndicator.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortTierIndicator_SetItemToRepresent final
{
public:
	class UFortItem*                              Param_ItemToRepresent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTierIndicator_SetItemToRepresent) == 0x000008, "Wrong alignment on FortTierIndicator_SetItemToRepresent");
static_assert(sizeof(FortTierIndicator_SetItemToRepresent) == 0x000008, "Wrong size on FortTierIndicator_SetItemToRepresent");
static_assert(offsetof(FortTierIndicator_SetItemToRepresent, Param_ItemToRepresent) == 0x000000, "Member 'FortTierIndicator_SetItemToRepresent::Param_ItemToRepresent' has a wrong offset!");

// Function FortniteUI.FortTierIndicator.SetPreviewState
// 0x0004 (0x0004 - 0x0000)
struct FortTierIndicator_SetPreviewState final
{
public:
	int32                                         TierIncrease;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTierIndicator_SetPreviewState) == 0x000004, "Wrong alignment on FortTierIndicator_SetPreviewState");
static_assert(sizeof(FortTierIndicator_SetPreviewState) == 0x000004, "Wrong size on FortTierIndicator_SetPreviewState");
static_assert(offsetof(FortTierIndicator_SetPreviewState, TierIncrease) == 0x000000, "Member 'FortTierIndicator_SetPreviewState::TierIncrease' has a wrong offset!");

// Function FortniteUI.FortItemTileButton.OnTileSizeOverrideCheck
// 0x0003 (0x0003 - 0x0000)
struct FortItemTileButton_OnTileSizeOverrideCheck final
{
public:
	EFortItemType                                 TypeIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemCardSize                             SizeIn;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemCardSize                             SizeOut;                                           // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemTileButton_OnTileSizeOverrideCheck) == 0x000001, "Wrong alignment on FortItemTileButton_OnTileSizeOverrideCheck");
static_assert(sizeof(FortItemTileButton_OnTileSizeOverrideCheck) == 0x000003, "Wrong size on FortItemTileButton_OnTileSizeOverrideCheck");
static_assert(offsetof(FortItemTileButton_OnTileSizeOverrideCheck, TypeIn) == 0x000000, "Member 'FortItemTileButton_OnTileSizeOverrideCheck::TypeIn' has a wrong offset!");
static_assert(offsetof(FortItemTileButton_OnTileSizeOverrideCheck, SizeIn) == 0x000001, "Member 'FortItemTileButton_OnTileSizeOverrideCheck::SizeIn' has a wrong offset!");
static_assert(offsetof(FortItemTileButton_OnTileSizeOverrideCheck, SizeOut) == 0x000002, "Member 'FortItemTileButton_OnTileSizeOverrideCheck::SizeOut' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationScreenBase.GetCategoryDisplayName
// 0x0020 (0x0020 - 0x0000)
struct AthenaCustomizationScreenBase_GetCategoryDisplayName final
{
public:
	EAthenaCustomizationCategory                  InCategory;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationScreenBase_GetCategoryDisplayName) == 0x000008, "Wrong alignment on AthenaCustomizationScreenBase_GetCategoryDisplayName");
static_assert(sizeof(AthenaCustomizationScreenBase_GetCategoryDisplayName) == 0x000020, "Wrong size on AthenaCustomizationScreenBase_GetCategoryDisplayName");
static_assert(offsetof(AthenaCustomizationScreenBase_GetCategoryDisplayName, InCategory) == 0x000000, "Member 'AthenaCustomizationScreenBase_GetCategoryDisplayName::InCategory' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationScreenBase_GetCategoryDisplayName, ReturnValue) == 0x000008, "Member 'AthenaCustomizationScreenBase_GetCategoryDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationScreenBase.GetFavoriteItemForCategory
// 0x0010 (0x0010 - 0x0000)
struct AthenaCustomizationScreenBase_GetFavoriteItemForCategory final
{
public:
	EAthenaCustomizationCategory                  CustomizationType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubslotIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationScreenBase_GetFavoriteItemForCategory) == 0x000008, "Wrong alignment on AthenaCustomizationScreenBase_GetFavoriteItemForCategory");
static_assert(sizeof(AthenaCustomizationScreenBase_GetFavoriteItemForCategory) == 0x000010, "Wrong size on AthenaCustomizationScreenBase_GetFavoriteItemForCategory");
static_assert(offsetof(AthenaCustomizationScreenBase_GetFavoriteItemForCategory, CustomizationType) == 0x000000, "Member 'AthenaCustomizationScreenBase_GetFavoriteItemForCategory::CustomizationType' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationScreenBase_GetFavoriteItemForCategory, SubslotIndex) == 0x000004, "Member 'AthenaCustomizationScreenBase_GetFavoriteItemForCategory::SubslotIndex' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationScreenBase_GetFavoriteItemForCategory, ReturnValue) == 0x000008, "Member 'AthenaCustomizationScreenBase_GetFavoriteItemForCategory::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationScreenBase.GetItemTypeDisplayNames
// 0x0020 (0x0020 - 0x0000)
struct AthenaCustomizationScreenBase_GetItemTypeDisplayNames final
{
public:
	EAthenaCustomizationCategory                  InCategory;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationScreenBase_GetItemTypeDisplayNames) == 0x000008, "Wrong alignment on AthenaCustomizationScreenBase_GetItemTypeDisplayNames");
static_assert(sizeof(AthenaCustomizationScreenBase_GetItemTypeDisplayNames) == 0x000020, "Wrong size on AthenaCustomizationScreenBase_GetItemTypeDisplayNames");
static_assert(offsetof(AthenaCustomizationScreenBase_GetItemTypeDisplayNames, InCategory) == 0x000000, "Member 'AthenaCustomizationScreenBase_GetItemTypeDisplayNames::InCategory' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationScreenBase_GetItemTypeDisplayNames, ReturnValue) == 0x000008, "Member 'AthenaCustomizationScreenBase_GetItemTypeDisplayNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationScreenBase.HandleInventoryUpdated
// 0x0058 (0x0058 - 0x0000)
struct AthenaCustomizationScreenBase_HandleInventoryUpdated final
{
public:
	TSet<class FString>                           ItemChangeFlags;                                   // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         ProfileRevision;                                   // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationScreenBase_HandleInventoryUpdated) == 0x000008, "Wrong alignment on AthenaCustomizationScreenBase_HandleInventoryUpdated");
static_assert(sizeof(AthenaCustomizationScreenBase_HandleInventoryUpdated) == 0x000058, "Wrong size on AthenaCustomizationScreenBase_HandleInventoryUpdated");
static_assert(offsetof(AthenaCustomizationScreenBase_HandleInventoryUpdated, ItemChangeFlags) == 0x000000, "Member 'AthenaCustomizationScreenBase_HandleInventoryUpdated::ItemChangeFlags' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationScreenBase_HandleInventoryUpdated, ProfileRevision) == 0x000050, "Member 'AthenaCustomizationScreenBase_HandleInventoryUpdated::ProfileRevision' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationScreenBase.ShiftItemsVariantOption
// 0x0010 (0x0010 - 0x0000)
struct AthenaCustomizationScreenBase_ShiftItemsVariantOption final
{
public:
	class UAthenaCosmeticAccountItem*             Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariantChannelIndex;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaCustomizationScreenBase_ShiftItemsVariantOption) == 0x000008, "Wrong alignment on AthenaCustomizationScreenBase_ShiftItemsVariantOption");
static_assert(sizeof(AthenaCustomizationScreenBase_ShiftItemsVariantOption) == 0x000010, "Wrong size on AthenaCustomizationScreenBase_ShiftItemsVariantOption");
static_assert(offsetof(AthenaCustomizationScreenBase_ShiftItemsVariantOption, Item) == 0x000000, "Member 'AthenaCustomizationScreenBase_ShiftItemsVariantOption::Item' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationScreenBase_ShiftItemsVariantOption, VariantChannelIndex) == 0x000008, "Member 'AthenaCustomizationScreenBase_ShiftItemsVariantOption::VariantChannelIndex' has a wrong offset!");

// Function FortniteUI.FortUpgradeScreenBase.HandleTabSelected
// 0x0008 (0x0008 - 0x0000)
struct FortUpgradeScreenBase_HandleTabSelected final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_HandleTabSelected) == 0x000004, "Wrong alignment on FortUpgradeScreenBase_HandleTabSelected");
static_assert(sizeof(FortUpgradeScreenBase_HandleTabSelected) == 0x000008, "Wrong size on FortUpgradeScreenBase_HandleTabSelected");
static_assert(offsetof(FortUpgradeScreenBase_HandleTabSelected, TabId) == 0x000000, "Member 'FortUpgradeScreenBase_HandleTabSelected::TabId' has a wrong offset!");

// Function FortniteUI.FortUpgradeScreenBase.AreUpgradesRespecTokensAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable) == 0x000001, "Wrong alignment on FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable");
static_assert(sizeof(FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable) == 0x000001, "Wrong size on FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable");
static_assert(offsetof(FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_AreUpgradesRespecTokensAvailable::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeScreenBase.CanPreview
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeScreenBase_CanPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_CanPreview) == 0x000001, "Wrong alignment on FortUpgradeScreenBase_CanPreview");
static_assert(sizeof(FortUpgradeScreenBase_CanPreview) == 0x000001, "Wrong size on FortUpgradeScreenBase_CanPreview");
static_assert(offsetof(FortUpgradeScreenBase_CanPreview, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_CanPreview::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeScreenBase.GetUpgradesRespecTokenCount
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeScreenBase_GetUpgradesRespecTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_GetUpgradesRespecTokenCount) == 0x000004, "Wrong alignment on FortUpgradeScreenBase_GetUpgradesRespecTokenCount");
static_assert(sizeof(FortUpgradeScreenBase_GetUpgradesRespecTokenCount) == 0x000004, "Wrong size on FortUpgradeScreenBase_GetUpgradesRespecTokenCount");
static_assert(offsetof(FortUpgradeScreenBase_GetUpgradesRespecTokenCount, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_GetUpgradesRespecTokenCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeScreenBase.IsPreviewing
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeScreenBase_IsPreviewing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeScreenBase_IsPreviewing) == 0x000001, "Wrong alignment on FortUpgradeScreenBase_IsPreviewing");
static_assert(sizeof(FortUpgradeScreenBase_IsPreviewing) == 0x000001, "Wrong size on FortUpgradeScreenBase_IsPreviewing");
static_assert(offsetof(FortUpgradeScreenBase_IsPreviewing, ReturnValue) == 0x000000, "Member 'FortUpgradeScreenBase_IsPreviewing::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaCustomizationSlotSelectorButton.SetCustomizationType
// 0x0008 (0x0008 - 0x0000)
struct AthenaCustomizationSlotSelectorButton_SetCustomizationType final
{
public:
	EAthenaCustomizationCategory                  NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSubslotIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaCustomizationSlotSelectorButton_SetCustomizationType) == 0x000004, "Wrong alignment on AthenaCustomizationSlotSelectorButton_SetCustomizationType");
static_assert(sizeof(AthenaCustomizationSlotSelectorButton_SetCustomizationType) == 0x000008, "Wrong size on AthenaCustomizationSlotSelectorButton_SetCustomizationType");
static_assert(offsetof(AthenaCustomizationSlotSelectorButton_SetCustomizationType, NewType) == 0x000000, "Member 'AthenaCustomizationSlotSelectorButton_SetCustomizationType::NewType' has a wrong offset!");
static_assert(offsetof(AthenaCustomizationSlotSelectorButton_SetCustomizationType, InSubslotIndex) == 0x000004, "Member 'AthenaCustomizationSlotSelectorButton_SetCustomizationType::InSubslotIndex' has a wrong offset!");

// Function FortniteUI.FortGridWidgetBase.GetTileForObject
// 0x0010 (0x0010 - 0x0000)
struct FortGridWidgetBase_GetTileForObject final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortGridPickerTile*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridWidgetBase_GetTileForObject) == 0x000008, "Wrong alignment on FortGridWidgetBase_GetTileForObject");
static_assert(sizeof(FortGridWidgetBase_GetTileForObject) == 0x000010, "Wrong size on FortGridWidgetBase_GetTileForObject");
static_assert(offsetof(FortGridWidgetBase_GetTileForObject, Object) == 0x000000, "Member 'FortGridWidgetBase_GetTileForObject::Object' has a wrong offset!");
static_assert(offsetof(FortGridWidgetBase_GetTileForObject, ReturnValue) == 0x000008, "Member 'FortGridWidgetBase_GetTileForObject::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGridWidgetBase.GetTiles
// 0x0010 (0x0010 - 0x0000)
struct FortGridWidgetBase_GetTiles final
{
public:
	TArray<class UFortGridPickerTile*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridWidgetBase_GetTiles) == 0x000008, "Wrong alignment on FortGridWidgetBase_GetTiles");
static_assert(sizeof(FortGridWidgetBase_GetTiles) == 0x000010, "Wrong size on FortGridWidgetBase_GetTiles");
static_assert(offsetof(FortGridWidgetBase_GetTiles, ReturnValue) == 0x000000, "Member 'FortGridWidgetBase_GetTiles::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGridWidgetBase.SetClearWidgetType
// 0x0008 (0x0008 - 0x0000)
struct FortGridWidgetBase_SetClearWidgetType final
{
public:
	TSubclassOf<class UFortGridPickerTile>        InClearWidgetType;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridWidgetBase_SetClearWidgetType) == 0x000008, "Wrong alignment on FortGridWidgetBase_SetClearWidgetType");
static_assert(sizeof(FortGridWidgetBase_SetClearWidgetType) == 0x000008, "Wrong size on FortGridWidgetBase_SetClearWidgetType");
static_assert(offsetof(FortGridWidgetBase_SetClearWidgetType, InClearWidgetType) == 0x000000, "Member 'FortGridWidgetBase_SetClearWidgetType::InClearWidgetType' has a wrong offset!");

// Function FortniteUI.FortGridWidgetBase.SetDataProvider
// 0x0010 (0x0010 - 0x0000)
struct FortGridWidgetBase_SetDataProvider final
{
public:
	TArray<class UObject*>                        Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridWidgetBase_SetDataProvider) == 0x000008, "Wrong alignment on FortGridWidgetBase_SetDataProvider");
static_assert(sizeof(FortGridWidgetBase_SetDataProvider) == 0x000010, "Wrong size on FortGridWidgetBase_SetDataProvider");
static_assert(offsetof(FortGridWidgetBase_SetDataProvider, Data) == 0x000000, "Member 'FortGridWidgetBase_SetDataProvider::Data' has a wrong offset!");

// Function FortniteUI.FortGridWidgetBase.SetPeekOverflowTilePercentage
// 0x0004 (0x0004 - 0x0000)
struct FortGridWidgetBase_SetPeekOverflowTilePercentage final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridWidgetBase_SetPeekOverflowTilePercentage) == 0x000004, "Wrong alignment on FortGridWidgetBase_SetPeekOverflowTilePercentage");
static_assert(sizeof(FortGridWidgetBase_SetPeekOverflowTilePercentage) == 0x000004, "Wrong size on FortGridWidgetBase_SetPeekOverflowTilePercentage");
static_assert(offsetof(FortGridWidgetBase_SetPeekOverflowTilePercentage, Percent) == 0x000000, "Member 'FortGridWidgetBase_SetPeekOverflowTilePercentage::Percent' has a wrong offset!");

// Function FortniteUI.FortGridWidgetBase.SetTileHeight
// 0x0004 (0x0004 - 0x0000)
struct FortGridWidgetBase_SetTileHeight final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridWidgetBase_SetTileHeight) == 0x000004, "Wrong alignment on FortGridWidgetBase_SetTileHeight");
static_assert(sizeof(FortGridWidgetBase_SetTileHeight) == 0x000004, "Wrong size on FortGridWidgetBase_SetTileHeight");
static_assert(offsetof(FortGridWidgetBase_SetTileHeight, Height) == 0x000000, "Member 'FortGridWidgetBase_SetTileHeight::Height' has a wrong offset!");

// Function FortniteUI.FortGridWidgetBase.SetTilePadding
// 0x0010 (0x0010 - 0x0000)
struct FortGridWidgetBase_SetTilePadding final
{
public:
	struct FMargin                                Padding;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridWidgetBase_SetTilePadding) == 0x000004, "Wrong alignment on FortGridWidgetBase_SetTilePadding");
static_assert(sizeof(FortGridWidgetBase_SetTilePadding) == 0x000010, "Wrong size on FortGridWidgetBase_SetTilePadding");
static_assert(offsetof(FortGridWidgetBase_SetTilePadding, Padding) == 0x000000, "Member 'FortGridWidgetBase_SetTilePadding::Padding' has a wrong offset!");

// Function FortniteUI.FortGridWidgetBase.SetTilesAcross
// 0x0004 (0x0004 - 0x0000)
struct FortGridWidgetBase_SetTilesAcross final
{
public:
	int32                                         Across;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridWidgetBase_SetTilesAcross) == 0x000004, "Wrong alignment on FortGridWidgetBase_SetTilesAcross");
static_assert(sizeof(FortGridWidgetBase_SetTilesAcross) == 0x000004, "Wrong size on FortGridWidgetBase_SetTilesAcross");
static_assert(offsetof(FortGridWidgetBase_SetTilesAcross, Across) == 0x000000, "Member 'FortGridWidgetBase_SetTilesAcross::Across' has a wrong offset!");

// Function FortniteUI.FortGridWidgetBase.SetTilesDown
// 0x0004 (0x0004 - 0x0000)
struct FortGridWidgetBase_SetTilesDown final
{
public:
	int32                                         Down;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridWidgetBase_SetTilesDown) == 0x000004, "Wrong alignment on FortGridWidgetBase_SetTilesDown");
static_assert(sizeof(FortGridWidgetBase_SetTilesDown) == 0x000004, "Wrong size on FortGridWidgetBase_SetTilesDown");
static_assert(offsetof(FortGridWidgetBase_SetTilesDown, Down) == 0x000000, "Member 'FortGridWidgetBase_SetTilesDown::Down' has a wrong offset!");

// Function FortniteUI.FortGridWidgetBase.SetTileWidth
// 0x0004 (0x0004 - 0x0000)
struct FortGridWidgetBase_SetTileWidth final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridWidgetBase_SetTileWidth) == 0x000004, "Wrong alignment on FortGridWidgetBase_SetTileWidth");
static_assert(sizeof(FortGridWidgetBase_SetTileWidth) == 0x000004, "Wrong size on FortGridWidgetBase_SetTileWidth");
static_assert(offsetof(FortGridWidgetBase_SetTileWidth, Width) == 0x000000, "Member 'FortGridWidgetBase_SetTileWidth::Width' has a wrong offset!");

// Function FortniteUI.BacchusHUDElement.HandleInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct BacchusHUDElement_HandleInputMethodChanged final
{
public:
	ECommonInputType                              CurrentInputType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusHUDElement_HandleInputMethodChanged) == 0x000001, "Wrong alignment on BacchusHUDElement_HandleInputMethodChanged");
static_assert(sizeof(BacchusHUDElement_HandleInputMethodChanged) == 0x000001, "Wrong size on BacchusHUDElement_HandleInputMethodChanged");
static_assert(offsetof(BacchusHUDElement_HandleInputMethodChanged, CurrentInputType) == 0x000000, "Member 'BacchusHUDElement_HandleInputMethodChanged::CurrentInputType' has a wrong offset!");

// Function FortniteUI.BacchusHUDElement.HandleShowButtonHightlight
// 0x0028 (0x0028 - 0x0000)
struct BacchusHUDElement_HandleShowButtonHightlight final
{
public:
	struct FGameplayTagContainer                  HUDGameplayTags;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Show;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BacchusHUDElement_HandleShowButtonHightlight) == 0x000008, "Wrong alignment on BacchusHUDElement_HandleShowButtonHightlight");
static_assert(sizeof(BacchusHUDElement_HandleShowButtonHightlight) == 0x000028, "Wrong size on BacchusHUDElement_HandleShowButtonHightlight");
static_assert(offsetof(BacchusHUDElement_HandleShowButtonHightlight, HUDGameplayTags) == 0x000000, "Member 'BacchusHUDElement_HandleShowButtonHightlight::HUDGameplayTags' has a wrong offset!");
static_assert(offsetof(BacchusHUDElement_HandleShowButtonHightlight, Show) == 0x000020, "Member 'BacchusHUDElement_HandleShowButtonHightlight::Show' has a wrong offset!");

// Function FortniteUI.BacchusHUDElement.OnHUDStateUpdate
// 0x0014 (0x0014 - 0x0000)
struct BacchusHUDElement_OnHUDStateUpdate final
{
public:
	struct FFortHUDState                          NewState;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusHUDElement_OnHUDStateUpdate) == 0x000001, "Wrong alignment on BacchusHUDElement_OnHUDStateUpdate");
static_assert(sizeof(BacchusHUDElement_OnHUDStateUpdate) == 0x000014, "Wrong size on BacchusHUDElement_OnHUDStateUpdate");
static_assert(offsetof(BacchusHUDElement_OnHUDStateUpdate, NewState) == 0x000000, "Member 'BacchusHUDElement_OnHUDStateUpdate::NewState' has a wrong offset!");

// Function FortniteUI.BacchusHUDElement.ShowHighlight
// 0x0001 (0x0001 - 0x0000)
struct BacchusHUDElement_ShowHighlight final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusHUDElement_ShowHighlight) == 0x000001, "Wrong alignment on BacchusHUDElement_ShowHighlight");
static_assert(sizeof(BacchusHUDElement_ShowHighlight) == 0x000001, "Wrong size on BacchusHUDElement_ShowHighlight");
static_assert(offsetof(BacchusHUDElement_ShowHighlight, Show) == 0x000000, "Member 'BacchusHUDElement_ShowHighlight::Show' has a wrong offset!");

// Function FortniteUI.BacchusHUDElement.BP_GetMobileVisualType
// 0x0008 (0x0008 - 0x0000)
struct BacchusHUDElement_BP_GetMobileVisualType final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusHUDElement_BP_GetMobileVisualType) == 0x000004, "Wrong alignment on BacchusHUDElement_BP_GetMobileVisualType");
static_assert(sizeof(BacchusHUDElement_BP_GetMobileVisualType) == 0x000008, "Wrong size on BacchusHUDElement_BP_GetMobileVisualType");
static_assert(offsetof(BacchusHUDElement_BP_GetMobileVisualType, ReturnValue) == 0x000000, "Member 'BacchusHUDElement_BP_GetMobileVisualType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLazyImage.SetBrushFromItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortLazyImage_SetBrushFromItemDefinition final
{
public:
	const class UFortItemDefinition*              Param_ItemDefinition;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLazyImage_SetBrushFromItemDefinition) == 0x000008, "Wrong alignment on FortLazyImage_SetBrushFromItemDefinition");
static_assert(sizeof(FortLazyImage_SetBrushFromItemDefinition) == 0x000008, "Wrong size on FortLazyImage_SetBrushFromItemDefinition");
static_assert(offsetof(FortLazyImage_SetBrushFromItemDefinition, Param_ItemDefinition) == 0x000000, "Member 'FortLazyImage_SetBrushFromItemDefinition::Param_ItemDefinition' has a wrong offset!");

// Function FortniteUI.FortLazyImage.SetBrushFromItemInstance
// 0x0008 (0x0008 - 0x0000)
struct FortLazyImage_SetBrushFromItemInstance final
{
public:
	const class UFortItem*                        ItemInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLazyImage_SetBrushFromItemInstance) == 0x000008, "Wrong alignment on FortLazyImage_SetBrushFromItemInstance");
static_assert(sizeof(FortLazyImage_SetBrushFromItemInstance) == 0x000008, "Wrong size on FortLazyImage_SetBrushFromItemInstance");
static_assert(offsetof(FortLazyImage_SetBrushFromItemInstance, ItemInstance) == 0x000000, "Member 'FortLazyImage_SetBrushFromItemInstance::ItemInstance' has a wrong offset!");

// Function FortniteUI.FortLazyImage.SetFortBrushSize
// 0x0001 (0x0001 - 0x0000)
struct FortLazyImage_SetFortBrushSize final
{
public:
	EFortBrushSize                                FortBrushSize;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLazyImage_SetFortBrushSize) == 0x000001, "Wrong alignment on FortLazyImage_SetFortBrushSize");
static_assert(sizeof(FortLazyImage_SetFortBrushSize) == 0x000001, "Wrong size on FortLazyImage_SetFortBrushSize");
static_assert(offsetof(FortLazyImage_SetFortBrushSize, FortBrushSize) == 0x000000, "Member 'FortLazyImage_SetFortBrushSize::FortBrushSize' has a wrong offset!");

// Function FortniteUI.FortLazyImage.SetShadowColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct FortLazyImage_SetShadowColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLazyImage_SetShadowColorAndOpacity) == 0x000004, "Wrong alignment on FortLazyImage_SetShadowColorAndOpacity");
static_assert(sizeof(FortLazyImage_SetShadowColorAndOpacity) == 0x000010, "Wrong size on FortLazyImage_SetShadowColorAndOpacity");
static_assert(offsetof(FortLazyImage_SetShadowColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'FortLazyImage_SetShadowColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function FortniteUI.AthenaEquippedItemBase.AmmoChanged
// 0x000C (0x000C - 0x0000)
struct AthenaEquippedItemBase_AmmoChanged final
{
public:
	int32                                         MagazineAmmoCount;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BackupAmmoCount;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRemaining;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemBase_AmmoChanged) == 0x000004, "Wrong alignment on AthenaEquippedItemBase_AmmoChanged");
static_assert(sizeof(AthenaEquippedItemBase_AmmoChanged) == 0x00000C, "Wrong size on AthenaEquippedItemBase_AmmoChanged");
static_assert(offsetof(AthenaEquippedItemBase_AmmoChanged, MagazineAmmoCount) == 0x000000, "Member 'AthenaEquippedItemBase_AmmoChanged::MagazineAmmoCount' has a wrong offset!");
static_assert(offsetof(AthenaEquippedItemBase_AmmoChanged, BackupAmmoCount) == 0x000004, "Member 'AthenaEquippedItemBase_AmmoChanged::BackupAmmoCount' has a wrong offset!");
static_assert(offsetof(AthenaEquippedItemBase_AmmoChanged, TotalRemaining) == 0x000008, "Member 'AthenaEquippedItemBase_AmmoChanged::TotalRemaining' has a wrong offset!");

// Function FortniteUI.AthenaEquippedItemBase.AmmoTypeChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEquippedItemBase_AmmoTypeChanged final
{
public:
	class AFortWeaponRanged*                      RangedWeapon;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemBase_AmmoTypeChanged) == 0x000008, "Wrong alignment on AthenaEquippedItemBase_AmmoTypeChanged");
static_assert(sizeof(AthenaEquippedItemBase_AmmoTypeChanged) == 0x000010, "Wrong size on AthenaEquippedItemBase_AmmoTypeChanged");
static_assert(offsetof(AthenaEquippedItemBase_AmmoTypeChanged, RangedWeapon) == 0x000000, "Member 'AthenaEquippedItemBase_AmmoTypeChanged::RangedWeapon' has a wrong offset!");
static_assert(offsetof(AthenaEquippedItemBase_AmmoTypeChanged, Item) == 0x000008, "Member 'AthenaEquippedItemBase_AmmoTypeChanged::Item' has a wrong offset!");

// Function FortniteUI.AthenaEquippedItemBase.HasAmmoChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaEquippedItemBase_HasAmmoChanged final
{
public:
	bool                                          bHasAmmo;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemBase_HasAmmoChanged) == 0x000001, "Wrong alignment on AthenaEquippedItemBase_HasAmmoChanged");
static_assert(sizeof(AthenaEquippedItemBase_HasAmmoChanged) == 0x000001, "Wrong size on AthenaEquippedItemBase_HasAmmoChanged");
static_assert(offsetof(AthenaEquippedItemBase_HasAmmoChanged, bHasAmmo) == 0x000000, "Member 'AthenaEquippedItemBase_HasAmmoChanged::bHasAmmo' has a wrong offset!");

// Function FortniteUI.AthenaEquippedItemBase.OnLocalAmmoChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaEquippedItemBase_OnLocalAmmoChanged final
{
public:
	int32                                         LocalCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalRemaining;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemBase_OnLocalAmmoChanged) == 0x000004, "Wrong alignment on AthenaEquippedItemBase_OnLocalAmmoChanged");
static_assert(sizeof(AthenaEquippedItemBase_OnLocalAmmoChanged) == 0x000008, "Wrong size on AthenaEquippedItemBase_OnLocalAmmoChanged");
static_assert(offsetof(AthenaEquippedItemBase_OnLocalAmmoChanged, LocalCount) == 0x000000, "Member 'AthenaEquippedItemBase_OnLocalAmmoChanged::LocalCount' has a wrong offset!");
static_assert(offsetof(AthenaEquippedItemBase_OnLocalAmmoChanged, LocalRemaining) == 0x000004, "Member 'AthenaEquippedItemBase_OnLocalAmmoChanged::LocalRemaining' has a wrong offset!");

// Function FortniteUI.AthenaEquippedItemBase.OnWeaponChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEquippedItemBase_OnWeaponChanged final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemBase_OnWeaponChanged) == 0x000008, "Wrong alignment on AthenaEquippedItemBase_OnWeaponChanged");
static_assert(sizeof(AthenaEquippedItemBase_OnWeaponChanged) == 0x000010, "Wrong size on AthenaEquippedItemBase_OnWeaponChanged");
static_assert(offsetof(AthenaEquippedItemBase_OnWeaponChanged, NewWeapon) == 0x000000, "Member 'AthenaEquippedItemBase_OnWeaponChanged::NewWeapon' has a wrong offset!");
static_assert(offsetof(AthenaEquippedItemBase_OnWeaponChanged, PrevWeapon) == 0x000008, "Member 'AthenaEquippedItemBase_OnWeaponChanged::PrevWeapon' has a wrong offset!");

// Function FortniteUI.AthenaEquippedItemBase.ResourceCountChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaEquippedItemBase_ResourceCountChanged final
{
public:
	int32                                         ResourceCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemBase_ResourceCountChanged) == 0x000004, "Wrong alignment on AthenaEquippedItemBase_ResourceCountChanged");
static_assert(sizeof(AthenaEquippedItemBase_ResourceCountChanged) == 0x000004, "Wrong size on AthenaEquippedItemBase_ResourceCountChanged");
static_assert(offsetof(AthenaEquippedItemBase_ResourceCountChanged, ResourceCount) == 0x000000, "Member 'AthenaEquippedItemBase_ResourceCountChanged::ResourceCount' has a wrong offset!");

// Function FortniteUI.AthenaEquippedItemBase.ResourceTypeChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEquippedItemBase_ResourceTypeChanged final
{
public:
	class UFortResourceItemDefinition*            Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourceCount;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEquippedItemBase_ResourceTypeChanged) == 0x000008, "Wrong alignment on AthenaEquippedItemBase_ResourceTypeChanged");
static_assert(sizeof(AthenaEquippedItemBase_ResourceTypeChanged) == 0x000010, "Wrong size on AthenaEquippedItemBase_ResourceTypeChanged");
static_assert(offsetof(AthenaEquippedItemBase_ResourceTypeChanged, Item) == 0x000000, "Member 'AthenaEquippedItemBase_ResourceTypeChanged::Item' has a wrong offset!");
static_assert(offsetof(AthenaEquippedItemBase_ResourceTypeChanged, ResourceCount) == 0x000008, "Member 'AthenaEquippedItemBase_ResourceTypeChanged::ResourceCount' has a wrong offset!");

// Function FortniteUI.AthenaEquippedItemBase.SetViewModel
// 0x0008 (0x0008 - 0x0000)
struct AthenaEquippedItemBase_SetViewModel final
{
public:
	class UAthenaPlayerViewModel*                 ViewModel;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemBase_SetViewModel) == 0x000008, "Wrong alignment on AthenaEquippedItemBase_SetViewModel");
static_assert(sizeof(AthenaEquippedItemBase_SetViewModel) == 0x000008, "Wrong size on AthenaEquippedItemBase_SetViewModel");
static_assert(offsetof(AthenaEquippedItemBase_SetViewModel, ViewModel) == 0x000000, "Member 'AthenaEquippedItemBase_SetViewModel::ViewModel' has a wrong offset!");

// Function FortniteUI.AthenaEquippedItemBase.UtilityItemCountChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaEquippedItemBase_UtilityItemCountChanged final
{
public:
	int32                                         Remaining;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemBase_UtilityItemCountChanged) == 0x000004, "Wrong alignment on AthenaEquippedItemBase_UtilityItemCountChanged");
static_assert(sizeof(AthenaEquippedItemBase_UtilityItemCountChanged) == 0x000004, "Wrong size on AthenaEquippedItemBase_UtilityItemCountChanged");
static_assert(offsetof(AthenaEquippedItemBase_UtilityItemCountChanged, Remaining) == 0x000000, "Member 'AthenaEquippedItemBase_UtilityItemCountChanged::Remaining' has a wrong offset!");

// Function FortniteUI.AthenaEquippedItemBase.UtilityItemTypeChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEquippedItemBase_UtilityItemTypeChanged final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWeaponItemDefinition*              Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemBase_UtilityItemTypeChanged) == 0x000008, "Wrong alignment on AthenaEquippedItemBase_UtilityItemTypeChanged");
static_assert(sizeof(AthenaEquippedItemBase_UtilityItemTypeChanged) == 0x000010, "Wrong size on AthenaEquippedItemBase_UtilityItemTypeChanged");
static_assert(offsetof(AthenaEquippedItemBase_UtilityItemTypeChanged, Weapon) == 0x000000, "Member 'AthenaEquippedItemBase_UtilityItemTypeChanged::Weapon' has a wrong offset!");
static_assert(offsetof(AthenaEquippedItemBase_UtilityItemTypeChanged, Item) == 0x000008, "Member 'AthenaEquippedItemBase_UtilityItemTypeChanged::Item' has a wrong offset!");

// Function FortniteUI.AthenaEquippedItemBase.WeaponTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaEquippedItemBase_WeaponTypeChanged final
{
public:
	EEquippedWeaponDisplay                        Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEquippedItemBase_WeaponTypeChanged) == 0x000001, "Wrong alignment on AthenaEquippedItemBase_WeaponTypeChanged");
static_assert(sizeof(AthenaEquippedItemBase_WeaponTypeChanged) == 0x000001, "Wrong size on AthenaEquippedItemBase_WeaponTypeChanged");
static_assert(offsetof(AthenaEquippedItemBase_WeaponTypeChanged, Mode) == 0x000000, "Member 'AthenaEquippedItemBase_WeaponTypeChanged::Mode' has a wrong offset!");

// Function FortniteUI.FortInputOptions.ChangeBinding
// 0x0020 (0x0020 - 0x0000)
struct FortInputOptions_ChangeBinding final
{
public:
	bool                                          bIsPrimarySlot;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Input;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   NewKey;                                            // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInputOptions_ChangeBinding) == 0x000008, "Wrong alignment on FortInputOptions_ChangeBinding");
static_assert(sizeof(FortInputOptions_ChangeBinding) == 0x000020, "Wrong size on FortInputOptions_ChangeBinding");
static_assert(offsetof(FortInputOptions_ChangeBinding, bIsPrimarySlot) == 0x000000, "Member 'FortInputOptions_ChangeBinding::bIsPrimarySlot' has a wrong offset!");
static_assert(offsetof(FortInputOptions_ChangeBinding, Input) == 0x000004, "Member 'FortInputOptions_ChangeBinding::Input' has a wrong offset!");
static_assert(offsetof(FortInputOptions_ChangeBinding, NewKey) == 0x000008, "Member 'FortInputOptions_ChangeBinding::NewKey' has a wrong offset!");

// Function FortniteUI.FortInputOptions.GetListWidget
// 0x0010 (0x0010 - 0x0000)
struct FortInputOptions_GetListWidget final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInputOptions_GetListWidget) == 0x000008, "Wrong alignment on FortInputOptions_GetListWidget");
static_assert(sizeof(FortInputOptions_GetListWidget) == 0x000010, "Wrong size on FortInputOptions_GetListWidget");
static_assert(offsetof(FortInputOptions_GetListWidget, Item) == 0x000000, "Member 'FortInputOptions_GetListWidget::Item' has a wrong offset!");
static_assert(offsetof(FortInputOptions_GetListWidget, ReturnValue) == 0x000008, "Member 'FortInputOptions_GetListWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInputOptions.HandleUsingGamepadChanged
// 0x0001 (0x0001 - 0x0000)
struct FortInputOptions_HandleUsingGamepadChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInputOptions_HandleUsingGamepadChanged) == 0x000001, "Wrong alignment on FortInputOptions_HandleUsingGamepadChanged");
static_assert(sizeof(FortInputOptions_HandleUsingGamepadChanged) == 0x000001, "Wrong size on FortInputOptions_HandleUsingGamepadChanged");
static_assert(offsetof(FortInputOptions_HandleUsingGamepadChanged, NewInputType) == 0x000000, "Member 'FortInputOptions_HandleUsingGamepadChanged::NewInputType' has a wrong offset!");

// Function FortniteUI.FortInputOptions.GetActionBeingUnbound
// 0x0030 (0x0030 - 0x0000)
struct FortInputOptions_GetActionBeingUnbound final
{
public:
	bool                                          bIsPrimarySlot;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Input;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   NewKey;                                            // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortActionBeingUnbound                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInputOptions_GetActionBeingUnbound) == 0x000008, "Wrong alignment on FortInputOptions_GetActionBeingUnbound");
static_assert(sizeof(FortInputOptions_GetActionBeingUnbound) == 0x000030, "Wrong size on FortInputOptions_GetActionBeingUnbound");
static_assert(offsetof(FortInputOptions_GetActionBeingUnbound, bIsPrimarySlot) == 0x000000, "Member 'FortInputOptions_GetActionBeingUnbound::bIsPrimarySlot' has a wrong offset!");
static_assert(offsetof(FortInputOptions_GetActionBeingUnbound, Input) == 0x000004, "Member 'FortInputOptions_GetActionBeingUnbound::Input' has a wrong offset!");
static_assert(offsetof(FortInputOptions_GetActionBeingUnbound, NewKey) == 0x000008, "Member 'FortInputOptions_GetActionBeingUnbound::NewKey' has a wrong offset!");
static_assert(offsetof(FortInputOptions_GetActionBeingUnbound, ReturnValue) == 0x000020, "Member 'FortInputOptions_GetActionBeingUnbound::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInputOptions.GetActionItemsInGroup
// 0x0018 (0x0018 - 0x0000)
struct FortInputOptions_GetActionItemsInGroup final
{
public:
	EFortInputActionGroup                         InputActionGroup;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortOptionsMenuInputData*>      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInputOptions_GetActionItemsInGroup) == 0x000008, "Wrong alignment on FortInputOptions_GetActionItemsInGroup");
static_assert(sizeof(FortInputOptions_GetActionItemsInGroup) == 0x000018, "Wrong size on FortInputOptions_GetActionItemsInGroup");
static_assert(offsetof(FortInputOptions_GetActionItemsInGroup, InputActionGroup) == 0x000000, "Member 'FortInputOptions_GetActionItemsInGroup::InputActionGroup' has a wrong offset!");
static_assert(offsetof(FortInputOptions_GetActionItemsInGroup, ReturnValue) == 0x000008, "Member 'FortInputOptions_GetActionItemsInGroup::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInputOptions.GetBoundKeyNameBP
// 0x0020 (0x0020 - 0x0000)
struct FortInputOptions_GetBoundKeyNameBP final
{
public:
	int32                                         RowIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPrimary;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInputOptions_GetBoundKeyNameBP) == 0x000008, "Wrong alignment on FortInputOptions_GetBoundKeyNameBP");
static_assert(sizeof(FortInputOptions_GetBoundKeyNameBP) == 0x000020, "Wrong size on FortInputOptions_GetBoundKeyNameBP");
static_assert(offsetof(FortInputOptions_GetBoundKeyNameBP, RowIndex) == 0x000000, "Member 'FortInputOptions_GetBoundKeyNameBP::RowIndex' has a wrong offset!");
static_assert(offsetof(FortInputOptions_GetBoundKeyNameBP, IsPrimary) == 0x000004, "Member 'FortInputOptions_GetBoundKeyNameBP::IsPrimary' has a wrong offset!");
static_assert(offsetof(FortInputOptions_GetBoundKeyNameBP, ReturnValue) == 0x000008, "Member 'FortInputOptions_GetBoundKeyNameBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInputOptions.GetInputDataIndexForActionName
// 0x000C (0x000C - 0x0000)
struct FortInputOptions_GetInputDataIndexForActionName final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInputOptions_GetInputDataIndexForActionName) == 0x000004, "Wrong alignment on FortInputOptions_GetInputDataIndexForActionName");
static_assert(sizeof(FortInputOptions_GetInputDataIndexForActionName) == 0x00000C, "Wrong size on FortInputOptions_GetInputDataIndexForActionName");
static_assert(offsetof(FortInputOptions_GetInputDataIndexForActionName, ActionName) == 0x000000, "Member 'FortInputOptions_GetInputDataIndexForActionName::ActionName' has a wrong offset!");
static_assert(offsetof(FortInputOptions_GetInputDataIndexForActionName, ReturnValue) == 0x000008, "Member 'FortInputOptions_GetInputDataIndexForActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInputOptions.GetInputDisplayTextBP
// 0x0020 (0x0020 - 0x0000)
struct FortInputOptions_GetInputDisplayTextBP final
{
public:
	int32                                         RowIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInputOptions_GetInputDisplayTextBP) == 0x000008, "Wrong alignment on FortInputOptions_GetInputDisplayTextBP");
static_assert(sizeof(FortInputOptions_GetInputDisplayTextBP) == 0x000020, "Wrong size on FortInputOptions_GetInputDisplayTextBP");
static_assert(offsetof(FortInputOptions_GetInputDisplayTextBP, RowIndex) == 0x000000, "Member 'FortInputOptions_GetInputDisplayTextBP::RowIndex' has a wrong offset!");
static_assert(offsetof(FortInputOptions_GetInputDisplayTextBP, ReturnValue) == 0x000008, "Member 'FortInputOptions_GetInputDisplayTextBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchActiveGridScreenBase.OnTeamEliminated
// 0x0004 (0x0004 - 0x0000)
struct AthenaEventMatchActiveGridScreenBase_OnTeamEliminated final
{
public:
	int32                                         InSquadId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchActiveGridScreenBase_OnTeamEliminated) == 0x000004, "Wrong alignment on AthenaEventMatchActiveGridScreenBase_OnTeamEliminated");
static_assert(sizeof(AthenaEventMatchActiveGridScreenBase_OnTeamEliminated) == 0x000004, "Wrong size on AthenaEventMatchActiveGridScreenBase_OnTeamEliminated");
static_assert(offsetof(AthenaEventMatchActiveGridScreenBase_OnTeamEliminated, InSquadId) == 0x000000, "Member 'AthenaEventMatchActiveGridScreenBase_OnTeamEliminated::InSquadId' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchEliminatedGridScreenBase.OnPlayerEliminatedStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchEliminatedGridScreenBase_OnPlayerEliminatedStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsEliminated;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchEliminatedGridScreenBase_OnPlayerEliminatedStateChanged) == 0x000008, "Wrong alignment on AthenaEventMatchEliminatedGridScreenBase_OnPlayerEliminatedStateChanged");
static_assert(sizeof(AthenaEventMatchEliminatedGridScreenBase_OnPlayerEliminatedStateChanged) == 0x000010, "Wrong size on AthenaEventMatchEliminatedGridScreenBase_OnPlayerEliminatedStateChanged");
static_assert(offsetof(AthenaEventMatchEliminatedGridScreenBase_OnPlayerEliminatedStateChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchEliminatedGridScreenBase_OnPlayerEliminatedStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchEliminatedGridScreenBase_OnPlayerEliminatedStateChanged, bInIsEliminated) == 0x000008, "Member 'AthenaEventMatchEliminatedGridScreenBase_OnPlayerEliminatedStateChanged::bInIsEliminated' has a wrong offset!");

// Function FortniteUI.FortMobileShareButton.OnOSImageEnumSet
// 0x0001 (0x0001 - 0x0000)
struct FortMobileShareButton_OnOSImageEnumSet final
{
public:
	EFortFortMobileShareButtonOS                  OSType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMobileShareButton_OnOSImageEnumSet) == 0x000001, "Wrong alignment on FortMobileShareButton_OnOSImageEnumSet");
static_assert(sizeof(FortMobileShareButton_OnOSImageEnumSet) == 0x000001, "Wrong size on FortMobileShareButton_OnOSImageEnumSet");
static_assert(offsetof(FortMobileShareButton_OnOSImageEnumSet, OSType) == 0x000000, "Member 'FortMobileShareButton_OnOSImageEnumSet::OSType' has a wrong offset!");

// Function FortniteUI.FortMobileShareButton.SetShareParams
// 0x0028 (0x0028 - 0x0000)
struct FortMobileShareButton_SetShareParams final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMobileShareButton_SetShareParams) == 0x000008, "Wrong alignment on FortMobileShareButton_SetShareParams");
static_assert(sizeof(FortMobileShareButton_SetShareParams) == 0x000028, "Wrong size on FortMobileShareButton_SetShareParams");
static_assert(offsetof(FortMobileShareButton_SetShareParams, URL) == 0x000000, "Member 'FortMobileShareButton_SetShareParams::URL' has a wrong offset!");
static_assert(offsetof(FortMobileShareButton_SetShareParams, Description) == 0x000010, "Member 'FortMobileShareButton_SetShareParams::Description' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnBeingRevivedStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnBeingRevivedStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBeingRevived;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnBeingRevivedStateChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnBeingRevivedStateChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnBeingRevivedStateChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnBeingRevivedStateChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnBeingRevivedStateChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnBeingRevivedStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnBeingRevivedStateChanged, bIsBeingRevived) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnBeingRevivedStateChanged::bIsBeingRevived' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnDBNOStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnDBNOStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDBNO;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnDBNOStateChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnDBNOStateChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnDBNOStateChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnDBNOStateChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnDBNOStateChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnDBNOStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnDBNOStateChanged, bIsDBNO) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnDBNOStateChanged::bIsDBNO' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnDeadStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnDeadStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDead;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnDeadStateChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnDeadStateChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnDeadStateChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnDeadStateChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnDeadStateChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnDeadStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnDeadStateChanged, bIsDead) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnDeadStateChanged::bIsDead' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnDisconnectedChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnDisconnectedChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDisconnected;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnDisconnectedChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnDisconnectedChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnDisconnectedChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnDisconnectedChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnDisconnectedChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnDisconnectedChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnDisconnectedChanged, bIsDisconnected) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnDisconnectedChanged::bIsDisconnected' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnHealthDamaged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnHealthDamaged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHealthPercent;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnHealthDamaged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnHealthDamaged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnHealthDamaged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnHealthDamaged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnHealthDamaged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnHealthDamaged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnHealthDamaged, InHealthPercent) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnHealthDamaged::InHealthPercent' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnHealthHealed
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnHealthHealed final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHealthPercent;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnHealthHealed) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnHealthHealed");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnHealthHealed) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnHealthHealed");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnHealthHealed, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnHealthHealed::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnHealthHealed, InHealthPercent) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnHealthHealed::InHealthPercent' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnIsFollowedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnIsFollowedPlayerChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsFollowedPlayer;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnIsFollowedPlayerChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnIsFollowedPlayerChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnIsFollowedPlayerChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnIsFollowedPlayerChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnIsFollowedPlayerChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnIsFollowedPlayerChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnIsFollowedPlayerChanged, bInIsFollowedPlayer) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnIsFollowedPlayerChanged::bInIsFollowedPlayer' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnIsInRelevancyChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnIsInRelevancyChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsInRelevancy;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnIsInRelevancyChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnIsInRelevancyChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnIsInRelevancyChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnIsInRelevancyChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnIsInRelevancyChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnIsInRelevancyChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnIsInRelevancyChanged, bInIsInRelevancy) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnIsInRelevancyChanged::bInIsInRelevancy' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnIsReplayRelevancyPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsReplayRelevancyPlayer;                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged, bInIsReplayRelevancyPlayer) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged::bInIsReplayRelevancyPlayer' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnKillScoreChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnKillScoreChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InKillScore;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnKillScoreChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnKillScoreChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnKillScoreChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnKillScoreChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnKillScoreChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnKillScoreChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnKillScoreChanged, InKillScore) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnKillScoreChanged::InKillScore' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnLocationChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnLocationChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InLocation;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnLocationChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnLocationChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnLocationChanged) == 0x000018, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnLocationChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnLocationChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnLocationChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnLocationChanged, InLocation) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnLocationChanged::InLocation' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnMaterialCountChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnMaterialCountChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnMaterialCountChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnMaterialCountChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnMaterialCountChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnMaterialCountChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnMaterialCountChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnMaterialCountChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnMaterialCountChanged, InCount) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnMaterialCountChanged::InCount' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnPlaceChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnPlaceChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPlace;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnPlaceChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnPlaceChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnPlaceChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnPlaceChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnPlaceChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnPlaceChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnPlaceChanged, InPlace) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnPlaceChanged::InPlace' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnPlayerDataChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnPlayerDataChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnPlayerDataChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnPlayerDataChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnPlayerDataChanged) == 0x000008, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnPlayerDataChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnPlayerDataChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnPlayerDataChanged::InPlayerData' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnPlayerNameChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnPlayerNameChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlayerName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnPlayerNameChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnPlayerNameChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnPlayerNameChanged) == 0x000018, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnPlayerNameChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnPlayerNameChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnPlayerNameChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnPlayerNameChanged, InPlayerName) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnPlayerNameChanged::InPlayerName' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnPlayerPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnPlayerPawnChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        InPlayerPawn;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnPlayerPawnChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnPlayerPawnChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnPlayerPawnChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnPlayerPawnChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnPlayerPawnChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnPlayerPawnChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnPlayerPawnChanged, InPlayerPawn) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnPlayerPawnChanged::InPlayerPawn' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnPlayerStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnPlayerStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnPlayerStateChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnPlayerStateChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnPlayerStateChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnPlayerStateChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnPlayerStateChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnPlayerStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnPlayerStateChanged, InPlayerState) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnPlayerStateChanged::InPlayerState' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnShieldDamaged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnShieldDamaged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InShieldPercent;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnShieldDamaged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnShieldDamaged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnShieldDamaged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnShieldDamaged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnShieldDamaged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnShieldDamaged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnShieldDamaged, InShieldPercent) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnShieldDamaged::InShieldPercent' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnShieldHealed
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnShieldHealed final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InShieldPercent;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnShieldHealed) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnShieldHealed");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnShieldHealed) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnShieldHealed");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnShieldHealed, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnShieldHealed::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnShieldHealed, InShieldPercent) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnShieldHealed::InShieldPercent' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnSquadIdChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnSquadIdChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InSquadId;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnSquadIdChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnSquadIdChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnSquadIdChanged) == 0x000010, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnSquadIdChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnSquadIdChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnSquadIdChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnSquadIdChanged, InSquadId) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnSquadIdChanged::InSquadId' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.OnTeamColorChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_OnTeamColorChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InTeamColor;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_OnTeamColorChanged) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_OnTeamColorChanged");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_OnTeamColorChanged) == 0x000018, "Wrong size on AthenaEventMatchPlayerWidgetBase_OnTeamColorChanged");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnTeamColorChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_OnTeamColorChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_OnTeamColorChanged, InTeamColor) == 0x000008, "Member 'AthenaEventMatchPlayerWidgetBase_OnTeamColorChanged::InTeamColor' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchPlayerWidgetBase.SetPlayerData
// 0x0008 (0x0008 - 0x0000)
struct AthenaEventMatchPlayerWidgetBase_SetPlayerData final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchPlayerWidgetBase_SetPlayerData) == 0x000008, "Wrong alignment on AthenaEventMatchPlayerWidgetBase_SetPlayerData");
static_assert(sizeof(AthenaEventMatchPlayerWidgetBase_SetPlayerData) == 0x000008, "Wrong size on AthenaEventMatchPlayerWidgetBase_SetPlayerData");
static_assert(offsetof(AthenaEventMatchPlayerWidgetBase_SetPlayerData, InPlayerData) == 0x000000, "Member 'AthenaEventMatchPlayerWidgetBase_SetPlayerData::InPlayerData' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchScoreboardPlayerWidgetBase.SetSquadIdVisible
// 0x0001 (0x0001 - 0x0000)
struct AthenaEventMatchScoreboardPlayerWidgetBase_SetSquadIdVisible final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchScoreboardPlayerWidgetBase_SetSquadIdVisible) == 0x000001, "Wrong alignment on AthenaEventMatchScoreboardPlayerWidgetBase_SetSquadIdVisible");
static_assert(sizeof(AthenaEventMatchScoreboardPlayerWidgetBase_SetSquadIdVisible) == 0x000001, "Wrong size on AthenaEventMatchScoreboardPlayerWidgetBase_SetSquadIdVisible");
static_assert(offsetof(AthenaEventMatchScoreboardPlayerWidgetBase_SetSquadIdVisible, InVisible) == 0x000000, "Member 'AthenaEventMatchScoreboardPlayerWidgetBase_SetSquadIdVisible::InVisible' has a wrong offset!");

// Function FortniteUI.FortErrorWindow.DismissErrors
// 0x0010 (0x0010 - 0x0000)
struct FortErrorWindow_DismissErrors final
{
public:
	TArray<struct FFortErrorInfo>                 ErrorInfos;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortErrorWindow_DismissErrors) == 0x000008, "Wrong alignment on FortErrorWindow_DismissErrors");
static_assert(sizeof(FortErrorWindow_DismissErrors) == 0x000010, "Wrong size on FortErrorWindow_DismissErrors");
static_assert(offsetof(FortErrorWindow_DismissErrors, ErrorInfos) == 0x000000, "Member 'FortErrorWindow_DismissErrors::ErrorInfos' has a wrong offset!");

// Function FortniteUI.FortErrorWindow.GetErrorEntry
// 0x0008 (0x0008 - 0x0000)
struct FortErrorWindow_GetErrorEntry final
{
public:
	class UCommonUserWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortErrorWindow_GetErrorEntry) == 0x000008, "Wrong alignment on FortErrorWindow_GetErrorEntry");
static_assert(sizeof(FortErrorWindow_GetErrorEntry) == 0x000008, "Wrong size on FortErrorWindow_GetErrorEntry");
static_assert(offsetof(FortErrorWindow_GetErrorEntry, ReturnValue) == 0x000000, "Member 'FortErrorWindow_GetErrorEntry::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortErrorWindow.PutErrorEntries
// 0x0010 (0x0010 - 0x0000)
struct FortErrorWindow_PutErrorEntries final
{
public:
	TArray<class UCommonUserWidget*>              ErrorEntries;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortErrorWindow_PutErrorEntries) == 0x000008, "Wrong alignment on FortErrorWindow_PutErrorEntries");
static_assert(sizeof(FortErrorWindow_PutErrorEntries) == 0x000010, "Wrong size on FortErrorWindow_PutErrorEntries");
static_assert(offsetof(FortErrorWindow_PutErrorEntries, ErrorEntries) == 0x000000, "Member 'FortErrorWindow_PutErrorEntries::ErrorEntries' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchScoreboardScreenBase.OnSortByEliminationsActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaEventMatchScoreboardScreenBase_OnSortByEliminationsActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchScoreboardScreenBase_OnSortByEliminationsActionExecuted) == 0x000001, "Wrong alignment on AthenaEventMatchScoreboardScreenBase_OnSortByEliminationsActionExecuted");
static_assert(sizeof(AthenaEventMatchScoreboardScreenBase_OnSortByEliminationsActionExecuted) == 0x000001, "Wrong size on AthenaEventMatchScoreboardScreenBase_OnSortByEliminationsActionExecuted");
static_assert(offsetof(AthenaEventMatchScoreboardScreenBase_OnSortByEliminationsActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaEventMatchScoreboardScreenBase_OnSortByEliminationsActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchScoreboardScreenBase.OnSortByPlaceActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaEventMatchScoreboardScreenBase_OnSortByPlaceActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchScoreboardScreenBase_OnSortByPlaceActionExecuted) == 0x000001, "Wrong alignment on AthenaEventMatchScoreboardScreenBase_OnSortByPlaceActionExecuted");
static_assert(sizeof(AthenaEventMatchScoreboardScreenBase_OnSortByPlaceActionExecuted) == 0x000001, "Wrong size on AthenaEventMatchScoreboardScreenBase_OnSortByPlaceActionExecuted");
static_assert(offsetof(AthenaEventMatchScoreboardScreenBase_OnSortByPlaceActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaEventMatchScoreboardScreenBase_OnSortByPlaceActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchScoreboardScreenBase.OnSquadEliminated
// 0x0008 (0x0008 - 0x0000)
struct AthenaEventMatchScoreboardScreenBase_OnSquadEliminated final
{
public:
	class UAthenaRemoteSquadViewData*             InSquadData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchScoreboardScreenBase_OnSquadEliminated) == 0x000008, "Wrong alignment on AthenaEventMatchScoreboardScreenBase_OnSquadEliminated");
static_assert(sizeof(AthenaEventMatchScoreboardScreenBase_OnSquadEliminated) == 0x000008, "Wrong size on AthenaEventMatchScoreboardScreenBase_OnSquadEliminated");
static_assert(offsetof(AthenaEventMatchScoreboardScreenBase_OnSquadEliminated, InSquadData) == 0x000000, "Member 'AthenaEventMatchScoreboardScreenBase_OnSquadEliminated::InSquadData' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchScoreboardScreenBase.OnSquadKillscoreChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchScoreboardScreenBase_OnSquadKillscoreChanged final
{
public:
	class UAthenaRemoteSquadViewData*             InSquadData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InKillScore;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchScoreboardScreenBase_OnSquadKillscoreChanged) == 0x000008, "Wrong alignment on AthenaEventMatchScoreboardScreenBase_OnSquadKillscoreChanged");
static_assert(sizeof(AthenaEventMatchScoreboardScreenBase_OnSquadKillscoreChanged) == 0x000010, "Wrong size on AthenaEventMatchScoreboardScreenBase_OnSquadKillscoreChanged");
static_assert(offsetof(AthenaEventMatchScoreboardScreenBase_OnSquadKillscoreChanged, InSquadData) == 0x000000, "Member 'AthenaEventMatchScoreboardScreenBase_OnSquadKillscoreChanged::InSquadData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchScoreboardScreenBase_OnSquadKillscoreChanged, InKillScore) == 0x000008, "Member 'AthenaEventMatchScoreboardScreenBase_OnSquadKillscoreChanged::InKillScore' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchScoreboardScreenBase.SetSquadIdsVisible
// 0x0001 (0x0001 - 0x0000)
struct AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible final
{
public:
	bool                                          bSquadIdsVisible;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible) == 0x000001, "Wrong alignment on AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible");
static_assert(sizeof(AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible) == 0x000001, "Wrong size on AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible");
static_assert(offsetof(AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible, bSquadIdsVisible) == 0x000000, "Member 'AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible::bSquadIdsVisible' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchScoreboardScreenBase.SetSquadIdsVisible_BP
// 0x0001 (0x0001 - 0x0000)
struct AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible_BP final
{
public:
	bool                                          bSquadIdsVisible;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible_BP) == 0x000001, "Wrong alignment on AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible_BP");
static_assert(sizeof(AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible_BP) == 0x000001, "Wrong size on AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible_BP");
static_assert(offsetof(AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible_BP, bSquadIdsVisible) == 0x000000, "Member 'AthenaEventMatchScoreboardScreenBase_SetSquadIdsVisible_BP::bSquadIdsVisible' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.BindToFeatureStateAndInitialize
// 0x0014 (0x0014 - 0x0000)
struct FortFrontEndContext_BindToFeatureStateAndInitialize final
{
public:
	EFortFrontEndFeature                          Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EFortFrontEndFeature ChangedFeature, EFortFrontEndFeatureState NewState, EFortFrontEndFeatureStateReason Reason)> Delegate;                                          // 0x0004(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_BindToFeatureStateAndInitialize) == 0x000004, "Wrong alignment on FortFrontEndContext_BindToFeatureStateAndInitialize");
static_assert(sizeof(FortFrontEndContext_BindToFeatureStateAndInitialize) == 0x000014, "Wrong size on FortFrontEndContext_BindToFeatureStateAndInitialize");
static_assert(offsetof(FortFrontEndContext_BindToFeatureStateAndInitialize, Feature) == 0x000000, "Member 'FortFrontEndContext_BindToFeatureStateAndInitialize::Feature' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_BindToFeatureStateAndInitialize, Delegate) == 0x000004, "Member 'FortFrontEndContext_BindToFeatureStateAndInitialize::Delegate' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.BroadcastMainTabSelected
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_BroadcastMainTabSelected final
{
public:
	class FName                                   TabName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_BroadcastMainTabSelected) == 0x000004, "Wrong alignment on FortFrontEndContext_BroadcastMainTabSelected");
static_assert(sizeof(FortFrontEndContext_BroadcastMainTabSelected) == 0x000008, "Wrong size on FortFrontEndContext_BroadcastMainTabSelected");
static_assert(offsetof(FortFrontEndContext_BroadcastMainTabSelected, TabName) == 0x000000, "Member 'FortFrontEndContext_BroadcastMainTabSelected::TabName' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.CanFindTileForQuest
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_CanFindTileForQuest final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_CanFindTileForQuest) == 0x000008, "Wrong alignment on FortFrontEndContext_CanFindTileForQuest");
static_assert(sizeof(FortFrontEndContext_CanFindTileForQuest) == 0x000010, "Wrong size on FortFrontEndContext_CanFindTileForQuest");
static_assert(offsetof(FortFrontEndContext_CanFindTileForQuest, QuestItem) == 0x000000, "Member 'FortFrontEndContext_CanFindTileForQuest::QuestItem' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_CanFindTileForQuest, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_CanFindTileForQuest::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.ClearLocalPreview
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndContext_ClearLocalPreview final
{
public:
	bool                                          StopUsingLocalPreview;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_ClearLocalPreview) == 0x000001, "Wrong alignment on FortFrontEndContext_ClearLocalPreview");
static_assert(sizeof(FortFrontEndContext_ClearLocalPreview) == 0x000001, "Wrong size on FortFrontEndContext_ClearLocalPreview");
static_assert(offsetof(FortFrontEndContext_ClearLocalPreview, StopUsingLocalPreview) == 0x000000, "Member 'FortFrontEndContext_ClearLocalPreview::StopUsingLocalPreview' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.DisplayAthenaCosmetic
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_DisplayAthenaCosmetic final
{
public:
	const class UAthenaCosmeticItemDefinition*    CosmeticItemDef;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariantPreviewIdx;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_DisplayAthenaCosmetic) == 0x000008, "Wrong alignment on FortFrontEndContext_DisplayAthenaCosmetic");
static_assert(sizeof(FortFrontEndContext_DisplayAthenaCosmetic) == 0x000010, "Wrong size on FortFrontEndContext_DisplayAthenaCosmetic");
static_assert(offsetof(FortFrontEndContext_DisplayAthenaCosmetic, CosmeticItemDef) == 0x000000, "Member 'FortFrontEndContext_DisplayAthenaCosmetic::CosmeticItemDef' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_DisplayAthenaCosmetic, VariantPreviewIdx) == 0x000008, "Member 'FortFrontEndContext_DisplayAthenaCosmetic::VariantPreviewIdx' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.ForceSetFeatureState
// 0x0003 (0x0003 - 0x0000)
struct FortFrontEndContext_ForceSetFeatureState final
{
public:
	EFortFrontEndFeature                          Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontEndFeatureState                     State;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontEndFeatureStateReason               Reason;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_ForceSetFeatureState) == 0x000001, "Wrong alignment on FortFrontEndContext_ForceSetFeatureState");
static_assert(sizeof(FortFrontEndContext_ForceSetFeatureState) == 0x000003, "Wrong size on FortFrontEndContext_ForceSetFeatureState");
static_assert(offsetof(FortFrontEndContext_ForceSetFeatureState, Feature) == 0x000000, "Member 'FortFrontEndContext_ForceSetFeatureState::Feature' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_ForceSetFeatureState, State) == 0x000001, "Member 'FortFrontEndContext_ForceSetFeatureState::State' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_ForceSetFeatureState, Reason) == 0x000002, "Member 'FortFrontEndContext_ForceSetFeatureState::Reason' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetCurrentLockerSubslotIndex
// 0x0004 (0x0004 - 0x0000)
struct FortFrontEndContext_GetCurrentLockerSubslotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetCurrentLockerSubslotIndex) == 0x000004, "Wrong alignment on FortFrontEndContext_GetCurrentLockerSubslotIndex");
static_assert(sizeof(FortFrontEndContext_GetCurrentLockerSubslotIndex) == 0x000004, "Wrong size on FortFrontEndContext_GetCurrentLockerSubslotIndex");
static_assert(offsetof(FortFrontEndContext_GetCurrentLockerSubslotIndex, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetCurrentLockerSubslotIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetHeroPlayerPawnByIndex
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_GetHeroPlayerPawnByIndex final
{
public:
	int32                                         PartyMemberIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetHeroPlayerPawnByIndex) == 0x000008, "Wrong alignment on FortFrontEndContext_GetHeroPlayerPawnByIndex");
static_assert(sizeof(FortFrontEndContext_GetHeroPlayerPawnByIndex) == 0x000010, "Wrong size on FortFrontEndContext_GetHeroPlayerPawnByIndex");
static_assert(offsetof(FortFrontEndContext_GetHeroPlayerPawnByIndex, PartyMemberIndex) == 0x000000, "Member 'FortFrontEndContext_GetHeroPlayerPawnByIndex::PartyMemberIndex' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetHeroPlayerPawnByIndex, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_GetHeroPlayerPawnByIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetHeroPlayerPawnForCurrentDisplayedItem
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_GetHeroPlayerPawnForCurrentDisplayedItem final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetHeroPlayerPawnForCurrentDisplayedItem) == 0x000008, "Wrong alignment on FortFrontEndContext_GetHeroPlayerPawnForCurrentDisplayedItem");
static_assert(sizeof(FortFrontEndContext_GetHeroPlayerPawnForCurrentDisplayedItem) == 0x000008, "Wrong size on FortFrontEndContext_GetHeroPlayerPawnForCurrentDisplayedItem");
static_assert(offsetof(FortFrontEndContext_GetHeroPlayerPawnForCurrentDisplayedItem, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetHeroPlayerPawnForCurrentDisplayedItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetMeshForCurrentDisplayedItem
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_GetMeshForCurrentDisplayedItem final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetMeshForCurrentDisplayedItem) == 0x000008, "Wrong alignment on FortFrontEndContext_GetMeshForCurrentDisplayedItem");
static_assert(sizeof(FortFrontEndContext_GetMeshForCurrentDisplayedItem) == 0x000008, "Wrong size on FortFrontEndContext_GetMeshForCurrentDisplayedItem");
static_assert(offsetof(FortFrontEndContext_GetMeshForCurrentDisplayedItem, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetMeshForCurrentDisplayedItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetPrefabActorForCurrentDisplayedItem
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_GetPrefabActorForCurrentDisplayedItem final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetPrefabActorForCurrentDisplayedItem) == 0x000008, "Wrong alignment on FortFrontEndContext_GetPrefabActorForCurrentDisplayedItem");
static_assert(sizeof(FortFrontEndContext_GetPrefabActorForCurrentDisplayedItem) == 0x000008, "Wrong size on FortFrontEndContext_GetPrefabActorForCurrentDisplayedItem");
static_assert(offsetof(FortFrontEndContext_GetPrefabActorForCurrentDisplayedItem, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetPrefabActorForCurrentDisplayedItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetSeasonTabVariantPreviewInfo
// 0x0028 (0x0028 - 0x0000)
struct FortFrontEndContext_GetSeasonTabVariantPreviewInfo final
{
public:
	struct FUnlockableVariantPreviewInfo          ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetSeasonTabVariantPreviewInfo) == 0x000008, "Wrong alignment on FortFrontEndContext_GetSeasonTabVariantPreviewInfo");
static_assert(sizeof(FortFrontEndContext_GetSeasonTabVariantPreviewInfo) == 0x000028, "Wrong size on FortFrontEndContext_GetSeasonTabVariantPreviewInfo");
static_assert(offsetof(FortFrontEndContext_GetSeasonTabVariantPreviewInfo, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetSeasonTabVariantPreviewInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetSelectableGadgets
// 0x0020 (0x0020 - 0x0000)
struct FortFrontEndContext_GetSelectableGadgets final
{
public:
	TArray<class UFortWorldItem*>                 SelectableGadgets;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortWorldItem*>                 LastSelectedGadgets;                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetSelectableGadgets) == 0x000008, "Wrong alignment on FortFrontEndContext_GetSelectableGadgets");
static_assert(sizeof(FortFrontEndContext_GetSelectableGadgets) == 0x000020, "Wrong size on FortFrontEndContext_GetSelectableGadgets");
static_assert(offsetof(FortFrontEndContext_GetSelectableGadgets, SelectableGadgets) == 0x000000, "Member 'FortFrontEndContext_GetSelectableGadgets::SelectableGadgets' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetSelectableGadgets, LastSelectedGadgets) == 0x000010, "Member 'FortFrontEndContext_GetSelectableGadgets::LastSelectedGadgets' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetVariantDataForMemberIndex
// 0x0020 (0x0020 - 0x0000)
struct FortFrontEndContext_GetVariantDataForMemberIndex final
{
public:
	int32                                         MemberIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDisplayManagerVariantData             ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetVariantDataForMemberIndex) == 0x000008, "Wrong alignment on FortFrontEndContext_GetVariantDataForMemberIndex");
static_assert(sizeof(FortFrontEndContext_GetVariantDataForMemberIndex) == 0x000020, "Wrong size on FortFrontEndContext_GetVariantDataForMemberIndex");
static_assert(offsetof(FortFrontEndContext_GetVariantDataForMemberIndex, MemberIndex) == 0x000000, "Member 'FortFrontEndContext_GetVariantDataForMemberIndex::MemberIndex' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetVariantDataForMemberIndex, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_GetVariantDataForMemberIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.IsActiveTileMissionValid
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndContext_IsActiveTileMissionValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_IsActiveTileMissionValid) == 0x000001, "Wrong alignment on FortFrontEndContext_IsActiveTileMissionValid");
static_assert(sizeof(FortFrontEndContext_IsActiveTileMissionValid) == 0x000001, "Wrong size on FortFrontEndContext_IsActiveTileMissionValid");
static_assert(offsetof(FortFrontEndContext_IsActiveTileMissionValid, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_IsActiveTileMissionValid::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.IsCelebrateEffectPlaying
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndContext_IsCelebrateEffectPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_IsCelebrateEffectPlaying) == 0x000001, "Wrong alignment on FortFrontEndContext_IsCelebrateEffectPlaying");
static_assert(sizeof(FortFrontEndContext_IsCelebrateEffectPlaying) == 0x000001, "Wrong size on FortFrontEndContext_IsCelebrateEffectPlaying");
static_assert(offsetof(FortFrontEndContext_IsCelebrateEffectPlaying, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_IsCelebrateEffectPlaying::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.PreviewCatalogOfferItems
// 0x0238 (0x0238 - 0x0000)
struct FortFrontEndContext_PreviewCatalogOfferItems final
{
public:
	struct FCatalogOffer                          CatalogOffer;                                      // 0x0000(0x0238)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_PreviewCatalogOfferItems) == 0x000008, "Wrong alignment on FortFrontEndContext_PreviewCatalogOfferItems");
static_assert(sizeof(FortFrontEndContext_PreviewCatalogOfferItems) == 0x000238, "Wrong size on FortFrontEndContext_PreviewCatalogOfferItems");
static_assert(offsetof(FortFrontEndContext_PreviewCatalogOfferItems, CatalogOffer) == 0x000000, "Member 'FortFrontEndContext_PreviewCatalogOfferItems::CatalogOffer' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.PushContentWidget_Adv
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_PushContentWidget_Adv final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideHeader;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideFooter;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChatWidget;                                   // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_PushContentWidget_Adv) == 0x000008, "Wrong alignment on FortFrontEndContext_PushContentWidget_Adv");
static_assert(sizeof(FortFrontEndContext_PushContentWidget_Adv) == 0x000010, "Wrong size on FortFrontEndContext_PushContentWidget_Adv");
static_assert(offsetof(FortFrontEndContext_PushContentWidget_Adv, Widget) == 0x000000, "Member 'FortFrontEndContext_PushContentWidget_Adv::Widget' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_PushContentWidget_Adv, bHideHeader) == 0x000008, "Member 'FortFrontEndContext_PushContentWidget_Adv::bHideHeader' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_PushContentWidget_Adv, bHideFooter) == 0x000009, "Member 'FortFrontEndContext_PushContentWidget_Adv::bHideFooter' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_PushContentWidget_Adv, bHideChatWidget) == 0x00000A, "Member 'FortFrontEndContext_PushContentWidget_Adv::bHideChatWidget' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.SelectGadgetForSlot
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_SelectGadgetForSlot final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    GadgetDefinition;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_SelectGadgetForSlot) == 0x000008, "Wrong alignment on FortFrontEndContext_SelectGadgetForSlot");
static_assert(sizeof(FortFrontEndContext_SelectGadgetForSlot) == 0x000010, "Wrong size on FortFrontEndContext_SelectGadgetForSlot");
static_assert(offsetof(FortFrontEndContext_SelectGadgetForSlot, Slot) == 0x000000, "Member 'FortFrontEndContext_SelectGadgetForSlot::Slot' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_SelectGadgetForSlot, GadgetDefinition) == 0x000008, "Member 'FortFrontEndContext_SelectGadgetForSlot::GadgetDefinition' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.SelectTileForQuest
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_SelectTileForQuest final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCriticalMissionDifficultyOverrideMin;           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCriticalMissionDifficultyOverrideMax;           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_SelectTileForQuest) == 0x000008, "Wrong alignment on FortFrontEndContext_SelectTileForQuest");
static_assert(sizeof(FortFrontEndContext_SelectTileForQuest) == 0x000018, "Wrong size on FortFrontEndContext_SelectTileForQuest");
static_assert(offsetof(FortFrontEndContext_SelectTileForQuest, QuestItem) == 0x000000, "Member 'FortFrontEndContext_SelectTileForQuest::QuestItem' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_SelectTileForQuest, OutCriticalMissionDifficultyOverrideMin) == 0x000008, "Member 'FortFrontEndContext_SelectTileForQuest::OutCriticalMissionDifficultyOverrideMin' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_SelectTileForQuest, OutCriticalMissionDifficultyOverrideMax) == 0x00000C, "Member 'FortFrontEndContext_SelectTileForQuest::OutCriticalMissionDifficultyOverrideMax' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_SelectTileForQuest, ReturnValue) == 0x000010, "Member 'FortFrontEndContext_SelectTileForQuest::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.SendPlayQuestAnalytic
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_SendPlayQuestAnalytic final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_SendPlayQuestAnalytic) == 0x000008, "Wrong alignment on FortFrontEndContext_SendPlayQuestAnalytic");
static_assert(sizeof(FortFrontEndContext_SendPlayQuestAnalytic) == 0x000008, "Wrong size on FortFrontEndContext_SendPlayQuestAnalytic");
static_assert(offsetof(FortFrontEndContext_SendPlayQuestAnalytic, QuestItem) == 0x000000, "Member 'FortFrontEndContext_SendPlayQuestAnalytic::QuestItem' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.SetCurrentLockerSubslotIndex
// 0x0004 (0x0004 - 0x0000)
struct FortFrontEndContext_SetCurrentLockerSubslotIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_SetCurrentLockerSubslotIndex) == 0x000004, "Wrong alignment on FortFrontEndContext_SetCurrentLockerSubslotIndex");
static_assert(sizeof(FortFrontEndContext_SetCurrentLockerSubslotIndex) == 0x000004, "Wrong size on FortFrontEndContext_SetCurrentLockerSubslotIndex");
static_assert(offsetof(FortFrontEndContext_SetCurrentLockerSubslotIndex, NewIndex) == 0x000000, "Member 'FortFrontEndContext_SetCurrentLockerSubslotIndex::NewIndex' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.SetDefaultLocalVariantPreview
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_SetDefaultLocalVariantPreview final
{
public:
	const class UAthenaCosmeticItemDefinition*    CosmeticItem;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_SetDefaultLocalVariantPreview) == 0x000008, "Wrong alignment on FortFrontEndContext_SetDefaultLocalVariantPreview");
static_assert(sizeof(FortFrontEndContext_SetDefaultLocalVariantPreview) == 0x000008, "Wrong size on FortFrontEndContext_SetDefaultLocalVariantPreview");
static_assert(offsetof(FortFrontEndContext_SetDefaultLocalVariantPreview, CosmeticItem) == 0x000000, "Member 'FortFrontEndContext_SetDefaultLocalVariantPreview::CosmeticItem' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.SetFrontEndCamera
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndContext_SetFrontEndCamera final
{
public:
	EFrontEndCamera                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_SetFrontEndCamera) == 0x000001, "Wrong alignment on FortFrontEndContext_SetFrontEndCamera");
static_assert(sizeof(FortFrontEndContext_SetFrontEndCamera) == 0x000001, "Wrong size on FortFrontEndContext_SetFrontEndCamera");
static_assert(offsetof(FortFrontEndContext_SetFrontEndCamera, NewState) == 0x000000, "Member 'FortFrontEndContext_SetFrontEndCamera::NewState' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.SetFrontEndVisibility
// 0x0003 (0x0003 - 0x0000)
struct FortFrontEndContext_SetFrontEndVisibility final
{
public:
	bool                                          bHideHeader;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideFooter;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChatWidget;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_SetFrontEndVisibility) == 0x000001, "Wrong alignment on FortFrontEndContext_SetFrontEndVisibility");
static_assert(sizeof(FortFrontEndContext_SetFrontEndVisibility) == 0x000003, "Wrong size on FortFrontEndContext_SetFrontEndVisibility");
static_assert(offsetof(FortFrontEndContext_SetFrontEndVisibility, bHideHeader) == 0x000000, "Member 'FortFrontEndContext_SetFrontEndVisibility::bHideHeader' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_SetFrontEndVisibility, bHideFooter) == 0x000001, "Member 'FortFrontEndContext_SetFrontEndVisibility::bHideFooter' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_SetFrontEndVisibility, bHideChatWidget) == 0x000002, "Member 'FortFrontEndContext_SetFrontEndVisibility::bHideChatWidget' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.SetLocalVariantPreview
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_SetLocalVariantPreview final
{
public:
	const class UAthenaCosmeticItemDefinition*    CosmeticItem;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VariantChannelTag;                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VariantTag;                                        // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_SetLocalVariantPreview) == 0x000008, "Wrong alignment on FortFrontEndContext_SetLocalVariantPreview");
static_assert(sizeof(FortFrontEndContext_SetLocalVariantPreview) == 0x000018, "Wrong size on FortFrontEndContext_SetLocalVariantPreview");
static_assert(offsetof(FortFrontEndContext_SetLocalVariantPreview, CosmeticItem) == 0x000000, "Member 'FortFrontEndContext_SetLocalVariantPreview::CosmeticItem' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_SetLocalVariantPreview, VariantChannelTag) == 0x000008, "Member 'FortFrontEndContext_SetLocalVariantPreview::VariantChannelTag' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_SetLocalVariantPreview, VariantTag) == 0x000010, "Member 'FortFrontEndContext_SetLocalVariantPreview::VariantTag' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.SetSeasonTabVariantPreviewInfo
// 0x0028 (0x0028 - 0x0000)
struct FortFrontEndContext_SetSeasonTabVariantPreviewInfo final
{
public:
	struct FUnlockableVariantPreviewInfo          Info;                                              // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_SetSeasonTabVariantPreviewInfo) == 0x000008, "Wrong alignment on FortFrontEndContext_SetSeasonTabVariantPreviewInfo");
static_assert(sizeof(FortFrontEndContext_SetSeasonTabVariantPreviewInfo) == 0x000028, "Wrong size on FortFrontEndContext_SetSeasonTabVariantPreviewInfo");
static_assert(offsetof(FortFrontEndContext_SetSeasonTabVariantPreviewInfo, Info) == 0x000000, "Member 'FortFrontEndContext_SetSeasonTabVariantPreviewInfo::Info' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.SetSelectedTheater
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_SetSelectedTheater final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_SetSelectedTheater) == 0x000008, "Wrong alignment on FortFrontEndContext_SetSelectedTheater");
static_assert(sizeof(FortFrontEndContext_SetSelectedTheater) == 0x000010, "Wrong size on FortFrontEndContext_SetSelectedTheater");
static_assert(offsetof(FortFrontEndContext_SetSelectedTheater, TheaterId) == 0x000000, "Member 'FortFrontEndContext_SetSelectedTheater::TheaterId' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.ShowSocialImport
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_ShowSocialImport final
{
public:
	TSubclassOf<class UFortSocialImportPanel>     PanelClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSocialImportPanel*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_ShowSocialImport) == 0x000008, "Wrong alignment on FortFrontEndContext_ShowSocialImport");
static_assert(sizeof(FortFrontEndContext_ShowSocialImport) == 0x000010, "Wrong size on FortFrontEndContext_ShowSocialImport");
static_assert(offsetof(FortFrontEndContext_ShowSocialImport, PanelClass) == 0x000000, "Member 'FortFrontEndContext_ShowSocialImport::PanelClass' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_ShowSocialImport, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_ShowSocialImport::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.ViewVaultItem
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_ViewVaultItem final
{
public:
	class UFortItem*                              ItemToView;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCurrentlyEquppedFavorites;                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_ViewVaultItem) == 0x000008, "Wrong alignment on FortFrontEndContext_ViewVaultItem");
static_assert(sizeof(FortFrontEndContext_ViewVaultItem) == 0x000010, "Wrong size on FortFrontEndContext_ViewVaultItem");
static_assert(offsetof(FortFrontEndContext_ViewVaultItem, ItemToView) == 0x000000, "Member 'FortFrontEndContext_ViewVaultItem::ItemToView' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_ViewVaultItem, bIgnoreCurrentlyEquppedFavorites) == 0x000008, "Member 'FortFrontEndContext_ViewVaultItem::bIgnoreCurrentlyEquppedFavorites' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.ViewVaultItemFromDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_ViewVaultItemFromDefinition final
{
public:
	const class UFortItemDefinition*              ItemToViewDefinition;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCurrentlyEquppedFavorites;                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_ViewVaultItemFromDefinition) == 0x000008, "Wrong alignment on FortFrontEndContext_ViewVaultItemFromDefinition");
static_assert(sizeof(FortFrontEndContext_ViewVaultItemFromDefinition) == 0x000010, "Wrong size on FortFrontEndContext_ViewVaultItemFromDefinition");
static_assert(offsetof(FortFrontEndContext_ViewVaultItemFromDefinition, ItemToViewDefinition) == 0x000000, "Member 'FortFrontEndContext_ViewVaultItemFromDefinition::ItemToViewDefinition' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_ViewVaultItemFromDefinition, bIgnoreCurrentlyEquppedFavorites) == 0x000008, "Member 'FortFrontEndContext_ViewVaultItemFromDefinition::bIgnoreCurrentlyEquppedFavorites' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.ViewVaultItems
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_ViewVaultItems final
{
public:
	TArray<class UFortItem*>                      ItemsToView;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCurrentlyEquppedFavorites;                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_ViewVaultItems) == 0x000008, "Wrong alignment on FortFrontEndContext_ViewVaultItems");
static_assert(sizeof(FortFrontEndContext_ViewVaultItems) == 0x000018, "Wrong size on FortFrontEndContext_ViewVaultItems");
static_assert(offsetof(FortFrontEndContext_ViewVaultItems, ItemsToView) == 0x000000, "Member 'FortFrontEndContext_ViewVaultItems::ItemsToView' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_ViewVaultItems, bIgnoreCurrentlyEquppedFavorites) == 0x000010, "Member 'FortFrontEndContext_ViewVaultItems::bIgnoreCurrentlyEquppedFavorites' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.ViewVaultItemsFromOffer
// 0x0240 (0x0240 - 0x0000)
struct FortFrontEndContext_ViewVaultItemsFromOffer final
{
public:
	struct FCatalogOffer                          CatalogOffer;                                      // 0x0000(0x0238)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCurrentlyEquppedFavorites;                  // 0x0238(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_ViewVaultItemsFromOffer) == 0x000008, "Wrong alignment on FortFrontEndContext_ViewVaultItemsFromOffer");
static_assert(sizeof(FortFrontEndContext_ViewVaultItemsFromOffer) == 0x000240, "Wrong size on FortFrontEndContext_ViewVaultItemsFromOffer");
static_assert(offsetof(FortFrontEndContext_ViewVaultItemsFromOffer, CatalogOffer) == 0x000000, "Member 'FortFrontEndContext_ViewVaultItemsFromOffer::CatalogOffer' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_ViewVaultItemsFromOffer, bIgnoreCurrentlyEquppedFavorites) == 0x000238, "Member 'FortFrontEndContext_ViewVaultItemsFromOffer::bIgnoreCurrentlyEquppedFavorites' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.AreProfilesAvailableForWriting
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndContext_AreProfilesAvailableForWriting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_AreProfilesAvailableForWriting) == 0x000001, "Wrong alignment on FortFrontEndContext_AreProfilesAvailableForWriting");
static_assert(sizeof(FortFrontEndContext_AreProfilesAvailableForWriting) == 0x000001, "Wrong size on FortFrontEndContext_AreProfilesAvailableForWriting");
static_assert(offsetof(FortFrontEndContext_AreProfilesAvailableForWriting, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_AreProfilesAvailableForWriting::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.AreProfilesAvailableToWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndContext_AreProfilesAvailableToWIFE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_AreProfilesAvailableToWIFE) == 0x000001, "Wrong alignment on FortFrontEndContext_AreProfilesAvailableToWIFE");
static_assert(sizeof(FortFrontEndContext_AreProfilesAvailableToWIFE) == 0x000001, "Wrong size on FortFrontEndContext_AreProfilesAvailableToWIFE");
static_assert(offsetof(FortFrontEndContext_AreProfilesAvailableToWIFE, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_AreProfilesAvailableToWIFE::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.CanCompleteQuestInActiveTileMission
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_CanCompleteQuestInActiveTileMission final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_CanCompleteQuestInActiveTileMission) == 0x000008, "Wrong alignment on FortFrontEndContext_CanCompleteQuestInActiveTileMission");
static_assert(sizeof(FortFrontEndContext_CanCompleteQuestInActiveTileMission) == 0x000010, "Wrong size on FortFrontEndContext_CanCompleteQuestInActiveTileMission");
static_assert(offsetof(FortFrontEndContext_CanCompleteQuestInActiveTileMission, QuestItem) == 0x000000, "Member 'FortFrontEndContext_CanCompleteQuestInActiveTileMission::QuestItem' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_CanCompleteQuestInActiveTileMission, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_CanCompleteQuestInActiveTileMission::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.CanCompleteQuestInFocusedOrActiveTileMission
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_CanCompleteQuestInFocusedOrActiveTileMission final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_CanCompleteQuestInFocusedOrActiveTileMission) == 0x000008, "Wrong alignment on FortFrontEndContext_CanCompleteQuestInFocusedOrActiveTileMission");
static_assert(sizeof(FortFrontEndContext_CanCompleteQuestInFocusedOrActiveTileMission) == 0x000010, "Wrong size on FortFrontEndContext_CanCompleteQuestInFocusedOrActiveTileMission");
static_assert(offsetof(FortFrontEndContext_CanCompleteQuestInFocusedOrActiveTileMission, QuestItem) == 0x000000, "Member 'FortFrontEndContext_CanCompleteQuestInFocusedOrActiveTileMission::QuestItem' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_CanCompleteQuestInFocusedOrActiveTileMission, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_CanCompleteQuestInFocusedOrActiveTileMission::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.CanShowLockerSlotType
// 0x0002 (0x0002 - 0x0000)
struct FortFrontEndContext_CanShowLockerSlotType final
{
public:
	EAthenaCustomizationCategory                  SlotType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_CanShowLockerSlotType) == 0x000001, "Wrong alignment on FortFrontEndContext_CanShowLockerSlotType");
static_assert(sizeof(FortFrontEndContext_CanShowLockerSlotType) == 0x000002, "Wrong size on FortFrontEndContext_CanShowLockerSlotType");
static_assert(offsetof(FortFrontEndContext_CanShowLockerSlotType, SlotType) == 0x000000, "Member 'FortFrontEndContext_CanShowLockerSlotType::SlotType' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_CanShowLockerSlotType, ReturnValue) == 0x000001, "Member 'FortFrontEndContext_CanShowLockerSlotType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetAccountLevelUpRewards
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetAccountLevelUpRewards final
{
public:
	TArray<struct FFortItemQuantityPair>          Rewards;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AccountLevel;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetAccountLevelUpRewards) == 0x000008, "Wrong alignment on FortFrontEndContext_GetAccountLevelUpRewards");
static_assert(sizeof(FortFrontEndContext_GetAccountLevelUpRewards) == 0x000018, "Wrong size on FortFrontEndContext_GetAccountLevelUpRewards");
static_assert(offsetof(FortFrontEndContext_GetAccountLevelUpRewards, Rewards) == 0x000000, "Member 'FortFrontEndContext_GetAccountLevelUpRewards::Rewards' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetAccountLevelUpRewards, AccountLevel) == 0x000010, "Member 'FortFrontEndContext_GetAccountLevelUpRewards::AccountLevel' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetActiveTile
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_GetActiveTile final
{
public:
	class AFortTheaterMapTile*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetActiveTile) == 0x000008, "Wrong alignment on FortFrontEndContext_GetActiveTile");
static_assert(sizeof(FortFrontEndContext_GetActiveTile) == 0x000008, "Wrong size on FortFrontEndContext_GetActiveTile");
static_assert(offsetof(FortFrontEndContext_GetActiveTile, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetActiveTile::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetActiveTileMissionDetails
// 0x0170 (0x0170 - 0x0000)
struct FortFrontEndContext_GetActiveTileMissionDetails final
{
public:
	struct FFortMissionDetails                    MissionDetails;                                    // 0x0000(0x0168)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0168(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetActiveTileMissionDetails) == 0x000008, "Wrong alignment on FortFrontEndContext_GetActiveTileMissionDetails");
static_assert(sizeof(FortFrontEndContext_GetActiveTileMissionDetails) == 0x000170, "Wrong size on FortFrontEndContext_GetActiveTileMissionDetails");
static_assert(offsetof(FortFrontEndContext_GetActiveTileMissionDetails, MissionDetails) == 0x000000, "Member 'FortFrontEndContext_GetActiveTileMissionDetails::MissionDetails' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetActiveTileMissionDetails, ReturnValue) == 0x000168, "Member 'FortFrontEndContext_GetActiveTileMissionDetails::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetAllTheaterData
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetAllTheaterData final
{
public:
	TArray<struct FFortTheaterMapData>            OutAllTheaterData;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetAllTheaterData) == 0x000008, "Wrong alignment on FortFrontEndContext_GetAllTheaterData");
static_assert(sizeof(FortFrontEndContext_GetAllTheaterData) == 0x000018, "Wrong size on FortFrontEndContext_GetAllTheaterData");
static_assert(offsetof(FortFrontEndContext_GetAllTheaterData, OutAllTheaterData) == 0x000000, "Member 'FortFrontEndContext_GetAllTheaterData::OutAllTheaterData' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetAllTheaterData, ReturnValue) == 0x000010, "Member 'FortFrontEndContext_GetAllTheaterData::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetAttributeDescription
// 0x00B0 (0x00B0 - 0x0000)
struct FortFrontEndContext_GetAttributeDescription final
{
public:
	struct FFortAttributeInfo                     InAttribute;                                       // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InRequiredTags;                                    // 0x0078(0x0020)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0098(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetAttributeDescription) == 0x000008, "Wrong alignment on FortFrontEndContext_GetAttributeDescription");
static_assert(sizeof(FortFrontEndContext_GetAttributeDescription) == 0x0000B0, "Wrong size on FortFrontEndContext_GetAttributeDescription");
static_assert(offsetof(FortFrontEndContext_GetAttributeDescription, InAttribute) == 0x000000, "Member 'FortFrontEndContext_GetAttributeDescription::InAttribute' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetAttributeDescription, InRequiredTags) == 0x000078, "Member 'FortFrontEndContext_GetAttributeDescription::InRequiredTags' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetAttributeDescription, ReturnValue) == 0x000098, "Member 'FortFrontEndContext_GetAttributeDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetAttributeDisplayName
// 0x00B0 (0x00B0 - 0x0000)
struct FortFrontEndContext_GetAttributeDisplayName final
{
public:
	struct FFortAttributeInfo                     InAttribute;                                       // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InRequiredTags;                                    // 0x0078(0x0020)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0098(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetAttributeDisplayName) == 0x000008, "Wrong alignment on FortFrontEndContext_GetAttributeDisplayName");
static_assert(sizeof(FortFrontEndContext_GetAttributeDisplayName) == 0x0000B0, "Wrong size on FortFrontEndContext_GetAttributeDisplayName");
static_assert(offsetof(FortFrontEndContext_GetAttributeDisplayName, InAttribute) == 0x000000, "Member 'FortFrontEndContext_GetAttributeDisplayName::InAttribute' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetAttributeDisplayName, InRequiredTags) == 0x000078, "Member 'FortFrontEndContext_GetAttributeDisplayName::InRequiredTags' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetAttributeDisplayName, ReturnValue) == 0x000098, "Member 'FortFrontEndContext_GetAttributeDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetAttributeIcon
// 0x03C8 (0x03C8 - 0x0000)
struct FortFrontEndContext_GetAttributeIcon final
{
public:
	struct FFortAttributeInfo                     InAttribute;                                       // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InRequiredTags;                                    // 0x0078(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    ReturnValue;                                       // 0x0098(0x0330)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetAttributeIcon) == 0x000008, "Wrong alignment on FortFrontEndContext_GetAttributeIcon");
static_assert(sizeof(FortFrontEndContext_GetAttributeIcon) == 0x0003C8, "Wrong size on FortFrontEndContext_GetAttributeIcon");
static_assert(offsetof(FortFrontEndContext_GetAttributeIcon, InAttribute) == 0x000000, "Member 'FortFrontEndContext_GetAttributeIcon::InAttribute' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetAttributeIcon, InRequiredTags) == 0x000078, "Member 'FortFrontEndContext_GetAttributeIcon::InRequiredTags' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetAttributeIcon, ReturnValue) == 0x000098, "Member 'FortFrontEndContext_GetAttributeIcon::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetAvailableDifficulties
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetAvailableDifficulties final
{
public:
	bool                                          bIncludeMissionAlertTiles;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameDifficultyInfo>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetAvailableDifficulties) == 0x000008, "Wrong alignment on FortFrontEndContext_GetAvailableDifficulties");
static_assert(sizeof(FortFrontEndContext_GetAvailableDifficulties) == 0x000018, "Wrong size on FortFrontEndContext_GetAvailableDifficulties");
static_assert(offsetof(FortFrontEndContext_GetAvailableDifficulties, bIncludeMissionAlertTiles) == 0x000000, "Member 'FortFrontEndContext_GetAvailableDifficulties::bIncludeMissionAlertTiles' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetAvailableDifficulties, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_GetAvailableDifficulties::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetCriticalMissionRewards
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_GetCriticalMissionRewards final
{
public:
	TArray<struct FFortMissionRewardInfo>         RewardList;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetCriticalMissionRewards) == 0x000008, "Wrong alignment on FortFrontEndContext_GetCriticalMissionRewards");
static_assert(sizeof(FortFrontEndContext_GetCriticalMissionRewards) == 0x000010, "Wrong size on FortFrontEndContext_GetCriticalMissionRewards");
static_assert(offsetof(FortFrontEndContext_GetCriticalMissionRewards, RewardList) == 0x000000, "Member 'FortFrontEndContext_GetCriticalMissionRewards::RewardList' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetCurrentTheaterName
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetCurrentTheaterName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetCurrentTheaterName) == 0x000008, "Wrong alignment on FortFrontEndContext_GetCurrentTheaterName");
static_assert(sizeof(FortFrontEndContext_GetCurrentTheaterName) == 0x000018, "Wrong size on FortFrontEndContext_GetCurrentTheaterName");
static_assert(offsetof(FortFrontEndContext_GetCurrentTheaterName, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetCurrentTheaterName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetDefenderSquadIDByTheaterID
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetDefenderSquadIDByTheaterID final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetDefenderSquadIDByTheaterID) == 0x000008, "Wrong alignment on FortFrontEndContext_GetDefenderSquadIDByTheaterID");
static_assert(sizeof(FortFrontEndContext_GetDefenderSquadIDByTheaterID) == 0x000018, "Wrong size on FortFrontEndContext_GetDefenderSquadIDByTheaterID");
static_assert(offsetof(FortFrontEndContext_GetDefenderSquadIDByTheaterID, TheaterId) == 0x000000, "Member 'FortFrontEndContext_GetDefenderSquadIDByTheaterID::TheaterId' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetDefenderSquadIDByTheaterID, ReturnValue) == 0x000010, "Member 'FortFrontEndContext_GetDefenderSquadIDByTheaterID::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetDesiredPlayButtonCamera
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndContext_GetDesiredPlayButtonCamera final
{
public:
	EFrontEndCamera                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetDesiredPlayButtonCamera) == 0x000001, "Wrong alignment on FortFrontEndContext_GetDesiredPlayButtonCamera");
static_assert(sizeof(FortFrontEndContext_GetDesiredPlayButtonCamera) == 0x000001, "Wrong size on FortFrontEndContext_GetDesiredPlayButtonCamera");
static_assert(offsetof(FortFrontEndContext_GetDesiredPlayButtonCamera, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetDesiredPlayButtonCamera::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetFabricatorDisintegrationSecondsRemaining
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_GetFabricatorDisintegrationSecondsRemaining final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetFabricatorDisintegrationSecondsRemaining) == 0x000004, "Wrong alignment on FortFrontEndContext_GetFabricatorDisintegrationSecondsRemaining");
static_assert(sizeof(FortFrontEndContext_GetFabricatorDisintegrationSecondsRemaining) == 0x000008, "Wrong size on FortFrontEndContext_GetFabricatorDisintegrationSecondsRemaining");
static_assert(offsetof(FortFrontEndContext_GetFabricatorDisintegrationSecondsRemaining, TheaterSlot) == 0x000000, "Member 'FortFrontEndContext_GetFabricatorDisintegrationSecondsRemaining::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetFabricatorDisintegrationSecondsRemaining, ReturnValue) == 0x000004, "Member 'FortFrontEndContext_GetFabricatorDisintegrationSecondsRemaining::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetFabricatorIncomingGooAmount
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_GetFabricatorIncomingGooAmount final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetFabricatorIncomingGooAmount) == 0x000004, "Wrong alignment on FortFrontEndContext_GetFabricatorIncomingGooAmount");
static_assert(sizeof(FortFrontEndContext_GetFabricatorIncomingGooAmount) == 0x000008, "Wrong size on FortFrontEndContext_GetFabricatorIncomingGooAmount");
static_assert(offsetof(FortFrontEndContext_GetFabricatorIncomingGooAmount, TheaterSlot) == 0x000000, "Member 'FortFrontEndContext_GetFabricatorIncomingGooAmount::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetFabricatorIncomingGooAmount, ReturnValue) == 0x000004, "Member 'FortFrontEndContext_GetFabricatorIncomingGooAmount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetFabricatorStoredGooAmount
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_GetFabricatorStoredGooAmount final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetFabricatorStoredGooAmount) == 0x000004, "Wrong alignment on FortFrontEndContext_GetFabricatorStoredGooAmount");
static_assert(sizeof(FortFrontEndContext_GetFabricatorStoredGooAmount) == 0x000008, "Wrong size on FortFrontEndContext_GetFabricatorStoredGooAmount");
static_assert(offsetof(FortFrontEndContext_GetFabricatorStoredGooAmount, TheaterSlot) == 0x000000, "Member 'FortFrontEndContext_GetFabricatorStoredGooAmount::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetFabricatorStoredGooAmount, ReturnValue) == 0x000004, "Member 'FortFrontEndContext_GetFabricatorStoredGooAmount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetFeatureState
// 0x0003 (0x0003 - 0x0000)
struct FortFrontEndContext_GetFeatureState final
{
public:
	EFortFrontEndFeature                          Feature;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontEndFeatureState                     OutFeatureState;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontEndFeatureStateReason               OutReason;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetFeatureState) == 0x000001, "Wrong alignment on FortFrontEndContext_GetFeatureState");
static_assert(sizeof(FortFrontEndContext_GetFeatureState) == 0x000003, "Wrong size on FortFrontEndContext_GetFeatureState");
static_assert(offsetof(FortFrontEndContext_GetFeatureState, Feature) == 0x000000, "Member 'FortFrontEndContext_GetFeatureState::Feature' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetFeatureState, OutFeatureState) == 0x000001, "Member 'FortFrontEndContext_GetFeatureState::OutFeatureState' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetFeatureState, OutReason) == 0x000002, "Member 'FortFrontEndContext_GetFeatureState::OutReason' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetFeatureStateReasonText
// 0x0020 (0x0020 - 0x0000)
struct FortFrontEndContext_GetFeatureStateReasonText final
{
public:
	EFortFrontEndFeatureStateReason               Reason;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetFeatureStateReasonText) == 0x000008, "Wrong alignment on FortFrontEndContext_GetFeatureStateReasonText");
static_assert(sizeof(FortFrontEndContext_GetFeatureStateReasonText) == 0x000020, "Wrong size on FortFrontEndContext_GetFeatureStateReasonText");
static_assert(offsetof(FortFrontEndContext_GetFeatureStateReasonText, Reason) == 0x000000, "Member 'FortFrontEndContext_GetFeatureStateReasonText::Reason' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetFeatureStateReasonText, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_GetFeatureStateReasonText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetFocusedOrActiveTile
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_GetFocusedOrActiveTile final
{
public:
	class AFortTheaterMapTile*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetFocusedOrActiveTile) == 0x000008, "Wrong alignment on FortFrontEndContext_GetFocusedOrActiveTile");
static_assert(sizeof(FortFrontEndContext_GetFocusedOrActiveTile) == 0x000008, "Wrong size on FortFrontEndContext_GetFocusedOrActiveTile");
static_assert(offsetof(FortFrontEndContext_GetFocusedOrActiveTile, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetFocusedOrActiveTile::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetFocusedOrActiveTileMissionDetails
// 0x0170 (0x0170 - 0x0000)
struct FortFrontEndContext_GetFocusedOrActiveTileMissionDetails final
{
public:
	struct FFortMissionDetails                    MissionDetails;                                    // 0x0000(0x0168)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0168(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetFocusedOrActiveTileMissionDetails) == 0x000008, "Wrong alignment on FortFrontEndContext_GetFocusedOrActiveTileMissionDetails");
static_assert(sizeof(FortFrontEndContext_GetFocusedOrActiveTileMissionDetails) == 0x000170, "Wrong size on FortFrontEndContext_GetFocusedOrActiveTileMissionDetails");
static_assert(offsetof(FortFrontEndContext_GetFocusedOrActiveTileMissionDetails, MissionDetails) == 0x000000, "Member 'FortFrontEndContext_GetFocusedOrActiveTileMissionDetails::MissionDetails' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetFocusedOrActiveTileMissionDetails, ReturnValue) == 0x000168, "Member 'FortFrontEndContext_GetFocusedOrActiveTileMissionDetails::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetFocusedTile
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_GetFocusedTile final
{
public:
	class AFortTheaterMapTile*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetFocusedTile) == 0x000008, "Wrong alignment on FortFrontEndContext_GetFocusedTile");
static_assert(sizeof(FortFrontEndContext_GetFocusedTile) == 0x000008, "Wrong size on FortFrontEndContext_GetFocusedTile");
static_assert(offsetof(FortFrontEndContext_GetFocusedTile, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetFocusedTile::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetFrontEndCamera
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndContext_GetFrontEndCamera final
{
public:
	EFrontEndCamera                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetFrontEndCamera) == 0x000001, "Wrong alignment on FortFrontEndContext_GetFrontEndCamera");
static_assert(sizeof(FortFrontEndContext_GetFrontEndCamera) == 0x000001, "Wrong size on FortFrontEndContext_GetFrontEndCamera");
static_assert(offsetof(FortFrontEndContext_GetFrontEndCamera, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetFrontEndCamera::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetHarvestingToolForLevel
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_GetHarvestingToolForLevel final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHarvestingOptimizerLevel;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetHarvestingToolForLevel) == 0x000008, "Wrong alignment on FortFrontEndContext_GetHarvestingToolForLevel");
static_assert(sizeof(FortFrontEndContext_GetHarvestingToolForLevel) == 0x000010, "Wrong size on FortFrontEndContext_GetHarvestingToolForLevel");
static_assert(offsetof(FortFrontEndContext_GetHarvestingToolForLevel, TheaterSlot) == 0x000000, "Member 'FortFrontEndContext_GetHarvestingToolForLevel::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetHarvestingToolForLevel, InHarvestingOptimizerLevel) == 0x000004, "Member 'FortFrontEndContext_GetHarvestingToolForLevel::InHarvestingOptimizerLevel' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetHarvestingToolForLevel, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_GetHarvestingToolForLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetHighestEnduranceWaveReachedByItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_GetHighestEnduranceWaveReachedByItemDefinition final
{
public:
	class UFortOutpostItemDefinition*             OutpostCoreItemDef;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighestWaveNumber;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetHighestEnduranceWaveReachedByItemDefinition) == 0x000008, "Wrong alignment on FortFrontEndContext_GetHighestEnduranceWaveReachedByItemDefinition");
static_assert(sizeof(FortFrontEndContext_GetHighestEnduranceWaveReachedByItemDefinition) == 0x000010, "Wrong size on FortFrontEndContext_GetHighestEnduranceWaveReachedByItemDefinition");
static_assert(offsetof(FortFrontEndContext_GetHighestEnduranceWaveReachedByItemDefinition, OutpostCoreItemDef) == 0x000000, "Member 'FortFrontEndContext_GetHighestEnduranceWaveReachedByItemDefinition::OutpostCoreItemDef' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetHighestEnduranceWaveReachedByItemDefinition, HighestWaveNumber) == 0x000008, "Member 'FortFrontEndContext_GetHighestEnduranceWaveReachedByItemDefinition::HighestWaveNumber' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetHighestEnduranceWaveReachedByItemDefinition, ReturnValue) == 0x00000C, "Member 'FortFrontEndContext_GetHighestEnduranceWaveReachedByItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetItemFromItemQuantityPair
// 0x0048 (0x0048 - 0x0000)
struct FortFrontEndContext_GetItemFromItemQuantityPair final
{
public:
	struct FFortItemQuantityPair                  InPair;                                            // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetItemFromItemQuantityPair) == 0x000008, "Wrong alignment on FortFrontEndContext_GetItemFromItemQuantityPair");
static_assert(sizeof(FortFrontEndContext_GetItemFromItemQuantityPair) == 0x000048, "Wrong size on FortFrontEndContext_GetItemFromItemQuantityPair");
static_assert(offsetof(FortFrontEndContext_GetItemFromItemQuantityPair, InPair) == 0x000000, "Member 'FortFrontEndContext_GetItemFromItemQuantityPair::InPair' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetItemFromItemQuantityPair, ReturnValue) == 0x000040, "Member 'FortFrontEndContext_GetItemFromItemQuantityPair::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetLobbyBackgroundLevelName
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_GetLobbyBackgroundLevelName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetLobbyBackgroundLevelName) == 0x000004, "Wrong alignment on FortFrontEndContext_GetLobbyBackgroundLevelName");
static_assert(sizeof(FortFrontEndContext_GetLobbyBackgroundLevelName) == 0x000008, "Wrong size on FortFrontEndContext_GetLobbyBackgroundLevelName");
static_assert(offsetof(FortFrontEndContext_GetLobbyBackgroundLevelName, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetLobbyBackgroundLevelName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetMaxAvailableDifficulty
// 0x00A0 (0x00A0 - 0x0000)
struct FortFrontEndContext_GetMaxAvailableDifficulty final
{
public:
	bool                                          bIncludeMissionAlertTiles;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameDifficultyInfo                    ReturnValue;                                       // 0x0008(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetMaxAvailableDifficulty) == 0x000008, "Wrong alignment on FortFrontEndContext_GetMaxAvailableDifficulty");
static_assert(sizeof(FortFrontEndContext_GetMaxAvailableDifficulty) == 0x0000A0, "Wrong size on FortFrontEndContext_GetMaxAvailableDifficulty");
static_assert(offsetof(FortFrontEndContext_GetMaxAvailableDifficulty, bIncludeMissionAlertTiles) == 0x000000, "Member 'FortFrontEndContext_GetMaxAvailableDifficulty::bIncludeMissionAlertTiles' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetMaxAvailableDifficulty, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_GetMaxAvailableDifficulty::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetMCPRegion
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetMCPRegion final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetMCPRegion) == 0x000008, "Wrong alignment on FortFrontEndContext_GetMCPRegion");
static_assert(sizeof(FortFrontEndContext_GetMCPRegion) == 0x000018, "Wrong size on FortFrontEndContext_GetMCPRegion");
static_assert(offsetof(FortFrontEndContext_GetMCPRegion, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetMCPRegion::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetMCPRegionText
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetMCPRegionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetMCPRegionText) == 0x000008, "Wrong alignment on FortFrontEndContext_GetMCPRegionText");
static_assert(sizeof(FortFrontEndContext_GetMCPRegionText) == 0x000018, "Wrong size on FortFrontEndContext_GetMCPRegionText");
static_assert(offsetof(FortFrontEndContext_GetMCPRegionText, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetMCPRegionText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetOutpostCoreLevelByItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_GetOutpostCoreLevelByItemDefinition final
{
public:
	class UFortOutpostItemDefinition*             OutpostCoreItemDef;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutCoreLevel;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetOutpostCoreLevelByItemDefinition) == 0x000008, "Wrong alignment on FortFrontEndContext_GetOutpostCoreLevelByItemDefinition");
static_assert(sizeof(FortFrontEndContext_GetOutpostCoreLevelByItemDefinition) == 0x000010, "Wrong size on FortFrontEndContext_GetOutpostCoreLevelByItemDefinition");
static_assert(offsetof(FortFrontEndContext_GetOutpostCoreLevelByItemDefinition, OutpostCoreItemDef) == 0x000000, "Member 'FortFrontEndContext_GetOutpostCoreLevelByItemDefinition::OutpostCoreItemDef' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetOutpostCoreLevelByItemDefinition, OutCoreLevel) == 0x000008, "Member 'FortFrontEndContext_GetOutpostCoreLevelByItemDefinition::OutCoreLevel' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetOutpostCoreLevelByItemDefinition, ReturnValue) == 0x00000C, "Member 'FortFrontEndContext_GetOutpostCoreLevelByItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetOutpostCoreLevelByTheaterId
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetOutpostCoreLevelByTheaterId final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutCoreLevel;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetOutpostCoreLevelByTheaterId) == 0x000008, "Wrong alignment on FortFrontEndContext_GetOutpostCoreLevelByTheaterId");
static_assert(sizeof(FortFrontEndContext_GetOutpostCoreLevelByTheaterId) == 0x000018, "Wrong size on FortFrontEndContext_GetOutpostCoreLevelByTheaterId");
static_assert(offsetof(FortFrontEndContext_GetOutpostCoreLevelByTheaterId, TheaterId) == 0x000000, "Member 'FortFrontEndContext_GetOutpostCoreLevelByTheaterId::TheaterId' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetOutpostCoreLevelByTheaterId, OutCoreLevel) == 0x000010, "Member 'FortFrontEndContext_GetOutpostCoreLevelByTheaterId::OutCoreLevel' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetOutpostCoreLevelByTheaterId, ReturnValue) == 0x000014, "Member 'FortFrontEndContext_GetOutpostCoreLevelByTheaterId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetOutpostStructureMaxLevel
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetOutpostStructureMaxLevel final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortOutpostItemDefinition*             OutpostStructure;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetOutpostStructureMaxLevel) == 0x000008, "Wrong alignment on FortFrontEndContext_GetOutpostStructureMaxLevel");
static_assert(sizeof(FortFrontEndContext_GetOutpostStructureMaxLevel) == 0x000018, "Wrong size on FortFrontEndContext_GetOutpostStructureMaxLevel");
static_assert(offsetof(FortFrontEndContext_GetOutpostStructureMaxLevel, TheaterSlot) == 0x000000, "Member 'FortFrontEndContext_GetOutpostStructureMaxLevel::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetOutpostStructureMaxLevel, OutpostStructure) == 0x000008, "Member 'FortFrontEndContext_GetOutpostStructureMaxLevel::OutpostStructure' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetOutpostStructureMaxLevel, ReturnValue) == 0x000010, "Member 'FortFrontEndContext_GetOutpostStructureMaxLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetOutpostStructureUpgradeCost
// 0x0030 (0x0030 - 0x0000)
struct FortFrontEndContext_GetOutpostStructureUpgradeCost final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpgradeLevel;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortOutpostItemDefinition*             OutpostStructure;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutWorldItems;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutAccountItems;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetOutpostStructureUpgradeCost) == 0x000008, "Wrong alignment on FortFrontEndContext_GetOutpostStructureUpgradeCost");
static_assert(sizeof(FortFrontEndContext_GetOutpostStructureUpgradeCost) == 0x000030, "Wrong size on FortFrontEndContext_GetOutpostStructureUpgradeCost");
static_assert(offsetof(FortFrontEndContext_GetOutpostStructureUpgradeCost, TheaterSlot) == 0x000000, "Member 'FortFrontEndContext_GetOutpostStructureUpgradeCost::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetOutpostStructureUpgradeCost, UpgradeLevel) == 0x000004, "Member 'FortFrontEndContext_GetOutpostStructureUpgradeCost::UpgradeLevel' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetOutpostStructureUpgradeCost, OutpostStructure) == 0x000008, "Member 'FortFrontEndContext_GetOutpostStructureUpgradeCost::OutpostStructure' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetOutpostStructureUpgradeCost, OutWorldItems) == 0x000010, "Member 'FortFrontEndContext_GetOutpostStructureUpgradeCost::OutWorldItems' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetOutpostStructureUpgradeCost, OutAccountItems) == 0x000020, "Member 'FortFrontEndContext_GetOutpostStructureUpgradeCost::OutAccountItems' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetPostMaxAccountLevelUpRewards
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetPostMaxAccountLevelUpRewards final
{
public:
	TArray<struct FFortItemQuantityPair>          Rewards;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RewardOffset;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetPostMaxAccountLevelUpRewards) == 0x000008, "Wrong alignment on FortFrontEndContext_GetPostMaxAccountLevelUpRewards");
static_assert(sizeof(FortFrontEndContext_GetPostMaxAccountLevelUpRewards) == 0x000018, "Wrong size on FortFrontEndContext_GetPostMaxAccountLevelUpRewards");
static_assert(offsetof(FortFrontEndContext_GetPostMaxAccountLevelUpRewards, Rewards) == 0x000000, "Member 'FortFrontEndContext_GetPostMaxAccountLevelUpRewards::Rewards' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetPostMaxAccountLevelUpRewards, RewardOffset) == 0x000010, "Member 'FortFrontEndContext_GetPostMaxAccountLevelUpRewards::RewardOffset' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetReturnToFrontendBehavior
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndContext_GetReturnToFrontendBehavior final
{
public:
	EFortReturnToFrontendBehavior                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetReturnToFrontendBehavior) == 0x000001, "Wrong alignment on FortFrontEndContext_GetReturnToFrontendBehavior");
static_assert(sizeof(FortFrontEndContext_GetReturnToFrontendBehavior) == 0x000001, "Wrong size on FortFrontEndContext_GetReturnToFrontendBehavior");
static_assert(offsetof(FortFrontEndContext_GetReturnToFrontendBehavior, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetReturnToFrontendBehavior::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetSelectedTheaterData
// 0x0580 (0x0580 - 0x0000)
struct FortFrontEndContext_GetSelectedTheaterData final
{
public:
	struct FFortTheaterMapData                    OutTheaterData;                                    // 0x0000(0x0578)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0578(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetSelectedTheaterData) == 0x000008, "Wrong alignment on FortFrontEndContext_GetSelectedTheaterData");
static_assert(sizeof(FortFrontEndContext_GetSelectedTheaterData) == 0x000580, "Wrong size on FortFrontEndContext_GetSelectedTheaterData");
static_assert(offsetof(FortFrontEndContext_GetSelectedTheaterData, OutTheaterData) == 0x000000, "Member 'FortFrontEndContext_GetSelectedTheaterData::OutTheaterData' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetSelectedTheaterData, ReturnValue) == 0x000578, "Member 'FortFrontEndContext_GetSelectedTheaterData::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetSelectedTheaterId
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_GetSelectedTheaterId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetSelectedTheaterId) == 0x000008, "Wrong alignment on FortFrontEndContext_GetSelectedTheaterId");
static_assert(sizeof(FortFrontEndContext_GetSelectedTheaterId) == 0x000010, "Wrong size on FortFrontEndContext_GetSelectedTheaterId");
static_assert(offsetof(FortFrontEndContext_GetSelectedTheaterId, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetSelectedTheaterId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetTheaterData
// 0x0590 (0x0590 - 0x0000)
struct FortFrontEndContext_GetTheaterData final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTheaterMapData                    OutTheaterData;                                    // 0x0010(0x0578)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0588(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_589[0x7];                                      // 0x0589(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetTheaterData) == 0x000008, "Wrong alignment on FortFrontEndContext_GetTheaterData");
static_assert(sizeof(FortFrontEndContext_GetTheaterData) == 0x000590, "Wrong size on FortFrontEndContext_GetTheaterData");
static_assert(offsetof(FortFrontEndContext_GetTheaterData, TheaterId) == 0x000000, "Member 'FortFrontEndContext_GetTheaterData::TheaterId' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetTheaterData, OutTheaterData) == 0x000010, "Member 'FortFrontEndContext_GetTheaterData::OutTheaterData' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetTheaterData, ReturnValue) == 0x000588, "Member 'FortFrontEndContext_GetTheaterData::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetTheaterName
// 0x0028 (0x0028 - 0x0000)
struct FortFrontEndContext_GetTheaterName final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetTheaterName) == 0x000008, "Wrong alignment on FortFrontEndContext_GetTheaterName");
static_assert(sizeof(FortFrontEndContext_GetTheaterName) == 0x000028, "Wrong size on FortFrontEndContext_GetTheaterName");
static_assert(offsetof(FortFrontEndContext_GetTheaterName, TheaterId) == 0x000000, "Member 'FortFrontEndContext_GetTheaterName::TheaterId' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetTheaterName, ReturnValue) == 0x000010, "Member 'FortFrontEndContext_GetTheaterName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetTheaterRegionCount
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetTheaterRegionCount final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetTheaterRegionCount) == 0x000008, "Wrong alignment on FortFrontEndContext_GetTheaterRegionCount");
static_assert(sizeof(FortFrontEndContext_GetTheaterRegionCount) == 0x000018, "Wrong size on FortFrontEndContext_GetTheaterRegionCount");
static_assert(offsetof(FortFrontEndContext_GetTheaterRegionCount, TheaterId) == 0x000000, "Member 'FortFrontEndContext_GetTheaterRegionCount::TheaterId' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetTheaterRegionCount, ReturnValue) == 0x000010, "Member 'FortFrontEndContext_GetTheaterRegionCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetTheaterType
// 0x0018 (0x0018 - 0x0000)
struct FortFrontEndContext_GetTheaterType final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTheaterType                              ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetTheaterType) == 0x000008, "Wrong alignment on FortFrontEndContext_GetTheaterType");
static_assert(sizeof(FortFrontEndContext_GetTheaterType) == 0x000018, "Wrong size on FortFrontEndContext_GetTheaterType");
static_assert(offsetof(FortFrontEndContext_GetTheaterType, TheaterId) == 0x000000, "Member 'FortFrontEndContext_GetTheaterType::TheaterId' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetTheaterType, ReturnValue) == 0x000010, "Member 'FortFrontEndContext_GetTheaterType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetTileMissionDetails
// 0x0178 (0x0178 - 0x0000)
struct FortFrontEndContext_GetTileMissionDetails final
{
public:
	const class AFortTheaterMapTile*              Tile;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMissionDetails                    MissionDetails;                                    // 0x0008(0x0168)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0170(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_GetTileMissionDetails) == 0x000008, "Wrong alignment on FortFrontEndContext_GetTileMissionDetails");
static_assert(sizeof(FortFrontEndContext_GetTileMissionDetails) == 0x000178, "Wrong size on FortFrontEndContext_GetTileMissionDetails");
static_assert(offsetof(FortFrontEndContext_GetTileMissionDetails, Tile) == 0x000000, "Member 'FortFrontEndContext_GetTileMissionDetails::Tile' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetTileMissionDetails, MissionDetails) == 0x000008, "Member 'FortFrontEndContext_GetTileMissionDetails::MissionDetails' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_GetTileMissionDetails, ReturnValue) == 0x000170, "Member 'FortFrontEndContext_GetTileMissionDetails::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.GetUITestingClass
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_GetUITestingClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_GetUITestingClass) == 0x000008, "Wrong alignment on FortFrontEndContext_GetUITestingClass");
static_assert(sizeof(FortFrontEndContext_GetUITestingClass) == 0x000008, "Wrong size on FortFrontEndContext_GetUITestingClass");
static_assert(offsetof(FortFrontEndContext_GetUITestingClass, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_GetUITestingClass::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.Is4PlayerTile
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_Is4PlayerTile final
{
public:
	const class AFortTheaterMapTile*              Tile;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_Is4PlayerTile) == 0x000008, "Wrong alignment on FortFrontEndContext_Is4PlayerTile");
static_assert(sizeof(FortFrontEndContext_Is4PlayerTile) == 0x000010, "Wrong size on FortFrontEndContext_Is4PlayerTile");
static_assert(offsetof(FortFrontEndContext_Is4PlayerTile, Tile) == 0x000000, "Member 'FortFrontEndContext_Is4PlayerTile::Tile' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_Is4PlayerTile, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_Is4PlayerTile::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.IsTileMissionAlertRewardClaimed
// 0x0010 (0x0010 - 0x0000)
struct FortFrontEndContext_IsTileMissionAlertRewardClaimed final
{
public:
	const class AFortTheaterMapTile*              Tile;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_IsTileMissionAlertRewardClaimed) == 0x000008, "Wrong alignment on FortFrontEndContext_IsTileMissionAlertRewardClaimed");
static_assert(sizeof(FortFrontEndContext_IsTileMissionAlertRewardClaimed) == 0x000010, "Wrong size on FortFrontEndContext_IsTileMissionAlertRewardClaimed");
static_assert(offsetof(FortFrontEndContext_IsTileMissionAlertRewardClaimed, Tile) == 0x000000, "Member 'FortFrontEndContext_IsTileMissionAlertRewardClaimed::Tile' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_IsTileMissionAlertRewardClaimed, ReturnValue) == 0x000008, "Member 'FortFrontEndContext_IsTileMissionAlertRewardClaimed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.ShouldRunInitialBenchmark
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndContext_ShouldRunInitialBenchmark final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_ShouldRunInitialBenchmark) == 0x000001, "Wrong alignment on FortFrontEndContext_ShouldRunInitialBenchmark");
static_assert(sizeof(FortFrontEndContext_ShouldRunInitialBenchmark) == 0x000001, "Wrong size on FortFrontEndContext_ShouldRunInitialBenchmark");
static_assert(offsetof(FortFrontEndContext_ShouldRunInitialBenchmark, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_ShouldRunInitialBenchmark::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.ShouldShowSocialImport
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndContext_ShouldShowSocialImport final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_ShouldShowSocialImport) == 0x000001, "Wrong alignment on FortFrontEndContext_ShouldShowSocialImport");
static_assert(sizeof(FortFrontEndContext_ShouldShowSocialImport) == 0x000001, "Wrong size on FortFrontEndContext_ShouldShowSocialImport");
static_assert(offsetof(FortFrontEndContext_ShouldShowSocialImport, ReturnValue) == 0x000000, "Member 'FortFrontEndContext_ShouldShowSocialImport::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.TryGetAttributeInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FortFrontEndContext_TryGetAttributeInfo final
{
public:
	struct FGameplayAttribute                     GameplayAttribute;                                 // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAttributeInfo                     OutAttribute;                                      // 0x0020(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFrontEndContext_TryGetAttributeInfo) == 0x000008, "Wrong alignment on FortFrontEndContext_TryGetAttributeInfo");
static_assert(sizeof(FortFrontEndContext_TryGetAttributeInfo) == 0x0000A0, "Wrong size on FortFrontEndContext_TryGetAttributeInfo");
static_assert(offsetof(FortFrontEndContext_TryGetAttributeInfo, GameplayAttribute) == 0x000000, "Member 'FortFrontEndContext_TryGetAttributeInfo::GameplayAttribute' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_TryGetAttributeInfo, OutAttribute) == 0x000020, "Member 'FortFrontEndContext_TryGetAttributeInfo::OutAttribute' has a wrong offset!");
static_assert(offsetof(FortFrontEndContext_TryGetAttributeInfo, ReturnValue) == 0x000098, "Member 'FortFrontEndContext_TryGetAttributeInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontEndContext.UpdateNewAccountItemBangCounts
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndContext_UpdateNewAccountItemBangCounts final
{
public:
	class UFortInventoryContext*                  InventoryContext;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndContext_UpdateNewAccountItemBangCounts) == 0x000008, "Wrong alignment on FortFrontEndContext_UpdateNewAccountItemBangCounts");
static_assert(sizeof(FortFrontEndContext_UpdateNewAccountItemBangCounts) == 0x000008, "Wrong size on FortFrontEndContext_UpdateNewAccountItemBangCounts");
static_assert(offsetof(FortFrontEndContext_UpdateNewAccountItemBangCounts, InventoryContext) == 0x000000, "Member 'FortFrontEndContext_UpdateNewAccountItemBangCounts::InventoryContext' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.OnPlayerDeadStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDead;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged) == 0x000010, "Wrong size on AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged, bInIsDead) == 0x000008, "Member 'AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged::bInIsDead' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.OnPlayerDeadStateChanged_BP
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged_BP final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDead;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged_BP) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged_BP");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged_BP) == 0x000010, "Wrong size on AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged_BP");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged_BP, InPlayerData) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged_BP::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged_BP, bInIsDead) == 0x000008, "Member 'AthenaEventMatchStatusScreenBase_OnPlayerDeadStateChanged_BP::bInIsDead' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.OnPlayerKillScoreChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchStatusScreenBase_OnPlayerKillScoreChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InKillScore;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_OnPlayerKillScoreChanged) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_OnPlayerKillScoreChanged");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_OnPlayerKillScoreChanged) == 0x000010, "Wrong size on AthenaEventMatchStatusScreenBase_OnPlayerKillScoreChanged");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_OnPlayerKillScoreChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_OnPlayerKillScoreChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_OnPlayerKillScoreChanged, InKillScore) == 0x000008, "Member 'AthenaEventMatchStatusScreenBase_OnPlayerKillScoreChanged::InKillScore' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateChestsLootedText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateChestsLootedText final
{
public:
	class FText                                   ChestsLootedText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateChestsLootedText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateChestsLootedText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateChestsLootedText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateChestsLootedText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateChestsLootedText, ChestsLootedText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateChestsLootedText::ChestsLootedText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateCircleRadiusText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateCircleRadiusText final
{
public:
	class FText                                   CircleRadiusText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateCircleRadiusText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateCircleRadiusText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateCircleRadiusText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateCircleRadiusText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateCircleRadiusText, CircleRadiusText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateCircleRadiusText::CircleRadiusText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateDamageHealedText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateDamageHealedText final
{
public:
	class FText                                   DamageHealedText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateDamageHealedText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateDamageHealedText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateDamageHealedText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateDamageHealedText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateDamageHealedText, DamageHealedText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateDamageHealedText::DamageHealedText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateDamageInflictedText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateDamageInflictedText final
{
public:
	class FText                                   DamageInflictedText;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateDamageInflictedText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateDamageInflictedText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateDamageInflictedText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateDamageInflictedText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateDamageInflictedText, DamageInflictedText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateDamageInflictedText::DamageInflictedText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateDamageTakenText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateDamageTakenText final
{
public:
	class FText                                   DamageTakenText;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateDamageTakenText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateDamageTakenText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateDamageTakenText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateDamageTakenText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateDamageTakenText, DamageTakenText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateDamageTakenText::DamageTakenText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateFastestKillText
// 0x0030 (0x0030 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateFastestKillText final
{
public:
	class FText                                   FastestKillText;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   FastestKillTime;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateFastestKillText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateFastestKillText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateFastestKillText) == 0x000030, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateFastestKillText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateFastestKillText, FastestKillText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateFastestKillText::FastestKillText' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateFastestKillText, FastestKillTime) == 0x000018, "Member 'AthenaEventMatchStatusScreenBase_UpdateFastestKillText::FastestKillTime' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateGamePhaseText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateGamePhaseText final
{
public:
	class FText                                   GamePhaseText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateGamePhaseText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateGamePhaseText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateGamePhaseText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateGamePhaseText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateGamePhaseText, GamePhaseText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateGamePhaseText::GamePhaseText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateGamePhaseTimeText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeText final
{
public:
	class FText                                   GamePhaseTimeText;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeText, GamePhaseTimeText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeText::GamePhaseTimeText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateGamePhaseTimeTitleText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeTitleText final
{
public:
	class FText                                   GamePhaseTimeTitleText;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeTitleText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeTitleText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeTitleText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeTitleText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeTitleText, GamePhaseTimeTitleText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateGamePhaseTimeTitleText::GamePhaseTimeTitleText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateLongestEliminationScore
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateLongestEliminationScore final
{
public:
	class FText                                   LongestEliminationScore;                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateLongestEliminationScore) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateLongestEliminationScore");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateLongestEliminationScore) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateLongestEliminationScore");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateLongestEliminationScore, LongestEliminationScore) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateLongestEliminationScore::LongestEliminationScore' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateLongestEliminationText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateLongestEliminationText final
{
public:
	class FText                                   LongestEliminationText;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateLongestEliminationText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateLongestEliminationText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateLongestEliminationText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateLongestEliminationText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateLongestEliminationText, LongestEliminationText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateLongestEliminationText::LongestEliminationText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateMatchTimeText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateMatchTimeText final
{
public:
	class FText                                   MatchTimeText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateMatchTimeText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateMatchTimeText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateMatchTimeText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateMatchTimeText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateMatchTimeText, MatchTimeText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateMatchTimeText::MatchTimeText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateMostKillsScore
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateMostKillsScore final
{
public:
	class FText                                   MostKillsScore;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateMostKillsScore) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateMostKillsScore");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateMostKillsScore) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateMostKillsScore");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateMostKillsScore, MostKillsScore) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateMostKillsScore::MostKillsScore' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateMostKillsText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateMostKillsText final
{
public:
	class FText                                   MostKillsText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateMostKillsText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateMostKillsText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateMostKillsText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateMostKillsText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateMostKillsText, MostKillsText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateMostKillsText::MostKillsText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdatePiecesBuiltText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdatePiecesBuiltText final
{
public:
	class FText                                   PiecesBuiltText;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdatePiecesBuiltText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdatePiecesBuiltText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdatePiecesBuiltText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdatePiecesBuiltText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdatePiecesBuiltText, PiecesBuiltText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdatePiecesBuiltText::PiecesBuiltText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdatePiecesDestroyedText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdatePiecesDestroyedText final
{
public:
	class FText                                   PiecesDestroyedText;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdatePiecesDestroyedText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdatePiecesDestroyedText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdatePiecesDestroyedText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdatePiecesDestroyedText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdatePiecesDestroyedText, PiecesDestroyedText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdatePiecesDestroyedText::PiecesDestroyedText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdatePlayersRemainingText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdatePlayersRemainingText final
{
public:
	class FText                                   PlayersRemainingText;                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdatePlayersRemainingText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdatePlayersRemainingText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdatePlayersRemainingText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdatePlayersRemainingText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdatePlayersRemainingText, PlayersRemainingText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdatePlayersRemainingText::PlayersRemainingText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateShotsFiredText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateShotsFiredText final
{
public:
	class FText                                   ShotsFiredText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateShotsFiredText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateShotsFiredText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateShotsFiredText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateShotsFiredText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateShotsFiredText, ShotsFiredText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateShotsFiredText::ShotsFiredText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateSupplyDropsLootedText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateSupplyDropsLootedText final
{
public:
	class FText                                   SupplyDropsLootedText;                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateSupplyDropsLootedText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateSupplyDropsLootedText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateSupplyDropsLootedText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateSupplyDropsLootedText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateSupplyDropsLootedText, SupplyDropsLootedText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateSupplyDropsLootedText::SupplyDropsLootedText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchStatusScreenBase.UpdateTimeSinceLastKillText
// 0x0018 (0x0018 - 0x0000)
struct AthenaEventMatchStatusScreenBase_UpdateTimeSinceLastKillText final
{
public:
	class FText                                   TimeSinceLastKillText;                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchStatusScreenBase_UpdateTimeSinceLastKillText) == 0x000008, "Wrong alignment on AthenaEventMatchStatusScreenBase_UpdateTimeSinceLastKillText");
static_assert(sizeof(AthenaEventMatchStatusScreenBase_UpdateTimeSinceLastKillText) == 0x000018, "Wrong size on AthenaEventMatchStatusScreenBase_UpdateTimeSinceLastKillText");
static_assert(offsetof(AthenaEventMatchStatusScreenBase_UpdateTimeSinceLastKillText, TimeSinceLastKillText) == 0x000000, "Member 'AthenaEventMatchStatusScreenBase_UpdateTimeSinceLastKillText::TimeSinceLastKillText' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchTeamWidgetBase.OnPlayerDeadStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchTeamWidgetBase_OnPlayerDeadStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDead;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchTeamWidgetBase_OnPlayerDeadStateChanged) == 0x000008, "Wrong alignment on AthenaEventMatchTeamWidgetBase_OnPlayerDeadStateChanged");
static_assert(sizeof(AthenaEventMatchTeamWidgetBase_OnPlayerDeadStateChanged) == 0x000010, "Wrong size on AthenaEventMatchTeamWidgetBase_OnPlayerDeadStateChanged");
static_assert(offsetof(AthenaEventMatchTeamWidgetBase_OnPlayerDeadStateChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchTeamWidgetBase_OnPlayerDeadStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchTeamWidgetBase_OnPlayerDeadStateChanged, bInIsDead) == 0x000008, "Member 'AthenaEventMatchTeamWidgetBase_OnPlayerDeadStateChanged::bInIsDead' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchTeamWidgetBase.OnPlayerDisconnectedChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaEventMatchTeamWidgetBase_OnPlayerDisconnectedChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDisconnected;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaEventMatchTeamWidgetBase_OnPlayerDisconnectedChanged) == 0x000008, "Wrong alignment on AthenaEventMatchTeamWidgetBase_OnPlayerDisconnectedChanged");
static_assert(sizeof(AthenaEventMatchTeamWidgetBase_OnPlayerDisconnectedChanged) == 0x000010, "Wrong size on AthenaEventMatchTeamWidgetBase_OnPlayerDisconnectedChanged");
static_assert(offsetof(AthenaEventMatchTeamWidgetBase_OnPlayerDisconnectedChanged, InPlayerData) == 0x000000, "Member 'AthenaEventMatchTeamWidgetBase_OnPlayerDisconnectedChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaEventMatchTeamWidgetBase_OnPlayerDisconnectedChanged, bInIsDisconnected) == 0x000008, "Member 'AthenaEventMatchTeamWidgetBase_OnPlayerDisconnectedChanged::bInIsDisconnected' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchTeamWidgetBase.GetTeamKills
// 0x0004 (0x0004 - 0x0000)
struct AthenaEventMatchTeamWidgetBase_GetTeamKills final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchTeamWidgetBase_GetTeamKills) == 0x000004, "Wrong alignment on AthenaEventMatchTeamWidgetBase_GetTeamKills");
static_assert(sizeof(AthenaEventMatchTeamWidgetBase_GetTeamKills) == 0x000004, "Wrong size on AthenaEventMatchTeamWidgetBase_GetTeamKills");
static_assert(offsetof(AthenaEventMatchTeamWidgetBase_GetTeamKills, ReturnValue) == 0x000000, "Member 'AthenaEventMatchTeamWidgetBase_GetTeamKills::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaEventMatchTeamWidgetBase.IsTeamDead
// 0x0001 (0x0001 - 0x0000)
struct AthenaEventMatchTeamWidgetBase_IsTeamDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEventMatchTeamWidgetBase_IsTeamDead) == 0x000001, "Wrong alignment on AthenaEventMatchTeamWidgetBase_IsTeamDead");
static_assert(sizeof(AthenaEventMatchTeamWidgetBase_IsTeamDead) == 0x000001, "Wrong size on AthenaEventMatchTeamWidgetBase_IsTeamDead");
static_assert(offsetof(AthenaEventMatchTeamWidgetBase_IsTeamDead, ReturnValue) == 0x000000, "Member 'AthenaEventMatchTeamWidgetBase_IsTeamDead::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortVoiceChatStatusIcon.SetImageColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct FortVoiceChatStatusIcon_SetImageColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVoiceChatStatusIcon_SetImageColorAndOpacity) == 0x000008, "Wrong alignment on FortVoiceChatStatusIcon_SetImageColorAndOpacity");
static_assert(sizeof(FortVoiceChatStatusIcon_SetImageColorAndOpacity) == 0x000028, "Wrong size on FortVoiceChatStatusIcon_SetImageColorAndOpacity");
static_assert(offsetof(FortVoiceChatStatusIcon_SetImageColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'FortVoiceChatStatusIcon_SetImageColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.MakeMessageData
// 0x0068 (0x0068 - 0x0000)
struct MinigameWidgetBase_MakeMessageData final
{
public:
	EAthenaGameMsgType                            MsgType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MsgText;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class USoundCue*                              MsgSound;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAthenaGameMessageData                 ReturnValue;                                       // 0x0030(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_MakeMessageData) == 0x000008, "Wrong alignment on MinigameWidgetBase_MakeMessageData");
static_assert(sizeof(MinigameWidgetBase_MakeMessageData) == 0x000068, "Wrong size on MinigameWidgetBase_MakeMessageData");
static_assert(offsetof(MinigameWidgetBase_MakeMessageData, MsgType) == 0x000000, "Member 'MinigameWidgetBase_MakeMessageData::MsgType' has a wrong offset!");
static_assert(offsetof(MinigameWidgetBase_MakeMessageData, MsgText) == 0x000008, "Member 'MinigameWidgetBase_MakeMessageData::MsgText' has a wrong offset!");
static_assert(offsetof(MinigameWidgetBase_MakeMessageData, MsgSound) == 0x000020, "Member 'MinigameWidgetBase_MakeMessageData::MsgSound' has a wrong offset!");
static_assert(offsetof(MinigameWidgetBase_MakeMessageData, DisplayTime) == 0x000028, "Member 'MinigameWidgetBase_MakeMessageData::DisplayTime' has a wrong offset!");
static_assert(offsetof(MinigameWidgetBase_MakeMessageData, ReturnValue) == 0x000030, "Member 'MinigameWidgetBase_MakeMessageData::ReturnValue' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.DynamicHandleLoadingScreenVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct MinigameWidgetBase_DynamicHandleLoadingScreenVisibilityChanged final
{
public:
	bool                                          Param_IsVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_DynamicHandleLoadingScreenVisibilityChanged) == 0x000001, "Wrong alignment on MinigameWidgetBase_DynamicHandleLoadingScreenVisibilityChanged");
static_assert(sizeof(MinigameWidgetBase_DynamicHandleLoadingScreenVisibilityChanged) == 0x000001, "Wrong size on MinigameWidgetBase_DynamicHandleLoadingScreenVisibilityChanged");
static_assert(offsetof(MinigameWidgetBase_DynamicHandleLoadingScreenVisibilityChanged, Param_IsVisible) == 0x000000, "Member 'MinigameWidgetBase_DynamicHandleLoadingScreenVisibilityChanged::Param_IsVisible' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnCurrentStateChangedDelegate
// 0x0001 (0x0001 - 0x0000)
struct MinigameWidgetBase_OnCurrentStateChangedDelegate final
{
public:
	EFortMinigameState                            MinigameState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnCurrentStateChangedDelegate) == 0x000001, "Wrong alignment on MinigameWidgetBase_OnCurrentStateChangedDelegate");
static_assert(sizeof(MinigameWidgetBase_OnCurrentStateChangedDelegate) == 0x000001, "Wrong size on MinigameWidgetBase_OnCurrentStateChangedDelegate");
static_assert(offsetof(MinigameWidgetBase_OnCurrentStateChangedDelegate, MinigameState) == 0x000000, "Member 'MinigameWidgetBase_OnCurrentStateChangedDelegate::MinigameState' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnDisplayCaptureObjectiveUI
// 0x0001 (0x0001 - 0x0000)
struct MinigameWidgetBase_OnDisplayCaptureObjectiveUI final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnDisplayCaptureObjectiveUI) == 0x000001, "Wrong alignment on MinigameWidgetBase_OnDisplayCaptureObjectiveUI");
static_assert(sizeof(MinigameWidgetBase_OnDisplayCaptureObjectiveUI) == 0x000001, "Wrong size on MinigameWidgetBase_OnDisplayCaptureObjectiveUI");
static_assert(offsetof(MinigameWidgetBase_OnDisplayCaptureObjectiveUI, bDisplay) == 0x000000, "Member 'MinigameWidgetBase_OnDisplayCaptureObjectiveUI::bDisplay' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnDisplayLeavingVolumeUI
// 0x0001 (0x0001 - 0x0000)
struct MinigameWidgetBase_OnDisplayLeavingVolumeUI final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnDisplayLeavingVolumeUI) == 0x000001, "Wrong alignment on MinigameWidgetBase_OnDisplayLeavingVolumeUI");
static_assert(sizeof(MinigameWidgetBase_OnDisplayLeavingVolumeUI) == 0x000001, "Wrong size on MinigameWidgetBase_OnDisplayLeavingVolumeUI");
static_assert(offsetof(MinigameWidgetBase_OnDisplayLeavingVolumeUI, bDisplay) == 0x000000, "Member 'MinigameWidgetBase_OnDisplayLeavingVolumeUI::bDisplay' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnDisplayMiniGameAbortUI
// 0x0001 (0x0001 - 0x0000)
struct MinigameWidgetBase_OnDisplayMiniGameAbortUI final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnDisplayMiniGameAbortUI) == 0x000001, "Wrong alignment on MinigameWidgetBase_OnDisplayMiniGameAbortUI");
static_assert(sizeof(MinigameWidgetBase_OnDisplayMiniGameAbortUI) == 0x000001, "Wrong size on MinigameWidgetBase_OnDisplayMiniGameAbortUI");
static_assert(offsetof(MinigameWidgetBase_OnDisplayMiniGameAbortUI, bDisplay) == 0x000000, "Member 'MinigameWidgetBase_OnDisplayMiniGameAbortUI::bDisplay' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnDisplayMinigameEndUI
// 0x0001 (0x0001 - 0x0000)
struct MinigameWidgetBase_OnDisplayMinigameEndUI final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnDisplayMinigameEndUI) == 0x000001, "Wrong alignment on MinigameWidgetBase_OnDisplayMinigameEndUI");
static_assert(sizeof(MinigameWidgetBase_OnDisplayMinigameEndUI) == 0x000001, "Wrong size on MinigameWidgetBase_OnDisplayMinigameEndUI");
static_assert(offsetof(MinigameWidgetBase_OnDisplayMinigameEndUI, bDisplay) == 0x000000, "Member 'MinigameWidgetBase_OnDisplayMinigameEndUI::bDisplay' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnDisplayMinigameInProgressUI
// 0x0001 (0x0001 - 0x0000)
struct MinigameWidgetBase_OnDisplayMinigameInProgressUI final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnDisplayMinigameInProgressUI) == 0x000001, "Wrong alignment on MinigameWidgetBase_OnDisplayMinigameInProgressUI");
static_assert(sizeof(MinigameWidgetBase_OnDisplayMinigameInProgressUI) == 0x000001, "Wrong size on MinigameWidgetBase_OnDisplayMinigameInProgressUI");
static_assert(offsetof(MinigameWidgetBase_OnDisplayMinigameInProgressUI, bDisplay) == 0x000000, "Member 'MinigameWidgetBase_OnDisplayMinigameInProgressUI::bDisplay' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnDisplayMinigamePregameCountdownUI
// 0x0001 (0x0001 - 0x0000)
struct MinigameWidgetBase_OnDisplayMinigamePregameCountdownUI final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnDisplayMinigamePregameCountdownUI) == 0x000001, "Wrong alignment on MinigameWidgetBase_OnDisplayMinigamePregameCountdownUI");
static_assert(sizeof(MinigameWidgetBase_OnDisplayMinigamePregameCountdownUI) == 0x000001, "Wrong size on MinigameWidgetBase_OnDisplayMinigamePregameCountdownUI");
static_assert(offsetof(MinigameWidgetBase_OnDisplayMinigamePregameCountdownUI, bDisplay) == 0x000000, "Member 'MinigameWidgetBase_OnDisplayMinigamePregameCountdownUI::bDisplay' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnDisplayMinigameStartUI
// 0x0001 (0x0001 - 0x0000)
struct MinigameWidgetBase_OnDisplayMinigameStartUI final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnDisplayMinigameStartUI) == 0x000001, "Wrong alignment on MinigameWidgetBase_OnDisplayMinigameStartUI");
static_assert(sizeof(MinigameWidgetBase_OnDisplayMinigameStartUI) == 0x000001, "Wrong size on MinigameWidgetBase_OnDisplayMinigameStartUI");
static_assert(offsetof(MinigameWidgetBase_OnDisplayMinigameStartUI, bDisplay) == 0x000000, "Member 'MinigameWidgetBase_OnDisplayMinigameStartUI::bDisplay' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnEnteredVolume
// 0x0010 (0x0010 - 0x0000)
struct MinigameWidgetBase_OnEnteredVolume final
{
public:
	class APlayerState*                           ClientState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortVolume*                            EnteredVolume;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnEnteredVolume) == 0x000008, "Wrong alignment on MinigameWidgetBase_OnEnteredVolume");
static_assert(sizeof(MinigameWidgetBase_OnEnteredVolume) == 0x000010, "Wrong size on MinigameWidgetBase_OnEnteredVolume");
static_assert(offsetof(MinigameWidgetBase_OnEnteredVolume, ClientState) == 0x000000, "Member 'MinigameWidgetBase_OnEnteredVolume::ClientState' has a wrong offset!");
static_assert(offsetof(MinigameWidgetBase_OnEnteredVolume, EnteredVolume) == 0x000008, "Member 'MinigameWidgetBase_OnEnteredVolume::EnteredVolume' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnExitingVolume
// 0x0010 (0x0010 - 0x0000)
struct MinigameWidgetBase_OnExitingVolume final
{
public:
	class APlayerState*                           ClientState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortVolume*                            ExitingVolume;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnExitingVolume) == 0x000008, "Wrong alignment on MinigameWidgetBase_OnExitingVolume");
static_assert(sizeof(MinigameWidgetBase_OnExitingVolume) == 0x000010, "Wrong size on MinigameWidgetBase_OnExitingVolume");
static_assert(offsetof(MinigameWidgetBase_OnExitingVolume, ClientState) == 0x000000, "Member 'MinigameWidgetBase_OnExitingVolume::ClientState' has a wrong offset!");
static_assert(offsetof(MinigameWidgetBase_OnExitingVolume, ExitingVolume) == 0x000008, "Member 'MinigameWidgetBase_OnExitingVolume::ExitingVolume' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnExitVolume
// 0x0010 (0x0010 - 0x0000)
struct MinigameWidgetBase_OnExitVolume final
{
public:
	class APlayerState*                           ClientState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortVolume*                            ExitedVolume;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnExitVolume) == 0x000008, "Wrong alignment on MinigameWidgetBase_OnExitVolume");
static_assert(sizeof(MinigameWidgetBase_OnExitVolume) == 0x000010, "Wrong size on MinigameWidgetBase_OnExitVolume");
static_assert(offsetof(MinigameWidgetBase_OnExitVolume, ClientState) == 0x000000, "Member 'MinigameWidgetBase_OnExitVolume::ClientState' has a wrong offset!");
static_assert(offsetof(MinigameWidgetBase_OnExitVolume, ExitedVolume) == 0x000008, "Member 'MinigameWidgetBase_OnExitVolume::ExitedVolume' has a wrong offset!");

// Function FortniteUI.MinigameWidgetBase.OnStopExitingVolume
// 0x0010 (0x0010 - 0x0000)
struct MinigameWidgetBase_OnStopExitingVolume final
{
public:
	class APlayerState*                           ClientState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortVolume*                            ExitedVolume;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameWidgetBase_OnStopExitingVolume) == 0x000008, "Wrong alignment on MinigameWidgetBase_OnStopExitingVolume");
static_assert(sizeof(MinigameWidgetBase_OnStopExitingVolume) == 0x000010, "Wrong size on MinigameWidgetBase_OnStopExitingVolume");
static_assert(offsetof(MinigameWidgetBase_OnStopExitingVolume, ClientState) == 0x000000, "Member 'MinigameWidgetBase_OnStopExitingVolume::ClientState' has a wrong offset!");
static_assert(offsetof(MinigameWidgetBase_OnStopExitingVolume, ExitedVolume) == 0x000008, "Member 'MinigameWidgetBase_OnStopExitingVolume::ExitedVolume' has a wrong offset!");

// Function FortniteUI.AthenaGadgetFuelWidget.SetItem
// 0x0008 (0x0008 - 0x0000)
struct AthenaGadgetFuelWidget_SetItem final
{
public:
	class UFortWorldItem*                         Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaGadgetFuelWidget_SetItem) == 0x000008, "Wrong alignment on AthenaGadgetFuelWidget_SetItem");
static_assert(sizeof(AthenaGadgetFuelWidget_SetItem) == 0x000008, "Wrong size on AthenaGadgetFuelWidget_SetItem");
static_assert(offsetof(AthenaGadgetFuelWidget_SetItem, Item) == 0x000000, "Member 'AthenaGadgetFuelWidget_SetItem::Item' has a wrong offset!");

// Function FortniteUI.FortItemCollectorWidget.OnItemCollectorChanged
// 0x0008 (0x0008 - 0x0000)
struct FortItemCollectorWidget_OnItemCollectorChanged final
{
public:
	class ABuildingItemCollectorActor*            OutItemCollector;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCollectorWidget_OnItemCollectorChanged) == 0x000008, "Wrong alignment on FortItemCollectorWidget_OnItemCollectorChanged");
static_assert(sizeof(FortItemCollectorWidget_OnItemCollectorChanged) == 0x000008, "Wrong size on FortItemCollectorWidget_OnItemCollectorChanged");
static_assert(offsetof(FortItemCollectorWidget_OnItemCollectorChanged, OutItemCollector) == 0x000000, "Member 'FortItemCollectorWidget_OnItemCollectorChanged::OutItemCollector' has a wrong offset!");

// Function FortniteUI.FortItemCollectorWidget.OnItemCollectorStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortItemCollectorWidget_OnItemCollectorStateChanged final
{
public:
	EFortItemCollectorState                       ItemCollectorState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCollectorWidget_OnItemCollectorStateChanged) == 0x000001, "Wrong alignment on FortItemCollectorWidget_OnItemCollectorStateChanged");
static_assert(sizeof(FortItemCollectorWidget_OnItemCollectorStateChanged) == 0x000001, "Wrong size on FortItemCollectorWidget_OnItemCollectorStateChanged");
static_assert(offsetof(FortItemCollectorWidget_OnItemCollectorStateChanged, ItemCollectorState) == 0x000000, "Member 'FortItemCollectorWidget_OnItemCollectorStateChanged::ItemCollectorState' has a wrong offset!");

// Function FortniteUI.FortItemCollectorWidget.OnItemCollectorValuesChanged
// 0x0018 (0x0018 - 0x0000)
struct FortItemCollectorWidget_OnItemCollectorValuesChanged final
{
public:
	class UFortWorldItemDefinition*               InputItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Goal;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Deposit;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Captures;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemCollectorWidget_OnItemCollectorValuesChanged) == 0x000008, "Wrong alignment on FortItemCollectorWidget_OnItemCollectorValuesChanged");
static_assert(sizeof(FortItemCollectorWidget_OnItemCollectorValuesChanged) == 0x000018, "Wrong size on FortItemCollectorWidget_OnItemCollectorValuesChanged");
static_assert(offsetof(FortItemCollectorWidget_OnItemCollectorValuesChanged, InputItem) == 0x000000, "Member 'FortItemCollectorWidget_OnItemCollectorValuesChanged::InputItem' has a wrong offset!");
static_assert(offsetof(FortItemCollectorWidget_OnItemCollectorValuesChanged, Goal) == 0x000008, "Member 'FortItemCollectorWidget_OnItemCollectorValuesChanged::Goal' has a wrong offset!");
static_assert(offsetof(FortItemCollectorWidget_OnItemCollectorValuesChanged, Deposit) == 0x00000C, "Member 'FortItemCollectorWidget_OnItemCollectorValuesChanged::Deposit' has a wrong offset!");
static_assert(offsetof(FortItemCollectorWidget_OnItemCollectorValuesChanged, Captures) == 0x000010, "Member 'FortItemCollectorWidget_OnItemCollectorValuesChanged::Captures' has a wrong offset!");

// Function FortniteUI.AthenaGameOverScreenBase.CanShowGoToBoss
// 0x0001 (0x0001 - 0x0000)
struct AthenaGameOverScreenBase_CanShowGoToBoss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaGameOverScreenBase_CanShowGoToBoss) == 0x000001, "Wrong alignment on AthenaGameOverScreenBase_CanShowGoToBoss");
static_assert(sizeof(AthenaGameOverScreenBase_CanShowGoToBoss) == 0x000001, "Wrong size on AthenaGameOverScreenBase_CanShowGoToBoss");
static_assert(offsetof(AthenaGameOverScreenBase_CanShowGoToBoss, ReturnValue) == 0x000000, "Member 'AthenaGameOverScreenBase_CanShowGoToBoss::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutSwitcherBase.Update
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutSwitcherBase_Update final
{
public:
	const class UFortCampaignHeroLoadoutItem*     HeroLoadout;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutSwitcherBase_Update) == 0x000008, "Wrong alignment on FortHeroLoadoutSwitcherBase_Update");
static_assert(sizeof(FortHeroLoadoutSwitcherBase_Update) == 0x000008, "Wrong size on FortHeroLoadoutSwitcherBase_Update");
static_assert(offsetof(FortHeroLoadoutSwitcherBase_Update, HeroLoadout) == 0x000000, "Member 'FortHeroLoadoutSwitcherBase_Update::HeroLoadout' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutSwitcherBase.UpdateRarity
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutSwitcherBase_UpdateRarity final
{
public:
	EFortRarity                                   Rarity;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutSwitcherBase_UpdateRarity) == 0x000001, "Wrong alignment on FortHeroLoadoutSwitcherBase_UpdateRarity");
static_assert(sizeof(FortHeroLoadoutSwitcherBase_UpdateRarity) == 0x000001, "Wrong size on FortHeroLoadoutSwitcherBase_UpdateRarity");
static_assert(offsetof(FortHeroLoadoutSwitcherBase_UpdateRarity, Rarity) == 0x000000, "Member 'FortHeroLoadoutSwitcherBase_UpdateRarity::Rarity' has a wrong offset!");

// Function FortniteUI.AthenaGenericHUDTimerWidgetBase.HandleGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaGenericHUDTimerWidgetBase_HandleGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaGenericHUDTimerWidgetBase_HandleGamePhaseChanged) == 0x000001, "Wrong alignment on AthenaGenericHUDTimerWidgetBase_HandleGamePhaseChanged");
static_assert(sizeof(AthenaGenericHUDTimerWidgetBase_HandleGamePhaseChanged) == 0x000001, "Wrong size on AthenaGenericHUDTimerWidgetBase_HandleGamePhaseChanged");
static_assert(offsetof(AthenaGenericHUDTimerWidgetBase_HandleGamePhaseChanged, GamePhase) == 0x000000, "Member 'AthenaGenericHUDTimerWidgetBase_HandleGamePhaseChanged::GamePhase' has a wrong offset!");

// Function FortniteUI.WaxPlacementWidgetBase.OnPodiumChangeOccured
// 0x0010 (0x0010 - 0x0000)
struct WaxPlacementWidgetBase_OnPodiumChangeOccured final
{
public:
	TArray<class AFortPlayerStateAthena*>         Leaders;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxPlacementWidgetBase_OnPodiumChangeOccured) == 0x000008, "Wrong alignment on WaxPlacementWidgetBase_OnPodiumChangeOccured");
static_assert(sizeof(WaxPlacementWidgetBase_OnPodiumChangeOccured) == 0x000010, "Wrong size on WaxPlacementWidgetBase_OnPodiumChangeOccured");
static_assert(offsetof(WaxPlacementWidgetBase_OnPodiumChangeOccured, Leaders) == 0x000000, "Member 'WaxPlacementWidgetBase_OnPodiumChangeOccured::Leaders' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.DisplayPlayerWonTime
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_DisplayPlayerWonTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_DisplayPlayerWonTime) == 0x000004, "Wrong alignment on AthenaHUDContext_DisplayPlayerWonTime");
static_assert(sizeof(AthenaHUDContext_DisplayPlayerWonTime) == 0x000004, "Wrong size on AthenaHUDContext_DisplayPlayerWonTime");
static_assert(offsetof(AthenaHUDContext_DisplayPlayerWonTime, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_DisplayPlayerWonTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.EnableAutoRunFromHUD
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_EnableAutoRunFromHUD final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_EnableAutoRunFromHUD) == 0x000001, "Wrong alignment on AthenaHUDContext_EnableAutoRunFromHUD");
static_assert(sizeof(AthenaHUDContext_EnableAutoRunFromHUD) == 0x000001, "Wrong size on AthenaHUDContext_EnableAutoRunFromHUD");
static_assert(offsetof(AthenaHUDContext_EnableAutoRunFromHUD, bEnable) == 0x000000, "Member 'AthenaHUDContext_EnableAutoRunFromHUD::bEnable' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.ExecuteActionNameFromHUD
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_ExecuteActionNameFromHUD final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_ExecuteActionNameFromHUD) == 0x000004, "Wrong alignment on AthenaHUDContext_ExecuteActionNameFromHUD");
static_assert(sizeof(AthenaHUDContext_ExecuteActionNameFromHUD) == 0x000008, "Wrong size on AthenaHUDContext_ExecuteActionNameFromHUD");
static_assert(offsetof(AthenaHUDContext_ExecuteActionNameFromHUD, ActionName) == 0x000000, "Member 'AthenaHUDContext_ExecuteActionNameFromHUD::ActionName' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.ExecuteActionNameFromHUDWithEventType
// 0x000C (0x000C - 0x0000)
struct AthenaHUDContext_ExecuteActionNameFromHUDWithEventType final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   KeyEvent;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaHUDContext_ExecuteActionNameFromHUDWithEventType) == 0x000004, "Wrong alignment on AthenaHUDContext_ExecuteActionNameFromHUDWithEventType");
static_assert(sizeof(AthenaHUDContext_ExecuteActionNameFromHUDWithEventType) == 0x00000C, "Wrong size on AthenaHUDContext_ExecuteActionNameFromHUDWithEventType");
static_assert(offsetof(AthenaHUDContext_ExecuteActionNameFromHUDWithEventType, ActionName) == 0x000000, "Member 'AthenaHUDContext_ExecuteActionNameFromHUDWithEventType::ActionName' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_ExecuteActionNameFromHUDWithEventType, KeyEvent) == 0x000008, "Member 'AthenaHUDContext_ExecuteActionNameFromHUDWithEventType::KeyEvent' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.FireFromHUDStart
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDContext_FireFromHUDStart final
{
public:
	int32                                         TouchIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                DebugWidget;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_FireFromHUDStart) == 0x000008, "Wrong alignment on AthenaHUDContext_FireFromHUDStart");
static_assert(sizeof(AthenaHUDContext_FireFromHUDStart) == 0x000010, "Wrong size on AthenaHUDContext_FireFromHUDStart");
static_assert(offsetof(AthenaHUDContext_FireFromHUDStart, TouchIndex) == 0x000000, "Member 'AthenaHUDContext_FireFromHUDStart::TouchIndex' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_FireFromHUDStart, DebugWidget) == 0x000008, "Member 'AthenaHUDContext_FireFromHUDStart::DebugWidget' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.FireFromHUDStop
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDContext_FireFromHUDStop final
{
public:
	int32                                         TouchIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                DebugWidget;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_FireFromHUDStop) == 0x000008, "Wrong alignment on AthenaHUDContext_FireFromHUDStop");
static_assert(sizeof(AthenaHUDContext_FireFromHUDStop) == 0x000010, "Wrong size on AthenaHUDContext_FireFromHUDStop");
static_assert(offsetof(AthenaHUDContext_FireFromHUDStop, TouchIndex) == 0x000000, "Member 'AthenaHUDContext_FireFromHUDStop::TouchIndex' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_FireFromHUDStop, DebugWidget) == 0x000008, "Member 'AthenaHUDContext_FireFromHUDStop::DebugWidget' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.ForwardOnSpecialActorListChanged
// 0x0208 (0x0208 - 0x0000)
struct AthenaHUDContext_ForwardOnSpecialActorListChanged final
{
public:
	struct FSpecialActorRepData                   SpecialActorData;                                  // 0x0000(0x0208)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_ForwardOnSpecialActorListChanged) == 0x000008, "Wrong alignment on AthenaHUDContext_ForwardOnSpecialActorListChanged");
static_assert(sizeof(AthenaHUDContext_ForwardOnSpecialActorListChanged) == 0x000208, "Wrong size on AthenaHUDContext_ForwardOnSpecialActorListChanged");
static_assert(offsetof(AthenaHUDContext_ForwardOnSpecialActorListChanged, SpecialActorData) == 0x000000, "Member 'AthenaHUDContext_ForwardOnSpecialActorListChanged::SpecialActorData' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetBoundActions
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDContext_GetBoundActions final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetBoundActions) == 0x000008, "Wrong alignment on AthenaHUDContext_GetBoundActions");
static_assert(sizeof(AthenaHUDContext_GetBoundActions) == 0x000010, "Wrong size on AthenaHUDContext_GetBoundActions");
static_assert(offsetof(AthenaHUDContext_GetBoundActions, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetBoundActions::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetWinnerText
// 0x0030 (0x0030 - 0x0000)
struct AthenaHUDContext_GetWinnerText final
{
public:
	class FText                                   ReturnText;                                        // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   WinnerName;                                        // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetWinnerText) == 0x000008, "Wrong alignment on AthenaHUDContext_GetWinnerText");
static_assert(sizeof(AthenaHUDContext_GetWinnerText) == 0x000030, "Wrong size on AthenaHUDContext_GetWinnerText");
static_assert(offsetof(AthenaHUDContext_GetWinnerText, ReturnText) == 0x000000, "Member 'AthenaHUDContext_GetWinnerText::ReturnText' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_GetWinnerText, WinnerName) == 0x000018, "Member 'AthenaHUDContext_GetWinnerText::WinnerName' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.HandleGamePhaseChange
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_HandleGamePhaseChange final
{
public:
	EAthenaGamePhaseStep                          NewGamePhase;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_HandleGamePhaseChange) == 0x000001, "Wrong alignment on AthenaHUDContext_HandleGamePhaseChange");
static_assert(sizeof(AthenaHUDContext_HandleGamePhaseChange) == 0x000001, "Wrong size on AthenaHUDContext_HandleGamePhaseChange");
static_assert(offsetof(AthenaHUDContext_HandleGamePhaseChange, NewGamePhase) == 0x000000, "Member 'AthenaHUDContext_HandleGamePhaseChange::NewGamePhase' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.HandleLocalPlayerDBNOStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDContext_HandleLocalPlayerDBNOStateChanged final
{
public:
	class AFortPawn*                              FortPawn;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDBNO;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaHUDContext_HandleLocalPlayerDBNOStateChanged) == 0x000008, "Wrong alignment on AthenaHUDContext_HandleLocalPlayerDBNOStateChanged");
static_assert(sizeof(AthenaHUDContext_HandleLocalPlayerDBNOStateChanged) == 0x000010, "Wrong size on AthenaHUDContext_HandleLocalPlayerDBNOStateChanged");
static_assert(offsetof(AthenaHUDContext_HandleLocalPlayerDBNOStateChanged, FortPawn) == 0x000000, "Member 'AthenaHUDContext_HandleLocalPlayerDBNOStateChanged::FortPawn' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_HandleLocalPlayerDBNOStateChanged, bIsDBNO) == 0x000008, "Member 'AthenaHUDContext_HandleLocalPlayerDBNOStateChanged::bIsDBNO' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.HandleUIGameplayCue
// 0x00C8 (0x00C8 - 0x0000)
struct AthenaHUDContext_HandleUIGameplayCue final
{
public:
	class FName                                   CueName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayCueEvent                             EventType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_HandleUIGameplayCue) == 0x000008, "Wrong alignment on AthenaHUDContext_HandleUIGameplayCue");
static_assert(sizeof(AthenaHUDContext_HandleUIGameplayCue) == 0x0000C8, "Wrong size on AthenaHUDContext_HandleUIGameplayCue");
static_assert(offsetof(AthenaHUDContext_HandleUIGameplayCue, CueName) == 0x000000, "Member 'AthenaHUDContext_HandleUIGameplayCue::CueName' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_HandleUIGameplayCue, EventType) == 0x000008, "Member 'AthenaHUDContext_HandleUIGameplayCue::EventType' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_HandleUIGameplayCue, Parameters) == 0x000010, "Member 'AthenaHUDContext_HandleUIGameplayCue::Parameters' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsActionBound
// 0x000C (0x000C - 0x0000)
struct AthenaHUDContext_IsActionBound final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaHUDContext_IsActionBound) == 0x000004, "Wrong alignment on AthenaHUDContext_IsActionBound");
static_assert(sizeof(AthenaHUDContext_IsActionBound) == 0x00000C, "Wrong size on AthenaHUDContext_IsActionBound");
static_assert(offsetof(AthenaHUDContext_IsActionBound, ActionName) == 0x000000, "Member 'AthenaHUDContext_IsActionBound::ActionName' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_IsActionBound, ReturnValue) == 0x000008, "Member 'AthenaHUDContext_IsActionBound::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.JumpFromHudStart
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_JumpFromHudStart final
{
public:
	int32                                         TouchIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_JumpFromHudStart) == 0x000004, "Wrong alignment on AthenaHUDContext_JumpFromHudStart");
static_assert(sizeof(AthenaHUDContext_JumpFromHudStart) == 0x000004, "Wrong size on AthenaHUDContext_JumpFromHudStart");
static_assert(offsetof(AthenaHUDContext_JumpFromHudStart, TouchIndex) == 0x000000, "Member 'AthenaHUDContext_JumpFromHudStart::TouchIndex' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnAthenaAutoFireChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_OnAthenaAutoFireChanged__DelegateSignature final
{
public:
	bool                                          bEntering;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnAthenaAutoFireChanged__DelegateSignature) == 0x000001, "Wrong alignment on AthenaHUDContext_OnAthenaAutoFireChanged__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnAthenaAutoFireChanged__DelegateSignature) == 0x000001, "Wrong size on AthenaHUDContext_OnAthenaAutoFireChanged__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnAthenaAutoFireChanged__DelegateSignature, bEntering) == 0x000000, "Member 'AthenaHUDContext_OnAthenaAutoFireChanged__DelegateSignature::bEntering' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnAthenaGamePhaseChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_OnAthenaGamePhaseChanged__DelegateSignature final
{
public:
	EAthenaGamePhaseStep                          NewPhase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnAthenaGamePhaseChanged__DelegateSignature) == 0x000001, "Wrong alignment on AthenaHUDContext_OnAthenaGamePhaseChanged__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnAthenaGamePhaseChanged__DelegateSignature) == 0x000001, "Wrong size on AthenaHUDContext_OnAthenaGamePhaseChanged__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnAthenaGamePhaseChanged__DelegateSignature, NewPhase) == 0x000000, "Member 'AthenaHUDContext_OnAthenaGamePhaseChanged__DelegateSignature::NewPhase' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnAthenaHUDAllWinnersAnnounced__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct AthenaHUDContext_OnAthenaHUDAllWinnersAnnounced__DelegateSignature final
{
public:
	struct FAthenaWinnerInfo                      Param_WinnerInfo;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnAthenaHUDAllWinnersAnnounced__DelegateSignature) == 0x000008, "Wrong alignment on AthenaHUDContext_OnAthenaHUDAllWinnersAnnounced__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnAthenaHUDAllWinnersAnnounced__DelegateSignature) == 0x000020, "Wrong size on AthenaHUDContext_OnAthenaHUDAllWinnersAnnounced__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnAthenaHUDAllWinnersAnnounced__DelegateSignature, Param_WinnerInfo) == 0x000000, "Member 'AthenaHUDContext_OnAthenaHUDAllWinnersAnnounced__DelegateSignature::Param_WinnerInfo' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnAthenaInventoryItemSelected__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_OnAthenaInventoryItemSelected__DelegateSignature final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnAthenaInventoryItemSelected__DelegateSignature) == 0x000008, "Wrong alignment on AthenaHUDContext_OnAthenaInventoryItemSelected__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnAthenaInventoryItemSelected__DelegateSignature) == 0x000008, "Wrong size on AthenaHUDContext_OnAthenaInventoryItemSelected__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnAthenaInventoryItemSelected__DelegateSignature, Item) == 0x000000, "Member 'AthenaHUDContext_OnAthenaInventoryItemSelected__DelegateSignature::Item' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnAthenaInventorySwapStarted__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_OnAthenaInventorySwapStarted__DelegateSignature final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnAthenaInventorySwapStarted__DelegateSignature) == 0x000004, "Wrong alignment on AthenaHUDContext_OnAthenaInventorySwapStarted__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnAthenaInventorySwapStarted__DelegateSignature) == 0x000004, "Wrong size on AthenaHUDContext_OnAthenaInventorySwapStarted__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnAthenaInventorySwapStarted__DelegateSignature, SlotIndex) == 0x000000, "Member 'AthenaHUDContext_OnAthenaInventorySwapStarted__DelegateSignature::SlotIndex' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnFireStopped__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_OnFireStopped__DelegateSignature final
{
public:
	int32                                         StopFireIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnFireStopped__DelegateSignature) == 0x000004, "Wrong alignment on AthenaHUDContext_OnFireStopped__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnFireStopped__DelegateSignature) == 0x000004, "Wrong size on AthenaHUDContext_OnFireStopped__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnFireStopped__DelegateSignature, StopFireIndex) == 0x000000, "Member 'AthenaHUDContext_OnFireStopped__DelegateSignature::StopFireIndex' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnLocalPlayerDBNOStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_OnLocalPlayerDBNOStateChanged__DelegateSignature final
{
public:
	bool                                          bIsDBNO;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnLocalPlayerDBNOStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on AthenaHUDContext_OnLocalPlayerDBNOStateChanged__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnLocalPlayerDBNOStateChanged__DelegateSignature) == 0x000001, "Wrong size on AthenaHUDContext_OnLocalPlayerDBNOStateChanged__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnLocalPlayerDBNOStateChanged__DelegateSignature, bIsDBNO) == 0x000000, "Member 'AthenaHUDContext_OnLocalPlayerDBNOStateChanged__DelegateSignature::bIsDBNO' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnLocalPlayerKilledPlayer__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_OnLocalPlayerKilledPlayer__DelegateSignature final
{
public:
	const class AFortPlayerStateAthena*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnLocalPlayerKilledPlayer__DelegateSignature) == 0x000008, "Wrong alignment on AthenaHUDContext_OnLocalPlayerKilledPlayer__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnLocalPlayerKilledPlayer__DelegateSignature) == 0x000008, "Wrong size on AthenaHUDContext_OnLocalPlayerKilledPlayer__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnLocalPlayerKilledPlayer__DelegateSignature, Player) == 0x000000, "Member 'AthenaHUDContext_OnLocalPlayerKilledPlayer__DelegateSignature::Player' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnLocalPlayerLost__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_OnLocalPlayerLost__DelegateSignature final
{
public:
	EEndOfMatchReason                             LostReason;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnLocalPlayerLost__DelegateSignature) == 0x000001, "Wrong alignment on AthenaHUDContext_OnLocalPlayerLost__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnLocalPlayerLost__DelegateSignature) == 0x000001, "Wrong size on AthenaHUDContext_OnLocalPlayerLost__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnLocalPlayerLost__DelegateSignature, LostReason) == 0x000000, "Member 'AthenaHUDContext_OnLocalPlayerLost__DelegateSignature::LostReason' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnLowPerformanceMode__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_OnLowPerformanceMode__DelegateSignature final
{
public:
	bool                                          bInLowPerformanceMode;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnLowPerformanceMode__DelegateSignature) == 0x000001, "Wrong alignment on AthenaHUDContext_OnLowPerformanceMode__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnLowPerformanceMode__DelegateSignature) == 0x000001, "Wrong size on AthenaHUDContext_OnLowPerformanceMode__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnLowPerformanceMode__DelegateSignature, bInLowPerformanceMode) == 0x000000, "Member 'AthenaHUDContext_OnLowPerformanceMode__DelegateSignature::bInLowPerformanceMode' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnPlayerNameChange__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDContext_OnPlayerNameChange__DelegateSignature final
{
public:
	class FString                                 NewName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnPlayerNameChange__DelegateSignature) == 0x000008, "Wrong alignment on AthenaHUDContext_OnPlayerNameChange__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnPlayerNameChange__DelegateSignature) == 0x000010, "Wrong size on AthenaHUDContext_OnPlayerNameChange__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnPlayerNameChange__DelegateSignature, NewName) == 0x000000, "Member 'AthenaHUDContext_OnPlayerNameChange__DelegateSignature::NewName' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnResurrectingNow__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_OnResurrectingNow__DelegateSignature final
{
public:
	bool                                          bResurrectingNow;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnResurrectingNow__DelegateSignature) == 0x000001, "Wrong alignment on AthenaHUDContext_OnResurrectingNow__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnResurrectingNow__DelegateSignature) == 0x000001, "Wrong size on AthenaHUDContext_OnResurrectingNow__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnResurrectingNow__DelegateSignature, bResurrectingNow) == 0x000000, "Member 'AthenaHUDContext_OnResurrectingNow__DelegateSignature::bResurrectingNow' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.OnSignalQualityChange__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_OnSignalQualityChange__DelegateSignature final
{
public:
	float                                         NewQuality;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_OnSignalQualityChange__DelegateSignature) == 0x000004, "Wrong alignment on AthenaHUDContext_OnSignalQualityChange__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_OnSignalQualityChange__DelegateSignature) == 0x000004, "Wrong size on AthenaHUDContext_OnSignalQualityChange__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_OnSignalQualityChange__DelegateSignature, NewQuality) == 0x000000, "Member 'AthenaHUDContext_OnSignalQualityChange__DelegateSignature::NewQuality' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaHUDContext.PTTStateChange__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_PTTStateChange__DelegateSignature final
{
public:
	EPTTState                                     NewPushToTalkState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_PTTStateChange__DelegateSignature) == 0x000001, "Wrong alignment on AthenaHUDContext_PTTStateChange__DelegateSignature");
static_assert(sizeof(AthenaHUDContext_PTTStateChange__DelegateSignature) == 0x000001, "Wrong size on AthenaHUDContext_PTTStateChange__DelegateSignature");
static_assert(offsetof(AthenaHUDContext_PTTStateChange__DelegateSignature, NewPushToTalkState) == 0x000000, "Member 'AthenaHUDContext_PTTStateChange__DelegateSignature::NewPushToTalkState' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.SelectWidgetToMove
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_SelectWidgetToMove final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_SelectWidgetToMove) == 0x000008, "Wrong alignment on AthenaHUDContext_SelectWidgetToMove");
static_assert(sizeof(AthenaHUDContext_SelectWidgetToMove) == 0x000008, "Wrong size on AthenaHUDContext_SelectWidgetToMove");
static_assert(offsetof(AthenaHUDContext_SelectWidgetToMove, Widget) == 0x000000, "Member 'AthenaHUDContext_SelectWidgetToMove::Widget' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.SetLocalPlayerWonMatch
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_SetLocalPlayerWonMatch final
{
public:
	bool                                          bLocalPlayerWon;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_SetLocalPlayerWonMatch) == 0x000001, "Wrong alignment on AthenaHUDContext_SetLocalPlayerWonMatch");
static_assert(sizeof(AthenaHUDContext_SetLocalPlayerWonMatch) == 0x000001, "Wrong size on AthenaHUDContext_SetLocalPlayerWonMatch");
static_assert(offsetof(AthenaHUDContext_SetLocalPlayerWonMatch, bLocalPlayerWon) == 0x000000, "Member 'AthenaHUDContext_SetLocalPlayerWonMatch::bLocalPlayerWon' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.SetLockOnStickCoords
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_SetLockOnStickCoords final
{
public:
	struct FVector2D                              LockOnCoords;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_SetLockOnStickCoords) == 0x000004, "Wrong alignment on AthenaHUDContext_SetLockOnStickCoords");
static_assert(sizeof(AthenaHUDContext_SetLockOnStickCoords) == 0x000008, "Wrong size on AthenaHUDContext_SetLockOnStickCoords");
static_assert(offsetof(AthenaHUDContext_SetLockOnStickCoords, LockOnCoords) == 0x000000, "Member 'AthenaHUDContext_SetLockOnStickCoords::LockOnCoords' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.SetPTTState
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_SetPTTState final
{
public:
	EPTTState                                     NewPushToTalkState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_SetPTTState) == 0x000001, "Wrong alignment on AthenaHUDContext_SetPTTState");
static_assert(sizeof(AthenaHUDContext_SetPTTState) == 0x000001, "Wrong size on AthenaHUDContext_SetPTTState");
static_assert(offsetof(AthenaHUDContext_SetPTTState, NewPushToTalkState) == 0x000000, "Member 'AthenaHUDContext_SetPTTState::NewPushToTalkState' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.SetResourceMaterial
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_SetResourceMaterial final
{
public:
	EFortResourceType                             NewMaterial;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_SetResourceMaterial) == 0x000001, "Wrong alignment on AthenaHUDContext_SetResourceMaterial");
static_assert(sizeof(AthenaHUDContext_SetResourceMaterial) == 0x000001, "Wrong size on AthenaHUDContext_SetResourceMaterial");
static_assert(offsetof(AthenaHUDContext_SetResourceMaterial, NewMaterial) == 0x000000, "Member 'AthenaHUDContext_SetResourceMaterial::NewMaterial' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.SetSelectedInventoryItem
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_SetSelectedInventoryItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_SetSelectedInventoryItem) == 0x000008, "Wrong alignment on AthenaHUDContext_SetSelectedInventoryItem");
static_assert(sizeof(AthenaHUDContext_SetSelectedInventoryItem) == 0x000008, "Wrong size on AthenaHUDContext_SetSelectedInventoryItem");
static_assert(offsetof(AthenaHUDContext_SetSelectedInventoryItem, Item) == 0x000000, "Member 'AthenaHUDContext_SetSelectedInventoryItem::Item' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.SetSelectWidgetToMoveMode
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_SetSelectWidgetToMoveMode final
{
public:
	bool                                          bSet;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_SetSelectWidgetToMoveMode) == 0x000001, "Wrong alignment on AthenaHUDContext_SetSelectWidgetToMoveMode");
static_assert(sizeof(AthenaHUDContext_SetSelectWidgetToMoveMode) == 0x000001, "Wrong size on AthenaHUDContext_SetSelectWidgetToMoveMode");
static_assert(offsetof(AthenaHUDContext_SetSelectWidgetToMoveMode, bSet) == 0x000000, "Member 'AthenaHUDContext_SetSelectWidgetToMoveMode::bSet' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.SetTargetingToggleable
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_SetTargetingToggleable final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_SetTargetingToggleable) == 0x000001, "Wrong alignment on AthenaHUDContext_SetTargetingToggleable");
static_assert(sizeof(AthenaHUDContext_SetTargetingToggleable) == 0x000001, "Wrong size on AthenaHUDContext_SetTargetingToggleable");
static_assert(offsetof(AthenaHUDContext_SetTargetingToggleable, bNewValue) == 0x000000, "Member 'AthenaHUDContext_SetTargetingToggleable::bNewValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.ShouldDisplayPlacement
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_ShouldDisplayPlacement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_ShouldDisplayPlacement) == 0x000001, "Wrong alignment on AthenaHUDContext_ShouldDisplayPlacement");
static_assert(sizeof(AthenaHUDContext_ShouldDisplayPlacement) == 0x000001, "Wrong size on AthenaHUDContext_ShouldDisplayPlacement");
static_assert(offsetof(AthenaHUDContext_ShouldDisplayPlacement, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_ShouldDisplayPlacement::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.ShouldDisplayScoreUI
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_ShouldDisplayScoreUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_ShouldDisplayScoreUI) == 0x000001, "Wrong alignment on AthenaHUDContext_ShouldDisplayScoreUI");
static_assert(sizeof(AthenaHUDContext_ShouldDisplayScoreUI) == 0x000001, "Wrong size on AthenaHUDContext_ShouldDisplayScoreUI");
static_assert(offsetof(AthenaHUDContext_ShouldDisplayScoreUI, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_ShouldDisplayScoreUI::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.StartOrFinishSwap
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_StartOrFinishSwap final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_StartOrFinishSwap) == 0x000004, "Wrong alignment on AthenaHUDContext_StartOrFinishSwap");
static_assert(sizeof(AthenaHUDContext_StartOrFinishSwap) == 0x000004, "Wrong size on AthenaHUDContext_StartOrFinishSwap");
static_assert(offsetof(AthenaHUDContext_StartOrFinishSwap, SlotIndex) == 0x000000, "Member 'AthenaHUDContext_StartOrFinishSwap::SlotIndex' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.StopItemSelectionInputFromHUD
// 0x000C (0x000C - 0x0000)
struct AthenaHUDContext_StopItemSelectionInputFromHUD final
{
public:
	int32                                         TouchIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIdx;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuickBars                                InQuickBar;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaHUDContext_StopItemSelectionInputFromHUD) == 0x000004, "Wrong alignment on AthenaHUDContext_StopItemSelectionInputFromHUD");
static_assert(sizeof(AthenaHUDContext_StopItemSelectionInputFromHUD) == 0x00000C, "Wrong size on AthenaHUDContext_StopItemSelectionInputFromHUD");
static_assert(offsetof(AthenaHUDContext_StopItemSelectionInputFromHUD, TouchIndex) == 0x000000, "Member 'AthenaHUDContext_StopItemSelectionInputFromHUD::TouchIndex' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_StopItemSelectionInputFromHUD, SlotIdx) == 0x000004, "Member 'AthenaHUDContext_StopItemSelectionInputFromHUD::SlotIdx' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_StopItemSelectionInputFromHUD, InQuickBar) == 0x000008, "Member 'AthenaHUDContext_StopItemSelectionInputFromHUD::InQuickBar' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.SwapQuickBarFocusFromHUD
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_SwapQuickBarFocusFromHUD final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotOverride;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_SwapQuickBarFocusFromHUD) == 0x000004, "Wrong alignment on AthenaHUDContext_SwapQuickBarFocusFromHUD");
static_assert(sizeof(AthenaHUDContext_SwapQuickBarFocusFromHUD) == 0x000008, "Wrong size on AthenaHUDContext_SwapQuickBarFocusFromHUD");
static_assert(offsetof(AthenaHUDContext_SwapQuickBarFocusFromHUD, InQuickBar) == 0x000000, "Member 'AthenaHUDContext_SwapQuickBarFocusFromHUD::InQuickBar' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_SwapQuickBarFocusFromHUD, SlotOverride) == 0x000004, "Member 'AthenaHUDContext_SwapQuickBarFocusFromHUD::SlotOverride' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.TakeItemSelectionInputFromHUD
// 0x000C (0x000C - 0x0000)
struct AthenaHUDContext_TakeItemSelectionInputFromHUD final
{
public:
	int32                                         TouchIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIdx;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsing;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuickBars                                InQuickBar;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReloadOrUseIfAlreadySelected;                     // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopUseImmediately;                               // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_TakeItemSelectionInputFromHUD) == 0x000004, "Wrong alignment on AthenaHUDContext_TakeItemSelectionInputFromHUD");
static_assert(sizeof(AthenaHUDContext_TakeItemSelectionInputFromHUD) == 0x00000C, "Wrong size on AthenaHUDContext_TakeItemSelectionInputFromHUD");
static_assert(offsetof(AthenaHUDContext_TakeItemSelectionInputFromHUD, TouchIndex) == 0x000000, "Member 'AthenaHUDContext_TakeItemSelectionInputFromHUD::TouchIndex' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_TakeItemSelectionInputFromHUD, SlotIdx) == 0x000004, "Member 'AthenaHUDContext_TakeItemSelectionInputFromHUD::SlotIdx' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_TakeItemSelectionInputFromHUD, bIsUsing) == 0x000008, "Member 'AthenaHUDContext_TakeItemSelectionInputFromHUD::bIsUsing' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_TakeItemSelectionInputFromHUD, InQuickBar) == 0x000009, "Member 'AthenaHUDContext_TakeItemSelectionInputFromHUD::InQuickBar' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_TakeItemSelectionInputFromHUD, bReloadOrUseIfAlreadySelected) == 0x00000A, "Member 'AthenaHUDContext_TakeItemSelectionInputFromHUD::bReloadOrUseIfAlreadySelected' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_TakeItemSelectionInputFromHUD, bStopUseImmediately) == 0x00000B, "Member 'AthenaHUDContext_TakeItemSelectionInputFromHUD::bStopUseImmediately' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.TakeLookInputFromHUD
// 0x000C (0x000C - 0x0000)
struct AthenaHUDContext_TakeLookInputFromHUD final
{
public:
	struct FRotator                               LookRotator;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_TakeLookInputFromHUD) == 0x000004, "Wrong alignment on AthenaHUDContext_TakeLookInputFromHUD");
static_assert(sizeof(AthenaHUDContext_TakeLookInputFromHUD) == 0x00000C, "Wrong size on AthenaHUDContext_TakeLookInputFromHUD");
static_assert(offsetof(AthenaHUDContext_TakeLookInputFromHUD, LookRotator) == 0x000000, "Member 'AthenaHUDContext_TakeLookInputFromHUD::LookRotator' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.TakeLookStickInputFromHUD
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_TakeLookStickInputFromHUD final
{
public:
	struct FVector2D                              LookStickPosition;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_TakeLookStickInputFromHUD) == 0x000004, "Wrong alignment on AthenaHUDContext_TakeLookStickInputFromHUD");
static_assert(sizeof(AthenaHUDContext_TakeLookStickInputFromHUD) == 0x000008, "Wrong size on AthenaHUDContext_TakeLookStickInputFromHUD");
static_assert(offsetof(AthenaHUDContext_TakeLookStickInputFromHUD, LookStickPosition) == 0x000000, "Member 'AthenaHUDContext_TakeLookStickInputFromHUD::LookStickPosition' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.TakeMovementInputFromHUD
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_TakeMovementInputFromHUD final
{
public:
	struct FVector2D                              MoveVector;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_TakeMovementInputFromHUD) == 0x000004, "Wrong alignment on AthenaHUDContext_TakeMovementInputFromHUD");
static_assert(sizeof(AthenaHUDContext_TakeMovementInputFromHUD) == 0x000008, "Wrong size on AthenaHUDContext_TakeMovementInputFromHUD");
static_assert(offsetof(AthenaHUDContext_TakeMovementInputFromHUD, MoveVector) == 0x000000, "Member 'AthenaHUDContext_TakeMovementInputFromHUD::MoveVector' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.UpdateSelectedWidgetMoveOffsetVector
// 0x000C (0x000C - 0x0000)
struct AthenaHUDContext_UpdateSelectedWidgetMoveOffsetVector final
{
public:
	struct FVector2D                              VectorOffset;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FMoveScale;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_UpdateSelectedWidgetMoveOffsetVector) == 0x000004, "Wrong alignment on AthenaHUDContext_UpdateSelectedWidgetMoveOffsetVector");
static_assert(sizeof(AthenaHUDContext_UpdateSelectedWidgetMoveOffsetVector) == 0x00000C, "Wrong size on AthenaHUDContext_UpdateSelectedWidgetMoveOffsetVector");
static_assert(offsetof(AthenaHUDContext_UpdateSelectedWidgetMoveOffsetVector, VectorOffset) == 0x000000, "Member 'AthenaHUDContext_UpdateSelectedWidgetMoveOffsetVector::VectorOffset' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_UpdateSelectedWidgetMoveOffsetVector, FMoveScale) == 0x000008, "Member 'AthenaHUDContext_UpdateSelectedWidgetMoveOffsetVector::FMoveScale' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.CanAutoRun
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_CanAutoRun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_CanAutoRun) == 0x000001, "Wrong alignment on AthenaHUDContext_CanAutoRun");
static_assert(sizeof(AthenaHUDContext_CanAutoRun) == 0x000001, "Wrong size on AthenaHUDContext_CanAutoRun");
static_assert(offsetof(AthenaHUDContext_CanAutoRun, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_CanAutoRun::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.CanCurrentWeaponAutoFireFromReticle
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_CanCurrentWeaponAutoFireFromReticle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_CanCurrentWeaponAutoFireFromReticle) == 0x000001, "Wrong alignment on AthenaHUDContext_CanCurrentWeaponAutoFireFromReticle");
static_assert(sizeof(AthenaHUDContext_CanCurrentWeaponAutoFireFromReticle) == 0x000001, "Wrong size on AthenaHUDContext_CanCurrentWeaponAutoFireFromReticle");
static_assert(offsetof(AthenaHUDContext_CanCurrentWeaponAutoFireFromReticle, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_CanCurrentWeaponAutoFireFromReticle::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.CanShootInVehicle
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_CanShootInVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_CanShootInVehicle) == 0x000001, "Wrong alignment on AthenaHUDContext_CanShootInVehicle");
static_assert(sizeof(AthenaHUDContext_CanShootInVehicle) == 0x000001, "Wrong size on AthenaHUDContext_CanShootInVehicle");
static_assert(offsetof(AthenaHUDContext_CanShootInVehicle, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_CanShootInVehicle::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetBatteryLevel
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_GetBatteryLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetBatteryLevel) == 0x000004, "Wrong alignment on AthenaHUDContext_GetBatteryLevel");
static_assert(sizeof(AthenaHUDContext_GetBatteryLevel) == 0x000004, "Wrong size on AthenaHUDContext_GetBatteryLevel");
static_assert(offsetof(AthenaHUDContext_GetBatteryLevel, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetBatteryLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetCanPTT
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_GetCanPTT final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetCanPTT) == 0x000001, "Wrong alignment on AthenaHUDContext_GetCanPTT");
static_assert(sizeof(AthenaHUDContext_GetCanPTT) == 0x000001, "Wrong size on AthenaHUDContext_GetCanPTT");
static_assert(offsetof(AthenaHUDContext_GetCanPTT, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetCanPTT::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetCurrentViewModel
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_GetCurrentViewModel final
{
public:
	class UAthenaPlayerViewModel*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetCurrentViewModel) == 0x000008, "Wrong alignment on AthenaHUDContext_GetCurrentViewModel");
static_assert(sizeof(AthenaHUDContext_GetCurrentViewModel) == 0x000008, "Wrong size on AthenaHUDContext_GetCurrentViewModel");
static_assert(offsetof(AthenaHUDContext_GetCurrentViewModel, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetCurrentViewModel::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetCustomDBNOReviveMaterial
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_GetCustomDBNOReviveMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetCustomDBNOReviveMaterial) == 0x000008, "Wrong alignment on AthenaHUDContext_GetCustomDBNOReviveMaterial");
static_assert(sizeof(AthenaHUDContext_GetCustomDBNOReviveMaterial) == 0x000008, "Wrong size on AthenaHUDContext_GetCustomDBNOReviveMaterial");
static_assert(offsetof(AthenaHUDContext_GetCustomDBNOReviveMaterial, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetCustomDBNOReviveMaterial::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetCustomDBNOWidgetClass
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_GetCustomDBNOWidgetClass final
{
public:
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetCustomDBNOWidgetClass) == 0x000008, "Wrong alignment on AthenaHUDContext_GetCustomDBNOWidgetClass");
static_assert(sizeof(AthenaHUDContext_GetCustomDBNOWidgetClass) == 0x000008, "Wrong size on AthenaHUDContext_GetCustomDBNOWidgetClass");
static_assert(offsetof(AthenaHUDContext_GetCustomDBNOWidgetClass, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetCustomDBNOWidgetClass::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetGameOverDelayTime
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_GetGameOverDelayTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetGameOverDelayTime) == 0x000004, "Wrong alignment on AthenaHUDContext_GetGameOverDelayTime");
static_assert(sizeof(AthenaHUDContext_GetGameOverDelayTime) == 0x000004, "Wrong size on AthenaHUDContext_GetGameOverDelayTime");
static_assert(offsetof(AthenaHUDContext_GetGameOverDelayTime, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetGameOverDelayTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetGliderDisplayName
// 0x0018 (0x0018 - 0x0000)
struct AthenaHUDContext_GetGliderDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetGliderDisplayName) == 0x000008, "Wrong alignment on AthenaHUDContext_GetGliderDisplayName");
static_assert(sizeof(AthenaHUDContext_GetGliderDisplayName) == 0x000018, "Wrong size on AthenaHUDContext_GetGliderDisplayName");
static_assert(offsetof(AthenaHUDContext_GetGliderDisplayName, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetGliderDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetInLowPerformanceMode
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_GetInLowPerformanceMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetInLowPerformanceMode) == 0x000001, "Wrong alignment on AthenaHUDContext_GetInLowPerformanceMode");
static_assert(sizeof(AthenaHUDContext_GetInLowPerformanceMode) == 0x000001, "Wrong size on AthenaHUDContext_GetInLowPerformanceMode");
static_assert(offsetof(AthenaHUDContext_GetInLowPerformanceMode, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetInLowPerformanceMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetInteractPressedTouchIndex
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_GetInteractPressedTouchIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetInteractPressedTouchIndex) == 0x000004, "Wrong alignment on AthenaHUDContext_GetInteractPressedTouchIndex");
static_assert(sizeof(AthenaHUDContext_GetInteractPressedTouchIndex) == 0x000004, "Wrong size on AthenaHUDContext_GetInteractPressedTouchIndex");
static_assert(offsetof(AthenaHUDContext_GetInteractPressedTouchIndex, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetInteractPressedTouchIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetJumpPressedTouchIndex
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_GetJumpPressedTouchIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetJumpPressedTouchIndex) == 0x000004, "Wrong alignment on AthenaHUDContext_GetJumpPressedTouchIndex");
static_assert(sizeof(AthenaHUDContext_GetJumpPressedTouchIndex) == 0x000004, "Wrong size on AthenaHUDContext_GetJumpPressedTouchIndex");
static_assert(offsetof(AthenaHUDContext_GetJumpPressedTouchIndex, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetJumpPressedTouchIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetLocalTime
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_GetLocalTime final
{
public:
	int32                                         Hours;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetLocalTime) == 0x000004, "Wrong alignment on AthenaHUDContext_GetLocalTime");
static_assert(sizeof(AthenaHUDContext_GetLocalTime) == 0x000008, "Wrong size on AthenaHUDContext_GetLocalTime");
static_assert(offsetof(AthenaHUDContext_GetLocalTime, Hours) == 0x000000, "Member 'AthenaHUDContext_GetLocalTime::Hours' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_GetLocalTime, Minutes) == 0x000004, "Member 'AthenaHUDContext_GetLocalTime::Minutes' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetPlayerColor
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDContext_GetPlayerColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetPlayerColor) == 0x000004, "Wrong alignment on AthenaHUDContext_GetPlayerColor");
static_assert(sizeof(AthenaHUDContext_GetPlayerColor) == 0x000010, "Wrong size on AthenaHUDContext_GetPlayerColor");
static_assert(offsetof(AthenaHUDContext_GetPlayerColor, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetPlayerColor::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct AthenaHUDContext_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetPlayerName) == 0x000008, "Wrong alignment on AthenaHUDContext_GetPlayerName");
static_assert(sizeof(AthenaHUDContext_GetPlayerName) == 0x000010, "Wrong size on AthenaHUDContext_GetPlayerName");
static_assert(offsetof(AthenaHUDContext_GetPlayerName, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetPlayerName::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetPlaylistUIExtender
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_GetPlaylistUIExtender final
{
public:
	class UFortGameUIExtenderAthena*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetPlaylistUIExtender) == 0x000008, "Wrong alignment on AthenaHUDContext_GetPlaylistUIExtender");
static_assert(sizeof(AthenaHUDContext_GetPlaylistUIExtender) == 0x000008, "Wrong size on AthenaHUDContext_GetPlaylistUIExtender");
static_assert(offsetof(AthenaHUDContext_GetPlaylistUIExtender, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetPlaylistUIExtender::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetPTTState
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_GetPTTState final
{
public:
	EPTTState                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetPTTState) == 0x000001, "Wrong alignment on AthenaHUDContext_GetPTTState");
static_assert(sizeof(AthenaHUDContext_GetPTTState) == 0x000001, "Wrong size on AthenaHUDContext_GetPTTState");
static_assert(offsetof(AthenaHUDContext_GetPTTState, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetPTTState::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetSelectedInventoryItem
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_GetSelectedInventoryItem final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetSelectedInventoryItem) == 0x000008, "Wrong alignment on AthenaHUDContext_GetSelectedInventoryItem");
static_assert(sizeof(AthenaHUDContext_GetSelectedInventoryItem) == 0x000008, "Wrong size on AthenaHUDContext_GetSelectedInventoryItem");
static_assert(offsetof(AthenaHUDContext_GetSelectedInventoryItem, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetSelectedInventoryItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetSquadConnectedCount
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_GetSquadConnectedCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetSquadConnectedCount) == 0x000004, "Wrong alignment on AthenaHUDContext_GetSquadConnectedCount");
static_assert(sizeof(AthenaHUDContext_GetSquadConnectedCount) == 0x000004, "Wrong size on AthenaHUDContext_GetSquadConnectedCount");
static_assert(offsetof(AthenaHUDContext_GetSquadConnectedCount, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetSquadConnectedCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetVictoryStinger
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_GetVictoryStinger final
{
public:
	class USoundCue*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetVictoryStinger) == 0x000008, "Wrong alignment on AthenaHUDContext_GetVictoryStinger");
static_assert(sizeof(AthenaHUDContext_GetVictoryStinger) == 0x000008, "Wrong size on AthenaHUDContext_GetVictoryStinger");
static_assert(offsetof(AthenaHUDContext_GetVictoryStinger, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetVictoryStinger::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetVictoryText
// 0x0018 (0x0018 - 0x0000)
struct AthenaHUDContext_GetVictoryText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetVictoryText) == 0x000008, "Wrong alignment on AthenaHUDContext_GetVictoryText");
static_assert(sizeof(AthenaHUDContext_GetVictoryText) == 0x000018, "Wrong size on AthenaHUDContext_GetVictoryText");
static_assert(offsetof(AthenaHUDContext_GetVictoryText, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetVictoryText::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.GetVictoryUIWidgetClass
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_GetVictoryUIWidgetClass final
{
public:
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_GetVictoryUIWidgetClass) == 0x000008, "Wrong alignment on AthenaHUDContext_GetVictoryUIWidgetClass");
static_assert(sizeof(AthenaHUDContext_GetVictoryUIWidgetClass) == 0x000008, "Wrong size on AthenaHUDContext_GetVictoryUIWidgetClass");
static_assert(offsetof(AthenaHUDContext_GetVictoryUIWidgetClass, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_GetVictoryUIWidgetClass::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.HasAutofireTarget
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_HasAutofireTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_HasAutofireTarget) == 0x000001, "Wrong alignment on AthenaHUDContext_HasAutofireTarget");
static_assert(sizeof(AthenaHUDContext_HasAutofireTarget) == 0x000001, "Wrong size on AthenaHUDContext_HasAutofireTarget");
static_assert(offsetof(AthenaHUDContext_HasAutofireTarget, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_HasAutofireTarget::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.HasFiringTouch
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_HasFiringTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_HasFiringTouch) == 0x000001, "Wrong alignment on AthenaHUDContext_HasFiringTouch");
static_assert(sizeof(AthenaHUDContext_HasFiringTouch) == 0x000001, "Wrong size on AthenaHUDContext_HasFiringTouch");
static_assert(offsetof(AthenaHUDContext_HasFiringTouch, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_HasFiringTouch::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.HasLockOnTarget
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_HasLockOnTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_HasLockOnTarget) == 0x000001, "Wrong alignment on AthenaHUDContext_HasLockOnTarget");
static_assert(sizeof(AthenaHUDContext_HasLockOnTarget) == 0x000001, "Wrong size on AthenaHUDContext_HasLockOnTarget");
static_assert(offsetof(AthenaHUDContext_HasLockOnTarget, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_HasLockOnTarget::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.HasWifi
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_HasWifi final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_HasWifi) == 0x000001, "Wrong alignment on AthenaHUDContext_HasWifi");
static_assert(sizeof(AthenaHUDContext_HasWifi) == 0x000001, "Wrong size on AthenaHUDContext_HasWifi");
static_assert(offsetof(AthenaHUDContext_HasWifi, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_HasWifi::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsAutoRunEnabled
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsAutoRunEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsAutoRunEnabled) == 0x000001, "Wrong alignment on AthenaHUDContext_IsAutoRunEnabled");
static_assert(sizeof(AthenaHUDContext_IsAutoRunEnabled) == 0x000001, "Wrong size on AthenaHUDContext_IsAutoRunEnabled");
static_assert(offsetof(AthenaHUDContext_IsAutoRunEnabled, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsAutoRunEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsCrouching
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsCrouching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsCrouching) == 0x000001, "Wrong alignment on AthenaHUDContext_IsCrouching");
static_assert(sizeof(AthenaHUDContext_IsCrouching) == 0x000001, "Wrong size on AthenaHUDContext_IsCrouching");
static_assert(offsetof(AthenaHUDContext_IsCrouching, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsCrouching::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsCurrentWeaponChargeable
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsCurrentWeaponChargeable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsCurrentWeaponChargeable) == 0x000001, "Wrong alignment on AthenaHUDContext_IsCurrentWeaponChargeable");
static_assert(sizeof(AthenaHUDContext_IsCurrentWeaponChargeable) == 0x000001, "Wrong size on AthenaHUDContext_IsCurrentWeaponChargeable");
static_assert(offsetof(AthenaHUDContext_IsCurrentWeaponChargeable, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsCurrentWeaponChargeable::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsCurrentWeaponFiring
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsCurrentWeaponFiring final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsCurrentWeaponFiring) == 0x000001, "Wrong alignment on AthenaHUDContext_IsCurrentWeaponFiring");
static_assert(sizeof(AthenaHUDContext_IsCurrentWeaponFiring) == 0x000001, "Wrong size on AthenaHUDContext_IsCurrentWeaponFiring");
static_assert(offsetof(AthenaHUDContext_IsCurrentWeaponFiring, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsCurrentWeaponFiring::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsFiringFromTouch
// 0x0008 (0x0008 - 0x0000)
struct AthenaHUDContext_IsFiringFromTouch final
{
public:
	int32                                         TouchIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaHUDContext_IsFiringFromTouch) == 0x000004, "Wrong alignment on AthenaHUDContext_IsFiringFromTouch");
static_assert(sizeof(AthenaHUDContext_IsFiringFromTouch) == 0x000008, "Wrong size on AthenaHUDContext_IsFiringFromTouch");
static_assert(offsetof(AthenaHUDContext_IsFiringFromTouch, TouchIndex) == 0x000000, "Member 'AthenaHUDContext_IsFiringFromTouch::TouchIndex' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_IsFiringFromTouch, ReturnValue) == 0x000004, "Member 'AthenaHUDContext_IsFiringFromTouch::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsInBuildMode
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsInBuildMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsInBuildMode) == 0x000001, "Wrong alignment on AthenaHUDContext_IsInBuildMode");
static_assert(sizeof(AthenaHUDContext_IsInBuildMode) == 0x000001, "Wrong size on AthenaHUDContext_IsInBuildMode");
static_assert(offsetof(AthenaHUDContext_IsInBuildMode, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsInBuildMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsInSelectWidgetToMoveMode
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsInSelectWidgetToMoveMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsInSelectWidgetToMoveMode) == 0x000001, "Wrong alignment on AthenaHUDContext_IsInSelectWidgetToMoveMode");
static_assert(sizeof(AthenaHUDContext_IsInSelectWidgetToMoveMode) == 0x000001, "Wrong size on AthenaHUDContext_IsInSelectWidgetToMoveMode");
static_assert(offsetof(AthenaHUDContext_IsInSelectWidgetToMoveMode, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsInSelectWidgetToMoveMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsMovingSelectedWidget
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsMovingSelectedWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsMovingSelectedWidget) == 0x000001, "Wrong alignment on AthenaHUDContext_IsMovingSelectedWidget");
static_assert(sizeof(AthenaHUDContext_IsMovingSelectedWidget) == 0x000001, "Wrong size on AthenaHUDContext_IsMovingSelectedWidget");
static_assert(offsetof(AthenaHUDContext_IsMovingSelectedWidget, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsMovingSelectedWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsOperatingTurret
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsOperatingTurret final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsOperatingTurret) == 0x000001, "Wrong alignment on AthenaHUDContext_IsOperatingTurret");
static_assert(sizeof(AthenaHUDContext_IsOperatingTurret) == 0x000001, "Wrong size on AthenaHUDContext_IsOperatingTurret");
static_assert(offsetof(AthenaHUDContext_IsOperatingTurret, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsOperatingTurret::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsRunningOnBattery
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsRunningOnBattery final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsRunningOnBattery) == 0x000001, "Wrong alignment on AthenaHUDContext_IsRunningOnBattery");
static_assert(sizeof(AthenaHUDContext_IsRunningOnBattery) == 0x000001, "Wrong size on AthenaHUDContext_IsRunningOnBattery");
static_assert(offsetof(AthenaHUDContext_IsRunningOnBattery, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsRunningOnBattery::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsShowViewerCountEnabled
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsShowViewerCountEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsShowViewerCountEnabled) == 0x000001, "Wrong alignment on AthenaHUDContext_IsShowViewerCountEnabled");
static_assert(sizeof(AthenaHUDContext_IsShowViewerCountEnabled) == 0x000001, "Wrong size on AthenaHUDContext_IsShowViewerCountEnabled");
static_assert(offsetof(AthenaHUDContext_IsShowViewerCountEnabled, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsShowViewerCountEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsSwapping
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsSwapping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsSwapping) == 0x000001, "Wrong alignment on AthenaHUDContext_IsSwapping");
static_assert(sizeof(AthenaHUDContext_IsSwapping) == 0x000001, "Wrong size on AthenaHUDContext_IsSwapping");
static_assert(offsetof(AthenaHUDContext_IsSwapping, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsSwapping::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsTargeting
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsTargeting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsTargeting) == 0x000001, "Wrong alignment on AthenaHUDContext_IsTargeting");
static_assert(sizeof(AthenaHUDContext_IsTargeting) == 0x000001, "Wrong size on AthenaHUDContext_IsTargeting");
static_assert(offsetof(AthenaHUDContext_IsTargeting, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsTargeting::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsUsingScope
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsUsingScope final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsUsingScope) == 0x000001, "Wrong alignment on AthenaHUDContext_IsUsingScope");
static_assert(sizeof(AthenaHUDContext_IsUsingScope) == 0x000001, "Wrong size on AthenaHUDContext_IsUsingScope");
static_assert(offsetof(AthenaHUDContext_IsUsingScope, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsUsingScope::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.IsVictoryUICinematic
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_IsVictoryUICinematic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_IsVictoryUICinematic) == 0x000001, "Wrong alignment on AthenaHUDContext_IsVictoryUICinematic");
static_assert(sizeof(AthenaHUDContext_IsVictoryUICinematic) == 0x000001, "Wrong size on AthenaHUDContext_IsVictoryUICinematic");
static_assert(offsetof(AthenaHUDContext_IsVictoryUICinematic, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_IsVictoryUICinematic::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.OwnerOrWeaponHasTag
// 0x000C (0x000C - 0x0000)
struct AthenaHUDContext_OwnerOrWeaponHasTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaHUDContext_OwnerOrWeaponHasTag) == 0x000004, "Wrong alignment on AthenaHUDContext_OwnerOrWeaponHasTag");
static_assert(sizeof(AthenaHUDContext_OwnerOrWeaponHasTag) == 0x00000C, "Wrong size on AthenaHUDContext_OwnerOrWeaponHasTag");
static_assert(offsetof(AthenaHUDContext_OwnerOrWeaponHasTag, InTag) == 0x000000, "Member 'AthenaHUDContext_OwnerOrWeaponHasTag::InTag' has a wrong offset!");
static_assert(offsetof(AthenaHUDContext_OwnerOrWeaponHasTag, ReturnValue) == 0x000008, "Member 'AthenaHUDContext_OwnerOrWeaponHasTag::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.ShouldPlayCustomEndScreenAtLoss
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_ShouldPlayCustomEndScreenAtLoss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_ShouldPlayCustomEndScreenAtLoss) == 0x000001, "Wrong alignment on AthenaHUDContext_ShouldPlayCustomEndScreenAtLoss");
static_assert(sizeof(AthenaHUDContext_ShouldPlayCustomEndScreenAtLoss) == 0x000001, "Wrong size on AthenaHUDContext_ShouldPlayCustomEndScreenAtLoss");
static_assert(offsetof(AthenaHUDContext_ShouldPlayCustomEndScreenAtLoss, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_ShouldPlayCustomEndScreenAtLoss::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.ShouldVictoryUIPushEmoteInput
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_ShouldVictoryUIPushEmoteInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_ShouldVictoryUIPushEmoteInput) == 0x000001, "Wrong alignment on AthenaHUDContext_ShouldVictoryUIPushEmoteInput");
static_assert(sizeof(AthenaHUDContext_ShouldVictoryUIPushEmoteInput) == 0x000001, "Wrong size on AthenaHUDContext_ShouldVictoryUIPushEmoteInput");
static_assert(offsetof(AthenaHUDContext_ShouldVictoryUIPushEmoteInput, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_ShouldVictoryUIPushEmoteInput::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.UseTapToShoot
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDContext_UseTapToShoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_UseTapToShoot) == 0x000001, "Wrong alignment on AthenaHUDContext_UseTapToShoot");
static_assert(sizeof(AthenaHUDContext_UseTapToShoot) == 0x000001, "Wrong size on AthenaHUDContext_UseTapToShoot");
static_assert(offsetof(AthenaHUDContext_UseTapToShoot, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_UseTapToShoot::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDContext.VictoryStingerTimeUntilFadeOut
// 0x0004 (0x0004 - 0x0000)
struct AthenaHUDContext_VictoryStingerTimeUntilFadeOut final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDContext_VictoryStingerTimeUntilFadeOut) == 0x000004, "Wrong alignment on AthenaHUDContext_VictoryStingerTimeUntilFadeOut");
static_assert(sizeof(AthenaHUDContext_VictoryStingerTimeUntilFadeOut) == 0x000004, "Wrong size on AthenaHUDContext_VictoryStingerTimeUntilFadeOut");
static_assert(offsetof(AthenaHUDContext_VictoryStingerTimeUntilFadeOut, ReturnValue) == 0x000000, "Member 'AthenaHUDContext_VictoryStingerTimeUntilFadeOut::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaHUDGamePhaseChangingBase.GamePhaseStepChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDGamePhaseChangingBase_GamePhaseStepChanged final
{
public:
	EAthenaGamePhaseStep                          Step;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDGamePhaseChangingBase_GamePhaseStepChanged) == 0x000001, "Wrong alignment on AthenaHUDGamePhaseChangingBase_GamePhaseStepChanged");
static_assert(sizeof(AthenaHUDGamePhaseChangingBase_GamePhaseStepChanged) == 0x000001, "Wrong size on AthenaHUDGamePhaseChangingBase_GamePhaseStepChanged");
static_assert(offsetof(AthenaHUDGamePhaseChangingBase_GamePhaseStepChanged, Step) == 0x000000, "Member 'AthenaHUDGamePhaseChangingBase_GamePhaseStepChanged::Step' has a wrong offset!");

// Function FortniteUI.AthenaHUDGamePhaseChangingBase.HandleGamePhaseStepChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaHUDGamePhaseChangingBase_HandleGamePhaseStepChanged final
{
public:
	EAthenaGamePhaseStep                          Step;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDGamePhaseChangingBase_HandleGamePhaseStepChanged) == 0x000001, "Wrong alignment on AthenaHUDGamePhaseChangingBase_HandleGamePhaseStepChanged");
static_assert(sizeof(AthenaHUDGamePhaseChangingBase_HandleGamePhaseStepChanged) == 0x000001, "Wrong size on AthenaHUDGamePhaseChangingBase_HandleGamePhaseStepChanged");
static_assert(offsetof(AthenaHUDGamePhaseChangingBase_HandleGamePhaseStepChanged, Step) == 0x000000, "Member 'AthenaHUDGamePhaseChangingBase_HandleGamePhaseStepChanged::Step' has a wrong offset!");

// Function FortniteUI.AthenaHUDGamePhaseChangingBase.UpdateMessaging
// 0x0038 (0x0038 - 0x0000)
struct AthenaHUDGamePhaseChangingBase_UpdateMessaging final
{
public:
	EAthenaGamePhaseStep                          Step;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MESSAGE;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   TimeText;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDGamePhaseChangingBase_UpdateMessaging) == 0x000008, "Wrong alignment on AthenaHUDGamePhaseChangingBase_UpdateMessaging");
static_assert(sizeof(AthenaHUDGamePhaseChangingBase_UpdateMessaging) == 0x000038, "Wrong size on AthenaHUDGamePhaseChangingBase_UpdateMessaging");
static_assert(offsetof(AthenaHUDGamePhaseChangingBase_UpdateMessaging, Step) == 0x000000, "Member 'AthenaHUDGamePhaseChangingBase_UpdateMessaging::Step' has a wrong offset!");
static_assert(offsetof(AthenaHUDGamePhaseChangingBase_UpdateMessaging, MESSAGE) == 0x000008, "Member 'AthenaHUDGamePhaseChangingBase_UpdateMessaging::MESSAGE' has a wrong offset!");
static_assert(offsetof(AthenaHUDGamePhaseChangingBase_UpdateMessaging, TimeText) == 0x000020, "Member 'AthenaHUDGamePhaseChangingBase_UpdateMessaging::TimeText' has a wrong offset!");

// Function FortniteUI.TagTeamChangeMessage.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct TagTeamChangeMessage_SetTeam final
{
public:
	bool                                          bIsIt;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagTeamChangeMessage_SetTeam) == 0x000001, "Wrong alignment on TagTeamChangeMessage_SetTeam");
static_assert(sizeof(TagTeamChangeMessage_SetTeam) == 0x000001, "Wrong size on TagTeamChangeMessage_SetTeam");
static_assert(offsetof(TagTeamChangeMessage_SetTeam, bIsIt) == 0x000000, "Member 'TagTeamChangeMessage_SetTeam::bIsIt' has a wrong offset!");

// Function FortniteUI.FortTeamMemberEntryBase.BP_OnTeamMemberEstablished
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberEntryBase_BP_OnTeamMemberEstablished final
{
public:
	bool                                          bHasValidMember;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberEntryBase_BP_OnTeamMemberEstablished) == 0x000001, "Wrong alignment on FortTeamMemberEntryBase_BP_OnTeamMemberEstablished");
static_assert(sizeof(FortTeamMemberEntryBase_BP_OnTeamMemberEstablished) == 0x000001, "Wrong size on FortTeamMemberEntryBase_BP_OnTeamMemberEstablished");
static_assert(offsetof(FortTeamMemberEntryBase_BP_OnTeamMemberEstablished, bHasValidMember) == 0x000000, "Member 'FortTeamMemberEntryBase_BP_OnTeamMemberEstablished::bHasValidMember' has a wrong offset!");

// Function FortniteUI.FortTeamMemberEntryBase.OnMemberGameReadinessChanged
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberEntryBase_OnMemberGameReadinessChanged final
{
public:
	EGameReadiness                                ReadyStatus;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberEntryBase_OnMemberGameReadinessChanged) == 0x000001, "Wrong alignment on FortTeamMemberEntryBase_OnMemberGameReadinessChanged");
static_assert(sizeof(FortTeamMemberEntryBase_OnMemberGameReadinessChanged) == 0x000001, "Wrong size on FortTeamMemberEntryBase_OnMemberGameReadinessChanged");
static_assert(offsetof(FortTeamMemberEntryBase_OnMemberGameReadinessChanged, ReadyStatus) == 0x000000, "Member 'FortTeamMemberEntryBase_OnMemberGameReadinessChanged::ReadyStatus' has a wrong offset!");

// Function FortniteUI.FortTeamMemberEntryBase.OnMemberIsInFrontendChanged
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberEntryBase_OnMemberIsInFrontendChanged final
{
public:
	bool                                          bIsInFrontend;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberEntryBase_OnMemberIsInFrontendChanged) == 0x000001, "Wrong alignment on FortTeamMemberEntryBase_OnMemberIsInFrontendChanged");
static_assert(sizeof(FortTeamMemberEntryBase_OnMemberIsInFrontendChanged) == 0x000001, "Wrong size on FortTeamMemberEntryBase_OnMemberIsInFrontendChanged");
static_assert(offsetof(FortTeamMemberEntryBase_OnMemberIsInFrontendChanged, bIsInFrontend) == 0x000000, "Member 'FortTeamMemberEntryBase_OnMemberIsInFrontendChanged::bIsInFrontend' has a wrong offset!");

// Function FortniteUI.FortTeamMemberEntryBase.GetCurrentMemberGameReadiness
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberEntryBase_GetCurrentMemberGameReadiness final
{
public:
	EGameReadiness                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberEntryBase_GetCurrentMemberGameReadiness) == 0x000001, "Wrong alignment on FortTeamMemberEntryBase_GetCurrentMemberGameReadiness");
static_assert(sizeof(FortTeamMemberEntryBase_GetCurrentMemberGameReadiness) == 0x000001, "Wrong size on FortTeamMemberEntryBase_GetCurrentMemberGameReadiness");
static_assert(offsetof(FortTeamMemberEntryBase_GetCurrentMemberGameReadiness, ReturnValue) == 0x000000, "Member 'FortTeamMemberEntryBase_GetCurrentMemberGameReadiness::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTeamMemberEntryBase.IsCurrentMemberInFrontend
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberEntryBase_IsCurrentMemberInFrontend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberEntryBase_IsCurrentMemberInFrontend) == 0x000001, "Wrong alignment on FortTeamMemberEntryBase_IsCurrentMemberInFrontend");
static_assert(sizeof(FortTeamMemberEntryBase_IsCurrentMemberInFrontend) == 0x000001, "Wrong size on FortTeamMemberEntryBase_IsCurrentMemberInFrontend");
static_assert(offsetof(FortTeamMemberEntryBase_IsCurrentMemberInFrontend, ReturnValue) == 0x000000, "Member 'FortTeamMemberEntryBase_IsCurrentMemberInFrontend::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTeamMemberEntryBase.IsCurrentMemberLocal
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberEntryBase_IsCurrentMemberLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberEntryBase_IsCurrentMemberLocal) == 0x000001, "Wrong alignment on FortTeamMemberEntryBase_IsCurrentMemberLocal");
static_assert(sizeof(FortTeamMemberEntryBase_IsCurrentMemberLocal) == 0x000001, "Wrong size on FortTeamMemberEntryBase_IsCurrentMemberLocal");
static_assert(offsetof(FortTeamMemberEntryBase_IsCurrentMemberLocal, ReturnValue) == 0x000000, "Member 'FortTeamMemberEntryBase_IsCurrentMemberLocal::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroAbilitiesAndGadgetsBase.Refresh
// 0x0008 (0x0008 - 0x0000)
struct FortHeroAbilitiesAndGadgetsBase_Refresh final
{
public:
	class UFortCampaignHeroLoadoutItem*           HeroLoadout;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroAbilitiesAndGadgetsBase_Refresh) == 0x000008, "Wrong alignment on FortHeroAbilitiesAndGadgetsBase_Refresh");
static_assert(sizeof(FortHeroAbilitiesAndGadgetsBase_Refresh) == 0x000008, "Wrong size on FortHeroAbilitiesAndGadgetsBase_Refresh");
static_assert(offsetof(FortHeroAbilitiesAndGadgetsBase_Refresh, HeroLoadout) == 0x000000, "Member 'FortHeroAbilitiesAndGadgetsBase_Refresh::HeroLoadout' has a wrong offset!");

// Function FortniteUI.AthenaHUDPlayerActionAlertBase.AlertPlayer
// 0x0020 (0x0020 - 0x0000)
struct AthenaHUDPlayerActionAlertBase_AlertPlayer final
{
public:
	EAthenaPlayerActionAlert                      Alert;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DetailText;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaHUDPlayerActionAlertBase_AlertPlayer) == 0x000008, "Wrong alignment on AthenaHUDPlayerActionAlertBase_AlertPlayer");
static_assert(sizeof(AthenaHUDPlayerActionAlertBase_AlertPlayer) == 0x000020, "Wrong size on AthenaHUDPlayerActionAlertBase_AlertPlayer");
static_assert(offsetof(AthenaHUDPlayerActionAlertBase_AlertPlayer, Alert) == 0x000000, "Member 'AthenaHUDPlayerActionAlertBase_AlertPlayer::Alert' has a wrong offset!");
static_assert(offsetof(AthenaHUDPlayerActionAlertBase_AlertPlayer, DetailText) == 0x000008, "Member 'AthenaHUDPlayerActionAlertBase_AlertPlayer::DetailText' has a wrong offset!");

// Function FortniteUI.AthenaIndicatorLayerBase.OnTargetingChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaIndicatorLayerBase_OnTargetingChanged final
{
public:
	bool                                          bTargeting;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaIndicatorLayerBase_OnTargetingChanged) == 0x000001, "Wrong alignment on AthenaIndicatorLayerBase_OnTargetingChanged");
static_assert(sizeof(AthenaIndicatorLayerBase_OnTargetingChanged) == 0x000001, "Wrong size on AthenaIndicatorLayerBase_OnTargetingChanged");
static_assert(offsetof(AthenaIndicatorLayerBase_OnTargetingChanged, bTargeting) == 0x000000, "Member 'AthenaIndicatorLayerBase_OnTargetingChanged::bTargeting' has a wrong offset!");

// Function FortniteUI.AthenaIndicatorLayerBase.PlayersWithNameIndicatorsChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaIndicatorLayerBase_PlayersWithNameIndicatorsChanged final
{
public:
	TArray<class AFortPlayerStateAthena*>         PlayerStates;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaIndicatorLayerBase_PlayersWithNameIndicatorsChanged) == 0x000008, "Wrong alignment on AthenaIndicatorLayerBase_PlayersWithNameIndicatorsChanged");
static_assert(sizeof(AthenaIndicatorLayerBase_PlayersWithNameIndicatorsChanged) == 0x000010, "Wrong size on AthenaIndicatorLayerBase_PlayersWithNameIndicatorsChanged");
static_assert(offsetof(AthenaIndicatorLayerBase_PlayersWithNameIndicatorsChanged, PlayerStates) == 0x000000, "Member 'AthenaIndicatorLayerBase_PlayersWithNameIndicatorsChanged::PlayerStates' has a wrong offset!");

// Function FortniteUI.AthenaIndicatorLayerBase.SetDataSource
// 0x0008 (0x0008 - 0x0000)
struct AthenaIndicatorLayerBase_SetDataSource final
{
public:
	class UAthenaPlayerViewModel*                 PlayerViewModel;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaIndicatorLayerBase_SetDataSource) == 0x000008, "Wrong alignment on AthenaIndicatorLayerBase_SetDataSource");
static_assert(sizeof(AthenaIndicatorLayerBase_SetDataSource) == 0x000008, "Wrong size on AthenaIndicatorLayerBase_SetDataSource");
static_assert(offsetof(AthenaIndicatorLayerBase_SetDataSource, PlayerViewModel) == 0x000000, "Member 'AthenaIndicatorLayerBase_SetDataSource::PlayerViewModel' has a wrong offset!");

// Function FortniteUI.AthenaIndicatorLayerBase.GetNameIndicatedPlayers
// 0x0010 (0x0010 - 0x0000)
struct AthenaIndicatorLayerBase_GetNameIndicatedPlayers final
{
public:
	TArray<class AFortPlayerStateAthena*>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaIndicatorLayerBase_GetNameIndicatedPlayers) == 0x000008, "Wrong alignment on AthenaIndicatorLayerBase_GetNameIndicatedPlayers");
static_assert(sizeof(AthenaIndicatorLayerBase_GetNameIndicatedPlayers) == 0x000010, "Wrong size on AthenaIndicatorLayerBase_GetNameIndicatedPlayers");
static_assert(offsetof(AthenaIndicatorLayerBase_GetNameIndicatedPlayers, ReturnValue) == 0x000000, "Member 'AthenaIndicatorLayerBase_GetNameIndicatedPlayers::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaIndicatorLayerBase.GetPlayerViewModel
// 0x0008 (0x0008 - 0x0000)
struct AthenaIndicatorLayerBase_GetPlayerViewModel final
{
public:
	class UAthenaPlayerViewModel*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaIndicatorLayerBase_GetPlayerViewModel) == 0x000008, "Wrong alignment on AthenaIndicatorLayerBase_GetPlayerViewModel");
static_assert(sizeof(AthenaIndicatorLayerBase_GetPlayerViewModel) == 0x000008, "Wrong size on AthenaIndicatorLayerBase_GetPlayerViewModel");
static_assert(offsetof(AthenaIndicatorLayerBase_GetPlayerViewModel, ReturnValue) == 0x000000, "Member 'AthenaIndicatorLayerBase_GetPlayerViewModel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemDetailsHostPanel.HandleItemEvolutionComplete
// 0x0028 (0x0028 - 0x0000)
struct FortItemDetailsHostPanel_HandleItemEvolutionComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConvertedItemInstanceId;                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemInstanceQuantityPair>  ItemsQuantities;                                   // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsHostPanel_HandleItemEvolutionComplete) == 0x000008, "Wrong alignment on FortItemDetailsHostPanel_HandleItemEvolutionComplete");
static_assert(sizeof(FortItemDetailsHostPanel_HandleItemEvolutionComplete) == 0x000028, "Wrong size on FortItemDetailsHostPanel_HandleItemEvolutionComplete");
static_assert(offsetof(FortItemDetailsHostPanel_HandleItemEvolutionComplete, bWasSuccessful) == 0x000000, "Member 'FortItemDetailsHostPanel_HandleItemEvolutionComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(FortItemDetailsHostPanel_HandleItemEvolutionComplete, ConvertedItemInstanceId) == 0x000008, "Member 'FortItemDetailsHostPanel_HandleItemEvolutionComplete::ConvertedItemInstanceId' has a wrong offset!");
static_assert(offsetof(FortItemDetailsHostPanel_HandleItemEvolutionComplete, ItemsQuantities) == 0x000018, "Member 'FortItemDetailsHostPanel_HandleItemEvolutionComplete::ItemsQuantities' has a wrong offset!");

// Function FortniteUI.FortItemDetailsHostPanel.HandleItemRarityUpgradeComplete
// 0x0028 (0x0028 - 0x0000)
struct FortItemDetailsHostPanel_HandleItemRarityUpgradeComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConvertedItemInstanceId;                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemInstanceQuantityPair>  ItemsQuantities;                                   // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsHostPanel_HandleItemRarityUpgradeComplete) == 0x000008, "Wrong alignment on FortItemDetailsHostPanel_HandleItemRarityUpgradeComplete");
static_assert(sizeof(FortItemDetailsHostPanel_HandleItemRarityUpgradeComplete) == 0x000028, "Wrong size on FortItemDetailsHostPanel_HandleItemRarityUpgradeComplete");
static_assert(offsetof(FortItemDetailsHostPanel_HandleItemRarityUpgradeComplete, bWasSuccessful) == 0x000000, "Member 'FortItemDetailsHostPanel_HandleItemRarityUpgradeComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(FortItemDetailsHostPanel_HandleItemRarityUpgradeComplete, ConvertedItemInstanceId) == 0x000008, "Member 'FortItemDetailsHostPanel_HandleItemRarityUpgradeComplete::ConvertedItemInstanceId' has a wrong offset!");
static_assert(offsetof(FortItemDetailsHostPanel_HandleItemRarityUpgradeComplete, ItemsQuantities) == 0x000018, "Member 'FortItemDetailsHostPanel_HandleItemRarityUpgradeComplete::ItemsQuantities' has a wrong offset!");

// Function FortniteUI.FortItemDetailsHostPanel.HandleItemRefundComplete
// 0x0028 (0x0028 - 0x0000)
struct FortItemDetailsHostPanel_HandleItemRefundComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConvertedItemInstanceId;                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemInstanceQuantityPair>  ItemsQuantities;                                   // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsHostPanel_HandleItemRefundComplete) == 0x000008, "Wrong alignment on FortItemDetailsHostPanel_HandleItemRefundComplete");
static_assert(sizeof(FortItemDetailsHostPanel_HandleItemRefundComplete) == 0x000028, "Wrong size on FortItemDetailsHostPanel_HandleItemRefundComplete");
static_assert(offsetof(FortItemDetailsHostPanel_HandleItemRefundComplete, bWasSuccessful) == 0x000000, "Member 'FortItemDetailsHostPanel_HandleItemRefundComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(FortItemDetailsHostPanel_HandleItemRefundComplete, ConvertedItemInstanceId) == 0x000008, "Member 'FortItemDetailsHostPanel_HandleItemRefundComplete::ConvertedItemInstanceId' has a wrong offset!");
static_assert(offsetof(FortItemDetailsHostPanel_HandleItemRefundComplete, ItemsQuantities) == 0x000018, "Member 'FortItemDetailsHostPanel_HandleItemRefundComplete::ItemsQuantities' has a wrong offset!");

// Function FortniteUI.FortItemDetailsHostPanel.SetInspectMode
// 0x0001 (0x0001 - 0x0000)
struct FortItemDetailsHostPanel_SetInspectMode final
{
public:
	EFortItemInspectionMode                       InspectMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsHostPanel_SetInspectMode) == 0x000001, "Wrong alignment on FortItemDetailsHostPanel_SetInspectMode");
static_assert(sizeof(FortItemDetailsHostPanel_SetInspectMode) == 0x000001, "Wrong size on FortItemDetailsHostPanel_SetInspectMode");
static_assert(offsetof(FortItemDetailsHostPanel_SetInspectMode, InspectMode) == 0x000000, "Member 'FortItemDetailsHostPanel_SetInspectMode::InspectMode' has a wrong offset!");

// Function FortniteUI.FortItemDetailsHostPanel.SetIsUpdatingSuspended
// 0x0001 (0x0001 - 0x0000)
struct FortItemDetailsHostPanel_SetIsUpdatingSuspended final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsHostPanel_SetIsUpdatingSuspended) == 0x000001, "Wrong alignment on FortItemDetailsHostPanel_SetIsUpdatingSuspended");
static_assert(sizeof(FortItemDetailsHostPanel_SetIsUpdatingSuspended) == 0x000001, "Wrong size on FortItemDetailsHostPanel_SetIsUpdatingSuspended");
static_assert(offsetof(FortItemDetailsHostPanel_SetIsUpdatingSuspended, bValue) == 0x000000, "Member 'FortItemDetailsHostPanel_SetIsUpdatingSuspended::bValue' has a wrong offset!");

// Function FortniteUI.FortItemDetailsHostPanel.SetItemToCompareWith
// 0x0008 (0x0008 - 0x0000)
struct FortItemDetailsHostPanel_SetItemToCompareWith final
{
public:
	const class UFortItem*                        Param_ItemToCompareWith;                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsHostPanel_SetItemToCompareWith) == 0x000008, "Wrong alignment on FortItemDetailsHostPanel_SetItemToCompareWith");
static_assert(sizeof(FortItemDetailsHostPanel_SetItemToCompareWith) == 0x000008, "Wrong size on FortItemDetailsHostPanel_SetItemToCompareWith");
static_assert(offsetof(FortItemDetailsHostPanel_SetItemToCompareWith, Param_ItemToCompareWith) == 0x000000, "Member 'FortItemDetailsHostPanel_SetItemToCompareWith::Param_ItemToCompareWith' has a wrong offset!");

// Function FortniteUI.FortItemDetailsHostPanel.SetItemToDetail
// 0x0008 (0x0008 - 0x0000)
struct FortItemDetailsHostPanel_SetItemToDetail final
{
public:
	const class UFortItem*                        Param_ItemToDetail;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsHostPanel_SetItemToDetail) == 0x000008, "Wrong alignment on FortItemDetailsHostPanel_SetItemToDetail");
static_assert(sizeof(FortItemDetailsHostPanel_SetItemToDetail) == 0x000008, "Wrong size on FortItemDetailsHostPanel_SetItemToDetail");
static_assert(offsetof(FortItemDetailsHostPanel_SetItemToDetail, Param_ItemToDetail) == 0x000000, "Member 'FortItemDetailsHostPanel_SetItemToDetail::Param_ItemToDetail' has a wrong offset!");

// Function FortniteUI.FortItemDetailsHostPanel.SetItemViewContext
// 0x0010 (0x0010 - 0x0000)
struct FortItemDetailsHostPanel_SetItemViewContext final
{
public:
	TScriptInterface<class IFortItemViewContextInterface> Param_ItemViewContext;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsHostPanel_SetItemViewContext) == 0x000008, "Wrong alignment on FortItemDetailsHostPanel_SetItemViewContext");
static_assert(sizeof(FortItemDetailsHostPanel_SetItemViewContext) == 0x000010, "Wrong size on FortItemDetailsHostPanel_SetItemViewContext");
static_assert(offsetof(FortItemDetailsHostPanel_SetItemViewContext, Param_ItemViewContext) == 0x000000, "Member 'FortItemDetailsHostPanel_SetItemViewContext::Param_ItemViewContext' has a wrong offset!");

// Function FortniteUI.FortItemDetailsHostPanel.SetQuantityOverride
// 0x0004 (0x0004 - 0x0000)
struct FortItemDetailsHostPanel_SetQuantityOverride final
{
public:
	int32                                         Param_QuantityOverride;                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsHostPanel_SetQuantityOverride) == 0x000004, "Wrong alignment on FortItemDetailsHostPanel_SetQuantityOverride");
static_assert(sizeof(FortItemDetailsHostPanel_SetQuantityOverride) == 0x000004, "Wrong size on FortItemDetailsHostPanel_SetQuantityOverride");
static_assert(offsetof(FortItemDetailsHostPanel_SetQuantityOverride, Param_QuantityOverride) == 0x000000, "Member 'FortItemDetailsHostPanel_SetQuantityOverride::Param_QuantityOverride' has a wrong offset!");

// Function FortniteUI.FortItemDetailsHostPanel.ShouldPreviewUpgradingItem
// 0x0001 (0x0001 - 0x0000)
struct FortItemDetailsHostPanel_ShouldPreviewUpgradingItem final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsHostPanel_ShouldPreviewUpgradingItem) == 0x000001, "Wrong alignment on FortItemDetailsHostPanel_ShouldPreviewUpgradingItem");
static_assert(sizeof(FortItemDetailsHostPanel_ShouldPreviewUpgradingItem) == 0x000001, "Wrong size on FortItemDetailsHostPanel_ShouldPreviewUpgradingItem");
static_assert(offsetof(FortItemDetailsHostPanel_ShouldPreviewUpgradingItem, Value) == 0x000000, "Member 'FortItemDetailsHostPanel_ShouldPreviewUpgradingItem::Value' has a wrong offset!");

// Function FortniteUI.FortHeroSupportPerkWidget.SetHeroToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortHeroSupportPerkWidget_SetHeroToRepresent final
{
public:
	const class UFortHero*                        InHeroToRepresent;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroSupportPerkWidget_SetHeroToRepresent) == 0x000008, "Wrong alignment on FortHeroSupportPerkWidget_SetHeroToRepresent");
static_assert(sizeof(FortHeroSupportPerkWidget_SetHeroToRepresent) == 0x000008, "Wrong size on FortHeroSupportPerkWidget_SetHeroToRepresent");
static_assert(offsetof(FortHeroSupportPerkWidget_SetHeroToRepresent, InHeroToRepresent) == 0x000000, "Member 'FortHeroSupportPerkWidget_SetHeroToRepresent::InHeroToRepresent' has a wrong offset!");

// Function FortniteUI.FortHeroSupportPerkWidget.SetState
// 0x0001 (0x0001 - 0x0000)
struct FortHeroSupportPerkWidget_SetState final
{
public:
	EFortSupportPerkWidgetState                   InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroSupportPerkWidget_SetState) == 0x000001, "Wrong alignment on FortHeroSupportPerkWidget_SetState");
static_assert(sizeof(FortHeroSupportPerkWidget_SetState) == 0x000001, "Wrong size on FortHeroSupportPerkWidget_SetState");
static_assert(offsetof(FortHeroSupportPerkWidget_SetState, InState) == 0x000000, "Member 'FortHeroSupportPerkWidget_SetState::InState' has a wrong offset!");

// Function FortniteUI.FortHeroSupportPerkWidget.SetSupportTypeToRepresent
// 0x0001 (0x0001 - 0x0000)
struct FortHeroSupportPerkWidget_SetSupportTypeToRepresent final
{
public:
	EFortSupportBonusType                         InSupportTypeToRepresent;                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroSupportPerkWidget_SetSupportTypeToRepresent) == 0x000001, "Wrong alignment on FortHeroSupportPerkWidget_SetSupportTypeToRepresent");
static_assert(sizeof(FortHeroSupportPerkWidget_SetSupportTypeToRepresent) == 0x000001, "Wrong size on FortHeroSupportPerkWidget_SetSupportTypeToRepresent");
static_assert(offsetof(FortHeroSupportPerkWidget_SetSupportTypeToRepresent, InSupportTypeToRepresent) == 0x000000, "Member 'FortHeroSupportPerkWidget_SetSupportTypeToRepresent::InSupportTypeToRepresent' has a wrong offset!");

// Function FortniteUI.FortHeroSupportPerkWidget.IsHeroInSupportSlot
// 0x0001 (0x0001 - 0x0000)
struct FortHeroSupportPerkWidget_IsHeroInSupportSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroSupportPerkWidget_IsHeroInSupportSlot) == 0x000001, "Wrong alignment on FortHeroSupportPerkWidget_IsHeroInSupportSlot");
static_assert(sizeof(FortHeroSupportPerkWidget_IsHeroInSupportSlot) == 0x000001, "Wrong size on FortHeroSupportPerkWidget_IsHeroInSupportSlot");
static_assert(offsetof(FortHeroSupportPerkWidget_IsHeroInSupportSlot, ReturnValue) == 0x000000, "Member 'FortHeroSupportPerkWidget_IsHeroInSupportSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroSupportPerkWidget.IsPerkActive
// 0x0001 (0x0001 - 0x0000)
struct FortHeroSupportPerkWidget_IsPerkActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroSupportPerkWidget_IsPerkActive) == 0x000001, "Wrong alignment on FortHeroSupportPerkWidget_IsPerkActive");
static_assert(sizeof(FortHeroSupportPerkWidget_IsPerkActive) == 0x000001, "Wrong size on FortHeroSupportPerkWidget_IsPerkActive");
static_assert(offsetof(FortHeroSupportPerkWidget_IsPerkActive, ReturnValue) == 0x000000, "Member 'FortHeroSupportPerkWidget_IsPerkActive::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroSupportPerkWidget.IsPerkEmpty
// 0x0001 (0x0001 - 0x0000)
struct FortHeroSupportPerkWidget_IsPerkEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroSupportPerkWidget_IsPerkEmpty) == 0x000001, "Wrong alignment on FortHeroSupportPerkWidget_IsPerkEmpty");
static_assert(sizeof(FortHeroSupportPerkWidget_IsPerkEmpty) == 0x000001, "Wrong size on FortHeroSupportPerkWidget_IsPerkEmpty");
static_assert(offsetof(FortHeroSupportPerkWidget_IsPerkEmpty, ReturnValue) == 0x000000, "Member 'FortHeroSupportPerkWidget_IsPerkEmpty::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroSupportPerkWidget.IsPerkHighlighted
// 0x0001 (0x0001 - 0x0000)
struct FortHeroSupportPerkWidget_IsPerkHighlighted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroSupportPerkWidget_IsPerkHighlighted) == 0x000001, "Wrong alignment on FortHeroSupportPerkWidget_IsPerkHighlighted");
static_assert(sizeof(FortHeroSupportPerkWidget_IsPerkHighlighted) == 0x000001, "Wrong size on FortHeroSupportPerkWidget_IsPerkHighlighted");
static_assert(offsetof(FortHeroSupportPerkWidget_IsPerkHighlighted, ReturnValue) == 0x000000, "Member 'FortHeroSupportPerkWidget_IsPerkHighlighted::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroSupportPerkWidget.IsPerkInCorrectSlot
// 0x0001 (0x0001 - 0x0000)
struct FortHeroSupportPerkWidget_IsPerkInCorrectSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroSupportPerkWidget_IsPerkInCorrectSlot) == 0x000001, "Wrong alignment on FortHeroSupportPerkWidget_IsPerkInCorrectSlot");
static_assert(sizeof(FortHeroSupportPerkWidget_IsPerkInCorrectSlot) == 0x000001, "Wrong size on FortHeroSupportPerkWidget_IsPerkInCorrectSlot");
static_assert(offsetof(FortHeroSupportPerkWidget_IsPerkInCorrectSlot, ReturnValue) == 0x000000, "Member 'FortHeroSupportPerkWidget_IsPerkInCorrectSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroSupportPerkWidget.IsPerkUnlocked
// 0x0001 (0x0001 - 0x0000)
struct FortHeroSupportPerkWidget_IsPerkUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroSupportPerkWidget_IsPerkUnlocked) == 0x000001, "Wrong alignment on FortHeroSupportPerkWidget_IsPerkUnlocked");
static_assert(sizeof(FortHeroSupportPerkWidget_IsPerkUnlocked) == 0x000001, "Wrong size on FortHeroSupportPerkWidget_IsPerkUnlocked");
static_assert(offsetof(FortHeroSupportPerkWidget_IsPerkUnlocked, ReturnValue) == 0x000000, "Member 'FortHeroSupportPerkWidget_IsPerkUnlocked::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaInventoryPanelBase.AdvanceSelection
// 0x0008 (0x0008 - 0x0000)
struct AthenaInventoryPanelBase_AdvanceSelection final
{
public:
	class UFortItemTileView*                      TileView;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryPanelBase_AdvanceSelection) == 0x000008, "Wrong alignment on AthenaInventoryPanelBase_AdvanceSelection");
static_assert(sizeof(AthenaInventoryPanelBase_AdvanceSelection) == 0x000008, "Wrong size on AthenaInventoryPanelBase_AdvanceSelection");
static_assert(offsetof(AthenaInventoryPanelBase_AdvanceSelection, TileView) == 0x000000, "Member 'AthenaInventoryPanelBase_AdvanceSelection::TileView' has a wrong offset!");

// Function FortniteUI.AthenaInventoryPanelBase.FocusTileView
// 0x0008 (0x0008 - 0x0000)
struct AthenaInventoryPanelBase_FocusTileView final
{
public:
	class UFortItemTileView*                      TileView;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryPanelBase_FocusTileView) == 0x000008, "Wrong alignment on AthenaInventoryPanelBase_FocusTileView");
static_assert(sizeof(AthenaInventoryPanelBase_FocusTileView) == 0x000008, "Wrong size on AthenaInventoryPanelBase_FocusTileView");
static_assert(offsetof(AthenaInventoryPanelBase_FocusTileView, TileView) == 0x000000, "Member 'AthenaInventoryPanelBase_FocusTileView::TileView' has a wrong offset!");

// Function FortniteUI.AthenaInventoryPanelBase.GetTileViewForItem
// 0x0010 (0x0010 - 0x0000)
struct AthenaInventoryPanelBase_GetTileViewForItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemTileView*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryPanelBase_GetTileViewForItem) == 0x000008, "Wrong alignment on AthenaInventoryPanelBase_GetTileViewForItem");
static_assert(sizeof(AthenaInventoryPanelBase_GetTileViewForItem) == 0x000010, "Wrong size on AthenaInventoryPanelBase_GetTileViewForItem");
static_assert(offsetof(AthenaInventoryPanelBase_GetTileViewForItem, Item) == 0x000000, "Member 'AthenaInventoryPanelBase_GetTileViewForItem::Item' has a wrong offset!");
static_assert(offsetof(AthenaInventoryPanelBase_GetTileViewForItem, ReturnValue) == 0x000008, "Member 'AthenaInventoryPanelBase_GetTileViewForItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaInventoryPanelBase.HandleInventoryItemSelected
// 0x0008 (0x0008 - 0x0000)
struct AthenaInventoryPanelBase_HandleInventoryItemSelected final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryPanelBase_HandleInventoryItemSelected) == 0x000008, "Wrong alignment on AthenaInventoryPanelBase_HandleInventoryItemSelected");
static_assert(sizeof(AthenaInventoryPanelBase_HandleInventoryItemSelected) == 0x000008, "Wrong size on AthenaInventoryPanelBase_HandleInventoryItemSelected");
static_assert(offsetof(AthenaInventoryPanelBase_HandleInventoryItemSelected, Item) == 0x000000, "Member 'AthenaInventoryPanelBase_HandleInventoryItemSelected::Item' has a wrong offset!");

// Function FortniteUI.AthenaInventoryPanelBase.HandleQuickBarChangedBP
// 0x0001 (0x0001 - 0x0000)
struct AthenaInventoryPanelBase_HandleQuickBarChangedBP final
{
public:
	EFortQuickBars                                QuickBarType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryPanelBase_HandleQuickBarChangedBP) == 0x000001, "Wrong alignment on AthenaInventoryPanelBase_HandleQuickBarChangedBP");
static_assert(sizeof(AthenaInventoryPanelBase_HandleQuickBarChangedBP) == 0x000001, "Wrong size on AthenaInventoryPanelBase_HandleQuickBarChangedBP");
static_assert(offsetof(AthenaInventoryPanelBase_HandleQuickBarChangedBP, QuickBarType) == 0x000000, "Member 'AthenaInventoryPanelBase_HandleQuickBarChangedBP::QuickBarType' has a wrong offset!");

// Function FortniteUI.AthenaInventoryPanelBase.RequestEquip
// 0x0008 (0x0008 - 0x0000)
struct AthenaInventoryPanelBase_RequestEquip final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryPanelBase_RequestEquip) == 0x000008, "Wrong alignment on AthenaInventoryPanelBase_RequestEquip");
static_assert(sizeof(AthenaInventoryPanelBase_RequestEquip) == 0x000008, "Wrong size on AthenaInventoryPanelBase_RequestEquip");
static_assert(offsetof(AthenaInventoryPanelBase_RequestEquip, Item) == 0x000000, "Member 'AthenaInventoryPanelBase_RequestEquip::Item' has a wrong offset!");

// Function FortniteUI.AthenaInventoryPanelBase.SetBypassNotifications
// 0x0001 (0x0001 - 0x0000)
struct AthenaInventoryPanelBase_SetBypassNotifications final
{
public:
	bool                                          bBypass;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaInventoryPanelBase_SetBypassNotifications) == 0x000001, "Wrong alignment on AthenaInventoryPanelBase_SetBypassNotifications");
static_assert(sizeof(AthenaInventoryPanelBase_SetBypassNotifications) == 0x000001, "Wrong size on AthenaInventoryPanelBase_SetBypassNotifications");
static_assert(offsetof(AthenaInventoryPanelBase_SetBypassNotifications, bBypass) == 0x000000, "Member 'AthenaInventoryPanelBase_SetBypassNotifications::bBypass' has a wrong offset!");

// Function FortniteUI.AthenaItemSelectorScreenBase.HandleSelectedTabChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaItemSelectorScreenBase_HandleSelectedTabChanged final
{
public:
	class FName                                   SelectedTabID;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaItemSelectorScreenBase_HandleSelectedTabChanged) == 0x000004, "Wrong alignment on AthenaItemSelectorScreenBase_HandleSelectedTabChanged");
static_assert(sizeof(AthenaItemSelectorScreenBase_HandleSelectedTabChanged) == 0x000008, "Wrong size on AthenaItemSelectorScreenBase_HandleSelectedTabChanged");
static_assert(offsetof(AthenaItemSelectorScreenBase_HandleSelectedTabChanged, SelectedTabID) == 0x000000, "Member 'AthenaItemSelectorScreenBase_HandleSelectedTabChanged::SelectedTabID' has a wrong offset!");

// Function FortniteUI.AthenaItemSelectorScreenBase.OnCurrentItemChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaItemSelectorScreenBase_OnCurrentItemChanged final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaItemSelectorScreenBase_OnCurrentItemChanged) == 0x000008, "Wrong alignment on AthenaItemSelectorScreenBase_OnCurrentItemChanged");
static_assert(sizeof(AthenaItemSelectorScreenBase_OnCurrentItemChanged) == 0x000008, "Wrong size on AthenaItemSelectorScreenBase_OnCurrentItemChanged");
static_assert(offsetof(AthenaItemSelectorScreenBase_OnCurrentItemChanged, SelectedItem) == 0x000000, "Member 'AthenaItemSelectorScreenBase_OnCurrentItemChanged::SelectedItem' has a wrong offset!");

// Function FortniteUI.AthenaItemSelectorScreenBase.OnFinsihedItemSetup
// 0x0038 (0x0038 - 0x0000)
struct AthenaItemSelectorScreenBase_OnFinsihedItemSetup final
{
public:
	class FText                                   CategoryDisplayName;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ItemDisplayTypeName;                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAthenaCustomizationCategory                  SelectedCategory;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaItemSelectorScreenBase_OnFinsihedItemSetup) == 0x000008, "Wrong alignment on AthenaItemSelectorScreenBase_OnFinsihedItemSetup");
static_assert(sizeof(AthenaItemSelectorScreenBase_OnFinsihedItemSetup) == 0x000038, "Wrong size on AthenaItemSelectorScreenBase_OnFinsihedItemSetup");
static_assert(offsetof(AthenaItemSelectorScreenBase_OnFinsihedItemSetup, CategoryDisplayName) == 0x000000, "Member 'AthenaItemSelectorScreenBase_OnFinsihedItemSetup::CategoryDisplayName' has a wrong offset!");
static_assert(offsetof(AthenaItemSelectorScreenBase_OnFinsihedItemSetup, ItemDisplayTypeName) == 0x000018, "Member 'AthenaItemSelectorScreenBase_OnFinsihedItemSetup::ItemDisplayTypeName' has a wrong offset!");
static_assert(offsetof(AthenaItemSelectorScreenBase_OnFinsihedItemSetup, SelectedCategory) == 0x000030, "Member 'AthenaItemSelectorScreenBase_OnFinsihedItemSetup::SelectedCategory' has a wrong offset!");

// Function FortniteUI.AthenaItemSelectorScreenBase.OnItemSelectedChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaItemSelectorScreenBase_OnItemSelectedChanged final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaItemSelectorScreenBase_OnItemSelectedChanged) == 0x000008, "Wrong alignment on AthenaItemSelectorScreenBase_OnItemSelectedChanged");
static_assert(sizeof(AthenaItemSelectorScreenBase_OnItemSelectedChanged) == 0x000008, "Wrong size on AthenaItemSelectorScreenBase_OnItemSelectedChanged");
static_assert(offsetof(AthenaItemSelectorScreenBase_OnItemSelectedChanged, SelectedItem) == 0x000000, "Member 'AthenaItemSelectorScreenBase_OnItemSelectedChanged::SelectedItem' has a wrong offset!");

// Function FortniteUI.AthenaItemSelectorScreenBase.OnItemSelectionCommited
// 0x0008 (0x0008 - 0x0000)
struct AthenaItemSelectorScreenBase_OnItemSelectionCommited final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaItemSelectorScreenBase_OnItemSelectionCommited) == 0x000008, "Wrong alignment on AthenaItemSelectorScreenBase_OnItemSelectionCommited");
static_assert(sizeof(AthenaItemSelectorScreenBase_OnItemSelectionCommited) == 0x000008, "Wrong size on AthenaItemSelectorScreenBase_OnItemSelectionCommited");
static_assert(offsetof(AthenaItemSelectorScreenBase_OnItemSelectionCommited, SelectedItem) == 0x000000, "Member 'AthenaItemSelectorScreenBase_OnItemSelectionCommited::SelectedItem' has a wrong offset!");

// Function FortniteUI.AthenaItemSelectorScreenBase.OnTabSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaItemSelectorScreenBase_OnTabSelectionChanged final
{
public:
	bool                                          bShowingVariants;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaItemSelectorScreenBase_OnTabSelectionChanged) == 0x000001, "Wrong alignment on AthenaItemSelectorScreenBase_OnTabSelectionChanged");
static_assert(sizeof(AthenaItemSelectorScreenBase_OnTabSelectionChanged) == 0x000001, "Wrong size on AthenaItemSelectorScreenBase_OnTabSelectionChanged");
static_assert(offsetof(AthenaItemSelectorScreenBase_OnTabSelectionChanged, bShowingVariants) == 0x000000, "Member 'AthenaItemSelectorScreenBase_OnTabSelectionChanged::bShowingVariants' has a wrong offset!");

// Function FortniteUI.AthenaItemSelectorScreenBase.OnVariantSelectionChanged
// 0x0038 (0x0038 - 0x0000)
struct AthenaItemSelectorScreenBase_OnVariantSelectionChanged final
{
public:
	struct FMcpVariantChannelInfo                 InVariant;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaItemSelectorScreenBase_OnVariantSelectionChanged) == 0x000008, "Wrong alignment on AthenaItemSelectorScreenBase_OnVariantSelectionChanged");
static_assert(sizeof(AthenaItemSelectorScreenBase_OnVariantSelectionChanged) == 0x000038, "Wrong size on AthenaItemSelectorScreenBase_OnVariantSelectionChanged");
static_assert(offsetof(AthenaItemSelectorScreenBase_OnVariantSelectionChanged, InVariant) == 0x000000, "Member 'AthenaItemSelectorScreenBase_OnVariantSelectionChanged::InVariant' has a wrong offset!");

// Function FortniteUI.AthenaItemSelectorScreenBase.SaveAndExit
// 0x0001 (0x0001 - 0x0000)
struct AthenaItemSelectorScreenBase_SaveAndExit final
{
public:
	bool                                          bApplyToAllSlots;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaItemSelectorScreenBase_SaveAndExit) == 0x000001, "Wrong alignment on AthenaItemSelectorScreenBase_SaveAndExit");
static_assert(sizeof(AthenaItemSelectorScreenBase_SaveAndExit) == 0x000001, "Wrong size on AthenaItemSelectorScreenBase_SaveAndExit");
static_assert(offsetof(AthenaItemSelectorScreenBase_SaveAndExit, bApplyToAllSlots) == 0x000000, "Member 'AthenaItemSelectorScreenBase_SaveAndExit::bApplyToAllSlots' has a wrong offset!");

// Function FortniteUI.AthenaItemSelectorScreenBase.StartItemCustomization
// 0x0038 (0x0038 - 0x0000)
struct AthenaItemSelectorScreenBase_StartItemCustomization final
{
public:
	EAthenaCustomizationCategory                  InCategory;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSubslotIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CategoryDisplayName;                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ItemDisplayTypeName;                               // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaItemSelectorScreenBase_StartItemCustomization) == 0x000008, "Wrong alignment on AthenaItemSelectorScreenBase_StartItemCustomization");
static_assert(sizeof(AthenaItemSelectorScreenBase_StartItemCustomization) == 0x000038, "Wrong size on AthenaItemSelectorScreenBase_StartItemCustomization");
static_assert(offsetof(AthenaItemSelectorScreenBase_StartItemCustomization, InCategory) == 0x000000, "Member 'AthenaItemSelectorScreenBase_StartItemCustomization::InCategory' has a wrong offset!");
static_assert(offsetof(AthenaItemSelectorScreenBase_StartItemCustomization, InSubslotIndex) == 0x000004, "Member 'AthenaItemSelectorScreenBase_StartItemCustomization::InSubslotIndex' has a wrong offset!");
static_assert(offsetof(AthenaItemSelectorScreenBase_StartItemCustomization, CategoryDisplayName) == 0x000008, "Member 'AthenaItemSelectorScreenBase_StartItemCustomization::CategoryDisplayName' has a wrong offset!");
static_assert(offsetof(AthenaItemSelectorScreenBase_StartItemCustomization, ItemDisplayTypeName) == 0x000020, "Member 'AthenaItemSelectorScreenBase_StartItemCustomization::ItemDisplayTypeName' has a wrong offset!");

// Function FortniteUI.AthenaItemSelectorScreenBase.GetCurrentItem
// 0x0008 (0x0008 - 0x0000)
struct AthenaItemSelectorScreenBase_GetCurrentItem final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaItemSelectorScreenBase_GetCurrentItem) == 0x000008, "Wrong alignment on AthenaItemSelectorScreenBase_GetCurrentItem");
static_assert(sizeof(AthenaItemSelectorScreenBase_GetCurrentItem) == 0x000008, "Wrong size on AthenaItemSelectorScreenBase_GetCurrentItem");
static_assert(offsetof(AthenaItemSelectorScreenBase_GetCurrentItem, ReturnValue) == 0x000000, "Member 'AthenaItemSelectorScreenBase_GetCurrentItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemInspectionScreen.GetCycleWidget
// 0x0008 (0x0008 - 0x0000)
struct FortItemInspectionScreen_GetCycleWidget final
{
public:
	class UFortItemInspectCycleWidget*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_GetCycleWidget) == 0x000008, "Wrong alignment on FortItemInspectionScreen_GetCycleWidget");
static_assert(sizeof(FortItemInspectionScreen_GetCycleWidget) == 0x000008, "Wrong size on FortItemInspectionScreen_GetCycleWidget");
static_assert(offsetof(FortItemInspectionScreen_GetCycleWidget, ReturnValue) == 0x000000, "Member 'FortItemInspectionScreen_GetCycleWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemInspectionScreen.HandleItemToInspectChanged
// 0x0003 (0x0003 - 0x0000)
struct FortItemInspectionScreen_HandleItemToInspectChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_HandleItemToInspectChanged) == 0x000001, "Wrong alignment on FortItemInspectionScreen_HandleItemToInspectChanged");
static_assert(sizeof(FortItemInspectionScreen_HandleItemToInspectChanged) == 0x000003, "Wrong size on FortItemInspectionScreen_HandleItemToInspectChanged");
static_assert(offsetof(FortItemInspectionScreen_HandleItemToInspectChanged, bItemChanged) == 0x000000, "Member 'FortItemInspectionScreen_HandleItemToInspectChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_HandleItemToInspectChanged, bAmmoChanged) == 0x000001, "Member 'FortItemInspectionScreen_HandleItemToInspectChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_HandleItemToInspectChanged, bIngredientsChanged) == 0x000002, "Member 'FortItemInspectionScreen_HandleItemToInspectChanged::bIngredientsChanged' has a wrong offset!");

// Function FortniteUI.FortItemInspectionScreen.OpenItemInspect
// 0x0018 (0x0018 - 0x0000)
struct FortItemInspectionScreen_OpenItemInspect final
{
public:
	class UFortItem*                              ItemToInspect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemInspectionMode                       Mode;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAllowUpgrading;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAllowEvolution;                              // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAllowFavorite;                               // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTemporaryItem;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRarityUpgrading;                             // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuantityOverride;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemInspectionScreen_OpenItemInspect) == 0x000008, "Wrong alignment on FortItemInspectionScreen_OpenItemInspect");
static_assert(sizeof(FortItemInspectionScreen_OpenItemInspect) == 0x000018, "Wrong size on FortItemInspectionScreen_OpenItemInspect");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, ItemToInspect) == 0x000000, "Member 'FortItemInspectionScreen_OpenItemInspect::ItemToInspect' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, Mode) == 0x000008, "Member 'FortItemInspectionScreen_OpenItemInspect::Mode' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, ShouldAllowUpgrading) == 0x000009, "Member 'FortItemInspectionScreen_OpenItemInspect::ShouldAllowUpgrading' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, ShouldAllowEvolution) == 0x00000A, "Member 'FortItemInspectionScreen_OpenItemInspect::ShouldAllowEvolution' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, ShouldAllowFavorite) == 0x00000B, "Member 'FortItemInspectionScreen_OpenItemInspect::ShouldAllowFavorite' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, IsTemporaryItem) == 0x00000C, "Member 'FortItemInspectionScreen_OpenItemInspect::IsTemporaryItem' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, bAllowRarityUpgrading) == 0x00000D, "Member 'FortItemInspectionScreen_OpenItemInspect::bAllowRarityUpgrading' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_OpenItemInspect, QuantityOverride) == 0x000010, "Member 'FortItemInspectionScreen_OpenItemInspect::QuantityOverride' has a wrong offset!");

// Function FortniteUI.FortItemInspectionScreen.SetAttemptingConversion
// 0x0001 (0x0001 - 0x0000)
struct FortItemInspectionScreen_SetAttemptingConversion final
{
public:
	bool                                          bIsAttemptingConversion;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_SetAttemptingConversion) == 0x000001, "Wrong alignment on FortItemInspectionScreen_SetAttemptingConversion");
static_assert(sizeof(FortItemInspectionScreen_SetAttemptingConversion) == 0x000001, "Wrong size on FortItemInspectionScreen_SetAttemptingConversion");
static_assert(offsetof(FortItemInspectionScreen_SetAttemptingConversion, bIsAttemptingConversion) == 0x000000, "Member 'FortItemInspectionScreen_SetAttemptingConversion::bIsAttemptingConversion' has a wrong offset!");

// Function FortniteUI.FortItemInspectionScreen.SetInspectionMode
// 0x0001 (0x0001 - 0x0000)
struct FortItemInspectionScreen_SetInspectionMode final
{
public:
	EFortItemInspectionMode                       NewInspectMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_SetInspectionMode) == 0x000001, "Wrong alignment on FortItemInspectionScreen_SetInspectionMode");
static_assert(sizeof(FortItemInspectionScreen_SetInspectionMode) == 0x000001, "Wrong size on FortItemInspectionScreen_SetInspectionMode");
static_assert(offsetof(FortItemInspectionScreen_SetInspectionMode, NewInspectMode) == 0x000000, "Member 'FortItemInspectionScreen_SetInspectionMode::NewInspectMode' has a wrong offset!");

// Function FortniteUI.FortItemInspectionScreen.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortItemInspectionScreen_SetItemToRepresent final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_SetItemToRepresent) == 0x000008, "Wrong alignment on FortItemInspectionScreen_SetItemToRepresent");
static_assert(sizeof(FortItemInspectionScreen_SetItemToRepresent) == 0x000008, "Wrong size on FortItemInspectionScreen_SetItemToRepresent");
static_assert(offsetof(FortItemInspectionScreen_SetItemToRepresent, Item) == 0x000000, "Member 'FortItemInspectionScreen_SetItemToRepresent::Item' has a wrong offset!");

// Function FortniteUI.FortItemInspectionScreen.DoesItemHaveLegacyAlterations
// 0x0001 (0x0001 - 0x0000)
struct FortItemInspectionScreen_DoesItemHaveLegacyAlterations final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_DoesItemHaveLegacyAlterations) == 0x000001, "Wrong alignment on FortItemInspectionScreen_DoesItemHaveLegacyAlterations");
static_assert(sizeof(FortItemInspectionScreen_DoesItemHaveLegacyAlterations) == 0x000001, "Wrong size on FortItemInspectionScreen_DoesItemHaveLegacyAlterations");
static_assert(offsetof(FortItemInspectionScreen_DoesItemHaveLegacyAlterations, ReturnValue) == 0x000000, "Member 'FortItemInspectionScreen_DoesItemHaveLegacyAlterations::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemInspectionScreen.GetItemQuantityOverride
// 0x0004 (0x0004 - 0x0000)
struct FortItemInspectionScreen_GetItemQuantityOverride final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_GetItemQuantityOverride) == 0x000004, "Wrong alignment on FortItemInspectionScreen_GetItemQuantityOverride");
static_assert(sizeof(FortItemInspectionScreen_GetItemQuantityOverride) == 0x000004, "Wrong size on FortItemInspectionScreen_GetItemQuantityOverride");
static_assert(offsetof(FortItemInspectionScreen_GetItemQuantityOverride, ReturnValue) == 0x000000, "Member 'FortItemInspectionScreen_GetItemQuantityOverride::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemInspectionScreen.GetRefundDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct FortItemInspectionScreen_GetRefundDescriptionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_GetRefundDescriptionText) == 0x000008, "Wrong alignment on FortItemInspectionScreen_GetRefundDescriptionText");
static_assert(sizeof(FortItemInspectionScreen_GetRefundDescriptionText) == 0x000018, "Wrong size on FortItemInspectionScreen_GetRefundDescriptionText");
static_assert(offsetof(FortItemInspectionScreen_GetRefundDescriptionText, ReturnValue) == 0x000000, "Member 'FortItemInspectionScreen_GetRefundDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemInspectionScreen.GetRefundResultItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemInspectionScreen_GetRefundResultItem final
{
public:
	class UFortAccountItem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectionScreen_GetRefundResultItem) == 0x000008, "Wrong alignment on FortItemInspectionScreen_GetRefundResultItem");
static_assert(sizeof(FortItemInspectionScreen_GetRefundResultItem) == 0x000008, "Wrong size on FortItemInspectionScreen_GetRefundResultItem");
static_assert(offsetof(FortItemInspectionScreen_GetRefundResultItem, ReturnValue) == 0x000000, "Member 'FortItemInspectionScreen_GetRefundResultItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemInspectionScreen.IsItemSlottedInCollectionBook
// 0x0010 (0x0010 - 0x0000)
struct FortItemInspectionScreen_IsItemSlottedInCollectionBook final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemInspectionScreen_IsItemSlottedInCollectionBook) == 0x000008, "Wrong alignment on FortItemInspectionScreen_IsItemSlottedInCollectionBook");
static_assert(sizeof(FortItemInspectionScreen_IsItemSlottedInCollectionBook) == 0x000010, "Wrong size on FortItemInspectionScreen_IsItemSlottedInCollectionBook");
static_assert(offsetof(FortItemInspectionScreen_IsItemSlottedInCollectionBook, Item) == 0x000000, "Member 'FortItemInspectionScreen_IsItemSlottedInCollectionBook::Item' has a wrong offset!");
static_assert(offsetof(FortItemInspectionScreen_IsItemSlottedInCollectionBook, ReturnValue) == 0x000008, "Member 'FortItemInspectionScreen_IsItemSlottedInCollectionBook::ReturnValue' has a wrong offset!");

// Function FortniteUI.WaxRespawnCounterWidget.SetCount
// 0x0004 (0x0004 - 0x0000)
struct WaxRespawnCounterWidget_SetCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxRespawnCounterWidget_SetCount) == 0x000004, "Wrong alignment on WaxRespawnCounterWidget_SetCount");
static_assert(sizeof(WaxRespawnCounterWidget_SetCount) == 0x000004, "Wrong size on WaxRespawnCounterWidget_SetCount");
static_assert(offsetof(WaxRespawnCounterWidget_SetCount, NewCount) == 0x000000, "Member 'WaxRespawnCounterWidget_SetCount::NewCount' has a wrong offset!");

// Function FortniteUI.AthenaLeaderboardScreenBase.OnActiveLeaderboardTabChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaLeaderboardScreenBase_OnActiveLeaderboardTabChanged final
{
public:
	int32                                         ActiveWidgetIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLeaderboardScreenBase_OnActiveLeaderboardTabChanged) == 0x000004, "Wrong alignment on AthenaLeaderboardScreenBase_OnActiveLeaderboardTabChanged");
static_assert(sizeof(AthenaLeaderboardScreenBase_OnActiveLeaderboardTabChanged) == 0x000004, "Wrong size on AthenaLeaderboardScreenBase_OnActiveLeaderboardTabChanged");
static_assert(offsetof(AthenaLeaderboardScreenBase_OnActiveLeaderboardTabChanged, ActiveWidgetIndex) == 0x000000, "Member 'AthenaLeaderboardScreenBase_OnActiveLeaderboardTabChanged::ActiveWidgetIndex' has a wrong offset!");

// Function FortniteUI.AthenaLeaderboardScreenBase.OnFriendsFilterChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaLeaderboardScreenBase_OnFriendsFilterChanged final
{
public:
	int32                                         FriendsFilterIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLeaderboardScreenBase_OnFriendsFilterChanged) == 0x000004, "Wrong alignment on AthenaLeaderboardScreenBase_OnFriendsFilterChanged");
static_assert(sizeof(AthenaLeaderboardScreenBase_OnFriendsFilterChanged) == 0x000004, "Wrong size on AthenaLeaderboardScreenBase_OnFriendsFilterChanged");
static_assert(offsetof(AthenaLeaderboardScreenBase_OnFriendsFilterChanged, FriendsFilterIndex) == 0x000000, "Member 'AthenaLeaderboardScreenBase_OnFriendsFilterChanged::FriendsFilterIndex' has a wrong offset!");

// Function FortniteUI.AthenaLeaderboardScreenBase.OnMatchTypeChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaLeaderboardScreenBase_OnMatchTypeChanged final
{
public:
	int32                                         MatchTypeIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLeaderboardScreenBase_OnMatchTypeChanged) == 0x000004, "Wrong alignment on AthenaLeaderboardScreenBase_OnMatchTypeChanged");
static_assert(sizeof(AthenaLeaderboardScreenBase_OnMatchTypeChanged) == 0x000004, "Wrong size on AthenaLeaderboardScreenBase_OnMatchTypeChanged");
static_assert(offsetof(AthenaLeaderboardScreenBase_OnMatchTypeChanged, MatchTypeIndex) == 0x000000, "Member 'AthenaLeaderboardScreenBase_OnMatchTypeChanged::MatchTypeIndex' has a wrong offset!");

// Function FortniteUI.AthenaLeaderboardScreenBase.OnPlaylistChanged
// 0x000C (0x000C - 0x0000)
struct AthenaLeaderboardScreenBase_OnPlaylistChanged final
{
public:
	class FName                                   NewPlaylistName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonInputType                              NewInputType;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaLeaderboardScreenBase_OnPlaylistChanged) == 0x000004, "Wrong alignment on AthenaLeaderboardScreenBase_OnPlaylistChanged");
static_assert(sizeof(AthenaLeaderboardScreenBase_OnPlaylistChanged) == 0x00000C, "Wrong size on AthenaLeaderboardScreenBase_OnPlaylistChanged");
static_assert(offsetof(AthenaLeaderboardScreenBase_OnPlaylistChanged, NewPlaylistName) == 0x000000, "Member 'AthenaLeaderboardScreenBase_OnPlaylistChanged::NewPlaylistName' has a wrong offset!");
static_assert(offsetof(AthenaLeaderboardScreenBase_OnPlaylistChanged, NewInputType) == 0x000008, "Member 'AthenaLeaderboardScreenBase_OnPlaylistChanged::NewInputType' has a wrong offset!");

// Function FortniteUI.AthenaLeaderboardScreenBase.OnUpdateLeaderboardListUI
// 0x0028 (0x0028 - 0x0000)
struct AthenaLeaderboardScreenBase_OnUpdateLeaderboardListUI final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortLeaderboardRowProxyInstance*       LocalUserRow;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   QueryErrorStr;                                     // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLeaderboardScreenBase_OnUpdateLeaderboardListUI) == 0x000008, "Wrong alignment on AthenaLeaderboardScreenBase_OnUpdateLeaderboardListUI");
static_assert(sizeof(AthenaLeaderboardScreenBase_OnUpdateLeaderboardListUI) == 0x000028, "Wrong size on AthenaLeaderboardScreenBase_OnUpdateLeaderboardListUI");
static_assert(offsetof(AthenaLeaderboardScreenBase_OnUpdateLeaderboardListUI, bWasSuccessful) == 0x000000, "Member 'AthenaLeaderboardScreenBase_OnUpdateLeaderboardListUI::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(AthenaLeaderboardScreenBase_OnUpdateLeaderboardListUI, LocalUserRow) == 0x000008, "Member 'AthenaLeaderboardScreenBase_OnUpdateLeaderboardListUI::LocalUserRow' has a wrong offset!");
static_assert(offsetof(AthenaLeaderboardScreenBase_OnUpdateLeaderboardListUI, QueryErrorStr) == 0x000010, "Member 'AthenaLeaderboardScreenBase_OnUpdateLeaderboardListUI::QueryErrorStr' has a wrong offset!");

// Function FortniteUI.AthenaLeaderboardScreenBase.OnUpdateListHeader
// 0x0050 (0x0050 - 0x0000)
struct AthenaLeaderboardScreenBase_OnUpdateListHeader final
{
public:
	struct FAthenaPlaylistLeaderboardData         PlaylistTabData;                                   // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLeaderboardScreenBase_OnUpdateListHeader) == 0x000008, "Wrong alignment on AthenaLeaderboardScreenBase_OnUpdateListHeader");
static_assert(sizeof(AthenaLeaderboardScreenBase_OnUpdateListHeader) == 0x000050, "Wrong size on AthenaLeaderboardScreenBase_OnUpdateListHeader");
static_assert(offsetof(AthenaLeaderboardScreenBase_OnUpdateListHeader, PlaylistTabData) == 0x000000, "Member 'AthenaLeaderboardScreenBase_OnUpdateListHeader::PlaylistTabData' has a wrong offset!");

// Function FortniteUI.AthenaLeaderboardScreenBase.OnUpdateTabButtonText
// 0x0058 (0x0058 - 0x0000)
struct AthenaLeaderboardScreenBase_OnUpdateTabButtonText final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAthenaPlaylistLeaderboardData         PlaylistTabData;                                   // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLeaderboardScreenBase_OnUpdateTabButtonText) == 0x000008, "Wrong alignment on AthenaLeaderboardScreenBase_OnUpdateTabButtonText");
static_assert(sizeof(AthenaLeaderboardScreenBase_OnUpdateTabButtonText) == 0x000058, "Wrong size on AthenaLeaderboardScreenBase_OnUpdateTabButtonText");
static_assert(offsetof(AthenaLeaderboardScreenBase_OnUpdateTabButtonText, Button) == 0x000000, "Member 'AthenaLeaderboardScreenBase_OnUpdateTabButtonText::Button' has a wrong offset!");
static_assert(offsetof(AthenaLeaderboardScreenBase_OnUpdateTabButtonText, PlaylistTabData) == 0x000008, "Member 'AthenaLeaderboardScreenBase_OnUpdateTabButtonText::PlaylistTabData' has a wrong offset!");

// Function FortniteUI.AthenaLeaderboardScreenBase.CanShowFriendsOnlyLeaderboard
// 0x0001 (0x0001 - 0x0000)
struct AthenaLeaderboardScreenBase_CanShowFriendsOnlyLeaderboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLeaderboardScreenBase_CanShowFriendsOnlyLeaderboard) == 0x000001, "Wrong alignment on AthenaLeaderboardScreenBase_CanShowFriendsOnlyLeaderboard");
static_assert(sizeof(AthenaLeaderboardScreenBase_CanShowFriendsOnlyLeaderboard) == 0x000001, "Wrong size on AthenaLeaderboardScreenBase_CanShowFriendsOnlyLeaderboard");
static_assert(offsetof(AthenaLeaderboardScreenBase_CanShowFriendsOnlyLeaderboard, ReturnValue) == 0x000000, "Member 'AthenaLeaderboardScreenBase_CanShowFriendsOnlyLeaderboard::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemPlacementActor.HandlePawnBeginCursorOver
// 0x0008 (0x0008 - 0x0000)
struct FortItemPlacementActor_HandlePawnBeginCursorOver final
{
public:
	class AActor*                                 TouchedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemPlacementActor_HandlePawnBeginCursorOver) == 0x000008, "Wrong alignment on FortItemPlacementActor_HandlePawnBeginCursorOver");
static_assert(sizeof(FortItemPlacementActor_HandlePawnBeginCursorOver) == 0x000008, "Wrong size on FortItemPlacementActor_HandlePawnBeginCursorOver");
static_assert(offsetof(FortItemPlacementActor_HandlePawnBeginCursorOver, TouchedActor) == 0x000000, "Member 'FortItemPlacementActor_HandlePawnBeginCursorOver::TouchedActor' has a wrong offset!");

// Function FortniteUI.FortItemPlacementActor.HandlePawnClicked
// 0x0020 (0x0020 - 0x0000)
struct FortItemPlacementActor_HandlePawnClicked final
{
public:
	class AActor*                                 TouchedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ButtonPressed;                                     // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemPlacementActor_HandlePawnClicked) == 0x000008, "Wrong alignment on FortItemPlacementActor_HandlePawnClicked");
static_assert(sizeof(FortItemPlacementActor_HandlePawnClicked) == 0x000020, "Wrong size on FortItemPlacementActor_HandlePawnClicked");
static_assert(offsetof(FortItemPlacementActor_HandlePawnClicked, TouchedActor) == 0x000000, "Member 'FortItemPlacementActor_HandlePawnClicked::TouchedActor' has a wrong offset!");
static_assert(offsetof(FortItemPlacementActor_HandlePawnClicked, ButtonPressed) == 0x000008, "Member 'FortItemPlacementActor_HandlePawnClicked::ButtonPressed' has a wrong offset!");

// Function FortniteUI.FortItemPlacementActor.HandlePawnEndCursorOver
// 0x0008 (0x0008 - 0x0000)
struct FortItemPlacementActor_HandlePawnEndCursorOver final
{
public:
	class AActor*                                 TouchedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemPlacementActor_HandlePawnEndCursorOver) == 0x000008, "Wrong alignment on FortItemPlacementActor_HandlePawnEndCursorOver");
static_assert(sizeof(FortItemPlacementActor_HandlePawnEndCursorOver) == 0x000008, "Wrong size on FortItemPlacementActor_HandlePawnEndCursorOver");
static_assert(offsetof(FortItemPlacementActor_HandlePawnEndCursorOver, TouchedActor) == 0x000000, "Member 'FortItemPlacementActor_HandlePawnEndCursorOver::TouchedActor' has a wrong offset!");

// Function FortniteUI.FortItemPlacementActor.HandlePawnFinishedApplyingCharacterParts
// 0x0008 (0x0008 - 0x0000)
struct FortItemPlacementActor_HandlePawnFinishedApplyingCharacterParts final
{
public:
	class AFortPlayerPawn*                        Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemPlacementActor_HandlePawnFinishedApplyingCharacterParts) == 0x000008, "Wrong alignment on FortItemPlacementActor_HandlePawnFinishedApplyingCharacterParts");
static_assert(sizeof(FortItemPlacementActor_HandlePawnFinishedApplyingCharacterParts) == 0x000008, "Wrong size on FortItemPlacementActor_HandlePawnFinishedApplyingCharacterParts");
static_assert(offsetof(FortItemPlacementActor_HandlePawnFinishedApplyingCharacterParts, Pawn) == 0x000000, "Member 'FortItemPlacementActor_HandlePawnFinishedApplyingCharacterParts::Pawn' has a wrong offset!");

// Function FortniteUI.FortItemPlacementActor.HandlePawnTouchReleased
// 0x0010 (0x0010 - 0x0000)
struct FortItemPlacementActor_HandlePawnTouchReleased final
{
public:
	ETouchIndex                                   FingerIndex;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TouchedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemPlacementActor_HandlePawnTouchReleased) == 0x000008, "Wrong alignment on FortItemPlacementActor_HandlePawnTouchReleased");
static_assert(sizeof(FortItemPlacementActor_HandlePawnTouchReleased) == 0x000010, "Wrong size on FortItemPlacementActor_HandlePawnTouchReleased");
static_assert(offsetof(FortItemPlacementActor_HandlePawnTouchReleased, FingerIndex) == 0x000000, "Member 'FortItemPlacementActor_HandlePawnTouchReleased::FingerIndex' has a wrong offset!");
static_assert(offsetof(FortItemPlacementActor_HandlePawnTouchReleased, TouchedActor) == 0x000008, "Member 'FortItemPlacementActor_HandlePawnTouchReleased::TouchedActor' has a wrong offset!");

// Function FortniteUI.FortItemPreviewPedestal.PreviewItemBP
// 0x0010 (0x0010 - 0x0000)
struct FortItemPreviewPedestal_PreviewItemBP final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeCurrentLoadout;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemPreviewPedestal_PreviewItemBP) == 0x000008, "Wrong alignment on FortItemPreviewPedestal_PreviewItemBP");
static_assert(sizeof(FortItemPreviewPedestal_PreviewItemBP) == 0x000010, "Wrong size on FortItemPreviewPedestal_PreviewItemBP");
static_assert(offsetof(FortItemPreviewPedestal_PreviewItemBP, Item) == 0x000000, "Member 'FortItemPreviewPedestal_PreviewItemBP::Item' has a wrong offset!");
static_assert(offsetof(FortItemPreviewPedestal_PreviewItemBP, bIncludeCurrentLoadout) == 0x000008, "Member 'FortItemPreviewPedestal_PreviewItemBP::bIncludeCurrentLoadout' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutPedestal.HandleDifferentHeroLoadoutSlotFocused
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutPedestal_HandleDifferentHeroLoadoutSlotFocused final
{
public:
	class FName                                   FocusedSlotName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutPedestal_HandleDifferentHeroLoadoutSlotFocused) == 0x000004, "Wrong alignment on FortHeroLoadoutPedestal_HandleDifferentHeroLoadoutSlotFocused");
static_assert(sizeof(FortHeroLoadoutPedestal_HandleDifferentHeroLoadoutSlotFocused) == 0x000008, "Wrong size on FortHeroLoadoutPedestal_HandleDifferentHeroLoadoutSlotFocused");
static_assert(offsetof(FortHeroLoadoutPedestal_HandleDifferentHeroLoadoutSlotFocused, FocusedSlotName) == 0x000000, "Member 'FortHeroLoadoutPedestal_HandleDifferentHeroLoadoutSlotFocused::FocusedSlotName' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutPedestal.HandleDifferentLoadoutViewed
// 0x0010 (0x0010 - 0x0000)
struct FortHeroLoadoutPedestal_HandleDifferentLoadoutViewed final
{
public:
	const class UFortCampaignHeroLoadoutItem*     PreviousLoadout;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortCampaignHeroLoadoutItem*     CurrentLoadout;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutPedestal_HandleDifferentLoadoutViewed) == 0x000008, "Wrong alignment on FortHeroLoadoutPedestal_HandleDifferentLoadoutViewed");
static_assert(sizeof(FortHeroLoadoutPedestal_HandleDifferentLoadoutViewed) == 0x000010, "Wrong size on FortHeroLoadoutPedestal_HandleDifferentLoadoutViewed");
static_assert(offsetof(FortHeroLoadoutPedestal_HandleDifferentLoadoutViewed, PreviousLoadout) == 0x000000, "Member 'FortHeroLoadoutPedestal_HandleDifferentLoadoutViewed::PreviousLoadout' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutPedestal_HandleDifferentLoadoutViewed, CurrentLoadout) == 0x000008, "Member 'FortHeroLoadoutPedestal_HandleDifferentLoadoutViewed::CurrentLoadout' has a wrong offset!");

// Function FortniteUI.FortCampaignMatchmakingBase.IsLocalPlayerParticipatingInParty
// 0x0001 (0x0001 - 0x0000)
struct FortCampaignMatchmakingBase_IsLocalPlayerParticipatingInParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignMatchmakingBase_IsLocalPlayerParticipatingInParty) == 0x000001, "Wrong alignment on FortCampaignMatchmakingBase_IsLocalPlayerParticipatingInParty");
static_assert(sizeof(FortCampaignMatchmakingBase_IsLocalPlayerParticipatingInParty) == 0x000001, "Wrong size on FortCampaignMatchmakingBase_IsLocalPlayerParticipatingInParty");
static_assert(offsetof(FortCampaignMatchmakingBase_IsLocalPlayerParticipatingInParty, ReturnValue) == 0x000000, "Member 'FortCampaignMatchmakingBase_IsLocalPlayerParticipatingInParty::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLobbyWidget.DynamicHandleLoadingScreenVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct FortLobbyWidget_DynamicHandleLoadingScreenVisibilityChanged final
{
public:
	bool                                          Param_IsVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyWidget_DynamicHandleLoadingScreenVisibilityChanged) == 0x000001, "Wrong alignment on FortLobbyWidget_DynamicHandleLoadingScreenVisibilityChanged");
static_assert(sizeof(FortLobbyWidget_DynamicHandleLoadingScreenVisibilityChanged) == 0x000001, "Wrong size on FortLobbyWidget_DynamicHandleLoadingScreenVisibilityChanged");
static_assert(offsetof(FortLobbyWidget_DynamicHandleLoadingScreenVisibilityChanged, Param_IsVisible) == 0x000000, "Member 'FortLobbyWidget_DynamicHandleLoadingScreenVisibilityChanged::Param_IsVisible' has a wrong offset!");

// Function FortniteUI.FortLobbyWidget.HandleEmoteClicked
// 0x0001 (0x0001 - 0x0000)
struct FortLobbyWidget_HandleEmoteClicked final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyWidget_HandleEmoteClicked) == 0x000001, "Wrong alignment on FortLobbyWidget_HandleEmoteClicked");
static_assert(sizeof(FortLobbyWidget_HandleEmoteClicked) == 0x000001, "Wrong size on FortLobbyWidget_HandleEmoteClicked");
static_assert(offsetof(FortLobbyWidget_HandleEmoteClicked, bPassThrough) == 0x000000, "Member 'FortLobbyWidget_HandleEmoteClicked::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaLobbyBase.DisplayGlyphQuestUpdated
// 0x0004 (0x0004 - 0x0000)
struct AthenaLobbyBase_DisplayGlyphQuestUpdated final
{
public:
	int32                                         NewGlyphs;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLobbyBase_DisplayGlyphQuestUpdated) == 0x000004, "Wrong alignment on AthenaLobbyBase_DisplayGlyphQuestUpdated");
static_assert(sizeof(AthenaLobbyBase_DisplayGlyphQuestUpdated) == 0x000004, "Wrong size on AthenaLobbyBase_DisplayGlyphQuestUpdated");
static_assert(offsetof(AthenaLobbyBase_DisplayGlyphQuestUpdated, NewGlyphs) == 0x000000, "Member 'AthenaLobbyBase_DisplayGlyphQuestUpdated::NewGlyphs' has a wrong offset!");

// Function FortniteUI.AthenaLobbyBase.DisplayStoreUpdated
// 0x0008 (0x0008 - 0x0000)
struct AthenaLobbyBase_DisplayStoreUpdated final
{
public:
	class UStoreToastRequest*                     StoreUpdatedRequest;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLobbyBase_DisplayStoreUpdated) == 0x000008, "Wrong alignment on AthenaLobbyBase_DisplayStoreUpdated");
static_assert(sizeof(AthenaLobbyBase_DisplayStoreUpdated) == 0x000008, "Wrong size on AthenaLobbyBase_DisplayStoreUpdated");
static_assert(offsetof(AthenaLobbyBase_DisplayStoreUpdated, StoreUpdatedRequest) == 0x000000, "Member 'AthenaLobbyBase_DisplayStoreUpdated::StoreUpdatedRequest' has a wrong offset!");

// Function FortniteUI.AthenaLobbyBase.HandleActiveWidgetChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaLobbyBase_HandleActiveWidgetChanged final
{
public:
	class UWidget*                                NewActiveWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WidgetIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaLobbyBase_HandleActiveWidgetChanged) == 0x000008, "Wrong alignment on AthenaLobbyBase_HandleActiveWidgetChanged");
static_assert(sizeof(AthenaLobbyBase_HandleActiveWidgetChanged) == 0x000010, "Wrong size on AthenaLobbyBase_HandleActiveWidgetChanged");
static_assert(offsetof(AthenaLobbyBase_HandleActiveWidgetChanged, NewActiveWidget) == 0x000000, "Member 'AthenaLobbyBase_HandleActiveWidgetChanged::NewActiveWidget' has a wrong offset!");
static_assert(offsetof(AthenaLobbyBase_HandleActiveWidgetChanged, WidgetIndex) == 0x000008, "Member 'AthenaLobbyBase_HandleActiveWidgetChanged::WidgetIndex' has a wrong offset!");

// Function FortniteUI.AthenaLobbyBase.HandlePlaylistDataChanged
// 0x0038 (0x0038 - 0x0000)
struct AthenaLobbyBase_HandlePlaylistDataChanged final
{
public:
	struct FPlaylistData                          NewPlaylistData;                                   // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLobbyBase_HandlePlaylistDataChanged) == 0x000008, "Wrong alignment on AthenaLobbyBase_HandlePlaylistDataChanged");
static_assert(sizeof(AthenaLobbyBase_HandlePlaylistDataChanged) == 0x000038, "Wrong size on AthenaLobbyBase_HandlePlaylistDataChanged");
static_assert(offsetof(AthenaLobbyBase_HandlePlaylistDataChanged, NewPlaylistData) == 0x000000, "Member 'AthenaLobbyBase_HandlePlaylistDataChanged::NewPlaylistData' has a wrong offset!");

// Function FortniteUI.AthenaLobbyBase.HandleSquadFormationClicked
// 0x0001 (0x0001 - 0x0000)
struct AthenaLobbyBase_HandleSquadFormationClicked final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLobbyBase_HandleSquadFormationClicked) == 0x000001, "Wrong alignment on AthenaLobbyBase_HandleSquadFormationClicked");
static_assert(sizeof(AthenaLobbyBase_HandleSquadFormationClicked) == 0x000001, "Wrong size on AthenaLobbyBase_HandleSquadFormationClicked");
static_assert(offsetof(AthenaLobbyBase_HandleSquadFormationClicked, bPassThrough) == 0x000000, "Member 'AthenaLobbyBase_HandleSquadFormationClicked::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaLobbyBase.HandleWatchLiveStreamClicked
// 0x0001 (0x0001 - 0x0000)
struct AthenaLobbyBase_HandleWatchLiveStreamClicked final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLobbyBase_HandleWatchLiveStreamClicked) == 0x000001, "Wrong alignment on AthenaLobbyBase_HandleWatchLiveStreamClicked");
static_assert(sizeof(AthenaLobbyBase_HandleWatchLiveStreamClicked) == 0x000001, "Wrong size on AthenaLobbyBase_HandleWatchLiveStreamClicked");
static_assert(offsetof(AthenaLobbyBase_HandleWatchLiveStreamClicked, bPassThrough) == 0x000000, "Member 'AthenaLobbyBase_HandleWatchLiveStreamClicked::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaLobbyBase.OnLobbyChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaLobbyBase_OnLobbyChanged final
{
public:
	EFortLobbyType                                LobbyType;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLobbyBase_OnLobbyChanged) == 0x000001, "Wrong alignment on AthenaLobbyBase_OnLobbyChanged");
static_assert(sizeof(AthenaLobbyBase_OnLobbyChanged) == 0x000001, "Wrong size on AthenaLobbyBase_OnLobbyChanged");
static_assert(offsetof(AthenaLobbyBase_OnLobbyChanged, LobbyType) == 0x000000, "Member 'AthenaLobbyBase_OnLobbyChanged::LobbyType' has a wrong offset!");

// Function FortniteUI.AthenaLobbyBase.OnPlaylistChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaLobbyBase_OnPlaylistChanged final
{
public:
	EFortLobbyType                                LobbyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortPlaylistAthena*              PlaylistData;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLobbyBase_OnPlaylistChanged) == 0x000008, "Wrong alignment on AthenaLobbyBase_OnPlaylistChanged");
static_assert(sizeof(AthenaLobbyBase_OnPlaylistChanged) == 0x000010, "Wrong size on AthenaLobbyBase_OnPlaylistChanged");
static_assert(offsetof(AthenaLobbyBase_OnPlaylistChanged, LobbyType) == 0x000000, "Member 'AthenaLobbyBase_OnPlaylistChanged::LobbyType' has a wrong offset!");
static_assert(offsetof(AthenaLobbyBase_OnPlaylistChanged, PlaylistData) == 0x000008, "Member 'AthenaLobbyBase_OnPlaylistChanged::PlaylistData' has a wrong offset!");

// Function FortniteUI.AthenaLobbyBase.OnUpdateSocialImportButtonText
// 0x0018 (0x0018 - 0x0000)
struct AthenaLobbyBase_OnUpdateSocialImportButtonText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLobbyBase_OnUpdateSocialImportButtonText) == 0x000008, "Wrong alignment on AthenaLobbyBase_OnUpdateSocialImportButtonText");
static_assert(sizeof(AthenaLobbyBase_OnUpdateSocialImportButtonText) == 0x000018, "Wrong size on AthenaLobbyBase_OnUpdateSocialImportButtonText");
static_assert(offsetof(AthenaLobbyBase_OnUpdateSocialImportButtonText, NewText) == 0x000000, "Member 'AthenaLobbyBase_OnUpdateSocialImportButtonText::NewText' has a wrong offset!");

// Function FortniteUI.AthenaLobbyBase.UpdateGenericLinkText
// 0x0018 (0x0018 - 0x0000)
struct AthenaLobbyBase_UpdateGenericLinkText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLobbyBase_UpdateGenericLinkText) == 0x000008, "Wrong alignment on AthenaLobbyBase_UpdateGenericLinkText");
static_assert(sizeof(AthenaLobbyBase_UpdateGenericLinkText) == 0x000018, "Wrong size on AthenaLobbyBase_UpdateGenericLinkText");
static_assert(offsetof(AthenaLobbyBase_UpdateGenericLinkText, NewText) == 0x000000, "Member 'AthenaLobbyBase_UpdateGenericLinkText::NewText' has a wrong offset!");

// Function FortniteUI.FortHUDContext.AddPointOfInterest
// 0x0028 (0x0028 - 0x0000)
struct FortHUDContext_AddPointOfInterest final
{
public:
	class AActor*                                 PointOfInterest;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UTexture2D*                             DisplayImage;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_AddPointOfInterest) == 0x000008, "Wrong alignment on FortHUDContext_AddPointOfInterest");
static_assert(sizeof(FortHUDContext_AddPointOfInterest) == 0x000028, "Wrong size on FortHUDContext_AddPointOfInterest");
static_assert(offsetof(FortHUDContext_AddPointOfInterest, PointOfInterest) == 0x000000, "Member 'FortHUDContext_AddPointOfInterest::PointOfInterest' has a wrong offset!");
static_assert(offsetof(FortHUDContext_AddPointOfInterest, DisplayText) == 0x000008, "Member 'FortHUDContext_AddPointOfInterest::DisplayText' has a wrong offset!");
static_assert(offsetof(FortHUDContext_AddPointOfInterest, DisplayImage) == 0x000020, "Member 'FortHUDContext_AddPointOfInterest::DisplayImage' has a wrong offset!");

// Function FortniteUI.FortHUDContext.EnterCursorMode
// 0x0010 (0x0010 - 0x0000)
struct FortHUDContext_EnterCursorMode final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            CursorModeWidget;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_EnterCursorMode) == 0x000008, "Wrong alignment on FortHUDContext_EnterCursorMode");
static_assert(sizeof(FortHUDContext_EnterCursorMode) == 0x000010, "Wrong size on FortHUDContext_EnterCursorMode");
static_assert(offsetof(FortHUDContext_EnterCursorMode, ActionName) == 0x000000, "Member 'FortHUDContext_EnterCursorMode::ActionName' has a wrong offset!");
static_assert(offsetof(FortHUDContext_EnterCursorMode, CursorModeWidget) == 0x000008, "Member 'FortHUDContext_EnterCursorMode::CursorModeWidget' has a wrong offset!");

// Function FortniteUI.FortHUDContext.ForwardOnNumSurvivorsRescuedChanged
// 0x0004 (0x0004 - 0x0000)
struct FortHUDContext_ForwardOnNumSurvivorsRescuedChanged final
{
public:
	int32                                         NumSurvivorsRescued;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_ForwardOnNumSurvivorsRescuedChanged) == 0x000004, "Wrong alignment on FortHUDContext_ForwardOnNumSurvivorsRescuedChanged");
static_assert(sizeof(FortHUDContext_ForwardOnNumSurvivorsRescuedChanged) == 0x000004, "Wrong size on FortHUDContext_ForwardOnNumSurvivorsRescuedChanged");
static_assert(offsetof(FortHUDContext_ForwardOnNumSurvivorsRescuedChanged, NumSurvivorsRescued) == 0x000000, "Member 'FortHUDContext_ForwardOnNumSurvivorsRescuedChanged::NumSurvivorsRescued' has a wrong offset!");

// Function FortniteUI.FortHUDContext.ForwardOnWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct FortHUDContext_ForwardOnWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_ForwardOnWeaponEquipped) == 0x000008, "Wrong alignment on FortHUDContext_ForwardOnWeaponEquipped");
static_assert(sizeof(FortHUDContext_ForwardOnWeaponEquipped) == 0x000010, "Wrong size on FortHUDContext_ForwardOnWeaponEquipped");
static_assert(offsetof(FortHUDContext_ForwardOnWeaponEquipped, NewWeapon) == 0x000000, "Member 'FortHUDContext_ForwardOnWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(FortHUDContext_ForwardOnWeaponEquipped, PrevWeapon) == 0x000008, "Member 'FortHUDContext_ForwardOnWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function FortniteUI.FortHUDContext.ForwardOnWeaponHudKeyActionUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortHUDContext_ForwardOnWeaponHudKeyActionUpdated final
{
public:
	class AFortWeapon*                            Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_ForwardOnWeaponHudKeyActionUpdated) == 0x000008, "Wrong alignment on FortHUDContext_ForwardOnWeaponHudKeyActionUpdated");
static_assert(sizeof(FortHUDContext_ForwardOnWeaponHudKeyActionUpdated) == 0x000008, "Wrong size on FortHUDContext_ForwardOnWeaponHudKeyActionUpdated");
static_assert(offsetof(FortHUDContext_ForwardOnWeaponHudKeyActionUpdated, Weapon) == 0x000000, "Member 'FortHUDContext_ForwardOnWeaponHudKeyActionUpdated::Weapon' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetKillerVisualInfoFromDeathReport
// 0x00F0 (0x00F0 - 0x0000)
struct FortHUDContext_GetKillerVisualInfoFromDeathReport final
{
public:
	struct FFortPlayerDeathReport                 DeathReport;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortKillerVisualInfo                  ReturnValue;                                       // 0x0050(0x00A0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetKillerVisualInfoFromDeathReport) == 0x000008, "Wrong alignment on FortHUDContext_GetKillerVisualInfoFromDeathReport");
static_assert(sizeof(FortHUDContext_GetKillerVisualInfoFromDeathReport) == 0x0000F0, "Wrong size on FortHUDContext_GetKillerVisualInfoFromDeathReport");
static_assert(offsetof(FortHUDContext_GetKillerVisualInfoFromDeathReport, DeathReport) == 0x000000, "Member 'FortHUDContext_GetKillerVisualInfoFromDeathReport::DeathReport' has a wrong offset!");
static_assert(offsetof(FortHUDContext_GetKillerVisualInfoFromDeathReport, ReturnValue) == 0x000050, "Member 'FortHUDContext_GetKillerVisualInfoFromDeathReport::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.HandleActorFocusedForCreative
// 0x0008 (0x0008 - 0x0000)
struct FortHUDContext_HandleActorFocusedForCreative final
{
public:
	class AActor*                                 NewActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_HandleActorFocusedForCreative) == 0x000008, "Wrong alignment on FortHUDContext_HandleActorFocusedForCreative");
static_assert(sizeof(FortHUDContext_HandleActorFocusedForCreative) == 0x000008, "Wrong size on FortHUDContext_HandleActorFocusedForCreative");
static_assert(offsetof(FortHUDContext_HandleActorFocusedForCreative, NewActor) == 0x000000, "Member 'FortHUDContext_HandleActorFocusedForCreative::NewActor' has a wrong offset!");

// Function FortniteUI.FortHUDContext.HandleBuildingModeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_HandleBuildingModeChanged final
{
public:
	bool                                          bEntering;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_HandleBuildingModeChanged) == 0x000001, "Wrong alignment on FortHUDContext_HandleBuildingModeChanged");
static_assert(sizeof(FortHUDContext_HandleBuildingModeChanged) == 0x000001, "Wrong size on FortHUDContext_HandleBuildingModeChanged");
static_assert(offsetof(FortHUDContext_HandleBuildingModeChanged, bEntering) == 0x000000, "Member 'FortHUDContext_HandleBuildingModeChanged::bEntering' has a wrong offset!");

// Function FortniteUI.FortHUDContext.HandleLocalPawnDied
// 0x0050 (0x0050 - 0x0000)
struct FortHUDContext_HandleLocalPawnDied final
{
public:
	struct FFortPlayerDeathReport                 DeathReport;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_HandleLocalPawnDied) == 0x000008, "Wrong alignment on FortHUDContext_HandleLocalPawnDied");
static_assert(sizeof(FortHUDContext_HandleLocalPawnDied) == 0x000050, "Wrong size on FortHUDContext_HandleLocalPawnDied");
static_assert(offsetof(FortHUDContext_HandleLocalPawnDied, DeathReport) == 0x000000, "Member 'FortHUDContext_HandleLocalPawnDied::DeathReport' has a wrong offset!");

// Function FortniteUI.FortHUDContext.HandlePersonalVehicleModeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_HandlePersonalVehicleModeChanged final
{
public:
	bool                                          bEnteredVehicle;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_HandlePersonalVehicleModeChanged) == 0x000001, "Wrong alignment on FortHUDContext_HandlePersonalVehicleModeChanged");
static_assert(sizeof(FortHUDContext_HandlePersonalVehicleModeChanged) == 0x000001, "Wrong size on FortHUDContext_HandlePersonalVehicleModeChanged");
static_assert(offsetof(FortHUDContext_HandlePersonalVehicleModeChanged, bEnteredVehicle) == 0x000000, "Member 'FortHUDContext_HandlePersonalVehicleModeChanged::bEnteredVehicle' has a wrong offset!");

// Function FortniteUI.FortHUDContext.HandleVehicleStateChanged
// 0x0018 (0x0018 - 0x0000)
struct FortHUDContext_HandleVehicleStateChanged final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewVehicle;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldVehicle;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_HandleVehicleStateChanged) == 0x000008, "Wrong alignment on FortHUDContext_HandleVehicleStateChanged");
static_assert(sizeof(FortHUDContext_HandleVehicleStateChanged) == 0x000018, "Wrong size on FortHUDContext_HandleVehicleStateChanged");
static_assert(offsetof(FortHUDContext_HandleVehicleStateChanged, PlayerPawn) == 0x000000, "Member 'FortHUDContext_HandleVehicleStateChanged::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortHUDContext_HandleVehicleStateChanged, NewVehicle) == 0x000008, "Member 'FortHUDContext_HandleVehicleStateChanged::NewVehicle' has a wrong offset!");
static_assert(offsetof(FortHUDContext_HandleVehicleStateChanged, OldVehicle) == 0x000010, "Member 'FortHUDContext_HandleVehicleStateChanged::OldVehicle' has a wrong offset!");

// Function FortniteUI.FortHUDContext.RemovePointOfInterest
// 0x0008 (0x0008 - 0x0000)
struct FortHUDContext_RemovePointOfInterest final
{
public:
	class AActor*                                 PointOfInterest;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_RemovePointOfInterest) == 0x000008, "Wrong alignment on FortHUDContext_RemovePointOfInterest");
static_assert(sizeof(FortHUDContext_RemovePointOfInterest) == 0x000008, "Wrong size on FortHUDContext_RemovePointOfInterest");
static_assert(offsetof(FortHUDContext_RemovePointOfInterest, PointOfInterest) == 0x000000, "Member 'FortHUDContext_RemovePointOfInterest::PointOfInterest' has a wrong offset!");

// Function FortniteUI.FortHUDContext.RequestMgmtMenuTab
// 0x0008 (0x0008 - 0x0000)
struct FortHUDContext_RequestMgmtMenuTab final
{
public:
	class FName                                   TabName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_RequestMgmtMenuTab) == 0x000004, "Wrong alignment on FortHUDContext_RequestMgmtMenuTab");
static_assert(sizeof(FortHUDContext_RequestMgmtMenuTab) == 0x000008, "Wrong size on FortHUDContext_RequestMgmtMenuTab");
static_assert(offsetof(FortHUDContext_RequestMgmtMenuTab, TabName) == 0x000000, "Member 'FortHUDContext_RequestMgmtMenuTab::TabName' has a wrong offset!");

// Function FortniteUI.FortHUDContext.SetCursorModeLocked
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_SetCursorModeLocked final
{
public:
	bool                                          bLocked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_SetCursorModeLocked) == 0x000001, "Wrong alignment on FortHUDContext_SetCursorModeLocked");
static_assert(sizeof(FortHUDContext_SetCursorModeLocked) == 0x000001, "Wrong size on FortHUDContext_SetCursorModeLocked");
static_assert(offsetof(FortHUDContext_SetCursorModeLocked, bLocked) == 0x000000, "Member 'FortHUDContext_SetCursorModeLocked::bLocked' has a wrong offset!");

// Function FortniteUI.FortHUDContext.SetHUDElementVisibility
// 0x0028 (0x0028 - 0x0000)
struct FortHUDContext_SetHUDElementVisibility final
{
public:
	struct FGameplayTagContainer                  HUDElementTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bHideElements;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHUDContext_SetHUDElementVisibility) == 0x000008, "Wrong alignment on FortHUDContext_SetHUDElementVisibility");
static_assert(sizeof(FortHUDContext_SetHUDElementVisibility) == 0x000028, "Wrong size on FortHUDContext_SetHUDElementVisibility");
static_assert(offsetof(FortHUDContext_SetHUDElementVisibility, HUDElementTags) == 0x000000, "Member 'FortHUDContext_SetHUDElementVisibility::HUDElementTags' has a wrong offset!");
static_assert(offsetof(FortHUDContext_SetHUDElementVisibility, bHideElements) == 0x000020, "Member 'FortHUDContext_SetHUDElementVisibility::bHideElements' has a wrong offset!");

// Function FortniteUI.FortHUDContext.SetIndicatorsAllowed
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_SetIndicatorsAllowed final
{
public:
	bool                                          bIndicatorsAllowed;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_SetIndicatorsAllowed) == 0x000001, "Wrong alignment on FortHUDContext_SetIndicatorsAllowed");
static_assert(sizeof(FortHUDContext_SetIndicatorsAllowed) == 0x000001, "Wrong size on FortHUDContext_SetIndicatorsAllowed");
static_assert(offsetof(FortHUDContext_SetIndicatorsAllowed, bIndicatorsAllowed) == 0x000000, "Member 'FortHUDContext_SetIndicatorsAllowed::bIndicatorsAllowed' has a wrong offset!");

// Function FortniteUI.FortHUDContext.SetIndicatorsState
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_SetIndicatorsState final
{
public:
	EFortIndicatorState                           NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_SetIndicatorsState) == 0x000001, "Wrong alignment on FortHUDContext_SetIndicatorsState");
static_assert(sizeof(FortHUDContext_SetIndicatorsState) == 0x000001, "Wrong size on FortHUDContext_SetIndicatorsState");
static_assert(offsetof(FortHUDContext_SetIndicatorsState, NewState) == 0x000000, "Member 'FortHUDContext_SetIndicatorsState::NewState' has a wrong offset!");

// Function FortniteUI.FortHUDContext.SetPreparingMgmtMenu
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_SetPreparingMgmtMenu final
{
public:
	bool                                          bPreparing;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_SetPreparingMgmtMenu) == 0x000001, "Wrong alignment on FortHUDContext_SetPreparingMgmtMenu");
static_assert(sizeof(FortHUDContext_SetPreparingMgmtMenu) == 0x000001, "Wrong size on FortHUDContext_SetPreparingMgmtMenu");
static_assert(offsetof(FortHUDContext_SetPreparingMgmtMenu, bPreparing) == 0x000000, "Member 'FortHUDContext_SetPreparingMgmtMenu::bPreparing' has a wrong offset!");

// Function FortniteUI.FortHUDContext.AreHUDElementsVisible
// 0x0028 (0x0028 - 0x0000)
struct FortHUDContext_AreHUDElementsVisible final
{
public:
	struct FGameplayTagContainer                  HUDElementTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHUDContext_AreHUDElementsVisible) == 0x000008, "Wrong alignment on FortHUDContext_AreHUDElementsVisible");
static_assert(sizeof(FortHUDContext_AreHUDElementsVisible) == 0x000028, "Wrong size on FortHUDContext_AreHUDElementsVisible");
static_assert(offsetof(FortHUDContext_AreHUDElementsVisible, HUDElementTags) == 0x000000, "Member 'FortHUDContext_AreHUDElementsVisible::HUDElementTags' has a wrong offset!");
static_assert(offsetof(FortHUDContext_AreHUDElementsVisible, ReturnValue) == 0x000020, "Member 'FortHUDContext_AreHUDElementsVisible::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.AreIndicatorsEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_AreIndicatorsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_AreIndicatorsEnabled) == 0x000001, "Wrong alignment on FortHUDContext_AreIndicatorsEnabled");
static_assert(sizeof(FortHUDContext_AreIndicatorsEnabled) == 0x000001, "Wrong size on FortHUDContext_AreIndicatorsEnabled");
static_assert(offsetof(FortHUDContext_AreIndicatorsEnabled, ReturnValue) == 0x000000, "Member 'FortHUDContext_AreIndicatorsEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetAccountLevelUpRewards
// 0x0018 (0x0018 - 0x0000)
struct FortHUDContext_GetAccountLevelUpRewards final
{
public:
	TArray<struct FFortItemQuantityPair>          Rewards;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         AccountLevel;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHUDContext_GetAccountLevelUpRewards) == 0x000008, "Wrong alignment on FortHUDContext_GetAccountLevelUpRewards");
static_assert(sizeof(FortHUDContext_GetAccountLevelUpRewards) == 0x000018, "Wrong size on FortHUDContext_GetAccountLevelUpRewards");
static_assert(offsetof(FortHUDContext_GetAccountLevelUpRewards, Rewards) == 0x000000, "Member 'FortHUDContext_GetAccountLevelUpRewards::Rewards' has a wrong offset!");
static_assert(offsetof(FortHUDContext_GetAccountLevelUpRewards, AccountLevel) == 0x000010, "Member 'FortHUDContext_GetAccountLevelUpRewards::AccountLevel' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetBluGloManager
// 0x0008 (0x0008 - 0x0000)
struct FortHUDContext_GetBluGloManager final
{
public:
	class AFortBluGloManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetBluGloManager) == 0x000008, "Wrong alignment on FortHUDContext_GetBluGloManager");
static_assert(sizeof(FortHUDContext_GetBluGloManager) == 0x000008, "Wrong size on FortHUDContext_GetBluGloManager");
static_assert(offsetof(FortHUDContext_GetBluGloManager, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetBluGloManager::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetCurrentBasicMissionInfo
// 0x0398 (0x0398 - 0x0000)
struct FortHUDContext_GetCurrentBasicMissionInfo final
{
public:
	struct FFortBasicMissionInfo                  BasicMissionInfo;                                  // 0x0000(0x0390)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0390(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHUDContext_GetCurrentBasicMissionInfo) == 0x000008, "Wrong alignment on FortHUDContext_GetCurrentBasicMissionInfo");
static_assert(sizeof(FortHUDContext_GetCurrentBasicMissionInfo) == 0x000398, "Wrong size on FortHUDContext_GetCurrentBasicMissionInfo");
static_assert(offsetof(FortHUDContext_GetCurrentBasicMissionInfo, BasicMissionInfo) == 0x000000, "Member 'FortHUDContext_GetCurrentBasicMissionInfo::BasicMissionInfo' has a wrong offset!");
static_assert(offsetof(FortHUDContext_GetCurrentBasicMissionInfo, ReturnValue) == 0x000390, "Member 'FortHUDContext_GetCurrentBasicMissionInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetCurrentFocusedBuilding
// 0x0008 (0x0008 - 0x0000)
struct FortHUDContext_GetCurrentFocusedBuilding final
{
public:
	class ABuildingActor*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetCurrentFocusedBuilding) == 0x000008, "Wrong alignment on FortHUDContext_GetCurrentFocusedBuilding");
static_assert(sizeof(FortHUDContext_GetCurrentFocusedBuilding) == 0x000008, "Wrong size on FortHUDContext_GetCurrentFocusedBuilding");
static_assert(offsetof(FortHUDContext_GetCurrentFocusedBuilding, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetCurrentFocusedBuilding::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetCurrentHero
// 0x0008 (0x0008 - 0x0000)
struct FortHUDContext_GetCurrentHero final
{
public:
	class UFortHero*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetCurrentHero) == 0x000008, "Wrong alignment on FortHUDContext_GetCurrentHero");
static_assert(sizeof(FortHUDContext_GetCurrentHero) == 0x000008, "Wrong size on FortHUDContext_GetCurrentHero");
static_assert(offsetof(FortHUDContext_GetCurrentHero, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetCurrentHero::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetCurrentHUDState
// 0x0014 (0x0014 - 0x0000)
struct FortHUDContext_GetCurrentHUDState final
{
public:
	struct FFortHUDState                          ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetCurrentHUDState) == 0x000001, "Wrong alignment on FortHUDContext_GetCurrentHUDState");
static_assert(sizeof(FortHUDContext_GetCurrentHUDState) == 0x000014, "Wrong size on FortHUDContext_GetCurrentHUDState");
static_assert(offsetof(FortHUDContext_GetCurrentHUDState, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetCurrentHUDState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetCurrentPrimaryMissionTags
// 0x0020 (0x0020 - 0x0000)
struct FortHUDContext_GetCurrentPrimaryMissionTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetCurrentPrimaryMissionTags) == 0x000008, "Wrong alignment on FortHUDContext_GetCurrentPrimaryMissionTags");
static_assert(sizeof(FortHUDContext_GetCurrentPrimaryMissionTags) == 0x000020, "Wrong size on FortHUDContext_GetCurrentPrimaryMissionTags");
static_assert(offsetof(FortHUDContext_GetCurrentPrimaryMissionTags, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetCurrentPrimaryMissionTags::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetDifficultyIncreaseRewards
// 0x0018 (0x0018 - 0x0000)
struct FortHUDContext_GetDifficultyIncreaseRewards final
{
public:
	int32                                         DifficultyIncreaseTier;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemDelta>                 DifficultyIncreaseRewards;                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetDifficultyIncreaseRewards) == 0x000008, "Wrong alignment on FortHUDContext_GetDifficultyIncreaseRewards");
static_assert(sizeof(FortHUDContext_GetDifficultyIncreaseRewards) == 0x000018, "Wrong size on FortHUDContext_GetDifficultyIncreaseRewards");
static_assert(offsetof(FortHUDContext_GetDifficultyIncreaseRewards, DifficultyIncreaseTier) == 0x000000, "Member 'FortHUDContext_GetDifficultyIncreaseRewards::DifficultyIncreaseTier' has a wrong offset!");
static_assert(offsetof(FortHUDContext_GetDifficultyIncreaseRewards, DifficultyIncreaseRewards) == 0x000008, "Member 'FortHUDContext_GetDifficultyIncreaseRewards::DifficultyIncreaseRewards' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetDifficultyIncreaseRewardsDifference
// 0x0018 (0x0018 - 0x0000)
struct FortHUDContext_GetDifficultyIncreaseRewardsDifference final
{
public:
	int32                                         BaseDifficultyIncreaseTier;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComparedDifficultyIncreaseTier;                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemDelta>                 RewardDeltaInfo;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetDifficultyIncreaseRewardsDifference) == 0x000008, "Wrong alignment on FortHUDContext_GetDifficultyIncreaseRewardsDifference");
static_assert(sizeof(FortHUDContext_GetDifficultyIncreaseRewardsDifference) == 0x000018, "Wrong size on FortHUDContext_GetDifficultyIncreaseRewardsDifference");
static_assert(offsetof(FortHUDContext_GetDifficultyIncreaseRewardsDifference, BaseDifficultyIncreaseTier) == 0x000000, "Member 'FortHUDContext_GetDifficultyIncreaseRewardsDifference::BaseDifficultyIncreaseTier' has a wrong offset!");
static_assert(offsetof(FortHUDContext_GetDifficultyIncreaseRewardsDifference, ComparedDifficultyIncreaseTier) == 0x000004, "Member 'FortHUDContext_GetDifficultyIncreaseRewardsDifference::ComparedDifficultyIncreaseTier' has a wrong offset!");
static_assert(offsetof(FortHUDContext_GetDifficultyIncreaseRewardsDifference, RewardDeltaInfo) == 0x000008, "Member 'FortHUDContext_GetDifficultyIncreaseRewardsDifference::RewardDeltaInfo' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetDifficultyIncreaseRewardsTier
// 0x0004 (0x0004 - 0x0000)
struct FortHUDContext_GetDifficultyIncreaseRewardsTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetDifficultyIncreaseRewardsTier) == 0x000004, "Wrong alignment on FortHUDContext_GetDifficultyIncreaseRewardsTier");
static_assert(sizeof(FortHUDContext_GetDifficultyIncreaseRewardsTier) == 0x000004, "Wrong size on FortHUDContext_GetDifficultyIncreaseRewardsTier");
static_assert(offsetof(FortHUDContext_GetDifficultyIncreaseRewardsTier, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetDifficultyIncreaseRewardsTier::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetEarnedBadges
// 0x0010 (0x0010 - 0x0000)
struct FortHUDContext_GetEarnedBadges final
{
public:
	TArray<struct FEarnedBadgeEntry>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetEarnedBadges) == 0x000008, "Wrong alignment on FortHUDContext_GetEarnedBadges");
static_assert(sizeof(FortHUDContext_GetEarnedBadges) == 0x000010, "Wrong size on FortHUDContext_GetEarnedBadges");
static_assert(offsetof(FortHUDContext_GetEarnedBadges, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetEarnedBadges::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetFocusedBuildingInfo
// 0x0058 (0x0058 - 0x0000)
struct FortHUDContext_GetFocusedBuildingInfo final
{
public:
	struct FFortFocusedBuildingInfo               OutBuildingInfo;                                   // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHUDContext_GetFocusedBuildingInfo) == 0x000008, "Wrong alignment on FortHUDContext_GetFocusedBuildingInfo");
static_assert(sizeof(FortHUDContext_GetFocusedBuildingInfo) == 0x000058, "Wrong size on FortHUDContext_GetFocusedBuildingInfo");
static_assert(offsetof(FortHUDContext_GetFocusedBuildingInfo, OutBuildingInfo) == 0x000000, "Member 'FortHUDContext_GetFocusedBuildingInfo::OutBuildingInfo' has a wrong offset!");
static_assert(offsetof(FortHUDContext_GetFocusedBuildingInfo, ReturnValue) == 0x000050, "Member 'FortHUDContext_GetFocusedBuildingInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetFocusedMission
// 0x0008 (0x0008 - 0x0000)
struct FortHUDContext_GetFocusedMission final
{
public:
	class AFortMission*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetFocusedMission) == 0x000008, "Wrong alignment on FortHUDContext_GetFocusedMission");
static_assert(sizeof(FortHUDContext_GetFocusedMission) == 0x000008, "Wrong size on FortHUDContext_GetFocusedMission");
static_assert(offsetof(FortHUDContext_GetFocusedMission, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetFocusedMission::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetGameStateZone
// 0x0008 (0x0008 - 0x0000)
struct FortHUDContext_GetGameStateZone final
{
public:
	class AFortGameStateZone*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetGameStateZone) == 0x000008, "Wrong alignment on FortHUDContext_GetGameStateZone");
static_assert(sizeof(FortHUDContext_GetGameStateZone) == 0x000008, "Wrong size on FortHUDContext_GetGameStateZone");
static_assert(offsetof(FortHUDContext_GetGameStateZone, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetGameStateZone::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetIndicatorsState
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_GetIndicatorsState final
{
public:
	EFortIndicatorState                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetIndicatorsState) == 0x000001, "Wrong alignment on FortHUDContext_GetIndicatorsState");
static_assert(sizeof(FortHUDContext_GetIndicatorsState) == 0x000001, "Wrong size on FortHUDContext_GetIndicatorsState");
static_assert(offsetof(FortHUDContext_GetIndicatorsState, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetIndicatorsState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetMissionManager
// 0x0008 (0x0008 - 0x0000)
struct FortHUDContext_GetMissionManager final
{
public:
	class AFortMissionManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetMissionManager) == 0x000008, "Wrong alignment on FortHUDContext_GetMissionManager");
static_assert(sizeof(FortHUDContext_GetMissionManager) == 0x000008, "Wrong size on FortHUDContext_GetMissionManager");
static_assert(offsetof(FortHUDContext_GetMissionManager, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetMissionManager::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetMissionOverviewObjectives
// 0x0010 (0x0010 - 0x0000)
struct FortHUDContext_GetMissionOverviewObjectives final
{
public:
	TArray<struct FZoneLoadingScreenHeadingConfig> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetMissionOverviewObjectives) == 0x000008, "Wrong alignment on FortHUDContext_GetMissionOverviewObjectives");
static_assert(sizeof(FortHUDContext_GetMissionOverviewObjectives) == 0x000010, "Wrong size on FortHUDContext_GetMissionOverviewObjectives");
static_assert(offsetof(FortHUDContext_GetMissionOverviewObjectives, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetMissionOverviewObjectives::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetMissionRewards
// 0x0020 (0x0020 - 0x0000)
struct FortHUDContext_GetMissionRewards final
{
public:
	TArray<class UFortItem*>                      MissionRewards;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      MissionAlertRewards;                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetMissionRewards) == 0x000008, "Wrong alignment on FortHUDContext_GetMissionRewards");
static_assert(sizeof(FortHUDContext_GetMissionRewards) == 0x000020, "Wrong size on FortHUDContext_GetMissionRewards");
static_assert(offsetof(FortHUDContext_GetMissionRewards, MissionRewards) == 0x000000, "Member 'FortHUDContext_GetMissionRewards::MissionRewards' has a wrong offset!");
static_assert(offsetof(FortHUDContext_GetMissionRewards, MissionAlertRewards) == 0x000010, "Member 'FortHUDContext_GetMissionRewards::MissionAlertRewards' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetNumAllowedDifficultyIncreases
// 0x0004 (0x0004 - 0x0000)
struct FortHUDContext_GetNumAllowedDifficultyIncreases final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetNumAllowedDifficultyIncreases) == 0x000004, "Wrong alignment on FortHUDContext_GetNumAllowedDifficultyIncreases");
static_assert(sizeof(FortHUDContext_GetNumAllowedDifficultyIncreases) == 0x000004, "Wrong size on FortHUDContext_GetNumAllowedDifficultyIncreases");
static_assert(offsetof(FortHUDContext_GetNumAllowedDifficultyIncreases, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetNumAllowedDifficultyIncreases::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetPlayerStateZone
// 0x0008 (0x0008 - 0x0000)
struct FortHUDContext_GetPlayerStateZone final
{
public:
	class AFortPlayerStateZone*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetPlayerStateZone) == 0x000008, "Wrong alignment on FortHUDContext_GetPlayerStateZone");
static_assert(sizeof(FortHUDContext_GetPlayerStateZone) == 0x000008, "Wrong size on FortHUDContext_GetPlayerStateZone");
static_assert(offsetof(FortHUDContext_GetPlayerStateZone, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetPlayerStateZone::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetPotentialBadges
// 0x0010 (0x0010 - 0x0000)
struct FortHUDContext_GetPotentialBadges final
{
public:
	TArray<struct FFortBadgeCount>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetPotentialBadges) == 0x000008, "Wrong alignment on FortHUDContext_GetPotentialBadges");
static_assert(sizeof(FortHUDContext_GetPotentialBadges) == 0x000010, "Wrong size on FortHUDContext_GetPotentialBadges");
static_assert(offsetof(FortHUDContext_GetPotentialBadges, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetPotentialBadges::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetScoreDisplayFactor
// 0x0004 (0x0004 - 0x0000)
struct FortHUDContext_GetScoreDisplayFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetScoreDisplayFactor) == 0x000004, "Wrong alignment on FortHUDContext_GetScoreDisplayFactor");
static_assert(sizeof(FortHUDContext_GetScoreDisplayFactor) == 0x000004, "Wrong size on FortHUDContext_GetScoreDisplayFactor");
static_assert(offsetof(FortHUDContext_GetScoreDisplayFactor, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetScoreDisplayFactor::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetTeamCornerstone
// 0x0010 (0x0010 - 0x0000)
struct FortHUDContext_GetTeamCornerstone final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPvPBaseCornerstone*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetTeamCornerstone) == 0x000008, "Wrong alignment on FortHUDContext_GetTeamCornerstone");
static_assert(sizeof(FortHUDContext_GetTeamCornerstone) == 0x000010, "Wrong size on FortHUDContext_GetTeamCornerstone");
static_assert(offsetof(FortHUDContext_GetTeamCornerstone, Team) == 0x000000, "Member 'FortHUDContext_GetTeamCornerstone::Team' has a wrong offset!");
static_assert(offsetof(FortHUDContext_GetTeamCornerstone, ReturnValue) == 0x000008, "Member 'FortHUDContext_GetTeamCornerstone::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.GetTimeToDelayEndOfDayZoneWidgetDisplay
// 0x0004 (0x0004 - 0x0000)
struct FortHUDContext_GetTimeToDelayEndOfDayZoneWidgetDisplay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_GetTimeToDelayEndOfDayZoneWidgetDisplay) == 0x000004, "Wrong alignment on FortHUDContext_GetTimeToDelayEndOfDayZoneWidgetDisplay");
static_assert(sizeof(FortHUDContext_GetTimeToDelayEndOfDayZoneWidgetDisplay) == 0x000004, "Wrong size on FortHUDContext_GetTimeToDelayEndOfDayZoneWidgetDisplay");
static_assert(offsetof(FortHUDContext_GetTimeToDelayEndOfDayZoneWidgetDisplay, ReturnValue) == 0x000000, "Member 'FortHUDContext_GetTimeToDelayEndOfDayZoneWidgetDisplay::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.IsInCursorMode
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_IsInCursorMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_IsInCursorMode) == 0x000001, "Wrong alignment on FortHUDContext_IsInCursorMode");
static_assert(sizeof(FortHUDContext_IsInCursorMode) == 0x000001, "Wrong size on FortHUDContext_IsInCursorMode");
static_assert(offsetof(FortHUDContext_IsInCursorMode, ReturnValue) == 0x000000, "Member 'FortHUDContext_IsInCursorMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.IsInEditMode
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_IsInEditMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_IsInEditMode) == 0x000001, "Wrong alignment on FortHUDContext_IsInEditMode");
static_assert(sizeof(FortHUDContext_IsInEditMode) == 0x000001, "Wrong size on FortHUDContext_IsInEditMode");
static_assert(offsetof(FortHUDContext_IsInEditMode, ReturnValue) == 0x000000, "Member 'FortHUDContext_IsInEditMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.IsPreparingMgmtMenu
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_IsPreparingMgmtMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_IsPreparingMgmtMenu) == 0x000001, "Wrong alignment on FortHUDContext_IsPreparingMgmtMenu");
static_assert(sizeof(FortHUDContext_IsPreparingMgmtMenu) == 0x000001, "Wrong size on FortHUDContext_IsPreparingMgmtMenu");
static_assert(offsetof(FortHUDContext_IsPreparingMgmtMenu, ReturnValue) == 0x000000, "Member 'FortHUDContext_IsPreparingMgmtMenu::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.IsShowViewerCountEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_IsShowViewerCountEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_IsShowViewerCountEnabled) == 0x000001, "Wrong alignment on FortHUDContext_IsShowViewerCountEnabled");
static_assert(sizeof(FortHUDContext_IsShowViewerCountEnabled) == 0x000001, "Wrong size on FortHUDContext_IsShowViewerCountEnabled");
static_assert(offsetof(FortHUDContext_IsShowViewerCountEnabled, ReturnValue) == 0x000000, "Member 'FortHUDContext_IsShowViewerCountEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDContext.ShouldOnlyShowNextPrevBuildingSlotKeybinds
// 0x0001 (0x0001 - 0x0000)
struct FortHUDContext_ShouldOnlyShowNextPrevBuildingSlotKeybinds final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDContext_ShouldOnlyShowNextPrevBuildingSlotKeybinds) == 0x000001, "Wrong alignment on FortHUDContext_ShouldOnlyShowNextPrevBuildingSlotKeybinds");
static_assert(sizeof(FortHUDContext_ShouldOnlyShowNextPrevBuildingSlotKeybinds) == 0x000001, "Wrong size on FortHUDContext_ShouldOnlyShowNextPrevBuildingSlotKeybinds");
static_assert(offsetof(FortHUDContext_ShouldOnlyShowNextPrevBuildingSlotKeybinds, ReturnValue) == 0x000000, "Member 'FortHUDContext_ShouldOnlyShowNextPrevBuildingSlotKeybinds::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLobbyPlayerPanel.OnFriendStatusUpdated
// 0x0001 (0x0001 - 0x0000)
struct FortLobbyPlayerPanel_OnFriendStatusUpdated final
{
public:
	EFortFriendRequestStatus                      FriendRequestStatus;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyPlayerPanel_OnFriendStatusUpdated) == 0x000001, "Wrong alignment on FortLobbyPlayerPanel_OnFriendStatusUpdated");
static_assert(sizeof(FortLobbyPlayerPanel_OnFriendStatusUpdated) == 0x000001, "Wrong size on FortLobbyPlayerPanel_OnFriendStatusUpdated");
static_assert(offsetof(FortLobbyPlayerPanel_OnFriendStatusUpdated, FriendRequestStatus) == 0x000000, "Member 'FortLobbyPlayerPanel_OnFriendStatusUpdated::FriendRequestStatus' has a wrong offset!");

// Function FortniteUI.FortCampaignTeamMemberEntry.OnTeamMemberConnectionStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCampaignTeamMemberEntry_OnTeamMemberConnectionStateChanged final
{
public:
	EFortMemberConnectionState                    NewConnectionState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTeamMemberEntry_OnTeamMemberConnectionStateChanged) == 0x000001, "Wrong alignment on FortCampaignTeamMemberEntry_OnTeamMemberConnectionStateChanged");
static_assert(sizeof(FortCampaignTeamMemberEntry_OnTeamMemberConnectionStateChanged) == 0x000001, "Wrong size on FortCampaignTeamMemberEntry_OnTeamMemberConnectionStateChanged");
static_assert(offsetof(FortCampaignTeamMemberEntry_OnTeamMemberConnectionStateChanged, NewConnectionState) == 0x000000, "Member 'FortCampaignTeamMemberEntry_OnTeamMemberConnectionStateChanged::NewConnectionState' has a wrong offset!");

// Function FortniteUI.FortCampaignTeamMemberEntry.HasTeamMembers
// 0x0001 (0x0001 - 0x0000)
struct FortCampaignTeamMemberEntry_HasTeamMembers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTeamMemberEntry_HasTeamMembers) == 0x000001, "Wrong alignment on FortCampaignTeamMemberEntry_HasTeamMembers");
static_assert(sizeof(FortCampaignTeamMemberEntry_HasTeamMembers) == 0x000001, "Wrong size on FortCampaignTeamMemberEntry_HasTeamMembers");
static_assert(offsetof(FortCampaignTeamMemberEntry_HasTeamMembers, ReturnValue) == 0x000000, "Member 'FortCampaignTeamMemberEntry_HasTeamMembers::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCampaignTeamMemberXpBoost.SetConsumeRequestInProgress
// 0x0001 (0x0001 - 0x0000)
struct FortCampaignTeamMemberXpBoost_SetConsumeRequestInProgress final
{
public:
	bool                                          bIsRequestInProgress;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTeamMemberXpBoost_SetConsumeRequestInProgress) == 0x000001, "Wrong alignment on FortCampaignTeamMemberXpBoost_SetConsumeRequestInProgress");
static_assert(sizeof(FortCampaignTeamMemberXpBoost_SetConsumeRequestInProgress) == 0x000001, "Wrong size on FortCampaignTeamMemberXpBoost_SetConsumeRequestInProgress");
static_assert(offsetof(FortCampaignTeamMemberXpBoost_SetConsumeRequestInProgress, bIsRequestInProgress) == 0x000000, "Member 'FortCampaignTeamMemberXpBoost_SetConsumeRequestInProgress::bIsRequestInProgress' has a wrong offset!");

// Function FortniteUI.FortCampaignTeamMemberXpBoost.GetBoostActivationButton
// 0x0008 (0x0008 - 0x0000)
struct FortCampaignTeamMemberXpBoost_GetBoostActivationButton final
{
public:
	class UCommonButton*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTeamMemberXpBoost_GetBoostActivationButton) == 0x000008, "Wrong alignment on FortCampaignTeamMemberXpBoost_GetBoostActivationButton");
static_assert(sizeof(FortCampaignTeamMemberXpBoost_GetBoostActivationButton) == 0x000008, "Wrong size on FortCampaignTeamMemberXpBoost_GetBoostActivationButton");
static_assert(offsetof(FortCampaignTeamMemberXpBoost_GetBoostActivationButton, ReturnValue) == 0x000000, "Member 'FortCampaignTeamMemberXpBoost_GetBoostActivationButton::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCampaignTeamMemberXpBoost.GetCurrentBoostAmount
// 0x0004 (0x0004 - 0x0000)
struct FortCampaignTeamMemberXpBoost_GetCurrentBoostAmount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTeamMemberXpBoost_GetCurrentBoostAmount) == 0x000004, "Wrong alignment on FortCampaignTeamMemberXpBoost_GetCurrentBoostAmount");
static_assert(sizeof(FortCampaignTeamMemberXpBoost_GetCurrentBoostAmount) == 0x000004, "Wrong size on FortCampaignTeamMemberXpBoost_GetCurrentBoostAmount");
static_assert(offsetof(FortCampaignTeamMemberXpBoost_GetCurrentBoostAmount, ReturnValue) == 0x000000, "Member 'FortCampaignTeamMemberXpBoost_GetCurrentBoostAmount::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaLobbyPlayerPanel.OnHasBattlePassUpdated
// 0x0001 (0x0001 - 0x0000)
struct AthenaLobbyPlayerPanel_OnHasBattlePassUpdated final
{
public:
	bool                                          bHasBattlePass;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLobbyPlayerPanel_OnHasBattlePassUpdated) == 0x000001, "Wrong alignment on AthenaLobbyPlayerPanel_OnHasBattlePassUpdated");
static_assert(sizeof(AthenaLobbyPlayerPanel_OnHasBattlePassUpdated) == 0x000001, "Wrong size on AthenaLobbyPlayerPanel_OnHasBattlePassUpdated");
static_assert(offsetof(AthenaLobbyPlayerPanel_OnHasBattlePassUpdated, bHasBattlePass) == 0x000000, "Member 'AthenaLobbyPlayerPanel_OnHasBattlePassUpdated::bHasBattlePass' has a wrong offset!");

// Function FortniteUI.AthenaLobbyPlayerPanel.OnIsMutedUpdated
// 0x0001 (0x0001 - 0x0000)
struct AthenaLobbyPlayerPanel_OnIsMutedUpdated final
{
public:
	bool                                          bIsMuted;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLobbyPlayerPanel_OnIsMutedUpdated) == 0x000001, "Wrong alignment on AthenaLobbyPlayerPanel_OnIsMutedUpdated");
static_assert(sizeof(AthenaLobbyPlayerPanel_OnIsMutedUpdated) == 0x000001, "Wrong size on AthenaLobbyPlayerPanel_OnIsMutedUpdated");
static_assert(offsetof(AthenaLobbyPlayerPanel_OnIsMutedUpdated, bIsMuted) == 0x000000, "Member 'AthenaLobbyPlayerPanel_OnIsMutedUpdated::bIsMuted' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyWidget.OnNewBoolValue
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolPropertyWidget_OnNewBoolValue final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyWidget_OnNewBoolValue) == 0x000001, "Wrong alignment on HUDLayoutToolPropertyWidget_OnNewBoolValue");
static_assert(sizeof(HUDLayoutToolPropertyWidget_OnNewBoolValue) == 0x000001, "Wrong size on HUDLayoutToolPropertyWidget_OnNewBoolValue");
static_assert(offsetof(HUDLayoutToolPropertyWidget_OnNewBoolValue, bNewValue) == 0x000000, "Member 'HUDLayoutToolPropertyWidget_OnNewBoolValue::bNewValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyWidget.OnNewRotatorValue
// 0x0004 (0x0004 - 0x0000)
struct HUDLayoutToolPropertyWidget_OnNewRotatorValue final
{
public:
	int32                                         NormalizedValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyWidget_OnNewRotatorValue) == 0x000004, "Wrong alignment on HUDLayoutToolPropertyWidget_OnNewRotatorValue");
static_assert(sizeof(HUDLayoutToolPropertyWidget_OnNewRotatorValue) == 0x000004, "Wrong size on HUDLayoutToolPropertyWidget_OnNewRotatorValue");
static_assert(offsetof(HUDLayoutToolPropertyWidget_OnNewRotatorValue, NormalizedValue) == 0x000000, "Member 'HUDLayoutToolPropertyWidget_OnNewRotatorValue::NormalizedValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyWidget.OnNewSliderValue
// 0x0004 (0x0004 - 0x0000)
struct HUDLayoutToolPropertyWidget_OnNewSliderValue final
{
public:
	float                                         NormalizedValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyWidget_OnNewSliderValue) == 0x000004, "Wrong alignment on HUDLayoutToolPropertyWidget_OnNewSliderValue");
static_assert(sizeof(HUDLayoutToolPropertyWidget_OnNewSliderValue) == 0x000004, "Wrong size on HUDLayoutToolPropertyWidget_OnNewSliderValue");
static_assert(offsetof(HUDLayoutToolPropertyWidget_OnNewSliderValue, NormalizedValue) == 0x000000, "Member 'HUDLayoutToolPropertyWidget_OnNewSliderValue::NormalizedValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyWidget.OnWidgetSelected
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolPropertyWidget_OnWidgetSelected final
{
public:
	class UHUDLayoutToolPlacementWidget*          NewlySelectedWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyWidget_OnWidgetSelected) == 0x000008, "Wrong alignment on HUDLayoutToolPropertyWidget_OnWidgetSelected");
static_assert(sizeof(HUDLayoutToolPropertyWidget_OnWidgetSelected) == 0x000008, "Wrong size on HUDLayoutToolPropertyWidget_OnWidgetSelected");
static_assert(offsetof(HUDLayoutToolPropertyWidget_OnWidgetSelected, NewlySelectedWidget) == 0x000000, "Member 'HUDLayoutToolPropertyWidget_OnWidgetSelected::NewlySelectedWidget' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyWidget.SetBoolValue
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolPropertyWidget_SetBoolValue final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyWidget_SetBoolValue) == 0x000001, "Wrong alignment on HUDLayoutToolPropertyWidget_SetBoolValue");
static_assert(sizeof(HUDLayoutToolPropertyWidget_SetBoolValue) == 0x000001, "Wrong size on HUDLayoutToolPropertyWidget_SetBoolValue");
static_assert(offsetof(HUDLayoutToolPropertyWidget_SetBoolValue, bNewValue) == 0x000000, "Member 'HUDLayoutToolPropertyWidget_SetBoolValue::bNewValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyWidget.SetPropertyType
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolPropertyWidget_SetPropertyType final
{
public:
	ELayoutPropertyType                           NewPropertyType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyWidget_SetPropertyType) == 0x000001, "Wrong alignment on HUDLayoutToolPropertyWidget_SetPropertyType");
static_assert(sizeof(HUDLayoutToolPropertyWidget_SetPropertyType) == 0x000001, "Wrong size on HUDLayoutToolPropertyWidget_SetPropertyType");
static_assert(offsetof(HUDLayoutToolPropertyWidget_SetPropertyType, NewPropertyType) == 0x000000, "Member 'HUDLayoutToolPropertyWidget_SetPropertyType::NewPropertyType' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyWidget.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct HUDLayoutToolPropertyWidget_GetCurrentValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyWidget_GetCurrentValue) == 0x000004, "Wrong alignment on HUDLayoutToolPropertyWidget_GetCurrentValue");
static_assert(sizeof(HUDLayoutToolPropertyWidget_GetCurrentValue) == 0x000004, "Wrong size on HUDLayoutToolPropertyWidget_GetCurrentValue");
static_assert(offsetof(HUDLayoutToolPropertyWidget_GetCurrentValue, ReturnValue) == 0x000000, "Member 'HUDLayoutToolPropertyWidget_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyWidget.GetCurrentValueAsBool
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolPropertyWidget_GetCurrentValueAsBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyWidget_GetCurrentValueAsBool) == 0x000001, "Wrong alignment on HUDLayoutToolPropertyWidget_GetCurrentValueAsBool");
static_assert(sizeof(HUDLayoutToolPropertyWidget_GetCurrentValueAsBool) == 0x000001, "Wrong size on HUDLayoutToolPropertyWidget_GetCurrentValueAsBool");
static_assert(offsetof(HUDLayoutToolPropertyWidget_GetCurrentValueAsBool, ReturnValue) == 0x000000, "Member 'HUDLayoutToolPropertyWidget_GetCurrentValueAsBool::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyWidget.GetCurrentValueAsInt
// 0x0004 (0x0004 - 0x0000)
struct HUDLayoutToolPropertyWidget_GetCurrentValueAsInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyWidget_GetCurrentValueAsInt) == 0x000004, "Wrong alignment on HUDLayoutToolPropertyWidget_GetCurrentValueAsInt");
static_assert(sizeof(HUDLayoutToolPropertyWidget_GetCurrentValueAsInt) == 0x000004, "Wrong size on HUDLayoutToolPropertyWidget_GetCurrentValueAsInt");
static_assert(offsetof(HUDLayoutToolPropertyWidget_GetCurrentValueAsInt, ReturnValue) == 0x000000, "Member 'HUDLayoutToolPropertyWidget_GetCurrentValueAsInt::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyWidget.GetRotatorLabels
// 0x0010 (0x0010 - 0x0000)
struct HUDLayoutToolPropertyWidget_GetRotatorLabels final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyWidget_GetRotatorLabels) == 0x000008, "Wrong alignment on HUDLayoutToolPropertyWidget_GetRotatorLabels");
static_assert(sizeof(HUDLayoutToolPropertyWidget_GetRotatorLabels) == 0x000010, "Wrong size on HUDLayoutToolPropertyWidget_GetRotatorLabels");
static_assert(offsetof(HUDLayoutToolPropertyWidget_GetRotatorLabels, ReturnValue) == 0x000000, "Member 'HUDLayoutToolPropertyWidget_GetRotatorLabels::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutAbilitiesDetailPanel.ListenForChanges
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutAbilitiesDetailPanel_ListenForChanges final
{
public:
	bool                                          bListen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutAbilitiesDetailPanel_ListenForChanges) == 0x000001, "Wrong alignment on FortHeroLoadoutAbilitiesDetailPanel_ListenForChanges");
static_assert(sizeof(FortHeroLoadoutAbilitiesDetailPanel_ListenForChanges) == 0x000001, "Wrong size on FortHeroLoadoutAbilitiesDetailPanel_ListenForChanges");
static_assert(offsetof(FortHeroLoadoutAbilitiesDetailPanel_ListenForChanges, bListen) == 0x000000, "Member 'FortHeroLoadoutAbilitiesDetailPanel_ListenForChanges::bListen' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolFireModeButton.GetFireModeDescription
// 0x0018 (0x0018 - 0x0000)
struct HUDLayoutToolFireModeButton_GetFireModeDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolFireModeButton_GetFireModeDescription) == 0x000008, "Wrong alignment on HUDLayoutToolFireModeButton_GetFireModeDescription");
static_assert(sizeof(HUDLayoutToolFireModeButton_GetFireModeDescription) == 0x000018, "Wrong size on HUDLayoutToolFireModeButton_GetFireModeDescription");
static_assert(offsetof(HUDLayoutToolFireModeButton_GetFireModeDescription, ReturnValue) == 0x000000, "Member 'HUDLayoutToolFireModeButton_GetFireModeDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolFireModeButton.GetFireModeType
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolFireModeButton_GetFireModeType final
{
public:
	EFireModeType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolFireModeButton_GetFireModeType) == 0x000001, "Wrong alignment on HUDLayoutToolFireModeButton_GetFireModeType");
static_assert(sizeof(HUDLayoutToolFireModeButton_GetFireModeType) == 0x000001, "Wrong size on HUDLayoutToolFireModeButton_GetFireModeType");
static_assert(offsetof(HUDLayoutToolFireModeButton_GetFireModeType, ReturnValue) == 0x000000, "Member 'HUDLayoutToolFireModeButton_GetFireModeType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.HandleDifferentSquadSlotSelected
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected");
static_assert(sizeof(FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected) == 0x000004, "Wrong size on FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected");
static_assert(offsetof(FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected, SquadSlotIndex) == 0x000000, "Member 'FortSquadManagementScreenBase_HandleDifferentSquadSlotSelected::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.HandleOpenSquadSlot
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_HandleOpenSquadSlot final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_HandleOpenSquadSlot) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_HandleOpenSquadSlot");
static_assert(sizeof(FortSquadManagementScreenBase_HandleOpenSquadSlot) == 0x000004, "Wrong size on FortSquadManagementScreenBase_HandleOpenSquadSlot");
static_assert(offsetof(FortSquadManagementScreenBase_HandleOpenSquadSlot, SquadSlotIndex) == 0x000000, "Member 'FortSquadManagementScreenBase_HandleOpenSquadSlot::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.HandlePickerSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortSquadManagementScreenBase_HandlePickerSelectionChanged final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_HandlePickerSelectionChanged) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_HandlePickerSelectionChanged");
static_assert(sizeof(FortSquadManagementScreenBase_HandlePickerSelectionChanged) == 0x000008, "Wrong size on FortSquadManagementScreenBase_HandlePickerSelectionChanged");
static_assert(offsetof(FortSquadManagementScreenBase_HandlePickerSelectionChanged, SelectedItem) == 0x000000, "Member 'FortSquadManagementScreenBase_HandlePickerSelectionChanged::SelectedItem' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.HandlePickerSelectionCommitted
// 0x0008 (0x0008 - 0x0000)
struct FortSquadManagementScreenBase_HandlePickerSelectionCommitted final
{
public:
	class UFortItem*                              CommittedItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_HandlePickerSelectionCommitted) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_HandlePickerSelectionCommitted");
static_assert(sizeof(FortSquadManagementScreenBase_HandlePickerSelectionCommitted) == 0x000008, "Wrong size on FortSquadManagementScreenBase_HandlePickerSelectionCommitted");
static_assert(offsetof(FortSquadManagementScreenBase_HandlePickerSelectionCommitted, CommittedItem) == 0x000000, "Member 'FortSquadManagementScreenBase_HandlePickerSelectionCommitted::CommittedItem' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.HandleViewInAll
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_HandleViewInAll final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_HandleViewInAll) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_HandleViewInAll");
static_assert(sizeof(FortSquadManagementScreenBase_HandleViewInAll) == 0x000004, "Wrong size on FortSquadManagementScreenBase_HandleViewInAll");
static_assert(offsetof(FortSquadManagementScreenBase_HandleViewInAll, SquadSlotIndex) == 0x000000, "Member 'FortSquadManagementScreenBase_HandleViewInAll::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.NavigateToSquadSlot
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_NavigateToSquadSlot final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_NavigateToSquadSlot) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_NavigateToSquadSlot");
static_assert(sizeof(FortSquadManagementScreenBase_NavigateToSquadSlot) == 0x000004, "Wrong size on FortSquadManagementScreenBase_NavigateToSquadSlot");
static_assert(offsetof(FortSquadManagementScreenBase_NavigateToSquadSlot, SquadSlotIndex) == 0x000000, "Member 'FortSquadManagementScreenBase_NavigateToSquadSlot::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.SelectSquadWithOffset
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_SelectSquadWithOffset final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_SelectSquadWithOffset) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_SelectSquadWithOffset");
static_assert(sizeof(FortSquadManagementScreenBase_SelectSquadWithOffset) == 0x000004, "Wrong size on FortSquadManagementScreenBase_SelectSquadWithOffset");
static_assert(offsetof(FortSquadManagementScreenBase_SelectSquadWithOffset, Offset) == 0x000000, "Member 'FortSquadManagementScreenBase_SelectSquadWithOffset::Offset' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.SetIdOfSquadToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadManagementScreenBase_SetIdOfSquadToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_SetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_SetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadManagementScreenBase_SetIdOfSquadToManageBP) == 0x000008, "Wrong size on FortSquadManagementScreenBase_SetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadManagementScreenBase_SetIdOfSquadToManageBP, SquadId) == 0x000000, "Member 'FortSquadManagementScreenBase_SetIdOfSquadToManageBP::SquadId' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.GetIdOfSquadToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadManagementScreenBase_GetIdOfSquadToManageBP final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_GetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_GetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadManagementScreenBase_GetIdOfSquadToManageBP) == 0x000008, "Wrong size on FortSquadManagementScreenBase_GetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadManagementScreenBase_GetIdOfSquadToManageBP, ReturnValue) == 0x000000, "Member 'FortSquadManagementScreenBase_GetIdOfSquadToManageBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.GetNumUnlockedSquads
// 0x0004 (0x0004 - 0x0000)
struct FortSquadManagementScreenBase_GetNumUnlockedSquads final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadManagementScreenBase_GetNumUnlockedSquads) == 0x000004, "Wrong alignment on FortSquadManagementScreenBase_GetNumUnlockedSquads");
static_assert(sizeof(FortSquadManagementScreenBase_GetNumUnlockedSquads) == 0x000004, "Wrong size on FortSquadManagementScreenBase_GetNumUnlockedSquads");
static_assert(offsetof(FortSquadManagementScreenBase_GetNumUnlockedSquads, ReturnValue) == 0x000000, "Member 'FortSquadManagementScreenBase_GetNumUnlockedSquads::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.TryGetAttributeValueFromSquad
// 0x0030 (0x0030 - 0x0000)
struct FortSquadManagementScreenBase_TryGetAttributeValueFromSquad final
{
public:
	float                                         OutValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadManagementScreenBase_TryGetAttributeValueFromSquad) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_TryGetAttributeValueFromSquad");
static_assert(sizeof(FortSquadManagementScreenBase_TryGetAttributeValueFromSquad) == 0x000030, "Wrong size on FortSquadManagementScreenBase_TryGetAttributeValueFromSquad");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetAttributeValueFromSquad, OutValue) == 0x000000, "Member 'FortSquadManagementScreenBase_TryGetAttributeValueFromSquad::OutValue' has a wrong offset!");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetAttributeValueFromSquad, Attribute) == 0x000008, "Member 'FortSquadManagementScreenBase_TryGetAttributeValueFromSquad::Attribute' has a wrong offset!");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetAttributeValueFromSquad, ReturnValue) == 0x000028, "Member 'FortSquadManagementScreenBase_TryGetAttributeValueFromSquad::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.TryGetSquadMainAttribute
// 0x0028 (0x0028 - 0x0000)
struct FortSquadManagementScreenBase_TryGetSquadMainAttribute final
{
public:
	struct FGameplayAttribute                     OutGameplayAttribute;                              // 0x0000(0x0020)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadManagementScreenBase_TryGetSquadMainAttribute) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_TryGetSquadMainAttribute");
static_assert(sizeof(FortSquadManagementScreenBase_TryGetSquadMainAttribute) == 0x000028, "Wrong size on FortSquadManagementScreenBase_TryGetSquadMainAttribute");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetSquadMainAttribute, OutGameplayAttribute) == 0x000000, "Member 'FortSquadManagementScreenBase_TryGetSquadMainAttribute::OutGameplayAttribute' has a wrong offset!");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetSquadMainAttribute, ReturnValue) == 0x000020, "Member 'FortSquadManagementScreenBase_TryGetSquadMainAttribute::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.TryGetSquadTeamAttribute
// 0x0028 (0x0028 - 0x0000)
struct FortSquadManagementScreenBase_TryGetSquadTeamAttribute final
{
public:
	struct FGameplayAttribute                     OutGameplayAttribute;                              // 0x0000(0x0020)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadManagementScreenBase_TryGetSquadTeamAttribute) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_TryGetSquadTeamAttribute");
static_assert(sizeof(FortSquadManagementScreenBase_TryGetSquadTeamAttribute) == 0x000028, "Wrong size on FortSquadManagementScreenBase_TryGetSquadTeamAttribute");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetSquadTeamAttribute, OutGameplayAttribute) == 0x000000, "Member 'FortSquadManagementScreenBase_TryGetSquadTeamAttribute::OutGameplayAttribute' has a wrong offset!");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetSquadTeamAttribute, ReturnValue) == 0x000020, "Member 'FortSquadManagementScreenBase_TryGetSquadTeamAttribute::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadManagementScreenBase.TryGetStaticSquadDataBP
// 0x0090 (0x0090 - 0x0000)
struct FortSquadManagementScreenBase_TryGetStaticSquadDataBP final
{
public:
	struct FHomebaseSquad                         OutSquadData;                                      // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadManagementScreenBase_TryGetStaticSquadDataBP) == 0x000008, "Wrong alignment on FortSquadManagementScreenBase_TryGetStaticSquadDataBP");
static_assert(sizeof(FortSquadManagementScreenBase_TryGetStaticSquadDataBP) == 0x000090, "Wrong size on FortSquadManagementScreenBase_TryGetStaticSquadDataBP");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetStaticSquadDataBP, OutSquadData) == 0x000000, "Member 'FortSquadManagementScreenBase_TryGetStaticSquadDataBP::OutSquadData' has a wrong offset!");
static_assert(offsetof(FortSquadManagementScreenBase_TryGetStaticSquadDataBP, ReturnValue) == 0x000088, "Member 'FortSquadManagementScreenBase_TryGetStaticSquadDataBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadLandingPageSurvivorSummary.HandleAddSetBonusSummaryLineItemBP
// 0x0030 (0x0030 - 0x0000)
struct FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP final
{
public:
	struct FFortAttributeModifierAccumulation     AttributeModifierAccumulation;                     // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP) == 0x000008, "Wrong alignment on FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP");
static_assert(sizeof(FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP) == 0x000030, "Wrong size on FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP");
static_assert(offsetof(FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP, AttributeModifierAccumulation) == 0x000000, "Member 'FortSquadLandingPageSurvivorSummary_HandleAddSetBonusSummaryLineItemBP::AttributeModifierAccumulation' has a wrong offset!");

// Function FortniteUI.FortCapturePointWidget.OnCapturePointDataChanged
// 0x000C (0x000C - 0x0000)
struct FortCapturePointWidget_OnCapturePointDataChanged final
{
public:
	bool                                          bActivated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapturePercentage;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECaptureState                                 CaptureState;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ControllingTeam;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCapturePointWidget_OnCapturePointDataChanged) == 0x000004, "Wrong alignment on FortCapturePointWidget_OnCapturePointDataChanged");
static_assert(sizeof(FortCapturePointWidget_OnCapturePointDataChanged) == 0x00000C, "Wrong size on FortCapturePointWidget_OnCapturePointDataChanged");
static_assert(offsetof(FortCapturePointWidget_OnCapturePointDataChanged, bActivated) == 0x000000, "Member 'FortCapturePointWidget_OnCapturePointDataChanged::bActivated' has a wrong offset!");
static_assert(offsetof(FortCapturePointWidget_OnCapturePointDataChanged, bLocked) == 0x000001, "Member 'FortCapturePointWidget_OnCapturePointDataChanged::bLocked' has a wrong offset!");
static_assert(offsetof(FortCapturePointWidget_OnCapturePointDataChanged, CapturePercentage) == 0x000004, "Member 'FortCapturePointWidget_OnCapturePointDataChanged::CapturePercentage' has a wrong offset!");
static_assert(offsetof(FortCapturePointWidget_OnCapturePointDataChanged, CaptureState) == 0x000008, "Member 'FortCapturePointWidget_OnCapturePointDataChanged::CaptureState' has a wrong offset!");
static_assert(offsetof(FortCapturePointWidget_OnCapturePointDataChanged, ControllingTeam) == 0x000009, "Member 'FortCapturePointWidget_OnCapturePointDataChanged::ControllingTeam' has a wrong offset!");

// Function FortniteUI.AthenaLocalPlayerViewModel.HandleViewTargetPlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct AthenaLocalPlayerViewModel_HandleViewTargetPlayerStateReplicated final
{
public:
	class AFortPlayerPawn*                        Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaLocalPlayerViewModel_HandleViewTargetPlayerStateReplicated) == 0x000008, "Wrong alignment on AthenaLocalPlayerViewModel_HandleViewTargetPlayerStateReplicated");
static_assert(sizeof(AthenaLocalPlayerViewModel_HandleViewTargetPlayerStateReplicated) == 0x000008, "Wrong size on AthenaLocalPlayerViewModel_HandleViewTargetPlayerStateReplicated");
static_assert(offsetof(AthenaLocalPlayerViewModel_HandleViewTargetPlayerStateReplicated, Pawn) == 0x000000, "Member 'AthenaLocalPlayerViewModel_HandleViewTargetPlayerStateReplicated::Pawn' has a wrong offset!");

// DelegateFunction FortniteUI.FortSquadSlotItemPicker.FortSquadSlotSortChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct FortSquadSlotItemPicker_FortSquadSlotSortChanged__DelegateSignature final
{
public:
	ESquadSlotSortType                            CurrentSortType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESquadSlotType                                SquadSlotType;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemPicker_FortSquadSlotSortChanged__DelegateSignature) == 0x000001, "Wrong alignment on FortSquadSlotItemPicker_FortSquadSlotSortChanged__DelegateSignature");
static_assert(sizeof(FortSquadSlotItemPicker_FortSquadSlotSortChanged__DelegateSignature) == 0x000002, "Wrong size on FortSquadSlotItemPicker_FortSquadSlotSortChanged__DelegateSignature");
static_assert(offsetof(FortSquadSlotItemPicker_FortSquadSlotSortChanged__DelegateSignature, CurrentSortType) == 0x000000, "Member 'FortSquadSlotItemPicker_FortSquadSlotSortChanged__DelegateSignature::CurrentSortType' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemPicker_FortSquadSlotSortChanged__DelegateSignature, SquadSlotType) == 0x000001, "Member 'FortSquadSlotItemPicker_FortSquadSlotSortChanged__DelegateSignature::SquadSlotType' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemPicker.SetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000008, "Member 'FortSquadSlotItemPicker_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemPicker.SetSortTypes
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotItemPicker_SetSortTypes final
{
public:
	struct FSquadSlotSortTypes                    SquadSlotSortTypes;                                // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemPicker_SetSortTypes) == 0x000008, "Wrong alignment on FortSquadSlotItemPicker_SetSortTypes");
static_assert(sizeof(FortSquadSlotItemPicker_SetSortTypes) == 0x000010, "Wrong size on FortSquadSlotItemPicker_SetSortTypes");
static_assert(offsetof(FortSquadSlotItemPicker_SetSortTypes, SquadSlotSortTypes) == 0x000000, "Member 'FortSquadSlotItemPicker_SetSortTypes::SquadSlotSortTypes' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemPicker.GetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000008, "Member 'FortSquadSlotItemPicker_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function FortniteUI.AthenaMapLayer.SetLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct AthenaMapLayer_SetLocalPlayer final
{
public:
	class ULocalPlayer*                           Param_LocalPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMapLayer_SetLocalPlayer) == 0x000008, "Wrong alignment on AthenaMapLayer_SetLocalPlayer");
static_assert(sizeof(AthenaMapLayer_SetLocalPlayer) == 0x000008, "Wrong size on AthenaMapLayer_SetLocalPlayer");
static_assert(offsetof(AthenaMapLayer_SetLocalPlayer, Param_LocalPlayer) == 0x000000, "Member 'AthenaMapLayer_SetLocalPlayer::Param_LocalPlayer' has a wrong offset!");

// Function FortniteUI.FortChatWidget.SetControllerActionBrush
// 0x0088 (0x0088 - 0x0000)
struct FortChatWidget_SetControllerActionBrush final
{
public:
	struct FSlateBrush                            SlateBrush;                                        // 0x0000(0x0088)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortChatWidget_SetControllerActionBrush) == 0x000008, "Wrong alignment on FortChatWidget_SetControllerActionBrush");
static_assert(sizeof(FortChatWidget_SetControllerActionBrush) == 0x000088, "Wrong size on FortChatWidget_SetControllerActionBrush");
static_assert(offsetof(FortChatWidget_SetControllerActionBrush, SlateBrush) == 0x000000, "Member 'FortChatWidget_SetControllerActionBrush::SlateBrush' has a wrong offset!");

// Function FortniteUI.AthenaMarkerDetails.UpdateMarkerAction
// 0x0001 (0x0001 - 0x0000)
struct AthenaMarkerDetails_UpdateMarkerAction final
{
public:
	EFortMarkerActions                            MarkerAction;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMarkerDetails_UpdateMarkerAction) == 0x000001, "Wrong alignment on AthenaMarkerDetails_UpdateMarkerAction");
static_assert(sizeof(AthenaMarkerDetails_UpdateMarkerAction) == 0x000001, "Wrong size on AthenaMarkerDetails_UpdateMarkerAction");
static_assert(offsetof(AthenaMarkerDetails_UpdateMarkerAction, MarkerAction) == 0x000000, "Member 'AthenaMarkerDetails_UpdateMarkerAction::MarkerAction' has a wrong offset!");

// Function FortniteUI.AthenaMarkerDetails.UpdateMarkerData
// 0x0108 (0x0108 - 0x0000)
struct AthenaMarkerDetails_UpdateMarkerData final
{
public:
	struct FFortWorldMarkerData                   MarkerData;                                        // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMarkerDetails_UpdateMarkerData) == 0x000008, "Wrong alignment on AthenaMarkerDetails_UpdateMarkerData");
static_assert(sizeof(AthenaMarkerDetails_UpdateMarkerData) == 0x000108, "Wrong size on AthenaMarkerDetails_UpdateMarkerData");
static_assert(offsetof(AthenaMarkerDetails_UpdateMarkerData, MarkerData) == 0x000000, "Member 'AthenaMarkerDetails_UpdateMarkerData::MarkerData' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutScreenBase.SetHeroLoadout
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutScreenBase_SetHeroLoadout final
{
public:
	const class UFortCampaignHeroLoadoutItem*     HeroLoadout;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutScreenBase_SetHeroLoadout) == 0x000008, "Wrong alignment on FortHeroLoadoutScreenBase_SetHeroLoadout");
static_assert(sizeof(FortHeroLoadoutScreenBase_SetHeroLoadout) == 0x000008, "Wrong size on FortHeroLoadoutScreenBase_SetHeroLoadout");
static_assert(offsetof(FortHeroLoadoutScreenBase_SetHeroLoadout, HeroLoadout) == 0x000000, "Member 'FortHeroLoadoutScreenBase_SetHeroLoadout::HeroLoadout' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutScreenBase.GetIsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutScreenBase_GetIsReadOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutScreenBase_GetIsReadOnly) == 0x000001, "Wrong alignment on FortHeroLoadoutScreenBase_GetIsReadOnly");
static_assert(sizeof(FortHeroLoadoutScreenBase_GetIsReadOnly) == 0x000001, "Wrong size on FortHeroLoadoutScreenBase_GetIsReadOnly");
static_assert(offsetof(FortHeroLoadoutScreenBase_GetIsReadOnly, ReturnValue) == 0x000000, "Member 'FortHeroLoadoutScreenBase_GetIsReadOnly::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutScreenBase.IsLoadoutSwitchingAllowed
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed) == 0x000001, "Wrong alignment on FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed");
static_assert(sizeof(FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed) == 0x000001, "Wrong size on FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed");
static_assert(offsetof(FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed, ReturnValue) == 0x000000, "Member 'FortHeroLoadoutScreenBase_IsLoadoutSwitchingAllowed::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaMarkerPointer.SetLineMeshMaterial
// 0x0008 (0x0008 - 0x0000)
struct AthenaMarkerPointer_SetLineMeshMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMarkerPointer_SetLineMeshMaterial) == 0x000008, "Wrong alignment on AthenaMarkerPointer_SetLineMeshMaterial");
static_assert(sizeof(AthenaMarkerPointer_SetLineMeshMaterial) == 0x000008, "Wrong size on AthenaMarkerPointer_SetLineMeshMaterial");
static_assert(offsetof(AthenaMarkerPointer_SetLineMeshMaterial, Material) == 0x000000, "Member 'AthenaMarkerPointer_SetLineMeshMaterial::Material' has a wrong offset!");

// Function FortniteUI.AthenaMarkerPointer.SetTargetScreenPosition
// 0x0008 (0x0008 - 0x0000)
struct AthenaMarkerPointer_SetTargetScreenPosition final
{
public:
	struct FVector2D                              InTargetScreenPosition;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMarkerPointer_SetTargetScreenPosition) == 0x000004, "Wrong alignment on AthenaMarkerPointer_SetTargetScreenPosition");
static_assert(sizeof(AthenaMarkerPointer_SetTargetScreenPosition) == 0x000008, "Wrong size on AthenaMarkerPointer_SetTargetScreenPosition");
static_assert(offsetof(AthenaMarkerPointer_SetTargetScreenPosition, InTargetScreenPosition) == 0x000000, "Member 'AthenaMarkerPointer_SetTargetScreenPosition::InTargetScreenPosition' has a wrong offset!");

// Function FortniteUI.AthenaMatchReadyDesktopPopup.UserDismissedDialog
// 0x0001 (0x0001 - 0x0000)
struct AthenaMatchReadyDesktopPopup_UserDismissedDialog final
{
public:
	bool                                          bBringToFront;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMatchReadyDesktopPopup_UserDismissedDialog) == 0x000001, "Wrong alignment on AthenaMatchReadyDesktopPopup_UserDismissedDialog");
static_assert(sizeof(AthenaMatchReadyDesktopPopup_UserDismissedDialog) == 0x000001, "Wrong size on AthenaMatchReadyDesktopPopup_UserDismissedDialog");
static_assert(offsetof(AthenaMatchReadyDesktopPopup_UserDismissedDialog, bBringToFront) == 0x000000, "Member 'AthenaMatchReadyDesktopPopup_UserDismissedDialog::bBringToFront' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolVisibilityWidget.OnWidgetSelected
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolVisibilityWidget_OnWidgetSelected final
{
public:
	class UHUDLayoutToolPlacementWidget*          NewlySelectedWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolVisibilityWidget_OnWidgetSelected) == 0x000008, "Wrong alignment on HUDLayoutToolVisibilityWidget_OnWidgetSelected");
static_assert(sizeof(HUDLayoutToolVisibilityWidget_OnWidgetSelected) == 0x000008, "Wrong size on HUDLayoutToolVisibilityWidget_OnWidgetSelected");
static_assert(offsetof(HUDLayoutToolVisibilityWidget_OnWidgetSelected, NewlySelectedWidget) == 0x000000, "Member 'HUDLayoutToolVisibilityWidget_OnWidgetSelected::NewlySelectedWidget' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolVisibilityWidget.GetVisibilities
// 0x0004 (0x0004 - 0x0000)
struct HUDLayoutToolVisibilityWidget_GetVisibilities final
{
public:
	EBacchusHUDStateType                          CombatVisibility;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBacchusHUDStateType                          BuildVisibility;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBacchusHUDStateType                          EditVisibility;                                    // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBacchusHUDStateType                          CreativeVisibility;                                // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolVisibilityWidget_GetVisibilities) == 0x000001, "Wrong alignment on HUDLayoutToolVisibilityWidget_GetVisibilities");
static_assert(sizeof(HUDLayoutToolVisibilityWidget_GetVisibilities) == 0x000004, "Wrong size on HUDLayoutToolVisibilityWidget_GetVisibilities");
static_assert(offsetof(HUDLayoutToolVisibilityWidget_GetVisibilities, CombatVisibility) == 0x000000, "Member 'HUDLayoutToolVisibilityWidget_GetVisibilities::CombatVisibility' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolVisibilityWidget_GetVisibilities, BuildVisibility) == 0x000001, "Member 'HUDLayoutToolVisibilityWidget_GetVisibilities::BuildVisibility' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolVisibilityWidget_GetVisibilities, EditVisibility) == 0x000002, "Member 'HUDLayoutToolVisibilityWidget_GetVisibilities::EditVisibility' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolVisibilityWidget_GetVisibilities, CreativeVisibility) == 0x000003, "Member 'HUDLayoutToolVisibilityWidget_GetVisibilities::CreativeVisibility' has a wrong offset!");

// Function FortniteUI.FortDisableAutoSlottingPromptAction.CompleteExecution
// 0x000C (0x000C - 0x0000)
struct FortDisableAutoSlottingPromptAction_CompleteExecution final
{
public:
	EFortDialogResult                             Result;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ResultName;                                        // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDisableAutoSlottingPromptAction_CompleteExecution) == 0x000004, "Wrong alignment on FortDisableAutoSlottingPromptAction_CompleteExecution");
static_assert(sizeof(FortDisableAutoSlottingPromptAction_CompleteExecution) == 0x00000C, "Wrong size on FortDisableAutoSlottingPromptAction_CompleteExecution");
static_assert(offsetof(FortDisableAutoSlottingPromptAction_CompleteExecution, Result) == 0x000000, "Member 'FortDisableAutoSlottingPromptAction_CompleteExecution::Result' has a wrong offset!");
static_assert(offsetof(FortDisableAutoSlottingPromptAction_CompleteExecution, ResultName) == 0x000004, "Member 'FortDisableAutoSlottingPromptAction_CompleteExecution::ResultName' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemDetailElementWidget.SetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000008, "Member 'FortSquadSlotItemDetailElementWidget_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemDetailElementWidget.GetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000008, "Member 'FortSquadSlotItemDetailElementWidget_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemDetailElementWidget.GetItemInSquadSlotBP
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP final
{
public:
	const class ULocalPlayer*                     LocalPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP) == 0x000008, "Wrong alignment on FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP");
static_assert(sizeof(FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP) == 0x000010, "Wrong size on FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP, LocalPlayer) == 0x000000, "Member 'FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP::LocalPlayer' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP, ReturnValue) == 0x000008, "Member 'FortSquadSlotItemDetailElementWidget_GetItemInSquadSlotBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemDetailElementWidget.IsSquadSlotLockedBP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP) == 0x000001, "Wrong alignment on FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP");
static_assert(sizeof(FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP) == 0x000001, "Wrong size on FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP");
static_assert(offsetof(FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotItemDetailElementWidget_IsSquadSlotLockedBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaPlayerIndicatorBase.BeingRevivedStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaPlayerIndicatorBase_BeingRevivedStateChanged final
{
public:
	class AFortPlayerStateAthena*                 PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReviving;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaPlayerIndicatorBase_BeingRevivedStateChanged) == 0x000008, "Wrong alignment on AthenaPlayerIndicatorBase_BeingRevivedStateChanged");
static_assert(sizeof(AthenaPlayerIndicatorBase_BeingRevivedStateChanged) == 0x000010, "Wrong size on AthenaPlayerIndicatorBase_BeingRevivedStateChanged");
static_assert(offsetof(AthenaPlayerIndicatorBase_BeingRevivedStateChanged, PS) == 0x000000, "Member 'AthenaPlayerIndicatorBase_BeingRevivedStateChanged::PS' has a wrong offset!");
static_assert(offsetof(AthenaPlayerIndicatorBase_BeingRevivedStateChanged, bReviving) == 0x000008, "Member 'AthenaPlayerIndicatorBase_BeingRevivedStateChanged::bReviving' has a wrong offset!");

// Function FortniteUI.AthenaPlayerIndicatorBase.DBNOStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaPlayerIndicatorBase_DBNOStateChanged final
{
public:
	class AFortPlayerStateAthena*                 PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDBNO;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaPlayerIndicatorBase_DBNOStateChanged) == 0x000008, "Wrong alignment on AthenaPlayerIndicatorBase_DBNOStateChanged");
static_assert(sizeof(AthenaPlayerIndicatorBase_DBNOStateChanged) == 0x000010, "Wrong size on AthenaPlayerIndicatorBase_DBNOStateChanged");
static_assert(offsetof(AthenaPlayerIndicatorBase_DBNOStateChanged, PS) == 0x000000, "Member 'AthenaPlayerIndicatorBase_DBNOStateChanged::PS' has a wrong offset!");
static_assert(offsetof(AthenaPlayerIndicatorBase_DBNOStateChanged, bDBNO) == 0x000008, "Member 'AthenaPlayerIndicatorBase_DBNOStateChanged::bDBNO' has a wrong offset!");

// Function FortniteUI.AthenaPlayerIndicatorBase.PlayerNameChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaPlayerIndicatorBase_PlayerNameChanged final
{
public:
	class AFortPlayerStateAthena*                 PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerIndicatorBase_PlayerNameChanged) == 0x000008, "Wrong alignment on AthenaPlayerIndicatorBase_PlayerNameChanged");
static_assert(sizeof(AthenaPlayerIndicatorBase_PlayerNameChanged) == 0x000018, "Wrong size on AthenaPlayerIndicatorBase_PlayerNameChanged");
static_assert(offsetof(AthenaPlayerIndicatorBase_PlayerNameChanged, PS) == 0x000000, "Member 'AthenaPlayerIndicatorBase_PlayerNameChanged::PS' has a wrong offset!");
static_assert(offsetof(AthenaPlayerIndicatorBase_PlayerNameChanged, PlayerName) == 0x000008, "Member 'AthenaPlayerIndicatorBase_PlayerNameChanged::PlayerName' has a wrong offset!");

// Function FortniteUI.AthenaPlayerIndicatorBase.SetViewModel
// 0x0008 (0x0008 - 0x0000)
struct AthenaPlayerIndicatorBase_SetViewModel final
{
public:
	class UAthenaPlayerViewModel*                 InPlayerVM;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerIndicatorBase_SetViewModel) == 0x000008, "Wrong alignment on AthenaPlayerIndicatorBase_SetViewModel");
static_assert(sizeof(AthenaPlayerIndicatorBase_SetViewModel) == 0x000008, "Wrong size on AthenaPlayerIndicatorBase_SetViewModel");
static_assert(offsetof(AthenaPlayerIndicatorBase_SetViewModel, InPlayerVM) == 0x000000, "Member 'AthenaPlayerIndicatorBase_SetViewModel::InPlayerVM' has a wrong offset!");

// Function FortniteUI.AthenaPlayerIndicatorBase.ShowCallout
// 0x0001 (0x0001 - 0x0000)
struct AthenaPlayerIndicatorBase_ShowCallout final
{
public:
	ETeamMemberState                              Callout;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerIndicatorBase_ShowCallout) == 0x000001, "Wrong alignment on AthenaPlayerIndicatorBase_ShowCallout");
static_assert(sizeof(AthenaPlayerIndicatorBase_ShowCallout) == 0x000001, "Wrong size on AthenaPlayerIndicatorBase_ShowCallout");
static_assert(offsetof(AthenaPlayerIndicatorBase_ShowCallout, Callout) == 0x000000, "Member 'AthenaPlayerIndicatorBase_ShowCallout::Callout' has a wrong offset!");

// Function FortniteUI.AthenaPlayerIndicatorBase.TalkingStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaPlayerIndicatorBase_TalkingStateChanged final
{
public:
	class AFortPlayerStateAthena*                 PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTalking;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaPlayerIndicatorBase_TalkingStateChanged) == 0x000008, "Wrong alignment on AthenaPlayerIndicatorBase_TalkingStateChanged");
static_assert(sizeof(AthenaPlayerIndicatorBase_TalkingStateChanged) == 0x000010, "Wrong size on AthenaPlayerIndicatorBase_TalkingStateChanged");
static_assert(offsetof(AthenaPlayerIndicatorBase_TalkingStateChanged, PS) == 0x000000, "Member 'AthenaPlayerIndicatorBase_TalkingStateChanged::PS' has a wrong offset!");
static_assert(offsetof(AthenaPlayerIndicatorBase_TalkingStateChanged, bTalking) == 0x000008, "Member 'AthenaPlayerIndicatorBase_TalkingStateChanged::bTalking' has a wrong offset!");

// Function FortniteUI.FortUserChoiceWidget.SetChoices
// 0x0030 (0x0030 - 0x0000)
struct FortUserChoiceWidget_SetChoices final
{
public:
	struct FChoiceData                            ChoiceItems;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUserChoiceWidget_SetChoices) == 0x000008, "Wrong alignment on FortUserChoiceWidget_SetChoices");
static_assert(sizeof(FortUserChoiceWidget_SetChoices) == 0x000030, "Wrong size on FortUserChoiceWidget_SetChoices");
static_assert(offsetof(FortUserChoiceWidget_SetChoices, ChoiceItems) == 0x000000, "Member 'FortUserChoiceWidget_SetChoices::ChoiceItems' has a wrong offset!");

// Function FortniteUI.FortExpeditionBuildSquadWidget.ClearTemporaryExpeditionSquadState
// 0x0001 (0x0001 - 0x0000)
struct FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState final
{
public:
	bool                                          bPreviewOnly;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState) == 0x000001, "Wrong alignment on FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState");
static_assert(sizeof(FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState) == 0x000001, "Wrong size on FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState");
static_assert(offsetof(FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState, bPreviewOnly) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_ClearTemporaryExpeditionSquadState::bPreviewOnly' has a wrong offset!");

// Function FortniteUI.FortExpeditionBuildSquadWidget.HandleDifferentSquadSlotSelected
// 0x0004 (0x0004 - 0x0000)
struct FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected) == 0x000004, "Wrong alignment on FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected");
static_assert(sizeof(FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected) == 0x000004, "Wrong size on FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected");
static_assert(offsetof(FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected, SquadSlotIndex) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_HandleDifferentSquadSlotSelected::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortExpeditionBuildSquadWidget.HandleStartExpeditionCompleted
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionBuildSquadWidget_HandleStartExpeditionCompleted final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionBuildSquadWidget_HandleStartExpeditionCompleted) == 0x000008, "Wrong alignment on FortExpeditionBuildSquadWidget_HandleStartExpeditionCompleted");
static_assert(sizeof(FortExpeditionBuildSquadWidget_HandleStartExpeditionCompleted) == 0x000010, "Wrong size on FortExpeditionBuildSquadWidget_HandleStartExpeditionCompleted");
static_assert(offsetof(FortExpeditionBuildSquadWidget_HandleStartExpeditionCompleted, Expedition) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_HandleStartExpeditionCompleted::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionBuildSquadWidget_HandleStartExpeditionCompleted, bSucceeded) == 0x000008, "Member 'FortExpeditionBuildSquadWidget_HandleStartExpeditionCompleted::bSucceeded' has a wrong offset!");

// Function FortniteUI.FortExpeditionBuildSquadWidget.IsExpeditionValidToStart
// 0x0001 (0x0001 - 0x0000)
struct FortExpeditionBuildSquadWidget_IsExpeditionValidToStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_IsExpeditionValidToStart) == 0x000001, "Wrong alignment on FortExpeditionBuildSquadWidget_IsExpeditionValidToStart");
static_assert(sizeof(FortExpeditionBuildSquadWidget_IsExpeditionValidToStart) == 0x000001, "Wrong size on FortExpeditionBuildSquadWidget_IsExpeditionValidToStart");
static_assert(offsetof(FortExpeditionBuildSquadWidget_IsExpeditionValidToStart, ReturnValue) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_IsExpeditionValidToStart::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortExpeditionBuildSquadWidget.SetCurrentSquadId
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionBuildSquadWidget_SetCurrentSquadId final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_SetCurrentSquadId) == 0x000004, "Wrong alignment on FortExpeditionBuildSquadWidget_SetCurrentSquadId");
static_assert(sizeof(FortExpeditionBuildSquadWidget_SetCurrentSquadId) == 0x000008, "Wrong size on FortExpeditionBuildSquadWidget_SetCurrentSquadId");
static_assert(offsetof(FortExpeditionBuildSquadWidget_SetCurrentSquadId, SquadId) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_SetCurrentSquadId::SquadId' has a wrong offset!");

// Function FortniteUI.FortExpeditionBuildSquadWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionBuildSquadWidget_SetData final
{
public:
	class UFortExpeditionItem*                    InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_SetData) == 0x000008, "Wrong alignment on FortExpeditionBuildSquadWidget_SetData");
static_assert(sizeof(FortExpeditionBuildSquadWidget_SetData) == 0x000008, "Wrong size on FortExpeditionBuildSquadWidget_SetData");
static_assert(offsetof(FortExpeditionBuildSquadWidget_SetData, InItem) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_SetData::InItem' has a wrong offset!");

// Function FortniteUI.FortExpeditionBuildSquadWidget.StartExpedition
// 0x0001 (0x0001 - 0x0000)
struct FortExpeditionBuildSquadWidget_StartExpedition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionBuildSquadWidget_StartExpedition) == 0x000001, "Wrong alignment on FortExpeditionBuildSquadWidget_StartExpedition");
static_assert(sizeof(FortExpeditionBuildSquadWidget_StartExpedition) == 0x000001, "Wrong size on FortExpeditionBuildSquadWidget_StartExpedition");
static_assert(offsetof(FortExpeditionBuildSquadWidget_StartExpedition, ReturnValue) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_StartExpedition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortExpeditionBuildSquadWidget.IsSquadSlotLocked
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionBuildSquadWidget_IsSquadSlotLocked final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionBuildSquadWidget_IsSquadSlotLocked) == 0x000004, "Wrong alignment on FortExpeditionBuildSquadWidget_IsSquadSlotLocked");
static_assert(sizeof(FortExpeditionBuildSquadWidget_IsSquadSlotLocked) == 0x000008, "Wrong size on FortExpeditionBuildSquadWidget_IsSquadSlotLocked");
static_assert(offsetof(FortExpeditionBuildSquadWidget_IsSquadSlotLocked, SlotIndex) == 0x000000, "Member 'FortExpeditionBuildSquadWidget_IsSquadSlotLocked::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortExpeditionBuildSquadWidget_IsSquadSlotLocked, ReturnValue) == 0x000004, "Member 'FortExpeditionBuildSquadWidget_IsSquadSlotLocked::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.BeingRevivedStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaPlayerInfoBase_BeingRevivedStateChanged final
{
public:
	class AFortPlayerStateAthena*                 PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReviving;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaPlayerInfoBase_BeingRevivedStateChanged) == 0x000008, "Wrong alignment on AthenaPlayerInfoBase_BeingRevivedStateChanged");
static_assert(sizeof(AthenaPlayerInfoBase_BeingRevivedStateChanged) == 0x000010, "Wrong size on AthenaPlayerInfoBase_BeingRevivedStateChanged");
static_assert(offsetof(AthenaPlayerInfoBase_BeingRevivedStateChanged, PS) == 0x000000, "Member 'AthenaPlayerInfoBase_BeingRevivedStateChanged::PS' has a wrong offset!");
static_assert(offsetof(AthenaPlayerInfoBase_BeingRevivedStateChanged, bReviving) == 0x000008, "Member 'AthenaPlayerInfoBase_BeingRevivedStateChanged::bReviving' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.DBNOStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaPlayerInfoBase_DBNOStateChanged final
{
public:
	class AFortPlayerStateAthena*                 PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDBNO;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaPlayerInfoBase_DBNOStateChanged) == 0x000008, "Wrong alignment on AthenaPlayerInfoBase_DBNOStateChanged");
static_assert(sizeof(AthenaPlayerInfoBase_DBNOStateChanged) == 0x000010, "Wrong size on AthenaPlayerInfoBase_DBNOStateChanged");
static_assert(offsetof(AthenaPlayerInfoBase_DBNOStateChanged, PS) == 0x000000, "Member 'AthenaPlayerInfoBase_DBNOStateChanged::PS' has a wrong offset!");
static_assert(offsetof(AthenaPlayerInfoBase_DBNOStateChanged, bDBNO) == 0x000008, "Member 'AthenaPlayerInfoBase_DBNOStateChanged::bDBNO' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.HandleSpectatingChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaPlayerInfoBase_HandleSpectatingChanged final
{
public:
	class AFortPlayerStateZone*                   NewSpectatingTarget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerInfoBase_HandleSpectatingChanged) == 0x000008, "Wrong alignment on AthenaPlayerInfoBase_HandleSpectatingChanged");
static_assert(sizeof(AthenaPlayerInfoBase_HandleSpectatingChanged) == 0x000008, "Wrong size on AthenaPlayerInfoBase_HandleSpectatingChanged");
static_assert(offsetof(AthenaPlayerInfoBase_HandleSpectatingChanged, NewSpectatingTarget) == 0x000000, "Member 'AthenaPlayerInfoBase_HandleSpectatingChanged::NewSpectatingTarget' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.MutedStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaPlayerInfoBase_MutedStateChanged final
{
public:
	class AFortPlayerStateAthena*                 PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Muted;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaPlayerInfoBase_MutedStateChanged) == 0x000008, "Wrong alignment on AthenaPlayerInfoBase_MutedStateChanged");
static_assert(sizeof(AthenaPlayerInfoBase_MutedStateChanged) == 0x000010, "Wrong size on AthenaPlayerInfoBase_MutedStateChanged");
static_assert(offsetof(AthenaPlayerInfoBase_MutedStateChanged, PS) == 0x000000, "Member 'AthenaPlayerInfoBase_MutedStateChanged::PS' has a wrong offset!");
static_assert(offsetof(AthenaPlayerInfoBase_MutedStateChanged, Muted) == 0x000008, "Member 'AthenaPlayerInfoBase_MutedStateChanged::Muted' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.OnDisplayAddFriend
// 0x0001 (0x0001 - 0x0000)
struct AthenaPlayerInfoBase_OnDisplayAddFriend final
{
public:
	bool                                          bShowAnimation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerInfoBase_OnDisplayAddFriend) == 0x000001, "Wrong alignment on AthenaPlayerInfoBase_OnDisplayAddFriend");
static_assert(sizeof(AthenaPlayerInfoBase_OnDisplayAddFriend) == 0x000001, "Wrong size on AthenaPlayerInfoBase_OnDisplayAddFriend");
static_assert(offsetof(AthenaPlayerInfoBase_OnDisplayAddFriend, bShowAnimation) == 0x000000, "Member 'AthenaPlayerInfoBase_OnDisplayAddFriend::bShowAnimation' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.OnGameModeIconChange
// 0x0010 (0x0010 - 0x0000)
struct AthenaPlayerInfoBase_OnGameModeIconChange final
{
public:
	class AFortPlayerStateAthena*                 PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             NewGameModeIcon;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerInfoBase_OnGameModeIconChange) == 0x000008, "Wrong alignment on AthenaPlayerInfoBase_OnGameModeIconChange");
static_assert(sizeof(AthenaPlayerInfoBase_OnGameModeIconChange) == 0x000010, "Wrong size on AthenaPlayerInfoBase_OnGameModeIconChange");
static_assert(offsetof(AthenaPlayerInfoBase_OnGameModeIconChange, PS) == 0x000000, "Member 'AthenaPlayerInfoBase_OnGameModeIconChange::PS' has a wrong offset!");
static_assert(offsetof(AthenaPlayerInfoBase_OnGameModeIconChange, NewGameModeIcon) == 0x000008, "Member 'AthenaPlayerInfoBase_OnGameModeIconChange::NewGameModeIcon' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.OnPlaylistExtensionWidgetCreated
// 0x0008 (0x0008 - 0x0000)
struct AthenaPlayerInfoBase_OnPlaylistExtensionWidgetCreated final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerInfoBase_OnPlaylistExtensionWidgetCreated) == 0x000008, "Wrong alignment on AthenaPlayerInfoBase_OnPlaylistExtensionWidgetCreated");
static_assert(sizeof(AthenaPlayerInfoBase_OnPlaylistExtensionWidgetCreated) == 0x000008, "Wrong size on AthenaPlayerInfoBase_OnPlaylistExtensionWidgetCreated");
static_assert(offsetof(AthenaPlayerInfoBase_OnPlaylistExtensionWidgetCreated, Widget) == 0x000000, "Member 'AthenaPlayerInfoBase_OnPlaylistExtensionWidgetCreated::Widget' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.OnPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct AthenaPlayerInfoBase_OnPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerInfoBase_OnPlaylistLoaded) == 0x000008, "Wrong alignment on AthenaPlayerInfoBase_OnPlaylistLoaded");
static_assert(sizeof(AthenaPlayerInfoBase_OnPlaylistLoaded) == 0x000028, "Wrong size on AthenaPlayerInfoBase_OnPlaylistLoaded");
static_assert(offsetof(AthenaPlayerInfoBase_OnPlaylistLoaded, PlaylistName) == 0x000000, "Member 'AthenaPlayerInfoBase_OnPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(AthenaPlayerInfoBase_OnPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'AthenaPlayerInfoBase_OnPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.OnResurrectionStateChanged
// 0x0003 (0x0003 - 0x0000)
struct AthenaPlayerInfoBase_OnResurrectionStateChanged final
{
public:
	struct FFortResurrectionUIData                ResurrectionStateData;                             // 0x0000(0x0003)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerInfoBase_OnResurrectionStateChanged) == 0x000001, "Wrong alignment on AthenaPlayerInfoBase_OnResurrectionStateChanged");
static_assert(sizeof(AthenaPlayerInfoBase_OnResurrectionStateChanged) == 0x000003, "Wrong size on AthenaPlayerInfoBase_OnResurrectionStateChanged");
static_assert(offsetof(AthenaPlayerInfoBase_OnResurrectionStateChanged, ResurrectionStateData) == 0x000000, "Member 'AthenaPlayerInfoBase_OnResurrectionStateChanged::ResurrectionStateData' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.OnTalkingStateStartedOrEnded
// 0x0001 (0x0001 - 0x0000)
struct AthenaPlayerInfoBase_OnTalkingStateStartedOrEnded final
{
public:
	bool                                          bIsTalking;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerInfoBase_OnTalkingStateStartedOrEnded) == 0x000001, "Wrong alignment on AthenaPlayerInfoBase_OnTalkingStateStartedOrEnded");
static_assert(sizeof(AthenaPlayerInfoBase_OnTalkingStateStartedOrEnded) == 0x000001, "Wrong size on AthenaPlayerInfoBase_OnTalkingStateStartedOrEnded");
static_assert(offsetof(AthenaPlayerInfoBase_OnTalkingStateStartedOrEnded, bIsTalking) == 0x000000, "Member 'AthenaPlayerInfoBase_OnTalkingStateStartedOrEnded::bIsTalking' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.SetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct AthenaPlayerInfoBase_SetPlayerState final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerInfoBase_SetPlayerState) == 0x000008, "Wrong alignment on AthenaPlayerInfoBase_SetPlayerState");
static_assert(sizeof(AthenaPlayerInfoBase_SetPlayerState) == 0x000008, "Wrong size on AthenaPlayerInfoBase_SetPlayerState");
static_assert(offsetof(AthenaPlayerInfoBase_SetPlayerState, InPlayerState) == 0x000000, "Member 'AthenaPlayerInfoBase_SetPlayerState::InPlayerState' has a wrong offset!");

// Function FortniteUI.AthenaPlayerInfoBase.TalkingStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaPlayerInfoBase_TalkingStateChanged final
{
public:
	class AFortPlayerStateAthena*                 PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTalking;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaPlayerInfoBase_TalkingStateChanged) == 0x000008, "Wrong alignment on AthenaPlayerInfoBase_TalkingStateChanged");
static_assert(sizeof(AthenaPlayerInfoBase_TalkingStateChanged) == 0x000010, "Wrong size on AthenaPlayerInfoBase_TalkingStateChanged");
static_assert(offsetof(AthenaPlayerInfoBase_TalkingStateChanged, PS) == 0x000000, "Member 'AthenaPlayerInfoBase_TalkingStateChanged::PS' has a wrong offset!");
static_assert(offsetof(AthenaPlayerInfoBase_TalkingStateChanged, bTalking) == 0x000008, "Member 'AthenaPlayerInfoBase_TalkingStateChanged::bTalking' has a wrong offset!");

// Function FortniteUI.FortHUDScoringAlert.OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct FortHUDScoringAlert_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDScoringAlert_OnGamePhaseChanged) == 0x000001, "Wrong alignment on FortHUDScoringAlert_OnGamePhaseChanged");
static_assert(sizeof(FortHUDScoringAlert_OnGamePhaseChanged) == 0x000001, "Wrong size on FortHUDScoringAlert_OnGamePhaseChanged");
static_assert(offsetof(FortHUDScoringAlert_OnGamePhaseChanged, GamePhase) == 0x000000, "Member 'FortHUDScoringAlert_OnGamePhaseChanged::GamePhase' has a wrong offset!");

// Function FortniteUI.FortHUDScoringAlert.OnPlayerMatchAbandonStateChanged
// 0x0002 (0x0002 - 0x0000)
struct FortHUDScoringAlert_OnPlayerMatchAbandonStateChanged final
{
public:
	EMatchAbandonState                            OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchAbandonState                            NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDScoringAlert_OnPlayerMatchAbandonStateChanged) == 0x000001, "Wrong alignment on FortHUDScoringAlert_OnPlayerMatchAbandonStateChanged");
static_assert(sizeof(FortHUDScoringAlert_OnPlayerMatchAbandonStateChanged) == 0x000002, "Wrong size on FortHUDScoringAlert_OnPlayerMatchAbandonStateChanged");
static_assert(offsetof(FortHUDScoringAlert_OnPlayerMatchAbandonStateChanged, OldState) == 0x000000, "Member 'FortHUDScoringAlert_OnPlayerMatchAbandonStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(FortHUDScoringAlert_OnPlayerMatchAbandonStateChanged, NewState) == 0x000001, "Member 'FortHUDScoringAlert_OnPlayerMatchAbandonStateChanged::NewState' has a wrong offset!");

// Function FortniteUI.FortHUDScoringAlert.OnPlayerPlacementChanged
// 0x0010 (0x0010 - 0x0000)
struct FortHUDScoringAlert_OnPlayerPlacementChanged final
{
public:
	class AFortPlayerStateAthena*                 Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewPlayerPlacement;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHUDScoringAlert_OnPlayerPlacementChanged) == 0x000008, "Wrong alignment on FortHUDScoringAlert_OnPlayerPlacementChanged");
static_assert(sizeof(FortHUDScoringAlert_OnPlayerPlacementChanged) == 0x000010, "Wrong size on FortHUDScoringAlert_OnPlayerPlacementChanged");
static_assert(offsetof(FortHUDScoringAlert_OnPlayerPlacementChanged, Sender) == 0x000000, "Member 'FortHUDScoringAlert_OnPlayerPlacementChanged::Sender' has a wrong offset!");
static_assert(offsetof(FortHUDScoringAlert_OnPlayerPlacementChanged, NewPlayerPlacement) == 0x000008, "Member 'FortHUDScoringAlert_OnPlayerPlacementChanged::NewPlayerPlacement' has a wrong offset!");

// Function FortniteUI.FortHUDScoringAlert.OnTeamPlacementChanged
// 0x0004 (0x0004 - 0x0000)
struct FortHUDScoringAlert_OnTeamPlacementChanged final
{
public:
	int32                                         NewTeamPlacement;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDScoringAlert_OnTeamPlacementChanged) == 0x000004, "Wrong alignment on FortHUDScoringAlert_OnTeamPlacementChanged");
static_assert(sizeof(FortHUDScoringAlert_OnTeamPlacementChanged) == 0x000004, "Wrong size on FortHUDScoringAlert_OnTeamPlacementChanged");
static_assert(offsetof(FortHUDScoringAlert_OnTeamPlacementChanged, NewTeamPlacement) == 0x000000, "Member 'FortHUDScoringAlert_OnTeamPlacementChanged::NewTeamPlacement' has a wrong offset!");

// Function FortniteUI.AthenaPlayersLeftBase.SetPlayersLeftText
// 0x0018 (0x0018 - 0x0000)
struct AthenaPlayersLeftBase_SetPlayersLeftText final
{
public:
	class FText                                   PlayersText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayersLeftBase_SetPlayersLeftText) == 0x000008, "Wrong alignment on AthenaPlayersLeftBase_SetPlayersLeftText");
static_assert(sizeof(AthenaPlayersLeftBase_SetPlayersLeftText) == 0x000018, "Wrong size on AthenaPlayersLeftBase_SetPlayersLeftText");
static_assert(offsetof(AthenaPlayersLeftBase_SetPlayersLeftText, PlayersText) == 0x000000, "Member 'AthenaPlayersLeftBase_SetPlayersLeftText::PlayersText' has a wrong offset!");

// Function FortniteUI.FortExpeditionListViewWidget.SetExpeditionListSortType
// 0x0001 (0x0001 - 0x0000)
struct FortExpeditionListViewWidget_SetExpeditionListSortType final
{
public:
	EFortExpeditionListSort                       InSortType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionListViewWidget_SetExpeditionListSortType) == 0x000001, "Wrong alignment on FortExpeditionListViewWidget_SetExpeditionListSortType");
static_assert(sizeof(FortExpeditionListViewWidget_SetExpeditionListSortType) == 0x000001, "Wrong size on FortExpeditionListViewWidget_SetExpeditionListSortType");
static_assert(offsetof(FortExpeditionListViewWidget_SetExpeditionListSortType, InSortType) == 0x000000, "Member 'FortExpeditionListViewWidget_SetExpeditionListSortType::InSortType' has a wrong offset!");

// Function FortniteUI.FortExpeditionListViewWidget.GetExpeditionListSortName
// 0x0018 (0x0018 - 0x0000)
struct FortExpeditionListViewWidget_GetExpeditionListSortName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionListViewWidget_GetExpeditionListSortName) == 0x000008, "Wrong alignment on FortExpeditionListViewWidget_GetExpeditionListSortName");
static_assert(sizeof(FortExpeditionListViewWidget_GetExpeditionListSortName) == 0x000018, "Wrong size on FortExpeditionListViewWidget_GetExpeditionListSortName");
static_assert(offsetof(FortExpeditionListViewWidget_GetExpeditionListSortName, ReturnValue) == 0x000000, "Member 'FortExpeditionListViewWidget_GetExpeditionListSortName::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaPlayerVitalityBarBase.SetDataSource
// 0x0008 (0x0008 - 0x0000)
struct AthenaPlayerVitalityBarBase_SetDataSource final
{
public:
	class UAthenaPlayerViewModel*                 PlayerViewModel;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerVitalityBarBase_SetDataSource) == 0x000008, "Wrong alignment on AthenaPlayerVitalityBarBase_SetDataSource");
static_assert(sizeof(AthenaPlayerVitalityBarBase_SetDataSource) == 0x000008, "Wrong size on AthenaPlayerVitalityBarBase_SetDataSource");
static_assert(offsetof(AthenaPlayerVitalityBarBase_SetDataSource, PlayerViewModel) == 0x000000, "Member 'AthenaPlayerVitalityBarBase_SetDataSource::PlayerViewModel' has a wrong offset!");

// Function FortniteUI.FortExpeditionReturnsWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionReturnsWidget_SetData final
{
public:
	class UFortExpeditionItem*                    InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionReturnsWidget_SetData) == 0x000008, "Wrong alignment on FortExpeditionReturnsWidget_SetData");
static_assert(sizeof(FortExpeditionReturnsWidget_SetData) == 0x000008, "Wrong size on FortExpeditionReturnsWidget_SetData");
static_assert(offsetof(FortExpeditionReturnsWidget_SetData, InItem) == 0x000000, "Member 'FortExpeditionReturnsWidget_SetData::InItem' has a wrong offset!");

// Function FortniteUI.FortHUDObjectiveSizeInterface.GetHeightEstimate
// 0x0004 (0x0004 - 0x0000)
struct FortHUDObjectiveSizeInterface_GetHeightEstimate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDObjectiveSizeInterface_GetHeightEstimate) == 0x000004, "Wrong alignment on FortHUDObjectiveSizeInterface_GetHeightEstimate");
static_assert(sizeof(FortHUDObjectiveSizeInterface_GetHeightEstimate) == 0x000004, "Wrong size on FortHUDObjectiveSizeInterface_GetHeightEstimate");
static_assert(offsetof(FortHUDObjectiveSizeInterface_GetHeightEstimate, ReturnValue) == 0x000000, "Member 'FortHUDObjectiveSizeInterface_GetHeightEstimate::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatBox.GetBaseStatView
// 0x0008 (0x0008 - 0x0000)
struct AthenaProfileStatBox_GetBaseStatView final
{
public:
	class UAthenaBaseStatView*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatBox_GetBaseStatView) == 0x000008, "Wrong alignment on AthenaProfileStatBox_GetBaseStatView");
static_assert(sizeof(AthenaProfileStatBox_GetBaseStatView) == 0x000008, "Wrong size on AthenaProfileStatBox_GetBaseStatView");
static_assert(offsetof(AthenaProfileStatBox_GetBaseStatView, ReturnValue) == 0x000000, "Member 'AthenaProfileStatBox_GetBaseStatView::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaProfileStatBox.OnStatViewChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AthenaProfileStatBox_OnStatViewChanged__DelegateSignature final
{
public:
	class UAthenaBaseStatView*                    Param_StatView;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatBox_OnStatViewChanged__DelegateSignature) == 0x000008, "Wrong alignment on AthenaProfileStatBox_OnStatViewChanged__DelegateSignature");
static_assert(sizeof(AthenaProfileStatBox_OnStatViewChanged__DelegateSignature) == 0x000008, "Wrong size on AthenaProfileStatBox_OnStatViewChanged__DelegateSignature");
static_assert(offsetof(AthenaProfileStatBox_OnStatViewChanged__DelegateSignature, Param_StatView) == 0x000000, "Member 'AthenaProfileStatBox_OnStatViewChanged__DelegateSignature::Param_StatView' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatBox.SetStatView
// 0x0010 (0x0010 - 0x0000)
struct AthenaProfileStatBox_SetStatView final
{
public:
	class UAthenaBaseStatView*                    InStatView;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RespectParentStatView;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaProfileStatBox_SetStatView) == 0x000008, "Wrong alignment on AthenaProfileStatBox_SetStatView");
static_assert(sizeof(AthenaProfileStatBox_SetStatView) == 0x000010, "Wrong size on AthenaProfileStatBox_SetStatView");
static_assert(offsetof(AthenaProfileStatBox_SetStatView, InStatView) == 0x000000, "Member 'AthenaProfileStatBox_SetStatView::InStatView' has a wrong offset!");
static_assert(offsetof(AthenaProfileStatBox_SetStatView, RespectParentStatView) == 0x000008, "Member 'AthenaProfileStatBox_SetStatView::RespectParentStatView' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatBox.GetStatStyle
// 0x00C8 (0x00C8 - 0x0000)
struct AthenaProfileStatBox_GetStatStyle final
{
public:
	struct FGameplayTag                           InStat;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortUIStatStyle                       ReturnValue;                                       // 0x0008(0x00C0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatBox_GetStatStyle) == 0x000008, "Wrong alignment on AthenaProfileStatBox_GetStatStyle");
static_assert(sizeof(AthenaProfileStatBox_GetStatStyle) == 0x0000C8, "Wrong size on AthenaProfileStatBox_GetStatStyle");
static_assert(offsetof(AthenaProfileStatBox_GetStatStyle, InStat) == 0x000000, "Member 'AthenaProfileStatBox_GetStatStyle::InStat' has a wrong offset!");
static_assert(offsetof(AthenaProfileStatBox_GetStatStyle, ReturnValue) == 0x000008, "Member 'AthenaProfileStatBox_GetStatStyle::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaWeaponStatView.GetWeaponDefinition
// 0x0008 (0x0008 - 0x0000)
struct AthenaWeaponStatView_GetWeaponDefinition final
{
public:
	class UFortWeaponItemDefinition*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWeaponStatView_GetWeaponDefinition) == 0x000008, "Wrong alignment on AthenaWeaponStatView_GetWeaponDefinition");
static_assert(sizeof(AthenaWeaponStatView_GetWeaponDefinition) == 0x000008, "Wrong size on AthenaWeaponStatView_GetWeaponDefinition");
static_assert(offsetof(AthenaWeaponStatView_GetWeaponDefinition, ReturnValue) == 0x000000, "Member 'AthenaWeaponStatView_GetWeaponDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaMatchSetStatView.GetOwningSeason
// 0x0008 (0x0008 - 0x0000)
struct AthenaMatchSetStatView_GetOwningSeason final
{
public:
	class UAthenaSeasonStats*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMatchSetStatView_GetOwningSeason) == 0x000008, "Wrong alignment on AthenaMatchSetStatView_GetOwningSeason");
static_assert(sizeof(AthenaMatchSetStatView_GetOwningSeason) == 0x000008, "Wrong size on AthenaMatchSetStatView_GetOwningSeason");
static_assert(offsetof(AthenaMatchSetStatView_GetOwningSeason, ReturnValue) == 0x000000, "Member 'AthenaMatchSetStatView_GetOwningSeason::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaMatchSetStatView.GetBestMatchViews
// 0x0010 (0x0010 - 0x0000)
struct AthenaMatchSetStatView_GetBestMatchViews final
{
public:
	TArray<class UAthenaMatchStatView*>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaMatchSetStatView_GetBestMatchViews) == 0x000008, "Wrong alignment on AthenaMatchSetStatView_GetBestMatchViews");
static_assert(sizeof(AthenaMatchSetStatView_GetBestMatchViews) == 0x000010, "Wrong size on AthenaMatchSetStatView_GetBestMatchViews");
static_assert(offsetof(AthenaMatchSetStatView_GetBestMatchViews, ReturnValue) == 0x000000, "Member 'AthenaMatchSetStatView_GetBestMatchViews::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatListWidgetBase.HandleStatViewChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaProfileStatListWidgetBase_HandleStatViewChanged final
{
public:
	class UAthenaBaseStatView*                    StatView;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatListWidgetBase_HandleStatViewChanged) == 0x000008, "Wrong alignment on AthenaProfileStatListWidgetBase_HandleStatViewChanged");
static_assert(sizeof(AthenaProfileStatListWidgetBase_HandleStatViewChanged) == 0x000008, "Wrong size on AthenaProfileStatListWidgetBase_HandleStatViewChanged");
static_assert(offsetof(AthenaProfileStatListWidgetBase_HandleStatViewChanged, StatView) == 0x000000, "Member 'AthenaProfileStatListWidgetBase_HandleStatViewChanged::StatView' has a wrong offset!");

// Function FortniteUI.LoadoutWarningWidget.OnLoadoutWarning
// 0x0004 (0x0004 - 0x0000)
struct LoadoutWarningWidget_OnLoadoutWarning final
{
public:
	float                                         TimeToSwap;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutWarningWidget_OnLoadoutWarning) == 0x000004, "Wrong alignment on LoadoutWarningWidget_OnLoadoutWarning");
static_assert(sizeof(LoadoutWarningWidget_OnLoadoutWarning) == 0x000004, "Wrong size on LoadoutWarningWidget_OnLoadoutWarning");
static_assert(offsetof(LoadoutWarningWidget_OnLoadoutWarning, TimeToSwap) == 0x000000, "Member 'LoadoutWarningWidget_OnLoadoutWarning::TimeToSwap' has a wrong offset!");

// Function FortniteUI.LoadoutWarningWidget.StartWarning
// 0x0004 (0x0004 - 0x0000)
struct LoadoutWarningWidget_StartWarning final
{
public:
	float                                         TimeToSwap;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutWarningWidget_StartWarning) == 0x000004, "Wrong alignment on LoadoutWarningWidget_StartWarning");
static_assert(sizeof(LoadoutWarningWidget_StartWarning) == 0x000004, "Wrong size on LoadoutWarningWidget_StartWarning");
static_assert(offsetof(LoadoutWarningWidget_StartWarning, TimeToSwap) == 0x000000, "Member 'LoadoutWarningWidget_StartWarning::TimeToSwap' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatsBase.OnProfileLoaded
// 0x0008 (0x0008 - 0x0000)
struct AthenaProfileStatsBase_OnProfileLoaded final
{
public:
	class UFortMcpProfileAthenaStats*             ProfileAthenaStats;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatsBase_OnProfileLoaded) == 0x000008, "Wrong alignment on AthenaProfileStatsBase_OnProfileLoaded");
static_assert(sizeof(AthenaProfileStatsBase_OnProfileLoaded) == 0x000008, "Wrong size on AthenaProfileStatsBase_OnProfileLoaded");
static_assert(offsetof(AthenaProfileStatsBase_OnProfileLoaded, ProfileAthenaStats) == 0x000000, "Member 'AthenaProfileStatsBase_OnProfileLoaded::ProfileAthenaStats' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatsBase.Setup
// 0x0028 (0x0028 - 0x0000)
struct AthenaProfileStatsBase_Setup final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatsBase_Setup) == 0x000008, "Wrong alignment on AthenaProfileStatsBase_Setup");
static_assert(sizeof(AthenaProfileStatsBase_Setup) == 0x000028, "Wrong size on AthenaProfileStatsBase_Setup");
static_assert(offsetof(AthenaProfileStatsBase_Setup, InUniqueId) == 0x000000, "Member 'AthenaProfileStatsBase_Setup::InUniqueId' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatsBase.GetCurrentPlaylistName
// 0x0018 (0x0018 - 0x0000)
struct AthenaProfileStatsBase_GetCurrentPlaylistName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatsBase_GetCurrentPlaylistName) == 0x000008, "Wrong alignment on AthenaProfileStatsBase_GetCurrentPlaylistName");
static_assert(sizeof(AthenaProfileStatsBase_GetCurrentPlaylistName) == 0x000018, "Wrong size on AthenaProfileStatsBase_GetCurrentPlaylistName");
static_assert(offsetof(AthenaProfileStatsBase_GetCurrentPlaylistName, ReturnValue) == 0x000000, "Member 'AthenaProfileStatsBase_GetCurrentPlaylistName::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatsBase.GetCurrentStatSet
// 0x0008 (0x0008 - 0x0000)
struct AthenaProfileStatsBase_GetCurrentStatSet final
{
public:
	class UAthenaSeasonStats*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatsBase_GetCurrentStatSet) == 0x000008, "Wrong alignment on AthenaProfileStatsBase_GetCurrentStatSet");
static_assert(sizeof(AthenaProfileStatsBase_GetCurrentStatSet) == 0x000008, "Wrong size on AthenaProfileStatsBase_GetCurrentStatSet");
static_assert(offsetof(AthenaProfileStatsBase_GetCurrentStatSet, ReturnValue) == 0x000000, "Member 'AthenaProfileStatsBase_GetCurrentStatSet::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatsBase.GetUniqueID
// 0x0028 (0x0028 - 0x0000)
struct AthenaProfileStatsBase_GetUniqueID final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatsBase_GetUniqueID) == 0x000008, "Wrong alignment on AthenaProfileStatsBase_GetUniqueID");
static_assert(sizeof(AthenaProfileStatsBase_GetUniqueID) == 0x000028, "Wrong size on AthenaProfileStatsBase_GetUniqueID");
static_assert(offsetof(AthenaProfileStatsBase_GetUniqueID, ReturnValue) == 0x000000, "Member 'AthenaProfileStatsBase_GetUniqueID::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatsBase.NumStatSets
// 0x0004 (0x0004 - 0x0000)
struct AthenaProfileStatsBase_NumStatSets final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatsBase_NumStatSets) == 0x000004, "Wrong alignment on AthenaProfileStatsBase_NumStatSets");
static_assert(sizeof(AthenaProfileStatsBase_NumStatSets) == 0x000004, "Wrong size on AthenaProfileStatsBase_NumStatSets");
static_assert(offsetof(AthenaProfileStatsBase_NumStatSets, ReturnValue) == 0x000000, "Member 'AthenaProfileStatsBase_NumStatSets::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatsRecentMatchesBase.OnProfileLoaded
// 0x0008 (0x0008 - 0x0000)
struct AthenaProfileStatsRecentMatchesBase_OnProfileLoaded final
{
public:
	class UFortMcpProfileAthenaStats*             ProfileAthenaStats;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatsRecentMatchesBase_OnProfileLoaded) == 0x000008, "Wrong alignment on AthenaProfileStatsRecentMatchesBase_OnProfileLoaded");
static_assert(sizeof(AthenaProfileStatsRecentMatchesBase_OnProfileLoaded) == 0x000008, "Wrong size on AthenaProfileStatsRecentMatchesBase_OnProfileLoaded");
static_assert(offsetof(AthenaProfileStatsRecentMatchesBase_OnProfileLoaded, ProfileAthenaStats) == 0x000000, "Member 'AthenaProfileStatsRecentMatchesBase_OnProfileLoaded::ProfileAthenaStats' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatsRecentMatchesBase.Setup
// 0x0028 (0x0028 - 0x0000)
struct AthenaProfileStatsRecentMatchesBase_Setup final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatsRecentMatchesBase_Setup) == 0x000008, "Wrong alignment on AthenaProfileStatsRecentMatchesBase_Setup");
static_assert(sizeof(AthenaProfileStatsRecentMatchesBase_Setup) == 0x000028, "Wrong size on AthenaProfileStatsRecentMatchesBase_Setup");
static_assert(offsetof(AthenaProfileStatsRecentMatchesBase_Setup, InUniqueId) == 0x000000, "Member 'AthenaProfileStatsRecentMatchesBase_Setup::InUniqueId' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatsRecentMatchesBase.GetRecentMatches
// 0x0010 (0x0010 - 0x0000)
struct AthenaProfileStatsRecentMatchesBase_GetRecentMatches final
{
public:
	TArray<class UAthenaMatchStatView*>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatsRecentMatchesBase_GetRecentMatches) == 0x000008, "Wrong alignment on AthenaProfileStatsRecentMatchesBase_GetRecentMatches");
static_assert(sizeof(AthenaProfileStatsRecentMatchesBase_GetRecentMatches) == 0x000010, "Wrong size on AthenaProfileStatsRecentMatchesBase_GetRecentMatches");
static_assert(offsetof(AthenaProfileStatsRecentMatchesBase_GetRecentMatches, ReturnValue) == 0x000000, "Member 'AthenaProfileStatsRecentMatchesBase_GetRecentMatches::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatsRecentMatchesBase.GetUniqueID
// 0x0028 (0x0028 - 0x0000)
struct AthenaProfileStatsRecentMatchesBase_GetUniqueID final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatsRecentMatchesBase_GetUniqueID) == 0x000008, "Wrong alignment on AthenaProfileStatsRecentMatchesBase_GetUniqueID");
static_assert(sizeof(AthenaProfileStatsRecentMatchesBase_GetUniqueID) == 0x000028, "Wrong size on AthenaProfileStatsRecentMatchesBase_GetUniqueID");
static_assert(offsetof(AthenaProfileStatsRecentMatchesBase_GetUniqueID, ReturnValue) == 0x000000, "Member 'AthenaProfileStatsRecentMatchesBase_GetUniqueID::ReturnValue' has a wrong offset!");

// Function FortniteUI.MinigameHUD_SpectatorLeaderboardEntry.InitializeEntry
// 0x0010 (0x0010 - 0x0000)
struct MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Standing;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndScore;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry) == 0x000004, "Wrong alignment on MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry");
static_assert(sizeof(MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry) == 0x000010, "Wrong size on MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry");
static_assert(offsetof(MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry, TeamId) == 0x000000, "Member 'MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry::TeamId' has a wrong offset!");
static_assert(offsetof(MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry, Standing) == 0x000004, "Member 'MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry::Standing' has a wrong offset!");
static_assert(offsetof(MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry, Score) == 0x000008, "Member 'MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry::Score' has a wrong offset!");
static_assert(offsetof(MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry, EndScore) == 0x00000C, "Member 'MinigameHUD_SpectatorLeaderboardEntry_InitializeEntry::EndScore' has a wrong offset!");

// Function FortniteUI.MinigameHUD_SpectatorLeaderboardEntry.OnStandingChanged
// 0x0008 (0x0008 - 0x0000)
struct MinigameHUD_SpectatorLeaderboardEntry_OnStandingChanged final
{
public:
	int32                                         Standing;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinigameHUD_SpectatorLeaderboardEntry_OnStandingChanged) == 0x000004, "Wrong alignment on MinigameHUD_SpectatorLeaderboardEntry_OnStandingChanged");
static_assert(sizeof(MinigameHUD_SpectatorLeaderboardEntry_OnStandingChanged) == 0x000008, "Wrong size on MinigameHUD_SpectatorLeaderboardEntry_OnStandingChanged");
static_assert(offsetof(MinigameHUD_SpectatorLeaderboardEntry_OnStandingChanged, Standing) == 0x000000, "Member 'MinigameHUD_SpectatorLeaderboardEntry_OnStandingChanged::Standing' has a wrong offset!");
static_assert(offsetof(MinigameHUD_SpectatorLeaderboardEntry_OnStandingChanged, Score) == 0x000004, "Member 'MinigameHUD_SpectatorLeaderboardEntry_OnStandingChanged::Score' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatWidgetBase.CreateWeaponGroupData
// 0x0018 (0x0018 - 0x0000)
struct AthenaProfileStatWidgetBase_CreateWeaponGroupData final
{
public:
	int32                                         MaxToReturn;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeOtherCategory;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPercentages;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStatGroupData>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatWidgetBase_CreateWeaponGroupData) == 0x000008, "Wrong alignment on AthenaProfileStatWidgetBase_CreateWeaponGroupData");
static_assert(sizeof(AthenaProfileStatWidgetBase_CreateWeaponGroupData) == 0x000018, "Wrong size on AthenaProfileStatWidgetBase_CreateWeaponGroupData");
static_assert(offsetof(AthenaProfileStatWidgetBase_CreateWeaponGroupData, MaxToReturn) == 0x000000, "Member 'AthenaProfileStatWidgetBase_CreateWeaponGroupData::MaxToReturn' has a wrong offset!");
static_assert(offsetof(AthenaProfileStatWidgetBase_CreateWeaponGroupData, bIncludeOtherCategory) == 0x000004, "Member 'AthenaProfileStatWidgetBase_CreateWeaponGroupData::bIncludeOtherCategory' has a wrong offset!");
static_assert(offsetof(AthenaProfileStatWidgetBase_CreateWeaponGroupData, bPercentages) == 0x000005, "Member 'AthenaProfileStatWidgetBase_CreateWeaponGroupData::bPercentages' has a wrong offset!");
static_assert(offsetof(AthenaProfileStatWidgetBase_CreateWeaponGroupData, ReturnValue) == 0x000008, "Member 'AthenaProfileStatWidgetBase_CreateWeaponGroupData::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatWidgetBase.HandleStatViewChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaProfileStatWidgetBase_HandleStatViewChanged final
{
public:
	class UAthenaBaseStatView*                    StatView;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatWidgetBase_HandleStatViewChanged) == 0x000008, "Wrong alignment on AthenaProfileStatWidgetBase_HandleStatViewChanged");
static_assert(sizeof(AthenaProfileStatWidgetBase_HandleStatViewChanged) == 0x000008, "Wrong size on AthenaProfileStatWidgetBase_HandleStatViewChanged");
static_assert(offsetof(AthenaProfileStatWidgetBase_HandleStatViewChanged, StatView) == 0x000000, "Member 'AthenaProfileStatWidgetBase_HandleStatViewChanged::StatView' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatWidgetBase.SetAsStat
// 0x0008 (0x0008 - 0x0000)
struct AthenaProfileStatWidgetBase_SetAsStat final
{
public:
	struct FGameplayTag                           InStat;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaProfileStatWidgetBase_SetAsStat) == 0x000004, "Wrong alignment on AthenaProfileStatWidgetBase_SetAsStat");
static_assert(sizeof(AthenaProfileStatWidgetBase_SetAsStat) == 0x000008, "Wrong size on AthenaProfileStatWidgetBase_SetAsStat");
static_assert(offsetof(AthenaProfileStatWidgetBase_SetAsStat, InStat) == 0x000000, "Member 'AthenaProfileStatWidgetBase_SetAsStat::InStat' has a wrong offset!");

// Function FortniteUI.AthenaProfileStatWidgetBase.SetStatView
// 0x0010 (0x0010 - 0x0000)
struct AthenaProfileStatWidgetBase_SetStatView final
{
public:
	class UAthenaBaseStatView*                    InStatView;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RespectParentStatView;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaProfileStatWidgetBase_SetStatView) == 0x000008, "Wrong alignment on AthenaProfileStatWidgetBase_SetStatView");
static_assert(sizeof(AthenaProfileStatWidgetBase_SetStatView) == 0x000010, "Wrong size on AthenaProfileStatWidgetBase_SetStatView");
static_assert(offsetof(AthenaProfileStatWidgetBase_SetStatView, InStatView) == 0x000000, "Member 'AthenaProfileStatWidgetBase_SetStatView::InStatView' has a wrong offset!");
static_assert(offsetof(AthenaProfileStatWidgetBase_SetStatView, RespectParentStatView) == 0x000008, "Member 'AthenaProfileStatWidgetBase_SetStatView::RespectParentStatView' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutGadgetTileBase.OnGadgetUpdated
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutGadgetTileBase_OnGadgetUpdated final
{
public:
	bool                                          bIsValidGadget;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutGadgetTileBase_OnGadgetUpdated) == 0x000001, "Wrong alignment on FortHeroLoadoutGadgetTileBase_OnGadgetUpdated");
static_assert(sizeof(FortHeroLoadoutGadgetTileBase_OnGadgetUpdated) == 0x000001, "Wrong size on FortHeroLoadoutGadgetTileBase_OnGadgetUpdated");
static_assert(offsetof(FortHeroLoadoutGadgetTileBase_OnGadgetUpdated, bIsValidGadget) == 0x000000, "Member 'FortHeroLoadoutGadgetTileBase_OnGadgetUpdated::bIsValidGadget' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutGadgetTileBase.SetGadgetToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent final
{
public:
	const class UFortGadgetItemDefinition*        GadgetItemDefinition;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent) == 0x000008, "Wrong alignment on FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent");
static_assert(sizeof(FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent) == 0x000008, "Wrong size on FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent");
static_assert(offsetof(FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent, GadgetItemDefinition) == 0x000000, "Member 'FortHeroLoadoutGadgetTileBase_SetGadgetToRepresent::GadgetItemDefinition' has a wrong offset!");

// Function FortniteUI.AthenaQuickBarNativeCell.DesiredSizeOverride
// 0x0008 (0x0008 - 0x0000)
struct AthenaQuickBarNativeCell_DesiredSizeOverride final
{
public:
	float                                         WidthOverride;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOverride;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaQuickBarNativeCell_DesiredSizeOverride) == 0x000004, "Wrong alignment on AthenaQuickBarNativeCell_DesiredSizeOverride");
static_assert(sizeof(AthenaQuickBarNativeCell_DesiredSizeOverride) == 0x000008, "Wrong size on AthenaQuickBarNativeCell_DesiredSizeOverride");
static_assert(offsetof(AthenaQuickBarNativeCell_DesiredSizeOverride, WidthOverride) == 0x000000, "Member 'AthenaQuickBarNativeCell_DesiredSizeOverride::WidthOverride' has a wrong offset!");
static_assert(offsetof(AthenaQuickBarNativeCell_DesiredSizeOverride, HeightOverride) == 0x000004, "Member 'AthenaQuickBarNativeCell_DesiredSizeOverride::HeightOverride' has a wrong offset!");

// Function FortniteUI.AthenaQuickBarNativeCell.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct AthenaQuickBarNativeCell_SetIsSelected final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaQuickBarNativeCell_SetIsSelected) == 0x000001, "Wrong alignment on AthenaQuickBarNativeCell_SetIsSelected");
static_assert(sizeof(AthenaQuickBarNativeCell_SetIsSelected) == 0x000001, "Wrong size on AthenaQuickBarNativeCell_SetIsSelected");
static_assert(offsetof(AthenaQuickBarNativeCell_SetIsSelected, bInSelected) == 0x000000, "Member 'AthenaQuickBarNativeCell_SetIsSelected::bInSelected' has a wrong offset!");

// Function FortniteUI.AthenaQuickBarNativeCell.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct AthenaQuickBarNativeCell_SetItemToRepresent final
{
public:
	class UFortItem*                              InItemToRepresent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaQuickBarNativeCell_SetItemToRepresent) == 0x000008, "Wrong alignment on AthenaQuickBarNativeCell_SetItemToRepresent");
static_assert(sizeof(AthenaQuickBarNativeCell_SetItemToRepresent) == 0x000008, "Wrong size on AthenaQuickBarNativeCell_SetItemToRepresent");
static_assert(offsetof(AthenaQuickBarNativeCell_SetItemToRepresent, InItemToRepresent) == 0x000000, "Member 'AthenaQuickBarNativeCell_SetItemToRepresent::InItemToRepresent' has a wrong offset!");

// Function FortniteUI.AthenaRebootChipDirective.SetViewModel
// 0x0008 (0x0008 - 0x0000)
struct AthenaRebootChipDirective_SetViewModel final
{
public:
	class UAthenaPlayerViewModel*                 InPlayerVM;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRebootChipDirective_SetViewModel) == 0x000008, "Wrong alignment on AthenaRebootChipDirective_SetViewModel");
static_assert(sizeof(AthenaRebootChipDirective_SetViewModel) == 0x000008, "Wrong size on AthenaRebootChipDirective_SetViewModel");
static_assert(offsetof(AthenaRebootChipDirective_SetViewModel, InPlayerVM) == 0x000000, "Member 'AthenaRebootChipDirective_SetViewModel::InPlayerVM' has a wrong offset!");

// Function FortniteUI.AthenaRebootChipDirective.UpdateSquadListDisplay
// 0x0010 (0x0010 - 0x0000)
struct AthenaRebootChipDirective_UpdateSquadListDisplay final
{
public:
	EAthenaSquadListUpdateType                    UpdateType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 PS;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRebootChipDirective_UpdateSquadListDisplay) == 0x000008, "Wrong alignment on AthenaRebootChipDirective_UpdateSquadListDisplay");
static_assert(sizeof(AthenaRebootChipDirective_UpdateSquadListDisplay) == 0x000010, "Wrong size on AthenaRebootChipDirective_UpdateSquadListDisplay");
static_assert(offsetof(AthenaRebootChipDirective_UpdateSquadListDisplay, UpdateType) == 0x000000, "Member 'AthenaRebootChipDirective_UpdateSquadListDisplay::UpdateType' has a wrong offset!");
static_assert(offsetof(AthenaRebootChipDirective_UpdateSquadListDisplay, PS) == 0x000008, "Member 'AthenaRebootChipDirective_UpdateSquadListDisplay::PS' has a wrong offset!");

// Function FortniteUI.FortItemWidget_NUI.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortItemWidget_NUI_SetItemToRepresent final
{
public:
	const class UFortItem*                        Param_ItemToRepresent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_NUI_SetItemToRepresent) == 0x000008, "Wrong alignment on FortItemWidget_NUI_SetItemToRepresent");
static_assert(sizeof(FortItemWidget_NUI_SetItemToRepresent) == 0x000008, "Wrong size on FortItemWidget_NUI_SetItemToRepresent");
static_assert(offsetof(FortItemWidget_NUI_SetItemToRepresent, Param_ItemToRepresent) == 0x000000, "Member 'FortItemWidget_NUI_SetItemToRepresent::Param_ItemToRepresent' has a wrong offset!");

// Function FortniteUI.FortItemWidget_NUI.SetItemViewContext
// 0x0010 (0x0010 - 0x0000)
struct FortItemWidget_NUI_SetItemViewContext final
{
public:
	TScriptInterface<class IFortItemViewContextInterface> Param_ItemViewContext;                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_NUI_SetItemViewContext) == 0x000008, "Wrong alignment on FortItemWidget_NUI_SetItemViewContext");
static_assert(sizeof(FortItemWidget_NUI_SetItemViewContext) == 0x000010, "Wrong size on FortItemWidget_NUI_SetItemViewContext");
static_assert(offsetof(FortItemWidget_NUI_SetItemViewContext, Param_ItemViewContext) == 0x000000, "Member 'FortItemWidget_NUI_SetItemViewContext::Param_ItemViewContext' has a wrong offset!");

// Function FortniteUI.FortItemCardBase.PortBrushSize
// 0x0002 (0x0002 - 0x0000)
struct FortItemCardBase_PortBrushSize final
{
public:
	EFortBrushSize                                BrushSize;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemCardSize                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCardBase_PortBrushSize) == 0x000001, "Wrong alignment on FortItemCardBase_PortBrushSize");
static_assert(sizeof(FortItemCardBase_PortBrushSize) == 0x000002, "Wrong size on FortItemCardBase_PortBrushSize");
static_assert(offsetof(FortItemCardBase_PortBrushSize, BrushSize) == 0x000000, "Member 'FortItemCardBase_PortBrushSize::BrushSize' has a wrong offset!");
static_assert(offsetof(FortItemCardBase_PortBrushSize, ReturnValue) == 0x000001, "Member 'FortItemCardBase_PortBrushSize::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSeasonPassLevelInfo.ContainsChaseReward
// 0x0002 (0x0002 - 0x0000)
struct FortSeasonPassLevelInfo_ContainsChaseReward final
{
public:
	EAthenaSeasonRewardTrack                      Track;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSeasonPassLevelInfo_ContainsChaseReward) == 0x000001, "Wrong alignment on FortSeasonPassLevelInfo_ContainsChaseReward");
static_assert(sizeof(FortSeasonPassLevelInfo_ContainsChaseReward) == 0x000002, "Wrong size on FortSeasonPassLevelInfo_ContainsChaseReward");
static_assert(offsetof(FortSeasonPassLevelInfo_ContainsChaseReward, Track) == 0x000000, "Member 'FortSeasonPassLevelInfo_ContainsChaseReward::Track' has a wrong offset!");
static_assert(offsetof(FortSeasonPassLevelInfo_ContainsChaseReward, ReturnValue) == 0x000001, "Member 'FortSeasonPassLevelInfo_ContainsChaseReward::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSeasonPassLevelInfo.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct FortSeasonPassLevelInfo_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSeasonPassLevelInfo_GetLevel) == 0x000004, "Wrong alignment on FortSeasonPassLevelInfo_GetLevel");
static_assert(sizeof(FortSeasonPassLevelInfo_GetLevel) == 0x000004, "Wrong size on FortSeasonPassLevelInfo_GetLevel");
static_assert(offsetof(FortSeasonPassLevelInfo_GetLevel, ReturnValue) == 0x000000, "Member 'FortSeasonPassLevelInfo_GetLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSeasonPassLevelInfo.GetLevelProgress
// 0x0004 (0x0004 - 0x0000)
struct FortSeasonPassLevelInfo_GetLevelProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSeasonPassLevelInfo_GetLevelProgress) == 0x000004, "Wrong alignment on FortSeasonPassLevelInfo_GetLevelProgress");
static_assert(sizeof(FortSeasonPassLevelInfo_GetLevelProgress) == 0x000004, "Wrong size on FortSeasonPassLevelInfo_GetLevelProgress");
static_assert(offsetof(FortSeasonPassLevelInfo_GetLevelProgress, ReturnValue) == 0x000000, "Member 'FortSeasonPassLevelInfo_GetLevelProgress::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSeasonPassLevelInfo.GetNumRewardItems
// 0x0008 (0x0008 - 0x0000)
struct FortSeasonPassLevelInfo_GetNumRewardItems final
{
public:
	EAthenaSeasonRewardTrack                      Track;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSeasonPassLevelInfo_GetNumRewardItems) == 0x000004, "Wrong alignment on FortSeasonPassLevelInfo_GetNumRewardItems");
static_assert(sizeof(FortSeasonPassLevelInfo_GetNumRewardItems) == 0x000008, "Wrong size on FortSeasonPassLevelInfo_GetNumRewardItems");
static_assert(offsetof(FortSeasonPassLevelInfo_GetNumRewardItems, Track) == 0x000000, "Member 'FortSeasonPassLevelInfo_GetNumRewardItems::Track' has a wrong offset!");
static_assert(offsetof(FortSeasonPassLevelInfo_GetNumRewardItems, ReturnValue) == 0x000004, "Member 'FortSeasonPassLevelInfo_GetNumRewardItems::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSeasonPassLevelInfo.GetRewardItems
// 0x0018 (0x0018 - 0x0000)
struct FortSeasonPassLevelInfo_GetRewardItems final
{
public:
	EAthenaSeasonRewardTrack                      Track;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSeasonPassLevelInfo_GetRewardItems) == 0x000008, "Wrong alignment on FortSeasonPassLevelInfo_GetRewardItems");
static_assert(sizeof(FortSeasonPassLevelInfo_GetRewardItems) == 0x000018, "Wrong size on FortSeasonPassLevelInfo_GetRewardItems");
static_assert(offsetof(FortSeasonPassLevelInfo_GetRewardItems, Track) == 0x000000, "Member 'FortSeasonPassLevelInfo_GetRewardItems::Track' has a wrong offset!");
static_assert(offsetof(FortSeasonPassLevelInfo_GetRewardItems, ReturnValue) == 0x000008, "Member 'FortSeasonPassLevelInfo_GetRewardItems::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSeasonPassLevelInfo.GetSeasonPassMaxLevel
// 0x0004 (0x0004 - 0x0000)
struct FortSeasonPassLevelInfo_GetSeasonPassMaxLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSeasonPassLevelInfo_GetSeasonPassMaxLevel) == 0x000004, "Wrong alignment on FortSeasonPassLevelInfo_GetSeasonPassMaxLevel");
static_assert(sizeof(FortSeasonPassLevelInfo_GetSeasonPassMaxLevel) == 0x000004, "Wrong size on FortSeasonPassLevelInfo_GetSeasonPassMaxLevel");
static_assert(offsetof(FortSeasonPassLevelInfo_GetSeasonPassMaxLevel, ReturnValue) == 0x000000, "Member 'FortSeasonPassLevelInfo_GetSeasonPassMaxLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSeasonPassLevelInfo.IsFreeClaimed
// 0x0001 (0x0001 - 0x0000)
struct FortSeasonPassLevelInfo_IsFreeClaimed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSeasonPassLevelInfo_IsFreeClaimed) == 0x000001, "Wrong alignment on FortSeasonPassLevelInfo_IsFreeClaimed");
static_assert(sizeof(FortSeasonPassLevelInfo_IsFreeClaimed) == 0x000001, "Wrong size on FortSeasonPassLevelInfo_IsFreeClaimed");
static_assert(offsetof(FortSeasonPassLevelInfo_IsFreeClaimed, ReturnValue) == 0x000000, "Member 'FortSeasonPassLevelInfo_IsFreeClaimed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSeasonPassLevelInfo.IsFreeUnlocked
// 0x0001 (0x0001 - 0x0000)
struct FortSeasonPassLevelInfo_IsFreeUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSeasonPassLevelInfo_IsFreeUnlocked) == 0x000001, "Wrong alignment on FortSeasonPassLevelInfo_IsFreeUnlocked");
static_assert(sizeof(FortSeasonPassLevelInfo_IsFreeUnlocked) == 0x000001, "Wrong size on FortSeasonPassLevelInfo_IsFreeUnlocked");
static_assert(offsetof(FortSeasonPassLevelInfo_IsFreeUnlocked, ReturnValue) == 0x000000, "Member 'FortSeasonPassLevelInfo_IsFreeUnlocked::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSeasonPassLevelInfo.IsPaidClaimed
// 0x0001 (0x0001 - 0x0000)
struct FortSeasonPassLevelInfo_IsPaidClaimed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSeasonPassLevelInfo_IsPaidClaimed) == 0x000001, "Wrong alignment on FortSeasonPassLevelInfo_IsPaidClaimed");
static_assert(sizeof(FortSeasonPassLevelInfo_IsPaidClaimed) == 0x000001, "Wrong size on FortSeasonPassLevelInfo_IsPaidClaimed");
static_assert(offsetof(FortSeasonPassLevelInfo_IsPaidClaimed, ReturnValue) == 0x000000, "Member 'FortSeasonPassLevelInfo_IsPaidClaimed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSeasonPassLevelInfo.IsPaidUnlocked
// 0x0001 (0x0001 - 0x0000)
struct FortSeasonPassLevelInfo_IsPaidUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSeasonPassLevelInfo_IsPaidUnlocked) == 0x000001, "Wrong alignment on FortSeasonPassLevelInfo_IsPaidUnlocked");
static_assert(sizeof(FortSeasonPassLevelInfo_IsPaidUnlocked) == 0x000001, "Wrong size on FortSeasonPassLevelInfo_IsPaidUnlocked");
static_assert(offsetof(FortSeasonPassLevelInfo_IsPaidUnlocked, ReturnValue) == 0x000000, "Member 'FortSeasonPassLevelInfo_IsPaidUnlocked::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemotePlayerViewData.BoolDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_BoolDelegate__DelegateSignature final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolParam;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemotePlayerViewData_BoolDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_BoolDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemotePlayerViewData_BoolDelegate__DelegateSignature) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_BoolDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemotePlayerViewData_BoolDelegate__DelegateSignature, PlayerData) == 0x000000, "Member 'AthenaRemotePlayerViewData_BoolDelegate__DelegateSignature::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_BoolDelegate__DelegateSignature, BoolParam) == 0x000008, "Member 'AthenaRemotePlayerViewData_BoolDelegate__DelegateSignature::BoolParam' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemotePlayerViewData.FloatDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_FloatDelegate__DelegateSignature final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatParam;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemotePlayerViewData_FloatDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_FloatDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemotePlayerViewData_FloatDelegate__DelegateSignature) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_FloatDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemotePlayerViewData_FloatDelegate__DelegateSignature, PlayerData) == 0x000000, "Member 'AthenaRemotePlayerViewData_FloatDelegate__DelegateSignature::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_FloatDelegate__DelegateSignature, FloatParam) == 0x000008, "Member 'AthenaRemotePlayerViewData_FloatDelegate__DelegateSignature::FloatParam' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnBeingRevivedStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnBeingRevivedStateChanged final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsBeingRevived;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnBeingRevivedStateChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnBeingRevivedStateChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnBeingRevivedStateChanged) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_ForwardOnBeingRevivedStateChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnBeingRevivedStateChanged, InPlayerState) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnBeingRevivedStateChanged::InPlayerState' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnBeingRevivedStateChanged, bInIsBeingRevived) == 0x000008, "Member 'AthenaRemotePlayerViewData_ForwardOnBeingRevivedStateChanged::bInIsBeingRevived' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnDBNOStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnDBNOStateChanged final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDBNO;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnDBNOStateChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnDBNOStateChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnDBNOStateChanged) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_ForwardOnDBNOStateChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnDBNOStateChanged, InPlayerState) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnDBNOStateChanged::InPlayerState' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnDBNOStateChanged, bInIsDBNO) == 0x000008, "Member 'AthenaRemotePlayerViewData_ForwardOnDBNOStateChanged::bInIsDBNO' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnDeadStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnDeadStateChanged final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDead;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnDeadStateChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnDeadStateChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnDeadStateChanged) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_ForwardOnDeadStateChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnDeadStateChanged, InPlayerState) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnDeadStateChanged::InPlayerState' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnDeadStateChanged, bInIsDead) == 0x000008, "Member 'AthenaRemotePlayerViewData_ForwardOnDeadStateChanged::bInIsDead' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnDisconnectedChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnDisconnectedChanged final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDisconnected;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnDisconnectedChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnDisconnectedChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnDisconnectedChanged) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_ForwardOnDisconnectedChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnDisconnectedChanged, InPlayerState) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnDisconnectedChanged::InPlayerState' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnDisconnectedChanged, bInIsDisconnected) == 0x000008, "Member 'AthenaRemotePlayerViewData_ForwardOnDisconnectedChanged::bInIsDisconnected' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnHitPointsStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnHitPointsStateChanged final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHealthPercent;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InShieldPercent;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnHitPointsStateChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnHitPointsStateChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnHitPointsStateChanged) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_ForwardOnHitPointsStateChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnHitPointsStateChanged, InPlayerState) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnHitPointsStateChanged::InPlayerState' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnHitPointsStateChanged, InHealthPercent) == 0x000008, "Member 'AthenaRemotePlayerViewData_ForwardOnHitPointsStateChanged::InHealthPercent' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnHitPointsStateChanged, InShieldPercent) == 0x00000C, "Member 'AthenaRemotePlayerViewData_ForwardOnHitPointsStateChanged::InShieldPercent' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnKillScoreChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnKillScoreChanged final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InKillScore;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnKillScoreChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnKillScoreChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnKillScoreChanged) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_ForwardOnKillScoreChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnKillScoreChanged, InPlayerState) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnKillScoreChanged::InPlayerState' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnKillScoreChanged, InKillScore) == 0x000008, "Member 'AthenaRemotePlayerViewData_ForwardOnKillScoreChanged::InKillScore' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnLocationChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnLocationChanged final
{
public:
	class FString                                 InLocation;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnLocationChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnLocationChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnLocationChanged) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_ForwardOnLocationChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnLocationChanged, InLocation) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnLocationChanged::InLocation' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnPlaceChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnPlaceChanged final
{
public:
	class AFortPlayerStateAthena*                 Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPlace;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnPlaceChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnPlaceChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnPlaceChanged) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_ForwardOnPlaceChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnPlaceChanged, Sender) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnPlaceChanged::Sender' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnPlaceChanged, InPlace) == 0x000008, "Member 'AthenaRemotePlayerViewData_ForwardOnPlaceChanged::InPlace' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnPlayerNameChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnPlayerNameChanged final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlayerName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnPlayerNameChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnPlayerNameChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnPlayerNameChanged) == 0x000018, "Wrong size on AthenaRemotePlayerViewData_ForwardOnPlayerNameChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnPlayerNameChanged, InPlayerState) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnPlayerNameChanged::InPlayerState' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnPlayerNameChanged, InPlayerName) == 0x000008, "Member 'AthenaRemotePlayerViewData_ForwardOnPlayerNameChanged::InPlayerName' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnSquadIdChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnSquadIdChanged final
{
public:
	uint8                                         InSquadId;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnSquadIdChanged) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnSquadIdChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnSquadIdChanged) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_ForwardOnSquadIdChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnSquadIdChanged, InSquadId) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnSquadIdChanged::InSquadId' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnVehicleStateChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnVehicleStateChanged final
{
public:
	class AFortPlayerPawn*                        InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InNewVehicle;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOldVehicle;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnVehicleStateChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnVehicleStateChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnVehicleStateChanged) == 0x000018, "Wrong size on AthenaRemotePlayerViewData_ForwardOnVehicleStateChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnVehicleStateChanged, InPawn) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnVehicleStateChanged::InPawn' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnVehicleStateChanged, InNewVehicle) == 0x000008, "Member 'AthenaRemotePlayerViewData_ForwardOnVehicleStateChanged::InNewVehicle' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnVehicleStateChanged, InOldVehicle) == 0x000010, "Member 'AthenaRemotePlayerViewData_ForwardOnVehicleStateChanged::InOldVehicle' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.ForwardOnWeaponChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_ForwardOnWeaponChanged final
{
public:
	class AFortWeapon*                            InNewWeapon;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            InPrevWeapon;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_ForwardOnWeaponChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_ForwardOnWeaponChanged");
static_assert(sizeof(AthenaRemotePlayerViewData_ForwardOnWeaponChanged) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_ForwardOnWeaponChanged");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnWeaponChanged, InNewWeapon) == 0x000000, "Member 'AthenaRemotePlayerViewData_ForwardOnWeaponChanged::InNewWeapon' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_ForwardOnWeaponChanged, InPrevWeapon) == 0x000008, "Member 'AthenaRemotePlayerViewData_ForwardOnWeaponChanged::InPrevWeapon' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemotePlayerViewData.IntDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_IntDelegate__DelegateSignature final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntParam;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemotePlayerViewData_IntDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_IntDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemotePlayerViewData_IntDelegate__DelegateSignature) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_IntDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemotePlayerViewData_IntDelegate__DelegateSignature, PlayerData) == 0x000000, "Member 'AthenaRemotePlayerViewData_IntDelegate__DelegateSignature::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_IntDelegate__DelegateSignature, IntParam) == 0x000008, "Member 'AthenaRemotePlayerViewData_IntDelegate__DelegateSignature::IntParam' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemotePlayerViewData.LinearColorDelegate__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct AthenaRemotePlayerViewData_LinearColorDelegate__DelegateSignature final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_LinearColorDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_LinearColorDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemotePlayerViewData_LinearColorDelegate__DelegateSignature) == 0x000018, "Wrong size on AthenaRemotePlayerViewData_LinearColorDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemotePlayerViewData_LinearColorDelegate__DelegateSignature, PlayerData) == 0x000000, "Member 'AthenaRemotePlayerViewData_LinearColorDelegate__DelegateSignature::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_LinearColorDelegate__DelegateSignature, ColorParam) == 0x000008, "Member 'AthenaRemotePlayerViewData_LinearColorDelegate__DelegateSignature::ColorParam' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemotePlayerViewData.PawnDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_PawnDelegate__DelegateSignature final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        PawnParam;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_PawnDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_PawnDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemotePlayerViewData_PawnDelegate__DelegateSignature) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_PawnDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemotePlayerViewData_PawnDelegate__DelegateSignature, PlayerData) == 0x000000, "Member 'AthenaRemotePlayerViewData_PawnDelegate__DelegateSignature::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_PawnDelegate__DelegateSignature, PawnParam) == 0x000008, "Member 'AthenaRemotePlayerViewData_PawnDelegate__DelegateSignature::PawnParam' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemotePlayerViewData.PlayerStateDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_PlayerStateDelegate__DelegateSignature final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerStateAthena*                 Param_PlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_PlayerStateDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_PlayerStateDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemotePlayerViewData_PlayerStateDelegate__DelegateSignature) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_PlayerStateDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemotePlayerViewData_PlayerStateDelegate__DelegateSignature, PlayerData) == 0x000000, "Member 'AthenaRemotePlayerViewData_PlayerStateDelegate__DelegateSignature::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_PlayerStateDelegate__DelegateSignature, Param_PlayerState) == 0x000008, "Member 'AthenaRemotePlayerViewData_PlayerStateDelegate__DelegateSignature::Param_PlayerState' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.SetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct AthenaRemotePlayerViewData_SetPlayerState final
{
public:
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_SetPlayerState) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_SetPlayerState");
static_assert(sizeof(AthenaRemotePlayerViewData_SetPlayerState) == 0x000008, "Wrong size on AthenaRemotePlayerViewData_SetPlayerState");
static_assert(offsetof(AthenaRemotePlayerViewData_SetPlayerState, InPlayerState) == 0x000000, "Member 'AthenaRemotePlayerViewData_SetPlayerState::InPlayerState' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemotePlayerViewData.StringDelegate__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct AthenaRemotePlayerViewData_StringDelegate__DelegateSignature final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringParam;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_StringDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_StringDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemotePlayerViewData_StringDelegate__DelegateSignature) == 0x000018, "Wrong size on AthenaRemotePlayerViewData_StringDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemotePlayerViewData_StringDelegate__DelegateSignature, PlayerData) == 0x000000, "Member 'AthenaRemotePlayerViewData_StringDelegate__DelegateSignature::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_StringDelegate__DelegateSignature, StringParam) == 0x000008, "Member 'AthenaRemotePlayerViewData_StringDelegate__DelegateSignature::StringParam' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemotePlayerViewData.UInt8Delegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_UInt8Delegate__DelegateSignature final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IntParam;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemotePlayerViewData_UInt8Delegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_UInt8Delegate__DelegateSignature");
static_assert(sizeof(AthenaRemotePlayerViewData_UInt8Delegate__DelegateSignature) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_UInt8Delegate__DelegateSignature");
static_assert(offsetof(AthenaRemotePlayerViewData_UInt8Delegate__DelegateSignature, PlayerData) == 0x000000, "Member 'AthenaRemotePlayerViewData_UInt8Delegate__DelegateSignature::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_UInt8Delegate__DelegateSignature, IntParam) == 0x000008, "Member 'AthenaRemotePlayerViewData_UInt8Delegate__DelegateSignature::IntParam' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemotePlayerViewData.VehicleDelegate__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct AthenaRemotePlayerViewData_VehicleDelegate__DelegateSignature final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 VehicleParam1;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 VehicleParam2;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_VehicleDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_VehicleDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemotePlayerViewData_VehicleDelegate__DelegateSignature) == 0x000018, "Wrong size on AthenaRemotePlayerViewData_VehicleDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemotePlayerViewData_VehicleDelegate__DelegateSignature, PlayerData) == 0x000000, "Member 'AthenaRemotePlayerViewData_VehicleDelegate__DelegateSignature::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_VehicleDelegate__DelegateSignature, VehicleParam1) == 0x000008, "Member 'AthenaRemotePlayerViewData_VehicleDelegate__DelegateSignature::VehicleParam1' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_VehicleDelegate__DelegateSignature, VehicleParam2) == 0x000010, "Member 'AthenaRemotePlayerViewData_VehicleDelegate__DelegateSignature::VehicleParam2' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemotePlayerViewData.WeaponDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_WeaponDelegate__DelegateSignature final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            WeaponParam;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_WeaponDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_WeaponDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemotePlayerViewData_WeaponDelegate__DelegateSignature) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_WeaponDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemotePlayerViewData_WeaponDelegate__DelegateSignature, PlayerData) == 0x000000, "Member 'AthenaRemotePlayerViewData_WeaponDelegate__DelegateSignature::PlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewData_WeaponDelegate__DelegateSignature, WeaponParam) == 0x000008, "Member 'AthenaRemotePlayerViewData_WeaponDelegate__DelegateSignature::WeaponParam' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetCurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct AthenaRemotePlayerViewData_GetCurrentWeapon final
{
public:
	class AFortWeapon*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetCurrentWeapon) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_GetCurrentWeapon");
static_assert(sizeof(AthenaRemotePlayerViewData_GetCurrentWeapon) == 0x000008, "Wrong size on AthenaRemotePlayerViewData_GetCurrentWeapon");
static_assert(offsetof(AthenaRemotePlayerViewData_GetCurrentWeapon, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetCurrentWeapon::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetDistanceToStorm
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemotePlayerViewData_GetDistanceToStorm final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetDistanceToStorm) == 0x000004, "Wrong alignment on AthenaRemotePlayerViewData_GetDistanceToStorm");
static_assert(sizeof(AthenaRemotePlayerViewData_GetDistanceToStorm) == 0x000004, "Wrong size on AthenaRemotePlayerViewData_GetDistanceToStorm");
static_assert(offsetof(AthenaRemotePlayerViewData_GetDistanceToStorm, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetDistanceToStorm::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemotePlayerViewData_GetHealthPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetHealthPercent) == 0x000004, "Wrong alignment on AthenaRemotePlayerViewData_GetHealthPercent");
static_assert(sizeof(AthenaRemotePlayerViewData_GetHealthPercent) == 0x000004, "Wrong size on AthenaRemotePlayerViewData_GetHealthPercent");
static_assert(offsetof(AthenaRemotePlayerViewData_GetHealthPercent, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetHealthPercent::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetInAircraft
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_GetInAircraft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetInAircraft) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_GetInAircraft");
static_assert(sizeof(AthenaRemotePlayerViewData_GetInAircraft) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_GetInAircraft");
static_assert(offsetof(AthenaRemotePlayerViewData_GetInAircraft, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetInAircraft::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetIsBeingRevived
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_GetIsBeingRevived final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetIsBeingRevived) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_GetIsBeingRevived");
static_assert(sizeof(AthenaRemotePlayerViewData_GetIsBeingRevived) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_GetIsBeingRevived");
static_assert(offsetof(AthenaRemotePlayerViewData_GetIsBeingRevived, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetIsBeingRevived::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetIsDBNO
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_GetIsDBNO final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetIsDBNO) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_GetIsDBNO");
static_assert(sizeof(AthenaRemotePlayerViewData_GetIsDBNO) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_GetIsDBNO");
static_assert(offsetof(AthenaRemotePlayerViewData_GetIsDBNO, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetIsDBNO::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetIsDead
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_GetIsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetIsDead) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_GetIsDead");
static_assert(sizeof(AthenaRemotePlayerViewData_GetIsDead) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_GetIsDead");
static_assert(offsetof(AthenaRemotePlayerViewData_GetIsDead, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetIsDead::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetIsDisconnected
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_GetIsDisconnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetIsDisconnected) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_GetIsDisconnected");
static_assert(sizeof(AthenaRemotePlayerViewData_GetIsDisconnected) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_GetIsDisconnected");
static_assert(offsetof(AthenaRemotePlayerViewData_GetIsDisconnected, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetIsDisconnected::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetIsDrivingVehicle
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_GetIsDrivingVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetIsDrivingVehicle) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_GetIsDrivingVehicle");
static_assert(sizeof(AthenaRemotePlayerViewData_GetIsDrivingVehicle) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_GetIsDrivingVehicle");
static_assert(offsetof(AthenaRemotePlayerViewData_GetIsDrivingVehicle, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetIsDrivingVehicle::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetIsEliminated
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_GetIsEliminated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetIsEliminated) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_GetIsEliminated");
static_assert(sizeof(AthenaRemotePlayerViewData_GetIsEliminated) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_GetIsEliminated");
static_assert(offsetof(AthenaRemotePlayerViewData_GetIsEliminated, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetIsEliminated::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetIsFollowedPlayer
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_GetIsFollowedPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetIsFollowedPlayer) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_GetIsFollowedPlayer");
static_assert(sizeof(AthenaRemotePlayerViewData_GetIsFollowedPlayer) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_GetIsFollowedPlayer");
static_assert(offsetof(AthenaRemotePlayerViewData_GetIsFollowedPlayer, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetIsFollowedPlayer::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetIsInRelevancy
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_GetIsInRelevancy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetIsInRelevancy) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_GetIsInRelevancy");
static_assert(sizeof(AthenaRemotePlayerViewData_GetIsInRelevancy) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_GetIsInRelevancy");
static_assert(offsetof(AthenaRemotePlayerViewData_GetIsInRelevancy, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetIsInRelevancy::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetIsReplayRelevancyPlayer
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_GetIsReplayRelevancyPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetIsReplayRelevancyPlayer) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_GetIsReplayRelevancyPlayer");
static_assert(sizeof(AthenaRemotePlayerViewData_GetIsReplayRelevancyPlayer) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_GetIsReplayRelevancyPlayer");
static_assert(offsetof(AthenaRemotePlayerViewData_GetIsReplayRelevancyPlayer, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetIsReplayRelevancyPlayer::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetKillScore
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemotePlayerViewData_GetKillScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetKillScore) == 0x000004, "Wrong alignment on AthenaRemotePlayerViewData_GetKillScore");
static_assert(sizeof(AthenaRemotePlayerViewData_GetKillScore) == 0x000004, "Wrong size on AthenaRemotePlayerViewData_GetKillScore");
static_assert(offsetof(AthenaRemotePlayerViewData_GetKillScore, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetKillScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetLocation
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_GetLocation final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetLocation) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_GetLocation");
static_assert(sizeof(AthenaRemotePlayerViewData_GetLocation) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_GetLocation");
static_assert(offsetof(AthenaRemotePlayerViewData_GetLocation, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetLocation::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetMaterialCount
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemotePlayerViewData_GetMaterialCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetMaterialCount) == 0x000004, "Wrong alignment on AthenaRemotePlayerViewData_GetMaterialCount");
static_assert(sizeof(AthenaRemotePlayerViewData_GetMaterialCount) == 0x000004, "Wrong size on AthenaRemotePlayerViewData_GetMaterialCount");
static_assert(offsetof(AthenaRemotePlayerViewData_GetMaterialCount, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetMaterialCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetPlace
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemotePlayerViewData_GetPlace final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetPlace) == 0x000004, "Wrong alignment on AthenaRemotePlayerViewData_GetPlace");
static_assert(sizeof(AthenaRemotePlayerViewData_GetPlace) == 0x000004, "Wrong size on AthenaRemotePlayerViewData_GetPlace");
static_assert(offsetof(AthenaRemotePlayerViewData_GetPlace, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetPlace::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetPlayerName) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_GetPlayerName");
static_assert(sizeof(AthenaRemotePlayerViewData_GetPlayerName) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_GetPlayerName");
static_assert(offsetof(AthenaRemotePlayerViewData_GetPlayerName, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetPlayerName::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct AthenaRemotePlayerViewData_GetPlayerPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetPlayerPawn) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_GetPlayerPawn");
static_assert(sizeof(AthenaRemotePlayerViewData_GetPlayerPawn) == 0x000008, "Wrong size on AthenaRemotePlayerViewData_GetPlayerPawn");
static_assert(offsetof(AthenaRemotePlayerViewData_GetPlayerPawn, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct AthenaRemotePlayerViewData_GetPlayerState final
{
public:
	class AFortPlayerStateAthena*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetPlayerState) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_GetPlayerState");
static_assert(sizeof(AthenaRemotePlayerViewData_GetPlayerState) == 0x000008, "Wrong size on AthenaRemotePlayerViewData_GetPlayerState");
static_assert(offsetof(AthenaRemotePlayerViewData_GetPlayerState, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetPlayerState::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetPlayerUID
// 0x0028 (0x0028 - 0x0000)
struct AthenaRemotePlayerViewData_GetPlayerUID final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetPlayerUID) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_GetPlayerUID");
static_assert(sizeof(AthenaRemotePlayerViewData_GetPlayerUID) == 0x000028, "Wrong size on AthenaRemotePlayerViewData_GetPlayerUID");
static_assert(offsetof(AthenaRemotePlayerViewData_GetPlayerUID, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetPlayerUID::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetShieldPercent
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemotePlayerViewData_GetShieldPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetShieldPercent) == 0x000004, "Wrong alignment on AthenaRemotePlayerViewData_GetShieldPercent");
static_assert(sizeof(AthenaRemotePlayerViewData_GetShieldPercent) == 0x000004, "Wrong size on AthenaRemotePlayerViewData_GetShieldPercent");
static_assert(offsetof(AthenaRemotePlayerViewData_GetShieldPercent, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetShieldPercent::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetSquadId
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemotePlayerViewData_GetSquadId final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetSquadId) == 0x000001, "Wrong alignment on AthenaRemotePlayerViewData_GetSquadId");
static_assert(sizeof(AthenaRemotePlayerViewData_GetSquadId) == 0x000001, "Wrong size on AthenaRemotePlayerViewData_GetSquadId");
static_assert(offsetof(AthenaRemotePlayerViewData_GetSquadId, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetSquadId::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetTeamColor
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewData_GetTeamColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetTeamColor) == 0x000004, "Wrong alignment on AthenaRemotePlayerViewData_GetTeamColor");
static_assert(sizeof(AthenaRemotePlayerViewData_GetTeamColor) == 0x000010, "Wrong size on AthenaRemotePlayerViewData_GetTeamColor");
static_assert(offsetof(AthenaRemotePlayerViewData_GetTeamColor, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetTeamColor::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetVehicle
// 0x0008 (0x0008 - 0x0000)
struct AthenaRemotePlayerViewData_GetVehicle final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetVehicle) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewData_GetVehicle");
static_assert(sizeof(AthenaRemotePlayerViewData_GetVehicle) == 0x000008, "Wrong size on AthenaRemotePlayerViewData_GetVehicle");
static_assert(offsetof(AthenaRemotePlayerViewData_GetVehicle, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetVehicle::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetVehicleHealth
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemotePlayerViewData_GetVehicleHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetVehicleHealth) == 0x000004, "Wrong alignment on AthenaRemotePlayerViewData_GetVehicleHealth");
static_assert(sizeof(AthenaRemotePlayerViewData_GetVehicleHealth) == 0x000004, "Wrong size on AthenaRemotePlayerViewData_GetVehicleHealth");
static_assert(offsetof(AthenaRemotePlayerViewData_GetVehicleHealth, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetVehicleHealth::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetVehicleHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemotePlayerViewData_GetVehicleHealthPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetVehicleHealthPercent) == 0x000004, "Wrong alignment on AthenaRemotePlayerViewData_GetVehicleHealthPercent");
static_assert(sizeof(AthenaRemotePlayerViewData_GetVehicleHealthPercent) == 0x000004, "Wrong size on AthenaRemotePlayerViewData_GetVehicleHealthPercent");
static_assert(offsetof(AthenaRemotePlayerViewData_GetVehicleHealthPercent, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetVehicleHealthPercent::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewData.GetVehicleMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemotePlayerViewData_GetVehicleMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewData_GetVehicleMaxHealth) == 0x000004, "Wrong alignment on AthenaRemotePlayerViewData_GetVehicleMaxHealth");
static_assert(sizeof(AthenaRemotePlayerViewData_GetVehicleMaxHealth) == 0x000004, "Wrong size on AthenaRemotePlayerViewData_GetVehicleMaxHealth");
static_assert(offsetof(AthenaRemotePlayerViewData_GetVehicleMaxHealth, ReturnValue) == 0x000000, "Member 'AthenaRemotePlayerViewData_GetVehicleMaxHealth::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemotePlayerViewModel.OnFollowedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemotePlayerViewModel_OnFollowedPlayerChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatorPC;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       NewFollowedPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemotePlayerViewModel_OnFollowedPlayerChanged) == 0x000008, "Wrong alignment on AthenaRemotePlayerViewModel_OnFollowedPlayerChanged");
static_assert(sizeof(AthenaRemotePlayerViewModel_OnFollowedPlayerChanged) == 0x000010, "Wrong size on AthenaRemotePlayerViewModel_OnFollowedPlayerChanged");
static_assert(offsetof(AthenaRemotePlayerViewModel_OnFollowedPlayerChanged, SpectatorPC) == 0x000000, "Member 'AthenaRemotePlayerViewModel_OnFollowedPlayerChanged::SpectatorPC' has a wrong offset!");
static_assert(offsetof(AthenaRemotePlayerViewModel_OnFollowedPlayerChanged, NewFollowedPlayer) == 0x000008, "Member 'AthenaRemotePlayerViewModel_OnFollowedPlayerChanged::NewFollowedPlayer' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemoteSquadViewData.EventDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AthenaRemoteSquadViewData_EventDelegate__DelegateSignature final
{
public:
	class UAthenaRemoteSquadViewData*             SquadData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemoteSquadViewData_EventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemoteSquadViewData_EventDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemoteSquadViewData_EventDelegate__DelegateSignature) == 0x000008, "Wrong size on AthenaRemoteSquadViewData_EventDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemoteSquadViewData_EventDelegate__DelegateSignature, SquadData) == 0x000000, "Member 'AthenaRemoteSquadViewData_EventDelegate__DelegateSignature::SquadData' has a wrong offset!");

// Function FortniteUI.AthenaRemoteSquadViewData.HandlePlayerDeadStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemoteSquadViewData_HandlePlayerDeadStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEliminated;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemoteSquadViewData_HandlePlayerDeadStateChanged) == 0x000008, "Wrong alignment on AthenaRemoteSquadViewData_HandlePlayerDeadStateChanged");
static_assert(sizeof(AthenaRemoteSquadViewData_HandlePlayerDeadStateChanged) == 0x000010, "Wrong size on AthenaRemoteSquadViewData_HandlePlayerDeadStateChanged");
static_assert(offsetof(AthenaRemoteSquadViewData_HandlePlayerDeadStateChanged, InPlayerData) == 0x000000, "Member 'AthenaRemoteSquadViewData_HandlePlayerDeadStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemoteSquadViewData_HandlePlayerDeadStateChanged, InEliminated) == 0x000008, "Member 'AthenaRemoteSquadViewData_HandlePlayerDeadStateChanged::InEliminated' has a wrong offset!");

// Function FortniteUI.AthenaRemoteSquadViewData.HandlePlayerKillscoreChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemoteSquadViewData_HandlePlayerKillscoreChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InKillScore;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemoteSquadViewData_HandlePlayerKillscoreChanged) == 0x000008, "Wrong alignment on AthenaRemoteSquadViewData_HandlePlayerKillscoreChanged");
static_assert(sizeof(AthenaRemoteSquadViewData_HandlePlayerKillscoreChanged) == 0x000010, "Wrong size on AthenaRemoteSquadViewData_HandlePlayerKillscoreChanged");
static_assert(offsetof(AthenaRemoteSquadViewData_HandlePlayerKillscoreChanged, InPlayerData) == 0x000000, "Member 'AthenaRemoteSquadViewData_HandlePlayerKillscoreChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemoteSquadViewData_HandlePlayerKillscoreChanged, InKillScore) == 0x000008, "Member 'AthenaRemoteSquadViewData_HandlePlayerKillscoreChanged::InKillScore' has a wrong offset!");

// Function FortniteUI.AthenaRemoteSquadViewData.HandlePlayerPlaceChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemoteSquadViewData_HandlePlayerPlaceChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPlace;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemoteSquadViewData_HandlePlayerPlaceChanged) == 0x000008, "Wrong alignment on AthenaRemoteSquadViewData_HandlePlayerPlaceChanged");
static_assert(sizeof(AthenaRemoteSquadViewData_HandlePlayerPlaceChanged) == 0x000010, "Wrong size on AthenaRemoteSquadViewData_HandlePlayerPlaceChanged");
static_assert(offsetof(AthenaRemoteSquadViewData_HandlePlayerPlaceChanged, InPlayerData) == 0x000000, "Member 'AthenaRemoteSquadViewData_HandlePlayerPlaceChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaRemoteSquadViewData_HandlePlayerPlaceChanged, InPlace) == 0x000008, "Member 'AthenaRemoteSquadViewData_HandlePlayerPlaceChanged::InPlace' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemoteSquadViewData.IntDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemoteSquadViewData_IntDelegate__DelegateSignature final
{
public:
	class UAthenaRemoteSquadViewData*             SquadData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntParam;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemoteSquadViewData_IntDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemoteSquadViewData_IntDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemoteSquadViewData_IntDelegate__DelegateSignature) == 0x000010, "Wrong size on AthenaRemoteSquadViewData_IntDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemoteSquadViewData_IntDelegate__DelegateSignature, SquadData) == 0x000000, "Member 'AthenaRemoteSquadViewData_IntDelegate__DelegateSignature::SquadData' has a wrong offset!");
static_assert(offsetof(AthenaRemoteSquadViewData_IntDelegate__DelegateSignature, IntParam) == 0x000008, "Member 'AthenaRemoteSquadViewData_IntDelegate__DelegateSignature::IntParam' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemoteSquadViewData.LinearColorDelegate__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct AthenaRemoteSquadViewData_LinearColorDelegate__DelegateSignature final
{
public:
	class UAthenaRemoteSquadViewData*             SquadData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorParam;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemoteSquadViewData_LinearColorDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemoteSquadViewData_LinearColorDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemoteSquadViewData_LinearColorDelegate__DelegateSignature) == 0x000018, "Wrong size on AthenaRemoteSquadViewData_LinearColorDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemoteSquadViewData_LinearColorDelegate__DelegateSignature, SquadData) == 0x000000, "Member 'AthenaRemoteSquadViewData_LinearColorDelegate__DelegateSignature::SquadData' has a wrong offset!");
static_assert(offsetof(AthenaRemoteSquadViewData_LinearColorDelegate__DelegateSignature, ColorParam) == 0x000008, "Member 'AthenaRemoteSquadViewData_LinearColorDelegate__DelegateSignature::ColorParam' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemoteSquadViewData.PlayerDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemoteSquadViewData_PlayerDelegate__DelegateSignature final
{
public:
	class UAthenaRemoteSquadViewData*             SquadData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemoteSquadViewData_PlayerDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemoteSquadViewData_PlayerDelegate__DelegateSignature");
static_assert(sizeof(AthenaRemoteSquadViewData_PlayerDelegate__DelegateSignature) == 0x000010, "Wrong size on AthenaRemoteSquadViewData_PlayerDelegate__DelegateSignature");
static_assert(offsetof(AthenaRemoteSquadViewData_PlayerDelegate__DelegateSignature, SquadData) == 0x000000, "Member 'AthenaRemoteSquadViewData_PlayerDelegate__DelegateSignature::SquadData' has a wrong offset!");
static_assert(offsetof(AthenaRemoteSquadViewData_PlayerDelegate__DelegateSignature, PlayerData) == 0x000008, "Member 'AthenaRemoteSquadViewData_PlayerDelegate__DelegateSignature::PlayerData' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaRemoteSquadViewData.UInt8Delegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemoteSquadViewData_UInt8Delegate__DelegateSignature final
{
public:
	class UAthenaRemoteSquadViewData*             SquadData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IntParam;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaRemoteSquadViewData_UInt8Delegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaRemoteSquadViewData_UInt8Delegate__DelegateSignature");
static_assert(sizeof(AthenaRemoteSquadViewData_UInt8Delegate__DelegateSignature) == 0x000010, "Wrong size on AthenaRemoteSquadViewData_UInt8Delegate__DelegateSignature");
static_assert(offsetof(AthenaRemoteSquadViewData_UInt8Delegate__DelegateSignature, SquadData) == 0x000000, "Member 'AthenaRemoteSquadViewData_UInt8Delegate__DelegateSignature::SquadData' has a wrong offset!");
static_assert(offsetof(AthenaRemoteSquadViewData_UInt8Delegate__DelegateSignature, IntParam) == 0x000008, "Member 'AthenaRemoteSquadViewData_UInt8Delegate__DelegateSignature::IntParam' has a wrong offset!");

// Function FortniteUI.AthenaRemoteSquadViewData.GetBlockPartyTeamId
// 0x0008 (0x0008 - 0x0000)
struct AthenaRemoteSquadViewData_GetBlockPartyTeamId final
{
public:
	const class UFortBlockPartyTeamIdentification* ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemoteSquadViewData_GetBlockPartyTeamId) == 0x000008, "Wrong alignment on AthenaRemoteSquadViewData_GetBlockPartyTeamId");
static_assert(sizeof(AthenaRemoteSquadViewData_GetBlockPartyTeamId) == 0x000008, "Wrong size on AthenaRemoteSquadViewData_GetBlockPartyTeamId");
static_assert(offsetof(AthenaRemoteSquadViewData_GetBlockPartyTeamId, ReturnValue) == 0x000000, "Member 'AthenaRemoteSquadViewData_GetBlockPartyTeamId::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemoteSquadViewData.GetIsEliminated
// 0x0001 (0x0001 - 0x0000)
struct AthenaRemoteSquadViewData_GetIsEliminated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemoteSquadViewData_GetIsEliminated) == 0x000001, "Wrong alignment on AthenaRemoteSquadViewData_GetIsEliminated");
static_assert(sizeof(AthenaRemoteSquadViewData_GetIsEliminated) == 0x000001, "Wrong size on AthenaRemoteSquadViewData_GetIsEliminated");
static_assert(offsetof(AthenaRemoteSquadViewData_GetIsEliminated, ReturnValue) == 0x000000, "Member 'AthenaRemoteSquadViewData_GetIsEliminated::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemoteSquadViewData.GetKillScore
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemoteSquadViewData_GetKillScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemoteSquadViewData_GetKillScore) == 0x000004, "Wrong alignment on AthenaRemoteSquadViewData_GetKillScore");
static_assert(sizeof(AthenaRemoteSquadViewData_GetKillScore) == 0x000004, "Wrong size on AthenaRemoteSquadViewData_GetKillScore");
static_assert(offsetof(AthenaRemoteSquadViewData_GetKillScore, ReturnValue) == 0x000000, "Member 'AthenaRemoteSquadViewData_GetKillScore::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemoteSquadViewData.GetPlace
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemoteSquadViewData_GetPlace final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemoteSquadViewData_GetPlace) == 0x000004, "Wrong alignment on AthenaRemoteSquadViewData_GetPlace");
static_assert(sizeof(AthenaRemoteSquadViewData_GetPlace) == 0x000004, "Wrong size on AthenaRemoteSquadViewData_GetPlace");
static_assert(offsetof(AthenaRemoteSquadViewData_GetPlace, ReturnValue) == 0x000000, "Member 'AthenaRemoteSquadViewData_GetPlace::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemoteSquadViewData.GetPlayerDatas
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemoteSquadViewData_GetPlayerDatas final
{
public:
	TArray<class UAthenaRemotePlayerViewData*>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemoteSquadViewData_GetPlayerDatas) == 0x000008, "Wrong alignment on AthenaRemoteSquadViewData_GetPlayerDatas");
static_assert(sizeof(AthenaRemoteSquadViewData_GetPlayerDatas) == 0x000010, "Wrong size on AthenaRemoteSquadViewData_GetPlayerDatas");
static_assert(offsetof(AthenaRemoteSquadViewData_GetPlayerDatas, ReturnValue) == 0x000000, "Member 'AthenaRemoteSquadViewData_GetPlayerDatas::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemoteSquadViewData.GetSquadColor
// 0x0010 (0x0010 - 0x0000)
struct AthenaRemoteSquadViewData_GetSquadColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemoteSquadViewData_GetSquadColor) == 0x000004, "Wrong alignment on AthenaRemoteSquadViewData_GetSquadColor");
static_assert(sizeof(AthenaRemoteSquadViewData_GetSquadColor) == 0x000010, "Wrong size on AthenaRemoteSquadViewData_GetSquadColor");
static_assert(offsetof(AthenaRemoteSquadViewData_GetSquadColor, ReturnValue) == 0x000000, "Member 'AthenaRemoteSquadViewData_GetSquadColor::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaRemoteSquadViewData.GetSquadId
// 0x0004 (0x0004 - 0x0000)
struct AthenaRemoteSquadViewData_GetSquadId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRemoteSquadViewData_GetSquadId) == 0x000004, "Wrong alignment on AthenaRemoteSquadViewData_GetSquadId");
static_assert(sizeof(AthenaRemoteSquadViewData_GetSquadId) == 0x000004, "Wrong size on AthenaRemoteSquadViewData_GetSquadId");
static_assert(offsetof(AthenaRemoteSquadViewData_GetSquadId, ReturnValue) == 0x000000, "Member 'AthenaRemoteSquadViewData_GetSquadId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortVoiceChannelToggleButton.OnVoiceChannelSelected
// 0x0001 (0x0001 - 0x0000)
struct FortVoiceChannelToggleButton_OnVoiceChannelSelected final
{
public:
	bool                                          bIsPartyChat;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVoiceChannelToggleButton_OnVoiceChannelSelected) == 0x000001, "Wrong alignment on FortVoiceChannelToggleButton_OnVoiceChannelSelected");
static_assert(sizeof(FortVoiceChannelToggleButton_OnVoiceChannelSelected) == 0x000001, "Wrong size on FortVoiceChannelToggleButton_OnVoiceChannelSelected");
static_assert(offsetof(FortVoiceChannelToggleButton_OnVoiceChannelSelected, bIsPartyChat) == 0x000000, "Member 'FortVoiceChannelToggleButton_OnVoiceChannelSelected::bIsPartyChat' has a wrong offset!");

// Function FortniteUI.FortAthenaNewsWidget.HandleNewsStyle
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaNewsWidget_HandleNewsStyle final
{
public:
	EAthenaNewsStyle                              NewsStyle;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaNewsWidget_HandleNewsStyle) == 0x000001, "Wrong alignment on FortAthenaNewsWidget_HandleNewsStyle");
static_assert(sizeof(FortAthenaNewsWidget_HandleNewsStyle) == 0x000001, "Wrong size on FortAthenaNewsWidget_HandleNewsStyle");
static_assert(offsetof(FortAthenaNewsWidget_HandleNewsStyle, NewsStyle) == 0x000000, "Member 'FortAthenaNewsWidget_HandleNewsStyle::NewsStyle' has a wrong offset!");

// Function FortniteUI.AthenaReplayActionFeedRowBase.OnInstigatorNameUpdated
// 0x0018 (0x0018 - 0x0000)
struct AthenaReplayActionFeedRowBase_OnInstigatorNameUpdated final
{
public:
	class FText                                   InstigatorName;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayActionFeedRowBase_OnInstigatorNameUpdated) == 0x000008, "Wrong alignment on AthenaReplayActionFeedRowBase_OnInstigatorNameUpdated");
static_assert(sizeof(AthenaReplayActionFeedRowBase_OnInstigatorNameUpdated) == 0x000018, "Wrong size on AthenaReplayActionFeedRowBase_OnInstigatorNameUpdated");
static_assert(offsetof(AthenaReplayActionFeedRowBase_OnInstigatorNameUpdated, InstigatorName) == 0x000000, "Member 'AthenaReplayActionFeedRowBase_OnInstigatorNameUpdated::InstigatorName' has a wrong offset!");

// Function FortniteUI.AthenaReplayActionFeedRowBase.OnPlayerStateAdded
// 0x0008 (0x0008 - 0x0000)
struct AthenaReplayActionFeedRowBase_OnPlayerStateAdded final
{
public:
	class AFortPlayerStateAthena*                 FPSA;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayActionFeedRowBase_OnPlayerStateAdded) == 0x000008, "Wrong alignment on AthenaReplayActionFeedRowBase_OnPlayerStateAdded");
static_assert(sizeof(AthenaReplayActionFeedRowBase_OnPlayerStateAdded) == 0x000008, "Wrong size on AthenaReplayActionFeedRowBase_OnPlayerStateAdded");
static_assert(offsetof(AthenaReplayActionFeedRowBase_OnPlayerStateAdded, FPSA) == 0x000000, "Member 'AthenaReplayActionFeedRowBase_OnPlayerStateAdded::FPSA' has a wrong offset!");

// Function FortniteUI.AthenaReplayActionFeedRowBase.OnVictimNameUpdated
// 0x0018 (0x0018 - 0x0000)
struct AthenaReplayActionFeedRowBase_OnVictimNameUpdated final
{
public:
	class FText                                   VictimName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayActionFeedRowBase_OnVictimNameUpdated) == 0x000008, "Wrong alignment on AthenaReplayActionFeedRowBase_OnVictimNameUpdated");
static_assert(sizeof(AthenaReplayActionFeedRowBase_OnVictimNameUpdated) == 0x000018, "Wrong size on AthenaReplayActionFeedRowBase_OnVictimNameUpdated");
static_assert(offsetof(AthenaReplayActionFeedRowBase_OnVictimNameUpdated, VictimName) == 0x000000, "Member 'AthenaReplayActionFeedRowBase_OnVictimNameUpdated::VictimName' has a wrong offset!");

// Function FortniteUI.AthenaReplayActionFeedRowBase.GetEventTime
// 0x0004 (0x0004 - 0x0000)
struct AthenaReplayActionFeedRowBase_GetEventTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayActionFeedRowBase_GetEventTime) == 0x000004, "Wrong alignment on AthenaReplayActionFeedRowBase_GetEventTime");
static_assert(sizeof(AthenaReplayActionFeedRowBase_GetEventTime) == 0x000004, "Wrong size on AthenaReplayActionFeedRowBase_GetEventTime");
static_assert(offsetof(AthenaReplayActionFeedRowBase_GetEventTime, ReturnValue) == 0x000000, "Member 'AthenaReplayActionFeedRowBase_GetEventTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaReplayActionFeedRowBase.GetInstigatorId
// 0x0028 (0x0028 - 0x0000)
struct AthenaReplayActionFeedRowBase_GetInstigatorId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayActionFeedRowBase_GetInstigatorId) == 0x000008, "Wrong alignment on AthenaReplayActionFeedRowBase_GetInstigatorId");
static_assert(sizeof(AthenaReplayActionFeedRowBase_GetInstigatorId) == 0x000028, "Wrong size on AthenaReplayActionFeedRowBase_GetInstigatorId");
static_assert(offsetof(AthenaReplayActionFeedRowBase_GetInstigatorId, ReturnValue) == 0x000000, "Member 'AthenaReplayActionFeedRowBase_GetInstigatorId::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaReplayActionFeedRowBase.GetVictimId
// 0x0028 (0x0028 - 0x0000)
struct AthenaReplayActionFeedRowBase_GetVictimId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayActionFeedRowBase_GetVictimId) == 0x000008, "Wrong alignment on AthenaReplayActionFeedRowBase_GetVictimId");
static_assert(sizeof(AthenaReplayActionFeedRowBase_GetVictimId) == 0x000028, "Wrong size on AthenaReplayActionFeedRowBase_GetVictimId");
static_assert(offsetof(AthenaReplayActionFeedRowBase_GetVictimId, ReturnValue) == 0x000000, "Member 'AthenaReplayActionFeedRowBase_GetVictimId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortButtonStyle.GetBrushBySizeFromMultiSizeBrush
// 0x03C0 (0x03C0 - 0x0000)
struct FortButtonStyle_GetBrushBySizeFromMultiSizeBrush final
{
public:
	struct FFortMultiSizeBrush                    MultiSizeBrush;                                    // 0x0000(0x0330)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                Size;                                              // 0x0330(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0338(0x0088)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortButtonStyle_GetBrushBySizeFromMultiSizeBrush) == 0x000008, "Wrong alignment on FortButtonStyle_GetBrushBySizeFromMultiSizeBrush");
static_assert(sizeof(FortButtonStyle_GetBrushBySizeFromMultiSizeBrush) == 0x0003C0, "Wrong size on FortButtonStyle_GetBrushBySizeFromMultiSizeBrush");
static_assert(offsetof(FortButtonStyle_GetBrushBySizeFromMultiSizeBrush, MultiSizeBrush) == 0x000000, "Member 'FortButtonStyle_GetBrushBySizeFromMultiSizeBrush::MultiSizeBrush' has a wrong offset!");
static_assert(offsetof(FortButtonStyle_GetBrushBySizeFromMultiSizeBrush, Size) == 0x000330, "Member 'FortButtonStyle_GetBrushBySizeFromMultiSizeBrush::Size' has a wrong offset!");
static_assert(offsetof(FortButtonStyle_GetBrushBySizeFromMultiSizeBrush, ReturnValue) == 0x000338, "Member 'FortButtonStyle_GetBrushBySizeFromMultiSizeBrush::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortButtonStyle.GetFontBySizeFromMultiSizeFont
// 0x0238 (0x0238 - 0x0000)
struct FortButtonStyle_GetFontBySizeFromMultiSizeFont final
{
public:
	struct FFortMultiSizeFont                     MultiSizeFont;                                     // 0x0000(0x01E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                Size;                                              // 0x01E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         ReturnValue;                                       // 0x01E8(0x0050)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortButtonStyle_GetFontBySizeFromMultiSizeFont) == 0x000008, "Wrong alignment on FortButtonStyle_GetFontBySizeFromMultiSizeFont");
static_assert(sizeof(FortButtonStyle_GetFontBySizeFromMultiSizeFont) == 0x000238, "Wrong size on FortButtonStyle_GetFontBySizeFromMultiSizeFont");
static_assert(offsetof(FortButtonStyle_GetFontBySizeFromMultiSizeFont, MultiSizeFont) == 0x000000, "Member 'FortButtonStyle_GetFontBySizeFromMultiSizeFont::MultiSizeFont' has a wrong offset!");
static_assert(offsetof(FortButtonStyle_GetFontBySizeFromMultiSizeFont, Size) == 0x0001E0, "Member 'FortButtonStyle_GetFontBySizeFromMultiSizeFont::Size' has a wrong offset!");
static_assert(offsetof(FortButtonStyle_GetFontBySizeFromMultiSizeFont, ReturnValue) == 0x0001E8, "Member 'FortButtonStyle_GetFontBySizeFromMultiSizeFont::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortButtonStyle.GetMarginBySizeFromMultiSizeMargin
// 0x0074 (0x0074 - 0x0000)
struct FortButtonStyle_GetMarginBySizeFromMultiSizeMargin final
{
public:
	struct FFortMultiSizeMargin                   MultiSizeMargin;                                   // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EFortBrushSize                                Size;                                              // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                ReturnValue;                                       // 0x0064(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortButtonStyle_GetMarginBySizeFromMultiSizeMargin) == 0x000004, "Wrong alignment on FortButtonStyle_GetMarginBySizeFromMultiSizeMargin");
static_assert(sizeof(FortButtonStyle_GetMarginBySizeFromMultiSizeMargin) == 0x000074, "Wrong size on FortButtonStyle_GetMarginBySizeFromMultiSizeMargin");
static_assert(offsetof(FortButtonStyle_GetMarginBySizeFromMultiSizeMargin, MultiSizeMargin) == 0x000000, "Member 'FortButtonStyle_GetMarginBySizeFromMultiSizeMargin::MultiSizeMargin' has a wrong offset!");
static_assert(offsetof(FortButtonStyle_GetMarginBySizeFromMultiSizeMargin, Size) == 0x000060, "Member 'FortButtonStyle_GetMarginBySizeFromMultiSizeMargin::Size' has a wrong offset!");
static_assert(offsetof(FortButtonStyle_GetMarginBySizeFromMultiSizeMargin, ReturnValue) == 0x000064, "Member 'FortButtonStyle_GetMarginBySizeFromMultiSizeMargin::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortButtonStyle.GetButtonPaddingBySize
// 0x0014 (0x0014 - 0x0000)
struct FortButtonStyle_GetButtonPaddingBySize final
{
public:
	EFortBrushSize                                Size;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                ReturnValue;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortButtonStyle_GetButtonPaddingBySize) == 0x000004, "Wrong alignment on FortButtonStyle_GetButtonPaddingBySize");
static_assert(sizeof(FortButtonStyle_GetButtonPaddingBySize) == 0x000014, "Wrong size on FortButtonStyle_GetButtonPaddingBySize");
static_assert(offsetof(FortButtonStyle_GetButtonPaddingBySize, Size) == 0x000000, "Member 'FortButtonStyle_GetButtonPaddingBySize::Size' has a wrong offset!");
static_assert(offsetof(FortButtonStyle_GetButtonPaddingBySize, ReturnValue) == 0x000004, "Member 'FortButtonStyle_GetButtonPaddingBySize::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortButtonStyle.GetCustomPaddingBySize
// 0x0014 (0x0014 - 0x0000)
struct FortButtonStyle_GetCustomPaddingBySize final
{
public:
	EFortBrushSize                                Size;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                ReturnValue;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortButtonStyle_GetCustomPaddingBySize) == 0x000004, "Wrong alignment on FortButtonStyle_GetCustomPaddingBySize");
static_assert(sizeof(FortButtonStyle_GetCustomPaddingBySize) == 0x000014, "Wrong size on FortButtonStyle_GetCustomPaddingBySize");
static_assert(offsetof(FortButtonStyle_GetCustomPaddingBySize, Size) == 0x000000, "Member 'FortButtonStyle_GetCustomPaddingBySize::Size' has a wrong offset!");
static_assert(offsetof(FortButtonStyle_GetCustomPaddingBySize, ReturnValue) == 0x000004, "Member 'FortButtonStyle_GetCustomPaddingBySize::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortButtonStyle.GetFontBySize
// 0x0058 (0x0058 - 0x0000)
struct FortButtonStyle_GetFontBySize final
{
public:
	EFortBrushSize                                Size;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         ReturnValue;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortButtonStyle_GetFontBySize) == 0x000008, "Wrong alignment on FortButtonStyle_GetFontBySize");
static_assert(sizeof(FortButtonStyle_GetFontBySize) == 0x000058, "Wrong size on FortButtonStyle_GetFontBySize");
static_assert(offsetof(FortButtonStyle_GetFontBySize, Size) == 0x000000, "Member 'FortButtonStyle_GetFontBySize::Size' has a wrong offset!");
static_assert(offsetof(FortButtonStyle_GetFontBySize, ReturnValue) == 0x000008, "Member 'FortButtonStyle_GetFontBySize::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaReplayActionFeedScreenBase.OnReplayEventsUpdated
// 0x0004 (0x0004 - 0x0000)
struct AthenaReplayActionFeedScreenBase_OnReplayEventsUpdated final
{
public:
	EPlayEventType                                Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayActionFeedScreenBase_OnReplayEventsUpdated) == 0x000004, "Wrong alignment on AthenaReplayActionFeedScreenBase_OnReplayEventsUpdated");
static_assert(sizeof(AthenaReplayActionFeedScreenBase_OnReplayEventsUpdated) == 0x000004, "Wrong size on AthenaReplayActionFeedScreenBase_OnReplayEventsUpdated");
static_assert(offsetof(AthenaReplayActionFeedScreenBase_OnReplayEventsUpdated, Type) == 0x000000, "Member 'AthenaReplayActionFeedScreenBase_OnReplayEventsUpdated::Type' has a wrong offset!");

// Function FortniteUI.AthenaReplayActionFeedScreenBase.OnRowProxiesUpdated
// 0x0010 (0x0010 - 0x0000)
struct AthenaReplayActionFeedScreenBase_OnRowProxiesUpdated final
{
public:
	TArray<class UAthenaReplayActionFeedRowProxyInstance*> RowProxies;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayActionFeedScreenBase_OnRowProxiesUpdated) == 0x000008, "Wrong alignment on AthenaReplayActionFeedScreenBase_OnRowProxiesUpdated");
static_assert(sizeof(AthenaReplayActionFeedScreenBase_OnRowProxiesUpdated) == 0x000010, "Wrong size on AthenaReplayActionFeedScreenBase_OnRowProxiesUpdated");
static_assert(offsetof(AthenaReplayActionFeedScreenBase_OnRowProxiesUpdated, RowProxies) == 0x000000, "Member 'AthenaReplayActionFeedScreenBase_OnRowProxiesUpdated::RowProxies' has a wrong offset!");

// Function FortniteUI.FortSquadLandingPageDefenderSquadDetailsLocked.SetDefenderSquadInfo
// 0x0030 (0x0030 - 0x0000)
struct FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo final
{
public:
	struct FFortLandingPageDefenderSummaryInfo    DefenderSummaryInfo;                               // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo) == 0x000008, "Wrong alignment on FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo");
static_assert(sizeof(FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo) == 0x000030, "Wrong size on FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo");
static_assert(offsetof(FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo, DefenderSummaryInfo) == 0x000000, "Member 'FortSquadLandingPageDefenderSquadDetailsLocked_SetDefenderSquadInfo::DefenderSummaryInfo' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserEntryWidget.GetDateTimeText
// 0x0020 (0x0020 - 0x0000)
struct AthenaReplayBrowserEntryWidget_GetDateTimeText final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserEntryWidget_GetDateTimeText) == 0x000008, "Wrong alignment on AthenaReplayBrowserEntryWidget_GetDateTimeText");
static_assert(sizeof(AthenaReplayBrowserEntryWidget_GetDateTimeText) == 0x000020, "Wrong size on AthenaReplayBrowserEntryWidget_GetDateTimeText");
static_assert(offsetof(AthenaReplayBrowserEntryWidget_GetDateTimeText, DateTime) == 0x000000, "Member 'AthenaReplayBrowserEntryWidget_GetDateTimeText::DateTime' has a wrong offset!");
static_assert(offsetof(AthenaReplayBrowserEntryWidget_GetDateTimeText, ReturnValue) == 0x000008, "Member 'AthenaReplayBrowserEntryWidget_GetDateTimeText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressionRewardsModalWidget.InspectItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookProgressionRewardsModalWidget_InspectItemBP final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardsModalWidget_InspectItemBP) == 0x000008, "Wrong alignment on FortCollectionBookProgressionRewardsModalWidget_InspectItemBP");
static_assert(sizeof(FortCollectionBookProgressionRewardsModalWidget_InspectItemBP) == 0x000008, "Wrong size on FortCollectionBookProgressionRewardsModalWidget_InspectItemBP");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_InspectItemBP, Item) == 0x000000, "Member 'FortCollectionBookProgressionRewardsModalWidget_InspectItemBP::Item' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressionRewardsModalWidget.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookProgressionRewardsModalWidget_OnInputMethodChanged final
{
public:
	bool                                          bUsingGamepad;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardsModalWidget_OnInputMethodChanged) == 0x000001, "Wrong alignment on FortCollectionBookProgressionRewardsModalWidget_OnInputMethodChanged");
static_assert(sizeof(FortCollectionBookProgressionRewardsModalWidget_OnInputMethodChanged) == 0x000001, "Wrong size on FortCollectionBookProgressionRewardsModalWidget_OnInputMethodChanged");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_OnInputMethodChanged, bUsingGamepad) == 0x000000, "Member 'FortCollectionBookProgressionRewardsModalWidget_OnInputMethodChanged::bUsingGamepad' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressionRewardsModalWidget.OnLevelProgressionSet
// 0x000C (0x000C - 0x0000)
struct FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet final
{
public:
	int32                                         CurrentLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextLvlPct;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAchievedLevel;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet) == 0x000004, "Wrong alignment on FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet");
static_assert(sizeof(FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet) == 0x00000C, "Wrong size on FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet, CurrentLevel) == 0x000000, "Member 'FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet, NextLvlPct) == 0x000004, "Member 'FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet::NextLvlPct' has a wrong offset!");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet, MaxAchievedLevel) == 0x000008, "Member 'FortCollectionBookProgressionRewardsModalWidget_OnLevelProgressionSet::MaxAchievedLevel' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressionRewardsModalWidget.OnSelectedButtonChanged
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged final
{
public:
	class UCommonButton*                          SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged) == 0x000008, "Wrong alignment on FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged");
static_assert(sizeof(FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged) == 0x000010, "Wrong size on FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged, SelectedButton) == 0x000000, "Member 'FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged::SelectedButton' has a wrong offset!");
static_assert(offsetof(FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged, ButtonIndex) == 0x000008, "Member 'FortCollectionBookProgressionRewardsModalWidget_OnSelectedButtonChanged::ButtonIndex' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.AreAnyActionsOutstanding
// 0x0001 (0x0001 - 0x0000)
struct AthenaReplayBrowserScreenBase_AreAnyActionsOutstanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_AreAnyActionsOutstanding) == 0x000001, "Wrong alignment on AthenaReplayBrowserScreenBase_AreAnyActionsOutstanding");
static_assert(sizeof(AthenaReplayBrowserScreenBase_AreAnyActionsOutstanding) == 0x000001, "Wrong size on AthenaReplayBrowserScreenBase_AreAnyActionsOutstanding");
static_assert(offsetof(AthenaReplayBrowserScreenBase_AreAnyActionsOutstanding, ReturnValue) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_AreAnyActionsOutstanding::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.AreExternalActionsOutstanding
// 0x0001 (0x0001 - 0x0000)
struct AthenaReplayBrowserScreenBase_AreExternalActionsOutstanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_AreExternalActionsOutstanding) == 0x000001, "Wrong alignment on AthenaReplayBrowserScreenBase_AreExternalActionsOutstanding");
static_assert(sizeof(AthenaReplayBrowserScreenBase_AreExternalActionsOutstanding) == 0x000001, "Wrong size on AthenaReplayBrowserScreenBase_AreExternalActionsOutstanding");
static_assert(offsetof(AthenaReplayBrowserScreenBase_AreExternalActionsOutstanding, ReturnValue) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_AreExternalActionsOutstanding::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.DeleteReplay
// 0x0008 (0x0008 - 0x0000)
struct AthenaReplayBrowserScreenBase_DeleteReplay final
{
public:
	const class UAthenaReplayBrowserRowProxyInstance* RowProxy;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_DeleteReplay) == 0x000008, "Wrong alignment on AthenaReplayBrowserScreenBase_DeleteReplay");
static_assert(sizeof(AthenaReplayBrowserScreenBase_DeleteReplay) == 0x000008, "Wrong size on AthenaReplayBrowserScreenBase_DeleteReplay");
static_assert(offsetof(AthenaReplayBrowserScreenBase_DeleteReplay, RowProxy) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_DeleteReplay::RowProxy' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.DoesReplayFolderExist
// 0x0001 (0x0001 - 0x0000)
struct AthenaReplayBrowserScreenBase_DoesReplayFolderExist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_DoesReplayFolderExist) == 0x000001, "Wrong alignment on AthenaReplayBrowserScreenBase_DoesReplayFolderExist");
static_assert(sizeof(AthenaReplayBrowserScreenBase_DoesReplayFolderExist) == 0x000001, "Wrong size on AthenaReplayBrowserScreenBase_DoesReplayFolderExist");
static_assert(offsetof(AthenaReplayBrowserScreenBase_DoesReplayFolderExist, ReturnValue) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_DoesReplayFolderExist::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.IsHandlingAction
// 0x0001 (0x0001 - 0x0000)
struct AthenaReplayBrowserScreenBase_IsHandlingAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_IsHandlingAction) == 0x000001, "Wrong alignment on AthenaReplayBrowserScreenBase_IsHandlingAction");
static_assert(sizeof(AthenaReplayBrowserScreenBase_IsHandlingAction) == 0x000001, "Wrong size on AthenaReplayBrowserScreenBase_IsHandlingAction");
static_assert(offsetof(AthenaReplayBrowserScreenBase_IsHandlingAction, ReturnValue) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_IsHandlingAction::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.IsStreamingReplayViewEnabled
// 0x0001 (0x0001 - 0x0000)
struct AthenaReplayBrowserScreenBase_IsStreamingReplayViewEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_IsStreamingReplayViewEnabled) == 0x000001, "Wrong alignment on AthenaReplayBrowserScreenBase_IsStreamingReplayViewEnabled");
static_assert(sizeof(AthenaReplayBrowserScreenBase_IsStreamingReplayViewEnabled) == 0x000001, "Wrong size on AthenaReplayBrowserScreenBase_IsStreamingReplayViewEnabled");
static_assert(offsetof(AthenaReplayBrowserScreenBase_IsStreamingReplayViewEnabled, ReturnValue) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_IsStreamingReplayViewEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.OnBackActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaReplayBrowserScreenBase_OnBackActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_OnBackActionExecuted) == 0x000001, "Wrong alignment on AthenaReplayBrowserScreenBase_OnBackActionExecuted");
static_assert(sizeof(AthenaReplayBrowserScreenBase_OnBackActionExecuted) == 0x000001, "Wrong size on AthenaReplayBrowserScreenBase_OnBackActionExecuted");
static_assert(offsetof(AthenaReplayBrowserScreenBase_OnBackActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_OnBackActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.OnDeleteActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaReplayBrowserScreenBase_OnDeleteActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_OnDeleteActionExecuted) == 0x000001, "Wrong alignment on AthenaReplayBrowserScreenBase_OnDeleteActionExecuted");
static_assert(sizeof(AthenaReplayBrowserScreenBase_OnDeleteActionExecuted) == 0x000001, "Wrong size on AthenaReplayBrowserScreenBase_OnDeleteActionExecuted");
static_assert(offsetof(AthenaReplayBrowserScreenBase_OnDeleteActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_OnDeleteActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.OnDeleteFailed
// 0x0018 (0x0018 - 0x0000)
struct AthenaReplayBrowserScreenBase_OnDeleteFailed final
{
public:
	class FText                                   Reason;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_OnDeleteFailed) == 0x000008, "Wrong alignment on AthenaReplayBrowserScreenBase_OnDeleteFailed");
static_assert(sizeof(AthenaReplayBrowserScreenBase_OnDeleteFailed) == 0x000018, "Wrong size on AthenaReplayBrowserScreenBase_OnDeleteFailed");
static_assert(offsetof(AthenaReplayBrowserScreenBase_OnDeleteFailed, Reason) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_OnDeleteFailed::Reason' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.OnPlayActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaReplayBrowserScreenBase_OnPlayActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_OnPlayActionExecuted) == 0x000001, "Wrong alignment on AthenaReplayBrowserScreenBase_OnPlayActionExecuted");
static_assert(sizeof(AthenaReplayBrowserScreenBase_OnPlayActionExecuted) == 0x000001, "Wrong size on AthenaReplayBrowserScreenBase_OnPlayActionExecuted");
static_assert(offsetof(AthenaReplayBrowserScreenBase_OnPlayActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_OnPlayActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.OnPlayFailed
// 0x0018 (0x0018 - 0x0000)
struct AthenaReplayBrowserScreenBase_OnPlayFailed final
{
public:
	class FText                                   Reason;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_OnPlayFailed) == 0x000008, "Wrong alignment on AthenaReplayBrowserScreenBase_OnPlayFailed");
static_assert(sizeof(AthenaReplayBrowserScreenBase_OnPlayFailed) == 0x000018, "Wrong size on AthenaReplayBrowserScreenBase_OnPlayFailed");
static_assert(offsetof(AthenaReplayBrowserScreenBase_OnPlayFailed, Reason) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_OnPlayFailed::Reason' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.OnRefreshActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaReplayBrowserScreenBase_OnRefreshActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_OnRefreshActionExecuted) == 0x000001, "Wrong alignment on AthenaReplayBrowserScreenBase_OnRefreshActionExecuted");
static_assert(sizeof(AthenaReplayBrowserScreenBase_OnRefreshActionExecuted) == 0x000001, "Wrong size on AthenaReplayBrowserScreenBase_OnRefreshActionExecuted");
static_assert(offsetof(AthenaReplayBrowserScreenBase_OnRefreshActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_OnRefreshActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.OnRenameActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaReplayBrowserScreenBase_OnRenameActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_OnRenameActionExecuted) == 0x000001, "Wrong alignment on AthenaReplayBrowserScreenBase_OnRenameActionExecuted");
static_assert(sizeof(AthenaReplayBrowserScreenBase_OnRenameActionExecuted) == 0x000001, "Wrong size on AthenaReplayBrowserScreenBase_OnRenameActionExecuted");
static_assert(offsetof(AthenaReplayBrowserScreenBase_OnRenameActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_OnRenameActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.OnRenameFailed
// 0x0018 (0x0018 - 0x0000)
struct AthenaReplayBrowserScreenBase_OnRenameFailed final
{
public:
	class FText                                   Reason;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_OnRenameFailed) == 0x000008, "Wrong alignment on AthenaReplayBrowserScreenBase_OnRenameFailed");
static_assert(sizeof(AthenaReplayBrowserScreenBase_OnRenameFailed) == 0x000018, "Wrong size on AthenaReplayBrowserScreenBase_OnRenameFailed");
static_assert(offsetof(AthenaReplayBrowserScreenBase_OnRenameFailed, Reason) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_OnRenameFailed::Reason' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.OnSaveFailed
// 0x0018 (0x0018 - 0x0000)
struct AthenaReplayBrowserScreenBase_OnSaveFailed final
{
public:
	class FText                                   Reason;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_OnSaveFailed) == 0x000008, "Wrong alignment on AthenaReplayBrowserScreenBase_OnSaveFailed");
static_assert(sizeof(AthenaReplayBrowserScreenBase_OnSaveFailed) == 0x000018, "Wrong size on AthenaReplayBrowserScreenBase_OnSaveFailed");
static_assert(offsetof(AthenaReplayBrowserScreenBase_OnSaveFailed, Reason) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_OnSaveFailed::Reason' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.PlayReplay
// 0x0008 (0x0008 - 0x0000)
struct AthenaReplayBrowserScreenBase_PlayReplay final
{
public:
	const class UAthenaReplayBrowserRowProxyInstance* RowProxy;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_PlayReplay) == 0x000008, "Wrong alignment on AthenaReplayBrowserScreenBase_PlayReplay");
static_assert(sizeof(AthenaReplayBrowserScreenBase_PlayReplay) == 0x000008, "Wrong size on AthenaReplayBrowserScreenBase_PlayReplay");
static_assert(offsetof(AthenaReplayBrowserScreenBase_PlayReplay, RowProxy) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_PlayReplay::RowProxy' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.RenameReplay
// 0x0018 (0x0018 - 0x0000)
struct AthenaReplayBrowserScreenBase_RenameReplay final
{
public:
	const class UAthenaReplayBrowserRowProxyInstance* RowProxy;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewReplayName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_RenameReplay) == 0x000008, "Wrong alignment on AthenaReplayBrowserScreenBase_RenameReplay");
static_assert(sizeof(AthenaReplayBrowserScreenBase_RenameReplay) == 0x000018, "Wrong size on AthenaReplayBrowserScreenBase_RenameReplay");
static_assert(offsetof(AthenaReplayBrowserScreenBase_RenameReplay, RowProxy) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_RenameReplay::RowProxy' has a wrong offset!");
static_assert(offsetof(AthenaReplayBrowserScreenBase_RenameReplay, NewReplayName) == 0x000008, "Member 'AthenaReplayBrowserScreenBase_RenameReplay::NewReplayName' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.SaveAndRenameReplay
// 0x0018 (0x0018 - 0x0000)
struct AthenaReplayBrowserScreenBase_SaveAndRenameReplay final
{
public:
	const class UAthenaReplayBrowserRowProxyInstance* RowProxy;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewReplayName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_SaveAndRenameReplay) == 0x000008, "Wrong alignment on AthenaReplayBrowserScreenBase_SaveAndRenameReplay");
static_assert(sizeof(AthenaReplayBrowserScreenBase_SaveAndRenameReplay) == 0x000018, "Wrong size on AthenaReplayBrowserScreenBase_SaveAndRenameReplay");
static_assert(offsetof(AthenaReplayBrowserScreenBase_SaveAndRenameReplay, RowProxy) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_SaveAndRenameReplay::RowProxy' has a wrong offset!");
static_assert(offsetof(AthenaReplayBrowserScreenBase_SaveAndRenameReplay, NewReplayName) == 0x000008, "Member 'AthenaReplayBrowserScreenBase_SaveAndRenameReplay::NewReplayName' has a wrong offset!");

// Function FortniteUI.AthenaReplayBrowserScreenBase.ShowDeleteInvalidDialog
// 0x0030 (0x0030 - 0x0000)
struct AthenaReplayBrowserScreenBase_ShowDeleteInvalidDialog final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   MESSAGE;                                           // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaReplayBrowserScreenBase_ShowDeleteInvalidDialog) == 0x000008, "Wrong alignment on AthenaReplayBrowserScreenBase_ShowDeleteInvalidDialog");
static_assert(sizeof(AthenaReplayBrowserScreenBase_ShowDeleteInvalidDialog) == 0x000030, "Wrong size on AthenaReplayBrowserScreenBase_ShowDeleteInvalidDialog");
static_assert(offsetof(AthenaReplayBrowserScreenBase_ShowDeleteInvalidDialog, Title) == 0x000000, "Member 'AthenaReplayBrowserScreenBase_ShowDeleteInvalidDialog::Title' has a wrong offset!");
static_assert(offsetof(AthenaReplayBrowserScreenBase_ShowDeleteInvalidDialog, MESSAGE) == 0x000018, "Member 'AthenaReplayBrowserScreenBase_ShowDeleteInvalidDialog::MESSAGE' has a wrong offset!");

// Function FortniteUI.FortFriendSearchButton.HandleAddFriendTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortFriendSearchButton_HandleAddFriendTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFriendSearchButton_HandleAddFriendTextCommitted) == 0x000008, "Wrong alignment on FortFriendSearchButton_HandleAddFriendTextCommitted");
static_assert(sizeof(FortFriendSearchButton_HandleAddFriendTextCommitted) == 0x000020, "Wrong size on FortFriendSearchButton_HandleAddFriendTextCommitted");
static_assert(offsetof(FortFriendSearchButton_HandleAddFriendTextCommitted, Text) == 0x000000, "Member 'FortFriendSearchButton_HandleAddFriendTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(FortFriendSearchButton_HandleAddFriendTextCommitted, CommitMethod) == 0x000018, "Member 'FortFriendSearchButton_HandleAddFriendTextCommitted::CommitMethod' has a wrong offset!");

// Function FortniteUI.AthenaRespawnBase.OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaRespawnBase_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRespawnBase_OnGamePhaseChanged) == 0x000001, "Wrong alignment on AthenaRespawnBase_OnGamePhaseChanged");
static_assert(sizeof(AthenaRespawnBase_OnGamePhaseChanged) == 0x000001, "Wrong size on AthenaRespawnBase_OnGamePhaseChanged");
static_assert(offsetof(AthenaRespawnBase_OnGamePhaseChanged, GamePhase) == 0x000000, "Member 'AthenaRespawnBase_OnGamePhaseChanged::GamePhase' has a wrong offset!");

// Function FortniteUI.AthenaRespawnBase.OnUpdateRespawnState
// 0x0001 (0x0001 - 0x0000)
struct AthenaRespawnBase_OnUpdateRespawnState final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaRespawnBase_OnUpdateRespawnState) == 0x000001, "Wrong alignment on AthenaRespawnBase_OnUpdateRespawnState");
static_assert(sizeof(AthenaRespawnBase_OnUpdateRespawnState) == 0x000001, "Wrong size on AthenaRespawnBase_OnUpdateRespawnState");
static_assert(offsetof(AthenaRespawnBase_OnUpdateRespawnState, bEnabled) == 0x000000, "Member 'AthenaRespawnBase_OnUpdateRespawnState::bEnabled' has a wrong offset!");

// Function FortniteUI.FortBangWrapperOld.SetBangVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortBangWrapperOld_SetBangVisibility final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBangWrapperOld_SetBangVisibility) == 0x000001, "Wrong alignment on FortBangWrapperOld_SetBangVisibility");
static_assert(sizeof(FortBangWrapperOld_SetBangVisibility) == 0x000001, "Wrong size on FortBangWrapperOld_SetBangVisibility");
static_assert(offsetof(FortBangWrapperOld_SetBangVisibility, InVisible) == 0x000000, "Member 'FortBangWrapperOld_SetBangVisibility::InVisible' has a wrong offset!");

// Function FortniteUI.AthenaScorePopWidgetBase.HandleNewScoreEarned
// 0x0008 (0x0008 - 0x0000)
struct AthenaScorePopWidgetBase_HandleNewScoreEarned final
{
public:
	int32                                         NewPoints;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaScoringEvent                           ScoreType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaScorePopWidgetBase_HandleNewScoreEarned) == 0x000004, "Wrong alignment on AthenaScorePopWidgetBase_HandleNewScoreEarned");
static_assert(sizeof(AthenaScorePopWidgetBase_HandleNewScoreEarned) == 0x000008, "Wrong size on AthenaScorePopWidgetBase_HandleNewScoreEarned");
static_assert(offsetof(AthenaScorePopWidgetBase_HandleNewScoreEarned, NewPoints) == 0x000000, "Member 'AthenaScorePopWidgetBase_HandleNewScoreEarned::NewPoints' has a wrong offset!");
static_assert(offsetof(AthenaScorePopWidgetBase_HandleNewScoreEarned, ScoreType) == 0x000004, "Member 'AthenaScorePopWidgetBase_HandleNewScoreEarned::ScoreType' has a wrong offset!");

// Function FortniteUI.AthenaScorePopWidgetBase.OnNewScoreEarned
// 0x0028 (0x0028 - 0x0000)
struct AthenaScorePopWidgetBase_OnNewScoreEarned final
{
public:
	int32                                         NewScoreValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NewScoreTypeText;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         BigScoreThreshold;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaScorePopWidgetBase_OnNewScoreEarned) == 0x000008, "Wrong alignment on AthenaScorePopWidgetBase_OnNewScoreEarned");
static_assert(sizeof(AthenaScorePopWidgetBase_OnNewScoreEarned) == 0x000028, "Wrong size on AthenaScorePopWidgetBase_OnNewScoreEarned");
static_assert(offsetof(AthenaScorePopWidgetBase_OnNewScoreEarned, NewScoreValue) == 0x000000, "Member 'AthenaScorePopWidgetBase_OnNewScoreEarned::NewScoreValue' has a wrong offset!");
static_assert(offsetof(AthenaScorePopWidgetBase_OnNewScoreEarned, NewScoreTypeText) == 0x000008, "Member 'AthenaScorePopWidgetBase_OnNewScoreEarned::NewScoreTypeText' has a wrong offset!");
static_assert(offsetof(AthenaScorePopWidgetBase_OnNewScoreEarned, BigScoreThreshold) == 0x000020, "Member 'AthenaScorePopWidgetBase_OnNewScoreEarned::BigScoreThreshold' has a wrong offset!");

// Function FortniteUI.FortSquadSlotSelectorPopupMenu.GetHostButton
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotSelectorPopupMenu_GetHostButton final
{
public:
	class UFortSquadSlotSelectorButton*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorPopupMenu_GetHostButton) == 0x000008, "Wrong alignment on FortSquadSlotSelectorPopupMenu_GetHostButton");
static_assert(sizeof(FortSquadSlotSelectorPopupMenu_GetHostButton) == 0x000008, "Wrong size on FortSquadSlotSelectorPopupMenu_GetHostButton");
static_assert(offsetof(FortSquadSlotSelectorPopupMenu_GetHostButton, ReturnValue) == 0x000000, "Member 'FortSquadSlotSelectorPopupMenu_GetHostButton::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectateMatchModalBase.GetFriendNames
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectateMatchModalBase_GetFriendNames final
{
public:
	TArray<class FString>                         FriendNames;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectateMatchModalBase_GetFriendNames) == 0x000008, "Wrong alignment on AthenaSpectateMatchModalBase_GetFriendNames");
static_assert(sizeof(AthenaSpectateMatchModalBase_GetFriendNames) == 0x000010, "Wrong size on AthenaSpectateMatchModalBase_GetFriendNames");
static_assert(offsetof(AthenaSpectateMatchModalBase_GetFriendNames, FriendNames) == 0x000000, "Member 'AthenaSpectateMatchModalBase_GetFriendNames::FriendNames' has a wrong offset!");

// Function FortniteUI.AthenaSpectateMatchModalBase.IsGameSessionString
// 0x0018 (0x0018 - 0x0000)
struct AthenaSpectateMatchModalBase_IsGameSessionString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectateMatchModalBase_IsGameSessionString) == 0x000008, "Wrong alignment on AthenaSpectateMatchModalBase_IsGameSessionString");
static_assert(sizeof(AthenaSpectateMatchModalBase_IsGameSessionString) == 0x000018, "Wrong size on AthenaSpectateMatchModalBase_IsGameSessionString");
static_assert(offsetof(AthenaSpectateMatchModalBase_IsGameSessionString, String) == 0x000000, "Member 'AthenaSpectateMatchModalBase_IsGameSessionString::String' has a wrong offset!");
static_assert(offsetof(AthenaSpectateMatchModalBase_IsGameSessionString, ReturnValue) == 0x000010, "Member 'AthenaSpectateMatchModalBase_IsGameSessionString::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectateMatchModalBase.JoinFriendSession
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectateMatchModalBase_JoinFriendSession final
{
public:
	class FString                                 FriendName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectateMatchModalBase_JoinFriendSession) == 0x000008, "Wrong alignment on AthenaSpectateMatchModalBase_JoinFriendSession");
static_assert(sizeof(AthenaSpectateMatchModalBase_JoinFriendSession) == 0x000010, "Wrong size on AthenaSpectateMatchModalBase_JoinFriendSession");
static_assert(offsetof(AthenaSpectateMatchModalBase_JoinFriendSession, FriendName) == 0x000000, "Member 'AthenaSpectateMatchModalBase_JoinFriendSession::FriendName' has a wrong offset!");

// Function FortniteUI.AthenaSpectateMatchModalBase.JoinGameSession
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectateMatchModalBase_JoinGameSession final
{
public:
	class FString                                 GameSessionIdStr;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectateMatchModalBase_JoinGameSession) == 0x000008, "Wrong alignment on AthenaSpectateMatchModalBase_JoinGameSession");
static_assert(sizeof(AthenaSpectateMatchModalBase_JoinGameSession) == 0x000010, "Wrong size on AthenaSpectateMatchModalBase_JoinGameSession");
static_assert(offsetof(AthenaSpectateMatchModalBase_JoinGameSession, GameSessionIdStr) == 0x000000, "Member 'AthenaSpectateMatchModalBase_JoinGameSession::GameSessionIdStr' has a wrong offset!");

// Function FortniteUI.FortSquadSelectionMenu.HandleExitAction
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSelectionMenu_HandleExitAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSelectionMenu_HandleExitAction) == 0x000001, "Wrong alignment on FortSquadSelectionMenu_HandleExitAction");
static_assert(sizeof(FortSquadSelectionMenu_HandleExitAction) == 0x000001, "Wrong size on FortSquadSelectionMenu_HandleExitAction");
static_assert(offsetof(FortSquadSelectionMenu_HandleExitAction, bPassThrough) == 0x000000, "Member 'FortSquadSelectionMenu_HandleExitAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortSquadSelectionMenu.HandleMemberEntryClicked
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSelectionMenu_HandleMemberEntryClicked final
{
public:
	class UCommonButton*                          MemberEntryButton;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryIdx;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSelectionMenu_HandleMemberEntryClicked) == 0x000008, "Wrong alignment on FortSquadSelectionMenu_HandleMemberEntryClicked");
static_assert(sizeof(FortSquadSelectionMenu_HandleMemberEntryClicked) == 0x000010, "Wrong size on FortSquadSelectionMenu_HandleMemberEntryClicked");
static_assert(offsetof(FortSquadSelectionMenu_HandleMemberEntryClicked, MemberEntryButton) == 0x000000, "Member 'FortSquadSelectionMenu_HandleMemberEntryClicked::MemberEntryButton' has a wrong offset!");
static_assert(offsetof(FortSquadSelectionMenu_HandleMemberEntryClicked, EntryIdx) == 0x000008, "Member 'FortSquadSelectionMenu_HandleMemberEntryClicked::EntryIdx' has a wrong offset!");

// Function FortniteUI.FortSquadSelectionMenu.OnLocalPlayerParticipationChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSelectionMenu_OnLocalPlayerParticipationChanged final
{
public:
	bool                                          bIsParticipating;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSelectionMenu_OnLocalPlayerParticipationChanged) == 0x000001, "Wrong alignment on FortSquadSelectionMenu_OnLocalPlayerParticipationChanged");
static_assert(sizeof(FortSquadSelectionMenu_OnLocalPlayerParticipationChanged) == 0x000001, "Wrong size on FortSquadSelectionMenu_OnLocalPlayerParticipationChanged");
static_assert(offsetof(FortSquadSelectionMenu_OnLocalPlayerParticipationChanged, bIsParticipating) == 0x000000, "Member 'FortSquadSelectionMenu_OnLocalPlayerParticipationChanged::bIsParticipating' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorBuildCountBase.OnBuildCountChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorBuildCountBase_OnBuildCountChanged final
{
public:
	int32                                         OldCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorBuildCountBase_OnBuildCountChanged) == 0x000004, "Wrong alignment on AthenaSpectatorBuildCountBase_OnBuildCountChanged");
static_assert(sizeof(AthenaSpectatorBuildCountBase_OnBuildCountChanged) == 0x000008, "Wrong size on AthenaSpectatorBuildCountBase_OnBuildCountChanged");
static_assert(offsetof(AthenaSpectatorBuildCountBase_OnBuildCountChanged, OldCount) == 0x000000, "Member 'AthenaSpectatorBuildCountBase_OnBuildCountChanged::OldCount' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorBuildCountBase_OnBuildCountChanged, NewCount) == 0x000004, "Member 'AthenaSpectatorBuildCountBase_OnBuildCountChanged::NewCount' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorBuildCountBase.OnFollowedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorBuildCountBase_OnFollowedPlayerChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatingPC;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       NewFollowedPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorBuildCountBase_OnFollowedPlayerChanged) == 0x000008, "Wrong alignment on AthenaSpectatorBuildCountBase_OnFollowedPlayerChanged");
static_assert(sizeof(AthenaSpectatorBuildCountBase_OnFollowedPlayerChanged) == 0x000010, "Wrong size on AthenaSpectatorBuildCountBase_OnFollowedPlayerChanged");
static_assert(offsetof(AthenaSpectatorBuildCountBase_OnFollowedPlayerChanged, SpectatingPC) == 0x000000, "Member 'AthenaSpectatorBuildCountBase_OnFollowedPlayerChanged::SpectatingPC' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorBuildCountBase_OnFollowedPlayerChanged, NewFollowedPlayer) == 0x000008, "Member 'AthenaSpectatorBuildCountBase_OnFollowedPlayerChanged::NewFollowedPlayer' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorBuildCountBase.OnWorldItemListChanged
// 0x0020 (0x0020 - 0x0000)
struct AthenaSpectatorBuildCountBase_OnWorldItemListChanged final
{
public:
	TArray<class UFortWorldItem*>                 ItemsAdded;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UFortWorldItem*>                 ItemsRemoved;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorBuildCountBase_OnWorldItemListChanged) == 0x000008, "Wrong alignment on AthenaSpectatorBuildCountBase_OnWorldItemListChanged");
static_assert(sizeof(AthenaSpectatorBuildCountBase_OnWorldItemListChanged) == 0x000020, "Wrong size on AthenaSpectatorBuildCountBase_OnWorldItemListChanged");
static_assert(offsetof(AthenaSpectatorBuildCountBase_OnWorldItemListChanged, ItemsAdded) == 0x000000, "Member 'AthenaSpectatorBuildCountBase_OnWorldItemListChanged::ItemsAdded' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorBuildCountBase_OnWorldItemListChanged, ItemsRemoved) == 0x000010, "Member 'AthenaSpectatorBuildCountBase_OnWorldItemListChanged::ItemsRemoved' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingTile.PlaylistChanged
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaMatchmakingTile_PlaylistChanged final
{
public:
	struct FPlaylistFrontEndData                  PlaylistToRepresent;                               // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingTile_PlaylistChanged) == 0x000008, "Wrong alignment on FortAthenaMatchmakingTile_PlaylistChanged");
static_assert(sizeof(FortAthenaMatchmakingTile_PlaylistChanged) == 0x000028, "Wrong size on FortAthenaMatchmakingTile_PlaylistChanged");
static_assert(offsetof(FortAthenaMatchmakingTile_PlaylistChanged, PlaylistToRepresent) == 0x000000, "Member 'FortAthenaMatchmakingTile_PlaylistChanged::PlaylistToRepresent' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingTile.SetTileSize
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaMatchmakingTile_SetTileSize final
{
public:
	int32                                         NumRowTiles;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingTile_SetTileSize) == 0x000004, "Wrong alignment on FortAthenaMatchmakingTile_SetTileSize");
static_assert(sizeof(FortAthenaMatchmakingTile_SetTileSize) == 0x000004, "Wrong size on FortAthenaMatchmakingTile_SetTileSize");
static_assert(offsetof(FortAthenaMatchmakingTile_SetTileSize, NumRowTiles) == 0x000000, "Member 'FortAthenaMatchmakingTile_SetTileSize::NumRowTiles' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingTile.UpdateTileAvailability
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMatchmakingTile_UpdateTileAvailability final
{
public:
	bool                                          Available;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingTile_UpdateTileAvailability) == 0x000001, "Wrong alignment on FortAthenaMatchmakingTile_UpdateTileAvailability");
static_assert(sizeof(FortAthenaMatchmakingTile_UpdateTileAvailability) == 0x000001, "Wrong size on FortAthenaMatchmakingTile_UpdateTileAvailability");
static_assert(offsetof(FortAthenaMatchmakingTile_UpdateTileAvailability, Available) == 0x000000, "Member 'FortAthenaMatchmakingTile_UpdateTileAvailability::Available' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHitPointBarBase.OnCurrentValueChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaSpectatorHitPointBarBase_OnCurrentValueChanged final
{
public:
	float                                         InCurrentValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorHitPointBarBase_OnCurrentValueChanged) == 0x000004, "Wrong alignment on AthenaSpectatorHitPointBarBase_OnCurrentValueChanged");
static_assert(sizeof(AthenaSpectatorHitPointBarBase_OnCurrentValueChanged) == 0x000004, "Wrong size on AthenaSpectatorHitPointBarBase_OnCurrentValueChanged");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_OnCurrentValueChanged, InCurrentValue) == 0x000000, "Member 'AthenaSpectatorHitPointBarBase_OnCurrentValueChanged::InCurrentValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHitPointBarBase.OnDBNOChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorHitPointBarBase_OnDBNOChanged final
{
public:
	bool                                          bInIsDBNO;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorHitPointBarBase_OnDBNOChanged) == 0x000001, "Wrong alignment on AthenaSpectatorHitPointBarBase_OnDBNOChanged");
static_assert(sizeof(AthenaSpectatorHitPointBarBase_OnDBNOChanged) == 0x000001, "Wrong size on AthenaSpectatorHitPointBarBase_OnDBNOChanged");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_OnDBNOChanged, bInIsDBNO) == 0x000000, "Member 'AthenaSpectatorHitPointBarBase_OnDBNOChanged::bInIsDBNO' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHitPointBarBase.OnDBNOStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorHitPointBarBase_OnDBNOStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDBNO;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorHitPointBarBase_OnDBNOStateChanged) == 0x000008, "Wrong alignment on AthenaSpectatorHitPointBarBase_OnDBNOStateChanged");
static_assert(sizeof(AthenaSpectatorHitPointBarBase_OnDBNOStateChanged) == 0x000010, "Wrong size on AthenaSpectatorHitPointBarBase_OnDBNOStateChanged");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_OnDBNOStateChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorHitPointBarBase_OnDBNOStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_OnDBNOStateChanged, bInIsDBNO) == 0x000008, "Member 'AthenaSpectatorHitPointBarBase_OnDBNOStateChanged::bInIsDBNO' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHitPointBarBase.OnDeltaValueChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaSpectatorHitPointBarBase_OnDeltaValueChanged final
{
public:
	float                                         InDeltaValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorHitPointBarBase_OnDeltaValueChanged) == 0x000004, "Wrong alignment on AthenaSpectatorHitPointBarBase_OnDeltaValueChanged");
static_assert(sizeof(AthenaSpectatorHitPointBarBase_OnDeltaValueChanged) == 0x000004, "Wrong size on AthenaSpectatorHitPointBarBase_OnDeltaValueChanged");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_OnDeltaValueChanged, InDeltaValue) == 0x000000, "Member 'AthenaSpectatorHitPointBarBase_OnDeltaValueChanged::InDeltaValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHitPointBarBase.OnEliminatedStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorHitPointBarBase_OnEliminatedStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsEliminated;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorHitPointBarBase_OnEliminatedStateChanged) == 0x000008, "Wrong alignment on AthenaSpectatorHitPointBarBase_OnEliminatedStateChanged");
static_assert(sizeof(AthenaSpectatorHitPointBarBase_OnEliminatedStateChanged) == 0x000010, "Wrong size on AthenaSpectatorHitPointBarBase_OnEliminatedStateChanged");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_OnEliminatedStateChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorHitPointBarBase_OnEliminatedStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_OnEliminatedStateChanged, bInIsEliminated) == 0x000008, "Member 'AthenaSpectatorHitPointBarBase_OnEliminatedStateChanged::bInIsEliminated' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHitPointBarBase.OnValueDamaged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorHitPointBarBase_OnValueDamaged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValuePercent;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorHitPointBarBase_OnValueDamaged) == 0x000008, "Wrong alignment on AthenaSpectatorHitPointBarBase_OnValueDamaged");
static_assert(sizeof(AthenaSpectatorHitPointBarBase_OnValueDamaged) == 0x000010, "Wrong size on AthenaSpectatorHitPointBarBase_OnValueDamaged");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_OnValueDamaged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorHitPointBarBase_OnValueDamaged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_OnValueDamaged, InValuePercent) == 0x000008, "Member 'AthenaSpectatorHitPointBarBase_OnValueDamaged::InValuePercent' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHitPointBarBase.OnValueHealed
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorHitPointBarBase_OnValueHealed final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValuePercent;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorHitPointBarBase_OnValueHealed) == 0x000008, "Wrong alignment on AthenaSpectatorHitPointBarBase_OnValueHealed");
static_assert(sizeof(AthenaSpectatorHitPointBarBase_OnValueHealed) == 0x000010, "Wrong size on AthenaSpectatorHitPointBarBase_OnValueHealed");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_OnValueHealed, InPlayerData) == 0x000000, "Member 'AthenaSpectatorHitPointBarBase_OnValueHealed::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_OnValueHealed, InValuePercent) == 0x000008, "Member 'AthenaSpectatorHitPointBarBase_OnValueHealed::InValuePercent' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHitPointBarBase.SetPlayerData
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorHitPointBarBase_SetPlayerData final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorHitPointBarBase_SetPlayerData) == 0x000008, "Wrong alignment on AthenaSpectatorHitPointBarBase_SetPlayerData");
static_assert(sizeof(AthenaSpectatorHitPointBarBase_SetPlayerData) == 0x000008, "Wrong size on AthenaSpectatorHitPointBarBase_SetPlayerData");
static_assert(offsetof(AthenaSpectatorHitPointBarBase_SetPlayerData, InPlayerData) == 0x000000, "Member 'AthenaSpectatorHitPointBarBase_SetPlayerData::InPlayerData' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHUDControlsBase.HandleBattleMapTimelineModeChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorHUDControlsBase_HandleBattleMapTimelineModeChanged final
{
public:
	bool                                          bIsOnTimelineMode;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorHUDControlsBase_HandleBattleMapTimelineModeChanged) == 0x000001, "Wrong alignment on AthenaSpectatorHUDControlsBase_HandleBattleMapTimelineModeChanged");
static_assert(sizeof(AthenaSpectatorHUDControlsBase_HandleBattleMapTimelineModeChanged) == 0x000001, "Wrong size on AthenaSpectatorHUDControlsBase_HandleBattleMapTimelineModeChanged");
static_assert(offsetof(AthenaSpectatorHUDControlsBase_HandleBattleMapTimelineModeChanged, bIsOnTimelineMode) == 0x000000, "Member 'AthenaSpectatorHUDControlsBase_HandleBattleMapTimelineModeChanged::bIsOnTimelineMode' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHUDControlsBase.HandleReplayHighlightsAvailable
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorHUDControlsBase_HandleReplayHighlightsAvailable final
{
public:
	class AFortReplaySpectator*                   Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAvailable;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorHUDControlsBase_HandleReplayHighlightsAvailable) == 0x000008, "Wrong alignment on AthenaSpectatorHUDControlsBase_HandleReplayHighlightsAvailable");
static_assert(sizeof(AthenaSpectatorHUDControlsBase_HandleReplayHighlightsAvailable) == 0x000010, "Wrong size on AthenaSpectatorHUDControlsBase_HandleReplayHighlightsAvailable");
static_assert(offsetof(AthenaSpectatorHUDControlsBase_HandleReplayHighlightsAvailable, Sender) == 0x000000, "Member 'AthenaSpectatorHUDControlsBase_HandleReplayHighlightsAvailable::Sender' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorHUDControlsBase_HandleReplayHighlightsAvailable, bIsAvailable) == 0x000008, "Member 'AthenaSpectatorHUDControlsBase_HandleReplayHighlightsAvailable::bIsAvailable' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHUDControlsBase.OnCameraTypeChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorHUDControlsBase_OnCameraTypeChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatorPC;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpectatorCameraType                          NewCameraType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorHUDControlsBase_OnCameraTypeChanged) == 0x000008, "Wrong alignment on AthenaSpectatorHUDControlsBase_OnCameraTypeChanged");
static_assert(sizeof(AthenaSpectatorHUDControlsBase_OnCameraTypeChanged) == 0x000010, "Wrong size on AthenaSpectatorHUDControlsBase_OnCameraTypeChanged");
static_assert(offsetof(AthenaSpectatorHUDControlsBase_OnCameraTypeChanged, SpectatorPC) == 0x000000, "Member 'AthenaSpectatorHUDControlsBase_OnCameraTypeChanged::SpectatorPC' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorHUDControlsBase_OnCameraTypeChanged, NewCameraType) == 0x000008, "Member 'AthenaSpectatorHUDControlsBase_OnCameraTypeChanged::NewCameraType' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHUDControlsBase.OnCameraTypeChangedInternal
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorHUDControlsBase_OnCameraTypeChangedInternal final
{
public:
	class AFortPlayerControllerSpectating*        SpectatorPC;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpectatorCameraType                          NewCameraType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorHUDControlsBase_OnCameraTypeChangedInternal) == 0x000008, "Wrong alignment on AthenaSpectatorHUDControlsBase_OnCameraTypeChangedInternal");
static_assert(sizeof(AthenaSpectatorHUDControlsBase_OnCameraTypeChangedInternal) == 0x000010, "Wrong size on AthenaSpectatorHUDControlsBase_OnCameraTypeChangedInternal");
static_assert(offsetof(AthenaSpectatorHUDControlsBase_OnCameraTypeChangedInternal, SpectatorPC) == 0x000000, "Member 'AthenaSpectatorHUDControlsBase_OnCameraTypeChangedInternal::SpectatorPC' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorHUDControlsBase_OnCameraTypeChangedInternal, NewCameraType) == 0x000008, "Member 'AthenaSpectatorHUDControlsBase_OnCameraTypeChangedInternal::NewCameraType' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorHUDControlsBase.OnFollowedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorHUDControlsBase_OnFollowedPlayerChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatorPC;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       NewFollowedPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorHUDControlsBase_OnFollowedPlayerChanged) == 0x000008, "Wrong alignment on AthenaSpectatorHUDControlsBase_OnFollowedPlayerChanged");
static_assert(sizeof(AthenaSpectatorHUDControlsBase_OnFollowedPlayerChanged) == 0x000010, "Wrong size on AthenaSpectatorHUDControlsBase_OnFollowedPlayerChanged");
static_assert(offsetof(AthenaSpectatorHUDControlsBase_OnFollowedPlayerChanged, SpectatorPC) == 0x000000, "Member 'AthenaSpectatorHUDControlsBase_OnFollowedPlayerChanged::SpectatorPC' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorHUDControlsBase_OnFollowedPlayerChanged, NewFollowedPlayer) == 0x000008, "Member 'AthenaSpectatorHUDControlsBase_OnFollowedPlayerChanged::NewFollowedPlayer' has a wrong offset!");

// Function FortniteUI.FortCreativeOptions.GetVisibleOptionsForTab
// 0x0020 (0x0020 - 0x0000)
struct FortCreativeOptions_GetVisibleOptionsForTab final
{
public:
	ESettingTab                                   TabType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESettingType>                          VisibleOptions;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativeOptions_GetVisibleOptionsForTab) == 0x000008, "Wrong alignment on FortCreativeOptions_GetVisibleOptionsForTab");
static_assert(sizeof(FortCreativeOptions_GetVisibleOptionsForTab) == 0x000020, "Wrong size on FortCreativeOptions_GetVisibleOptionsForTab");
static_assert(offsetof(FortCreativeOptions_GetVisibleOptionsForTab, TabType) == 0x000000, "Member 'FortCreativeOptions_GetVisibleOptionsForTab::TabType' has a wrong offset!");
static_assert(offsetof(FortCreativeOptions_GetVisibleOptionsForTab, VisibleOptions) == 0x000008, "Member 'FortCreativeOptions_GetVisibleOptionsForTab::VisibleOptions' has a wrong offset!");
static_assert(offsetof(FortCreativeOptions_GetVisibleOptionsForTab, ReturnValue) == 0x000018, "Member 'FortCreativeOptions_GetVisibleOptionsForTab::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativeOptions.IsVisibleOption
// 0x0002 (0x0002 - 0x0000)
struct FortCreativeOptions_IsVisibleOption final
{
public:
	ESettingType                                  SettingType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeOptions_IsVisibleOption) == 0x000001, "Wrong alignment on FortCreativeOptions_IsVisibleOption");
static_assert(sizeof(FortCreativeOptions_IsVisibleOption) == 0x000002, "Wrong size on FortCreativeOptions_IsVisibleOption");
static_assert(offsetof(FortCreativeOptions_IsVisibleOption, SettingType) == 0x000000, "Member 'FortCreativeOptions_IsVisibleOption::SettingType' has a wrong offset!");
static_assert(offsetof(FortCreativeOptions_IsVisibleOption, ReturnValue) == 0x000001, "Member 'FortCreativeOptions_IsVisibleOption::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorInventorySlotBase.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorInventorySlotBase_SetIsSelected final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorInventorySlotBase_SetIsSelected) == 0x000001, "Wrong alignment on AthenaSpectatorInventorySlotBase_SetIsSelected");
static_assert(sizeof(AthenaSpectatorInventorySlotBase_SetIsSelected) == 0x000001, "Wrong size on AthenaSpectatorInventorySlotBase_SetIsSelected");
static_assert(offsetof(AthenaSpectatorInventorySlotBase_SetIsSelected, bIsSelected) == 0x000000, "Member 'AthenaSpectatorInventorySlotBase_SetIsSelected::bIsSelected' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorInventorySlotBase.SetItem
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorInventorySlotBase_SetItem final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorInventorySlotBase_SetItem) == 0x000008, "Wrong alignment on AthenaSpectatorInventorySlotBase_SetItem");
static_assert(sizeof(AthenaSpectatorInventorySlotBase_SetItem) == 0x000008, "Wrong size on AthenaSpectatorInventorySlotBase_SetItem");
static_assert(offsetof(AthenaSpectatorInventorySlotBase_SetItem, Item) == 0x000000, "Member 'AthenaSpectatorInventorySlotBase_SetItem::Item' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorInventorySlotBase.GetItem
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorInventorySlotBase_GetItem final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorInventorySlotBase_GetItem) == 0x000008, "Wrong alignment on AthenaSpectatorInventorySlotBase_GetItem");
static_assert(sizeof(AthenaSpectatorInventorySlotBase_GetItem) == 0x000008, "Wrong size on AthenaSpectatorInventorySlotBase_GetItem");
static_assert(offsetof(AthenaSpectatorInventorySlotBase_GetItem, ReturnValue) == 0x000000, "Member 'AthenaSpectatorInventorySlotBase_GetItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerListBase.FocusListView
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorPlayerListBase_FocusListView final
{
public:
	class UAthenaRemotePlayerViewData*            ItemToFocus;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerListBase_FocusListView) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerListBase_FocusListView");
static_assert(sizeof(AthenaSpectatorPlayerListBase_FocusListView) == 0x000008, "Wrong size on AthenaSpectatorPlayerListBase_FocusListView");
static_assert(offsetof(AthenaSpectatorPlayerListBase_FocusListView, ItemToFocus) == 0x000000, "Member 'AthenaSpectatorPlayerListBase_FocusListView::ItemToFocus' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerListBase.SetSortMethod
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorPlayerListBase_SetSortMethod final
{
public:
	ESpectatorPlayerListSortMethod                InNewSortMethod;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerListBase_SetSortMethod) == 0x000001, "Wrong alignment on AthenaSpectatorPlayerListBase_SetSortMethod");
static_assert(sizeof(AthenaSpectatorPlayerListBase_SetSortMethod) == 0x000001, "Wrong size on AthenaSpectatorPlayerListBase_SetSortMethod");
static_assert(offsetof(AthenaSpectatorPlayerListBase_SetSortMethod, InNewSortMethod) == 0x000000, "Member 'AthenaSpectatorPlayerListBase_SetSortMethod::InNewSortMethod' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaSpectatorPlayerListBase.SortMethodDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorPlayerListBase_SortMethodDelegate__DelegateSignature final
{
public:
	ESpectatorPlayerListSortMethod                SortMethodParam;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerListBase_SortMethodDelegate__DelegateSignature) == 0x000001, "Wrong alignment on AthenaSpectatorPlayerListBase_SortMethodDelegate__DelegateSignature");
static_assert(sizeof(AthenaSpectatorPlayerListBase_SortMethodDelegate__DelegateSignature) == 0x000001, "Wrong size on AthenaSpectatorPlayerListBase_SortMethodDelegate__DelegateSignature");
static_assert(offsetof(AthenaSpectatorPlayerListBase_SortMethodDelegate__DelegateSignature, SortMethodParam) == 0x000000, "Member 'AthenaSpectatorPlayerListBase_SortMethodDelegate__DelegateSignature::SortMethodParam' has a wrong offset!");

// Function FortniteUI.FortTournamentLiveGameSessionEntry.OnEntrySet
// 0x0004 (0x0004 - 0x0000)
struct FortTournamentLiveGameSessionEntry_OnEntrySet final
{
public:
	int32                                         EntryIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTournamentLiveGameSessionEntry_OnEntrySet) == 0x000004, "Wrong alignment on FortTournamentLiveGameSessionEntry_OnEntrySet");
static_assert(sizeof(FortTournamentLiveGameSessionEntry_OnEntrySet) == 0x000004, "Wrong size on FortTournamentLiveGameSessionEntry_OnEntrySet");
static_assert(offsetof(FortTournamentLiveGameSessionEntry_OnEntrySet, EntryIndex) == 0x000000, "Member 'FortTournamentLiveGameSessionEntry_OnEntrySet::EntryIndex' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.OnListItemClicked
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_OnListItemClicked final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_OnListItemClicked) == 0x000008, "Wrong alignment on AthenaSpectatorMapPlayerListBase_OnListItemClicked");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_OnListItemClicked) == 0x000008, "Wrong size on AthenaSpectatorMapPlayerListBase_OnListItemClicked");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnListItemClicked, Item) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_OnListItemClicked::Item' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.OnPlayerEliminatedStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_OnPlayerEliminatedStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsEliminated;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_OnPlayerEliminatedStateChanged) == 0x000008, "Wrong alignment on AthenaSpectatorMapPlayerListBase_OnPlayerEliminatedStateChanged");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_OnPlayerEliminatedStateChanged) == 0x000010, "Wrong size on AthenaSpectatorMapPlayerListBase_OnPlayerEliminatedStateChanged");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnPlayerEliminatedStateChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_OnPlayerEliminatedStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnPlayerEliminatedStateChanged, bInIsEliminated) == 0x000008, "Member 'AthenaSpectatorMapPlayerListBase_OnPlayerEliminatedStateChanged::bInIsEliminated' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.OnPlayerIsInRelevancyChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_OnPlayerIsInRelevancyChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsInRelevancy;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_OnPlayerIsInRelevancyChanged) == 0x000008, "Wrong alignment on AthenaSpectatorMapPlayerListBase_OnPlayerIsInRelevancyChanged");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_OnPlayerIsInRelevancyChanged) == 0x000010, "Wrong size on AthenaSpectatorMapPlayerListBase_OnPlayerIsInRelevancyChanged");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnPlayerIsInRelevancyChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_OnPlayerIsInRelevancyChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnPlayerIsInRelevancyChanged, bInIsInRelevancy) == 0x000008, "Member 'AthenaSpectatorMapPlayerListBase_OnPlayerIsInRelevancyChanged::bInIsInRelevancy' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.OnPlayerKillScoreChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_OnPlayerKillScoreChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InKillScore;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_OnPlayerKillScoreChanged) == 0x000008, "Wrong alignment on AthenaSpectatorMapPlayerListBase_OnPlayerKillScoreChanged");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_OnPlayerKillScoreChanged) == 0x000010, "Wrong size on AthenaSpectatorMapPlayerListBase_OnPlayerKillScoreChanged");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnPlayerKillScoreChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_OnPlayerKillScoreChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnPlayerKillScoreChanged, InKillScore) == 0x000008, "Member 'AthenaSpectatorMapPlayerListBase_OnPlayerKillScoreChanged::InKillScore' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.OnPlayerNameChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_OnPlayerNameChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlayerName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_OnPlayerNameChanged) == 0x000008, "Wrong alignment on AthenaSpectatorMapPlayerListBase_OnPlayerNameChanged");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_OnPlayerNameChanged) == 0x000018, "Wrong size on AthenaSpectatorMapPlayerListBase_OnPlayerNameChanged");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnPlayerNameChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_OnPlayerNameChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnPlayerNameChanged, InPlayerName) == 0x000008, "Member 'AthenaSpectatorMapPlayerListBase_OnPlayerNameChanged::InPlayerName' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.OnPlayerSquadIdChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_OnPlayerSquadIdChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InSquadId;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_OnPlayerSquadIdChanged) == 0x000008, "Wrong alignment on AthenaSpectatorMapPlayerListBase_OnPlayerSquadIdChanged");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_OnPlayerSquadIdChanged) == 0x000010, "Wrong size on AthenaSpectatorMapPlayerListBase_OnPlayerSquadIdChanged");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnPlayerSquadIdChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_OnPlayerSquadIdChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnPlayerSquadIdChanged, InSquadId) == 0x000008, "Member 'AthenaSpectatorMapPlayerListBase_OnPlayerSquadIdChanged::InSquadId' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.OnSortByEliminationsActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_OnSortByEliminationsActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_OnSortByEliminationsActionExecuted) == 0x000001, "Wrong alignment on AthenaSpectatorMapPlayerListBase_OnSortByEliminationsActionExecuted");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_OnSortByEliminationsActionExecuted) == 0x000001, "Wrong size on AthenaSpectatorMapPlayerListBase_OnSortByEliminationsActionExecuted");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnSortByEliminationsActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_OnSortByEliminationsActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.OnSortByPlayerNameActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_OnSortByPlayerNameActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_OnSortByPlayerNameActionExecuted) == 0x000001, "Wrong alignment on AthenaSpectatorMapPlayerListBase_OnSortByPlayerNameActionExecuted");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_OnSortByPlayerNameActionExecuted) == 0x000001, "Wrong size on AthenaSpectatorMapPlayerListBase_OnSortByPlayerNameActionExecuted");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnSortByPlayerNameActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_OnSortByPlayerNameActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.OnSortBySquadIdActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_OnSortBySquadIdActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_OnSortBySquadIdActionExecuted) == 0x000001, "Wrong alignment on AthenaSpectatorMapPlayerListBase_OnSortBySquadIdActionExecuted");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_OnSortBySquadIdActionExecuted) == 0x000001, "Wrong size on AthenaSpectatorMapPlayerListBase_OnSortBySquadIdActionExecuted");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnSortBySquadIdActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_OnSortBySquadIdActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.OnSortByStateActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_OnSortByStateActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_OnSortByStateActionExecuted) == 0x000001, "Wrong alignment on AthenaSpectatorMapPlayerListBase_OnSortByStateActionExecuted");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_OnSortByStateActionExecuted) == 0x000001, "Wrong size on AthenaSpectatorMapPlayerListBase_OnSortByStateActionExecuted");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnSortByStateActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_OnSortByStateActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.OnToggleOnlyShowMapPlayersActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_OnToggleOnlyShowMapPlayersActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_OnToggleOnlyShowMapPlayersActionExecuted) == 0x000001, "Wrong alignment on AthenaSpectatorMapPlayerListBase_OnToggleOnlyShowMapPlayersActionExecuted");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_OnToggleOnlyShowMapPlayersActionExecuted) == 0x000001, "Wrong size on AthenaSpectatorMapPlayerListBase_OnToggleOnlyShowMapPlayersActionExecuted");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_OnToggleOnlyShowMapPlayersActionExecuted, bPassThrough) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_OnToggleOnlyShowMapPlayersActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.SetSquadIdsVisible
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible final
{
public:
	bool                                          bSquadIdsVisible;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible) == 0x000001, "Wrong alignment on AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible) == 0x000001, "Wrong size on AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible, bSquadIdsVisible) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible::bSquadIdsVisible' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.SetSquadIdsVisible_BP
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible_BP final
{
public:
	bool                                          bSquadIdsVisible;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible_BP) == 0x000001, "Wrong alignment on AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible_BP");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible_BP) == 0x000001, "Wrong size on AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible_BP");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible_BP, bSquadIdsVisible) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_SetSquadIdsVisible_BP::bSquadIdsVisible' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMapPlayerListBase.GetNextSortMethod
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorMapPlayerListBase_GetNextSortMethod final
{
public:
	ESpectatorPlayerListSortMethod                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMapPlayerListBase_GetNextSortMethod) == 0x000001, "Wrong alignment on AthenaSpectatorMapPlayerListBase_GetNextSortMethod");
static_assert(sizeof(AthenaSpectatorMapPlayerListBase_GetNextSortMethod) == 0x000001, "Wrong size on AthenaSpectatorMapPlayerListBase_GetNextSortMethod");
static_assert(offsetof(AthenaSpectatorMapPlayerListBase_GetNextSortMethod, ReturnValue) == 0x000000, "Member 'AthenaSpectatorMapPlayerListBase_GetNextSortMethod::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStandardGlobalActionDetailsDataSource.Construct
// 0x0028 (0x0028 - 0x0000)
struct FortStandardGlobalActionDetailsDataSource_Construct final
{
public:
	class UObject*                                Param_Outer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortGlobalUIContext*                   Param_GlobalUIContext;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonInputSubsystem*                  Param_CommonInputSubsystem;                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGlobalAction                             GlobalAction;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGlobalActionDetailsFunctionContext Param_ActionDetailsContext;                        // 0x0019(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortStandardGlobalActionDetailsDataSource* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStandardGlobalActionDetailsDataSource_Construct) == 0x000008, "Wrong alignment on FortStandardGlobalActionDetailsDataSource_Construct");
static_assert(sizeof(FortStandardGlobalActionDetailsDataSource_Construct) == 0x000028, "Wrong size on FortStandardGlobalActionDetailsDataSource_Construct");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_Construct, Param_Outer) == 0x000000, "Member 'FortStandardGlobalActionDetailsDataSource_Construct::Param_Outer' has a wrong offset!");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_Construct, Param_GlobalUIContext) == 0x000008, "Member 'FortStandardGlobalActionDetailsDataSource_Construct::Param_GlobalUIContext' has a wrong offset!");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_Construct, Param_CommonInputSubsystem) == 0x000010, "Member 'FortStandardGlobalActionDetailsDataSource_Construct::Param_CommonInputSubsystem' has a wrong offset!");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_Construct, GlobalAction) == 0x000018, "Member 'FortStandardGlobalActionDetailsDataSource_Construct::GlobalAction' has a wrong offset!");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_Construct, Param_ActionDetailsContext) == 0x000019, "Member 'FortStandardGlobalActionDetailsDataSource_Construct::Param_ActionDetailsContext' has a wrong offset!");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_Construct, ReturnValue) == 0x000020, "Member 'FortStandardGlobalActionDetailsDataSource_Construct::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStandardGlobalActionDetailsDataSource.ConstructWithDefaultContexts
// 0x0020 (0x0020 - 0x0000)
struct FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts final
{
public:
	class UObject*                                Param_Outer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ContextWidget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGlobalAction                             GlobalAction;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGlobalActionDetailsFunctionContext Param_ActionDetailsContext;                        // 0x0011(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortStandardGlobalActionDetailsDataSource* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts) == 0x000008, "Wrong alignment on FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts");
static_assert(sizeof(FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts) == 0x000020, "Wrong size on FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts, Param_Outer) == 0x000000, "Member 'FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts::Param_Outer' has a wrong offset!");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts, ContextWidget) == 0x000008, "Member 'FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts::ContextWidget' has a wrong offset!");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts, GlobalAction) == 0x000010, "Member 'FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts::GlobalAction' has a wrong offset!");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts, Param_ActionDetailsContext) == 0x000011, "Member 'FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts::Param_ActionDetailsContext' has a wrong offset!");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts, ReturnValue) == 0x000018, "Member 'FortStandardGlobalActionDetailsDataSource_ConstructWithDefaultContexts::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteUI.FortStandardGlobalActionDetailsDataSource.FortNameDataSourceOnChangeInternalDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortStandardGlobalActionDetailsDataSource_FortNameDataSourceOnChangeInternalDelegate__DelegateSignature final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStandardGlobalActionDetailsDataSource_FortNameDataSourceOnChangeInternalDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortStandardGlobalActionDetailsDataSource_FortNameDataSourceOnChangeInternalDelegate__DelegateSignature");
static_assert(sizeof(FortStandardGlobalActionDetailsDataSource_FortNameDataSourceOnChangeInternalDelegate__DelegateSignature) == 0x000008, "Wrong size on FortStandardGlobalActionDetailsDataSource_FortNameDataSourceOnChangeInternalDelegate__DelegateSignature");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_FortNameDataSourceOnChangeInternalDelegate__DelegateSignature, Source) == 0x000000, "Member 'FortStandardGlobalActionDetailsDataSource_FortNameDataSourceOnChangeInternalDelegate__DelegateSignature::Source' has a wrong offset!");

// Function FortniteUI.FortStandardGlobalActionDetailsDataSource.HandlePlayerControllerChanged
// 0x0008 (0x0008 - 0x0000)
struct FortStandardGlobalActionDetailsDataSource_HandlePlayerControllerChanged final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStandardGlobalActionDetailsDataSource_HandlePlayerControllerChanged) == 0x000008, "Wrong alignment on FortStandardGlobalActionDetailsDataSource_HandlePlayerControllerChanged");
static_assert(sizeof(FortStandardGlobalActionDetailsDataSource_HandlePlayerControllerChanged) == 0x000008, "Wrong size on FortStandardGlobalActionDetailsDataSource_HandlePlayerControllerChanged");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_HandlePlayerControllerChanged, Source) == 0x000000, "Member 'FortStandardGlobalActionDetailsDataSource_HandlePlayerControllerChanged::Source' has a wrong offset!");

// Function FortniteUI.FortStandardGlobalActionDetailsDataSource.SetActionDetailsContext
// 0x0001 (0x0001 - 0x0000)
struct FortStandardGlobalActionDetailsDataSource_SetActionDetailsContext final
{
public:
	struct FFortGlobalActionDetailsFunctionContext Value;                                             // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStandardGlobalActionDetailsDataSource_SetActionDetailsContext) == 0x000001, "Wrong alignment on FortStandardGlobalActionDetailsDataSource_SetActionDetailsContext");
static_assert(sizeof(FortStandardGlobalActionDetailsDataSource_SetActionDetailsContext) == 0x000001, "Wrong size on FortStandardGlobalActionDetailsDataSource_SetActionDetailsContext");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_SetActionDetailsContext, Value) == 0x000000, "Member 'FortStandardGlobalActionDetailsDataSource_SetActionDetailsContext::Value' has a wrong offset!");

// Function FortniteUI.FortStandardGlobalActionDetailsDataSource.SetCommonInputSubsystem
// 0x0008 (0x0008 - 0x0000)
struct FortStandardGlobalActionDetailsDataSource_SetCommonInputSubsystem final
{
public:
	class UCommonInputSubsystem*                  Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStandardGlobalActionDetailsDataSource_SetCommonInputSubsystem) == 0x000008, "Wrong alignment on FortStandardGlobalActionDetailsDataSource_SetCommonInputSubsystem");
static_assert(sizeof(FortStandardGlobalActionDetailsDataSource_SetCommonInputSubsystem) == 0x000008, "Wrong size on FortStandardGlobalActionDetailsDataSource_SetCommonInputSubsystem");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_SetCommonInputSubsystem, Value) == 0x000000, "Member 'FortStandardGlobalActionDetailsDataSource_SetCommonInputSubsystem::Value' has a wrong offset!");

// Function FortniteUI.FortStandardGlobalActionDetailsDataSource.SetGlobalAction
// 0x0001 (0x0001 - 0x0000)
struct FortStandardGlobalActionDetailsDataSource_SetGlobalAction final
{
public:
	EFortGlobalAction                             Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStandardGlobalActionDetailsDataSource_SetGlobalAction) == 0x000001, "Wrong alignment on FortStandardGlobalActionDetailsDataSource_SetGlobalAction");
static_assert(sizeof(FortStandardGlobalActionDetailsDataSource_SetGlobalAction) == 0x000001, "Wrong size on FortStandardGlobalActionDetailsDataSource_SetGlobalAction");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_SetGlobalAction, Value) == 0x000000, "Member 'FortStandardGlobalActionDetailsDataSource_SetGlobalAction::Value' has a wrong offset!");

// Function FortniteUI.FortStandardGlobalActionDetailsDataSource.SetGlobalUIContext
// 0x0008 (0x0008 - 0x0000)
struct FortStandardGlobalActionDetailsDataSource_SetGlobalUIContext final
{
public:
	class UFortGlobalUIContext*                   Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStandardGlobalActionDetailsDataSource_SetGlobalUIContext) == 0x000008, "Wrong alignment on FortStandardGlobalActionDetailsDataSource_SetGlobalUIContext");
static_assert(sizeof(FortStandardGlobalActionDetailsDataSource_SetGlobalUIContext) == 0x000008, "Wrong size on FortStandardGlobalActionDetailsDataSource_SetGlobalUIContext");
static_assert(offsetof(FortStandardGlobalActionDetailsDataSource_SetGlobalUIContext, Value) == 0x000000, "Member 'FortStandardGlobalActionDetailsDataSource_SetGlobalUIContext::Value' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMaterialCountsBase.OnBuildingMaterialChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorMaterialCountsBase_OnBuildingMaterialChanged final
{
public:
	EFortResourceType                             BuildingMaterial;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMaterialCountsBase_OnBuildingMaterialChanged) == 0x000001, "Wrong alignment on AthenaSpectatorMaterialCountsBase_OnBuildingMaterialChanged");
static_assert(sizeof(AthenaSpectatorMaterialCountsBase_OnBuildingMaterialChanged) == 0x000001, "Wrong size on AthenaSpectatorMaterialCountsBase_OnBuildingMaterialChanged");
static_assert(offsetof(AthenaSpectatorMaterialCountsBase_OnBuildingMaterialChanged, BuildingMaterial) == 0x000000, "Member 'AthenaSpectatorMaterialCountsBase_OnBuildingMaterialChanged::BuildingMaterial' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMaterialCountsBase.OnFollowedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorMaterialCountsBase_OnFollowedPlayerChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatingPC;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       FollowedPS;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMaterialCountsBase_OnFollowedPlayerChanged) == 0x000008, "Wrong alignment on AthenaSpectatorMaterialCountsBase_OnFollowedPlayerChanged");
static_assert(sizeof(AthenaSpectatorMaterialCountsBase_OnFollowedPlayerChanged) == 0x000010, "Wrong size on AthenaSpectatorMaterialCountsBase_OnFollowedPlayerChanged");
static_assert(offsetof(AthenaSpectatorMaterialCountsBase_OnFollowedPlayerChanged, SpectatingPC) == 0x000000, "Member 'AthenaSpectatorMaterialCountsBase_OnFollowedPlayerChanged::SpectatingPC' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorMaterialCountsBase_OnFollowedPlayerChanged, FollowedPS) == 0x000008, "Member 'AthenaSpectatorMaterialCountsBase_OnFollowedPlayerChanged::FollowedPS' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorMaterialCountsBase.TimeToDisplay
// 0x0004 (0x0004 - 0x0000)
struct AthenaSpectatorMaterialCountsBase_TimeToDisplay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorMaterialCountsBase_TimeToDisplay) == 0x000004, "Wrong alignment on AthenaSpectatorMaterialCountsBase_TimeToDisplay");
static_assert(sizeof(AthenaSpectatorMaterialCountsBase_TimeToDisplay) == 0x000004, "Wrong size on AthenaSpectatorMaterialCountsBase_TimeToDisplay");
static_assert(offsetof(AthenaSpectatorMaterialCountsBase_TimeToDisplay, ReturnValue) == 0x000000, "Member 'AthenaSpectatorMaterialCountsBase_TimeToDisplay::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativePlayOptions.SetMatchmakingWidget
// 0x0008 (0x0008 - 0x0000)
struct FortCreativePlayOptions_SetMatchmakingWidget final
{
public:
	class UFortAthenaMatchmakingWidget*           InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePlayOptions_SetMatchmakingWidget) == 0x000008, "Wrong alignment on FortCreativePlayOptions_SetMatchmakingWidget");
static_assert(sizeof(FortCreativePlayOptions_SetMatchmakingWidget) == 0x000008, "Wrong size on FortCreativePlayOptions_SetMatchmakingWidget");
static_assert(offsetof(FortCreativePlayOptions_SetMatchmakingWidget, InWidget) == 0x000000, "Member 'FortCreativePlayOptions_SetMatchmakingWidget::InWidget' has a wrong offset!");

// Function FortniteUI.FortCreativePlayOptions.ShouldShowImportPlatformFriendsOption
// 0x0001 (0x0001 - 0x0000)
struct FortCreativePlayOptions_ShouldShowImportPlatformFriendsOption final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePlayOptions_ShouldShowImportPlatformFriendsOption) == 0x000001, "Wrong alignment on FortCreativePlayOptions_ShouldShowImportPlatformFriendsOption");
static_assert(sizeof(FortCreativePlayOptions_ShouldShowImportPlatformFriendsOption) == 0x000001, "Wrong size on FortCreativePlayOptions_ShouldShowImportPlatformFriendsOption");
static_assert(offsetof(FortCreativePlayOptions_ShouldShowImportPlatformFriendsOption, ReturnValue) == 0x000000, "Member 'FortCreativePlayOptions_ShouldShowImportPlatformFriendsOption::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.OnDetailStateChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorNameplateBase_OnDetailStateChanged final
{
public:
	EAthenaSpectatorNameplateDetailState          NewDetailState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_OnDetailStateChanged) == 0x000001, "Wrong alignment on AthenaSpectatorNameplateBase_OnDetailStateChanged");
static_assert(sizeof(AthenaSpectatorNameplateBase_OnDetailStateChanged) == 0x000001, "Wrong size on AthenaSpectatorNameplateBase_OnDetailStateChanged");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnDetailStateChanged, NewDetailState) == 0x000000, "Member 'AthenaSpectatorNameplateBase_OnDetailStateChanged::NewDetailState' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.OnDistanceStateChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorNameplateBase_OnDistanceStateChanged final
{
public:
	EAthenaSpectatorNameplateDistanceState        NewDistanceState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_OnDistanceStateChanged) == 0x000001, "Wrong alignment on AthenaSpectatorNameplateBase_OnDistanceStateChanged");
static_assert(sizeof(AthenaSpectatorNameplateBase_OnDistanceStateChanged) == 0x000001, "Wrong size on AthenaSpectatorNameplateBase_OnDistanceStateChanged");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnDistanceStateChanged, NewDistanceState) == 0x000000, "Member 'AthenaSpectatorNameplateBase_OnDistanceStateChanged::NewDistanceState' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.OnPlayerDataSet
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorNameplateBase_OnPlayerDataSet final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_OnPlayerDataSet) == 0x000008, "Wrong alignment on AthenaSpectatorNameplateBase_OnPlayerDataSet");
static_assert(sizeof(AthenaSpectatorNameplateBase_OnPlayerDataSet) == 0x000008, "Wrong size on AthenaSpectatorNameplateBase_OnPlayerDataSet");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnPlayerDataSet, InPlayerData) == 0x000000, "Member 'AthenaSpectatorNameplateBase_OnPlayerDataSet::InPlayerData' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.OnPlayerNameChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaSpectatorNameplateBase_OnPlayerNameChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlayerName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_OnPlayerNameChanged) == 0x000008, "Wrong alignment on AthenaSpectatorNameplateBase_OnPlayerNameChanged");
static_assert(sizeof(AthenaSpectatorNameplateBase_OnPlayerNameChanged) == 0x000018, "Wrong size on AthenaSpectatorNameplateBase_OnPlayerNameChanged");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnPlayerNameChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorNameplateBase_OnPlayerNameChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnPlayerNameChanged, InPlayerName) == 0x000008, "Member 'AthenaSpectatorNameplateBase_OnPlayerNameChanged::InPlayerName' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.OnPlayerPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorNameplateBase_OnPlayerPawnChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        InPlayerPawn;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_OnPlayerPawnChanged) == 0x000008, "Wrong alignment on AthenaSpectatorNameplateBase_OnPlayerPawnChanged");
static_assert(sizeof(AthenaSpectatorNameplateBase_OnPlayerPawnChanged) == 0x000010, "Wrong size on AthenaSpectatorNameplateBase_OnPlayerPawnChanged");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnPlayerPawnChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorNameplateBase_OnPlayerPawnChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnPlayerPawnChanged, InPlayerPawn) == 0x000008, "Member 'AthenaSpectatorNameplateBase_OnPlayerPawnChanged::InPlayerPawn' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.OnSquadIdChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorNameplateBase_OnSquadIdChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InSquadId;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorNameplateBase_OnSquadIdChanged) == 0x000008, "Wrong alignment on AthenaSpectatorNameplateBase_OnSquadIdChanged");
static_assert(sizeof(AthenaSpectatorNameplateBase_OnSquadIdChanged) == 0x000010, "Wrong size on AthenaSpectatorNameplateBase_OnSquadIdChanged");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnSquadIdChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorNameplateBase_OnSquadIdChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnSquadIdChanged, InSquadId) == 0x000008, "Member 'AthenaSpectatorNameplateBase_OnSquadIdChanged::InSquadId' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.OnTeamColorChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaSpectatorNameplateBase_OnTeamColorChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InTeamColor;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_OnTeamColorChanged) == 0x000008, "Wrong alignment on AthenaSpectatorNameplateBase_OnTeamColorChanged");
static_assert(sizeof(AthenaSpectatorNameplateBase_OnTeamColorChanged) == 0x000018, "Wrong size on AthenaSpectatorNameplateBase_OnTeamColorChanged");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnTeamColorChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorNameplateBase_OnTeamColorChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnTeamColorChanged, InTeamColor) == 0x000008, "Member 'AthenaSpectatorNameplateBase_OnTeamColorChanged::InTeamColor' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.OnVehicleStateChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaSpectatorNameplateBase_OnVehicleStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InNewVehicle;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOldVehicle;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_OnVehicleStateChanged) == 0x000008, "Wrong alignment on AthenaSpectatorNameplateBase_OnVehicleStateChanged");
static_assert(sizeof(AthenaSpectatorNameplateBase_OnVehicleStateChanged) == 0x000018, "Wrong size on AthenaSpectatorNameplateBase_OnVehicleStateChanged");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnVehicleStateChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorNameplateBase_OnVehicleStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnVehicleStateChanged, InNewVehicle) == 0x000008, "Member 'AthenaSpectatorNameplateBase_OnVehicleStateChanged::InNewVehicle' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnVehicleStateChanged, InOldVehicle) == 0x000010, "Member 'AthenaSpectatorNameplateBase_OnVehicleStateChanged::InOldVehicle' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.OnVehicleStateChanged_BP
// 0x0018 (0x0018 - 0x0000)
struct AthenaSpectatorNameplateBase_OnVehicleStateChanged_BP final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InNewVehicle;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOldVehicle;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_OnVehicleStateChanged_BP) == 0x000008, "Wrong alignment on AthenaSpectatorNameplateBase_OnVehicleStateChanged_BP");
static_assert(sizeof(AthenaSpectatorNameplateBase_OnVehicleStateChanged_BP) == 0x000018, "Wrong size on AthenaSpectatorNameplateBase_OnVehicleStateChanged_BP");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnVehicleStateChanged_BP, InPlayerData) == 0x000000, "Member 'AthenaSpectatorNameplateBase_OnVehicleStateChanged_BP::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnVehicleStateChanged_BP, InNewVehicle) == 0x000008, "Member 'AthenaSpectatorNameplateBase_OnVehicleStateChanged_BP::InNewVehicle' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnVehicleStateChanged_BP, InOldVehicle) == 0x000010, "Member 'AthenaSpectatorNameplateBase_OnVehicleStateChanged_BP::InOldVehicle' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.OnWeaponChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorNameplateBase_OnWeaponChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            InNewWeapon;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_OnWeaponChanged) == 0x000008, "Wrong alignment on AthenaSpectatorNameplateBase_OnWeaponChanged");
static_assert(sizeof(AthenaSpectatorNameplateBase_OnWeaponChanged) == 0x000010, "Wrong size on AthenaSpectatorNameplateBase_OnWeaponChanged");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnWeaponChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorNameplateBase_OnWeaponChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorNameplateBase_OnWeaponChanged, InNewWeapon) == 0x000008, "Member 'AthenaSpectatorNameplateBase_OnWeaponChanged::InNewWeapon' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.SetArrowTeamColorVisible
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorNameplateBase_SetArrowTeamColorVisible final
{
public:
	bool                                          bArrowTeamColorVisible;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_SetArrowTeamColorVisible) == 0x000001, "Wrong alignment on AthenaSpectatorNameplateBase_SetArrowTeamColorVisible");
static_assert(sizeof(AthenaSpectatorNameplateBase_SetArrowTeamColorVisible) == 0x000001, "Wrong size on AthenaSpectatorNameplateBase_SetArrowTeamColorVisible");
static_assert(offsetof(AthenaSpectatorNameplateBase_SetArrowTeamColorVisible, bArrowTeamColorVisible) == 0x000000, "Member 'AthenaSpectatorNameplateBase_SetArrowTeamColorVisible::bArrowTeamColorVisible' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.SetSquadIdVisibility
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorNameplateBase_SetSquadIdVisibility final
{
public:
	bool                                          bSquadIdVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_SetSquadIdVisibility) == 0x000001, "Wrong alignment on AthenaSpectatorNameplateBase_SetSquadIdVisibility");
static_assert(sizeof(AthenaSpectatorNameplateBase_SetSquadIdVisibility) == 0x000001, "Wrong size on AthenaSpectatorNameplateBase_SetSquadIdVisibility");
static_assert(offsetof(AthenaSpectatorNameplateBase_SetSquadIdVisibility, bSquadIdVisible) == 0x000000, "Member 'AthenaSpectatorNameplateBase_SetSquadIdVisibility::bSquadIdVisible' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateBase.SetTeamColorVisible
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorNameplateBase_SetTeamColorVisible final
{
public:
	bool                                          bTeamColorVisible;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateBase_SetTeamColorVisible) == 0x000001, "Wrong alignment on AthenaSpectatorNameplateBase_SetTeamColorVisible");
static_assert(sizeof(AthenaSpectatorNameplateBase_SetTeamColorVisible) == 0x000001, "Wrong size on AthenaSpectatorNameplateBase_SetTeamColorVisible");
static_assert(offsetof(AthenaSpectatorNameplateBase_SetTeamColorVisible, bTeamColorVisible) == 0x000000, "Member 'AthenaSpectatorNameplateBase_SetTeamColorVisible::bTeamColorVisible' has a wrong offset!");

// Function FortniteUI.FortSquadSlotSelectorButton.GetPopupMenu
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotSelectorButton_GetPopupMenu final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorButton_GetPopupMenu) == 0x000008, "Wrong alignment on FortSquadSlotSelectorButton_GetPopupMenu");
static_assert(sizeof(FortSquadSlotSelectorButton_GetPopupMenu) == 0x000008, "Wrong size on FortSquadSlotSelectorButton_GetPopupMenu");
static_assert(offsetof(FortSquadSlotSelectorButton_GetPopupMenu, ReturnValue) == 0x000000, "Member 'FortSquadSlotSelectorButton_GetPopupMenu::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotSelectorButton.SetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000008, "Member 'FortSquadSlotSelectorButton_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotSelectorButton.GetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000008, "Member 'FortSquadSlotSelectorButton_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotSelectorButton.GetInPreviewMode
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotSelectorButton_GetInPreviewMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorButton_GetInPreviewMode) == 0x000001, "Wrong alignment on FortSquadSlotSelectorButton_GetInPreviewMode");
static_assert(sizeof(FortSquadSlotSelectorButton_GetInPreviewMode) == 0x000001, "Wrong size on FortSquadSlotSelectorButton_GetInPreviewMode");
static_assert(offsetof(FortSquadSlotSelectorButton_GetInPreviewMode, ReturnValue) == 0x000000, "Member 'FortSquadSlotSelectorButton_GetInPreviewMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotSelectorButton.IsSquadSlotLockedBP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotSelectorButton_IsSquadSlotLockedBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotSelectorButton_IsSquadSlotLockedBP) == 0x000001, "Wrong alignment on FortSquadSlotSelectorButton_IsSquadSlotLockedBP");
static_assert(sizeof(FortSquadSlotSelectorButton_IsSquadSlotLockedBP) == 0x000001, "Wrong size on FortSquadSlotSelectorButton_IsSquadSlotLockedBP");
static_assert(offsetof(FortSquadSlotSelectorButton_IsSquadSlotLockedBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotSelectorButton_IsSquadSlotLockedBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateLayerBase.AddNameplate
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorNameplateLayerBase_AddNameplate final
{
public:
	class UAthenaSpectatorNameplateBase*          NameplateWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateLayerBase_AddNameplate) == 0x000008, "Wrong alignment on AthenaSpectatorNameplateLayerBase_AddNameplate");
static_assert(sizeof(AthenaSpectatorNameplateLayerBase_AddNameplate) == 0x000008, "Wrong size on AthenaSpectatorNameplateLayerBase_AddNameplate");
static_assert(offsetof(AthenaSpectatorNameplateLayerBase_AddNameplate, NameplateWidget) == 0x000000, "Member 'AthenaSpectatorNameplateLayerBase_AddNameplate::NameplateWidget' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateLayerBase.OnArrowTeamColorVisibleChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorNameplateLayerBase_OnArrowTeamColorVisibleChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateLayerBase_OnArrowTeamColorVisibleChanged) == 0x000001, "Wrong alignment on AthenaSpectatorNameplateLayerBase_OnArrowTeamColorVisibleChanged");
static_assert(sizeof(AthenaSpectatorNameplateLayerBase_OnArrowTeamColorVisibleChanged) == 0x000001, "Wrong size on AthenaSpectatorNameplateLayerBase_OnArrowTeamColorVisibleChanged");
static_assert(offsetof(AthenaSpectatorNameplateLayerBase_OnArrowTeamColorVisibleChanged, bVisible) == 0x000000, "Member 'AthenaSpectatorNameplateLayerBase_OnArrowTeamColorVisibleChanged::bVisible' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateLayerBase.OnPlayerDataAdded
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorNameplateLayerBase_OnPlayerDataAdded final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateLayerBase_OnPlayerDataAdded) == 0x000008, "Wrong alignment on AthenaSpectatorNameplateLayerBase_OnPlayerDataAdded");
static_assert(sizeof(AthenaSpectatorNameplateLayerBase_OnPlayerDataAdded) == 0x000008, "Wrong size on AthenaSpectatorNameplateLayerBase_OnPlayerDataAdded");
static_assert(offsetof(AthenaSpectatorNameplateLayerBase_OnPlayerDataAdded, InPlayerData) == 0x000000, "Member 'AthenaSpectatorNameplateLayerBase_OnPlayerDataAdded::InPlayerData' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateLayerBase.OnSquadIdsVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorNameplateLayerBase_OnSquadIdsVisibilityChanged final
{
public:
	bool                                          bSquadIdsVisible;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateLayerBase_OnSquadIdsVisibilityChanged) == 0x000001, "Wrong alignment on AthenaSpectatorNameplateLayerBase_OnSquadIdsVisibilityChanged");
static_assert(sizeof(AthenaSpectatorNameplateLayerBase_OnSquadIdsVisibilityChanged) == 0x000001, "Wrong size on AthenaSpectatorNameplateLayerBase_OnSquadIdsVisibilityChanged");
static_assert(offsetof(AthenaSpectatorNameplateLayerBase_OnSquadIdsVisibilityChanged, bSquadIdsVisible) == 0x000000, "Member 'AthenaSpectatorNameplateLayerBase_OnSquadIdsVisibilityChanged::bSquadIdsVisible' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateLayerBase.OnTeamColorVisibleChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorNameplateLayerBase_OnTeamColorVisibleChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateLayerBase_OnTeamColorVisibleChanged) == 0x000001, "Wrong alignment on AthenaSpectatorNameplateLayerBase_OnTeamColorVisibleChanged");
static_assert(sizeof(AthenaSpectatorNameplateLayerBase_OnTeamColorVisibleChanged) == 0x000001, "Wrong size on AthenaSpectatorNameplateLayerBase_OnTeamColorVisibleChanged");
static_assert(offsetof(AthenaSpectatorNameplateLayerBase_OnTeamColorVisibleChanged, bVisible) == 0x000000, "Member 'AthenaSpectatorNameplateLayerBase_OnTeamColorVisibleChanged::bVisible' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorNameplateLayerBase.RemoveNameplate
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorNameplateLayerBase_RemoveNameplate final
{
public:
	class UAthenaSpectatorNameplateBase*          NameplateWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorNameplateLayerBase_RemoveNameplate) == 0x000008, "Wrong alignment on AthenaSpectatorNameplateLayerBase_RemoveNameplate");
static_assert(sizeof(AthenaSpectatorNameplateLayerBase_RemoveNameplate) == 0x000008, "Wrong size on AthenaSpectatorNameplateLayerBase_RemoveNameplate");
static_assert(offsetof(AthenaSpectatorNameplateLayerBase_RemoveNameplate, NameplateWidget) == 0x000000, "Member 'AthenaSpectatorNameplateLayerBase_RemoveNameplate::NameplateWidget' has a wrong offset!");

// Function FortniteUI.FortAttributeList_NUI.OnAddShownAttributeListItem
// 0x0008 (0x0008 - 0x0000)
struct FortAttributeList_NUI_OnAddShownAttributeListItem final
{
public:
	class UFortAttributeListItem_NUI*             AttributeListItemWidget;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeList_NUI_OnAddShownAttributeListItem) == 0x000008, "Wrong alignment on FortAttributeList_NUI_OnAddShownAttributeListItem");
static_assert(sizeof(FortAttributeList_NUI_OnAddShownAttributeListItem) == 0x000008, "Wrong size on FortAttributeList_NUI_OnAddShownAttributeListItem");
static_assert(offsetof(FortAttributeList_NUI_OnAddShownAttributeListItem, AttributeListItemWidget) == 0x000000, "Member 'FortAttributeList_NUI_OnAddShownAttributeListItem::AttributeListItemWidget' has a wrong offset!");

// Function FortniteUI.FortAttributeList_NUI.OnRemoveShownAttributeListItem
// 0x0010 (0x0010 - 0x0000)
struct FortAttributeList_NUI_OnRemoveShownAttributeListItem final
{
public:
	class UFortAttributeListItem_NUI*             AttributeListItemWidget;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AtIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAttributeList_NUI_OnRemoveShownAttributeListItem) == 0x000008, "Wrong alignment on FortAttributeList_NUI_OnRemoveShownAttributeListItem");
static_assert(sizeof(FortAttributeList_NUI_OnRemoveShownAttributeListItem) == 0x000010, "Wrong size on FortAttributeList_NUI_OnRemoveShownAttributeListItem");
static_assert(offsetof(FortAttributeList_NUI_OnRemoveShownAttributeListItem, AttributeListItemWidget) == 0x000000, "Member 'FortAttributeList_NUI_OnRemoveShownAttributeListItem::AttributeListItemWidget' has a wrong offset!");
static_assert(offsetof(FortAttributeList_NUI_OnRemoveShownAttributeListItem, AtIndex) == 0x000008, "Member 'FortAttributeList_NUI_OnRemoveShownAttributeListItem::AtIndex' has a wrong offset!");

// Function FortniteUI.FortAttributeList_NUI.SetData
// 0x0010 (0x0010 - 0x0000)
struct FortAttributeList_NUI_SetData final
{
public:
	TArray<struct FFortDisplayAttribute>          Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeList_NUI_SetData) == 0x000008, "Wrong alignment on FortAttributeList_NUI_SetData");
static_assert(sizeof(FortAttributeList_NUI_SetData) == 0x000010, "Wrong size on FortAttributeList_NUI_SetData");
static_assert(offsetof(FortAttributeList_NUI_SetData, Data) == 0x000000, "Member 'FortAttributeList_NUI_SetData::Data' has a wrong offset!");

// Function FortniteUI.FortAttributeList_NUI.SetPreviewData
// 0x0010 (0x0010 - 0x0000)
struct FortAttributeList_NUI_SetPreviewData final
{
public:
	TArray<struct FFortDisplayAttribute>          Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeList_NUI_SetPreviewData) == 0x000008, "Wrong alignment on FortAttributeList_NUI_SetPreviewData");
static_assert(sizeof(FortAttributeList_NUI_SetPreviewData) == 0x000010, "Wrong size on FortAttributeList_NUI_SetPreviewData");
static_assert(offsetof(FortAttributeList_NUI_SetPreviewData, Data) == 0x000000, "Member 'FortAttributeList_NUI_SetPreviewData::Data' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerListEntryBase.SetSquadIdVisible
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorPlayerListEntryBase_SetSquadIdVisible final
{
public:
	bool                                          bSquadIdVisible;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerListEntryBase_SetSquadIdVisible) == 0x000001, "Wrong alignment on AthenaSpectatorPlayerListEntryBase_SetSquadIdVisible");
static_assert(sizeof(AthenaSpectatorPlayerListEntryBase_SetSquadIdVisible) == 0x000001, "Wrong size on AthenaSpectatorPlayerListEntryBase_SetSquadIdVisible");
static_assert(offsetof(AthenaSpectatorPlayerListEntryBase_SetSquadIdVisible, bSquadIdVisible) == 0x000000, "Member 'AthenaSpectatorPlayerListEntryBase_SetSquadIdVisible::bSquadIdVisible' has a wrong offset!");

// Function FortniteUI.FortTournamentDetailsPage.OnHandleBack
// 0x0001 (0x0001 - 0x0000)
struct FortTournamentDetailsPage_OnHandleBack final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTournamentDetailsPage_OnHandleBack) == 0x000001, "Wrong alignment on FortTournamentDetailsPage_OnHandleBack");
static_assert(sizeof(FortTournamentDetailsPage_OnHandleBack) == 0x000001, "Wrong size on FortTournamentDetailsPage_OnHandleBack");
static_assert(offsetof(FortTournamentDetailsPage_OnHandleBack, bResult) == 0x000000, "Member 'FortTournamentDetailsPage_OnHandleBack::bResult' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerListScreenBase.OnFollowedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerListScreenBase_OnFollowedPlayerChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatorPC;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       NewFollowedPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerListScreenBase_OnFollowedPlayerChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerListScreenBase_OnFollowedPlayerChanged");
static_assert(sizeof(AthenaSpectatorPlayerListScreenBase_OnFollowedPlayerChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerListScreenBase_OnFollowedPlayerChanged");
static_assert(offsetof(AthenaSpectatorPlayerListScreenBase_OnFollowedPlayerChanged, SpectatorPC) == 0x000000, "Member 'AthenaSpectatorPlayerListScreenBase_OnFollowedPlayerChanged::SpectatorPC' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerListScreenBase_OnFollowedPlayerChanged, NewFollowedPlayer) == 0x000008, "Member 'AthenaSpectatorPlayerListScreenBase_OnFollowedPlayerChanged::NewFollowedPlayer' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerListScreenBase.OnPlayerBecameIrrelevant
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorPlayerListScreenBase_OnPlayerBecameIrrelevant final
{
public:
	class AFortPlayerState*                       NewlyIrrelevantPlayer;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerListScreenBase_OnPlayerBecameIrrelevant) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerListScreenBase_OnPlayerBecameIrrelevant");
static_assert(sizeof(AthenaSpectatorPlayerListScreenBase_OnPlayerBecameIrrelevant) == 0x000008, "Wrong size on AthenaSpectatorPlayerListScreenBase_OnPlayerBecameIrrelevant");
static_assert(offsetof(AthenaSpectatorPlayerListScreenBase_OnPlayerBecameIrrelevant, NewlyIrrelevantPlayer) == 0x000000, "Member 'AthenaSpectatorPlayerListScreenBase_OnPlayerBecameIrrelevant::NewlyIrrelevantPlayer' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerListScreenBase.OnPlayerBecameRelevant
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorPlayerListScreenBase_OnPlayerBecameRelevant final
{
public:
	class AFortPlayerState*                       NewlyRelevantPlayer;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerListScreenBase_OnPlayerBecameRelevant) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerListScreenBase_OnPlayerBecameRelevant");
static_assert(sizeof(AthenaSpectatorPlayerListScreenBase_OnPlayerBecameRelevant) == 0x000008, "Wrong size on AthenaSpectatorPlayerListScreenBase_OnPlayerBecameRelevant");
static_assert(offsetof(AthenaSpectatorPlayerListScreenBase_OnPlayerBecameRelevant, NewlyRelevantPlayer) == 0x000000, "Member 'AthenaSpectatorPlayerListScreenBase_OnPlayerBecameRelevant::NewlyRelevantPlayer' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerListScreenBase.OnPlayerDied
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorPlayerListScreenBase_OnPlayerDied final
{
public:
	class AFortPlayerState*                       NewlyDeadPlayer;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerListScreenBase_OnPlayerDied) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerListScreenBase_OnPlayerDied");
static_assert(sizeof(AthenaSpectatorPlayerListScreenBase_OnPlayerDied) == 0x000008, "Wrong size on AthenaSpectatorPlayerListScreenBase_OnPlayerDied");
static_assert(offsetof(AthenaSpectatorPlayerListScreenBase_OnPlayerDied, NewlyDeadPlayer) == 0x000000, "Member 'AthenaSpectatorPlayerListScreenBase_OnPlayerDied::NewlyDeadPlayer' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayersLeftBase.OnBroadcastSpectatorInfoReplicated
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorPlayersLeftBase_OnBroadcastSpectatorInfoReplicated final
{
public:
	class AFortBroadcastSpectatorInfo*            BroadcastSpectatorInfo;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayersLeftBase_OnBroadcastSpectatorInfoReplicated) == 0x000008, "Wrong alignment on AthenaSpectatorPlayersLeftBase_OnBroadcastSpectatorInfoReplicated");
static_assert(sizeof(AthenaSpectatorPlayersLeftBase_OnBroadcastSpectatorInfoReplicated) == 0x000008, "Wrong size on AthenaSpectatorPlayersLeftBase_OnBroadcastSpectatorInfoReplicated");
static_assert(offsetof(AthenaSpectatorPlayersLeftBase_OnBroadcastSpectatorInfoReplicated, BroadcastSpectatorInfo) == 0x000000, "Member 'AthenaSpectatorPlayersLeftBase_OnBroadcastSpectatorInfoReplicated::BroadcastSpectatorInfo' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayersLeftBase.OnGameStateSet
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorPlayersLeftBase_OnGameStateSet final
{
public:
	class AFortGameState*                         InGameState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayersLeftBase_OnGameStateSet) == 0x000008, "Wrong alignment on AthenaSpectatorPlayersLeftBase_OnGameStateSet");
static_assert(sizeof(AthenaSpectatorPlayersLeftBase_OnGameStateSet) == 0x000008, "Wrong size on AthenaSpectatorPlayersLeftBase_OnGameStateSet");
static_assert(offsetof(AthenaSpectatorPlayersLeftBase_OnGameStateSet, InGameState) == 0x000000, "Member 'AthenaSpectatorPlayersLeftBase_OnGameStateSet::InGameState' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayersLeftBase.UpdateMaxSquadSize
// 0x0004 (0x0004 - 0x0000)
struct AthenaSpectatorPlayersLeftBase_UpdateMaxSquadSize final
{
public:
	int32                                         MaxSquadSize;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayersLeftBase_UpdateMaxSquadSize) == 0x000004, "Wrong alignment on AthenaSpectatorPlayersLeftBase_UpdateMaxSquadSize");
static_assert(sizeof(AthenaSpectatorPlayersLeftBase_UpdateMaxSquadSize) == 0x000004, "Wrong size on AthenaSpectatorPlayersLeftBase_UpdateMaxSquadSize");
static_assert(offsetof(AthenaSpectatorPlayersLeftBase_UpdateMaxSquadSize, MaxSquadSize) == 0x000000, "Member 'AthenaSpectatorPlayersLeftBase_UpdateMaxSquadSize::MaxSquadSize' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayersLeftBase.UpdatePlayersLeft
// 0x0004 (0x0004 - 0x0000)
struct AthenaSpectatorPlayersLeftBase_UpdatePlayersLeft final
{
public:
	int32                                         InPlayersLeft;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayersLeftBase_UpdatePlayersLeft) == 0x000004, "Wrong alignment on AthenaSpectatorPlayersLeftBase_UpdatePlayersLeft");
static_assert(sizeof(AthenaSpectatorPlayersLeftBase_UpdatePlayersLeft) == 0x000004, "Wrong size on AthenaSpectatorPlayersLeftBase_UpdatePlayersLeft");
static_assert(offsetof(AthenaSpectatorPlayersLeftBase_UpdatePlayersLeft, InPlayersLeft) == 0x000000, "Member 'AthenaSpectatorPlayersLeftBase_UpdatePlayersLeft::InPlayersLeft' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayersLeftBase.UpdateTeamsLeft
// 0x0004 (0x0004 - 0x0000)
struct AthenaSpectatorPlayersLeftBase_UpdateTeamsLeft final
{
public:
	int32                                         InTeamsLeft;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayersLeftBase_UpdateTeamsLeft) == 0x000004, "Wrong alignment on AthenaSpectatorPlayersLeftBase_UpdateTeamsLeft");
static_assert(sizeof(AthenaSpectatorPlayersLeftBase_UpdateTeamsLeft) == 0x000004, "Wrong size on AthenaSpectatorPlayersLeftBase_UpdateTeamsLeft");
static_assert(offsetof(AthenaSpectatorPlayersLeftBase_UpdateTeamsLeft, InTeamsLeft) == 0x000000, "Member 'AthenaSpectatorPlayersLeftBase_UpdateTeamsLeft::InTeamsLeft' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayersLeftBase.UpdateTotalPlayers
// 0x0004 (0x0004 - 0x0000)
struct AthenaSpectatorPlayersLeftBase_UpdateTotalPlayers final
{
public:
	int32                                         InTotalPlayers;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayersLeftBase_UpdateTotalPlayers) == 0x000004, "Wrong alignment on AthenaSpectatorPlayersLeftBase_UpdateTotalPlayers");
static_assert(sizeof(AthenaSpectatorPlayersLeftBase_UpdateTotalPlayers) == 0x000004, "Wrong size on AthenaSpectatorPlayersLeftBase_UpdateTotalPlayers");
static_assert(offsetof(AthenaSpectatorPlayersLeftBase_UpdateTotalPlayers, InTotalPlayers) == 0x000000, "Member 'AthenaSpectatorPlayersLeftBase_UpdateTotalPlayers::InTotalPlayers' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayersLeftBase.UpdateTotalTeams
// 0x0004 (0x0004 - 0x0000)
struct AthenaSpectatorPlayersLeftBase_UpdateTotalTeams final
{
public:
	int32                                         InTotalTeams;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayersLeftBase_UpdateTotalTeams) == 0x000004, "Wrong alignment on AthenaSpectatorPlayersLeftBase_UpdateTotalTeams");
static_assert(sizeof(AthenaSpectatorPlayersLeftBase_UpdateTotalTeams) == 0x000004, "Wrong size on AthenaSpectatorPlayersLeftBase_UpdateTotalTeams");
static_assert(offsetof(AthenaSpectatorPlayersLeftBase_UpdateTotalTeams, InTotalTeams) == 0x000000, "Member 'AthenaSpectatorPlayersLeftBase_UpdateTotalTeams::InTotalTeams' has a wrong offset!");

// Function FortniteUI.FortTransformKeyPicker.RebuildTransformKeys
// 0x0010 (0x0010 - 0x0000)
struct FortTransformKeyPicker_RebuildTransformKeys final
{
public:
	TArray<class UObject*>                        InDataProvider;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTransformKeyPicker_RebuildTransformKeys) == 0x000008, "Wrong alignment on FortTransformKeyPicker_RebuildTransformKeys");
static_assert(sizeof(FortTransformKeyPicker_RebuildTransformKeys) == 0x000010, "Wrong size on FortTransformKeyPicker_RebuildTransformKeys");
static_assert(offsetof(FortTransformKeyPicker_RebuildTransformKeys, InDataProvider) == 0x000000, "Member 'FortTransformKeyPicker_RebuildTransformKeys::InDataProvider' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnBeingRevivedStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnBeingRevivedStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBeingRevived;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnBeingRevivedStateChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnBeingRevivedStateChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnBeingRevivedStateChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnBeingRevivedStateChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnBeingRevivedStateChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnBeingRevivedStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnBeingRevivedStateChanged, bIsBeingRevived) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnBeingRevivedStateChanged::bIsBeingRevived' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnDBNOStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnDBNOStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDBNO;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnDBNOStateChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnDBNOStateChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnDBNOStateChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnDBNOStateChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnDBNOStateChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnDBNOStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnDBNOStateChanged, bIsDBNO) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnDBNOStateChanged::bIsDBNO' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnDeadStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnDeadStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDead;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnDeadStateChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnDeadStateChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnDeadStateChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnDeadStateChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnDeadStateChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnDeadStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnDeadStateChanged, bIsDead) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnDeadStateChanged::bIsDead' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnDisconnectedChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnDisconnectedChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDisconnected;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnDisconnectedChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnDisconnectedChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnDisconnectedChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnDisconnectedChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnDisconnectedChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnDisconnectedChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnDisconnectedChanged, bIsDisconnected) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnDisconnectedChanged::bIsDisconnected' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnHealthDamaged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnHealthDamaged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHealthPercent;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnHealthDamaged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnHealthDamaged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnHealthDamaged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnHealthDamaged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnHealthDamaged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnHealthDamaged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnHealthDamaged, InHealthPercent) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnHealthDamaged::InHealthPercent' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnHealthHealed
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnHealthHealed final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHealthPercent;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnHealthHealed) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnHealthHealed");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnHealthHealed) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnHealthHealed");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnHealthHealed, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnHealthHealed::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnHealthHealed, InHealthPercent) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnHealthHealed::InHealthPercent' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnIsFollowedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnIsFollowedPlayerChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsFollowedPlayer;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnIsFollowedPlayerChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnIsFollowedPlayerChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnIsFollowedPlayerChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnIsFollowedPlayerChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnIsFollowedPlayerChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnIsFollowedPlayerChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnIsFollowedPlayerChanged, bInIsFollowedPlayer) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnIsFollowedPlayerChanged::bInIsFollowedPlayer' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnIsInRelevancyChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnIsInRelevancyChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsInRelevancy;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnIsInRelevancyChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnIsInRelevancyChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnIsInRelevancyChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnIsInRelevancyChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnIsInRelevancyChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnIsInRelevancyChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnIsInRelevancyChanged, bInIsInRelevancy) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnIsInRelevancyChanged::bInIsInRelevancy' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnIsReplayRelevancyPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsReplayRelevancyPlayer;                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged, bInIsReplayRelevancyPlayer) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnIsReplayRelevancyPlayerChanged::bInIsReplayRelevancyPlayer' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnKillScoreChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnKillScoreChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InKillScore;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnKillScoreChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnKillScoreChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnKillScoreChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnKillScoreChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnKillScoreChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnKillScoreChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnKillScoreChanged, InKillScore) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnKillScoreChanged::InKillScore' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnLocationChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnLocationChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InLocation;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnLocationChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnLocationChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnLocationChanged) == 0x000018, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnLocationChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnLocationChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnLocationChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnLocationChanged, InLocation) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnLocationChanged::InLocation' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnMaterialCountChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnMaterialCountChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCount;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnMaterialCountChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnMaterialCountChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnMaterialCountChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnMaterialCountChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnMaterialCountChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnMaterialCountChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnMaterialCountChanged, InCount) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnMaterialCountChanged::InCount' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnPipModeChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnPipModeChanged final
{
public:
	bool                                          bPipModeEnabled;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnPipModeChanged) == 0x000001, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnPipModeChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnPipModeChanged) == 0x000001, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnPipModeChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnPipModeChanged, bPipModeEnabled) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnPipModeChanged::bPipModeEnabled' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnPlaceChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnPlaceChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPlace;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnPlaceChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnPlaceChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnPlaceChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnPlaceChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnPlaceChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnPlaceChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnPlaceChanged, InPlace) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnPlaceChanged::InPlace' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnPlayerDataChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnPlayerDataChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnPlayerDataChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnPlayerDataChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnPlayerDataChanged) == 0x000008, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnPlayerDataChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnPlayerDataChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnPlayerDataChanged::InPlayerData' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnPlayerNameChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnPlayerNameChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPlayerName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnPlayerNameChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnPlayerNameChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnPlayerNameChanged) == 0x000018, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnPlayerNameChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnPlayerNameChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnPlayerNameChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnPlayerNameChanged, InPlayerName) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnPlayerNameChanged::InPlayerName' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnPlayerPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnPlayerPawnChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        InPlayerPawn;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnPlayerPawnChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnPlayerPawnChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnPlayerPawnChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnPlayerPawnChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnPlayerPawnChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnPlayerPawnChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnPlayerPawnChanged, InPlayerPawn) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnPlayerPawnChanged::InPlayerPawn' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnPlayerStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnPlayerStateChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerStateAthena*                 InPlayerState;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnPlayerStateChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnPlayerStateChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnPlayerStateChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnPlayerStateChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnPlayerStateChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnPlayerStateChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnPlayerStateChanged, InPlayerState) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnPlayerStateChanged::InPlayerState' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnShieldDamaged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnShieldDamaged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InShieldPercent;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnShieldDamaged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnShieldDamaged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnShieldDamaged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnShieldDamaged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnShieldDamaged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnShieldDamaged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnShieldDamaged, InShieldPercent) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnShieldDamaged::InShieldPercent' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnShieldHealed
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnShieldHealed final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InShieldPercent;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnShieldHealed) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnShieldHealed");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnShieldHealed) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnShieldHealed");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnShieldHealed, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnShieldHealed::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnShieldHealed, InShieldPercent) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnShieldHealed::InShieldPercent' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnSquadIdChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnSquadIdChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InSquadId;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnSquadIdChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnSquadIdChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnSquadIdChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnSquadIdChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnSquadIdChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnSquadIdChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnSquadIdChanged, InSquadId) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnSquadIdChanged::InSquadId' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnStormcapScoreChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnStormcapScoreChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScore;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnStormcapScoreChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnStormcapScoreChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnStormcapScoreChanged) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnStormcapScoreChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnStormcapScoreChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnStormcapScoreChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnStormcapScoreChanged, InScore) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnStormcapScoreChanged::InScore' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.OnTeamColorChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_OnTeamColorChanged final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InTeamColor;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_OnTeamColorChanged) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_OnTeamColorChanged");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_OnTeamColorChanged) == 0x000018, "Wrong size on AthenaSpectatorPlayerWidgetBase_OnTeamColorChanged");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnTeamColorChanged, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_OnTeamColorChanged::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_OnTeamColorChanged, InTeamColor) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_OnTeamColorChanged::InTeamColor' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.SetPlayerData
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_SetPlayerData final
{
public:
	class UAthenaRemotePlayerViewData*            InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUpdate;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_SetPlayerData) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_SetPlayerData");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_SetPlayerData) == 0x000010, "Wrong size on AthenaSpectatorPlayerWidgetBase_SetPlayerData");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_SetPlayerData, InPlayerData) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_SetPlayerData::InPlayerData' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_SetPlayerData, bForceUpdate) == 0x000008, "Member 'AthenaSpectatorPlayerWidgetBase_SetPlayerData::bForceUpdate' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.SetSquadIdsVisible
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_SetSquadIdsVisible final
{
public:
	bool                                          bSquadIdsVisible;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_SetSquadIdsVisible) == 0x000001, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_SetSquadIdsVisible");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_SetSquadIdsVisible) == 0x000001, "Wrong size on AthenaSpectatorPlayerWidgetBase_SetSquadIdsVisible");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_SetSquadIdsVisible, bSquadIdsVisible) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_SetSquadIdsVisible::bSquadIdsVisible' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorPlayerWidgetBase.GetPlayerData
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorPlayerWidgetBase_GetPlayerData final
{
public:
	class UAthenaRemotePlayerViewData*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorPlayerWidgetBase_GetPlayerData) == 0x000008, "Wrong alignment on AthenaSpectatorPlayerWidgetBase_GetPlayerData");
static_assert(sizeof(AthenaSpectatorPlayerWidgetBase_GetPlayerData) == 0x000008, "Wrong size on AthenaSpectatorPlayerWidgetBase_GetPlayerData");
static_assert(offsetof(AthenaSpectatorPlayerWidgetBase_GetPlayerData, ReturnValue) == 0x000000, "Member 'AthenaSpectatorPlayerWidgetBase_GetPlayerData::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorQuickbarBase.OnQuickbarContentsChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaSpectatorQuickbarBase_OnQuickbarContentsChanged final
{
public:
	EFortQuickBars                                QuickbarIndex;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ChangedSlots;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorQuickbarBase_OnQuickbarContentsChanged) == 0x000008, "Wrong alignment on AthenaSpectatorQuickbarBase_OnQuickbarContentsChanged");
static_assert(sizeof(AthenaSpectatorQuickbarBase_OnQuickbarContentsChanged) == 0x000018, "Wrong size on AthenaSpectatorQuickbarBase_OnQuickbarContentsChanged");
static_assert(offsetof(AthenaSpectatorQuickbarBase_OnQuickbarContentsChanged, QuickbarIndex) == 0x000000, "Member 'AthenaSpectatorQuickbarBase_OnQuickbarContentsChanged::QuickbarIndex' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorQuickbarBase_OnQuickbarContentsChanged, ChangedSlots) == 0x000008, "Member 'AthenaSpectatorQuickbarBase_OnQuickbarContentsChanged::ChangedSlots' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorQuickbarBase.OnQuickbarSlotFocusChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorQuickbarBase_OnQuickbarSlotFocusChanged final
{
public:
	EFortQuickBars                                QuickbarIndex;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FocusedSlotIdx;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorQuickbarBase_OnQuickbarSlotFocusChanged) == 0x000004, "Wrong alignment on AthenaSpectatorQuickbarBase_OnQuickbarSlotFocusChanged");
static_assert(sizeof(AthenaSpectatorQuickbarBase_OnQuickbarSlotFocusChanged) == 0x000008, "Wrong size on AthenaSpectatorQuickbarBase_OnQuickbarSlotFocusChanged");
static_assert(offsetof(AthenaSpectatorQuickbarBase_OnQuickbarSlotFocusChanged, QuickbarIndex) == 0x000000, "Member 'AthenaSpectatorQuickbarBase_OnQuickbarSlotFocusChanged::QuickbarIndex' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorQuickbarBase_OnQuickbarSlotFocusChanged, FocusedSlotIdx) == 0x000004, "Member 'AthenaSpectatorQuickbarBase_OnQuickbarSlotFocusChanged::FocusedSlotIdx' has a wrong offset!");

// Function FortniteUI.FortDailyRewards.TryGetDailyRewardsData
// 0x0028 (0x0028 - 0x0000)
struct FortDailyRewards_TryGetDailyRewardsData final
{
public:
	struct FFortDailyRewardsData                  OutDailyRewardsData;                               // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         ItemCardsPerSchedule;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinEpicRewards;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDailyRewards_TryGetDailyRewardsData) == 0x000008, "Wrong alignment on FortDailyRewards_TryGetDailyRewardsData");
static_assert(sizeof(FortDailyRewards_TryGetDailyRewardsData) == 0x000028, "Wrong size on FortDailyRewards_TryGetDailyRewardsData");
static_assert(offsetof(FortDailyRewards_TryGetDailyRewardsData, OutDailyRewardsData) == 0x000000, "Member 'FortDailyRewards_TryGetDailyRewardsData::OutDailyRewardsData' has a wrong offset!");
static_assert(offsetof(FortDailyRewards_TryGetDailyRewardsData, ItemCardsPerSchedule) == 0x000018, "Member 'FortDailyRewards_TryGetDailyRewardsData::ItemCardsPerSchedule' has a wrong offset!");
static_assert(offsetof(FortDailyRewards_TryGetDailyRewardsData, MinEpicRewards) == 0x00001C, "Member 'FortDailyRewards_TryGetDailyRewardsData::MinEpicRewards' has a wrong offset!");
static_assert(offsetof(FortDailyRewards_TryGetDailyRewardsData, ReturnValue) == 0x000020, "Member 'FortDailyRewards_TryGetDailyRewardsData::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorTeamTagBase.OnGameStateSet
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorTeamTagBase_OnGameStateSet final
{
public:
	class AFortGameState*                         InGameState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorTeamTagBase_OnGameStateSet) == 0x000008, "Wrong alignment on AthenaSpectatorTeamTagBase_OnGameStateSet");
static_assert(sizeof(AthenaSpectatorTeamTagBase_OnGameStateSet) == 0x000008, "Wrong size on AthenaSpectatorTeamTagBase_OnGameStateSet");
static_assert(offsetof(AthenaSpectatorTeamTagBase_OnGameStateSet, InGameState) == 0x000000, "Member 'AthenaSpectatorTeamTagBase_OnGameStateSet::InGameState' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorTeamTagBase.UpdateMaxSquadSize
// 0x0004 (0x0004 - 0x0000)
struct AthenaSpectatorTeamTagBase_UpdateMaxSquadSize final
{
public:
	int32                                         MaxSquadSize;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorTeamTagBase_UpdateMaxSquadSize) == 0x000004, "Wrong alignment on AthenaSpectatorTeamTagBase_UpdateMaxSquadSize");
static_assert(sizeof(AthenaSpectatorTeamTagBase_UpdateMaxSquadSize) == 0x000004, "Wrong size on AthenaSpectatorTeamTagBase_UpdateMaxSquadSize");
static_assert(offsetof(AthenaSpectatorTeamTagBase_UpdateMaxSquadSize, MaxSquadSize) == 0x000000, "Member 'AthenaSpectatorTeamTagBase_UpdateMaxSquadSize::MaxSquadSize' has a wrong offset!");

// Function FortniteUI.FortStatsOverviewDetailsBase.ListenForChanges
// 0x0001 (0x0001 - 0x0000)
struct FortStatsOverviewDetailsBase_ListenForChanges final
{
public:
	bool                                          bListen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStatsOverviewDetailsBase_ListenForChanges) == 0x000001, "Wrong alignment on FortStatsOverviewDetailsBase_ListenForChanges");
static_assert(sizeof(FortStatsOverviewDetailsBase_ListenForChanges) == 0x000001, "Wrong size on FortStatsOverviewDetailsBase_ListenForChanges");
static_assert(offsetof(FortStatsOverviewDetailsBase_ListenForChanges, bListen) == 0x000000, "Member 'FortStatsOverviewDetailsBase_ListenForChanges::bListen' has a wrong offset!");

// Function FortniteUI.FortStatsOverviewDetailsBase.GetLocalPlayerId
// 0x0028 (0x0028 - 0x0000)
struct FortStatsOverviewDetailsBase_GetLocalPlayerId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStatsOverviewDetailsBase_GetLocalPlayerId) == 0x000008, "Wrong alignment on FortStatsOverviewDetailsBase_GetLocalPlayerId");
static_assert(sizeof(FortStatsOverviewDetailsBase_GetLocalPlayerId) == 0x000028, "Wrong size on FortStatsOverviewDetailsBase_GetLocalPlayerId");
static_assert(offsetof(FortStatsOverviewDetailsBase_GetLocalPlayerId, ReturnValue) == 0x000000, "Member 'FortStatsOverviewDetailsBase_GetLocalPlayerId::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorTrapsLoadoutBase.OnFollowedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorTrapsLoadoutBase_OnFollowedPlayerChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatingPC;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       FollowedPlayerState;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorTrapsLoadoutBase_OnFollowedPlayerChanged) == 0x000008, "Wrong alignment on AthenaSpectatorTrapsLoadoutBase_OnFollowedPlayerChanged");
static_assert(sizeof(AthenaSpectatorTrapsLoadoutBase_OnFollowedPlayerChanged) == 0x000010, "Wrong size on AthenaSpectatorTrapsLoadoutBase_OnFollowedPlayerChanged");
static_assert(offsetof(AthenaSpectatorTrapsLoadoutBase_OnFollowedPlayerChanged, SpectatingPC) == 0x000000, "Member 'AthenaSpectatorTrapsLoadoutBase_OnFollowedPlayerChanged::SpectatingPC' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorTrapsLoadoutBase_OnFollowedPlayerChanged, FollowedPlayerState) == 0x000008, "Member 'AthenaSpectatorTrapsLoadoutBase_OnFollowedPlayerChanged::FollowedPlayerState' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorTrapsLoadoutBase.OnWorldItemListChanged
// 0x0020 (0x0020 - 0x0000)
struct AthenaSpectatorTrapsLoadoutBase_OnWorldItemListChanged final
{
public:
	TArray<class UFortWorldItem*>                 ItemsAdded;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UFortWorldItem*>                 ItemsRemoved;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorTrapsLoadoutBase_OnWorldItemListChanged) == 0x000008, "Wrong alignment on AthenaSpectatorTrapsLoadoutBase_OnWorldItemListChanged");
static_assert(sizeof(AthenaSpectatorTrapsLoadoutBase_OnWorldItemListChanged) == 0x000020, "Wrong size on AthenaSpectatorTrapsLoadoutBase_OnWorldItemListChanged");
static_assert(offsetof(AthenaSpectatorTrapsLoadoutBase_OnWorldItemListChanged, ItemsAdded) == 0x000000, "Member 'AthenaSpectatorTrapsLoadoutBase_OnWorldItemListChanged::ItemsAdded' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorTrapsLoadoutBase_OnWorldItemListChanged, ItemsRemoved) == 0x000010, "Member 'AthenaSpectatorTrapsLoadoutBase_OnWorldItemListChanged::ItemsRemoved' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorTrapsLoadoutBase.SelectSlot
// 0x0004 (0x0004 - 0x0000)
struct AthenaSpectatorTrapsLoadoutBase_SelectSlot final
{
public:
	int32                                         SlotIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorTrapsLoadoutBase_SelectSlot) == 0x000004, "Wrong alignment on AthenaSpectatorTrapsLoadoutBase_SelectSlot");
static_assert(sizeof(AthenaSpectatorTrapsLoadoutBase_SelectSlot) == 0x000004, "Wrong size on AthenaSpectatorTrapsLoadoutBase_SelectSlot");
static_assert(offsetof(AthenaSpectatorTrapsLoadoutBase_SelectSlot, SlotIdx) == 0x000000, "Member 'AthenaSpectatorTrapsLoadoutBase_SelectSlot::SlotIdx' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.OnFollowedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaSpectatorUIContext_OnFollowedPlayerChanged final
{
public:
	class AFortPlayerControllerSpectating*        SpectatorPC;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       NewFollowedPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_OnFollowedPlayerChanged) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_OnFollowedPlayerChanged");
static_assert(sizeof(AthenaSpectatorUIContext_OnFollowedPlayerChanged) == 0x000010, "Wrong size on AthenaSpectatorUIContext_OnFollowedPlayerChanged");
static_assert(offsetof(AthenaSpectatorUIContext_OnFollowedPlayerChanged, SpectatorPC) == 0x000000, "Member 'AthenaSpectatorUIContext_OnFollowedPlayerChanged::SpectatorPC' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorUIContext_OnFollowedPlayerChanged, NewFollowedPlayer) == 0x000008, "Member 'AthenaSpectatorUIContext_OnFollowedPlayerChanged::NewFollowedPlayer' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.OnGameStateSet
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorUIContext_OnGameStateSet final
{
public:
	class AFortGameState*                         InGameState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_OnGameStateSet) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_OnGameStateSet");
static_assert(sizeof(AthenaSpectatorUIContext_OnGameStateSet) == 0x000008, "Wrong size on AthenaSpectatorUIContext_OnGameStateSet");
static_assert(offsetof(AthenaSpectatorUIContext_OnGameStateSet, InGameState) == 0x000000, "Member 'AthenaSpectatorUIContext_OnGameStateSet::InGameState' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.OnPawnForReplayRelevancyChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorUIContext_OnPawnForReplayRelevancyChanged final
{
public:
	class AFortPawn*                              InPawnForReplayRelevancy;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_OnPawnForReplayRelevancyChanged) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_OnPawnForReplayRelevancyChanged");
static_assert(sizeof(AthenaSpectatorUIContext_OnPawnForReplayRelevancyChanged) == 0x000008, "Wrong size on AthenaSpectatorUIContext_OnPawnForReplayRelevancyChanged");
static_assert(offsetof(AthenaSpectatorUIContext_OnPawnForReplayRelevancyChanged, InPawnForReplayRelevancy) == 0x000000, "Member 'AthenaSpectatorUIContext_OnPawnForReplayRelevancyChanged::InPawnForReplayRelevancy' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.OnPlayerBecameIrrelevant
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorUIContext_OnPlayerBecameIrrelevant final
{
public:
	class AFortPlayerState*                       FPS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_OnPlayerBecameIrrelevant) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_OnPlayerBecameIrrelevant");
static_assert(sizeof(AthenaSpectatorUIContext_OnPlayerBecameIrrelevant) == 0x000008, "Wrong size on AthenaSpectatorUIContext_OnPlayerBecameIrrelevant");
static_assert(offsetof(AthenaSpectatorUIContext_OnPlayerBecameIrrelevant, FPS) == 0x000000, "Member 'AthenaSpectatorUIContext_OnPlayerBecameIrrelevant::FPS' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.OnPlayerBecameRelevant
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorUIContext_OnPlayerBecameRelevant final
{
public:
	class AFortPlayerState*                       FPS;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_OnPlayerBecameRelevant) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_OnPlayerBecameRelevant");
static_assert(sizeof(AthenaSpectatorUIContext_OnPlayerBecameRelevant) == 0x000008, "Wrong size on AthenaSpectatorUIContext_OnPlayerBecameRelevant");
static_assert(offsetof(AthenaSpectatorUIContext_OnPlayerBecameRelevant, FPS) == 0x000000, "Member 'AthenaSpectatorUIContext_OnPlayerBecameRelevant::FPS' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.OnPlayerStateAdded
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorUIContext_OnPlayerStateAdded final
{
public:
	class AFortPlayerStateAthena*                 FPSA;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_OnPlayerStateAdded) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_OnPlayerStateAdded");
static_assert(sizeof(AthenaSpectatorUIContext_OnPlayerStateAdded) == 0x000008, "Wrong size on AthenaSpectatorUIContext_OnPlayerStateAdded");
static_assert(offsetof(AthenaSpectatorUIContext_OnPlayerStateAdded, FPSA) == 0x000000, "Member 'AthenaSpectatorUIContext_OnPlayerStateAdded::FPSA' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.OnSquadIdsInput
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorUIContext_OnSquadIdsInput final
{
public:
	bool                                          bShowSquadIds;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_OnSquadIdsInput) == 0x000001, "Wrong alignment on AthenaSpectatorUIContext_OnSquadIdsInput");
static_assert(sizeof(AthenaSpectatorUIContext_OnSquadIdsInput) == 0x000001, "Wrong size on AthenaSpectatorUIContext_OnSquadIdsInput");
static_assert(offsetof(AthenaSpectatorUIContext_OnSquadIdsInput, bShowSquadIds) == 0x000000, "Member 'AthenaSpectatorUIContext_OnSquadIdsInput::bShowSquadIds' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaSpectatorUIContext.PlayerDataDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorUIContext_PlayerDataDelegate__DelegateSignature final
{
public:
	class UAthenaRemotePlayerViewData*            PlayerData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_PlayerDataDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_PlayerDataDelegate__DelegateSignature");
static_assert(sizeof(AthenaSpectatorUIContext_PlayerDataDelegate__DelegateSignature) == 0x000008, "Wrong size on AthenaSpectatorUIContext_PlayerDataDelegate__DelegateSignature");
static_assert(offsetof(AthenaSpectatorUIContext_PlayerDataDelegate__DelegateSignature, PlayerData) == 0x000000, "Member 'AthenaSpectatorUIContext_PlayerDataDelegate__DelegateSignature::PlayerData' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.SetNameplateTeamColorVisible
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorUIContext_SetNameplateTeamColorVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_SetNameplateTeamColorVisible) == 0x000001, "Wrong alignment on AthenaSpectatorUIContext_SetNameplateTeamColorVisible");
static_assert(sizeof(AthenaSpectatorUIContext_SetNameplateTeamColorVisible) == 0x000001, "Wrong size on AthenaSpectatorUIContext_SetNameplateTeamColorVisible");
static_assert(offsetof(AthenaSpectatorUIContext_SetNameplateTeamColorVisible, bVisible) == 0x000000, "Member 'AthenaSpectatorUIContext_SetNameplateTeamColorVisible::bVisible' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.SetSquadIdMode
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorUIContext_SetSquadIdMode final
{
public:
	ESpectatorSquadIdMode                         NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_SetSquadIdMode) == 0x000001, "Wrong alignment on AthenaSpectatorUIContext_SetSquadIdMode");
static_assert(sizeof(AthenaSpectatorUIContext_SetSquadIdMode) == 0x000001, "Wrong size on AthenaSpectatorUIContext_SetSquadIdMode");
static_assert(offsetof(AthenaSpectatorUIContext_SetSquadIdMode, NewMode) == 0x000000, "Member 'AthenaSpectatorUIContext_SetSquadIdMode::NewMode' has a wrong offset!");

// DelegateFunction FortniteUI.AthenaSpectatorUIContext.SquadDataDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorUIContext_SquadDataDelegate__DelegateSignature final
{
public:
	class UAthenaRemoteSquadViewData*             SquadData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_SquadDataDelegate__DelegateSignature) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_SquadDataDelegate__DelegateSignature");
static_assert(sizeof(AthenaSpectatorUIContext_SquadDataDelegate__DelegateSignature) == 0x000008, "Wrong size on AthenaSpectatorUIContext_SquadDataDelegate__DelegateSignature");
static_assert(offsetof(AthenaSpectatorUIContext_SquadDataDelegate__DelegateSignature, SquadData) == 0x000000, "Member 'AthenaSpectatorUIContext_SquadDataDelegate__DelegateSignature::SquadData' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.GetFollowedPlayerData
// 0x0008 (0x0008 - 0x0000)
struct AthenaSpectatorUIContext_GetFollowedPlayerData final
{
public:
	class UAthenaRemotePlayerViewData*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_GetFollowedPlayerData) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_GetFollowedPlayerData");
static_assert(sizeof(AthenaSpectatorUIContext_GetFollowedPlayerData) == 0x000008, "Wrong size on AthenaSpectatorUIContext_GetFollowedPlayerData");
static_assert(offsetof(AthenaSpectatorUIContext_GetFollowedPlayerData, ReturnValue) == 0x000000, "Member 'AthenaSpectatorUIContext_GetFollowedPlayerData::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.GetNameplateTeamColorVisible
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorUIContext_GetNameplateTeamColorVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_GetNameplateTeamColorVisible) == 0x000001, "Wrong alignment on AthenaSpectatorUIContext_GetNameplateTeamColorVisible");
static_assert(sizeof(AthenaSpectatorUIContext_GetNameplateTeamColorVisible) == 0x000001, "Wrong size on AthenaSpectatorUIContext_GetNameplateTeamColorVisible");
static_assert(offsetof(AthenaSpectatorUIContext_GetNameplateTeamColorVisible, ReturnValue) == 0x000000, "Member 'AthenaSpectatorUIContext_GetNameplateTeamColorVisible::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.GetPipMode
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorUIContext_GetPipMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_GetPipMode) == 0x000001, "Wrong alignment on AthenaSpectatorUIContext_GetPipMode");
static_assert(sizeof(AthenaSpectatorUIContext_GetPipMode) == 0x000001, "Wrong size on AthenaSpectatorUIContext_GetPipMode");
static_assert(offsetof(AthenaSpectatorUIContext_GetPipMode, ReturnValue) == 0x000000, "Member 'AthenaSpectatorUIContext_GetPipMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.GetPlayerData
// 0x0030 (0x0030 - 0x0000)
struct AthenaSpectatorUIContext_GetPlayerData final
{
public:
	struct FUniqueNetIdRepl                       PlayerUID;                                         // 0x0000(0x0028)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaRemotePlayerViewData*            ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_GetPlayerData) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_GetPlayerData");
static_assert(sizeof(AthenaSpectatorUIContext_GetPlayerData) == 0x000030, "Wrong size on AthenaSpectatorUIContext_GetPlayerData");
static_assert(offsetof(AthenaSpectatorUIContext_GetPlayerData, PlayerUID) == 0x000000, "Member 'AthenaSpectatorUIContext_GetPlayerData::PlayerUID' has a wrong offset!");
static_assert(offsetof(AthenaSpectatorUIContext_GetPlayerData, ReturnValue) == 0x000028, "Member 'AthenaSpectatorUIContext_GetPlayerData::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.GetPlayerDataMap
// 0x0050 (0x0050 - 0x0000)
struct AthenaSpectatorUIContext_GetPlayerDataMap final
{
public:
	TMap<struct FUniqueNetIdRepl, class UAthenaRemotePlayerViewData*> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_GetPlayerDataMap) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_GetPlayerDataMap");
static_assert(sizeof(AthenaSpectatorUIContext_GetPlayerDataMap) == 0x000050, "Wrong size on AthenaSpectatorUIContext_GetPlayerDataMap");
static_assert(offsetof(AthenaSpectatorUIContext_GetPlayerDataMap, ReturnValue) == 0x000000, "Member 'AthenaSpectatorUIContext_GetPlayerDataMap::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.GetSquadDataMap
// 0x0050 (0x0050 - 0x0000)
struct AthenaSpectatorUIContext_GetSquadDataMap final
{
public:
	TMap<uint8, class UAthenaRemoteSquadViewData*> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_GetSquadDataMap) == 0x000008, "Wrong alignment on AthenaSpectatorUIContext_GetSquadDataMap");
static_assert(sizeof(AthenaSpectatorUIContext_GetSquadDataMap) == 0x000050, "Wrong size on AthenaSpectatorUIContext_GetSquadDataMap");
static_assert(offsetof(AthenaSpectatorUIContext_GetSquadDataMap, ReturnValue) == 0x000000, "Member 'AthenaSpectatorUIContext_GetSquadDataMap::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.GetSquadIdMode
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorUIContext_GetSquadIdMode final
{
public:
	ESpectatorSquadIdMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_GetSquadIdMode) == 0x000001, "Wrong alignment on AthenaSpectatorUIContext_GetSquadIdMode");
static_assert(sizeof(AthenaSpectatorUIContext_GetSquadIdMode) == 0x000001, "Wrong size on AthenaSpectatorUIContext_GetSquadIdMode");
static_assert(offsetof(AthenaSpectatorUIContext_GetSquadIdMode, ReturnValue) == 0x000000, "Member 'AthenaSpectatorUIContext_GetSquadIdMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSpectatorUIContext.GetSquadIdsVisible
// 0x0001 (0x0001 - 0x0000)
struct AthenaSpectatorUIContext_GetSquadIdsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSpectatorUIContext_GetSquadIdsVisible) == 0x000001, "Wrong alignment on AthenaSpectatorUIContext_GetSquadIdsVisible");
static_assert(sizeof(AthenaSpectatorUIContext_GetSquadIdsVisible) == 0x000001, "Wrong size on AthenaSpectatorUIContext_GetSquadIdsVisible");
static_assert(offsetof(AthenaSpectatorUIContext_GetSquadIdsVisible, ReturnValue) == 0x000000, "Member 'AthenaSpectatorUIContext_GetSquadIdsVisible::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTournamentPosterViolator.OnViolatorStateRefreshed
// 0x0001 (0x0001 - 0x0000)
struct FortTournamentPosterViolator_OnViolatorStateRefreshed final
{
public:
	EEventTimeState                               NewTimeState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTournamentPosterViolator_OnViolatorStateRefreshed) == 0x000001, "Wrong alignment on FortTournamentPosterViolator_OnViolatorStateRefreshed");
static_assert(sizeof(FortTournamentPosterViolator_OnViolatorStateRefreshed) == 0x000001, "Wrong size on FortTournamentPosterViolator_OnViolatorStateRefreshed");
static_assert(offsetof(FortTournamentPosterViolator_OnViolatorStateRefreshed, NewTimeState) == 0x000000, "Member 'FortTournamentPosterViolator_OnViolatorStateRefreshed::NewTimeState' has a wrong offset!");

// Function FortniteUI.FortCollectionBookGenericRewardWidget.OnRewardStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookGenericRewardWidget_OnRewardStatusChanged final
{
public:
	ECollectionBookRewardStatus                   NewStatus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_OnRewardStatusChanged) == 0x000001, "Wrong alignment on FortCollectionBookGenericRewardWidget_OnRewardStatusChanged");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_OnRewardStatusChanged) == 0x000001, "Wrong size on FortCollectionBookGenericRewardWidget_OnRewardStatusChanged");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_OnRewardStatusChanged, NewStatus) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_OnRewardStatusChanged::NewStatus' has a wrong offset!");

// Function FortniteUI.FortCollectionBookGenericRewardWidget.SetCurrentItemToDisplay
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay final
{
public:
	class UFortItem*                              ItemToDisplay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay) == 0x000008, "Wrong alignment on FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay) == 0x000008, "Wrong size on FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay, ItemToDisplay) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_SetCurrentItemToDisplay::ItemToDisplay' has a wrong offset!");

// Function FortniteUI.FortCollectionBookGenericRewardWidget.SetRewards
// 0x0030 (0x0030 - 0x0000)
struct FortCollectionBookGenericRewardWidget_SetRewards final
{
public:
	struct FFortRewardInfo                        Rewards;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_SetRewards) == 0x000008, "Wrong alignment on FortCollectionBookGenericRewardWidget_SetRewards");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_SetRewards) == 0x000030, "Wrong size on FortCollectionBookGenericRewardWidget_SetRewards");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_SetRewards, Rewards) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_SetRewards::Rewards' has a wrong offset!");

// Function FortniteUI.FortCollectionBookGenericRewardWidget.SetRewardStatus
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookGenericRewardWidget_SetRewardStatus final
{
public:
	ECollectionBookRewardStatus                   Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_SetRewardStatus) == 0x000001, "Wrong alignment on FortCollectionBookGenericRewardWidget_SetRewardStatus");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_SetRewardStatus) == 0x000001, "Wrong size on FortCollectionBookGenericRewardWidget_SetRewardStatus");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_SetRewardStatus, Status) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_SetRewardStatus::Status' has a wrong offset!");

// Function FortniteUI.FortCollectionBookGenericRewardWidget.GetRewardStatus
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookGenericRewardWidget_GetRewardStatus final
{
public:
	ECollectionBookRewardStatus                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_GetRewardStatus) == 0x000001, "Wrong alignment on FortCollectionBookGenericRewardWidget_GetRewardStatus");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_GetRewardStatus) == 0x000001, "Wrong size on FortCollectionBookGenericRewardWidget_GetRewardStatus");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_GetRewardStatus, ReturnValue) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_GetRewardStatus::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookGenericRewardWidget.HasRewards
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookGenericRewardWidget_HasRewards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookGenericRewardWidget_HasRewards) == 0x000001, "Wrong alignment on FortCollectionBookGenericRewardWidget_HasRewards");
static_assert(sizeof(FortCollectionBookGenericRewardWidget_HasRewards) == 0x000001, "Wrong size on FortCollectionBookGenericRewardWidget_HasRewards");
static_assert(offsetof(FortCollectionBookGenericRewardWidget_HasRewards, ReturnValue) == 0x000000, "Member 'FortCollectionBookGenericRewardWidget_HasRewards::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaSquadListBase.HandleSquadMemberDisconnected
// 0x0008 (0x0008 - 0x0000)
struct AthenaSquadListBase_HandleSquadMemberDisconnected final
{
public:
	const class AFortPlayerStateAthena*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSquadListBase_HandleSquadMemberDisconnected) == 0x000008, "Wrong alignment on AthenaSquadListBase_HandleSquadMemberDisconnected");
static_assert(sizeof(AthenaSquadListBase_HandleSquadMemberDisconnected) == 0x000008, "Wrong size on AthenaSquadListBase_HandleSquadMemberDisconnected");
static_assert(offsetof(AthenaSquadListBase_HandleSquadMemberDisconnected, Player) == 0x000000, "Member 'AthenaSquadListBase_HandleSquadMemberDisconnected::Player' has a wrong offset!");

// Function FortniteUI.FortCampaignTeamMemberInfo.OnLocalTeamMemberParticipationChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCampaignTeamMemberInfo_OnLocalTeamMemberParticipationChanged final
{
public:
	bool                                          bIsParticipating;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTeamMemberInfo_OnLocalTeamMemberParticipationChanged) == 0x000001, "Wrong alignment on FortCampaignTeamMemberInfo_OnLocalTeamMemberParticipationChanged");
static_assert(sizeof(FortCampaignTeamMemberInfo_OnLocalTeamMemberParticipationChanged) == 0x000001, "Wrong size on FortCampaignTeamMemberInfo_OnLocalTeamMemberParticipationChanged");
static_assert(offsetof(FortCampaignTeamMemberInfo_OnLocalTeamMemberParticipationChanged, bIsParticipating) == 0x000000, "Member 'FortCampaignTeamMemberInfo_OnLocalTeamMemberParticipationChanged::bIsParticipating' has a wrong offset!");

// Function FortniteUI.MashWidgetBase.OnPlayerScoreUpdated
// 0x0030 (0x0030 - 0x0000)
struct MashWidgetBase_OnPlayerScoreUpdated final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreakLevel;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStreakLevel;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StreakMultiplier;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocalPlayer;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MashWidgetBase_OnPlayerScoreUpdated) == 0x000008, "Wrong alignment on MashWidgetBase_OnPlayerScoreUpdated");
static_assert(sizeof(MashWidgetBase_OnPlayerScoreUpdated) == 0x000030, "Wrong size on MashWidgetBase_OnPlayerScoreUpdated");
static_assert(offsetof(MashWidgetBase_OnPlayerScoreUpdated, Param_Index) == 0x000000, "Member 'MashWidgetBase_OnPlayerScoreUpdated::Param_Index' has a wrong offset!");
static_assert(offsetof(MashWidgetBase_OnPlayerScoreUpdated, PlayerName) == 0x000008, "Member 'MashWidgetBase_OnPlayerScoreUpdated::PlayerName' has a wrong offset!");
static_assert(offsetof(MashWidgetBase_OnPlayerScoreUpdated, Score) == 0x000018, "Member 'MashWidgetBase_OnPlayerScoreUpdated::Score' has a wrong offset!");
static_assert(offsetof(MashWidgetBase_OnPlayerScoreUpdated, StreakLevel) == 0x00001C, "Member 'MashWidgetBase_OnPlayerScoreUpdated::StreakLevel' has a wrong offset!");
static_assert(offsetof(MashWidgetBase_OnPlayerScoreUpdated, MaxStreakLevel) == 0x000020, "Member 'MashWidgetBase_OnPlayerScoreUpdated::MaxStreakLevel' has a wrong offset!");
static_assert(offsetof(MashWidgetBase_OnPlayerScoreUpdated, StreakMultiplier) == 0x000024, "Member 'MashWidgetBase_OnPlayerScoreUpdated::StreakMultiplier' has a wrong offset!");
static_assert(offsetof(MashWidgetBase_OnPlayerScoreUpdated, IsLocalPlayer) == 0x000028, "Member 'MashWidgetBase_OnPlayerScoreUpdated::IsLocalPlayer' has a wrong offset!");

// Function FortniteUI.MashWidgetBase.OnSquadScoreUpdated
// 0x0004 (0x0004 - 0x0000)
struct MashWidgetBase_OnSquadScoreUpdated final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashWidgetBase_OnSquadScoreUpdated) == 0x000004, "Wrong alignment on MashWidgetBase_OnSquadScoreUpdated");
static_assert(sizeof(MashWidgetBase_OnSquadScoreUpdated) == 0x000004, "Wrong size on MashWidgetBase_OnSquadScoreUpdated");
static_assert(offsetof(MashWidgetBase_OnSquadScoreUpdated, Score) == 0x000000, "Member 'MashWidgetBase_OnSquadScoreUpdated::Score' has a wrong offset!");

// Function FortniteUI.MashWidgetBase.OnTeamScoreMultiplierChanged
// 0x0001 (0x0001 - 0x0000)
struct MashWidgetBase_OnTeamScoreMultiplierChanged final
{
public:
	uint8                                         TeamScoreMultiplier;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashWidgetBase_OnTeamScoreMultiplierChanged) == 0x000001, "Wrong alignment on MashWidgetBase_OnTeamScoreMultiplierChanged");
static_assert(sizeof(MashWidgetBase_OnTeamScoreMultiplierChanged) == 0x000001, "Wrong size on MashWidgetBase_OnTeamScoreMultiplierChanged");
static_assert(offsetof(MashWidgetBase_OnTeamScoreMultiplierChanged, TeamScoreMultiplier) == 0x000000, "Member 'MashWidgetBase_OnTeamScoreMultiplierChanged::TeamScoreMultiplier' has a wrong offset!");

// Function FortniteUI.AthenaSquadMemberDetailedEntry.GetSquadDisplayInfo
// 0x0088 (0x0088 - 0x0000)
struct AthenaSquadMemberDetailedEntry_GetSquadDisplayInfo final
{
public:
	struct FAthenaTeamDisplayInfo                 ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaSquadMemberDetailedEntry_GetSquadDisplayInfo) == 0x000008, "Wrong alignment on AthenaSquadMemberDetailedEntry_GetSquadDisplayInfo");
static_assert(sizeof(AthenaSquadMemberDetailedEntry_GetSquadDisplayInfo) == 0x000088, "Wrong size on AthenaSquadMemberDetailedEntry_GetSquadDisplayInfo");
static_assert(offsetof(AthenaSquadMemberDetailedEntry_GetSquadDisplayInfo, ReturnValue) == 0x000000, "Member 'AthenaSquadMemberDetailedEntry_GetSquadDisplayInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortActivatableVideoPanel.LoadVideo
// 0x000C (0x000C - 0x0000)
struct FortActivatableVideoPanel_LoadVideo final
{
public:
	class FName                                   VideoId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortActivatableVideoPanel_LoadVideo) == 0x000004, "Wrong alignment on FortActivatableVideoPanel_LoadVideo");
static_assert(sizeof(FortActivatableVideoPanel_LoadVideo) == 0x00000C, "Wrong size on FortActivatableVideoPanel_LoadVideo");
static_assert(offsetof(FortActivatableVideoPanel_LoadVideo, VideoId) == 0x000000, "Member 'FortActivatableVideoPanel_LoadVideo::VideoId' has a wrong offset!");
static_assert(offsetof(FortActivatableVideoPanel_LoadVideo, ReturnValue) == 0x000008, "Member 'FortActivatableVideoPanel_LoadVideo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortActivatableVideoPanel.LoadVideoByIndex
// 0x0008 (0x0008 - 0x0000)
struct FortActivatableVideoPanel_LoadVideoByIndex final
{
public:
	int32                                         VideoIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortActivatableVideoPanel_LoadVideoByIndex) == 0x000004, "Wrong alignment on FortActivatableVideoPanel_LoadVideoByIndex");
static_assert(sizeof(FortActivatableVideoPanel_LoadVideoByIndex) == 0x000008, "Wrong size on FortActivatableVideoPanel_LoadVideoByIndex");
static_assert(offsetof(FortActivatableVideoPanel_LoadVideoByIndex, VideoIndex) == 0x000000, "Member 'FortActivatableVideoPanel_LoadVideoByIndex::VideoIndex' has a wrong offset!");
static_assert(offsetof(FortActivatableVideoPanel_LoadVideoByIndex, ReturnValue) == 0x000004, "Member 'FortActivatableVideoPanel_LoadVideoByIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortActivatableVideoPanel.StreamVideo
// 0x0018 (0x0018 - 0x0000)
struct FortActivatableVideoPanel_StreamVideo final
{
public:
	class FString                                 VideoURL;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortActivatableVideoPanel_StreamVideo) == 0x000008, "Wrong alignment on FortActivatableVideoPanel_StreamVideo");
static_assert(sizeof(FortActivatableVideoPanel_StreamVideo) == 0x000018, "Wrong size on FortActivatableVideoPanel_StreamVideo");
static_assert(offsetof(FortActivatableVideoPanel_StreamVideo, VideoURL) == 0x000000, "Member 'FortActivatableVideoPanel_StreamVideo::VideoURL' has a wrong offset!");
static_assert(offsetof(FortActivatableVideoPanel_StreamVideo, ReturnValue) == 0x000010, "Member 'FortActivatableVideoPanel_StreamVideo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortActivatableVideoPanel.StreamVideoFromSource
// 0x0010 (0x0010 - 0x0000)
struct FortActivatableVideoPanel_StreamVideoFromSource final
{
public:
	class UStreamMediaSource*                     StreamSource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortActivatableVideoPanel_StreamVideoFromSource) == 0x000008, "Wrong alignment on FortActivatableVideoPanel_StreamVideoFromSource");
static_assert(sizeof(FortActivatableVideoPanel_StreamVideoFromSource) == 0x000010, "Wrong size on FortActivatableVideoPanel_StreamVideoFromSource");
static_assert(offsetof(FortActivatableVideoPanel_StreamVideoFromSource, StreamSource) == 0x000000, "Member 'FortActivatableVideoPanel_StreamVideoFromSource::StreamSource' has a wrong offset!");
static_assert(offsetof(FortActivatableVideoPanel_StreamVideoFromSource, ReturnValue) == 0x000008, "Member 'FortActivatableVideoPanel_StreamVideoFromSource::ReturnValue' has a wrong offset!");

// Function FortniteUI.LiveStreamScreen.OnRetrieveVideoUrlResult
// 0x0010 (0x0010 - 0x0000)
struct LiveStreamScreen_OnRetrieveVideoUrlResult final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiveStreamScreen_OnRetrieveVideoUrlResult) == 0x000008, "Wrong alignment on LiveStreamScreen_OnRetrieveVideoUrlResult");
static_assert(sizeof(LiveStreamScreen_OnRetrieveVideoUrlResult) == 0x000010, "Wrong size on LiveStreamScreen_OnRetrieveVideoUrlResult");
static_assert(offsetof(LiveStreamScreen_OnRetrieveVideoUrlResult, URL) == 0x000000, "Member 'LiveStreamScreen_OnRetrieveVideoUrlResult::URL' has a wrong offset!");

// Function FortniteUI.AthenaStatsScreenBase.OnQueryFinished
// 0x0002 (0x0002 - 0x0000)
struct AthenaStatsScreenBase_OnQueryFinished final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasStatsToDisplay;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaStatsScreenBase_OnQueryFinished) == 0x000001, "Wrong alignment on AthenaStatsScreenBase_OnQueryFinished");
static_assert(sizeof(AthenaStatsScreenBase_OnQueryFinished) == 0x000002, "Wrong size on AthenaStatsScreenBase_OnQueryFinished");
static_assert(offsetof(AthenaStatsScreenBase_OnQueryFinished, bWasSuccessful) == 0x000000, "Member 'AthenaStatsScreenBase_OnQueryFinished::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(AthenaStatsScreenBase_OnQueryFinished, bHasStatsToDisplay) == 0x000001, "Member 'AthenaStatsScreenBase_OnQueryFinished::bHasStatsToDisplay' has a wrong offset!");

// Function FortniteUI.AthenaStatsScreenBase.OnTabSelected
// 0x0008 (0x0008 - 0x0000)
struct AthenaStatsScreenBase_OnTabSelected final
{
public:
	class FName                                   TabName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaStatsScreenBase_OnTabSelected) == 0x000004, "Wrong alignment on AthenaStatsScreenBase_OnTabSelected");
static_assert(sizeof(AthenaStatsScreenBase_OnTabSelected) == 0x000008, "Wrong size on AthenaStatsScreenBase_OnTabSelected");
static_assert(offsetof(AthenaStatsScreenBase_OnTabSelected, TabName) == 0x000000, "Member 'AthenaStatsScreenBase_OnTabSelected::TabName' has a wrong offset!");

// Function FortniteUI.AthenaStatsScreenBase.SetAccountIdToQueryFromString
// 0x0010 (0x0010 - 0x0000)
struct AthenaStatsScreenBase_SetAccountIdToQueryFromString final
{
public:
	class FString                                 InAccountId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaStatsScreenBase_SetAccountIdToQueryFromString) == 0x000008, "Wrong alignment on AthenaStatsScreenBase_SetAccountIdToQueryFromString");
static_assert(sizeof(AthenaStatsScreenBase_SetAccountIdToQueryFromString) == 0x000010, "Wrong size on AthenaStatsScreenBase_SetAccountIdToQueryFromString");
static_assert(offsetof(AthenaStatsScreenBase_SetAccountIdToQueryFromString, InAccountId) == 0x000000, "Member 'AthenaStatsScreenBase_SetAccountIdToQueryFromString::InAccountId' has a wrong offset!");

// Function FortniteUI.AthenaStatsScreenBase.SetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct AthenaStatsScreenBase_SetDisplayName final
{
public:
	class FText                                   InDisplayName;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaStatsScreenBase_SetDisplayName) == 0x000008, "Wrong alignment on AthenaStatsScreenBase_SetDisplayName");
static_assert(sizeof(AthenaStatsScreenBase_SetDisplayName) == 0x000018, "Wrong size on AthenaStatsScreenBase_SetDisplayName");
static_assert(offsetof(AthenaStatsScreenBase_SetDisplayName, InDisplayName) == 0x000000, "Member 'AthenaStatsScreenBase_SetDisplayName::InDisplayName' has a wrong offset!");

// Function FortniteUI.AthenaStatsScreenBase.SetPlatformButtonText
// 0x0018 (0x0018 - 0x0000)
struct AthenaStatsScreenBase_SetPlatformButtonText final
{
public:
	class FText                                   PlatformButtonText;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaStatsScreenBase_SetPlatformButtonText) == 0x000008, "Wrong alignment on AthenaStatsScreenBase_SetPlatformButtonText");
static_assert(sizeof(AthenaStatsScreenBase_SetPlatformButtonText) == 0x000018, "Wrong size on AthenaStatsScreenBase_SetPlatformButtonText");
static_assert(offsetof(AthenaStatsScreenBase_SetPlatformButtonText, PlatformButtonText) == 0x000000, "Member 'AthenaStatsScreenBase_SetPlatformButtonText::PlatformButtonText' has a wrong offset!");

// Function FortniteUI.FortSquadSlotWidget.SetCardSize
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotWidget_SetCardSize final
{
public:
	EFortItemCardSize                             CardSize;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotWidget_SetCardSize) == 0x000001, "Wrong alignment on FortSquadSlotWidget_SetCardSize");
static_assert(sizeof(FortSquadSlotWidget_SetCardSize) == 0x000001, "Wrong size on FortSquadSlotWidget_SetCardSize");
static_assert(offsetof(FortSquadSlotWidget_SetCardSize, CardSize) == 0x000000, "Member 'FortSquadSlotWidget_SetCardSize::CardSize' has a wrong offset!");

// Function FortniteUI.FortSquadSlotWidget.SetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotWidget_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotWidget_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotWidget_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotWidget_SetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotWidget_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotWidget_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotWidget_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotWidget_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000008, "Member 'FortSquadSlotWidget_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotWidget.GetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotWidget_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotWidget_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotWidget_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotWidget_GetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotWidget_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotWidget_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotWidget_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotWidget_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000008, "Member 'FortSquadSlotWidget_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotWidget.GetItemInSquadSlotBP
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotWidget_GetItemInSquadSlotBP final
{
public:
	const class ULocalPlayer*                     LocalPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotWidget_GetItemInSquadSlotBP) == 0x000008, "Wrong alignment on FortSquadSlotWidget_GetItemInSquadSlotBP");
static_assert(sizeof(FortSquadSlotWidget_GetItemInSquadSlotBP) == 0x000010, "Wrong size on FortSquadSlotWidget_GetItemInSquadSlotBP");
static_assert(offsetof(FortSquadSlotWidget_GetItemInSquadSlotBP, LocalPlayer) == 0x000000, "Member 'FortSquadSlotWidget_GetItemInSquadSlotBP::LocalPlayer' has a wrong offset!");
static_assert(offsetof(FortSquadSlotWidget_GetItemInSquadSlotBP, ReturnValue) == 0x000008, "Member 'FortSquadSlotWidget_GetItemInSquadSlotBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotWidget.IsSquadSlotLockedBP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotWidget_IsSquadSlotLockedBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotWidget_IsSquadSlotLockedBP) == 0x000001, "Wrong alignment on FortSquadSlotWidget_IsSquadSlotLockedBP");
static_assert(sizeof(FortSquadSlotWidget_IsSquadSlotLockedBP) == 0x000001, "Wrong size on FortSquadSlotWidget_IsSquadSlotLockedBP");
static_assert(offsetof(FortSquadSlotWidget_IsSquadSlotLockedBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotWidget_IsSquadSlotLockedBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPrimaryPanel.OnBackActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnBackActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnBackActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookPrimaryPanel_OnBackActionExecuted");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnBackActionExecuted) == 0x000001, "Wrong size on FortCollectionBookPrimaryPanel_OnBackActionExecuted");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnBackActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnBackActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPrimaryPanel.OnCollectionBookPageClicked
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked final
{
public:
	const class UFortCollectionBookPage*          ClickedPage;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked) == 0x000008, "Wrong alignment on FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked) == 0x000008, "Wrong size on FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked, ClickedPage) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnCollectionBookPageClicked::ClickedPage' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPrimaryPanel.OnCollectionBookPageSelected
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected final
{
public:
	const class UFortCollectionBookPage*          SelectedPage;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected) == 0x000008, "Wrong alignment on FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected) == 0x000008, "Wrong size on FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected, SelectedPage) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnCollectionBookPageSelected::SelectedPage' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPrimaryPanel.OnCollectionBookSectionClicked
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked final
{
public:
	const class UFortCollectionBookSection*       ClickedSection;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked) == 0x000008, "Wrong alignment on FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked) == 0x000008, "Wrong size on FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked, ClickedSection) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnCollectionBookSectionClicked::ClickedSection' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPrimaryPanel.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnInputMethodChanged final
{
public:
	ECommonInputType                              CurrentInputType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnInputMethodChanged) == 0x000001, "Wrong alignment on FortCollectionBookPrimaryPanel_OnInputMethodChanged");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnInputMethodChanged) == 0x000001, "Wrong size on FortCollectionBookPrimaryPanel_OnInputMethodChanged");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnInputMethodChanged, CurrentInputType) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnInputMethodChanged::CurrentInputType' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPrimaryPanel.OnSummonInfoPanelExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted) == 0x000001, "Wrong alignment on FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted");
static_assert(sizeof(FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted) == 0x000001, "Wrong size on FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted");
static_assert(offsetof(FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookPrimaryPanel_OnSummonInfoPanelExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaStormSurgeWarningBase.OnStartDisplaying
// 0x0038 (0x0038 - 0x0000)
struct AthenaStormSurgeWarningBase_OnStartDisplaying final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   SubTitleText;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bDisplaySubtitle;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayDamageActiveSound;                            // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaStormSurgeWarningBase_OnStartDisplaying) == 0x000008, "Wrong alignment on AthenaStormSurgeWarningBase_OnStartDisplaying");
static_assert(sizeof(AthenaStormSurgeWarningBase_OnStartDisplaying) == 0x000038, "Wrong size on AthenaStormSurgeWarningBase_OnStartDisplaying");
static_assert(offsetof(AthenaStormSurgeWarningBase_OnStartDisplaying, TitleText) == 0x000000, "Member 'AthenaStormSurgeWarningBase_OnStartDisplaying::TitleText' has a wrong offset!");
static_assert(offsetof(AthenaStormSurgeWarningBase_OnStartDisplaying, SubTitleText) == 0x000018, "Member 'AthenaStormSurgeWarningBase_OnStartDisplaying::SubTitleText' has a wrong offset!");
static_assert(offsetof(AthenaStormSurgeWarningBase_OnStartDisplaying, bDisplaySubtitle) == 0x000030, "Member 'AthenaStormSurgeWarningBase_OnStartDisplaying::bDisplaySubtitle' has a wrong offset!");
static_assert(offsetof(AthenaStormSurgeWarningBase_OnStartDisplaying, bPlayDamageActiveSound) == 0x000031, "Member 'AthenaStormSurgeWarningBase_OnStartDisplaying::bPlayDamageActiveSound' has a wrong offset!");

// Function FortniteUI.AthenaStormSurgeWarningBase.OnStormCapStateChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaStormSurgeWarningBase_OnStormCapStateChanged final
{
public:
	EAthenaStormCapState                          StormCapState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaStormSurgeWarningBase_OnStormCapStateChanged) == 0x000001, "Wrong alignment on AthenaStormSurgeWarningBase_OnStormCapStateChanged");
static_assert(sizeof(AthenaStormSurgeWarningBase_OnStormCapStateChanged) == 0x000001, "Wrong size on AthenaStormSurgeWarningBase_OnStormCapStateChanged");
static_assert(offsetof(AthenaStormSurgeWarningBase_OnStormCapStateChanged, StormCapState) == 0x000000, "Member 'AthenaStormSurgeWarningBase_OnStormCapStateChanged::StormCapState' has a wrong offset!");

// Function FortniteUI.AthenaStormSurgeWidgetBase.OnStartDisplaying
// 0x0018 (0x0018 - 0x0000)
struct AthenaStormSurgeWidgetBase_OnStartDisplaying final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaStormSurgeWidgetBase_OnStartDisplaying) == 0x000008, "Wrong alignment on AthenaStormSurgeWidgetBase_OnStartDisplaying");
static_assert(sizeof(AthenaStormSurgeWidgetBase_OnStartDisplaying) == 0x000018, "Wrong size on AthenaStormSurgeWidgetBase_OnStartDisplaying");
static_assert(offsetof(AthenaStormSurgeWidgetBase_OnStartDisplaying, TitleText) == 0x000000, "Member 'AthenaStormSurgeWidgetBase_OnStartDisplaying::TitleText' has a wrong offset!");

// Function FortniteUI.AthenaStormSurgeWidgetBase.OnStormCapStateChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaStormSurgeWidgetBase_OnStormCapStateChanged final
{
public:
	EAthenaStormCapState                          StormCapState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaStormSurgeWidgetBase_OnStormCapStateChanged) == 0x000001, "Wrong alignment on AthenaStormSurgeWidgetBase_OnStormCapStateChanged");
static_assert(sizeof(AthenaStormSurgeWidgetBase_OnStormCapStateChanged) == 0x000001, "Wrong size on AthenaStormSurgeWidgetBase_OnStormCapStateChanged");
static_assert(offsetof(AthenaStormSurgeWidgetBase_OnStormCapStateChanged, StormCapState) == 0x000000, "Member 'AthenaStormSurgeWidgetBase_OnStormCapStateChanged::StormCapState' has a wrong offset!");

// Function FortniteUI.AthenaStormSurgeWidgetBase.OnUpdateThresholdDisplay
// 0x0020 (0x0020 - 0x0000)
struct AthenaStormSurgeWidgetBase_OnUpdateThresholdDisplay final
{
public:
	class FText                                   ThresholdText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EStormSurgeThresholdType                      ThresholdType;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaStormSurgeWidgetBase_OnUpdateThresholdDisplay) == 0x000008, "Wrong alignment on AthenaStormSurgeWidgetBase_OnUpdateThresholdDisplay");
static_assert(sizeof(AthenaStormSurgeWidgetBase_OnUpdateThresholdDisplay) == 0x000020, "Wrong size on AthenaStormSurgeWidgetBase_OnUpdateThresholdDisplay");
static_assert(offsetof(AthenaStormSurgeWidgetBase_OnUpdateThresholdDisplay, ThresholdText) == 0x000000, "Member 'AthenaStormSurgeWidgetBase_OnUpdateThresholdDisplay::ThresholdText' has a wrong offset!");
static_assert(offsetof(AthenaStormSurgeWidgetBase_OnUpdateThresholdDisplay, ThresholdType) == 0x000018, "Member 'AthenaStormSurgeWidgetBase_OnUpdateThresholdDisplay::ThresholdType' has a wrong offset!");

// Function FortniteUI.AthenaTeamAliveCountBase.SetTeamSlotData
// 0x0040 (0x0040 - 0x0000)
struct AthenaTeamAliveCountBase_SetTeamSlotData final
{
public:
	int32                                         TeamIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAthenaTeamCountSlotData               TeamSlotData;                                      // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTeamAliveCountBase_SetTeamSlotData) == 0x000008, "Wrong alignment on AthenaTeamAliveCountBase_SetTeamSlotData");
static_assert(sizeof(AthenaTeamAliveCountBase_SetTeamSlotData) == 0x000040, "Wrong size on AthenaTeamAliveCountBase_SetTeamSlotData");
static_assert(offsetof(AthenaTeamAliveCountBase_SetTeamSlotData, TeamIdx) == 0x000000, "Member 'AthenaTeamAliveCountBase_SetTeamSlotData::TeamIdx' has a wrong offset!");
static_assert(offsetof(AthenaTeamAliveCountBase_SetTeamSlotData, TeamSlotData) == 0x000008, "Member 'AthenaTeamAliveCountBase_SetTeamSlotData::TeamSlotData' has a wrong offset!");

// Function FortniteUI.AthenaTeamMemberButton.OnMuteToggled
// 0x0001 (0x0001 - 0x0000)
struct AthenaTeamMemberButton_OnMuteToggled final
{
public:
	bool                                          bIsMuted;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTeamMemberButton_OnMuteToggled) == 0x000001, "Wrong alignment on AthenaTeamMemberButton_OnMuteToggled");
static_assert(sizeof(AthenaTeamMemberButton_OnMuteToggled) == 0x000001, "Wrong size on AthenaTeamMemberButton_OnMuteToggled");
static_assert(offsetof(AthenaTeamMemberButton_OnMuteToggled, bIsMuted) == 0x000000, "Member 'AthenaTeamMemberButton_OnMuteToggled::bIsMuted' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressionRewardWidget.SetAssociatedLevel
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressionRewardWidget_SetAssociatedLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardWidget_SetAssociatedLevel) == 0x000004, "Wrong alignment on FortCollectionBookProgressionRewardWidget_SetAssociatedLevel");
static_assert(sizeof(FortCollectionBookProgressionRewardWidget_SetAssociatedLevel) == 0x000004, "Wrong size on FortCollectionBookProgressionRewardWidget_SetAssociatedLevel");
static_assert(offsetof(FortCollectionBookProgressionRewardWidget_SetAssociatedLevel, Level) == 0x000000, "Member 'FortCollectionBookProgressionRewardWidget_SetAssociatedLevel::Level' has a wrong offset!");

// Function FortniteUI.AthenaTeamScoreWidgetBase.HandleScoreChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaTeamScoreWidgetBase_HandleScoreChanged final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTeamScoreWidgetBase_HandleScoreChanged) == 0x000004, "Wrong alignment on AthenaTeamScoreWidgetBase_HandleScoreChanged");
static_assert(sizeof(AthenaTeamScoreWidgetBase_HandleScoreChanged) == 0x000004, "Wrong size on AthenaTeamScoreWidgetBase_HandleScoreChanged");
static_assert(offsetof(AthenaTeamScoreWidgetBase_HandleScoreChanged, Score) == 0x000000, "Member 'AthenaTeamScoreWidgetBase_HandleScoreChanged::Score' has a wrong offset!");

// Function FortniteUI.AthenaTeamScoreWidgetBase.HandleSpectatingChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaTeamScoreWidgetBase_HandleSpectatingChanged final
{
public:
	class AFortPlayerStateZone*                   SpectatingTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTeamScoreWidgetBase_HandleSpectatingChanged) == 0x000008, "Wrong alignment on AthenaTeamScoreWidgetBase_HandleSpectatingChanged");
static_assert(sizeof(AthenaTeamScoreWidgetBase_HandleSpectatingChanged) == 0x000008, "Wrong size on AthenaTeamScoreWidgetBase_HandleSpectatingChanged");
static_assert(offsetof(AthenaTeamScoreWidgetBase_HandleSpectatingChanged, SpectatingTarget) == 0x000000, "Member 'AthenaTeamScoreWidgetBase_HandleSpectatingChanged::SpectatingTarget' has a wrong offset!");

// Function FortniteUI.AthenaTeamScoreWidgetBase.OnLeaderboardChanged
// 0x0008 (0x0008 - 0x0000)
struct AthenaTeamScoreWidgetBase_OnLeaderboardChanged final
{
public:
	int32                                         ScoreDelta;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWinner;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasScore;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaTeamScoreWidgetBase_OnLeaderboardChanged) == 0x000004, "Wrong alignment on AthenaTeamScoreWidgetBase_OnLeaderboardChanged");
static_assert(sizeof(AthenaTeamScoreWidgetBase_OnLeaderboardChanged) == 0x000008, "Wrong size on AthenaTeamScoreWidgetBase_OnLeaderboardChanged");
static_assert(offsetof(AthenaTeamScoreWidgetBase_OnLeaderboardChanged, ScoreDelta) == 0x000000, "Member 'AthenaTeamScoreWidgetBase_OnLeaderboardChanged::ScoreDelta' has a wrong offset!");
static_assert(offsetof(AthenaTeamScoreWidgetBase_OnLeaderboardChanged, bIsWinner) == 0x000004, "Member 'AthenaTeamScoreWidgetBase_OnLeaderboardChanged::bIsWinner' has a wrong offset!");
static_assert(offsetof(AthenaTeamScoreWidgetBase_OnLeaderboardChanged, bHasScore) == 0x000005, "Member 'AthenaTeamScoreWidgetBase_OnLeaderboardChanged::bHasScore' has a wrong offset!");

// Function FortniteUI.AthenaTeamScoreWidgetBase.OnPlacementChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaTeamScoreWidgetBase_OnPlacementChanged final
{
public:
	int32                                         Placement;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTeamScoreWidgetBase_OnPlacementChanged) == 0x000004, "Wrong alignment on AthenaTeamScoreWidgetBase_OnPlacementChanged");
static_assert(sizeof(AthenaTeamScoreWidgetBase_OnPlacementChanged) == 0x000004, "Wrong size on AthenaTeamScoreWidgetBase_OnPlacementChanged");
static_assert(offsetof(AthenaTeamScoreWidgetBase_OnPlacementChanged, Placement) == 0x000000, "Member 'AthenaTeamScoreWidgetBase_OnPlacementChanged::Placement' has a wrong offset!");

// Function FortniteUI.AthenaTeamScoreWidgetBase.OnScoreChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaTeamScoreWidgetBase_OnScoreChanged final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTeamScoreWidgetBase_OnScoreChanged) == 0x000004, "Wrong alignment on AthenaTeamScoreWidgetBase_OnScoreChanged");
static_assert(sizeof(AthenaTeamScoreWidgetBase_OnScoreChanged) == 0x000004, "Wrong size on AthenaTeamScoreWidgetBase_OnScoreChanged");
static_assert(offsetof(AthenaTeamScoreWidgetBase_OnScoreChanged, Score) == 0x000000, "Member 'AthenaTeamScoreWidgetBase_OnScoreChanged::Score' has a wrong offset!");

// Function FortniteUI.FortHomeCMSScreenBase.AreTilesLoaded
// 0x0001 (0x0001 - 0x0000)
struct FortHomeCMSScreenBase_AreTilesLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomeCMSScreenBase_AreTilesLoaded) == 0x000001, "Wrong alignment on FortHomeCMSScreenBase_AreTilesLoaded");
static_assert(sizeof(FortHomeCMSScreenBase_AreTilesLoaded) == 0x000001, "Wrong size on FortHomeCMSScreenBase_AreTilesLoaded");
static_assert(offsetof(FortHomeCMSScreenBase_AreTilesLoaded, ReturnValue) == 0x000000, "Member 'FortHomeCMSScreenBase_AreTilesLoaded::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaTeamSquadEntry.OnSquadAssigned
// 0x0088 (0x0088 - 0x0000)
struct AthenaTeamSquadEntry_OnSquadAssigned final
{
public:
	struct FAthenaTeamDisplayInfo                 SquadStyle;                                        // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTeamSquadEntry_OnSquadAssigned) == 0x000008, "Wrong alignment on AthenaTeamSquadEntry_OnSquadAssigned");
static_assert(sizeof(AthenaTeamSquadEntry_OnSquadAssigned) == 0x000088, "Wrong size on AthenaTeamSquadEntry_OnSquadAssigned");
static_assert(offsetof(AthenaTeamSquadEntry_OnSquadAssigned, SquadStyle) == 0x000000, "Member 'AthenaTeamSquadEntry_OnSquadAssigned::SquadStyle' has a wrong offset!");

// Function FortniteUI.AthenaTeamSquadEntry.OnSquadIsEmptyChanged
// 0x0002 (0x0002 - 0x0000)
struct AthenaTeamSquadEntry_OnSquadIsEmptyChanged final
{
public:
	bool                                          bSquadIsEmpty;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultipleSquadsPopulated;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTeamSquadEntry_OnSquadIsEmptyChanged) == 0x000001, "Wrong alignment on AthenaTeamSquadEntry_OnSquadIsEmptyChanged");
static_assert(sizeof(AthenaTeamSquadEntry_OnSquadIsEmptyChanged) == 0x000002, "Wrong size on AthenaTeamSquadEntry_OnSquadIsEmptyChanged");
static_assert(offsetof(AthenaTeamSquadEntry_OnSquadIsEmptyChanged, bSquadIsEmpty) == 0x000000, "Member 'AthenaTeamSquadEntry_OnSquadIsEmptyChanged::bSquadIsEmpty' has a wrong offset!");
static_assert(offsetof(AthenaTeamSquadEntry_OnSquadIsEmptyChanged, bMultipleSquadsPopulated) == 0x000001, "Member 'AthenaTeamSquadEntry_OnSquadIsEmptyChanged::bMultipleSquadsPopulated' has a wrong offset!");

// Function FortniteUI.AthenaTeamSquadEntry.GetSquadId
// 0x0004 (0x0004 - 0x0000)
struct AthenaTeamSquadEntry_GetSquadId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTeamSquadEntry_GetSquadId) == 0x000004, "Wrong alignment on AthenaTeamSquadEntry_GetSquadId");
static_assert(sizeof(AthenaTeamSquadEntry_GetSquadId) == 0x000004, "Wrong size on AthenaTeamSquadEntry_GetSquadId");
static_assert(offsetof(AthenaTeamSquadEntry_GetSquadId, ReturnValue) == 0x000000, "Member 'AthenaTeamSquadEntry_GetSquadId::ReturnValue' has a wrong offset!");

// Function FortniteUI.MatchmakingInputIndicatorBase.OnInputSourceTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct MatchmakingInputIndicatorBase_OnInputSourceTypeChanged final
{
public:
	ECommonInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingInputIndicatorBase_OnInputSourceTypeChanged) == 0x000001, "Wrong alignment on MatchmakingInputIndicatorBase_OnInputSourceTypeChanged");
static_assert(sizeof(MatchmakingInputIndicatorBase_OnInputSourceTypeChanged) == 0x000001, "Wrong size on MatchmakingInputIndicatorBase_OnInputSourceTypeChanged");
static_assert(offsetof(MatchmakingInputIndicatorBase_OnInputSourceTypeChanged, InputType) == 0x000000, "Member 'MatchmakingInputIndicatorBase_OnInputSourceTypeChanged::InputType' has a wrong offset!");

// Function FortniteUI.MatchmakingInputIndicatorBase.SetRemotePlayer
// 0x0028 (0x0028 - 0x0000)
struct MatchmakingInputIndicatorBase_SetRemotePlayer final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingInputIndicatorBase_SetRemotePlayer) == 0x000008, "Wrong alignment on MatchmakingInputIndicatorBase_SetRemotePlayer");
static_assert(sizeof(MatchmakingInputIndicatorBase_SetRemotePlayer) == 0x000028, "Wrong size on MatchmakingInputIndicatorBase_SetRemotePlayer");
static_assert(offsetof(MatchmakingInputIndicatorBase_SetRemotePlayer, UniqueId) == 0x000000, "Member 'MatchmakingInputIndicatorBase_SetRemotePlayer::UniqueId' has a wrong offset!");

// Function FortniteUI.FortAsyncAction_ShowPartyDialog.ShowPartyLeaderManageDialog
// 0x0220 (0x0220 - 0x0000)
struct FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTeamMemberInfo                    Param_TeamMemberInfo;                              // 0x0008(0x0200)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalPlayer*                           Param_LocalPlayer;                                 // 0x0208(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            LeftAdditionalContent;                             // 0x0210(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_ShowPartyDialog*       ReturnValue;                                       // 0x0218(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog) == 0x000008, "Wrong alignment on FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog");
static_assert(sizeof(FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog) == 0x000220, "Wrong size on FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog");
static_assert(offsetof(FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog, InWorldContextObject) == 0x000000, "Member 'FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog, Param_TeamMemberInfo) == 0x000008, "Member 'FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog::Param_TeamMemberInfo' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog, Param_LocalPlayer) == 0x000208, "Member 'FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog::Param_LocalPlayer' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog, LeftAdditionalContent) == 0x000210, "Member 'FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog::LeftAdditionalContent' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog, ReturnValue) == 0x000218, "Member 'FortAsyncAction_ShowPartyDialog_ShowPartyLeaderManageDialog::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAsyncAction_ShowPartyDialog.ShowPartyMemberManageDialog
// 0x0220 (0x0220 - 0x0000)
struct FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTeamMemberInfo                    Param_TeamMemberInfo;                              // 0x0008(0x0200)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalPlayer*                           Param_LocalPlayer;                                 // 0x0208(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            LeftAdditionalContent;                             // 0x0210(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_ShowPartyDialog*       ReturnValue;                                       // 0x0218(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog) == 0x000008, "Wrong alignment on FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog");
static_assert(sizeof(FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog) == 0x000220, "Wrong size on FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog");
static_assert(offsetof(FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog, InWorldContextObject) == 0x000000, "Member 'FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog, Param_TeamMemberInfo) == 0x000008, "Member 'FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog::Param_TeamMemberInfo' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog, Param_LocalPlayer) == 0x000208, "Member 'FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog::Param_LocalPlayer' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog, LeftAdditionalContent) == 0x000210, "Member 'FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog::LeftAdditionalContent' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog, ReturnValue) == 0x000218, "Member 'FortAsyncAction_ShowPartyDialog_ShowPartyMemberManageDialog::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaTimeWidgetBase.HandleGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaTimeWidgetBase_HandleGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTimeWidgetBase_HandleGamePhaseChanged) == 0x000001, "Wrong alignment on AthenaTimeWidgetBase_HandleGamePhaseChanged");
static_assert(sizeof(AthenaTimeWidgetBase_HandleGamePhaseChanged) == 0x000001, "Wrong size on AthenaTimeWidgetBase_HandleGamePhaseChanged");
static_assert(offsetof(AthenaTimeWidgetBase_HandleGamePhaseChanged, GamePhase) == 0x000000, "Member 'AthenaTimeWidgetBase_HandleGamePhaseChanged::GamePhase' has a wrong offset!");

// Function FortniteUI.AthenaTimeWidgetBase.OnGamePhaseStepChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaTimeWidgetBase_OnGamePhaseStepChanged final
{
public:
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTimeWidgetBase_OnGamePhaseStepChanged) == 0x000001, "Wrong alignment on AthenaTimeWidgetBase_OnGamePhaseStepChanged");
static_assert(sizeof(AthenaTimeWidgetBase_OnGamePhaseStepChanged) == 0x000001, "Wrong size on AthenaTimeWidgetBase_OnGamePhaseStepChanged");
static_assert(offsetof(AthenaTimeWidgetBase_OnGamePhaseStepChanged, GamePhaseStep) == 0x000000, "Member 'AthenaTimeWidgetBase_OnGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function FortniteUI.FortSignInConsole.HandleTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortSignInConsole_HandleTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSignInConsole_HandleTextCommitted) == 0x000008, "Wrong alignment on FortSignInConsole_HandleTextCommitted");
static_assert(sizeof(FortSignInConsole_HandleTextCommitted) == 0x000020, "Wrong size on FortSignInConsole_HandleTextCommitted");
static_assert(offsetof(FortSignInConsole_HandleTextCommitted, Text) == 0x000000, "Member 'FortSignInConsole_HandleTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(FortSignInConsole_HandleTextCommitted, CommitMethod) == 0x000018, "Member 'FortSignInConsole_HandleTextCommitted::CommitMethod' has a wrong offset!");

// Function FortniteUI.FortSignInConsole.UpdateEmailStatus
// 0x0018 (0x0018 - 0x0000)
struct FortSignInConsole_UpdateEmailStatus final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSignInConsole_UpdateEmailStatus) == 0x000008, "Wrong alignment on FortSignInConsole_UpdateEmailStatus");
static_assert(sizeof(FortSignInConsole_UpdateEmailStatus) == 0x000018, "Wrong size on FortSignInConsole_UpdateEmailStatus");
static_assert(offsetof(FortSignInConsole_UpdateEmailStatus, Text) == 0x000000, "Member 'FortSignInConsole_UpdateEmailStatus::Text' has a wrong offset!");

// Function FortniteUI.FortSignInConsole.UpdatePasscodeStatus
// 0x0018 (0x0018 - 0x0000)
struct FortSignInConsole_UpdatePasscodeStatus final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSignInConsole_UpdatePasscodeStatus) == 0x000008, "Wrong alignment on FortSignInConsole_UpdatePasscodeStatus");
static_assert(sizeof(FortSignInConsole_UpdatePasscodeStatus) == 0x000018, "Wrong size on FortSignInConsole_UpdatePasscodeStatus");
static_assert(offsetof(FortSignInConsole_UpdatePasscodeStatus, Text) == 0x000000, "Member 'FortSignInConsole_UpdatePasscodeStatus::Text' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPageListWidget.OnCategoryDetailsUpdated
// 0x000C (0x000C - 0x0000)
struct FortCollectionBookPageListWidget_OnCategoryDetailsUpdated final
{
public:
	int32                                         AvailableSlots;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilledSlots;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSlots;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageListWidget_OnCategoryDetailsUpdated) == 0x000004, "Wrong alignment on FortCollectionBookPageListWidget_OnCategoryDetailsUpdated");
static_assert(sizeof(FortCollectionBookPageListWidget_OnCategoryDetailsUpdated) == 0x00000C, "Wrong size on FortCollectionBookPageListWidget_OnCategoryDetailsUpdated");
static_assert(offsetof(FortCollectionBookPageListWidget_OnCategoryDetailsUpdated, AvailableSlots) == 0x000000, "Member 'FortCollectionBookPageListWidget_OnCategoryDetailsUpdated::AvailableSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnCategoryDetailsUpdated, FilledSlots) == 0x000004, "Member 'FortCollectionBookPageListWidget_OnCategoryDetailsUpdated::FilledSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnCategoryDetailsUpdated, TotalSlots) == 0x000008, "Member 'FortCollectionBookPageListWidget_OnCategoryDetailsUpdated::TotalSlots' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPageListWidget.OnPageDetailsUpdated
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookPageListWidget_OnPageDetailsUpdated final
{
public:
	int32                                         AvailableSlots;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilledSlots;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSlots;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCollectionBookState                      State;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookPageListWidget_OnPageDetailsUpdated) == 0x000004, "Wrong alignment on FortCollectionBookPageListWidget_OnPageDetailsUpdated");
static_assert(sizeof(FortCollectionBookPageListWidget_OnPageDetailsUpdated) == 0x000010, "Wrong size on FortCollectionBookPageListWidget_OnPageDetailsUpdated");
static_assert(offsetof(FortCollectionBookPageListWidget_OnPageDetailsUpdated, AvailableSlots) == 0x000000, "Member 'FortCollectionBookPageListWidget_OnPageDetailsUpdated::AvailableSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnPageDetailsUpdated, FilledSlots) == 0x000004, "Member 'FortCollectionBookPageListWidget_OnPageDetailsUpdated::FilledSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnPageDetailsUpdated, TotalSlots) == 0x000008, "Member 'FortCollectionBookPageListWidget_OnPageDetailsUpdated::TotalSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnPageDetailsUpdated, State) == 0x00000C, "Member 'FortCollectionBookPageListWidget_OnPageDetailsUpdated::State' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPageListWidget.OnSlottedItemOperationComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookPageListWidget_OnSlottedItemOperationComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageListWidget_OnSlottedItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookPageListWidget_OnSlottedItemOperationComplete");
static_assert(sizeof(FortCollectionBookPageListWidget_OnSlottedItemOperationComplete) == 0x000010, "Wrong size on FortCollectionBookPageListWidget_OnSlottedItemOperationComplete");
static_assert(offsetof(FortCollectionBookPageListWidget_OnSlottedItemOperationComplete, SlottedItem) == 0x000000, "Member 'FortCollectionBookPageListWidget_OnSlottedItemOperationComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageListWidget_OnSlottedItemOperationComplete, SlotId) == 0x000008, "Member 'FortCollectionBookPageListWidget_OnSlottedItemOperationComplete::SlotId' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPageListWidget.SetupAsCategory
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPageListWidget_SetupAsCategory final
{
public:
	class UFortCollectionBookCategory*            Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageListWidget_SetupAsCategory) == 0x000008, "Wrong alignment on FortCollectionBookPageListWidget_SetupAsCategory");
static_assert(sizeof(FortCollectionBookPageListWidget_SetupAsCategory) == 0x000008, "Wrong size on FortCollectionBookPageListWidget_SetupAsCategory");
static_assert(offsetof(FortCollectionBookPageListWidget_SetupAsCategory, Category) == 0x000000, "Member 'FortCollectionBookPageListWidget_SetupAsCategory::Category' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPageListWidget.SetupAsPage
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPageListWidget_SetupAsPage final
{
public:
	class UFortCollectionBookPage*                Page;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageListWidget_SetupAsPage) == 0x000008, "Wrong alignment on FortCollectionBookPageListWidget_SetupAsPage");
static_assert(sizeof(FortCollectionBookPageListWidget_SetupAsPage) == 0x000008, "Wrong size on FortCollectionBookPageListWidget_SetupAsPage");
static_assert(offsetof(FortCollectionBookPageListWidget_SetupAsPage, Page) == 0x000000, "Member 'FortCollectionBookPageListWidget_SetupAsPage::Page' has a wrong offset!");

// Function FortniteUI.AthenaTopBar.AddIconToScreen
// 0x0008 (0x0008 - 0x0000)
struct AthenaTopBar_AddIconToScreen final
{
public:
	class UCommonLazyImage*                       Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTopBar_AddIconToScreen) == 0x000008, "Wrong alignment on AthenaTopBar_AddIconToScreen");
static_assert(sizeof(AthenaTopBar_AddIconToScreen) == 0x000008, "Wrong size on AthenaTopBar_AddIconToScreen");
static_assert(offsetof(AthenaTopBar_AddIconToScreen, Image) == 0x000000, "Member 'AthenaTopBar_AddIconToScreen::Image' has a wrong offset!");

// Function FortniteUI.AthenaTopBar.HandleButtonGroupSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct AthenaTopBar_HandleButtonGroupSelectionChanged final
{
public:
	class UCommonButton*                          SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaTopBar_HandleButtonGroupSelectionChanged) == 0x000008, "Wrong alignment on AthenaTopBar_HandleButtonGroupSelectionChanged");
static_assert(sizeof(AthenaTopBar_HandleButtonGroupSelectionChanged) == 0x000010, "Wrong size on AthenaTopBar_HandleButtonGroupSelectionChanged");
static_assert(offsetof(AthenaTopBar_HandleButtonGroupSelectionChanged, SelectedButton) == 0x000000, "Member 'AthenaTopBar_HandleButtonGroupSelectionChanged::SelectedButton' has a wrong offset!");
static_assert(offsetof(AthenaTopBar_HandleButtonGroupSelectionChanged, ButtonIndex) == 0x000008, "Member 'AthenaTopBar_HandleButtonGroupSelectionChanged::ButtonIndex' has a wrong offset!");

// Function FortniteUI.AthenaTopBar.HandleFeatureNavigateRequest
// 0x0001 (0x0001 - 0x0000)
struct AthenaTopBar_HandleFeatureNavigateRequest final
{
public:
	EFortUIFeature                                Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTopBar_HandleFeatureNavigateRequest) == 0x000001, "Wrong alignment on AthenaTopBar_HandleFeatureNavigateRequest");
static_assert(sizeof(AthenaTopBar_HandleFeatureNavigateRequest) == 0x000001, "Wrong size on AthenaTopBar_HandleFeatureNavigateRequest");
static_assert(offsetof(AthenaTopBar_HandleFeatureNavigateRequest, Feature) == 0x000000, "Member 'AthenaTopBar_HandleFeatureNavigateRequest::Feature' has a wrong offset!");

// Function FortniteUI.AthenaTopBar.HandleNextTabAction
// 0x0001 (0x0001 - 0x0000)
struct AthenaTopBar_HandleNextTabAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTopBar_HandleNextTabAction) == 0x000001, "Wrong alignment on AthenaTopBar_HandleNextTabAction");
static_assert(sizeof(AthenaTopBar_HandleNextTabAction) == 0x000001, "Wrong size on AthenaTopBar_HandleNextTabAction");
static_assert(offsetof(AthenaTopBar_HandleNextTabAction, bPassThrough) == 0x000000, "Member 'AthenaTopBar_HandleNextTabAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaTopBar.HandlePrevTabAction
// 0x0001 (0x0001 - 0x0000)
struct AthenaTopBar_HandlePrevTabAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTopBar_HandlePrevTabAction) == 0x000001, "Wrong alignment on AthenaTopBar_HandlePrevTabAction");
static_assert(sizeof(AthenaTopBar_HandlePrevTabAction) == 0x000001, "Wrong size on AthenaTopBar_HandlePrevTabAction");
static_assert(offsetof(AthenaTopBar_HandlePrevTabAction, bPassThrough) == 0x000000, "Member 'AthenaTopBar_HandlePrevTabAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.AthenaTravelLogFormatting.FormatTravelLogEntry
// 0x00F0 (0x00F0 - 0x0000)
struct AthenaTravelLogFormatting_FormatTravelLogEntry final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAthenaTravelLogEntry                  Entry;                                             // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x00D8(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTravelLogFormatting_FormatTravelLogEntry) == 0x000008, "Wrong alignment on AthenaTravelLogFormatting_FormatTravelLogEntry");
static_assert(sizeof(AthenaTravelLogFormatting_FormatTravelLogEntry) == 0x0000F0, "Wrong size on AthenaTravelLogFormatting_FormatTravelLogEntry");
static_assert(offsetof(AthenaTravelLogFormatting_FormatTravelLogEntry, WorldContextObject) == 0x000000, "Member 'AthenaTravelLogFormatting_FormatTravelLogEntry::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaTravelLogFormatting_FormatTravelLogEntry, Entry) == 0x000008, "Member 'AthenaTravelLogFormatting_FormatTravelLogEntry::Entry' has a wrong offset!");
static_assert(offsetof(AthenaTravelLogFormatting_FormatTravelLogEntry, ReturnValue) == 0x0000D8, "Member 'AthenaTravelLogFormatting_FormatTravelLogEntry::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaTravelLogFormatting.IsTravelLogTextDisplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct AthenaTravelLogFormatting_IsTravelLogTextDisplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTravelLogFormatting_IsTravelLogTextDisplayEnabled) == 0x000001, "Wrong alignment on AthenaTravelLogFormatting_IsTravelLogTextDisplayEnabled");
static_assert(sizeof(AthenaTravelLogFormatting_IsTravelLogTextDisplayEnabled) == 0x000001, "Wrong size on AthenaTravelLogFormatting_IsTravelLogTextDisplayEnabled");
static_assert(offsetof(AthenaTravelLogFormatting_IsTravelLogTextDisplayEnabled, ReturnValue) == 0x000000, "Member 'AthenaTravelLogFormatting_IsTravelLogTextDisplayEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaTravelLogFormatting.ShouldDisplayText
// 0x00D8 (0x00D8 - 0x0000)
struct AthenaTravelLogFormatting_ShouldDisplayText final
{
public:
	struct FAthenaTravelLogEntry                  Entry;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaTravelLogFormatting_ShouldDisplayText) == 0x000008, "Wrong alignment on AthenaTravelLogFormatting_ShouldDisplayText");
static_assert(sizeof(AthenaTravelLogFormatting_ShouldDisplayText) == 0x0000D8, "Wrong size on AthenaTravelLogFormatting_ShouldDisplayText");
static_assert(offsetof(AthenaTravelLogFormatting_ShouldDisplayText, Entry) == 0x000000, "Member 'AthenaTravelLogFormatting_ShouldDisplayText::Entry' has a wrong offset!");
static_assert(offsetof(AthenaTravelLogFormatting_ShouldDisplayText, ReturnValue) == 0x0000D0, "Member 'AthenaTravelLogFormatting_ShouldDisplayText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAthenaNewsPanel.SendMotdInteractionAnalytic
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaNewsPanel_SendMotdInteractionAnalytic final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaNewsPanel_SendMotdInteractionAnalytic) == 0x000008, "Wrong alignment on FortAthenaNewsPanel_SendMotdInteractionAnalytic");
static_assert(sizeof(FortAthenaNewsPanel_SendMotdInteractionAnalytic) == 0x000010, "Wrong size on FortAthenaNewsPanel_SendMotdInteractionAnalytic");
static_assert(offsetof(FortAthenaNewsPanel_SendMotdInteractionAnalytic, Interaction) == 0x000000, "Member 'FortAthenaNewsPanel_SendMotdInteractionAnalytic::Interaction' has a wrong offset!");

// Function FortniteUI.AthenaTrickFeedBase.AddTrick
// 0x0018 (0x0018 - 0x0000)
struct AthenaTrickFeedBase_AddTrick final
{
public:
	class FText                                   TrickName;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTrickFeedBase_AddTrick) == 0x000008, "Wrong alignment on AthenaTrickFeedBase_AddTrick");
static_assert(sizeof(AthenaTrickFeedBase_AddTrick) == 0x000018, "Wrong size on AthenaTrickFeedBase_AddTrick");
static_assert(offsetof(AthenaTrickFeedBase_AddTrick, TrickName) == 0x000000, "Member 'AthenaTrickFeedBase_AddTrick::TrickName' has a wrong offset!");

// Function FortniteUI.AthenaTrickFeedBase.BindToModel
// 0x0008 (0x0008 - 0x0000)
struct AthenaTrickFeedBase_BindToModel final
{
public:
	class UAthenaPlayerViewModel*                 ViewModel;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTrickFeedBase_BindToModel) == 0x000008, "Wrong alignment on AthenaTrickFeedBase_BindToModel");
static_assert(sizeof(AthenaTrickFeedBase_BindToModel) == 0x000008, "Wrong size on AthenaTrickFeedBase_BindToModel");
static_assert(offsetof(AthenaTrickFeedBase_BindToModel, ViewModel) == 0x000000, "Member 'AthenaTrickFeedBase_BindToModel::ViewModel' has a wrong offset!");

// Function FortniteUI.AthenaTrickFeedBase.UpdateMultiplier
// 0x0004 (0x0004 - 0x0000)
struct AthenaTrickFeedBase_UpdateMultiplier final
{
public:
	int32                                         Multiplier;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTrickFeedBase_UpdateMultiplier) == 0x000004, "Wrong alignment on AthenaTrickFeedBase_UpdateMultiplier");
static_assert(sizeof(AthenaTrickFeedBase_UpdateMultiplier) == 0x000004, "Wrong size on AthenaTrickFeedBase_UpdateMultiplier");
static_assert(offsetof(AthenaTrickFeedBase_UpdateMultiplier, Multiplier) == 0x000000, "Member 'AthenaTrickFeedBase_UpdateMultiplier::Multiplier' has a wrong offset!");

// Function FortniteUI.AthenaTrickFeedBase.UpdateScore
// 0x0010 (0x0010 - 0x0000)
struct AthenaTrickFeedBase_UpdateScore final
{
public:
	class UFortVehicleTrickSet*                   TrickSet;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalScore;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaTrickFeedBase_UpdateScore) == 0x000008, "Wrong alignment on AthenaTrickFeedBase_UpdateScore");
static_assert(sizeof(AthenaTrickFeedBase_UpdateScore) == 0x000010, "Wrong size on AthenaTrickFeedBase_UpdateScore");
static_assert(offsetof(AthenaTrickFeedBase_UpdateScore, TrickSet) == 0x000000, "Member 'AthenaTrickFeedBase_UpdateScore::TrickSet' has a wrong offset!");
static_assert(offsetof(AthenaTrickFeedBase_UpdateScore, TotalScore) == 0x000008, "Member 'AthenaTrickFeedBase_UpdateScore::TotalScore' has a wrong offset!");

// Function FortniteUI.AthenaTrickFeedBase.UpdateTrickStats
// 0x0018 (0x0018 - 0x0000)
struct AthenaTrickFeedBase_UpdateTrickStats final
{
public:
	class FText                                   StatsText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaTrickFeedBase_UpdateTrickStats) == 0x000008, "Wrong alignment on AthenaTrickFeedBase_UpdateTrickStats");
static_assert(sizeof(AthenaTrickFeedBase_UpdateTrickStats) == 0x000018, "Wrong size on AthenaTrickFeedBase_UpdateTrickStats");
static_assert(offsetof(AthenaTrickFeedBase_UpdateTrickStats, StatsText) == 0x000000, "Member 'AthenaTrickFeedBase_UpdateTrickStats::StatsText' has a wrong offset!");

// Function FortniteUI.AthenaViewStreamingReplayModalBase.IsValidGameSessionId
// 0x0018 (0x0018 - 0x0000)
struct AthenaViewStreamingReplayModalBase_IsValidGameSessionId final
{
public:
	class FString                                 GameSessionId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaViewStreamingReplayModalBase_IsValidGameSessionId) == 0x000008, "Wrong alignment on AthenaViewStreamingReplayModalBase_IsValidGameSessionId");
static_assert(sizeof(AthenaViewStreamingReplayModalBase_IsValidGameSessionId) == 0x000018, "Wrong size on AthenaViewStreamingReplayModalBase_IsValidGameSessionId");
static_assert(offsetof(AthenaViewStreamingReplayModalBase_IsValidGameSessionId, GameSessionId) == 0x000000, "Member 'AthenaViewStreamingReplayModalBase_IsValidGameSessionId::GameSessionId' has a wrong offset!");
static_assert(offsetof(AthenaViewStreamingReplayModalBase_IsValidGameSessionId, ReturnValue) == 0x000010, "Member 'AthenaViewStreamingReplayModalBase_IsValidGameSessionId::ReturnValue' has a wrong offset!");

// Function FortniteUI.AthenaViewStreamingReplayModalBase.PlayStreamingDSSReplay
// 0x0010 (0x0010 - 0x0000)
struct AthenaViewStreamingReplayModalBase_PlayStreamingDSSReplay final
{
public:
	class FString                                 GameSessionId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaViewStreamingReplayModalBase_PlayStreamingDSSReplay) == 0x000008, "Wrong alignment on AthenaViewStreamingReplayModalBase_PlayStreamingDSSReplay");
static_assert(sizeof(AthenaViewStreamingReplayModalBase_PlayStreamingDSSReplay) == 0x000010, "Wrong size on AthenaViewStreamingReplayModalBase_PlayStreamingDSSReplay");
static_assert(offsetof(AthenaViewStreamingReplayModalBase_PlayStreamingDSSReplay, GameSessionId) == 0x000000, "Member 'AthenaViewStreamingReplayModalBase_PlayStreamingDSSReplay::GameSessionId' has a wrong offset!");

// Function FortniteUI.FortChatMessageEntry.OnFocusedChanged
// 0x0001 (0x0001 - 0x0000)
struct FortChatMessageEntry_OnFocusedChanged final
{
public:
	bool                                          bIsFocused;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortChatMessageEntry_OnFocusedChanged) == 0x000001, "Wrong alignment on FortChatMessageEntry_OnFocusedChanged");
static_assert(sizeof(FortChatMessageEntry_OnFocusedChanged) == 0x000001, "Wrong size on FortChatMessageEntry_OnFocusedChanged");
static_assert(offsetof(FortChatMessageEntry_OnFocusedChanged, bIsFocused) == 0x000000, "Member 'FortChatMessageEntry_OnFocusedChanged::bIsFocused' has a wrong offset!");

// Function FortniteUI.AthenaWinnersList.OnWinnersAnnounced
// 0x0020 (0x0020 - 0x0000)
struct AthenaWinnersList_OnWinnersAnnounced final
{
public:
	struct FAthenaWinnerInfo                      WinnerInfo;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaWinnersList_OnWinnersAnnounced) == 0x000008, "Wrong alignment on AthenaWinnersList_OnWinnersAnnounced");
static_assert(sizeof(AthenaWinnersList_OnWinnersAnnounced) == 0x000020, "Wrong size on AthenaWinnersList_OnWinnersAnnounced");
static_assert(offsetof(AthenaWinnersList_OnWinnersAnnounced, WinnerInfo) == 0x000000, "Member 'AthenaWinnersList_OnWinnersAnnounced::WinnerInfo' has a wrong offset!");

// Function FortniteUI.FortShowdownScreen.SelectedEndTournament
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownScreen_SelectedEndTournament final
{
public:
	bool                                          bEndIsSelected;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownScreen_SelectedEndTournament) == 0x000001, "Wrong alignment on FortShowdownScreen_SelectedEndTournament");
static_assert(sizeof(FortShowdownScreen_SelectedEndTournament) == 0x000001, "Wrong size on FortShowdownScreen_SelectedEndTournament");
static_assert(offsetof(FortShowdownScreen_SelectedEndTournament, bEndIsSelected) == 0x000000, "Member 'FortShowdownScreen_SelectedEndTournament::bEndIsSelected' has a wrong offset!");

// Function FortniteUI.FortShowdownScreen.SelectedFrontTournament
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownScreen_SelectedFrontTournament final
{
public:
	bool                                          bFrontIsSelected;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownScreen_SelectedFrontTournament) == 0x000001, "Wrong alignment on FortShowdownScreen_SelectedFrontTournament");
static_assert(sizeof(FortShowdownScreen_SelectedFrontTournament) == 0x000001, "Wrong size on FortShowdownScreen_SelectedFrontTournament");
static_assert(offsetof(FortShowdownScreen_SelectedFrontTournament, bFrontIsSelected) == 0x000000, "Member 'FortShowdownScreen_SelectedFrontTournament::bFrontIsSelected' has a wrong offset!");

// Function FortniteUI.FortShowdownScreen.SelectedTournamentChanged
// 0x0010 (0x0010 - 0x0000)
struct FortShowdownScreen_SelectedTournamentChanged final
{
public:
	class FString                                 SelectedTournament;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownScreen_SelectedTournamentChanged) == 0x000008, "Wrong alignment on FortShowdownScreen_SelectedTournamentChanged");
static_assert(sizeof(FortShowdownScreen_SelectedTournamentChanged) == 0x000010, "Wrong size on FortShowdownScreen_SelectedTournamentChanged");
static_assert(offsetof(FortShowdownScreen_SelectedTournamentChanged, SelectedTournament) == 0x000000, "Member 'FortShowdownScreen_SelectedTournamentChanged::SelectedTournament' has a wrong offset!");

// Function FortniteUI.AthenaZebulonDroneWidgetBase.HandleGamePhaseStepChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaZebulonDroneWidgetBase_HandleGamePhaseStepChanged final
{
public:
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaZebulonDroneWidgetBase_HandleGamePhaseStepChanged) == 0x000001, "Wrong alignment on AthenaZebulonDroneWidgetBase_HandleGamePhaseStepChanged");
static_assert(sizeof(AthenaZebulonDroneWidgetBase_HandleGamePhaseStepChanged) == 0x000001, "Wrong size on AthenaZebulonDroneWidgetBase_HandleGamePhaseStepChanged");
static_assert(offsetof(AthenaZebulonDroneWidgetBase_HandleGamePhaseStepChanged, GamePhaseStep) == 0x000000, "Member 'AthenaZebulonDroneWidgetBase_HandleGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function FortniteUI.AthenaZebulonDroneWidgetBase.OnGamePhaseStepChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaZebulonDroneWidgetBase_OnGamePhaseStepChanged final
{
public:
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaZebulonDroneWidgetBase_OnGamePhaseStepChanged) == 0x000001, "Wrong alignment on AthenaZebulonDroneWidgetBase_OnGamePhaseStepChanged");
static_assert(sizeof(AthenaZebulonDroneWidgetBase_OnGamePhaseStepChanged) == 0x000001, "Wrong size on AthenaZebulonDroneWidgetBase_OnGamePhaseStepChanged");
static_assert(offsetof(AthenaZebulonDroneWidgetBase_OnGamePhaseStepChanged, GamePhaseStep) == 0x000000, "Member 'AthenaZebulonDroneWidgetBase_OnGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function FortniteUI.AthenaZebulonDroneWidgetBase.OnGameStateSet
// 0x0008 (0x0008 - 0x0000)
struct AthenaZebulonDroneWidgetBase_OnGameStateSet final
{
public:
	class AFortGameState*                         InGameState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaZebulonDroneWidgetBase_OnGameStateSet) == 0x000008, "Wrong alignment on AthenaZebulonDroneWidgetBase_OnGameStateSet");
static_assert(sizeof(AthenaZebulonDroneWidgetBase_OnGameStateSet) == 0x000008, "Wrong size on AthenaZebulonDroneWidgetBase_OnGameStateSet");
static_assert(offsetof(AthenaZebulonDroneWidgetBase_OnGameStateSet, InGameState) == 0x000000, "Member 'AthenaZebulonDroneWidgetBase_OnGameStateSet::InGameState' has a wrong offset!");

// Function FortniteUI.BacchusButton.HandleCursorModeChanged
// 0x0018 (0x0018 - 0x0000)
struct BacchusButton_HandleCursorModeChanged final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CustomWidget;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusButton_HandleCursorModeChanged) == 0x000008, "Wrong alignment on BacchusButton_HandleCursorModeChanged");
static_assert(sizeof(BacchusButton_HandleCursorModeChanged) == 0x000018, "Wrong size on BacchusButton_HandleCursorModeChanged");
static_assert(offsetof(BacchusButton_HandleCursorModeChanged, bCursorModeEnabled) == 0x000000, "Member 'BacchusButton_HandleCursorModeChanged::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(BacchusButton_HandleCursorModeChanged, ActionName) == 0x000004, "Member 'BacchusButton_HandleCursorModeChanged::ActionName' has a wrong offset!");
static_assert(offsetof(BacchusButton_HandleCursorModeChanged, CustomWidget) == 0x000010, "Member 'BacchusButton_HandleCursorModeChanged::CustomWidget' has a wrong offset!");

// Function FortniteUI.BacchusButton.HandleUIGameplayCue
// 0x00C8 (0x00C8 - 0x0000)
struct BacchusButton_HandleUIGameplayCue final
{
public:
	class FName                                   CueName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayCueEvent                             EventType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusButton_HandleUIGameplayCue) == 0x000008, "Wrong alignment on BacchusButton_HandleUIGameplayCue");
static_assert(sizeof(BacchusButton_HandleUIGameplayCue) == 0x0000C8, "Wrong size on BacchusButton_HandleUIGameplayCue");
static_assert(offsetof(BacchusButton_HandleUIGameplayCue, CueName) == 0x000000, "Member 'BacchusButton_HandleUIGameplayCue::CueName' has a wrong offset!");
static_assert(offsetof(BacchusButton_HandleUIGameplayCue, EventType) == 0x000008, "Member 'BacchusButton_HandleUIGameplayCue::EventType' has a wrong offset!");
static_assert(offsetof(BacchusButton_HandleUIGameplayCue, Parameters) == 0x000010, "Member 'BacchusButton_HandleUIGameplayCue::Parameters' has a wrong offset!");

// Function FortniteUI.BacchusButton.SetButtonDisplayScale
// 0x0004 (0x0004 - 0x0000)
struct BacchusButton_SetButtonDisplayScale final
{
public:
	float                                         NewDisplayScale;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusButton_SetButtonDisplayScale) == 0x000004, "Wrong alignment on BacchusButton_SetButtonDisplayScale");
static_assert(sizeof(BacchusButton_SetButtonDisplayScale) == 0x000004, "Wrong size on BacchusButton_SetButtonDisplayScale");
static_assert(offsetof(BacchusButton_SetButtonDisplayScale, NewDisplayScale) == 0x000000, "Member 'BacchusButton_SetButtonDisplayScale::NewDisplayScale' has a wrong offset!");

// Function FortniteUI.BacchusButton.SetButtonSize
// 0x0004 (0x0004 - 0x0000)
struct BacchusButton_SetButtonSize final
{
public:
	float                                         NewButtonSize;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusButton_SetButtonSize) == 0x000004, "Wrong alignment on BacchusButton_SetButtonSize");
static_assert(sizeof(BacchusButton_SetButtonSize) == 0x000004, "Wrong size on BacchusButton_SetButtonSize");
static_assert(offsetof(BacchusButton_SetButtonSize, NewButtonSize) == 0x000000, "Member 'BacchusButton_SetButtonSize::NewButtonSize' has a wrong offset!");

// Function FortniteUI.BacchusButton.SetButtonSprite
// 0x0008 (0x0008 - 0x0000)
struct BacchusButton_SetButtonSprite final
{
public:
	class UPaperSprite*                           NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusButton_SetButtonSprite) == 0x000008, "Wrong alignment on BacchusButton_SetButtonSprite");
static_assert(sizeof(BacchusButton_SetButtonSprite) == 0x000008, "Wrong size on BacchusButton_SetButtonSprite");
static_assert(offsetof(BacchusButton_SetButtonSprite, NewSprite) == 0x000000, "Member 'BacchusButton_SetButtonSprite::NewSprite' has a wrong offset!");

// Function FortniteUI.BacchusButton.SetDefaultIcon
// 0x0008 (0x0008 - 0x0000)
struct BacchusButton_SetDefaultIcon final
{
public:
	class UPaperSprite*                           Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusButton_SetDefaultIcon) == 0x000008, "Wrong alignment on BacchusButton_SetDefaultIcon");
static_assert(sizeof(BacchusButton_SetDefaultIcon) == 0x000008, "Wrong size on BacchusButton_SetDefaultIcon");
static_assert(offsetof(BacchusButton_SetDefaultIcon, Icon) == 0x000000, "Member 'BacchusButton_SetDefaultIcon::Icon' has a wrong offset!");

// Function FortniteUI.BacchusButton.SetIconPressed
// 0x0001 (0x0001 - 0x0000)
struct BacchusButton_SetIconPressed final
{
public:
	bool                                          bIsPressed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusButton_SetIconPressed) == 0x000001, "Wrong alignment on BacchusButton_SetIconPressed");
static_assert(sizeof(BacchusButton_SetIconPressed) == 0x000001, "Wrong size on BacchusButton_SetIconPressed");
static_assert(offsetof(BacchusButton_SetIconPressed, bIsPressed) == 0x000000, "Member 'BacchusButton_SetIconPressed::bIsPressed' has a wrong offset!");

// Function FortniteUI.FortSocialInteractionMenu.OnEnableBackButtonDisplay
// 0x0001 (0x0001 - 0x0000)
struct FortSocialInteractionMenu_OnEnableBackButtonDisplay final
{
public:
	bool                                          bEnableBackButtonDisplay;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialInteractionMenu_OnEnableBackButtonDisplay) == 0x000001, "Wrong alignment on FortSocialInteractionMenu_OnEnableBackButtonDisplay");
static_assert(sizeof(FortSocialInteractionMenu_OnEnableBackButtonDisplay) == 0x000001, "Wrong size on FortSocialInteractionMenu_OnEnableBackButtonDisplay");
static_assert(offsetof(FortSocialInteractionMenu_OnEnableBackButtonDisplay, bEnableBackButtonDisplay) == 0x000000, "Member 'FortSocialInteractionMenu_OnEnableBackButtonDisplay::bEnableBackButtonDisplay' has a wrong offset!");

// Function FortniteUI.FortSocialInteractionMenu.OnUserPresenceChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSocialInteractionMenu_OnUserPresenceChanged final
{
public:
	EOnlineStatus                                 OnlineStatus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialInteractionMenu_OnUserPresenceChanged) == 0x000001, "Wrong alignment on FortSocialInteractionMenu_OnUserPresenceChanged");
static_assert(sizeof(FortSocialInteractionMenu_OnUserPresenceChanged) == 0x000001, "Wrong size on FortSocialInteractionMenu_OnUserPresenceChanged");
static_assert(offsetof(FortSocialInteractionMenu_OnUserPresenceChanged, OnlineStatus) == 0x000000, "Member 'FortSocialInteractionMenu_OnUserPresenceChanged::OnlineStatus' has a wrong offset!");

// Function FortniteUI.FortCollectionBookRecycleSlotResultsWidget.SetCurrentItemToRecycle
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle final
{
public:
	class UFortAccountItem*                       InItemToRecycle;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle) == 0x000008, "Wrong alignment on FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle");
static_assert(sizeof(FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle) == 0x000008, "Wrong size on FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle");
static_assert(offsetof(FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle, InItemToRecycle) == 0x000000, "Member 'FortCollectionBookRecycleSlotResultsWidget_SetCurrentItemToRecycle::InItemToRecycle' has a wrong offset!");

// Function FortniteUI.BacchusActionButton.AddActionMappings
// 0x0010 (0x0010 - 0x0000)
struct BacchusActionButton_AddActionMappings final
{
public:
	TArray<struct FBacchusActionIconMapping>      NewActionMappings;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusActionButton_AddActionMappings) == 0x000008, "Wrong alignment on BacchusActionButton_AddActionMappings");
static_assert(sizeof(BacchusActionButton_AddActionMappings) == 0x000010, "Wrong size on BacchusActionButton_AddActionMappings");
static_assert(offsetof(BacchusActionButton_AddActionMappings, NewActionMappings) == 0x000000, "Member 'BacchusActionButton_AddActionMappings::NewActionMappings' has a wrong offset!");

// Function FortniteUI.FortSquadIcon.SetSquad
// 0x0008 (0x0008 - 0x0000)
struct FortSquadIcon_SetSquad final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadIcon_SetSquad) == 0x000004, "Wrong alignment on FortSquadIcon_SetSquad");
static_assert(sizeof(FortSquadIcon_SetSquad) == 0x000008, "Wrong size on FortSquadIcon_SetSquad");
static_assert(offsetof(FortSquadIcon_SetSquad, InName) == 0x000000, "Member 'FortSquadIcon_SetSquad::InName' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem_NUI.SetDisplayAttribute
// 0x0070 (0x0070 - 0x0000)
struct FortAttributeListItem_NUI_SetDisplayAttribute final
{
public:
	struct FFortDisplayAttribute                  InDisplayAttribute;                                // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_NUI_SetDisplayAttribute) == 0x000008, "Wrong alignment on FortAttributeListItem_NUI_SetDisplayAttribute");
static_assert(sizeof(FortAttributeListItem_NUI_SetDisplayAttribute) == 0x000070, "Wrong size on FortAttributeListItem_NUI_SetDisplayAttribute");
static_assert(offsetof(FortAttributeListItem_NUI_SetDisplayAttribute, InDisplayAttribute) == 0x000000, "Member 'FortAttributeListItem_NUI_SetDisplayAttribute::InDisplayAttribute' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem_NUI.SetPreviewAttribute
// 0x0070 (0x0070 - 0x0000)
struct FortAttributeListItem_NUI_SetPreviewAttribute final
{
public:
	struct FFortDisplayAttribute                  InPreviewAttribute;                                // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_NUI_SetPreviewAttribute) == 0x000008, "Wrong alignment on FortAttributeListItem_NUI_SetPreviewAttribute");
static_assert(sizeof(FortAttributeListItem_NUI_SetPreviewAttribute) == 0x000070, "Wrong size on FortAttributeListItem_NUI_SetPreviewAttribute");
static_assert(offsetof(FortAttributeListItem_NUI_SetPreviewAttribute, InPreviewAttribute) == 0x000000, "Member 'FortAttributeListItem_NUI_SetPreviewAttribute::InPreviewAttribute' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem_NUI.ValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortAttributeListItem_NUI_ValueChanged final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_NUI_ValueChanged) == 0x000004, "Wrong alignment on FortAttributeListItem_NUI_ValueChanged");
static_assert(sizeof(FortAttributeListItem_NUI_ValueChanged) == 0x000004, "Wrong size on FortAttributeListItem_NUI_ValueChanged");
static_assert(offsetof(FortAttributeListItem_NUI_ValueChanged, Delta) == 0x000000, "Member 'FortAttributeListItem_NUI_ValueChanged::Delta' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem_NUI.GetCurrentAttributeCopy
// 0x0070 (0x0070 - 0x0000)
struct FortAttributeListItem_NUI_GetCurrentAttributeCopy final
{
public:
	struct FFortDisplayAttribute                  OutDisplayAttribute;                               // 0x0000(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_NUI_GetCurrentAttributeCopy) == 0x000008, "Wrong alignment on FortAttributeListItem_NUI_GetCurrentAttributeCopy");
static_assert(sizeof(FortAttributeListItem_NUI_GetCurrentAttributeCopy) == 0x000070, "Wrong size on FortAttributeListItem_NUI_GetCurrentAttributeCopy");
static_assert(offsetof(FortAttributeListItem_NUI_GetCurrentAttributeCopy, OutDisplayAttribute) == 0x000000, "Member 'FortAttributeListItem_NUI_GetCurrentAttributeCopy::OutDisplayAttribute' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem_NUI.GetDisplayAttributeCopy
// 0x0070 (0x0070 - 0x0000)
struct FortAttributeListItem_NUI_GetDisplayAttributeCopy final
{
public:
	struct FFortDisplayAttribute                  OutDisplayAttribute;                               // 0x0000(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_NUI_GetDisplayAttributeCopy) == 0x000008, "Wrong alignment on FortAttributeListItem_NUI_GetDisplayAttributeCopy");
static_assert(sizeof(FortAttributeListItem_NUI_GetDisplayAttributeCopy) == 0x000070, "Wrong size on FortAttributeListItem_NUI_GetDisplayAttributeCopy");
static_assert(offsetof(FortAttributeListItem_NUI_GetDisplayAttributeCopy, OutDisplayAttribute) == 0x000000, "Member 'FortAttributeListItem_NUI_GetDisplayAttributeCopy::OutDisplayAttribute' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem_NUI.GetDisplayPreviewCopy
// 0x0070 (0x0070 - 0x0000)
struct FortAttributeListItem_NUI_GetDisplayPreviewCopy final
{
public:
	struct FFortDisplayAttribute                  OutPreviewAttribute;                               // 0x0000(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_NUI_GetDisplayPreviewCopy) == 0x000008, "Wrong alignment on FortAttributeListItem_NUI_GetDisplayPreviewCopy");
static_assert(sizeof(FortAttributeListItem_NUI_GetDisplayPreviewCopy) == 0x000070, "Wrong size on FortAttributeListItem_NUI_GetDisplayPreviewCopy");
static_assert(offsetof(FortAttributeListItem_NUI_GetDisplayPreviewCopy, OutPreviewAttribute) == 0x000000, "Member 'FortAttributeListItem_NUI_GetDisplayPreviewCopy::OutPreviewAttribute' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem_NUI.HasPreviewAttribute
// 0x0001 (0x0001 - 0x0000)
struct FortAttributeListItem_NUI_HasPreviewAttribute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_NUI_HasPreviewAttribute) == 0x000001, "Wrong alignment on FortAttributeListItem_NUI_HasPreviewAttribute");
static_assert(sizeof(FortAttributeListItem_NUI_HasPreviewAttribute) == 0x000001, "Wrong size on FortAttributeListItem_NUI_HasPreviewAttribute");
static_assert(offsetof(FortAttributeListItem_NUI_HasPreviewAttribute, ReturnValue) == 0x000000, "Member 'FortAttributeListItem_NUI_HasPreviewAttribute::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookItemPopupMenu.CanItemBePurchased
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookItemPopupMenu_CanItemBePurchased final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookItemPopupMenu_CanItemBePurchased) == 0x000001, "Wrong alignment on FortCollectionBookItemPopupMenu_CanItemBePurchased");
static_assert(sizeof(FortCollectionBookItemPopupMenu_CanItemBePurchased) == 0x000001, "Wrong size on FortCollectionBookItemPopupMenu_CanItemBePurchased");
static_assert(offsetof(FortCollectionBookItemPopupMenu_CanItemBePurchased, ReturnValue) == 0x000000, "Member 'FortCollectionBookItemPopupMenu_CanItemBePurchased::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookItemPopupMenu.CanItemBeUnslotted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookItemPopupMenu_CanItemBeUnslotted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookItemPopupMenu_CanItemBeUnslotted) == 0x000001, "Wrong alignment on FortCollectionBookItemPopupMenu_CanItemBeUnslotted");
static_assert(sizeof(FortCollectionBookItemPopupMenu_CanItemBeUnslotted) == 0x000001, "Wrong size on FortCollectionBookItemPopupMenu_CanItemBeUnslotted");
static_assert(offsetof(FortCollectionBookItemPopupMenu_CanItemBeUnslotted, ReturnValue) == 0x000000, "Member 'FortCollectionBookItemPopupMenu_CanItemBeUnslotted::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookItemPopupMenu.HandleItemChanged
// 0x0003 (0x0003 - 0x0000)
struct FortCollectionBookItemPopupMenu_HandleItemChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookItemPopupMenu_HandleItemChanged) == 0x000001, "Wrong alignment on FortCollectionBookItemPopupMenu_HandleItemChanged");
static_assert(sizeof(FortCollectionBookItemPopupMenu_HandleItemChanged) == 0x000003, "Wrong size on FortCollectionBookItemPopupMenu_HandleItemChanged");
static_assert(offsetof(FortCollectionBookItemPopupMenu_HandleItemChanged, bItemChanged) == 0x000000, "Member 'FortCollectionBookItemPopupMenu_HandleItemChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortCollectionBookItemPopupMenu_HandleItemChanged, bAmmoChanged) == 0x000001, "Member 'FortCollectionBookItemPopupMenu_HandleItemChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortCollectionBookItemPopupMenu_HandleItemChanged, bIngredientsChanged) == 0x000002, "Member 'FortCollectionBookItemPopupMenu_HandleItemChanged::bIngredientsChanged' has a wrong offset!");

// Function FortniteUI.FortCollectionBookItemPopupMenu.GetHostButton
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookItemPopupMenu_GetHostButton final
{
public:
	class UFortCollectionBookSlotButton*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookItemPopupMenu_GetHostButton) == 0x000008, "Wrong alignment on FortCollectionBookItemPopupMenu_GetHostButton");
static_assert(sizeof(FortCollectionBookItemPopupMenu_GetHostButton) == 0x000008, "Wrong size on FortCollectionBookItemPopupMenu_GetHostButton");
static_assert(offsetof(FortCollectionBookItemPopupMenu_GetHostButton, ReturnValue) == 0x000000, "Member 'FortCollectionBookItemPopupMenu_GetHostButton::ReturnValue' has a wrong offset!");

// Function FortniteUI.BacchusKillFeed.SetActiveNumberOfLines
// 0x0004 (0x0004 - 0x0000)
struct BacchusKillFeed_SetActiveNumberOfLines final
{
public:
	float                                         NumberOfLines;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusKillFeed_SetActiveNumberOfLines) == 0x000004, "Wrong alignment on BacchusKillFeed_SetActiveNumberOfLines");
static_assert(sizeof(BacchusKillFeed_SetActiveNumberOfLines) == 0x000004, "Wrong size on BacchusKillFeed_SetActiveNumberOfLines");
static_assert(offsetof(BacchusKillFeed_SetActiveNumberOfLines, NumberOfLines) == 0x000000, "Member 'BacchusKillFeed_SetActiveNumberOfLines::NumberOfLines' has a wrong offset!");

// Function FortniteUI.FortSocialImportButton.OnCaptionGenerated
// 0x0018 (0x0018 - 0x0000)
struct FortSocialImportButton_OnCaptionGenerated final
{
public:
	class FText                                   Caption;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialImportButton_OnCaptionGenerated) == 0x000008, "Wrong alignment on FortSocialImportButton_OnCaptionGenerated");
static_assert(sizeof(FortSocialImportButton_OnCaptionGenerated) == 0x000018, "Wrong size on FortSocialImportButton_OnCaptionGenerated");
static_assert(offsetof(FortSocialImportButton_OnCaptionGenerated, Caption) == 0x000000, "Member 'FortSocialImportButton_OnCaptionGenerated::Caption' has a wrong offset!");

// Function FortniteUI.FortContentControlsSetting.HandleRotated
// 0x0004 (0x0004 - 0x0000)
struct FortContentControlsSetting_HandleRotated final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentControlsSetting_HandleRotated) == 0x000004, "Wrong alignment on FortContentControlsSetting_HandleRotated");
static_assert(sizeof(FortContentControlsSetting_HandleRotated) == 0x000004, "Wrong size on FortContentControlsSetting_HandleRotated");
static_assert(offsetof(FortContentControlsSetting_HandleRotated, SelectedIndex) == 0x000000, "Member 'FortContentControlsSetting_HandleRotated::SelectedIndex' has a wrong offset!");

// Function FortniteUI.FortContentControlsSetting.GetSettingType
// 0x0001 (0x0001 - 0x0000)
struct FortContentControlsSetting_GetSettingType final
{
public:
	EFortContentControlsSettingType               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContentControlsSetting_GetSettingType) == 0x000001, "Wrong alignment on FortContentControlsSetting_GetSettingType");
static_assert(sizeof(FortContentControlsSetting_GetSettingType) == 0x000001, "Wrong size on FortContentControlsSetting_GetSettingType");
static_assert(offsetof(FortContentControlsSetting_GetSettingType, ReturnValue) == 0x000000, "Member 'FortContentControlsSetting_GetSettingType::ReturnValue' has a wrong offset!");

// Function FortniteUI.BacchusQuickbarComboSlot.SetQuickbarType
// 0x0004 (0x0004 - 0x0000)
struct BacchusQuickbarComboSlot_SetQuickbarType final
{
public:
	int32                                         NewType;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusQuickbarComboSlot_SetQuickbarType) == 0x000004, "Wrong alignment on BacchusQuickbarComboSlot_SetQuickbarType");
static_assert(sizeof(BacchusQuickbarComboSlot_SetQuickbarType) == 0x000004, "Wrong size on BacchusQuickbarComboSlot_SetQuickbarType");
static_assert(offsetof(BacchusQuickbarComboSlot_SetQuickbarType, NewType) == 0x000000, "Member 'BacchusQuickbarComboSlot_SetQuickbarType::NewType' has a wrong offset!");

// Function FortniteUI.BacchusQuickbarComboSlot.SetSize
// 0x0004 (0x0004 - 0x0000)
struct BacchusQuickbarComboSlot_SetSize final
{
public:
	float                                         NewButtonSize;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusQuickbarComboSlot_SetSize) == 0x000004, "Wrong alignment on BacchusQuickbarComboSlot_SetSize");
static_assert(sizeof(BacchusQuickbarComboSlot_SetSize) == 0x000004, "Wrong size on BacchusQuickbarComboSlot_SetSize");
static_assert(offsetof(BacchusQuickbarComboSlot_SetSize, NewButtonSize) == 0x000000, "Member 'BacchusQuickbarComboSlot_SetSize::NewButtonSize' has a wrong offset!");

// Function FortniteUI.BacchusQuickbarComboSlot.GetQuickbarType
// 0x0001 (0x0001 - 0x0000)
struct BacchusQuickbarComboSlot_GetQuickbarType final
{
public:
	EFortQuickBars                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusQuickbarComboSlot_GetQuickbarType) == 0x000001, "Wrong alignment on BacchusQuickbarComboSlot_GetQuickbarType");
static_assert(sizeof(BacchusQuickbarComboSlot_GetQuickbarType) == 0x000001, "Wrong size on BacchusQuickbarComboSlot_GetQuickbarType");
static_assert(offsetof(BacchusQuickbarComboSlot_GetQuickbarType, ReturnValue) == 0x000000, "Member 'BacchusQuickbarComboSlot_GetQuickbarType::ReturnValue' has a wrong offset!");

// Function FortniteUI.BacchusSignalQualityWidget.OnNewSignalQuality
// 0x0004 (0x0004 - 0x0000)
struct BacchusSignalQualityWidget_OnNewSignalQuality final
{
public:
	float                                         NewRawQuality;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusSignalQualityWidget_OnNewSignalQuality) == 0x000004, "Wrong alignment on BacchusSignalQualityWidget_OnNewSignalQuality");
static_assert(sizeof(BacchusSignalQualityWidget_OnNewSignalQuality) == 0x000004, "Wrong size on BacchusSignalQualityWidget_OnNewSignalQuality");
static_assert(offsetof(BacchusSignalQualityWidget_OnNewSignalQuality, NewRawQuality) == 0x000000, "Member 'BacchusSignalQualityWidget_OnNewSignalQuality::NewRawQuality' has a wrong offset!");

// Function FortniteUI.BacchusSignalQualityWidget.SetNewSignalQuality
// 0x0001 (0x0001 - 0x0000)
struct BacchusSignalQualityWidget_SetNewSignalQuality final
{
public:
	EBacchusSignalQuality                         NewSignalQuality;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BacchusSignalQualityWidget_SetNewSignalQuality) == 0x000001, "Wrong alignment on BacchusSignalQualityWidget_SetNewSignalQuality");
static_assert(sizeof(BacchusSignalQualityWidget_SetNewSignalQuality) == 0x000001, "Wrong size on BacchusSignalQualityWidget_SetNewSignalQuality");
static_assert(offsetof(BacchusSignalQualityWidget_SetNewSignalQuality, NewSignalQuality) == 0x000000, "Member 'BacchusSignalQualityWidget_SetNewSignalQuality::NewSignalQuality' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestalNameplate.OnPedestalSelectedChanged
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberPedestalNameplate_OnPedestalSelectedChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestalNameplate_OnPedestalSelectedChanged) == 0x000001, "Wrong alignment on FortTeamMemberPedestalNameplate_OnPedestalSelectedChanged");
static_assert(sizeof(FortTeamMemberPedestalNameplate_OnPedestalSelectedChanged) == 0x000001, "Wrong size on FortTeamMemberPedestalNameplate_OnPedestalSelectedChanged");
static_assert(offsetof(FortTeamMemberPedestalNameplate_OnPedestalSelectedChanged, bIsSelected) == 0x000000, "Member 'FortTeamMemberPedestalNameplate_OnPedestalSelectedChanged::bIsSelected' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestalNameplate.OnPlayReadyAudio
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberPedestalNameplate_OnPlayReadyAudio final
{
public:
	bool                                          bIsReadyForMatchmaking;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestalNameplate_OnPlayReadyAudio) == 0x000001, "Wrong alignment on FortTeamMemberPedestalNameplate_OnPlayReadyAudio");
static_assert(sizeof(FortTeamMemberPedestalNameplate_OnPlayReadyAudio) == 0x000001, "Wrong size on FortTeamMemberPedestalNameplate_OnPlayReadyAudio");
static_assert(offsetof(FortTeamMemberPedestalNameplate_OnPlayReadyAudio, bIsReadyForMatchmaking) == 0x000000, "Member 'FortTeamMemberPedestalNameplate_OnPlayReadyAudio::bIsReadyForMatchmaking' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestalNameplate.OnReadyStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberPedestalNameplate_OnReadyStatusChanged final
{
public:
	EGameReadiness                                GameReadiness;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestalNameplate_OnReadyStatusChanged) == 0x000001, "Wrong alignment on FortTeamMemberPedestalNameplate_OnReadyStatusChanged");
static_assert(sizeof(FortTeamMemberPedestalNameplate_OnReadyStatusChanged) == 0x000001, "Wrong size on FortTeamMemberPedestalNameplate_OnReadyStatusChanged");
static_assert(offsetof(FortTeamMemberPedestalNameplate_OnReadyStatusChanged, GameReadiness) == 0x000000, "Member 'FortTeamMemberPedestalNameplate_OnReadyStatusChanged::GameReadiness' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotView.OnSelectedSlotButtonChanged
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSlotView_OnSelectedSlotButtonChanged final
{
public:
	class UCommonButton*                          SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIdx;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSlotView_OnSelectedSlotButtonChanged) == 0x000008, "Wrong alignment on FortCollectionBookSlotView_OnSelectedSlotButtonChanged");
static_assert(sizeof(FortCollectionBookSlotView_OnSelectedSlotButtonChanged) == 0x000010, "Wrong size on FortCollectionBookSlotView_OnSelectedSlotButtonChanged");
static_assert(offsetof(FortCollectionBookSlotView_OnSelectedSlotButtonChanged, SelectedButton) == 0x000000, "Member 'FortCollectionBookSlotView_OnSelectedSlotButtonChanged::SelectedButton' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotView_OnSelectedSlotButtonChanged, ButtonIdx) == 0x000008, "Member 'FortCollectionBookSlotView_OnSelectedSlotButtonChanged::ButtonIdx' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotView.OnSlotButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSlotView_OnSlotButtonClicked final
{
public:
	class UCommonButton*                          ClickedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIdx;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSlotView_OnSlotButtonClicked) == 0x000008, "Wrong alignment on FortCollectionBookSlotView_OnSlotButtonClicked");
static_assert(sizeof(FortCollectionBookSlotView_OnSlotButtonClicked) == 0x000010, "Wrong size on FortCollectionBookSlotView_OnSlotButtonClicked");
static_assert(offsetof(FortCollectionBookSlotView_OnSlotButtonClicked, ClickedButton) == 0x000000, "Member 'FortCollectionBookSlotView_OnSlotButtonClicked::ClickedButton' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotView_OnSlotButtonClicked, ButtonIdx) == 0x000008, "Member 'FortCollectionBookSlotView_OnSlotButtonClicked::ButtonIdx' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotView.OnSlotButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSlotView_OnSlotButtonHovered final
{
public:
	class UCommonButton*                          HoveredButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIdx;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSlotView_OnSlotButtonHovered) == 0x000008, "Wrong alignment on FortCollectionBookSlotView_OnSlotButtonHovered");
static_assert(sizeof(FortCollectionBookSlotView_OnSlotButtonHovered) == 0x000010, "Wrong size on FortCollectionBookSlotView_OnSlotButtonHovered");
static_assert(offsetof(FortCollectionBookSlotView_OnSlotButtonHovered, HoveredButton) == 0x000000, "Member 'FortCollectionBookSlotView_OnSlotButtonHovered::HoveredButton' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotView_OnSlotButtonHovered, ButtonIdx) == 0x000008, "Member 'FortCollectionBookSlotView_OnSlotButtonHovered::ButtonIdx' has a wrong offset!");

// Function FortniteUI.BarrierWidgetBase.OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct BarrierWidgetBase_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BarrierWidgetBase_OnGamePhaseChanged) == 0x000001, "Wrong alignment on BarrierWidgetBase_OnGamePhaseChanged");
static_assert(sizeof(BarrierWidgetBase_OnGamePhaseChanged) == 0x000001, "Wrong size on BarrierWidgetBase_OnGamePhaseChanged");
static_assert(offsetof(BarrierWidgetBase_OnGamePhaseChanged, GamePhase) == 0x000000, "Member 'BarrierWidgetBase_OnGamePhaseChanged::GamePhase' has a wrong offset!");

// Function FortniteUI.BarrierWidgetBase.OnHandleSpectatingChanged
// 0x0008 (0x0008 - 0x0000)
struct BarrierWidgetBase_OnHandleSpectatingChanged final
{
public:
	class AFortPlayerStateZone*                   SpectatingTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BarrierWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong alignment on BarrierWidgetBase_OnHandleSpectatingChanged");
static_assert(sizeof(BarrierWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong size on BarrierWidgetBase_OnHandleSpectatingChanged");
static_assert(offsetof(BarrierWidgetBase_OnHandleSpectatingChanged, SpectatingTarget) == 0x000000, "Member 'BarrierWidgetBase_OnHandleSpectatingChanged::SpectatingTarget' has a wrong offset!");

// Function FortniteUI.BarrierWidgetBase.OnMutatorObjectUpdated
// 0x0118 (0x0118 - 0x0000)
struct BarrierWidgetBase_OnMutatorObjectUpdated final
{
public:
	struct FGameplayMutatorObjectDataArray        MutatorArray;                                      // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BarrierWidgetBase_OnMutatorObjectUpdated) == 0x000008, "Wrong alignment on BarrierWidgetBase_OnMutatorObjectUpdated");
static_assert(sizeof(BarrierWidgetBase_OnMutatorObjectUpdated) == 0x000118, "Wrong size on BarrierWidgetBase_OnMutatorObjectUpdated");
static_assert(offsetof(BarrierWidgetBase_OnMutatorObjectUpdated, MutatorArray) == 0x000000, "Member 'BarrierWidgetBase_OnMutatorObjectUpdated::MutatorArray' has a wrong offset!");

// Function FortniteUI.BarrierWidgetBase.UpdateHealth
// 0x000C (0x000C - 0x0000)
struct BarrierWidgetBase_UpdateHealth final
{
public:
	bool                                          bFriendlyTeam;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealthPercent;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarrierFoodTeam                              FoodTeam;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlashBar;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BarrierWidgetBase_UpdateHealth) == 0x000004, "Wrong alignment on BarrierWidgetBase_UpdateHealth");
static_assert(sizeof(BarrierWidgetBase_UpdateHealth) == 0x00000C, "Wrong size on BarrierWidgetBase_UpdateHealth");
static_assert(offsetof(BarrierWidgetBase_UpdateHealth, bFriendlyTeam) == 0x000000, "Member 'BarrierWidgetBase_UpdateHealth::bFriendlyTeam' has a wrong offset!");
static_assert(offsetof(BarrierWidgetBase_UpdateHealth, HealthPercent) == 0x000004, "Member 'BarrierWidgetBase_UpdateHealth::HealthPercent' has a wrong offset!");
static_assert(offsetof(BarrierWidgetBase_UpdateHealth, FoodTeam) == 0x000008, "Member 'BarrierWidgetBase_UpdateHealth::FoodTeam' has a wrong offset!");
static_assert(offsetof(BarrierWidgetBase_UpdateHealth, bFlashBar) == 0x000009, "Member 'BarrierWidgetBase_UpdateHealth::bFlashBar' has a wrong offset!");

// Function FortniteUI.FortCreativeGlobalOptions.OnCurrentItemSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeGlobalOptions_OnCurrentItemSelectionChanged final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeGlobalOptions_OnCurrentItemSelectionChanged) == 0x000008, "Wrong alignment on FortCreativeGlobalOptions_OnCurrentItemSelectionChanged");
static_assert(sizeof(FortCreativeGlobalOptions_OnCurrentItemSelectionChanged) == 0x000008, "Wrong size on FortCreativeGlobalOptions_OnCurrentItemSelectionChanged");
static_assert(offsetof(FortCreativeGlobalOptions_OnCurrentItemSelectionChanged, Item) == 0x000000, "Member 'FortCreativeGlobalOptions_OnCurrentItemSelectionChanged::Item' has a wrong offset!");

// Function FortniteUI.FortCreativeGlobalOptions.OnHoveredItemChanged
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeGlobalOptions_OnHoveredItemChanged final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHovered;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativeGlobalOptions_OnHoveredItemChanged) == 0x000008, "Wrong alignment on FortCreativeGlobalOptions_OnHoveredItemChanged");
static_assert(sizeof(FortCreativeGlobalOptions_OnHoveredItemChanged) == 0x000010, "Wrong size on FortCreativeGlobalOptions_OnHoveredItemChanged");
static_assert(offsetof(FortCreativeGlobalOptions_OnHoveredItemChanged, Item) == 0x000000, "Member 'FortCreativeGlobalOptions_OnHoveredItemChanged::Item' has a wrong offset!");
static_assert(offsetof(FortCreativeGlobalOptions_OnHoveredItemChanged, bIsHovered) == 0x000008, "Member 'FortCreativeGlobalOptions_OnHoveredItemChanged::bIsHovered' has a wrong offset!");

// Function FortniteUI.FortCreativeGlobalOptions.OnSelectionUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeGlobalOptions_OnSelectionUpdated final
{
public:
	class UFortMatchmakingKnobsSpinnerButton*     CurrentSelection;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeGlobalOptions_OnSelectionUpdated) == 0x000008, "Wrong alignment on FortCreativeGlobalOptions_OnSelectionUpdated");
static_assert(sizeof(FortCreativeGlobalOptions_OnSelectionUpdated) == 0x000008, "Wrong size on FortCreativeGlobalOptions_OnSelectionUpdated");
static_assert(offsetof(FortCreativeGlobalOptions_OnSelectionUpdated, CurrentSelection) == 0x000000, "Member 'FortCreativeGlobalOptions_OnSelectionUpdated::CurrentSelection' has a wrong offset!");

// Function FortniteUI.FortCreativeGlobalOptions.SetListDataSource
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeGlobalOptions_SetListDataSource final
{
public:
	EUFortMatchmakingKnobsDataSource              ListType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeGlobalOptions_SetListDataSource) == 0x000001, "Wrong alignment on FortCreativeGlobalOptions_SetListDataSource");
static_assert(sizeof(FortCreativeGlobalOptions_SetListDataSource) == 0x000001, "Wrong size on FortCreativeGlobalOptions_SetListDataSource");
static_assert(offsetof(FortCreativeGlobalOptions_SetListDataSource, ListType) == 0x000000, "Member 'FortCreativeGlobalOptions_SetListDataSource::ListType' has a wrong offset!");

// Function FortniteUI.FortTouchMoveStick.SetMovementLockStatus
// 0x0001 (0x0001 - 0x0000)
struct FortTouchMoveStick_SetMovementLockStatus final
{
public:
	bool                                          MovementIsLocked;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchMoveStick_SetMovementLockStatus) == 0x000001, "Wrong alignment on FortTouchMoveStick_SetMovementLockStatus");
static_assert(sizeof(FortTouchMoveStick_SetMovementLockStatus) == 0x000001, "Wrong size on FortTouchMoveStick_SetMovementLockStatus");
static_assert(offsetof(FortTouchMoveStick_SetMovementLockStatus, MovementIsLocked) == 0x000000, "Member 'FortTouchMoveStick_SetMovementLockStatus::MovementIsLocked' has a wrong offset!");

// Function FortniteUI.FortTouchMoveStick.SetStickPosition
// 0x0008 (0x0008 - 0x0000)
struct FortTouchMoveStick_SetStickPosition final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchMoveStick_SetStickPosition) == 0x000004, "Wrong alignment on FortTouchMoveStick_SetStickPosition");
static_assert(sizeof(FortTouchMoveStick_SetStickPosition) == 0x000008, "Wrong size on FortTouchMoveStick_SetStickPosition");
static_assert(offsetof(FortTouchMoveStick_SetStickPosition, NewPosition) == 0x000000, "Member 'FortTouchMoveStick_SetStickPosition::NewPosition' has a wrong offset!");

// Function FortniteUI.FortTouchMoveStick.SetStickPositionBP
// 0x0008 (0x0008 - 0x0000)
struct FortTouchMoveStick_SetStickPositionBP final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchMoveStick_SetStickPositionBP) == 0x000004, "Wrong alignment on FortTouchMoveStick_SetStickPositionBP");
static_assert(sizeof(FortTouchMoveStick_SetStickPositionBP) == 0x000008, "Wrong size on FortTouchMoveStick_SetStickPositionBP");
static_assert(offsetof(FortTouchMoveStick_SetStickPositionBP, NewPosition) == 0x000000, "Member 'FortTouchMoveStick_SetStickPositionBP::NewPosition' has a wrong offset!");

// Function FortniteUI.FortTouchMoveStick.GetHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct FortTouchMoveStick_GetHalfHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchMoveStick_GetHalfHeight) == 0x000004, "Wrong alignment on FortTouchMoveStick_GetHalfHeight");
static_assert(sizeof(FortTouchMoveStick_GetHalfHeight) == 0x000004, "Wrong size on FortTouchMoveStick_GetHalfHeight");
static_assert(offsetof(FortTouchMoveStick_GetHalfHeight, ReturnValue) == 0x000000, "Member 'FortTouchMoveStick_GetHalfHeight::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTouchMoveStick.GetStickPosition
// 0x0008 (0x0008 - 0x0000)
struct FortTouchMoveStick_GetStickPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchMoveStick_GetStickPosition) == 0x000004, "Wrong alignment on FortTouchMoveStick_GetStickPosition");
static_assert(sizeof(FortTouchMoveStick_GetStickPosition) == 0x000008, "Wrong size on FortTouchMoveStick_GetStickPosition");
static_assert(offsetof(FortTouchMoveStick_GetStickPosition, ReturnValue) == 0x000000, "Member 'FortTouchMoveStick_GetStickPosition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTouchMoveStick.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct FortTouchMoveStick_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchMoveStick_IsLocked) == 0x000001, "Wrong alignment on FortTouchMoveStick_IsLocked");
static_assert(sizeof(FortTouchMoveStick_IsLocked) == 0x000001, "Wrong size on FortTouchMoveStick_IsLocked");
static_assert(offsetof(FortTouchMoveStick_IsLocked, ReturnValue) == 0x000000, "Member 'FortTouchMoveStick_IsLocked::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTouchMoveStick.IsTouched
// 0x0001 (0x0001 - 0x0000)
struct FortTouchMoveStick_IsTouched final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchMoveStick_IsTouched) == 0x000001, "Wrong alignment on FortTouchMoveStick_IsTouched");
static_assert(sizeof(FortTouchMoveStick_IsTouched) == 0x000001, "Wrong size on FortTouchMoveStick_IsTouched");
static_assert(offsetof(FortTouchMoveStick_IsTouched, ReturnValue) == 0x000000, "Member 'FortTouchMoveStick_IsTouched::ReturnValue' has a wrong offset!");

// Function FortniteUI.CampaignLobbyPlayerPanel.OnShowBackbackChanged
// 0x0001 (0x0001 - 0x0000)
struct CampaignLobbyPlayerPanel_OnShowBackbackChanged final
{
public:
	bool                                          bShowBackpack;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignLobbyPlayerPanel_OnShowBackbackChanged) == 0x000001, "Wrong alignment on CampaignLobbyPlayerPanel_OnShowBackbackChanged");
static_assert(sizeof(CampaignLobbyPlayerPanel_OnShowBackbackChanged) == 0x000001, "Wrong size on CampaignLobbyPlayerPanel_OnShowBackbackChanged");
static_assert(offsetof(CampaignLobbyPlayerPanel_OnShowBackbackChanged, bShowBackpack) == 0x000000, "Member 'CampaignLobbyPlayerPanel_OnShowBackbackChanged::bShowBackpack' has a wrong offset!");

// Function FortniteUI.CampaignLobbyPlayerPanel.OnShowHeadAccessoryChanged
// 0x0001 (0x0001 - 0x0000)
struct CampaignLobbyPlayerPanel_OnShowHeadAccessoryChanged final
{
public:
	bool                                          bShowHeadAccessory;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignLobbyPlayerPanel_OnShowHeadAccessoryChanged) == 0x000001, "Wrong alignment on CampaignLobbyPlayerPanel_OnShowHeadAccessoryChanged");
static_assert(sizeof(CampaignLobbyPlayerPanel_OnShowHeadAccessoryChanged) == 0x000001, "Wrong size on CampaignLobbyPlayerPanel_OnShowHeadAccessoryChanged");
static_assert(offsetof(CampaignLobbyPlayerPanel_OnShowHeadAccessoryChanged, bShowHeadAccessory) == 0x000000, "Member 'CampaignLobbyPlayerPanel_OnShowHeadAccessoryChanged::bShowHeadAccessory' has a wrong offset!");

// Function FortniteUI.CampaignLobbyPlayerPanel.OnTeamMemberSet
// 0x0001 (0x0001 - 0x0000)
struct CampaignLobbyPlayerPanel_OnTeamMemberSet final
{
public:
	bool                                          bIsMemberLocal;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignLobbyPlayerPanel_OnTeamMemberSet) == 0x000001, "Wrong alignment on CampaignLobbyPlayerPanel_OnTeamMemberSet");
static_assert(sizeof(CampaignLobbyPlayerPanel_OnTeamMemberSet) == 0x000001, "Wrong size on CampaignLobbyPlayerPanel_OnTeamMemberSet");
static_assert(offsetof(CampaignLobbyPlayerPanel_OnTeamMemberSet, bIsMemberLocal) == 0x000000, "Member 'CampaignLobbyPlayerPanel_OnTeamMemberSet::bIsMemberLocal' has a wrong offset!");

// Function FortniteUI.FortMtxStoreRootBase.GenerateOfferWidget
// 0x0008 (0x0008 - 0x0000)
struct FortMtxStoreRootBase_GenerateOfferWidget final
{
public:
	class UFortStoreFrontOfferInfo*               OfferData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMtxStoreRootBase_GenerateOfferWidget) == 0x000008, "Wrong alignment on FortMtxStoreRootBase_GenerateOfferWidget");
static_assert(sizeof(FortMtxStoreRootBase_GenerateOfferWidget) == 0x000008, "Wrong size on FortMtxStoreRootBase_GenerateOfferWidget");
static_assert(offsetof(FortMtxStoreRootBase_GenerateOfferWidget, OfferData) == 0x000000, "Member 'FortMtxStoreRootBase_GenerateOfferWidget::OfferData' has a wrong offset!");

// Function FortniteUI.FortMtxStoreRootBase.OnUpdateOtherPlatformMTXMessage
// 0x0020 (0x0020 - 0x0000)
struct FortMtxStoreRootBase_OnUpdateOtherPlatformMTXMessage final
{
public:
	bool                                          HasOtherPlatformCurrency;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CurrencyMessageLocText;                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMtxStoreRootBase_OnUpdateOtherPlatformMTXMessage) == 0x000008, "Wrong alignment on FortMtxStoreRootBase_OnUpdateOtherPlatformMTXMessage");
static_assert(sizeof(FortMtxStoreRootBase_OnUpdateOtherPlatformMTXMessage) == 0x000020, "Wrong size on FortMtxStoreRootBase_OnUpdateOtherPlatformMTXMessage");
static_assert(offsetof(FortMtxStoreRootBase_OnUpdateOtherPlatformMTXMessage, HasOtherPlatformCurrency) == 0x000000, "Member 'FortMtxStoreRootBase_OnUpdateOtherPlatformMTXMessage::HasOtherPlatformCurrency' has a wrong offset!");
static_assert(offsetof(FortMtxStoreRootBase_OnUpdateOtherPlatformMTXMessage, CurrencyMessageLocText) == 0x000008, "Member 'FortMtxStoreRootBase_OnUpdateOtherPlatformMTXMessage::CurrencyMessageLocText' has a wrong offset!");

// Function FortniteUI.FortMtxStoreRootBase.SetStorefrontNames
// 0x0010 (0x0010 - 0x0000)
struct FortMtxStoreRootBase_SetStorefrontNames final
{
public:
	TArray<class FString>                         InStorefrontNames;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMtxStoreRootBase_SetStorefrontNames) == 0x000008, "Wrong alignment on FortMtxStoreRootBase_SetStorefrontNames");
static_assert(sizeof(FortMtxStoreRootBase_SetStorefrontNames) == 0x000010, "Wrong size on FortMtxStoreRootBase_SetStorefrontNames");
static_assert(offsetof(FortMtxStoreRootBase_SetStorefrontNames, InStorefrontNames) == 0x000000, "Member 'FortMtxStoreRootBase_SetStorefrontNames::InStorefrontNames' has a wrong offset!");

// Function FortniteUI.FortMtxStoreRootBase.AreOffersLoaded
// 0x0001 (0x0001 - 0x0000)
struct FortMtxStoreRootBase_AreOffersLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMtxStoreRootBase_AreOffersLoaded) == 0x000001, "Wrong alignment on FortMtxStoreRootBase_AreOffersLoaded");
static_assert(sizeof(FortMtxStoreRootBase_AreOffersLoaded) == 0x000001, "Wrong size on FortMtxStoreRootBase_AreOffersLoaded");
static_assert(offsetof(FortMtxStoreRootBase_AreOffersLoaded, ReturnValue) == 0x000000, "Member 'FortMtxStoreRootBase_AreOffersLoaded::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMtxStoreRootBase.GetMtxBreakdown
// 0x0010 (0x0010 - 0x0000)
struct FortMtxStoreRootBase_GetMtxBreakdown final
{
public:
	struct FMtxBreakdown                          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMtxStoreRootBase_GetMtxBreakdown) == 0x000004, "Wrong alignment on FortMtxStoreRootBase_GetMtxBreakdown");
static_assert(sizeof(FortMtxStoreRootBase_GetMtxBreakdown) == 0x000010, "Wrong size on FortMtxStoreRootBase_GetMtxBreakdown");
static_assert(offsetof(FortMtxStoreRootBase_GetMtxBreakdown, ReturnValue) == 0x000000, "Member 'FortMtxStoreRootBase_GetMtxBreakdown::ReturnValue' has a wrong offset!");

// Function FortniteUI.CampaignTopBar.AddIconToScreen
// 0x0008 (0x0008 - 0x0000)
struct CampaignTopBar_AddIconToScreen final
{
public:
	class UCommonLazyImage*                       Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignTopBar_AddIconToScreen) == 0x000008, "Wrong alignment on CampaignTopBar_AddIconToScreen");
static_assert(sizeof(CampaignTopBar_AddIconToScreen) == 0x000008, "Wrong size on CampaignTopBar_AddIconToScreen");
static_assert(offsetof(CampaignTopBar_AddIconToScreen, Image) == 0x000000, "Member 'CampaignTopBar_AddIconToScreen::Image' has a wrong offset!");

// Function FortniteUI.CampaignTopBar.SetActiveInvitesCount
// 0x0004 (0x0004 - 0x0000)
struct CampaignTopBar_SetActiveInvitesCount final
{
public:
	int32                                         NewActiveInvitesCount;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignTopBar_SetActiveInvitesCount) == 0x000004, "Wrong alignment on CampaignTopBar_SetActiveInvitesCount");
static_assert(sizeof(CampaignTopBar_SetActiveInvitesCount) == 0x000004, "Wrong size on CampaignTopBar_SetActiveInvitesCount");
static_assert(offsetof(CampaignTopBar_SetActiveInvitesCount, NewActiveInvitesCount) == 0x000000, "Member 'CampaignTopBar_SetActiveInvitesCount::NewActiveInvitesCount' has a wrong offset!");

// Function FortniteUI.CampaignTopBar.SetOnlineFriendsCount
// 0x0004 (0x0004 - 0x0000)
struct CampaignTopBar_SetOnlineFriendsCount final
{
public:
	int32                                         NewOnlineFriendsCount;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampaignTopBar_SetOnlineFriendsCount) == 0x000004, "Wrong alignment on CampaignTopBar_SetOnlineFriendsCount");
static_assert(sizeof(CampaignTopBar_SetOnlineFriendsCount) == 0x000004, "Wrong size on CampaignTopBar_SetOnlineFriendsCount");
static_assert(offsetof(CampaignTopBar_SetOnlineFriendsCount, NewOnlineFriendsCount) == 0x000000, "Member 'CampaignTopBar_SetOnlineFriendsCount::NewOnlineFriendsCount' has a wrong offset!");

// Function FortniteUI.CarmineHUDBase.OnBossHealthBarChanged
// 0x0030 (0x0030 - 0x0000)
struct CarmineHUDBase_OnBossHealthBarChanged final
{
public:
	struct FAthenaBossHealthData                  BossData;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CarmineHUDBase_OnBossHealthBarChanged) == 0x000008, "Wrong alignment on CarmineHUDBase_OnBossHealthBarChanged");
static_assert(sizeof(CarmineHUDBase_OnBossHealthBarChanged) == 0x000030, "Wrong size on CarmineHUDBase_OnBossHealthBarChanged");
static_assert(offsetof(CarmineHUDBase_OnBossHealthBarChanged, BossData) == 0x000000, "Member 'CarmineHUDBase_OnBossHealthBarChanged::BossData' has a wrong offset!");

// Function FortniteUI.FortTeamMemberManage.OnParticipationChanged
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberManage_OnParticipationChanged final
{
public:
	bool                                          bIsParticipating;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberManage_OnParticipationChanged) == 0x000001, "Wrong alignment on FortTeamMemberManage_OnParticipationChanged");
static_assert(sizeof(FortTeamMemberManage_OnParticipationChanged) == 0x000001, "Wrong size on FortTeamMemberManage_OnParticipationChanged");
static_assert(offsetof(FortTeamMemberManage_OnParticipationChanged, bIsParticipating) == 0x000000, "Member 'FortTeamMemberManage_OnParticipationChanged::bIsParticipating' has a wrong offset!");

// Function FortniteUI.FortTeamMemberManage.SetRepresentingTeamMember
// 0x0004 (0x0004 - 0x0000)
struct FortTeamMemberManage_SetRepresentingTeamMember final
{
public:
	int32                                         LocalTeamMemberIndex;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberManage_SetRepresentingTeamMember) == 0x000004, "Wrong alignment on FortTeamMemberManage_SetRepresentingTeamMember");
static_assert(sizeof(FortTeamMemberManage_SetRepresentingTeamMember) == 0x000004, "Wrong size on FortTeamMemberManage_SetRepresentingTeamMember");
static_assert(offsetof(FortTeamMemberManage_SetRepresentingTeamMember, LocalTeamMemberIndex) == 0x000000, "Member 'FortTeamMemberManage_SetRepresentingTeamMember::LocalTeamMemberIndex' has a wrong offset!");

// Function FortniteUI.FortCreativeIslandLinkScreen.HandleIslandLinkChanged
// 0x0018 (0x0018 - 0x0000)
struct FortCreativeIslandLinkScreen_HandleIslandLinkChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeIslandLinkScreen_HandleIslandLinkChanged) == 0x000008, "Wrong alignment on FortCreativeIslandLinkScreen_HandleIslandLinkChanged");
static_assert(sizeof(FortCreativeIslandLinkScreen_HandleIslandLinkChanged) == 0x000018, "Wrong size on FortCreativeIslandLinkScreen_HandleIslandLinkChanged");
static_assert(offsetof(FortCreativeIslandLinkScreen_HandleIslandLinkChanged, Text) == 0x000000, "Member 'FortCreativeIslandLinkScreen_HandleIslandLinkChanged::Text' has a wrong offset!");

// Function FortniteUI.FortCreativeIslandLinkScreen.HandleIslandLinkCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortCreativeIslandLinkScreen_HandleIslandLinkCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitInfo;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativeIslandLinkScreen_HandleIslandLinkCommitted) == 0x000008, "Wrong alignment on FortCreativeIslandLinkScreen_HandleIslandLinkCommitted");
static_assert(sizeof(FortCreativeIslandLinkScreen_HandleIslandLinkCommitted) == 0x000020, "Wrong size on FortCreativeIslandLinkScreen_HandleIslandLinkCommitted");
static_assert(offsetof(FortCreativeIslandLinkScreen_HandleIslandLinkCommitted, InText) == 0x000000, "Member 'FortCreativeIslandLinkScreen_HandleIslandLinkCommitted::InText' has a wrong offset!");
static_assert(offsetof(FortCreativeIslandLinkScreen_HandleIslandLinkCommitted, CommitInfo) == 0x000018, "Member 'FortCreativeIslandLinkScreen_HandleIslandLinkCommitted::CommitInfo' has a wrong offset!");

// Function FortniteUI.FortCreativeIslandLinkScreen.HandleIslandSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeIslandLinkScreen_HandleIslandSelectionChanged final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeIslandLinkScreen_HandleIslandSelectionChanged) == 0x000008, "Wrong alignment on FortCreativeIslandLinkScreen_HandleIslandSelectionChanged");
static_assert(sizeof(FortCreativeIslandLinkScreen_HandleIslandSelectionChanged) == 0x000008, "Wrong size on FortCreativeIslandLinkScreen_HandleIslandSelectionChanged");
static_assert(offsetof(FortCreativeIslandLinkScreen_HandleIslandSelectionChanged, Item) == 0x000000, "Member 'FortCreativeIslandLinkScreen_HandleIslandSelectionChanged::Item' has a wrong offset!");

// Function FortniteUI.FortCreativeIslandLinkScreen.OnCreativeIslandLinkValidated
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeIslandLinkScreen_OnCreativeIslandLinkValidated final
{
public:
	EFortCreativeIslandLinkValidationResult       ValidateResult;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeIslandLinkScreen_OnCreativeIslandLinkValidated) == 0x000001, "Wrong alignment on FortCreativeIslandLinkScreen_OnCreativeIslandLinkValidated");
static_assert(sizeof(FortCreativeIslandLinkScreen_OnCreativeIslandLinkValidated) == 0x000001, "Wrong size on FortCreativeIslandLinkScreen_OnCreativeIslandLinkValidated");
static_assert(offsetof(FortCreativeIslandLinkScreen_OnCreativeIslandLinkValidated, ValidateResult) == 0x000000, "Member 'FortCreativeIslandLinkScreen_OnCreativeIslandLinkValidated::ValidateResult' has a wrong offset!");

// Function FortniteUI.FortCreativeIslandLinkScreen.RemoveIslandFromFavorites
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeIslandLinkScreen_RemoveIslandFromFavorites final
{
public:
	class FString                                 LinkCode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeIslandLinkScreen_RemoveIslandFromFavorites) == 0x000008, "Wrong alignment on FortCreativeIslandLinkScreen_RemoveIslandFromFavorites");
static_assert(sizeof(FortCreativeIslandLinkScreen_RemoveIslandFromFavorites) == 0x000010, "Wrong size on FortCreativeIslandLinkScreen_RemoveIslandFromFavorites");
static_assert(offsetof(FortCreativeIslandLinkScreen_RemoveIslandFromFavorites, LinkCode) == 0x000000, "Member 'FortCreativeIslandLinkScreen_RemoveIslandFromFavorites::LinkCode' has a wrong offset!");

// Function FortniteUI.FortCreativeIslandLinkScreen.SetFavoritesOnlyMode
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeIslandLinkScreen_SetFavoritesOnlyMode final
{
public:
	bool                                          bFavoritesOnly;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeIslandLinkScreen_SetFavoritesOnlyMode) == 0x000001, "Wrong alignment on FortCreativeIslandLinkScreen_SetFavoritesOnlyMode");
static_assert(sizeof(FortCreativeIslandLinkScreen_SetFavoritesOnlyMode) == 0x000001, "Wrong size on FortCreativeIslandLinkScreen_SetFavoritesOnlyMode");
static_assert(offsetof(FortCreativeIslandLinkScreen_SetFavoritesOnlyMode, bFavoritesOnly) == 0x000000, "Member 'FortCreativeIslandLinkScreen_SetFavoritesOnlyMode::bFavoritesOnly' has a wrong offset!");

// Function FortniteUI.FortCreativeIslandLinkScreen.SetTargetPortal
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeIslandLinkScreen_SetTargetPortal final
{
public:
	class AFortAthenaCreativePortal*              Portal;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeIslandLinkScreen_SetTargetPortal) == 0x000008, "Wrong alignment on FortCreativeIslandLinkScreen_SetTargetPortal");
static_assert(sizeof(FortCreativeIslandLinkScreen_SetTargetPortal) == 0x000008, "Wrong size on FortCreativeIslandLinkScreen_SetTargetPortal");
static_assert(offsetof(FortCreativeIslandLinkScreen_SetTargetPortal, Portal) == 0x000000, "Member 'FortCreativeIslandLinkScreen_SetTargetPortal::Portal' has a wrong offset!");

// Function FortniteUI.FortTooltipUIContext.GetTooltipAttributes
// 0x0018 (0x0018 - 0x0000)
struct FortTooltipUIContext_GetTooltipAttributes final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayAttribute>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipUIContext_GetTooltipAttributes) == 0x000008, "Wrong alignment on FortTooltipUIContext_GetTooltipAttributes");
static_assert(sizeof(FortTooltipUIContext_GetTooltipAttributes) == 0x000018, "Wrong size on FortTooltipUIContext_GetTooltipAttributes");
static_assert(offsetof(FortTooltipUIContext_GetTooltipAttributes, Object) == 0x000000, "Member 'FortTooltipUIContext_GetTooltipAttributes::Object' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetTooltipAttributes, ReturnValue) == 0x000008, "Member 'FortTooltipUIContext_GetTooltipAttributes::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTooltipUIContext.HasTooltipStats
// 0x0010 (0x0010 - 0x0000)
struct FortTooltipUIContext_HasTooltipStats final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltipUIContext_HasTooltipStats) == 0x000008, "Wrong alignment on FortTooltipUIContext_HasTooltipStats");
static_assert(sizeof(FortTooltipUIContext_HasTooltipStats) == 0x000010, "Wrong size on FortTooltipUIContext_HasTooltipStats");
static_assert(offsetof(FortTooltipUIContext_HasTooltipStats, Object) == 0x000000, "Member 'FortTooltipUIContext_HasTooltipStats::Object' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_HasTooltipStats, ReturnValue) == 0x000008, "Member 'FortTooltipUIContext_HasTooltipStats::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTooltipUIContext.GetCombinedDescription
// 0x0030 (0x0030 - 0x0000)
struct FortTooltipUIContext_GetCombinedDescription final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              TooltipContext;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bSummaryDescription;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltipUIContext_GetCombinedDescription) == 0x000008, "Wrong alignment on FortTooltipUIContext_GetCombinedDescription");
static_assert(sizeof(FortTooltipUIContext_GetCombinedDescription) == 0x000030, "Wrong size on FortTooltipUIContext_GetCombinedDescription");
static_assert(offsetof(FortTooltipUIContext_GetCombinedDescription, Object) == 0x000000, "Member 'FortTooltipUIContext_GetCombinedDescription::Object' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetCombinedDescription, TooltipContext) == 0x000008, "Member 'FortTooltipUIContext_GetCombinedDescription::TooltipContext' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetCombinedDescription, OutDescription) == 0x000010, "Member 'FortTooltipUIContext_GetCombinedDescription::OutDescription' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetCombinedDescription, bSummaryDescription) == 0x000028, "Member 'FortTooltipUIContext_GetCombinedDescription::bSummaryDescription' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetCombinedDescription, ReturnValue) == 0x000029, "Member 'FortTooltipUIContext_GetCombinedDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTooltipUIContext.GetComparisonStats
// 0x0030 (0x0030 - 0x0000)
struct FortTooltipUIContext_GetComparisonStats final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ComparisonObject;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              TooltipContext;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSummaryTooltip;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortDisplayAttribute>          ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipUIContext_GetComparisonStats) == 0x000008, "Wrong alignment on FortTooltipUIContext_GetComparisonStats");
static_assert(sizeof(FortTooltipUIContext_GetComparisonStats) == 0x000030, "Wrong size on FortTooltipUIContext_GetComparisonStats");
static_assert(offsetof(FortTooltipUIContext_GetComparisonStats, Object) == 0x000000, "Member 'FortTooltipUIContext_GetComparisonStats::Object' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetComparisonStats, ComparisonObject) == 0x000008, "Member 'FortTooltipUIContext_GetComparisonStats::ComparisonObject' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetComparisonStats, TooltipContext) == 0x000010, "Member 'FortTooltipUIContext_GetComparisonStats::TooltipContext' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetComparisonStats, bUseSummaryTooltip) == 0x000018, "Member 'FortTooltipUIContext_GetComparisonStats::bUseSummaryTooltip' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetComparisonStats, ReturnValue) == 0x000020, "Member 'FortTooltipUIContext_GetComparisonStats::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTooltipUIContext.GetDescription
// 0x0028 (0x0028 - 0x0000)
struct FortTooltipUIContext_GetDescription final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              TooltipContext;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSummaryDescription;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltipUIContext_GetDescription) == 0x000008, "Wrong alignment on FortTooltipUIContext_GetDescription");
static_assert(sizeof(FortTooltipUIContext_GetDescription) == 0x000028, "Wrong size on FortTooltipUIContext_GetDescription");
static_assert(offsetof(FortTooltipUIContext_GetDescription, Object) == 0x000000, "Member 'FortTooltipUIContext_GetDescription::Object' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetDescription, TooltipContext) == 0x000008, "Member 'FortTooltipUIContext_GetDescription::TooltipContext' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetDescription, OutDescription) == 0x000010, "Member 'FortTooltipUIContext_GetDescription::OutDescription' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetDescription, bSummaryDescription) == 0x000020, "Member 'FortTooltipUIContext_GetDescription::bSummaryDescription' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetDescription, ReturnValue) == 0x000021, "Member 'FortTooltipUIContext_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTooltipUIContext.GetDisplayNameAndMultiBrushForTag
// 0x0358 (0x0358 - 0x0000)
struct FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDisplayName;                                    // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    OutBrush;                                          // 0x0020(0x0330)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0350(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag) == 0x000008, "Wrong alignment on FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag");
static_assert(sizeof(FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag) == 0x000358, "Wrong size on FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag");
static_assert(offsetof(FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag, Tag) == 0x000000, "Member 'FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag, OutDisplayName) == 0x000008, "Member 'FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag::OutDisplayName' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag, OutBrush) == 0x000020, "Member 'FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag::OutBrush' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag, ReturnValue) == 0x000350, "Member 'FortTooltipUIContext_GetDisplayNameAndMultiBrushForTag::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTooltipUIContext.GetTooltipLoadingWrapper
// 0x0018 (0x0018 - 0x0000)
struct FortTooltipUIContext_GetTooltipLoadingWrapper final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSummaryDescription;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortTooltipLoadingWrapper*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipUIContext_GetTooltipLoadingWrapper) == 0x000008, "Wrong alignment on FortTooltipUIContext_GetTooltipLoadingWrapper");
static_assert(sizeof(FortTooltipUIContext_GetTooltipLoadingWrapper) == 0x000018, "Wrong size on FortTooltipUIContext_GetTooltipLoadingWrapper");
static_assert(offsetof(FortTooltipUIContext_GetTooltipLoadingWrapper, Object) == 0x000000, "Member 'FortTooltipUIContext_GetTooltipLoadingWrapper::Object' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetTooltipLoadingWrapper, bSummaryDescription) == 0x000008, "Member 'FortTooltipUIContext_GetTooltipLoadingWrapper::bSummaryDescription' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetTooltipLoadingWrapper, ReturnValue) == 0x000010, "Member 'FortTooltipUIContext_GetTooltipLoadingWrapper::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTooltipUIContext.GetTooltipStat
// 0x0090 (0x0090 - 0x0000)
struct FortTooltipUIContext_GetTooltipStat final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortTooltipContext*                    TooltipContext;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0010(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortDisplayAttribute                  OutDisplayAttribute;                               // 0x0018(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bUseSummaryTooltip;                                // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0089(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltipUIContext_GetTooltipStat) == 0x000008, "Wrong alignment on FortTooltipUIContext_GetTooltipStat");
static_assert(sizeof(FortTooltipUIContext_GetTooltipStat) == 0x000090, "Wrong size on FortTooltipUIContext_GetTooltipStat");
static_assert(offsetof(FortTooltipUIContext_GetTooltipStat, Object) == 0x000000, "Member 'FortTooltipUIContext_GetTooltipStat::Object' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetTooltipStat, TooltipContext) == 0x000008, "Member 'FortTooltipUIContext_GetTooltipStat::TooltipContext' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetTooltipStat, Token) == 0x000010, "Member 'FortTooltipUIContext_GetTooltipStat::Token' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetTooltipStat, OutDisplayAttribute) == 0x000018, "Member 'FortTooltipUIContext_GetTooltipStat::OutDisplayAttribute' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetTooltipStat, bUseSummaryTooltip) == 0x000088, "Member 'FortTooltipUIContext_GetTooltipStat::bUseSummaryTooltip' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetTooltipStat, ReturnValue) == 0x000089, "Member 'FortTooltipUIContext_GetTooltipStat::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTooltipUIContext.GetTooltipStats
// 0x0028 (0x0028 - 0x0000)
struct FortTooltipUIContext_GetTooltipStats final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              TooltipContext;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSummaryStats;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortDisplayAttribute>          ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipUIContext_GetTooltipStats) == 0x000008, "Wrong alignment on FortTooltipUIContext_GetTooltipStats");
static_assert(sizeof(FortTooltipUIContext_GetTooltipStats) == 0x000028, "Wrong size on FortTooltipUIContext_GetTooltipStats");
static_assert(offsetof(FortTooltipUIContext_GetTooltipStats, Object) == 0x000000, "Member 'FortTooltipUIContext_GetTooltipStats::Object' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetTooltipStats, TooltipContext) == 0x000008, "Member 'FortTooltipUIContext_GetTooltipStats::TooltipContext' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetTooltipStats, bSummaryStats) == 0x000010, "Member 'FortTooltipUIContext_GetTooltipStats::bSummaryStats' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetTooltipStats, ReturnValue) == 0x000018, "Member 'FortTooltipUIContext_GetTooltipStats::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTooltipUIContext.GetUIDataForTag
// 0x0378 (0x0378 - 0x0000)
struct FortTooltipUIContext_GetUIDataForTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTagUIData                         OutData;                                           // 0x0008(0x0368)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0370(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltipUIContext_GetUIDataForTag) == 0x000008, "Wrong alignment on FortTooltipUIContext_GetUIDataForTag");
static_assert(sizeof(FortTooltipUIContext_GetUIDataForTag) == 0x000378, "Wrong size on FortTooltipUIContext_GetUIDataForTag");
static_assert(offsetof(FortTooltipUIContext_GetUIDataForTag, Tag) == 0x000000, "Member 'FortTooltipUIContext_GetUIDataForTag::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetUIDataForTag, OutData) == 0x000008, "Member 'FortTooltipUIContext_GetUIDataForTag::OutData' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetUIDataForTag, ReturnValue) == 0x000370, "Member 'FortTooltipUIContext_GetUIDataForTag::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTooltipUIContext.GetUpgradeStats
// 0x0028 (0x0028 - 0x0000)
struct FortTooltipUIContext_GetUpgradeStats final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortTooltipContext*                    TooltipContext;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSummaryTooltip;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortDisplayAttribute>          ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipUIContext_GetUpgradeStats) == 0x000008, "Wrong alignment on FortTooltipUIContext_GetUpgradeStats");
static_assert(sizeof(FortTooltipUIContext_GetUpgradeStats) == 0x000028, "Wrong size on FortTooltipUIContext_GetUpgradeStats");
static_assert(offsetof(FortTooltipUIContext_GetUpgradeStats, Object) == 0x000000, "Member 'FortTooltipUIContext_GetUpgradeStats::Object' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetUpgradeStats, TooltipContext) == 0x000008, "Member 'FortTooltipUIContext_GetUpgradeStats::TooltipContext' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetUpgradeStats, bUseSummaryTooltip) == 0x000010, "Member 'FortTooltipUIContext_GetUpgradeStats::bUseSummaryTooltip' has a wrong offset!");
static_assert(offsetof(FortTooltipUIContext_GetUpgradeStats, ReturnValue) == 0x000018, "Member 'FortTooltipUIContext_GetUpgradeStats::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortComparisonResultIndicator.SetComparisonResult
// 0x0001 (0x0001 - 0x0000)
struct FortComparisonResultIndicator_SetComparisonResult final
{
public:
	EFortBuffState                                Param_ComparisonResult;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortComparisonResultIndicator_SetComparisonResult) == 0x000001, "Wrong alignment on FortComparisonResultIndicator_SetComparisonResult");
static_assert(sizeof(FortComparisonResultIndicator_SetComparisonResult) == 0x000001, "Wrong size on FortComparisonResultIndicator_SetComparisonResult");
static_assert(offsetof(FortComparisonResultIndicator_SetComparisonResult, Param_ComparisonResult) == 0x000000, "Member 'FortComparisonResultIndicator_SetComparisonResult::Param_ComparisonResult' has a wrong offset!");

// Function FortniteUI.CMSContext.GetLatestCreativeAds
// 0x0030 (0x0030 - 0x0000)
struct CMSContext_GetLatestCreativeAds final
{
public:
	struct FCreativeAdSource                      ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CMSContext_GetLatestCreativeAds) == 0x000008, "Wrong alignment on CMSContext_GetLatestCreativeAds");
static_assert(sizeof(CMSContext_GetLatestCreativeAds) == 0x000030, "Wrong size on CMSContext_GetLatestCreativeAds");
static_assert(offsetof(CMSContext_GetLatestCreativeAds, ReturnValue) == 0x000000, "Member 'CMSContext_GetLatestCreativeAds::ReturnValue' has a wrong offset!");

// Function FortniteUI.CMSContext.GetLatestEmergencyNotice
// 0x0058 (0x0058 - 0x0000)
struct CMSContext_GetLatestEmergencyNotice final
{
public:
	struct FAthenaNewsEntry                       ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CMSContext_GetLatestEmergencyNotice) == 0x000008, "Wrong alignment on CMSContext_GetLatestEmergencyNotice");
static_assert(sizeof(CMSContext_GetLatestEmergencyNotice) == 0x000058, "Wrong size on CMSContext_GetLatestEmergencyNotice");
static_assert(offsetof(CMSContext_GetLatestEmergencyNotice, ReturnValue) == 0x000000, "Member 'CMSContext_GetLatestEmergencyNotice::ReturnValue' has a wrong offset!");

// Function FortniteUI.CMSContext.GetLatestLobbyDetails
// 0x0040 (0x0040 - 0x0000)
struct CMSContext_GetLatestLobbyDetails final
{
public:
	struct FLobbySource                           ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CMSContext_GetLatestLobbyDetails) == 0x000008, "Wrong alignment on CMSContext_GetLatestLobbyDetails");
static_assert(sizeof(CMSContext_GetLatestLobbyDetails) == 0x000040, "Wrong size on CMSContext_GetLatestLobbyDetails");
static_assert(offsetof(CMSContext_GetLatestLobbyDetails, ReturnValue) == 0x000000, "Member 'CMSContext_GetLatestLobbyDetails::ReturnValue' has a wrong offset!");

// Function FortniteUI.CMSContext.GetLatestNews
// 0x0028 (0x0028 - 0x0000)
struct CMSContext_GetLatestNews final
{
public:
	struct FAthenaNews                            ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CMSContext_GetLatestNews) == 0x000008, "Wrong alignment on CMSContext_GetLatestNews");
static_assert(sizeof(CMSContext_GetLatestNews) == 0x000028, "Wrong size on CMSContext_GetLatestNews");
static_assert(offsetof(CMSContext_GetLatestNews, ReturnValue) == 0x000000, "Member 'CMSContext_GetLatestNews::ReturnValue' has a wrong offset!");

// Function FortniteUI.CMSContext.GetLatestPCBInfo
// 0x0030 (0x0030 - 0x0000)
struct CMSContext_GetLatestPCBInfo final
{
public:
	struct FKoreanCafeSource                      ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CMSContext_GetLatestPCBInfo) == 0x000008, "Wrong alignment on CMSContext_GetLatestPCBInfo");
static_assert(sizeof(CMSContext_GetLatestPCBInfo) == 0x000030, "Wrong size on CMSContext_GetLatestPCBInfo");
static_assert(offsetof(CMSContext_GetLatestPCBInfo, ReturnValue) == 0x000000, "Member 'CMSContext_GetLatestPCBInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.CMSContext.GetLatestSubgameInfo
// 0x01E8 (0x01E8 - 0x0000)
struct CMSContext_GetLatestSubgameInfo final
{
public:
	struct FSubgameScreenSource                   ReturnValue;                                       // 0x0000(0x01E8)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CMSContext_GetLatestSubgameInfo) == 0x000008, "Wrong alignment on CMSContext_GetLatestSubgameInfo");
static_assert(sizeof(CMSContext_GetLatestSubgameInfo) == 0x0001E8, "Wrong size on CMSContext_GetLatestSubgameInfo");
static_assert(offsetof(CMSContext_GetLatestSubgameInfo, ReturnValue) == 0x000000, "Member 'CMSContext_GetLatestSubgameInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.CMSContext.IsNewNewsAvailable
// 0x0001 (0x0001 - 0x0000)
struct CMSContext_IsNewNewsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CMSContext_IsNewNewsAvailable) == 0x000001, "Wrong alignment on CMSContext_IsNewNewsAvailable");
static_assert(sizeof(CMSContext_IsNewNewsAvailable) == 0x000001, "Wrong size on CMSContext_IsNewNewsAvailable");
static_assert(offsetof(CMSContext_IsNewNewsAvailable, ReturnValue) == 0x000000, "Member 'CMSContext_IsNewNewsAvailable::ReturnValue' has a wrong offset!");

// Function FortniteUI.CMSContext.IsNewPlaylistInformationAvailable
// 0x0001 (0x0001 - 0x0000)
struct CMSContext_IsNewPlaylistInformationAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CMSContext_IsNewPlaylistInformationAvailable) == 0x000001, "Wrong alignment on CMSContext_IsNewPlaylistInformationAvailable");
static_assert(sizeof(CMSContext_IsNewPlaylistInformationAvailable) == 0x000001, "Wrong size on CMSContext_IsNewPlaylistInformationAvailable");
static_assert(offsetof(CMSContext_IsNewPlaylistInformationAvailable, ReturnValue) == 0x000000, "Member 'CMSContext_IsNewPlaylistInformationAvailable::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTransformResultsList.ShowRecycleResults
// 0x0010 (0x0010 - 0x0000)
struct FortTransformResultsList_ShowRecycleResults final
{
public:
	TArray<class UFortItem*>                      SacrificeItems;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTransformResultsList_ShowRecycleResults) == 0x000008, "Wrong alignment on FortTransformResultsList_ShowRecycleResults");
static_assert(sizeof(FortTransformResultsList_ShowRecycleResults) == 0x000010, "Wrong size on FortTransformResultsList_ShowRecycleResults");
static_assert(offsetof(FortTransformResultsList_ShowRecycleResults, SacrificeItems) == 0x000000, "Member 'FortTransformResultsList_ShowRecycleResults::SacrificeItems' has a wrong offset!");

// Function FortniteUI.CommonTagVisibilityWidget.HandleOnHUDElementVisibilityChanged
// 0x0020 (0x0020 - 0x0000)
struct CommonTagVisibilityWidget_HandleOnHUDElementVisibilityChanged final
{
public:
	struct FGameplayTagContainer                  HiddenHUDElementTags;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonTagVisibilityWidget_HandleOnHUDElementVisibilityChanged) == 0x000008, "Wrong alignment on CommonTagVisibilityWidget_HandleOnHUDElementVisibilityChanged");
static_assert(sizeof(CommonTagVisibilityWidget_HandleOnHUDElementVisibilityChanged) == 0x000020, "Wrong size on CommonTagVisibilityWidget_HandleOnHUDElementVisibilityChanged");
static_assert(offsetof(CommonTagVisibilityWidget_HandleOnHUDElementVisibilityChanged, HiddenHUDElementTags) == 0x000000, "Member 'CommonTagVisibilityWidget_HandleOnHUDElementVisibilityChanged::HiddenHUDElementTags' has a wrong offset!");

// Function FortniteUI.CommonTagVisibilityWidget.Initialize
// 0x0010 (0x0010 - 0x0000)
struct CommonTagVisibilityWidget_Initialize final
{
public:
	class ULocalPlayer*                           OwningLocalPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayerController;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonTagVisibilityWidget_Initialize) == 0x000008, "Wrong alignment on CommonTagVisibilityWidget_Initialize");
static_assert(sizeof(CommonTagVisibilityWidget_Initialize) == 0x000010, "Wrong size on CommonTagVisibilityWidget_Initialize");
static_assert(offsetof(CommonTagVisibilityWidget_Initialize, OwningLocalPlayer) == 0x000000, "Member 'CommonTagVisibilityWidget_Initialize::OwningLocalPlayer' has a wrong offset!");
static_assert(offsetof(CommonTagVisibilityWidget_Initialize, OwningPlayerController) == 0x000008, "Member 'CommonTagVisibilityWidget_Initialize::OwningPlayerController' has a wrong offset!");

// Function FortniteUI.CommonTagVisibilityWidget.OnVisibilitySetEvent
// 0x0001 (0x0001 - 0x0000)
struct CommonTagVisibilityWidget_OnVisibilitySetEvent final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonTagVisibilityWidget_OnVisibilitySetEvent) == 0x000001, "Wrong alignment on CommonTagVisibilityWidget_OnVisibilitySetEvent");
static_assert(sizeof(CommonTagVisibilityWidget_OnVisibilitySetEvent) == 0x000001, "Wrong size on CommonTagVisibilityWidget_OnVisibilitySetEvent");
static_assert(offsetof(CommonTagVisibilityWidget_OnVisibilitySetEvent, InVisibility) == 0x000000, "Member 'CommonTagVisibilityWidget_OnVisibilitySetEvent::InVisibility' has a wrong offset!");

// Function FortniteUI.FortMatchmakingKnobsModal.GetScrolledOffWhitelistedPlayers
// 0x0010 (0x0010 - 0x0000)
struct FortMatchmakingKnobsModal_GetScrolledOffWhitelistedPlayers final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingKnobsModal_GetScrolledOffWhitelistedPlayers) == 0x000008, "Wrong alignment on FortMatchmakingKnobsModal_GetScrolledOffWhitelistedPlayers");
static_assert(sizeof(FortMatchmakingKnobsModal_GetScrolledOffWhitelistedPlayers) == 0x000010, "Wrong size on FortMatchmakingKnobsModal_GetScrolledOffWhitelistedPlayers");
static_assert(offsetof(FortMatchmakingKnobsModal_GetScrolledOffWhitelistedPlayers, ReturnValue) == 0x000000, "Member 'FortMatchmakingKnobsModal_GetScrolledOffWhitelistedPlayers::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMatchmakingKnobsModal.InitForOptionsComponent
// 0x0008 (0x0008 - 0x0000)
struct FortMatchmakingKnobsModal_InitForOptionsComponent final
{
public:
	class UFortActorOptionsComponent*             OptionsComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingKnobsModal_InitForOptionsComponent) == 0x000008, "Wrong alignment on FortMatchmakingKnobsModal_InitForOptionsComponent");
static_assert(sizeof(FortMatchmakingKnobsModal_InitForOptionsComponent) == 0x000008, "Wrong size on FortMatchmakingKnobsModal_InitForOptionsComponent");
static_assert(offsetof(FortMatchmakingKnobsModal_InitForOptionsComponent, OptionsComponent) == 0x000000, "Member 'FortMatchmakingKnobsModal_InitForOptionsComponent::OptionsComponent' has a wrong offset!");

// Function FortniteUI.FortMatchmakingKnobsModal.InitForToyOptionsActor
// 0x0008 (0x0008 - 0x0000)
struct FortMatchmakingKnobsModal_InitForToyOptionsActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingKnobsModal_InitForToyOptionsActor) == 0x000008, "Wrong alignment on FortMatchmakingKnobsModal_InitForToyOptionsActor");
static_assert(sizeof(FortMatchmakingKnobsModal_InitForToyOptionsActor) == 0x000008, "Wrong size on FortMatchmakingKnobsModal_InitForToyOptionsActor");
static_assert(offsetof(FortMatchmakingKnobsModal_InitForToyOptionsActor, InActor) == 0x000000, "Member 'FortMatchmakingKnobsModal_InitForToyOptionsActor::InActor' has a wrong offset!");

// Function FortniteUI.FortMatchmakingKnobsModal.OnCurrentItemSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortMatchmakingKnobsModal_OnCurrentItemSelectionChanged final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingKnobsModal_OnCurrentItemSelectionChanged) == 0x000008, "Wrong alignment on FortMatchmakingKnobsModal_OnCurrentItemSelectionChanged");
static_assert(sizeof(FortMatchmakingKnobsModal_OnCurrentItemSelectionChanged) == 0x000008, "Wrong size on FortMatchmakingKnobsModal_OnCurrentItemSelectionChanged");
static_assert(offsetof(FortMatchmakingKnobsModal_OnCurrentItemSelectionChanged, Item) == 0x000000, "Member 'FortMatchmakingKnobsModal_OnCurrentItemSelectionChanged::Item' has a wrong offset!");

// Function FortniteUI.FortMatchmakingKnobsModal.OnHoveredItemChanged
// 0x0010 (0x0010 - 0x0000)
struct FortMatchmakingKnobsModal_OnHoveredItemChanged final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHovered;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMatchmakingKnobsModal_OnHoveredItemChanged) == 0x000008, "Wrong alignment on FortMatchmakingKnobsModal_OnHoveredItemChanged");
static_assert(sizeof(FortMatchmakingKnobsModal_OnHoveredItemChanged) == 0x000010, "Wrong size on FortMatchmakingKnobsModal_OnHoveredItemChanged");
static_assert(offsetof(FortMatchmakingKnobsModal_OnHoveredItemChanged, Item) == 0x000000, "Member 'FortMatchmakingKnobsModal_OnHoveredItemChanged::Item' has a wrong offset!");
static_assert(offsetof(FortMatchmakingKnobsModal_OnHoveredItemChanged, bIsHovered) == 0x000008, "Member 'FortMatchmakingKnobsModal_OnHoveredItemChanged::bIsHovered' has a wrong offset!");

// Function FortniteUI.FortMatchmakingKnobsModal.OnSelectionUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortMatchmakingKnobsModal_OnSelectionUpdated final
{
public:
	class UFortMatchmakingKnobsSpinnerButton*     CurrentSelection;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingKnobsModal_OnSelectionUpdated) == 0x000008, "Wrong alignment on FortMatchmakingKnobsModal_OnSelectionUpdated");
static_assert(sizeof(FortMatchmakingKnobsModal_OnSelectionUpdated) == 0x000008, "Wrong size on FortMatchmakingKnobsModal_OnSelectionUpdated");
static_assert(offsetof(FortMatchmakingKnobsModal_OnSelectionUpdated, CurrentSelection) == 0x000000, "Member 'FortMatchmakingKnobsModal_OnSelectionUpdated::CurrentSelection' has a wrong offset!");

// Function FortniteUI.FortMatchmakingKnobsModal.SetInGameMode
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingKnobsModal_SetInGameMode final
{
public:
	bool                                          bIsInGame;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingKnobsModal_SetInGameMode) == 0x000001, "Wrong alignment on FortMatchmakingKnobsModal_SetInGameMode");
static_assert(sizeof(FortMatchmakingKnobsModal_SetInGameMode) == 0x000001, "Wrong size on FortMatchmakingKnobsModal_SetInGameMode");
static_assert(offsetof(FortMatchmakingKnobsModal_SetInGameMode, bIsInGame) == 0x000000, "Member 'FortMatchmakingKnobsModal_SetInGameMode::bIsInGame' has a wrong offset!");

// Function FortniteUI.FortMatchmakingKnobsModal.SetListDataSource
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingKnobsModal_SetListDataSource final
{
public:
	EUFortMatchmakingKnobsDataSource              ListType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingKnobsModal_SetListDataSource) == 0x000001, "Wrong alignment on FortMatchmakingKnobsModal_SetListDataSource");
static_assert(sizeof(FortMatchmakingKnobsModal_SetListDataSource) == 0x000001, "Wrong size on FortMatchmakingKnobsModal_SetListDataSource");
static_assert(offsetof(FortMatchmakingKnobsModal_SetListDataSource, ListType) == 0x000000, "Member 'FortMatchmakingKnobsModal_SetListDataSource::ListType' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.ForwardOnCreativeGhostChanged
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_ForwardOnCreativeGhostChanged final
{
public:
	bool                                          bIsGhostEnabled;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_ForwardOnCreativeGhostChanged) == 0x000001, "Wrong alignment on CreativeHUDLContext_ForwardOnCreativeGhostChanged");
static_assert(sizeof(CreativeHUDLContext_ForwardOnCreativeGhostChanged) == 0x000001, "Wrong size on CreativeHUDLContext_ForwardOnCreativeGhostChanged");
static_assert(offsetof(CreativeHUDLContext_ForwardOnCreativeGhostChanged, bIsGhostEnabled) == 0x000000, "Member 'CreativeHUDLContext_ForwardOnCreativeGhostChanged::bIsGhostEnabled' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.ForwardOnCreativeQuickbarActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_ForwardOnCreativeQuickbarActiveChanged final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_ForwardOnCreativeQuickbarActiveChanged) == 0x000001, "Wrong alignment on CreativeHUDLContext_ForwardOnCreativeQuickbarActiveChanged");
static_assert(sizeof(CreativeHUDLContext_ForwardOnCreativeQuickbarActiveChanged) == 0x000001, "Wrong size on CreativeHUDLContext_ForwardOnCreativeQuickbarActiveChanged");
static_assert(offsetof(CreativeHUDLContext_ForwardOnCreativeQuickbarActiveChanged, bIsActive) == 0x000000, "Member 'CreativeHUDLContext_ForwardOnCreativeQuickbarActiveChanged::bIsActive' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.ForwardOnCreativeQuickbarEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_ForwardOnCreativeQuickbarEnabledChanged final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_ForwardOnCreativeQuickbarEnabledChanged) == 0x000001, "Wrong alignment on CreativeHUDLContext_ForwardOnCreativeQuickbarEnabledChanged");
static_assert(sizeof(CreativeHUDLContext_ForwardOnCreativeQuickbarEnabledChanged) == 0x000001, "Wrong size on CreativeHUDLContext_ForwardOnCreativeQuickbarEnabledChanged");
static_assert(offsetof(CreativeHUDLContext_ForwardOnCreativeQuickbarEnabledChanged, bIsEnabled) == 0x000000, "Member 'CreativeHUDLContext_ForwardOnCreativeQuickbarEnabledChanged::bIsEnabled' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.ForwardOnCreativeQuickbarEquippedChanged
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_ForwardOnCreativeQuickbarEquippedChanged final
{
public:
	bool                                          bIsEquipped;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_ForwardOnCreativeQuickbarEquippedChanged) == 0x000001, "Wrong alignment on CreativeHUDLContext_ForwardOnCreativeQuickbarEquippedChanged");
static_assert(sizeof(CreativeHUDLContext_ForwardOnCreativeQuickbarEquippedChanged) == 0x000001, "Wrong size on CreativeHUDLContext_ForwardOnCreativeQuickbarEquippedChanged");
static_assert(offsetof(CreativeHUDLContext_ForwardOnCreativeQuickbarEquippedChanged, bIsEquipped) == 0x000000, "Member 'CreativeHUDLContext_ForwardOnCreativeQuickbarEquippedChanged::bIsEquipped' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.ForwardOnDropToFloorChanged
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_ForwardOnDropToFloorChanged final
{
public:
	bool                                          bDropToFloorOn;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_ForwardOnDropToFloorChanged) == 0x000001, "Wrong alignment on CreativeHUDLContext_ForwardOnDropToFloorChanged");
static_assert(sizeof(CreativeHUDLContext_ForwardOnDropToFloorChanged) == 0x000001, "Wrong size on CreativeHUDLContext_ForwardOnDropToFloorChanged");
static_assert(offsetof(CreativeHUDLContext_ForwardOnDropToFloorChanged, bDropToFloorOn) == 0x000000, "Member 'CreativeHUDLContext_ForwardOnDropToFloorChanged::bDropToFloorOn' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.ForwardOnLOSChanged
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_ForwardOnLOSChanged final
{
public:
	EHitTraceRule                                 HitTraceRule;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_ForwardOnLOSChanged) == 0x000001, "Wrong alignment on CreativeHUDLContext_ForwardOnLOSChanged");
static_assert(sizeof(CreativeHUDLContext_ForwardOnLOSChanged) == 0x000001, "Wrong size on CreativeHUDLContext_ForwardOnLOSChanged");
static_assert(offsetof(CreativeHUDLContext_ForwardOnLOSChanged, HitTraceRule) == 0x000000, "Member 'CreativeHUDLContext_ForwardOnLOSChanged::HitTraceRule' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.ForwardOnPrecisionChanged
// 0x0002 (0x0002 - 0x0000)
struct CreativeHUDLContext_ForwardOnPrecisionChanged final
{
public:
	bool                                          bPrecisionOn;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GridSnapIndex;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_ForwardOnPrecisionChanged) == 0x000001, "Wrong alignment on CreativeHUDLContext_ForwardOnPrecisionChanged");
static_assert(sizeof(CreativeHUDLContext_ForwardOnPrecisionChanged) == 0x000002, "Wrong size on CreativeHUDLContext_ForwardOnPrecisionChanged");
static_assert(offsetof(CreativeHUDLContext_ForwardOnPrecisionChanged, bPrecisionOn) == 0x000000, "Member 'CreativeHUDLContext_ForwardOnPrecisionChanged::bPrecisionOn' has a wrong offset!");
static_assert(offsetof(CreativeHUDLContext_ForwardOnPrecisionChanged, GridSnapIndex) == 0x000001, "Member 'CreativeHUDLContext_ForwardOnPrecisionChanged::GridSnapIndex' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.ForwardOnRotationAxisChanged
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_ForwardOnRotationAxisChanged final
{
public:
	uint8                                         AxisIndex;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_ForwardOnRotationAxisChanged) == 0x000001, "Wrong alignment on CreativeHUDLContext_ForwardOnRotationAxisChanged");
static_assert(sizeof(CreativeHUDLContext_ForwardOnRotationAxisChanged) == 0x000001, "Wrong size on CreativeHUDLContext_ForwardOnRotationAxisChanged");
static_assert(offsetof(CreativeHUDLContext_ForwardOnRotationAxisChanged, AxisIndex) == 0x000000, "Member 'CreativeHUDLContext_ForwardOnRotationAxisChanged::AxisIndex' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.ForwardOnScaleAxisChanged
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_ForwardOnScaleAxisChanged final
{
public:
	EScaleAxis                                    Axis;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_ForwardOnScaleAxisChanged) == 0x000001, "Wrong alignment on CreativeHUDLContext_ForwardOnScaleAxisChanged");
static_assert(sizeof(CreativeHUDLContext_ForwardOnScaleAxisChanged) == 0x000001, "Wrong size on CreativeHUDLContext_ForwardOnScaleAxisChanged");
static_assert(offsetof(CreativeHUDLContext_ForwardOnScaleAxisChanged, Axis) == 0x000000, "Member 'CreativeHUDLContext_ForwardOnScaleAxisChanged::Axis' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.HandleOnCreativeModeEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_HandleOnCreativeModeEnabledChanged final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_HandleOnCreativeModeEnabledChanged) == 0x000001, "Wrong alignment on CreativeHUDLContext_HandleOnCreativeModeEnabledChanged");
static_assert(sizeof(CreativeHUDLContext_HandleOnCreativeModeEnabledChanged) == 0x000001, "Wrong size on CreativeHUDLContext_HandleOnCreativeModeEnabledChanged");
static_assert(offsetof(CreativeHUDLContext_HandleOnCreativeModeEnabledChanged, bIsEnabled) == 0x000000, "Member 'CreativeHUDLContext_HandleOnCreativeModeEnabledChanged::bIsEnabled' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.OnWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct CreativeHUDLContext_OnWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_OnWeaponEquipped) == 0x000008, "Wrong alignment on CreativeHUDLContext_OnWeaponEquipped");
static_assert(sizeof(CreativeHUDLContext_OnWeaponEquipped) == 0x000010, "Wrong size on CreativeHUDLContext_OnWeaponEquipped");
static_assert(offsetof(CreativeHUDLContext_OnWeaponEquipped, NewWeapon) == 0x000000, "Member 'CreativeHUDLContext_OnWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(CreativeHUDLContext_OnWeaponEquipped, PrevWeapon) == 0x000008, "Member 'CreativeHUDLContext_OnWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.GetCurrentHitTraceRule
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_GetCurrentHitTraceRule final
{
public:
	EHitTraceRule                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_GetCurrentHitTraceRule) == 0x000001, "Wrong alignment on CreativeHUDLContext_GetCurrentHitTraceRule");
static_assert(sizeof(CreativeHUDLContext_GetCurrentHitTraceRule) == 0x000001, "Wrong size on CreativeHUDLContext_GetCurrentHitTraceRule");
static_assert(offsetof(CreativeHUDLContext_GetCurrentHitTraceRule, ReturnValue) == 0x000000, "Member 'CreativeHUDLContext_GetCurrentHitTraceRule::ReturnValue' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.GetDropToFloorEnabled
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_GetDropToFloorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_GetDropToFloorEnabled) == 0x000001, "Wrong alignment on CreativeHUDLContext_GetDropToFloorEnabled");
static_assert(sizeof(CreativeHUDLContext_GetDropToFloorEnabled) == 0x000001, "Wrong size on CreativeHUDLContext_GetDropToFloorEnabled");
static_assert(offsetof(CreativeHUDLContext_GetDropToFloorEnabled, ReturnValue) == 0x000000, "Member 'CreativeHUDLContext_GetDropToFloorEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.GetOwningPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct CreativeHUDLContext_GetOwningPlayerPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_GetOwningPlayerPawn) == 0x000008, "Wrong alignment on CreativeHUDLContext_GetOwningPlayerPawn");
static_assert(sizeof(CreativeHUDLContext_GetOwningPlayerPawn) == 0x000008, "Wrong size on CreativeHUDLContext_GetOwningPlayerPawn");
static_assert(offsetof(CreativeHUDLContext_GetOwningPlayerPawn, ReturnValue) == 0x000000, "Member 'CreativeHUDLContext_GetOwningPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.GetPrecisionLevel
// 0x0002 (0x0002 - 0x0000)
struct CreativeHUDLContext_GetPrecisionLevel final
{
public:
	bool                                          SnappingEnabled;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GridSnappingIndex;                                 // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_GetPrecisionLevel) == 0x000001, "Wrong alignment on CreativeHUDLContext_GetPrecisionLevel");
static_assert(sizeof(CreativeHUDLContext_GetPrecisionLevel) == 0x000002, "Wrong size on CreativeHUDLContext_GetPrecisionLevel");
static_assert(offsetof(CreativeHUDLContext_GetPrecisionLevel, SnappingEnabled) == 0x000000, "Member 'CreativeHUDLContext_GetPrecisionLevel::SnappingEnabled' has a wrong offset!");
static_assert(offsetof(CreativeHUDLContext_GetPrecisionLevel, GridSnappingIndex) == 0x000001, "Member 'CreativeHUDLContext_GetPrecisionLevel::GridSnappingIndex' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.GetRotationAxis
// 0x000C (0x000C - 0x0000)
struct CreativeHUDLContext_GetRotationAxis final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_GetRotationAxis) == 0x000004, "Wrong alignment on CreativeHUDLContext_GetRotationAxis");
static_assert(sizeof(CreativeHUDLContext_GetRotationAxis) == 0x00000C, "Wrong size on CreativeHUDLContext_GetRotationAxis");
static_assert(offsetof(CreativeHUDLContext_GetRotationAxis, ReturnValue) == 0x000000, "Member 'CreativeHUDLContext_GetRotationAxis::ReturnValue' has a wrong offset!");

// Function FortniteUI.CreativeHUDLContext.GetScaleAxis
// 0x0001 (0x0001 - 0x0000)
struct CreativeHUDLContext_GetScaleAxis final
{
public:
	EScaleAxis                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativeHUDLContext_GetScaleAxis) == 0x000001, "Wrong alignment on CreativeHUDLContext_GetScaleAxis");
static_assert(sizeof(CreativeHUDLContext_GetScaleAxis) == 0x000001, "Wrong size on CreativeHUDLContext_GetScaleAxis");
static_assert(offsetof(CreativeHUDLContext_GetScaleAxis, ReturnValue) == 0x000000, "Member 'CreativeHUDLContext_GetScaleAxis::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTournamentPayoutThresholdEntry.OnPayoutDataSet
// 0x0004 (0x0004 - 0x0000)
struct FortTournamentPayoutThresholdEntry_OnPayoutDataSet final
{
public:
	int32                                         EntryIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTournamentPayoutThresholdEntry_OnPayoutDataSet) == 0x000004, "Wrong alignment on FortTournamentPayoutThresholdEntry_OnPayoutDataSet");
static_assert(sizeof(FortTournamentPayoutThresholdEntry_OnPayoutDataSet) == 0x000004, "Wrong size on FortTournamentPayoutThresholdEntry_OnPayoutDataSet");
static_assert(offsetof(FortTournamentPayoutThresholdEntry_OnPayoutDataSet, EntryIndex) == 0x000000, "Member 'FortTournamentPayoutThresholdEntry_OnPayoutDataSet::EntryIndex' has a wrong offset!");

// Function FortniteUI.CreativePerformanceHUDBase.HandleGameStateInitialized
// 0x0008 (0x0008 - 0x0000)
struct CreativePerformanceHUDBase_HandleGameStateInitialized final
{
public:
	class AFortGameState*                         GameState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativePerformanceHUDBase_HandleGameStateInitialized) == 0x000008, "Wrong alignment on CreativePerformanceHUDBase_HandleGameStateInitialized");
static_assert(sizeof(CreativePerformanceHUDBase_HandleGameStateInitialized) == 0x000008, "Wrong size on CreativePerformanceHUDBase_HandleGameStateInitialized");
static_assert(offsetof(CreativePerformanceHUDBase_HandleGameStateInitialized, GameState) == 0x000000, "Member 'CreativePerformanceHUDBase_HandleGameStateInitialized::GameState' has a wrong offset!");

// Function FortniteUI.CreativePerformanceHUDBase.HandleVolumeStateChanged
// 0x0010 (0x0010 - 0x0000)
struct CreativePerformanceHUDBase_HandleVolumeStateChanged final
{
public:
	EVolumeState                                  NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortVolume*                            Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativePerformanceHUDBase_HandleVolumeStateChanged) == 0x000008, "Wrong alignment on CreativePerformanceHUDBase_HandleVolumeStateChanged");
static_assert(sizeof(CreativePerformanceHUDBase_HandleVolumeStateChanged) == 0x000010, "Wrong size on CreativePerformanceHUDBase_HandleVolumeStateChanged");
static_assert(offsetof(CreativePerformanceHUDBase_HandleVolumeStateChanged, NewState) == 0x000000, "Member 'CreativePerformanceHUDBase_HandleVolumeStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(CreativePerformanceHUDBase_HandleVolumeStateChanged, Volume) == 0x000008, "Member 'CreativePerformanceHUDBase_HandleVolumeStateChanged::Volume' has a wrong offset!");

// Function FortniteUI.CreativePerformanceHUDBase.OnClientEnterVolume
// 0x0010 (0x0010 - 0x0000)
struct CreativePerformanceHUDBase_OnClientEnterVolume final
{
public:
	class APlayerState*                           ClientState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortVolume*                            Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativePerformanceHUDBase_OnClientEnterVolume) == 0x000008, "Wrong alignment on CreativePerformanceHUDBase_OnClientEnterVolume");
static_assert(sizeof(CreativePerformanceHUDBase_OnClientEnterVolume) == 0x000010, "Wrong size on CreativePerformanceHUDBase_OnClientEnterVolume");
static_assert(offsetof(CreativePerformanceHUDBase_OnClientEnterVolume, ClientState) == 0x000000, "Member 'CreativePerformanceHUDBase_OnClientEnterVolume::ClientState' has a wrong offset!");
static_assert(offsetof(CreativePerformanceHUDBase_OnClientEnterVolume, Volume) == 0x000008, "Member 'CreativePerformanceHUDBase_OnClientEnterVolume::Volume' has a wrong offset!");

// Function FortniteUI.CreativePerformanceHUDBase.OnClientExitVolume
// 0x0010 (0x0010 - 0x0000)
struct CreativePerformanceHUDBase_OnClientExitVolume final
{
public:
	class APlayerState*                           ClientState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortVolume*                            Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativePerformanceHUDBase_OnClientExitVolume) == 0x000008, "Wrong alignment on CreativePerformanceHUDBase_OnClientExitVolume");
static_assert(sizeof(CreativePerformanceHUDBase_OnClientExitVolume) == 0x000010, "Wrong size on CreativePerformanceHUDBase_OnClientExitVolume");
static_assert(offsetof(CreativePerformanceHUDBase_OnClientExitVolume, ClientState) == 0x000000, "Member 'CreativePerformanceHUDBase_OnClientExitVolume::ClientState' has a wrong offset!");
static_assert(offsetof(CreativePerformanceHUDBase_OnClientExitVolume, Volume) == 0x000008, "Member 'CreativePerformanceHUDBase_OnClientExitVolume::Volume' has a wrong offset!");

// Function FortniteUI.CreativePerformanceHUDBase.OnPerformanceMetricsUpdated
// 0x000C (0x000C - 0x0000)
struct CreativePerformanceHUDBase_OnPerformanceMetricsUpdated final
{
public:
	struct FVolumePerformanceMetrics              VolumePerformanceMetrics;                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativePerformanceHUDBase_OnPerformanceMetricsUpdated) == 0x000004, "Wrong alignment on CreativePerformanceHUDBase_OnPerformanceMetricsUpdated");
static_assert(sizeof(CreativePerformanceHUDBase_OnPerformanceMetricsUpdated) == 0x00000C, "Wrong size on CreativePerformanceHUDBase_OnPerformanceMetricsUpdated");
static_assert(offsetof(CreativePerformanceHUDBase_OnPerformanceMetricsUpdated, VolumePerformanceMetrics) == 0x000000, "Member 'CreativePerformanceHUDBase_OnPerformanceMetricsUpdated::VolumePerformanceMetrics' has a wrong offset!");

// Function FortniteUI.CreativePerformanceHUDBase.SetUIMetrics
// 0x000C (0x000C - 0x0000)
struct CreativePerformanceHUDBase_SetUIMetrics final
{
public:
	struct FVolumePerformanceMetrics              VolumePerformanceMetrics;                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreativePerformanceHUDBase_SetUIMetrics) == 0x000004, "Wrong alignment on CreativePerformanceHUDBase_SetUIMetrics");
static_assert(sizeof(CreativePerformanceHUDBase_SetUIMetrics) == 0x00000C, "Wrong size on CreativePerformanceHUDBase_SetUIMetrics");
static_assert(offsetof(CreativePerformanceHUDBase_SetUIMetrics, VolumePerformanceMetrics) == 0x000000, "Member 'CreativePerformanceHUDBase_SetUIMetrics::VolumePerformanceMetrics' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnBackActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnBackActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnBackActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnBackActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnBackActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnBackActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnBackActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnBackActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnInputMethodChanged final
{
public:
	ECommonInputType                              CurrentInputType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnInputMethodChanged) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnInputMethodChanged");
static_assert(sizeof(FortCollectionBookSectionPanel_OnInputMethodChanged) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnInputMethodChanged");
static_assert(offsetof(FortCollectionBookSectionPanel_OnInputMethodChanged, CurrentInputType) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnInputMethodChanged::CurrentInputType' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnInspectActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnInspectActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnInspectActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnInspectActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnInspectActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnInspectActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnInspectActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnInspectActionExecuted::bPassThrough' has a wrong offset!");

// DelegateFunction FortniteUI.FortCollectionBookSectionPanel.OnItemAction__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSectionPanel_OnItemAction__DelegateSignature final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnItemAction__DelegateSignature) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnItemAction__DelegateSignature");
static_assert(sizeof(FortCollectionBookSectionPanel_OnItemAction__DelegateSignature) == 0x000008, "Wrong size on FortCollectionBookSectionPanel_OnItemAction__DelegateSignature");
static_assert(offsetof(FortCollectionBookSectionPanel_OnItemAction__DelegateSignature, SelectedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnItemAction__DelegateSignature::SelectedItem' has a wrong offset!");

// DelegateFunction FortniteUI.FortCollectionBookSectionPanel.OnItemInspectAction__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSectionPanel_OnItemInspectAction__DelegateSignature final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableItemActions;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlaceholderItem;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSectionPanel_OnItemInspectAction__DelegateSignature) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnItemInspectAction__DelegateSignature");
static_assert(sizeof(FortCollectionBookSectionPanel_OnItemInspectAction__DelegateSignature) == 0x000010, "Wrong size on FortCollectionBookSectionPanel_OnItemInspectAction__DelegateSignature");
static_assert(offsetof(FortCollectionBookSectionPanel_OnItemInspectAction__DelegateSignature, SelectedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnItemInspectAction__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnItemInspectAction__DelegateSignature, EnableItemActions) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnItemInspectAction__DelegateSignature::EnableItemActions' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnItemInspectAction__DelegateSignature, IsPlaceholderItem) == 0x000009, "Member 'FortCollectionBookSectionPanel_OnItemInspectAction__DelegateSignature::IsPlaceholderItem' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnLogAllowedItemsActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnLogAllowedItemsActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnOpenPickerActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnOpenPickerActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnOpenPickerActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnOpenPickerActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnOpenPickerActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnOpenPickerActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnOpenPickerActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnOpenPickerActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnPurchaseItemActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnPurchaseItemActionExecuted::bPassThrough' has a wrong offset!");

// DelegateFunction FortniteUI.FortCollectionBookSectionPanel.OnResearchItemAction__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct FortCollectionBookSectionPanel_OnResearchItemAction__DelegateSignature final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortCollectionBookSlotData            SlotData;                                          // 0x0008(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnResearchItemAction__DelegateSignature) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnResearchItemAction__DelegateSignature");
static_assert(sizeof(FortCollectionBookSectionPanel_OnResearchItemAction__DelegateSignature) == 0x000058, "Wrong size on FortCollectionBookSectionPanel_OnResearchItemAction__DelegateSignature");
static_assert(offsetof(FortCollectionBookSectionPanel_OnResearchItemAction__DelegateSignature, SelectedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnResearchItemAction__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnResearchItemAction__DelegateSignature, SlotData) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnResearchItemAction__DelegateSignature::SlotData' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnResearchItemOperationComplete
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookSectionPanel_OnResearchItemOperationComplete final
{
public:
	const class UFortAccountItem*                 NewItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TemplateId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnResearchItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnResearchItemOperationComplete");
static_assert(sizeof(FortCollectionBookSectionPanel_OnResearchItemOperationComplete) == 0x000018, "Wrong size on FortCollectionBookSectionPanel_OnResearchItemOperationComplete");
static_assert(offsetof(FortCollectionBookSectionPanel_OnResearchItemOperationComplete, NewItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnResearchItemOperationComplete::NewItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnResearchItemOperationComplete, TemplateId) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnResearchItemOperationComplete::TemplateId' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnSectionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSectionPanel_OnSectionChanged final
{
public:
	const class UFortCollectionBookSection*       Section;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSectionChanged) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnSectionChanged");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSectionChanged) == 0x000008, "Wrong size on FortCollectionBookSectionPanel_OnSectionChanged");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSectionChanged, Section) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSectionChanged::Section' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnSlotButtonContextAction
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotButtonContextAction final
{
public:
	EFortCollectionBookPopupButtonType            ContextAction;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotButtonContextAction) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotButtonContextAction");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotButtonContextAction) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnSlotButtonContextAction");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotButtonContextAction, ContextAction) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotButtonContextAction::ContextAction' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnSlotButtonHovered
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotButtonHovered final
{
public:
	int32                                         ButtonIx;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotButtonHovered) == 0x000004, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotButtonHovered");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotButtonHovered) == 0x000004, "Wrong size on FortCollectionBookSectionPanel_OnSlotButtonHovered");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotButtonHovered, ButtonIx) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotButtonHovered::ButtonIx' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnSlotButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotButtonSelected final
{
public:
	const class UFortCollectionBookSlotButton*    SlotButton;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotButtonSelected) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotButtonSelected");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotButtonSelected) == 0x000008, "Wrong size on FortCollectionBookSectionPanel_OnSlotButtonSelected");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotButtonSelected, SlotButton) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotButtonSelected::SlotButton' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnSlotItemActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotItemActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotItemActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotItemActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotItemActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnSlotItemActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotItemActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotItemActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnSlotItemComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotItemComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotItemComplete) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotItemComplete");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotItemComplete) == 0x000010, "Wrong size on FortCollectionBookSectionPanel_OnSlotItemComplete");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotItemComplete, SlottedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotItemComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotItemComplete, SlotId) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnSlotItemComplete::SlotId' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnSlotItemConfirmationCompleted
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotItemConfirmationCompleted final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortDialogExternalLatentActionHandle  LatentActionHandle;                                // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotItemConfirmationCompleted) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotItemConfirmationCompleted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotItemConfirmationCompleted) == 0x000018, "Wrong size on FortCollectionBookSectionPanel_OnSlotItemConfirmationCompleted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotItemConfirmationCompleted, SelectedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotItemConfirmationCompleted::SelectedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotItemConfirmationCompleted, SlotId) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnSlotItemConfirmationCompleted::SlotId' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotItemConfirmationCompleted, LatentActionHandle) == 0x000010, "Member 'FortCollectionBookSectionPanel_OnSlotItemConfirmationCompleted::LatentActionHandle' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnSlotPickerItemHovered
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotPickerItemHovered final
{
public:
	class UFortItem*                              HoveredItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotPickerItemHovered) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotPickerItemHovered");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotPickerItemHovered) == 0x000008, "Wrong size on FortCollectionBookSectionPanel_OnSlotPickerItemHovered");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotPickerItemHovered, HoveredItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotPickerItemHovered::HoveredItem' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnSlotPickerItemSelected
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlotPickerItemSelected final
{
public:
	class UFortItem*                              SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlotPickerItemSelected) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnSlotPickerItemSelected");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlotPickerItemSelected) == 0x000008, "Wrong size on FortCollectionBookSectionPanel_OnSlotPickerItemSelected");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlotPickerItemSelected, SelectedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlotPickerItemSelected::SelectedItem' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnSlottedItemOperationComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSectionPanel_OnSlottedItemOperationComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnSlottedItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnSlottedItemOperationComplete");
static_assert(sizeof(FortCollectionBookSectionPanel_OnSlottedItemOperationComplete) == 0x000010, "Wrong size on FortCollectionBookSectionPanel_OnSlottedItemOperationComplete");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlottedItemOperationComplete, SlottedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnSlottedItemOperationComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnSlottedItemOperationComplete, SlotId) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnSlottedItemOperationComplete::SlotId' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnUnslotItemActionExecuted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSectionPanel_OnUnslotItemActionExecuted final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnUnslotItemActionExecuted) == 0x000001, "Wrong alignment on FortCollectionBookSectionPanel_OnUnslotItemActionExecuted");
static_assert(sizeof(FortCollectionBookSectionPanel_OnUnslotItemActionExecuted) == 0x000001, "Wrong size on FortCollectionBookSectionPanel_OnUnslotItemActionExecuted");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemActionExecuted, bPassThrough) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnUnslotItemActionExecuted::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnUnslotItemComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSectionPanel_OnUnslotItemComplete final
{
public:
	const class UFortItem*                        UnslottedItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnUnslotItemComplete) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnUnslotItemComplete");
static_assert(sizeof(FortCollectionBookSectionPanel_OnUnslotItemComplete) == 0x000010, "Wrong size on FortCollectionBookSectionPanel_OnUnslotItemComplete");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemComplete, UnslottedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnUnslotItemComplete::UnslottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemComplete, SlotId) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnUnslotItemComplete::SlotId' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionPanel.OnUnslotItemOperationComplete
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookSectionPanel_OnUnslotItemOperationComplete final
{
public:
	const class UFortAccountItem*                 UnslottedItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortAccountItem*                 OldSlottedItem;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionPanel_OnUnslotItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookSectionPanel_OnUnslotItemOperationComplete");
static_assert(sizeof(FortCollectionBookSectionPanel_OnUnslotItemOperationComplete) == 0x000018, "Wrong size on FortCollectionBookSectionPanel_OnUnslotItemOperationComplete");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemOperationComplete, UnslottedItem) == 0x000000, "Member 'FortCollectionBookSectionPanel_OnUnslotItemOperationComplete::UnslottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemOperationComplete, OldSlottedItem) == 0x000008, "Member 'FortCollectionBookSectionPanel_OnUnslotItemOperationComplete::OldSlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionPanel_OnUnslotItemOperationComplete, SlotId) == 0x000010, "Member 'FortCollectionBookSectionPanel_OnUnslotItemOperationComplete::SlotId' has a wrong offset!");

// Function FortniteUI.DeimosSurvivalWidgetBase.OnUpdateObjectiveIcon
// 0x0010 (0x0010 - 0x0000)
struct DeimosSurvivalWidgetBase_OnUpdateObjectiveIcon final
{
public:
	struct FSurvivalObjectiveIconData             ObjectiveIconData;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeimosSurvivalWidgetBase_OnUpdateObjectiveIcon) == 0x000004, "Wrong alignment on DeimosSurvivalWidgetBase_OnUpdateObjectiveIcon");
static_assert(sizeof(DeimosSurvivalWidgetBase_OnUpdateObjectiveIcon) == 0x000010, "Wrong size on DeimosSurvivalWidgetBase_OnUpdateObjectiveIcon");
static_assert(offsetof(DeimosSurvivalWidgetBase_OnUpdateObjectiveIcon, ObjectiveIconData) == 0x000000, "Member 'DeimosSurvivalWidgetBase_OnUpdateObjectiveIcon::ObjectiveIconData' has a wrong offset!");

// Function FortniteUI.DeimosSurvivalWidgetBase.OnUpdateStateText
// 0x0018 (0x0018 - 0x0000)
struct DeimosSurvivalWidgetBase_OnUpdateStateText final
{
public:
	class FText                                   StateText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeimosSurvivalWidgetBase_OnUpdateStateText) == 0x000008, "Wrong alignment on DeimosSurvivalWidgetBase_OnUpdateStateText");
static_assert(sizeof(DeimosSurvivalWidgetBase_OnUpdateStateText) == 0x000018, "Wrong size on DeimosSurvivalWidgetBase_OnUpdateStateText");
static_assert(offsetof(DeimosSurvivalWidgetBase_OnUpdateStateText, StateText) == 0x000000, "Member 'DeimosSurvivalWidgetBase_OnUpdateStateText::StateText' has a wrong offset!");

// Function FortniteUI.DiscoCaptureWidgetBase.GetClosestCapturePoint
// 0x0010 (0x0010 - 0x0000)
struct DiscoCaptureWidgetBase_GetClosestCapturePoint final
{
public:
	class AFortPlayerPawnAthena*                  ViewPawn;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAthenaCapturePoint*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscoCaptureWidgetBase_GetClosestCapturePoint) == 0x000008, "Wrong alignment on DiscoCaptureWidgetBase_GetClosestCapturePoint");
static_assert(sizeof(DiscoCaptureWidgetBase_GetClosestCapturePoint) == 0x000010, "Wrong size on DiscoCaptureWidgetBase_GetClosestCapturePoint");
static_assert(offsetof(DiscoCaptureWidgetBase_GetClosestCapturePoint, ViewPawn) == 0x000000, "Member 'DiscoCaptureWidgetBase_GetClosestCapturePoint::ViewPawn' has a wrong offset!");
static_assert(offsetof(DiscoCaptureWidgetBase_GetClosestCapturePoint, ReturnValue) == 0x000008, "Member 'DiscoCaptureWidgetBase_GetClosestCapturePoint::ReturnValue' has a wrong offset!");

// Function FortniteUI.DiscoCaptureWidgetBase.OnHandleSpectatingChanged
// 0x0008 (0x0008 - 0x0000)
struct DiscoCaptureWidgetBase_OnHandleSpectatingChanged final
{
public:
	class AFortPlayerStateZone*                   SpectatingTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscoCaptureWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong alignment on DiscoCaptureWidgetBase_OnHandleSpectatingChanged");
static_assert(sizeof(DiscoCaptureWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong size on DiscoCaptureWidgetBase_OnHandleSpectatingChanged");
static_assert(offsetof(DiscoCaptureWidgetBase_OnHandleSpectatingChanged, SpectatingTarget) == 0x000000, "Member 'DiscoCaptureWidgetBase_OnHandleSpectatingChanged::SpectatingTarget' has a wrong offset!");

// Function FortniteUI.DiscoCaptureWidgetBase.OnUpdateCaptureUI
// 0x0030 (0x0030 - 0x0000)
struct DiscoCaptureWidgetBase_OnUpdateCaptureUI final
{
public:
	EDiscoCaptureUIState                          CaptureState;                                      // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextToDisplay;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UMaterialInstanceDynamic*         ImageMID;                                          // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillAmount;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DiscoCaptureWidgetBase_OnUpdateCaptureUI) == 0x000008, "Wrong alignment on DiscoCaptureWidgetBase_OnUpdateCaptureUI");
static_assert(sizeof(DiscoCaptureWidgetBase_OnUpdateCaptureUI) == 0x000030, "Wrong size on DiscoCaptureWidgetBase_OnUpdateCaptureUI");
static_assert(offsetof(DiscoCaptureWidgetBase_OnUpdateCaptureUI, CaptureState) == 0x000000, "Member 'DiscoCaptureWidgetBase_OnUpdateCaptureUI::CaptureState' has a wrong offset!");
static_assert(offsetof(DiscoCaptureWidgetBase_OnUpdateCaptureUI, TextToDisplay) == 0x000008, "Member 'DiscoCaptureWidgetBase_OnUpdateCaptureUI::TextToDisplay' has a wrong offset!");
static_assert(offsetof(DiscoCaptureWidgetBase_OnUpdateCaptureUI, ImageMID) == 0x000020, "Member 'DiscoCaptureWidgetBase_OnUpdateCaptureUI::ImageMID' has a wrong offset!");
static_assert(offsetof(DiscoCaptureWidgetBase_OnUpdateCaptureUI, FillAmount) == 0x000028, "Member 'DiscoCaptureWidgetBase_OnUpdateCaptureUI::FillAmount' has a wrong offset!");

// Function FortniteUI.FortTimespanDataSource.AddOnChangeDelegate
// 0x0010 (0x0010 - 0x0000)
struct FortTimespanDataSource_AddOnChangeDelegate final
{
public:
	TDelegate<void(class UObject* Source)>        InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimespanDataSource_AddOnChangeDelegate) == 0x000004, "Wrong alignment on FortTimespanDataSource_AddOnChangeDelegate");
static_assert(sizeof(FortTimespanDataSource_AddOnChangeDelegate) == 0x000010, "Wrong size on FortTimespanDataSource_AddOnChangeDelegate");
static_assert(offsetof(FortTimespanDataSource_AddOnChangeDelegate, InDelegate) == 0x000000, "Member 'FortTimespanDataSource_AddOnChangeDelegate::InDelegate' has a wrong offset!");

// Function FortniteUI.FortTimespanDataSource.RemoveOnChangeDelegate
// 0x0010 (0x0010 - 0x0000)
struct FortTimespanDataSource_RemoveOnChangeDelegate final
{
public:
	TDelegate<void(class UObject* Source)>        InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimespanDataSource_RemoveOnChangeDelegate) == 0x000004, "Wrong alignment on FortTimespanDataSource_RemoveOnChangeDelegate");
static_assert(sizeof(FortTimespanDataSource_RemoveOnChangeDelegate) == 0x000010, "Wrong size on FortTimespanDataSource_RemoveOnChangeDelegate");
static_assert(offsetof(FortTimespanDataSource_RemoveOnChangeDelegate, InDelegate) == 0x000000, "Member 'FortTimespanDataSource_RemoveOnChangeDelegate::InDelegate' has a wrong offset!");

// Function FortniteUI.FortTimespanDataSource.GetValue
// 0x0008 (0x0008 - 0x0000)
struct FortTimespanDataSource_GetValue final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimespanDataSource_GetValue) == 0x000008, "Wrong alignment on FortTimespanDataSource_GetValue");
static_assert(sizeof(FortTimespanDataSource_GetValue) == 0x000008, "Wrong size on FortTimespanDataSource_GetValue");
static_assert(offsetof(FortTimespanDataSource_GetValue, ReturnValue) == 0x000000, "Member 'FortTimespanDataSource_GetValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.DiscoWidgetBase.OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct DiscoWidgetBase_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscoWidgetBase_OnGamePhaseChanged) == 0x000001, "Wrong alignment on DiscoWidgetBase_OnGamePhaseChanged");
static_assert(sizeof(DiscoWidgetBase_OnGamePhaseChanged) == 0x000001, "Wrong size on DiscoWidgetBase_OnGamePhaseChanged");
static_assert(offsetof(DiscoWidgetBase_OnGamePhaseChanged, GamePhase) == 0x000000, "Member 'DiscoWidgetBase_OnGamePhaseChanged::GamePhase' has a wrong offset!");

// Function FortniteUI.DiscoWidgetBase.OnHandleSpectatingChanged
// 0x0008 (0x0008 - 0x0000)
struct DiscoWidgetBase_OnHandleSpectatingChanged final
{
public:
	class AFortPlayerStateZone*                   SpectatingTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscoWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong alignment on DiscoWidgetBase_OnHandleSpectatingChanged");
static_assert(sizeof(DiscoWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong size on DiscoWidgetBase_OnHandleSpectatingChanged");
static_assert(offsetof(DiscoWidgetBase_OnHandleSpectatingChanged, SpectatingTarget) == 0x000000, "Member 'DiscoWidgetBase_OnHandleSpectatingChanged::SpectatingTarget' has a wrong offset!");

// Function FortniteUI.DiscoWidgetBase.OnMutatorObjectUpdated
// 0x0118 (0x0118 - 0x0000)
struct DiscoWidgetBase_OnMutatorObjectUpdated final
{
public:
	struct FGameplayMutatorObjectDataArray        MutatorArray;                                      // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscoWidgetBase_OnMutatorObjectUpdated) == 0x000008, "Wrong alignment on DiscoWidgetBase_OnMutatorObjectUpdated");
static_assert(sizeof(DiscoWidgetBase_OnMutatorObjectUpdated) == 0x000118, "Wrong size on DiscoWidgetBase_OnMutatorObjectUpdated");
static_assert(offsetof(DiscoWidgetBase_OnMutatorObjectUpdated, MutatorArray) == 0x000000, "Member 'DiscoWidgetBase_OnMutatorObjectUpdated::MutatorArray' has a wrong offset!");

// Function FortniteUI.DiscoWidgetBase.OnPlayScoreProgressSound
// 0x0002 (0x0002 - 0x0000)
struct DiscoWidgetBase_OnPlayScoreProgressSound final
{
public:
	EDiscoScoreProgressTypes                      ScoreProgressType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalTeam;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscoWidgetBase_OnPlayScoreProgressSound) == 0x000001, "Wrong alignment on DiscoWidgetBase_OnPlayScoreProgressSound");
static_assert(sizeof(DiscoWidgetBase_OnPlayScoreProgressSound) == 0x000002, "Wrong size on DiscoWidgetBase_OnPlayScoreProgressSound");
static_assert(offsetof(DiscoWidgetBase_OnPlayScoreProgressSound, ScoreProgressType) == 0x000000, "Member 'DiscoWidgetBase_OnPlayScoreProgressSound::ScoreProgressType' has a wrong offset!");
static_assert(offsetof(DiscoWidgetBase_OnPlayScoreProgressSound, bIsLocalTeam) == 0x000001, "Member 'DiscoWidgetBase_OnPlayScoreProgressSound::bIsLocalTeam' has a wrong offset!");

// Function FortniteUI.DiscoWidgetBase.OnUpdateCapturePoint
// 0x0018 (0x0018 - 0x0000)
struct DiscoWidgetBase_OnUpdateCapturePoint final
{
public:
	int32                                         IconIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDiscoCaptureIconData                  IconData;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscoWidgetBase_OnUpdateCapturePoint) == 0x000008, "Wrong alignment on DiscoWidgetBase_OnUpdateCapturePoint");
static_assert(sizeof(DiscoWidgetBase_OnUpdateCapturePoint) == 0x000018, "Wrong size on DiscoWidgetBase_OnUpdateCapturePoint");
static_assert(offsetof(DiscoWidgetBase_OnUpdateCapturePoint, IconIndex) == 0x000000, "Member 'DiscoWidgetBase_OnUpdateCapturePoint::IconIndex' has a wrong offset!");
static_assert(offsetof(DiscoWidgetBase_OnUpdateCapturePoint, IconData) == 0x000008, "Member 'DiscoWidgetBase_OnUpdateCapturePoint::IconData' has a wrong offset!");

// Function FortniteUI.DiscoWidgetBase.OnUpdateTeamScore
// 0x0028 (0x0028 - 0x0000)
struct DiscoWidgetBase_OnUpdateTeamScore final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDiscoTeamScoreData                    ScoreData;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscoWidgetBase_OnUpdateTeamScore) == 0x000008, "Wrong alignment on DiscoWidgetBase_OnUpdateTeamScore");
static_assert(sizeof(DiscoWidgetBase_OnUpdateTeamScore) == 0x000028, "Wrong size on DiscoWidgetBase_OnUpdateTeamScore");
static_assert(offsetof(DiscoWidgetBase_OnUpdateTeamScore, TeamIndex) == 0x000000, "Member 'DiscoWidgetBase_OnUpdateTeamScore::TeamIndex' has a wrong offset!");
static_assert(offsetof(DiscoWidgetBase_OnUpdateTeamScore, ScoreData) == 0x000008, "Member 'DiscoWidgetBase_OnUpdateTeamScore::ScoreData' has a wrong offset!");

// Function FortniteUI.EliminatedOverlay.GetDisplayNameForKillerPlayerState
// 0x0018 (0x0018 - 0x0000)
struct EliminatedOverlay_GetDisplayNameForKillerPlayerState final
{
public:
	const class AFortPlayerStateAthena*           InPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutDisplayName;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EliminatedOverlay_GetDisplayNameForKillerPlayerState) == 0x000008, "Wrong alignment on EliminatedOverlay_GetDisplayNameForKillerPlayerState");
static_assert(sizeof(EliminatedOverlay_GetDisplayNameForKillerPlayerState) == 0x000018, "Wrong size on EliminatedOverlay_GetDisplayNameForKillerPlayerState");
static_assert(offsetof(EliminatedOverlay_GetDisplayNameForKillerPlayerState, InPlayerState) == 0x000000, "Member 'EliminatedOverlay_GetDisplayNameForKillerPlayerState::InPlayerState' has a wrong offset!");
static_assert(offsetof(EliminatedOverlay_GetDisplayNameForKillerPlayerState, OutDisplayName) == 0x000008, "Member 'EliminatedOverlay_GetDisplayNameForKillerPlayerState::OutDisplayName' has a wrong offset!");

// Function FortniteUI.EmergencyNoticeBase.ShowNotice
// 0x0030 (0x0030 - 0x0000)
struct EmergencyNoticeBase_ShowNotice final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmergencyNoticeBase_ShowNotice) == 0x000008, "Wrong alignment on EmergencyNoticeBase_ShowNotice");
static_assert(sizeof(EmergencyNoticeBase_ShowNotice) == 0x000030, "Wrong size on EmergencyNoticeBase_ShowNotice");
static_assert(offsetof(EmergencyNoticeBase_ShowNotice, Title) == 0x000000, "Member 'EmergencyNoticeBase_ShowNotice::Title' has a wrong offset!");
static_assert(offsetof(EmergencyNoticeBase_ShowNotice, Body) == 0x000018, "Member 'EmergencyNoticeBase_ShowNotice::Body' has a wrong offset!");

// Function FortniteUI.EnableMultiFactorModal.OnConsoleDisplayURLProvided
// 0x0018 (0x0018 - 0x0000)
struct EnableMultiFactorModal_OnConsoleDisplayURLProvided final
{
public:
	class FText                                   UniquePlayerURLText;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnableMultiFactorModal_OnConsoleDisplayURLProvided) == 0x000008, "Wrong alignment on EnableMultiFactorModal_OnConsoleDisplayURLProvided");
static_assert(sizeof(EnableMultiFactorModal_OnConsoleDisplayURLProvided) == 0x000018, "Wrong size on EnableMultiFactorModal_OnConsoleDisplayURLProvided");
static_assert(offsetof(EnableMultiFactorModal_OnConsoleDisplayURLProvided, UniquePlayerURLText) == 0x000000, "Member 'EnableMultiFactorModal_OnConsoleDisplayURLProvided::UniquePlayerURLText' has a wrong offset!");

// Function FortniteUI.EnableMultiFactorModal.OnSetExitButtonText
// 0x0018 (0x0018 - 0x0000)
struct EnableMultiFactorModal_OnSetExitButtonText final
{
public:
	class FText                                   NewButtonText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnableMultiFactorModal_OnSetExitButtonText) == 0x000008, "Wrong alignment on EnableMultiFactorModal_OnSetExitButtonText");
static_assert(sizeof(EnableMultiFactorModal_OnSetExitButtonText) == 0x000018, "Wrong size on EnableMultiFactorModal_OnSetExitButtonText");
static_assert(offsetof(EnableMultiFactorModal_OnSetExitButtonText, NewButtonText) == 0x000000, "Member 'EnableMultiFactorModal_OnSetExitButtonText::NewButtonText' has a wrong offset!");

// Function FortniteUI.EnableMultiFactorModal.OnSetScreenConfiguration
// 0x0001 (0x0001 - 0x0000)
struct EnableMultiFactorModal_OnSetScreenConfiguration final
{
public:
	bool                                          bIsConsole;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnableMultiFactorModal_OnSetScreenConfiguration) == 0x000001, "Wrong alignment on EnableMultiFactorModal_OnSetScreenConfiguration");
static_assert(sizeof(EnableMultiFactorModal_OnSetScreenConfiguration) == 0x000001, "Wrong size on EnableMultiFactorModal_OnSetScreenConfiguration");
static_assert(offsetof(EnableMultiFactorModal_OnSetScreenConfiguration, bIsConsole) == 0x000000, "Member 'EnableMultiFactorModal_OnSetScreenConfiguration::bIsConsole' has a wrong offset!");

// Function FortniteUI.EnableMultiFactorModal.QueueModal
// 0x0003 (0x0003 - 0x0000)
struct EnableMultiFactorModal_QueueModal final
{
public:
	bool                                          bAllowPermanentOptOut;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTournamentQueue;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnableMultiFactorModal_QueueModal) == 0x000001, "Wrong alignment on EnableMultiFactorModal_QueueModal");
static_assert(sizeof(EnableMultiFactorModal_QueueModal) == 0x000003, "Wrong size on EnableMultiFactorModal_QueueModal");
static_assert(offsetof(EnableMultiFactorModal_QueueModal, bAllowPermanentOptOut) == 0x000000, "Member 'EnableMultiFactorModal_QueueModal::bAllowPermanentOptOut' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorModal_QueueModal, bTournamentQueue) == 0x000001, "Member 'EnableMultiFactorModal_QueueModal::bTournamentQueue' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorModal_QueueModal, ReturnValue) == 0x000002, "Member 'EnableMultiFactorModal_QueueModal::ReturnValue' has a wrong offset!");

// Function FortniteUI.FeaturedCreativeContent.OnSetupAds
// 0x0020 (0x0020 - 0x0000)
struct FeaturedCreativeContent_OnSetupAds final
{
public:
	TArray<class FString>                         MediaURLs;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FCreativeAdData>                AdMetadata;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeaturedCreativeContent_OnSetupAds) == 0x000008, "Wrong alignment on FeaturedCreativeContent_OnSetupAds");
static_assert(sizeof(FeaturedCreativeContent_OnSetupAds) == 0x000020, "Wrong size on FeaturedCreativeContent_OnSetupAds");
static_assert(offsetof(FeaturedCreativeContent_OnSetupAds, MediaURLs) == 0x000000, "Member 'FeaturedCreativeContent_OnSetupAds::MediaURLs' has a wrong offset!");
static_assert(offsetof(FeaturedCreativeContent_OnSetupAds, AdMetadata) == 0x000010, "Member 'FeaturedCreativeContent_OnSetupAds::AdMetadata' has a wrong offset!");

// Function FortniteUI.FeedbackReportablePlayerBase.SetSelectionState
// 0x0002 (0x0002 - 0x0000)
struct FeedbackReportablePlayerBase_SetSelectionState final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateOnSelect;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackReportablePlayerBase_SetSelectionState) == 0x000001, "Wrong alignment on FeedbackReportablePlayerBase_SetSelectionState");
static_assert(sizeof(FeedbackReportablePlayerBase_SetSelectionState) == 0x000002, "Wrong size on FeedbackReportablePlayerBase_SetSelectionState");
static_assert(offsetof(FeedbackReportablePlayerBase_SetSelectionState, bIsSelected) == 0x000000, "Member 'FeedbackReportablePlayerBase_SetSelectionState::bIsSelected' has a wrong offset!");
static_assert(offsetof(FeedbackReportablePlayerBase_SetSelectionState, bAnimateOnSelect) == 0x000001, "Member 'FeedbackReportablePlayerBase_SetSelectionState::bAnimateOnSelect' has a wrong offset!");

// Function FortniteUI.FeedbackReportPlayerBase.DynamicHandlePlayerSelected
// 0x0008 (0x0008 - 0x0000)
struct FeedbackReportPlayerBase_DynamicHandlePlayerSelected final
{
public:
	class UObject*                                SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackReportPlayerBase_DynamicHandlePlayerSelected) == 0x000008, "Wrong alignment on FeedbackReportPlayerBase_DynamicHandlePlayerSelected");
static_assert(sizeof(FeedbackReportPlayerBase_DynamicHandlePlayerSelected) == 0x000008, "Wrong size on FeedbackReportPlayerBase_DynamicHandlePlayerSelected");
static_assert(offsetof(FeedbackReportPlayerBase_DynamicHandlePlayerSelected, SelectedItem) == 0x000000, "Member 'FeedbackReportPlayerBase_DynamicHandlePlayerSelected::SelectedItem' has a wrong offset!");

// Function FortniteUI.FeedbackReportPlayerBase.DynamicHandleReportReasonSelected
// 0x0008 (0x0008 - 0x0000)
struct FeedbackReportPlayerBase_DynamicHandleReportReasonSelected final
{
public:
	class UObject*                                SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackReportPlayerBase_DynamicHandleReportReasonSelected) == 0x000008, "Wrong alignment on FeedbackReportPlayerBase_DynamicHandleReportReasonSelected");
static_assert(sizeof(FeedbackReportPlayerBase_DynamicHandleReportReasonSelected) == 0x000008, "Wrong size on FeedbackReportPlayerBase_DynamicHandleReportReasonSelected");
static_assert(offsetof(FeedbackReportPlayerBase_DynamicHandleReportReasonSelected, SelectedItem) == 0x000000, "Member 'FeedbackReportPlayerBase_DynamicHandleReportReasonSelected::SelectedItem' has a wrong offset!");

// Function FortniteUI.FeedbackReportPlayerBase.HandleMessageChanged
// 0x0018 (0x0018 - 0x0000)
struct FeedbackReportPlayerBase_HandleMessageChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackReportPlayerBase_HandleMessageChanged) == 0x000008, "Wrong alignment on FeedbackReportPlayerBase_HandleMessageChanged");
static_assert(sizeof(FeedbackReportPlayerBase_HandleMessageChanged) == 0x000018, "Wrong size on FeedbackReportPlayerBase_HandleMessageChanged");
static_assert(offsetof(FeedbackReportPlayerBase_HandleMessageChanged, Text) == 0x000000, "Member 'FeedbackReportPlayerBase_HandleMessageChanged::Text' has a wrong offset!");

// Function FortniteUI.FeedbackReportPlayerBase.HandleTabClicked
// 0x0001 (0x0001 - 0x0000)
struct FeedbackReportPlayerBase_HandleTabClicked final
{
public:
	EPlayerReportingStep                          ClickedStep;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackReportPlayerBase_HandleTabClicked) == 0x000001, "Wrong alignment on FeedbackReportPlayerBase_HandleTabClicked");
static_assert(sizeof(FeedbackReportPlayerBase_HandleTabClicked) == 0x000001, "Wrong size on FeedbackReportPlayerBase_HandleTabClicked");
static_assert(offsetof(FeedbackReportPlayerBase_HandleTabClicked, ClickedStep) == 0x000000, "Member 'FeedbackReportPlayerBase_HandleTabClicked::ClickedStep' has a wrong offset!");

// Function FortniteUI.FeedbackReportPlayerBase.OnFeedbackSentCallback
// 0x0001 (0x0001 - 0x0000)
struct FeedbackReportPlayerBase_OnFeedbackSentCallback final
{
public:
	bool                                          Succeeded;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackReportPlayerBase_OnFeedbackSentCallback) == 0x000001, "Wrong alignment on FeedbackReportPlayerBase_OnFeedbackSentCallback");
static_assert(sizeof(FeedbackReportPlayerBase_OnFeedbackSentCallback) == 0x000001, "Wrong size on FeedbackReportPlayerBase_OnFeedbackSentCallback");
static_assert(offsetof(FeedbackReportPlayerBase_OnFeedbackSentCallback, Succeeded) == 0x000000, "Member 'FeedbackReportPlayerBase_OnFeedbackSentCallback::Succeeded' has a wrong offset!");

// Function FortniteUI.FeedbackReportPlayerBase.OnListViewSelectionMade
// 0x0020 (0x0020 - 0x0000)
struct FeedbackReportPlayerBase_OnListViewSelectionMade final
{
public:
	EPlayerReportingStep                          ReportingStep;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SelectedText;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackReportPlayerBase_OnListViewSelectionMade) == 0x000008, "Wrong alignment on FeedbackReportPlayerBase_OnListViewSelectionMade");
static_assert(sizeof(FeedbackReportPlayerBase_OnListViewSelectionMade) == 0x000020, "Wrong size on FeedbackReportPlayerBase_OnListViewSelectionMade");
static_assert(offsetof(FeedbackReportPlayerBase_OnListViewSelectionMade, ReportingStep) == 0x000000, "Member 'FeedbackReportPlayerBase_OnListViewSelectionMade::ReportingStep' has a wrong offset!");
static_assert(offsetof(FeedbackReportPlayerBase_OnListViewSelectionMade, SelectedText) == 0x000008, "Member 'FeedbackReportPlayerBase_OnListViewSelectionMade::SelectedText' has a wrong offset!");

// Function FortniteUI.FeedbackReportPlayerBase.OnPopulateView
// 0x0001 (0x0001 - 0x0000)
struct FeedbackReportPlayerBase_OnPopulateView final
{
public:
	EPlayerReportingStep                          CurrentStep;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackReportPlayerBase_OnPopulateView) == 0x000001, "Wrong alignment on FeedbackReportPlayerBase_OnPopulateView");
static_assert(sizeof(FeedbackReportPlayerBase_OnPopulateView) == 0x000001, "Wrong size on FeedbackReportPlayerBase_OnPopulateView");
static_assert(offsetof(FeedbackReportPlayerBase_OnPopulateView, CurrentStep) == 0x000000, "Member 'FeedbackReportPlayerBase_OnPopulateView::CurrentStep' has a wrong offset!");

// Function FortniteUI.FortVoiceChannelChangePopup.SetToast
// 0x0008 (0x0008 - 0x0000)
struct FortVoiceChannelChangePopup_SetToast final
{
public:
	class UFortUINotification*                    ToastNotification;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVoiceChannelChangePopup_SetToast) == 0x000008, "Wrong alignment on FortVoiceChannelChangePopup_SetToast");
static_assert(sizeof(FortVoiceChannelChangePopup_SetToast) == 0x000008, "Wrong size on FortVoiceChannelChangePopup_SetToast");
static_assert(offsetof(FortVoiceChannelChangePopup_SetToast, ToastNotification) == 0x000000, "Member 'FortVoiceChannelChangePopup_SetToast::ToastNotification' has a wrong offset!");

// Function FortniteUI.FeedbackReportPlayerReasonBase.SetSelectionState
// 0x0002 (0x0002 - 0x0000)
struct FeedbackReportPlayerReasonBase_SetSelectionState final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateOnSelect;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FeedbackReportPlayerReasonBase_SetSelectionState) == 0x000001, "Wrong alignment on FeedbackReportPlayerReasonBase_SetSelectionState");
static_assert(sizeof(FeedbackReportPlayerReasonBase_SetSelectionState) == 0x000002, "Wrong size on FeedbackReportPlayerReasonBase_SetSelectionState");
static_assert(offsetof(FeedbackReportPlayerReasonBase_SetSelectionState, bIsSelected) == 0x000000, "Member 'FeedbackReportPlayerReasonBase_SetSelectionState::bIsSelected' has a wrong offset!");
static_assert(offsetof(FeedbackReportPlayerReasonBase_SetSelectionState, bAnimateOnSelect) == 0x000001, "Member 'FeedbackReportPlayerReasonBase_SetSelectionState::bAnimateOnSelect' has a wrong offset!");

// Function FortniteUI.FortCreativeMiniGameInfo.ForceRefresh
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeMiniGameInfo_ForceRefresh final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMiniGameInfo_ForceRefresh) == 0x000001, "Wrong alignment on FortCreativeMiniGameInfo_ForceRefresh");
static_assert(sizeof(FortCreativeMiniGameInfo_ForceRefresh) == 0x000001, "Wrong size on FortCreativeMiniGameInfo_ForceRefresh");
static_assert(offsetof(FortCreativeMiniGameInfo_ForceRefresh, ReturnValue) == 0x000000, "Member 'FortCreativeMiniGameInfo_ForceRefresh::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativeMiniGameInfo.AreDetailsToggleable
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeMiniGameInfo_AreDetailsToggleable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMiniGameInfo_AreDetailsToggleable) == 0x000001, "Wrong alignment on FortCreativeMiniGameInfo_AreDetailsToggleable");
static_assert(sizeof(FortCreativeMiniGameInfo_AreDetailsToggleable) == 0x000001, "Wrong size on FortCreativeMiniGameInfo_AreDetailsToggleable");
static_assert(offsetof(FortCreativeMiniGameInfo_AreDetailsToggleable, ReturnValue) == 0x000000, "Member 'FortCreativeMiniGameInfo_AreDetailsToggleable::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativeMiniGameInfo.IsStartGameEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeMiniGameInfo_IsStartGameEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMiniGameInfo_IsStartGameEnabled) == 0x000001, "Wrong alignment on FortCreativeMiniGameInfo_IsStartGameEnabled");
static_assert(sizeof(FortCreativeMiniGameInfo_IsStartGameEnabled) == 0x000001, "Wrong size on FortCreativeMiniGameInfo_IsStartGameEnabled");
static_assert(offsetof(FortCreativeMiniGameInfo_IsStartGameEnabled, ReturnValue) == 0x000000, "Member 'FortCreativeMiniGameInfo_IsStartGameEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreSummaryItemButton.GetPopupMenu
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemButton_GetPopupMenu final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_GetPopupMenu) == 0x000008, "Wrong alignment on FortStoreSummaryItemButton_GetPopupMenu");
static_assert(sizeof(FortStoreSummaryItemButton_GetPopupMenu) == 0x000008, "Wrong size on FortStoreSummaryItemButton_GetPopupMenu");
static_assert(offsetof(FortStoreSummaryItemButton_GetPopupMenu, ReturnValue) == 0x000000, "Member 'FortStoreSummaryItemButton_GetPopupMenu::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreSummaryItemButton.HandleMenuOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummaryItemButton_HandleMenuOpenChanged final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_HandleMenuOpenChanged) == 0x000001, "Wrong alignment on FortStoreSummaryItemButton_HandleMenuOpenChanged");
static_assert(sizeof(FortStoreSummaryItemButton_HandleMenuOpenChanged) == 0x000001, "Wrong size on FortStoreSummaryItemButton_HandleMenuOpenChanged");
static_assert(offsetof(FortStoreSummaryItemButton_HandleMenuOpenChanged, bIsOpen) == 0x000000, "Member 'FortStoreSummaryItemButton_HandleMenuOpenChanged::bIsOpen' has a wrong offset!");

// Function FortniteUI.FortStoreSummaryItemButton.SetStoreCardObject
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemButton_SetStoreCardObject final
{
public:
	class UStoreCardObject*                       CardObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_SetStoreCardObject) == 0x000008, "Wrong alignment on FortStoreSummaryItemButton_SetStoreCardObject");
static_assert(sizeof(FortStoreSummaryItemButton_SetStoreCardObject) == 0x000008, "Wrong size on FortStoreSummaryItemButton_SetStoreCardObject");
static_assert(offsetof(FortStoreSummaryItemButton_SetStoreCardObject, CardObject) == 0x000000, "Member 'FortStoreSummaryItemButton_SetStoreCardObject::CardObject' has a wrong offset!");

// Function FortniteUI.FortStoreSummaryItemButton.UpdateMulchListWithItem
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummaryItemButton_UpdateMulchListWithItem final
{
public:
	bool                                          bAddingItem;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_UpdateMulchListWithItem) == 0x000001, "Wrong alignment on FortStoreSummaryItemButton_UpdateMulchListWithItem");
static_assert(sizeof(FortStoreSummaryItemButton_UpdateMulchListWithItem) == 0x000001, "Wrong size on FortStoreSummaryItemButton_UpdateMulchListWithItem");
static_assert(offsetof(FortStoreSummaryItemButton_UpdateMulchListWithItem, bAddingItem) == 0x000000, "Member 'FortStoreSummaryItemButton_UpdateMulchListWithItem::bAddingItem' has a wrong offset!");

// Function FortniteUI.FortStoreSummaryItemButton.GetStoreCardObject
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemButton_GetStoreCardObject final
{
public:
	class UStoreCardObject*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemButton_GetStoreCardObject) == 0x000008, "Wrong alignment on FortStoreSummaryItemButton_GetStoreCardObject");
static_assert(sizeof(FortStoreSummaryItemButton_GetStoreCardObject) == 0x000008, "Wrong size on FortStoreSummaryItemButton_GetStoreCardObject");
static_assert(offsetof(FortStoreSummaryItemButton_GetStoreCardObject, ReturnValue) == 0x000000, "Member 'FortStoreSummaryItemButton_GetStoreCardObject::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontendLevelScriptActor.GetFrontendLevelScript
// 0x0010 (0x0010 - 0x0000)
struct FortFrontendLevelScriptActor_GetFrontendLevelScript final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortFrontendLevelScriptActor*          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontendLevelScriptActor_GetFrontendLevelScript) == 0x000008, "Wrong alignment on FortFrontendLevelScriptActor_GetFrontendLevelScript");
static_assert(sizeof(FortFrontendLevelScriptActor_GetFrontendLevelScript) == 0x000010, "Wrong size on FortFrontendLevelScriptActor_GetFrontendLevelScript");
static_assert(offsetof(FortFrontendLevelScriptActor_GetFrontendLevelScript, WorldContextObject) == 0x000000, "Member 'FortFrontendLevelScriptActor_GetFrontendLevelScript::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFrontendLevelScriptActor_GetFrontendLevelScript, ReturnValue) == 0x000008, "Member 'FortFrontendLevelScriptActor_GetFrontendLevelScript::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontendLevelScriptActor.GetCommanderPreviewPedestalActor
// 0x0028 (0x0028 - 0x0000)
struct FortFrontendLevelScriptActor_GetCommanderPreviewPedestalActor final
{
public:
	TSoftObjectPtr<class AFortItemPreviewPedestal> ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontendLevelScriptActor_GetCommanderPreviewPedestalActor) == 0x000008, "Wrong alignment on FortFrontendLevelScriptActor_GetCommanderPreviewPedestalActor");
static_assert(sizeof(FortFrontendLevelScriptActor_GetCommanderPreviewPedestalActor) == 0x000028, "Wrong size on FortFrontendLevelScriptActor_GetCommanderPreviewPedestalActor");
static_assert(offsetof(FortFrontendLevelScriptActor_GetCommanderPreviewPedestalActor, ReturnValue) == 0x000000, "Member 'FortFrontendLevelScriptActor_GetCommanderPreviewPedestalActor::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFrontendLevelScriptActor.GetHeroLoadoutPreviewPedestalActor
// 0x0028 (0x0028 - 0x0000)
struct FortFrontendLevelScriptActor_GetHeroLoadoutPreviewPedestalActor final
{
public:
	TSoftObjectPtr<class AFortItemPreviewPedestal> ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontendLevelScriptActor_GetHeroLoadoutPreviewPedestalActor) == 0x000008, "Wrong alignment on FortFrontendLevelScriptActor_GetHeroLoadoutPreviewPedestalActor");
static_assert(sizeof(FortFrontendLevelScriptActor_GetHeroLoadoutPreviewPedestalActor) == 0x000028, "Wrong size on FortFrontendLevelScriptActor_GetHeroLoadoutPreviewPedestalActor");
static_assert(offsetof(FortFrontendLevelScriptActor_GetHeroLoadoutPreviewPedestalActor, ReturnValue) == 0x000000, "Member 'FortFrontendLevelScriptActor_GetHeroLoadoutPreviewPedestalActor::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIDataConfigurationContext.ArePartyFeaturesEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortUIDataConfigurationContext_ArePartyFeaturesEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIDataConfigurationContext_ArePartyFeaturesEnabled) == 0x000001, "Wrong alignment on FortUIDataConfigurationContext_ArePartyFeaturesEnabled");
static_assert(sizeof(FortUIDataConfigurationContext_ArePartyFeaturesEnabled) == 0x000001, "Wrong size on FortUIDataConfigurationContext_ArePartyFeaturesEnabled");
static_assert(offsetof(FortUIDataConfigurationContext_ArePartyFeaturesEnabled, ReturnValue) == 0x000000, "Member 'FortUIDataConfigurationContext_ArePartyFeaturesEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIDataConfigurationContext.AreSocialFeaturesEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortUIDataConfigurationContext_AreSocialFeaturesEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIDataConfigurationContext_AreSocialFeaturesEnabled) == 0x000001, "Wrong alignment on FortUIDataConfigurationContext_AreSocialFeaturesEnabled");
static_assert(sizeof(FortUIDataConfigurationContext_AreSocialFeaturesEnabled) == 0x000001, "Wrong size on FortUIDataConfigurationContext_AreSocialFeaturesEnabled");
static_assert(offsetof(FortUIDataConfigurationContext_AreSocialFeaturesEnabled, ReturnValue) == 0x000000, "Member 'FortUIDataConfigurationContext_AreSocialFeaturesEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIDataConfigurationContext.GetFrontEndFFSettings
// 0x0530 (0x0530 - 0x0000)
struct FortUIDataConfigurationContext_GetFrontEndFFSettings final
{
public:
	struct FPostProcessSettings                   ReturnValue;                                       // 0x0000(0x0530)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIDataConfigurationContext_GetFrontEndFFSettings) == 0x000010, "Wrong alignment on FortUIDataConfigurationContext_GetFrontEndFFSettings");
static_assert(sizeof(FortUIDataConfigurationContext_GetFrontEndFFSettings) == 0x000530, "Wrong size on FortUIDataConfigurationContext_GetFrontEndFFSettings");
static_assert(offsetof(FortUIDataConfigurationContext_GetFrontEndFFSettings, ReturnValue) == 0x000000, "Member 'FortUIDataConfigurationContext_GetFrontEndFFSettings::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIDataConfigurationContext.GetItemTypesToUseVaultCamera
// 0x0010 (0x0010 - 0x0000)
struct FortUIDataConfigurationContext_GetItemTypesToUseVaultCamera final
{
public:
	TArray<EFortItemType>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIDataConfigurationContext_GetItemTypesToUseVaultCamera) == 0x000008, "Wrong alignment on FortUIDataConfigurationContext_GetItemTypesToUseVaultCamera");
static_assert(sizeof(FortUIDataConfigurationContext_GetItemTypesToUseVaultCamera) == 0x000010, "Wrong size on FortUIDataConfigurationContext_GetItemTypesToUseVaultCamera");
static_assert(offsetof(FortUIDataConfigurationContext_GetItemTypesToUseVaultCamera, ReturnValue) == 0x000000, "Member 'FortUIDataConfigurationContext_GetItemTypesToUseVaultCamera::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIDataConfigurationContext.IsChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortUIDataConfigurationContext_IsChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIDataConfigurationContext_IsChatEnabled) == 0x000001, "Wrong alignment on FortUIDataConfigurationContext_IsChatEnabled");
static_assert(sizeof(FortUIDataConfigurationContext_IsChatEnabled) == 0x000001, "Wrong size on FortUIDataConfigurationContext_IsChatEnabled");
static_assert(offsetof(FortUIDataConfigurationContext_IsChatEnabled, ReturnValue) == 0x000000, "Member 'FortUIDataConfigurationContext_IsChatEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIDataConfigurationContext.IsLimitedToES2Features
// 0x0001 (0x0001 - 0x0000)
struct FortUIDataConfigurationContext_IsLimitedToES2Features final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIDataConfigurationContext_IsLimitedToES2Features) == 0x000001, "Wrong alignment on FortUIDataConfigurationContext_IsLimitedToES2Features");
static_assert(sizeof(FortUIDataConfigurationContext_IsLimitedToES2Features) == 0x000001, "Wrong size on FortUIDataConfigurationContext_IsLimitedToES2Features");
static_assert(offsetof(FortUIDataConfigurationContext_IsLimitedToES2Features, ReturnValue) == 0x000000, "Member 'FortUIDataConfigurationContext_IsLimitedToES2Features::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIDataConfigurationContext.IsQuestVOEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortUIDataConfigurationContext_IsQuestVOEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIDataConfigurationContext_IsQuestVOEnabled) == 0x000001, "Wrong alignment on FortUIDataConfigurationContext_IsQuestVOEnabled");
static_assert(sizeof(FortUIDataConfigurationContext_IsQuestVOEnabled) == 0x000001, "Wrong size on FortUIDataConfigurationContext_IsQuestVOEnabled");
static_assert(offsetof(FortUIDataConfigurationContext_IsQuestVOEnabled, ReturnValue) == 0x000000, "Member 'FortUIDataConfigurationContext_IsQuestVOEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIDataConfigurationContext.UseSpecificPinataWeapon
// 0x0001 (0x0001 - 0x0000)
struct FortUIDataConfigurationContext_UseSpecificPinataWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIDataConfigurationContext_UseSpecificPinataWeapon) == 0x000001, "Wrong alignment on FortUIDataConfigurationContext_UseSpecificPinataWeapon");
static_assert(sizeof(FortUIDataConfigurationContext_UseSpecificPinataWeapon) == 0x000001, "Wrong size on FortUIDataConfigurationContext_UseSpecificPinataWeapon");
static_assert(offsetof(FortUIDataConfigurationContext_UseSpecificPinataWeapon, ReturnValue) == 0x000000, "Member 'FortUIDataConfigurationContext_UseSpecificPinataWeapon::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAbilitySystemContext.RegisterForAttributeChanged
// 0x0040 (0x0040 - 0x0000)
struct FortAbilitySystemContext_RegisterForAttributeChanged final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                ASC;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0010(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Callback;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilitySystemContext_RegisterForAttributeChanged) == 0x000008, "Wrong alignment on FortAbilitySystemContext_RegisterForAttributeChanged");
static_assert(sizeof(FortAbilitySystemContext_RegisterForAttributeChanged) == 0x000040, "Wrong size on FortAbilitySystemContext_RegisterForAttributeChanged");
static_assert(offsetof(FortAbilitySystemContext_RegisterForAttributeChanged, Widget) == 0x000000, "Member 'FortAbilitySystemContext_RegisterForAttributeChanged::Widget' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemContext_RegisterForAttributeChanged, ASC) == 0x000008, "Member 'FortAbilitySystemContext_RegisterForAttributeChanged::ASC' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemContext_RegisterForAttributeChanged, Attribute) == 0x000010, "Member 'FortAbilitySystemContext_RegisterForAttributeChanged::Attribute' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemContext_RegisterForAttributeChanged, Callback) == 0x000030, "Member 'FortAbilitySystemContext_RegisterForAttributeChanged::Callback' has a wrong offset!");

// Function FortniteUI.FortAbilitySystemContext.RemoveDelegatesFromWidget
// 0x0008 (0x0008 - 0x0000)
struct FortAbilitySystemContext_RemoveDelegatesFromWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilitySystemContext_RemoveDelegatesFromWidget) == 0x000008, "Wrong alignment on FortAbilitySystemContext_RemoveDelegatesFromWidget");
static_assert(sizeof(FortAbilitySystemContext_RemoveDelegatesFromWidget) == 0x000008, "Wrong size on FortAbilitySystemContext_RemoveDelegatesFromWidget");
static_assert(offsetof(FortAbilitySystemContext_RemoveDelegatesFromWidget, Widget) == 0x000000, "Member 'FortAbilitySystemContext_RemoveDelegatesFromWidget::Widget' has a wrong offset!");

// Function FortniteUI.FortAbilitySystemContext.HasMatchingGameplayTag
// 0x000C (0x000C - 0x0000)
struct FortAbilitySystemContext_HasMatchingGameplayTag final
{
public:
	struct FGameplayTag                           TagToCheck;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySystemContext_HasMatchingGameplayTag) == 0x000004, "Wrong alignment on FortAbilitySystemContext_HasMatchingGameplayTag");
static_assert(sizeof(FortAbilitySystemContext_HasMatchingGameplayTag) == 0x00000C, "Wrong size on FortAbilitySystemContext_HasMatchingGameplayTag");
static_assert(offsetof(FortAbilitySystemContext_HasMatchingGameplayTag, TagToCheck) == 0x000000, "Member 'FortAbilitySystemContext_HasMatchingGameplayTag::TagToCheck' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemContext_HasMatchingGameplayTag, ReturnValue) == 0x000008, "Member 'FortAbilitySystemContext_HasMatchingGameplayTag::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortWebLoginWidget.DisplayWidget
// 0x0008 (0x0008 - 0x0000)
struct FortWebLoginWidget_DisplayWidget final
{
public:
	class UWidget*                                WebWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWebLoginWidget_DisplayWidget) == 0x000008, "Wrong alignment on FortWebLoginWidget_DisplayWidget");
static_assert(sizeof(FortWebLoginWidget_DisplayWidget) == 0x000008, "Wrong size on FortWebLoginWidget_DisplayWidget");
static_assert(offsetof(FortWebLoginWidget_DisplayWidget, WebWidget) == 0x000000, "Member 'FortWebLoginWidget_DisplayWidget::WebWidget' has a wrong offset!");

// Function FortniteUI.FortDefenderItemTileButton.HandleEquipSlotChanged
// 0x0004 (0x0004 - 0x0000)
struct FortDefenderItemTileButton_HandleEquipSlotChanged final
{
public:
	int32                                         EquipSlot;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderItemTileButton_HandleEquipSlotChanged) == 0x000004, "Wrong alignment on FortDefenderItemTileButton_HandleEquipSlotChanged");
static_assert(sizeof(FortDefenderItemTileButton_HandleEquipSlotChanged) == 0x000004, "Wrong size on FortDefenderItemTileButton_HandleEquipSlotChanged");
static_assert(offsetof(FortDefenderItemTileButton_HandleEquipSlotChanged, EquipSlot) == 0x000000, "Member 'FortDefenderItemTileButton_HandleEquipSlotChanged::EquipSlot' has a wrong offset!");

// Function FortniteUI.FortAccountOptions.ChangeSamsungStoreSetting
// 0x0004 (0x0004 - 0x0000)
struct FortAccountOptions_ChangeSamsungStoreSetting final
{
public:
	int32                                         SettingIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountOptions_ChangeSamsungStoreSetting) == 0x000004, "Wrong alignment on FortAccountOptions_ChangeSamsungStoreSetting");
static_assert(sizeof(FortAccountOptions_ChangeSamsungStoreSetting) == 0x000004, "Wrong size on FortAccountOptions_ChangeSamsungStoreSetting");
static_assert(offsetof(FortAccountOptions_ChangeSamsungStoreSetting, SettingIdx) == 0x000000, "Member 'FortAccountOptions_ChangeSamsungStoreSetting::SettingIdx' has a wrong offset!");

// Function FortniteUI.FortAccountOptions.IsParentalControlLockActive
// 0x0001 (0x0001 - 0x0000)
struct FortAccountOptions_IsParentalControlLockActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountOptions_IsParentalControlLockActive) == 0x000001, "Wrong alignment on FortAccountOptions_IsParentalControlLockActive");
static_assert(sizeof(FortAccountOptions_IsParentalControlLockActive) == 0x000001, "Wrong size on FortAccountOptions_IsParentalControlLockActive");
static_assert(offsetof(FortAccountOptions_IsParentalControlLockActive, ReturnValue) == 0x000000, "Member 'FortAccountOptions_IsParentalControlLockActive::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAccountOptions.LoadSamsungOptions
// 0x0018 (0x0018 - 0x0000)
struct FortAccountOptions_LoadSamsungOptions final
{
public:
	TArray<class FText>                           OutOptions;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentOptionIdx;                                  // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAccountOptions_LoadSamsungOptions) == 0x000008, "Wrong alignment on FortAccountOptions_LoadSamsungOptions");
static_assert(sizeof(FortAccountOptions_LoadSamsungOptions) == 0x000018, "Wrong size on FortAccountOptions_LoadSamsungOptions");
static_assert(offsetof(FortAccountOptions_LoadSamsungOptions, OutOptions) == 0x000000, "Member 'FortAccountOptions_LoadSamsungOptions::OutOptions' has a wrong offset!");
static_assert(offsetof(FortAccountOptions_LoadSamsungOptions, CurrentOptionIdx) == 0x000010, "Member 'FortAccountOptions_LoadSamsungOptions::CurrentOptionIdx' has a wrong offset!");

// Function FortniteUI.FortAccountOptions.SetCanReceiveGifts
// 0x0001 (0x0001 - 0x0000)
struct FortAccountOptions_SetCanReceiveGifts final
{
public:
	bool                                          bInCanReceiveGifts;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountOptions_SetCanReceiveGifts) == 0x000001, "Wrong alignment on FortAccountOptions_SetCanReceiveGifts");
static_assert(sizeof(FortAccountOptions_SetCanReceiveGifts) == 0x000001, "Wrong size on FortAccountOptions_SetCanReceiveGifts");
static_assert(offsetof(FortAccountOptions_SetCanReceiveGifts, bInCanReceiveGifts) == 0x000000, "Member 'FortAccountOptions_SetCanReceiveGifts::bInCanReceiveGifts' has a wrong offset!");

// Function FortniteUI.FortAccountOptions.SetPrivacySettings
// 0x0002 (0x0002 - 0x0000)
struct FortAccountOptions_SetPrivacySettings final
{
public:
	struct FMcpPrivacySettings                    NewPrivacySettings;                                // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountOptions_SetPrivacySettings) == 0x000001, "Wrong alignment on FortAccountOptions_SetPrivacySettings");
static_assert(sizeof(FortAccountOptions_SetPrivacySettings) == 0x000002, "Wrong size on FortAccountOptions_SetPrivacySettings");
static_assert(offsetof(FortAccountOptions_SetPrivacySettings, NewPrivacySettings) == 0x000000, "Member 'FortAccountOptions_SetPrivacySettings::NewPrivacySettings' has a wrong offset!");

// Function FortniteUI.FortAccountOptions.SetRefundRequestText
// 0x0004 (0x0004 - 0x0000)
struct FortAccountOptions_SetRefundRequestText final
{
public:
	int32                                         RefundsRemaining;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountOptions_SetRefundRequestText) == 0x000004, "Wrong alignment on FortAccountOptions_SetRefundRequestText");
static_assert(sizeof(FortAccountOptions_SetRefundRequestText) == 0x000004, "Wrong size on FortAccountOptions_SetRefundRequestText");
static_assert(offsetof(FortAccountOptions_SetRefundRequestText, RefundsRemaining) == 0x000000, "Member 'FortAccountOptions_SetRefundRequestText::RefundsRemaining' has a wrong offset!");

// Function FortniteUI.FortAccountOptions.CanLocalPlayerReceiveGifts
// 0x0001 (0x0001 - 0x0000)
struct FortAccountOptions_CanLocalPlayerReceiveGifts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountOptions_CanLocalPlayerReceiveGifts) == 0x000001, "Wrong alignment on FortAccountOptions_CanLocalPlayerReceiveGifts");
static_assert(sizeof(FortAccountOptions_CanLocalPlayerReceiveGifts) == 0x000001, "Wrong size on FortAccountOptions_CanLocalPlayerReceiveGifts");
static_assert(offsetof(FortAccountOptions_CanLocalPlayerReceiveGifts, ReturnValue) == 0x000000, "Member 'FortAccountOptions_CanLocalPlayerReceiveGifts::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAccountOptions.ShouldShowSamsungStore
// 0x0001 (0x0001 - 0x0000)
struct FortAccountOptions_ShouldShowSamsungStore final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountOptions_ShouldShowSamsungStore) == 0x000001, "Wrong alignment on FortAccountOptions_ShouldShowSamsungStore");
static_assert(sizeof(FortAccountOptions_ShouldShowSamsungStore) == 0x000001, "Wrong size on FortAccountOptions_ShouldShowSamsungStore");
static_assert(offsetof(FortAccountOptions_ShouldShowSamsungStore, ReturnValue) == 0x000000, "Member 'FortAccountOptions_ShouldShowSamsungStore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortBangWrapper_NUI.AsyncPlaySound2D
// 0x0040 (0x0040 - 0x0000)
struct FortBangWrapper_NUI_AsyncPlaySound2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              SoundToLoad;                                       // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBangWrapper_NUI_AsyncPlaySound2D) == 0x000008, "Wrong alignment on FortBangWrapper_NUI_AsyncPlaySound2D");
static_assert(sizeof(FortBangWrapper_NUI_AsyncPlaySound2D) == 0x000040, "Wrong size on FortBangWrapper_NUI_AsyncPlaySound2D");
static_assert(offsetof(FortBangWrapper_NUI_AsyncPlaySound2D, WorldContextObject) == 0x000000, "Member 'FortBangWrapper_NUI_AsyncPlaySound2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortBangWrapper_NUI_AsyncPlaySound2D, SoundToLoad) == 0x000008, "Member 'FortBangWrapper_NUI_AsyncPlaySound2D::SoundToLoad' has a wrong offset!");
static_assert(offsetof(FortBangWrapper_NUI_AsyncPlaySound2D, VolumeMultiplier) == 0x000030, "Member 'FortBangWrapper_NUI_AsyncPlaySound2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FortBangWrapper_NUI_AsyncPlaySound2D, PitchMultiplier) == 0x000034, "Member 'FortBangWrapper_NUI_AsyncPlaySound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(FortBangWrapper_NUI_AsyncPlaySound2D, StartTime) == 0x000038, "Member 'FortBangWrapper_NUI_AsyncPlaySound2D::StartTime' has a wrong offset!");

// Function FortniteUI.FortBangWrapper_NUI.OnBangStateChanged
// 0x0008 (0x0008 - 0x0000)
struct FortBangWrapper_NUI_OnBangStateChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBangWrapper_NUI_OnBangStateChanged) == 0x000004, "Wrong alignment on FortBangWrapper_NUI_OnBangStateChanged");
static_assert(sizeof(FortBangWrapper_NUI_OnBangStateChanged) == 0x000008, "Wrong size on FortBangWrapper_NUI_OnBangStateChanged");
static_assert(offsetof(FortBangWrapper_NUI_OnBangStateChanged, bEnabled) == 0x000000, "Member 'FortBangWrapper_NUI_OnBangStateChanged::bEnabled' has a wrong offset!");
static_assert(offsetof(FortBangWrapper_NUI_OnBangStateChanged, Count) == 0x000004, "Member 'FortBangWrapper_NUI_OnBangStateChanged::Count' has a wrong offset!");

// Function FortniteUI.FortBangWrapper_NUI.OnStartCallout
// 0x000C (0x000C - 0x0000)
struct FortBangWrapper_NUI_OnStartCallout final
{
public:
	class FName                                   TutorialObjectiveName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialType                                 TutorialType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBangWrapper_NUI_OnStartCallout) == 0x000004, "Wrong alignment on FortBangWrapper_NUI_OnStartCallout");
static_assert(sizeof(FortBangWrapper_NUI_OnStartCallout) == 0x00000C, "Wrong size on FortBangWrapper_NUI_OnStartCallout");
static_assert(offsetof(FortBangWrapper_NUI_OnStartCallout, TutorialObjectiveName) == 0x000000, "Member 'FortBangWrapper_NUI_OnStartCallout::TutorialObjectiveName' has a wrong offset!");
static_assert(offsetof(FortBangWrapper_NUI_OnStartCallout, TutorialType) == 0x000008, "Member 'FortBangWrapper_NUI_OnStartCallout::TutorialType' has a wrong offset!");

// Function FortniteUI.FortBangWrapper_NUI.SetBangStateBP
// 0x0008 (0x0008 - 0x0000)
struct FortBangWrapper_NUI_SetBangStateBP final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBangWrapper_NUI_SetBangStateBP) == 0x000004, "Wrong alignment on FortBangWrapper_NUI_SetBangStateBP");
static_assert(sizeof(FortBangWrapper_NUI_SetBangStateBP) == 0x000008, "Wrong size on FortBangWrapper_NUI_SetBangStateBP");
static_assert(offsetof(FortBangWrapper_NUI_SetBangStateBP, bEnabled) == 0x000000, "Member 'FortBangWrapper_NUI_SetBangStateBP::bEnabled' has a wrong offset!");
static_assert(offsetof(FortBangWrapper_NUI_SetBangStateBP, Count) == 0x000004, "Member 'FortBangWrapper_NUI_SetBangStateBP::Count' has a wrong offset!");

// Function FortniteUI.FortBangWrapper_NUI.SetBangType
// 0x0001 (0x0001 - 0x0000)
struct FortBangWrapper_NUI_SetBangType final
{
public:
	EFortBangType                                 NewBangType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBangWrapper_NUI_SetBangType) == 0x000001, "Wrong alignment on FortBangWrapper_NUI_SetBangType");
static_assert(sizeof(FortBangWrapper_NUI_SetBangType) == 0x000001, "Wrong size on FortBangWrapper_NUI_SetBangType");
static_assert(offsetof(FortBangWrapper_NUI_SetBangType, NewBangType) == 0x000000, "Member 'FortBangWrapper_NUI_SetBangType::NewBangType' has a wrong offset!");

// Function FortniteUI.FortBangWrapper_NUI.SetTutorialNameID
// 0x0008 (0x0008 - 0x0000)
struct FortBangWrapper_NUI_SetTutorialNameID final
{
public:
	class FName                                   InTutorialNameID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBangWrapper_NUI_SetTutorialNameID) == 0x000004, "Wrong alignment on FortBangWrapper_NUI_SetTutorialNameID");
static_assert(sizeof(FortBangWrapper_NUI_SetTutorialNameID) == 0x000008, "Wrong size on FortBangWrapper_NUI_SetTutorialNameID");
static_assert(offsetof(FortBangWrapper_NUI_SetTutorialNameID, InTutorialNameID) == 0x000000, "Member 'FortBangWrapper_NUI_SetTutorialNameID::InTutorialNameID' has a wrong offset!");

// Function FortniteUI.FortCreativePublishOptions.CheckpointRestoreStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCreativePublishOptions_CheckpointRestoreStateChanged final
{
public:
	EBackupSaveState                              SaveState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishOptions_CheckpointRestoreStateChanged) == 0x000001, "Wrong alignment on FortCreativePublishOptions_CheckpointRestoreStateChanged");
static_assert(sizeof(FortCreativePublishOptions_CheckpointRestoreStateChanged) == 0x000001, "Wrong size on FortCreativePublishOptions_CheckpointRestoreStateChanged");
static_assert(offsetof(FortCreativePublishOptions_CheckpointRestoreStateChanged, SaveState) == 0x000000, "Member 'FortCreativePublishOptions_CheckpointRestoreStateChanged::SaveState' has a wrong offset!");

// Function FortniteUI.FortCreativePublishOptions.CheckpointSaveStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCreativePublishOptions_CheckpointSaveStateChanged final
{
public:
	EBackupSaveState                              SaveState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishOptions_CheckpointSaveStateChanged) == 0x000001, "Wrong alignment on FortCreativePublishOptions_CheckpointSaveStateChanged");
static_assert(sizeof(FortCreativePublishOptions_CheckpointSaveStateChanged) == 0x000001, "Wrong size on FortCreativePublishOptions_CheckpointSaveStateChanged");
static_assert(offsetof(FortCreativePublishOptions_CheckpointSaveStateChanged, SaveState) == 0x000000, "Member 'FortCreativePublishOptions_CheckpointSaveStateChanged::SaveState' has a wrong offset!");

// Function FortniteUI.FortCreativePublishOptions.OnBackupMyIsland
// 0x0001 (0x0001 - 0x0000)
struct FortCreativePublishOptions_OnBackupMyIsland final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishOptions_OnBackupMyIsland) == 0x000001, "Wrong alignment on FortCreativePublishOptions_OnBackupMyIsland");
static_assert(sizeof(FortCreativePublishOptions_OnBackupMyIsland) == 0x000001, "Wrong size on FortCreativePublishOptions_OnBackupMyIsland");
static_assert(offsetof(FortCreativePublishOptions_OnBackupMyIsland, bSuccess) == 0x000000, "Member 'FortCreativePublishOptions_OnBackupMyIsland::bSuccess' has a wrong offset!");

// Function FortniteUI.FortCreativePublishOptions.OnRestoreMyIslandFromBackup
// 0x0001 (0x0001 - 0x0000)
struct FortCreativePublishOptions_OnRestoreMyIslandFromBackup final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishOptions_OnRestoreMyIslandFromBackup) == 0x000001, "Wrong alignment on FortCreativePublishOptions_OnRestoreMyIslandFromBackup");
static_assert(sizeof(FortCreativePublishOptions_OnRestoreMyIslandFromBackup) == 0x000001, "Wrong size on FortCreativePublishOptions_OnRestoreMyIslandFromBackup");
static_assert(offsetof(FortCreativePublishOptions_OnRestoreMyIslandFromBackup, bSuccess) == 0x000000, "Member 'FortCreativePublishOptions_OnRestoreMyIslandFromBackup::bSuccess' has a wrong offset!");

// Function FortniteUI.FortCreativePublishOptions.OnRestoreStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCreativePublishOptions_OnRestoreStateChanged final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishOptions_OnRestoreStateChanged) == 0x000001, "Wrong alignment on FortCreativePublishOptions_OnRestoreStateChanged");
static_assert(sizeof(FortCreativePublishOptions_OnRestoreStateChanged) == 0x000001, "Wrong size on FortCreativePublishOptions_OnRestoreStateChanged");
static_assert(offsetof(FortCreativePublishOptions_OnRestoreStateChanged, bReady) == 0x000000, "Member 'FortCreativePublishOptions_OnRestoreStateChanged::bReady' has a wrong offset!");

// Function FortniteUI.FortCreativePublishOptions.OnSaveStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortCreativePublishOptions_OnSaveStateChanged final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishOptions_OnSaveStateChanged) == 0x000001, "Wrong alignment on FortCreativePublishOptions_OnSaveStateChanged");
static_assert(sizeof(FortCreativePublishOptions_OnSaveStateChanged) == 0x000001, "Wrong size on FortCreativePublishOptions_OnSaveStateChanged");
static_assert(offsetof(FortCreativePublishOptions_OnSaveStateChanged, bSuccess) == 0x000000, "Member 'FortCreativePublishOptions_OnSaveStateChanged::bSuccess' has a wrong offset!");

// Function FortniteUI.FortCreativePublishOptions.UpdatePermissions
// 0x0001 (0x0001 - 0x0000)
struct FortCreativePublishOptions_UpdatePermissions final
{
public:
	EFortCreativePlotPermission                   Permissions;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishOptions_UpdatePermissions) == 0x000001, "Wrong alignment on FortCreativePublishOptions_UpdatePermissions");
static_assert(sizeof(FortCreativePublishOptions_UpdatePermissions) == 0x000001, "Wrong size on FortCreativePublishOptions_UpdatePermissions");
static_assert(offsetof(FortCreativePublishOptions_UpdatePermissions, Permissions) == 0x000000, "Member 'FortCreativePublishOptions_UpdatePermissions::Permissions' has a wrong offset!");

// Function FortniteUI.FortCreativePublishOptions.UpdateTimeSinceLastBackup
// 0x0008 (0x0008 - 0x0000)
struct FortCreativePublishOptions_UpdateTimeSinceLastBackup final
{
public:
	struct FDateTime                              LastBackup;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishOptions_UpdateTimeSinceLastBackup) == 0x000008, "Wrong alignment on FortCreativePublishOptions_UpdateTimeSinceLastBackup");
static_assert(sizeof(FortCreativePublishOptions_UpdateTimeSinceLastBackup) == 0x000008, "Wrong size on FortCreativePublishOptions_UpdateTimeSinceLastBackup");
static_assert(offsetof(FortCreativePublishOptions_UpdateTimeSinceLastBackup, LastBackup) == 0x000000, "Member 'FortCreativePublishOptions_UpdateTimeSinceLastBackup::LastBackup' has a wrong offset!");

// Function FortniteUI.FortAccountPinLinkingWindow.PinCodeIssue
// 0x0030 (0x0030 - 0x0000)
struct FortAccountPinLinkingWindow_PinCodeIssue final
{
public:
	class FText                                   ErrorMessage;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InfoText;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountPinLinkingWindow_PinCodeIssue) == 0x000008, "Wrong alignment on FortAccountPinLinkingWindow_PinCodeIssue");
static_assert(sizeof(FortAccountPinLinkingWindow_PinCodeIssue) == 0x000030, "Wrong size on FortAccountPinLinkingWindow_PinCodeIssue");
static_assert(offsetof(FortAccountPinLinkingWindow_PinCodeIssue, ErrorMessage) == 0x000000, "Member 'FortAccountPinLinkingWindow_PinCodeIssue::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FortAccountPinLinkingWindow_PinCodeIssue, InfoText) == 0x000018, "Member 'FortAccountPinLinkingWindow_PinCodeIssue::InfoText' has a wrong offset!");

// Function FortniteUI.FortAccountPinLinkingWindow.SetPinGrantInfo
// 0x0038 (0x0038 - 0x0000)
struct FortAccountPinLinkingWindow_SetPinGrantInfo final
{
public:
	class FString                                 PinCode;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActivationURL;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InfoText;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountPinLinkingWindow_SetPinGrantInfo) == 0x000008, "Wrong alignment on FortAccountPinLinkingWindow_SetPinGrantInfo");
static_assert(sizeof(FortAccountPinLinkingWindow_SetPinGrantInfo) == 0x000038, "Wrong size on FortAccountPinLinkingWindow_SetPinGrantInfo");
static_assert(offsetof(FortAccountPinLinkingWindow_SetPinGrantInfo, PinCode) == 0x000000, "Member 'FortAccountPinLinkingWindow_SetPinGrantInfo::PinCode' has a wrong offset!");
static_assert(offsetof(FortAccountPinLinkingWindow_SetPinGrantInfo, ActivationURL) == 0x000010, "Member 'FortAccountPinLinkingWindow_SetPinGrantInfo::ActivationURL' has a wrong offset!");
static_assert(offsetof(FortAccountPinLinkingWindow_SetPinGrantInfo, InfoText) == 0x000020, "Member 'FortAccountPinLinkingWindow_SetPinGrantInfo::InfoText' has a wrong offset!");

// Function FortniteUI.FortAccountPinLinkingWindow.UpdateExpiringTime
// 0x0004 (0x0004 - 0x0000)
struct FortAccountPinLinkingWindow_UpdateExpiringTime final
{
public:
	int32                                         RemainingTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountPinLinkingWindow_UpdateExpiringTime) == 0x000004, "Wrong alignment on FortAccountPinLinkingWindow_UpdateExpiringTime");
static_assert(sizeof(FortAccountPinLinkingWindow_UpdateExpiringTime) == 0x000004, "Wrong size on FortAccountPinLinkingWindow_UpdateExpiringTime");
static_assert(offsetof(FortAccountPinLinkingWindow_UpdateExpiringTime, RemainingTime) == 0x000000, "Member 'FortAccountPinLinkingWindow_UpdateExpiringTime::RemainingTime' has a wrong offset!");

// Function FortniteUI.FortAccountStatsContext.CanShowAccountStats
// 0x0001 (0x0001 - 0x0000)
struct FortAccountStatsContext_CanShowAccountStats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountStatsContext_CanShowAccountStats) == 0x000001, "Wrong alignment on FortAccountStatsContext_CanShowAccountStats");
static_assert(sizeof(FortAccountStatsContext_CanShowAccountStats) == 0x000001, "Wrong size on FortAccountStatsContext_CanShowAccountStats");
static_assert(offsetof(FortAccountStatsContext_CanShowAccountStats, ReturnValue) == 0x000000, "Member 'FortAccountStatsContext_CanShowAccountStats::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderSlotItemPicker.OnCurrentSortTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortDefenderSlotItemPicker_OnCurrentSortTypeChanged final
{
public:
	EInventoryContentSortType                     SortType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderSlotItemPicker_OnCurrentSortTypeChanged) == 0x000001, "Wrong alignment on FortDefenderSlotItemPicker_OnCurrentSortTypeChanged");
static_assert(sizeof(FortDefenderSlotItemPicker_OnCurrentSortTypeChanged) == 0x000001, "Wrong size on FortDefenderSlotItemPicker_OnCurrentSortTypeChanged");
static_assert(offsetof(FortDefenderSlotItemPicker_OnCurrentSortTypeChanged, SortType) == 0x000000, "Member 'FortDefenderSlotItemPicker_OnCurrentSortTypeChanged::SortType' has a wrong offset!");

// Function FortniteUI.FortDefenderSlotItemPicker.PopulateDefenderSlotItems
// 0x0008 (0x0008 - 0x0000)
struct FortDefenderSlotItemPicker_PopulateDefenderSlotItems final
{
public:
	const class UFortDefenderItem*                DefenderItem;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderSlotItemPicker_PopulateDefenderSlotItems) == 0x000008, "Wrong alignment on FortDefenderSlotItemPicker_PopulateDefenderSlotItems");
static_assert(sizeof(FortDefenderSlotItemPicker_PopulateDefenderSlotItems) == 0x000008, "Wrong size on FortDefenderSlotItemPicker_PopulateDefenderSlotItems");
static_assert(offsetof(FortDefenderSlotItemPicker_PopulateDefenderSlotItems, DefenderItem) == 0x000000, "Member 'FortDefenderSlotItemPicker_PopulateDefenderSlotItems::DefenderItem' has a wrong offset!");

// Function FortniteUI.FortDefenderSlotItemPicker.SetSortType
// 0x0001 (0x0001 - 0x0000)
struct FortDefenderSlotItemPicker_SetSortType final
{
public:
	EInventoryContentSortType                     SortType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderSlotItemPicker_SetSortType) == 0x000001, "Wrong alignment on FortDefenderSlotItemPicker_SetSortType");
static_assert(sizeof(FortDefenderSlotItemPicker_SetSortType) == 0x000001, "Wrong size on FortDefenderSlotItemPicker_SetSortType");
static_assert(offsetof(FortDefenderSlotItemPicker_SetSortType, SortType) == 0x000000, "Member 'FortDefenderSlotItemPicker_SetSortType::SortType' has a wrong offset!");

// Function FortniteUI.FortAccountWidgetBase.HandleCurrentlyViewedAccountInfoChanged
// 0x0034 (0x0034 - 0x0000)
struct FortAccountWidgetBase_HandleCurrentlyViewedAccountInfoChanged final
{
public:
	struct FFortPublicAccountInfo                 NewInfo;                                           // 0x0000(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountWidgetBase_HandleCurrentlyViewedAccountInfoChanged) == 0x000004, "Wrong alignment on FortAccountWidgetBase_HandleCurrentlyViewedAccountInfoChanged");
static_assert(sizeof(FortAccountWidgetBase_HandleCurrentlyViewedAccountInfoChanged) == 0x000034, "Wrong size on FortAccountWidgetBase_HandleCurrentlyViewedAccountInfoChanged");
static_assert(offsetof(FortAccountWidgetBase_HandleCurrentlyViewedAccountInfoChanged, NewInfo) == 0x000000, "Member 'FortAccountWidgetBase_HandleCurrentlyViewedAccountInfoChanged::NewInfo' has a wrong offset!");

// Function FortniteUI.FortAccountWidgetBase.OnAccountInfoChanged
// 0x0034 (0x0034 - 0x0000)
struct FortAccountWidgetBase_OnAccountInfoChanged final
{
public:
	struct FFortPublicAccountInfo                 Result;                                            // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountWidgetBase_OnAccountInfoChanged) == 0x000004, "Wrong alignment on FortAccountWidgetBase_OnAccountInfoChanged");
static_assert(sizeof(FortAccountWidgetBase_OnAccountInfoChanged) == 0x000034, "Wrong size on FortAccountWidgetBase_OnAccountInfoChanged");
static_assert(offsetof(FortAccountWidgetBase_OnAccountInfoChanged, Result) == 0x000000, "Member 'FortAccountWidgetBase_OnAccountInfoChanged::Result' has a wrong offset!");

// Function FortniteUI.FortAccountWidgetBase.GetNextSeasonChaseReward
// 0x0050 (0x0050 - 0x0000)
struct FortAccountWidgetBase_GetNextSeasonChaseReward final
{
public:
	struct FFortItemQuantityPair                  Reward;                                            // 0x0000(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         RewardLevel;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartingLevel;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAccountWidgetBase_GetNextSeasonChaseReward) == 0x000008, "Wrong alignment on FortAccountWidgetBase_GetNextSeasonChaseReward");
static_assert(sizeof(FortAccountWidgetBase_GetNextSeasonChaseReward) == 0x000050, "Wrong size on FortAccountWidgetBase_GetNextSeasonChaseReward");
static_assert(offsetof(FortAccountWidgetBase_GetNextSeasonChaseReward, Reward) == 0x000000, "Member 'FortAccountWidgetBase_GetNextSeasonChaseReward::Reward' has a wrong offset!");
static_assert(offsetof(FortAccountWidgetBase_GetNextSeasonChaseReward, RewardLevel) == 0x000040, "Member 'FortAccountWidgetBase_GetNextSeasonChaseReward::RewardLevel' has a wrong offset!");
static_assert(offsetof(FortAccountWidgetBase_GetNextSeasonChaseReward, StartingLevel) == 0x000044, "Member 'FortAccountWidgetBase_GetNextSeasonChaseReward::StartingLevel' has a wrong offset!");
static_assert(offsetof(FortAccountWidgetBase_GetNextSeasonChaseReward, ReturnValue) == 0x000048, "Member 'FortAccountWidgetBase_GetNextSeasonChaseReward::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAccountWidgetBase.GetNextSeasonReward
// 0x0048 (0x0048 - 0x0000)
struct FortAccountWidgetBase_GetNextSeasonReward final
{
public:
	struct FFortItemQuantityPair                  Reward;                                            // 0x0000(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         RewardLevel;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAccountWidgetBase_GetNextSeasonReward) == 0x000008, "Wrong alignment on FortAccountWidgetBase_GetNextSeasonReward");
static_assert(sizeof(FortAccountWidgetBase_GetNextSeasonReward) == 0x000048, "Wrong size on FortAccountWidgetBase_GetNextSeasonReward");
static_assert(offsetof(FortAccountWidgetBase_GetNextSeasonReward, Reward) == 0x000000, "Member 'FortAccountWidgetBase_GetNextSeasonReward::Reward' has a wrong offset!");
static_assert(offsetof(FortAccountWidgetBase_GetNextSeasonReward, RewardLevel) == 0x000040, "Member 'FortAccountWidgetBase_GetNextSeasonReward::RewardLevel' has a wrong offset!");
static_assert(offsetof(FortAccountWidgetBase_GetNextSeasonReward, ReturnValue) == 0x000044, "Member 'FortAccountWidgetBase_GetNextSeasonReward::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAccountWidgetBase.GetSeasonBannerInfo
// 0x0058 (0x0058 - 0x0000)
struct FortAccountWidgetBase_GetSeasonBannerInfo final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAthenaSeasonBannerLevel               ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountWidgetBase_GetSeasonBannerInfo) == 0x000008, "Wrong alignment on FortAccountWidgetBase_GetSeasonBannerInfo");
static_assert(sizeof(FortAccountWidgetBase_GetSeasonBannerInfo) == 0x000058, "Wrong size on FortAccountWidgetBase_GetSeasonBannerInfo");
static_assert(offsetof(FortAccountWidgetBase_GetSeasonBannerInfo, Level) == 0x000000, "Member 'FortAccountWidgetBase_GetSeasonBannerInfo::Level' has a wrong offset!");
static_assert(offsetof(FortAccountWidgetBase_GetSeasonBannerInfo, ReturnValue) == 0x000008, "Member 'FortAccountWidgetBase_GetSeasonBannerInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortBorderStyleList.GetBorderStyles
// 0x0010 (0x0010 - 0x0000)
struct FortBorderStyleList_GetBorderStyles final
{
public:
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBorderStyleList_GetBorderStyles) == 0x000008, "Wrong alignment on FortBorderStyleList_GetBorderStyles");
static_assert(sizeof(FortBorderStyleList_GetBorderStyles) == 0x000010, "Wrong size on FortBorderStyleList_GetBorderStyles");
static_assert(offsetof(FortBorderStyleList_GetBorderStyles, ReturnValue) == 0x000000, "Member 'FortBorderStyleList_GetBorderStyles::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTravelLogMap.InitializeFromTravelRecord
// 0x0010 (0x0010 - 0x0000)
struct FortTravelLogMap_InitializeFromTravelRecord final
{
public:
	struct FAthenaTravelRecord                    Record;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTravelLogMap_InitializeFromTravelRecord) == 0x000008, "Wrong alignment on FortTravelLogMap_InitializeFromTravelRecord");
static_assert(sizeof(FortTravelLogMap_InitializeFromTravelRecord) == 0x000010, "Wrong size on FortTravelLogMap_InitializeFromTravelRecord");
static_assert(offsetof(FortTravelLogMap_InitializeFromTravelRecord, Record) == 0x000000, "Member 'FortTravelLogMap_InitializeFromTravelRecord::Record' has a wrong offset!");

// Function FortniteUI.FortSquadSelectorButton.SetIdOfSquadToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSelectorButton_SetIdOfSquadToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSelectorButton_SetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadSelectorButton_SetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadSelectorButton_SetIdOfSquadToManageBP) == 0x000008, "Wrong size on FortSquadSelectorButton_SetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadSelectorButton_SetIdOfSquadToManageBP, SquadId) == 0x000000, "Member 'FortSquadSelectorButton_SetIdOfSquadToManageBP::SquadId' has a wrong offset!");

// Function FortniteUI.FortSquadSelectorButton.GetIdOfSquadToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSelectorButton_GetIdOfSquadToManageBP final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSelectorButton_GetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadSelectorButton_GetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadSelectorButton_GetIdOfSquadToManageBP) == 0x000008, "Wrong size on FortSquadSelectorButton_GetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadSelectorButton_GetIdOfSquadToManageBP, ReturnValue) == 0x000000, "Member 'FortSquadSelectorButton_GetIdOfSquadToManageBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSelectorButton.TryGetStaticSquadDataBP
// 0x0090 (0x0090 - 0x0000)
struct FortSquadSelectorButton_TryGetStaticSquadDataBP final
{
public:
	struct FHomebaseSquad                         OutSquadData;                                      // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSelectorButton_TryGetStaticSquadDataBP) == 0x000008, "Wrong alignment on FortSquadSelectorButton_TryGetStaticSquadDataBP");
static_assert(sizeof(FortSquadSelectorButton_TryGetStaticSquadDataBP) == 0x000090, "Wrong size on FortSquadSelectorButton_TryGetStaticSquadDataBP");
static_assert(offsetof(FortSquadSelectorButton_TryGetStaticSquadDataBP, OutSquadData) == 0x000000, "Member 'FortSquadSelectorButton_TryGetStaticSquadDataBP::OutSquadData' has a wrong offset!");
static_assert(offsetof(FortSquadSelectorButton_TryGetStaticSquadDataBP, ReturnValue) == 0x000088, "Member 'FortSquadSelectorButton_TryGetStaticSquadDataBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderSquadSelectorButton.TryGetPowerLevel
// 0x0008 (0x0008 - 0x0000)
struct FortDefenderSquadSelectorButton_TryGetPowerLevel final
{
public:
	int32                                         OutPowerLevel;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDefenderSquadSelectorButton_TryGetPowerLevel) == 0x000004, "Wrong alignment on FortDefenderSquadSelectorButton_TryGetPowerLevel");
static_assert(sizeof(FortDefenderSquadSelectorButton_TryGetPowerLevel) == 0x000008, "Wrong size on FortDefenderSquadSelectorButton_TryGetPowerLevel");
static_assert(offsetof(FortDefenderSquadSelectorButton_TryGetPowerLevel, OutPowerLevel) == 0x000000, "Member 'FortDefenderSquadSelectorButton_TryGetPowerLevel::OutPowerLevel' has a wrong offset!");
static_assert(offsetof(FortDefenderSquadSelectorButton_TryGetPowerLevel, ReturnValue) == 0x000004, "Member 'FortDefenderSquadSelectorButton_TryGetPowerLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderSquadSelectorButton.TryGetTheaterUniqueId
// 0x0018 (0x0018 - 0x0000)
struct FortDefenderSquadSelectorButton_TryGetTheaterUniqueId final
{
public:
	class FString                                 OutTheaterUniqueId;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutIsUnlocked;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDefenderSquadSelectorButton_TryGetTheaterUniqueId) == 0x000008, "Wrong alignment on FortDefenderSquadSelectorButton_TryGetTheaterUniqueId");
static_assert(sizeof(FortDefenderSquadSelectorButton_TryGetTheaterUniqueId) == 0x000018, "Wrong size on FortDefenderSquadSelectorButton_TryGetTheaterUniqueId");
static_assert(offsetof(FortDefenderSquadSelectorButton_TryGetTheaterUniqueId, OutTheaterUniqueId) == 0x000000, "Member 'FortDefenderSquadSelectorButton_TryGetTheaterUniqueId::OutTheaterUniqueId' has a wrong offset!");
static_assert(offsetof(FortDefenderSquadSelectorButton_TryGetTheaterUniqueId, OutIsUnlocked) == 0x000010, "Member 'FortDefenderSquadSelectorButton_TryGetTheaterUniqueId::OutIsUnlocked' has a wrong offset!");
static_assert(offsetof(FortDefenderSquadSelectorButton_TryGetTheaterUniqueId, ReturnValue) == 0x000011, "Member 'FortDefenderSquadSelectorButton_TryGetTheaterUniqueId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortActivityBrowserListView.HandleSelectedTileChanged
// 0x0008 (0x0008 - 0x0000)
struct FortActivityBrowserListView_HandleSelectedTileChanged final
{
public:
	class UCommonButton*                          SelectedTile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActivityBrowserListView_HandleSelectedTileChanged) == 0x000008, "Wrong alignment on FortActivityBrowserListView_HandleSelectedTileChanged");
static_assert(sizeof(FortActivityBrowserListView_HandleSelectedTileChanged) == 0x000008, "Wrong size on FortActivityBrowserListView_HandleSelectedTileChanged");
static_assert(offsetof(FortActivityBrowserListView_HandleSelectedTileChanged, SelectedTile) == 0x000000, "Member 'FortActivityBrowserListView_HandleSelectedTileChanged::SelectedTile' has a wrong offset!");

// Function FortniteUI.FortUIMessageManager.AddMessageItem
// 0x0028 (0x0028 - 0x0000)
struct FortUIMessageManager_AddMessageItem final
{
public:
	TSubclassOf<class UFortUIMessageItemWidget>   MessageItemClass;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MessageID;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUIMessageItemWidget*               ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIMessageManager_AddMessageItem) == 0x000008, "Wrong alignment on FortUIMessageManager_AddMessageItem");
static_assert(sizeof(FortUIMessageManager_AddMessageItem) == 0x000028, "Wrong size on FortUIMessageManager_AddMessageItem");
static_assert(offsetof(FortUIMessageManager_AddMessageItem, MessageItemClass) == 0x000000, "Member 'FortUIMessageManager_AddMessageItem::MessageItemClass' has a wrong offset!");
static_assert(offsetof(FortUIMessageManager_AddMessageItem, OwningPlayer) == 0x000008, "Member 'FortUIMessageManager_AddMessageItem::OwningPlayer' has a wrong offset!");
static_assert(offsetof(FortUIMessageManager_AddMessageItem, MessageID) == 0x000010, "Member 'FortUIMessageManager_AddMessageItem::MessageID' has a wrong offset!");
static_assert(offsetof(FortUIMessageManager_AddMessageItem, StackCount) == 0x000018, "Member 'FortUIMessageManager_AddMessageItem::StackCount' has a wrong offset!");
static_assert(offsetof(FortUIMessageManager_AddMessageItem, ReturnValue) == 0x000020, "Member 'FortUIMessageManager_AddMessageItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIMessageManager.GetNextMessageInQueue
// 0x0008 (0x0008 - 0x0000)
struct FortUIMessageManager_GetNextMessageInQueue final
{
public:
	class UFortUIMessageItemWidget*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIMessageManager_GetNextMessageInQueue) == 0x000008, "Wrong alignment on FortUIMessageManager_GetNextMessageInQueue");
static_assert(sizeof(FortUIMessageManager_GetNextMessageInQueue) == 0x000008, "Wrong size on FortUIMessageManager_GetNextMessageInQueue");
static_assert(offsetof(FortUIMessageManager_GetNextMessageInQueue, ReturnValue) == 0x000000, "Member 'FortUIMessageManager_GetNextMessageInQueue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIMessageManager.HandleMessageDisplayed
// 0x0008 (0x0008 - 0x0000)
struct FortUIMessageManager_HandleMessageDisplayed final
{
public:
	class UFortUIMessageItemWidget*               MessageItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIMessageManager_HandleMessageDisplayed) == 0x000008, "Wrong alignment on FortUIMessageManager_HandleMessageDisplayed");
static_assert(sizeof(FortUIMessageManager_HandleMessageDisplayed) == 0x000008, "Wrong size on FortUIMessageManager_HandleMessageDisplayed");
static_assert(offsetof(FortUIMessageManager_HandleMessageDisplayed, MessageItem) == 0x000000, "Member 'FortUIMessageManager_HandleMessageDisplayed::MessageItem' has a wrong offset!");

// Function FortniteUI.FortUIMessageManager.HandleMessageRemoved
// 0x0008 (0x0008 - 0x0000)
struct FortUIMessageManager_HandleMessageRemoved final
{
public:
	class UFortUIMessageItemWidget*               MessageItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIMessageManager_HandleMessageRemoved) == 0x000008, "Wrong alignment on FortUIMessageManager_HandleMessageRemoved");
static_assert(sizeof(FortUIMessageManager_HandleMessageRemoved) == 0x000008, "Wrong size on FortUIMessageManager_HandleMessageRemoved");
static_assert(offsetof(FortUIMessageManager_HandleMessageRemoved, MessageItem) == 0x000000, "Member 'FortUIMessageManager_HandleMessageRemoved::MessageItem' has a wrong offset!");

// Function FortniteUI.FortUIMessageManager.GetNumDisplayedItems
// 0x0004 (0x0004 - 0x0000)
struct FortUIMessageManager_GetNumDisplayedItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIMessageManager_GetNumDisplayedItems) == 0x000004, "Wrong alignment on FortUIMessageManager_GetNumDisplayedItems");
static_assert(sizeof(FortUIMessageManager_GetNumDisplayedItems) == 0x000004, "Wrong size on FortUIMessageManager_GetNumDisplayedItems");
static_assert(offsetof(FortUIMessageManager_GetNumDisplayedItems, ReturnValue) == 0x000000, "Member 'FortUIMessageManager_GetNumDisplayedItems::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortActorCanvas.AddActorIndicator
// 0x0010 (0x0010 - 0x0000)
struct FortActorCanvas_AddActorIndicator final
{
public:
	class UFortActorIndicatorWidget*              Indicator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortActorCanvasSlot*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorCanvas_AddActorIndicator) == 0x000008, "Wrong alignment on FortActorCanvas_AddActorIndicator");
static_assert(sizeof(FortActorCanvas_AddActorIndicator) == 0x000010, "Wrong size on FortActorCanvas_AddActorIndicator");
static_assert(offsetof(FortActorCanvas_AddActorIndicator, Indicator) == 0x000000, "Member 'FortActorCanvas_AddActorIndicator::Indicator' has a wrong offset!");
static_assert(offsetof(FortActorCanvas_AddActorIndicator, ReturnValue) == 0x000008, "Member 'FortActorCanvas_AddActorIndicator::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortActorCanvas.OnHUDElementVisibilityChanged
// 0x0020 (0x0020 - 0x0000)
struct FortActorCanvas_OnHUDElementVisibilityChanged final
{
public:
	struct FGameplayTagContainer                  HiddenHUDElementTags;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorCanvas_OnHUDElementVisibilityChanged) == 0x000008, "Wrong alignment on FortActorCanvas_OnHUDElementVisibilityChanged");
static_assert(sizeof(FortActorCanvas_OnHUDElementVisibilityChanged) == 0x000020, "Wrong size on FortActorCanvas_OnHUDElementVisibilityChanged");
static_assert(offsetof(FortActorCanvas_OnHUDElementVisibilityChanged, HiddenHUDElementTags) == 0x000000, "Member 'FortActorCanvas_OnHUDElementVisibilityChanged::HiddenHUDElementTags' has a wrong offset!");

// Function FortniteUI.FortSocialPanel.IsAnySlideOutMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct FortSocialPanel_IsAnySlideOutMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialPanel_IsAnySlideOutMenuOpen) == 0x000001, "Wrong alignment on FortSocialPanel_IsAnySlideOutMenuOpen");
static_assert(sizeof(FortSocialPanel_IsAnySlideOutMenuOpen) == 0x000001, "Wrong size on FortSocialPanel_IsAnySlideOutMenuOpen");
static_assert(offsetof(FortSocialPanel_IsAnySlideOutMenuOpen, ReturnValue) == 0x000000, "Member 'FortSocialPanel_IsAnySlideOutMenuOpen::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortActorCanvasSlot.SetCanAutoRemove
// 0x0001 (0x0001 - 0x0000)
struct FortActorCanvasSlot_SetCanAutoRemove final
{
public:
	bool                                          bAllowAutoRemove;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorCanvasSlot_SetCanAutoRemove) == 0x000001, "Wrong alignment on FortActorCanvasSlot_SetCanAutoRemove");
static_assert(sizeof(FortActorCanvasSlot_SetCanAutoRemove) == 0x000001, "Wrong size on FortActorCanvasSlot_SetCanAutoRemove");
static_assert(offsetof(FortActorCanvasSlot_SetCanAutoRemove, bAllowAutoRemove) == 0x000000, "Member 'FortActorCanvasSlot_SetCanAutoRemove::bAllowAutoRemove' has a wrong offset!");

// Function FortniteUI.FortActorCanvasSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct FortActorCanvasSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorCanvasSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on FortActorCanvasSlot_SetHorizontalAlignment");
static_assert(sizeof(FortActorCanvasSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on FortActorCanvasSlot_SetHorizontalAlignment");
static_assert(offsetof(FortActorCanvasSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'FortActorCanvasSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function FortniteUI.FortActorCanvasSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct FortActorCanvasSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortActorCanvasSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on FortActorCanvasSlot_SetVerticalAlignment");
static_assert(sizeof(FortActorCanvasSlot_SetVerticalAlignment) == 0x000001, "Wrong size on FortActorCanvasSlot_SetVerticalAlignment");
static_assert(offsetof(FortActorCanvasSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'FortActorCanvasSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function FortniteUI.FortDisplayNameWidget.HandleTextChanged
// 0x0018 (0x0018 - 0x0000)
struct FortDisplayNameWidget_HandleTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDisplayNameWidget_HandleTextChanged) == 0x000008, "Wrong alignment on FortDisplayNameWidget_HandleTextChanged");
static_assert(sizeof(FortDisplayNameWidget_HandleTextChanged) == 0x000018, "Wrong size on FortDisplayNameWidget_HandleTextChanged");
static_assert(offsetof(FortDisplayNameWidget_HandleTextChanged, Text) == 0x000000, "Member 'FortDisplayNameWidget_HandleTextChanged::Text' has a wrong offset!");

// Function FortniteUI.FortAlterationButtonWidget.Setup
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationButtonWidget_Setup final
{
public:
	class UFortAlterationInfo*                    InAlterationInfo;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationButtonWidget_Setup) == 0x000008, "Wrong alignment on FortAlterationButtonWidget_Setup");
static_assert(sizeof(FortAlterationButtonWidget_Setup) == 0x000008, "Wrong size on FortAlterationButtonWidget_Setup");
static_assert(offsetof(FortAlterationButtonWidget_Setup, InAlterationInfo) == 0x000000, "Member 'FortAlterationButtonWidget_Setup::InAlterationInfo' has a wrong offset!");

// Function FortniteUI.FortAlterationButtonWidget.GetAlterationInfo
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationButtonWidget_GetAlterationInfo final
{
public:
	class UFortAlterationInfo*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationButtonWidget_GetAlterationInfo) == 0x000008, "Wrong alignment on FortAlterationButtonWidget_GetAlterationInfo");
static_assert(sizeof(FortAlterationButtonWidget_GetAlterationInfo) == 0x000008, "Wrong size on FortAlterationButtonWidget_GetAlterationInfo");
static_assert(offsetof(FortAlterationButtonWidget_GetAlterationInfo, ReturnValue) == 0x000000, "Member 'FortAlterationButtonWidget_GetAlterationInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.CreateUIStateTrigger
// 0x0018 (0x0018 - 0x0000)
struct FortUIManagerWidget_NUI_CreateUIStateTrigger final
{
public:
	TSubclassOf<class UFortUIStateTrigger>        Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortUIStateTrigger*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_CreateUIStateTrigger) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_CreateUIStateTrigger");
static_assert(sizeof(FortUIManagerWidget_NUI_CreateUIStateTrigger) == 0x000018, "Wrong size on FortUIManagerWidget_NUI_CreateUIStateTrigger");
static_assert(offsetof(FortUIManagerWidget_NUI_CreateUIStateTrigger, Param_Class) == 0x000000, "Member 'FortUIManagerWidget_NUI_CreateUIStateTrigger::Param_Class' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_CreateUIStateTrigger, WorldContextObject) == 0x000008, "Member 'FortUIManagerWidget_NUI_CreateUIStateTrigger::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_CreateUIStateTrigger, ReturnValue) == 0x000010, "Member 'FortUIManagerWidget_NUI_CreateUIStateTrigger::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.GetUIManagerWidget
// 0x0010 (0x0010 - 0x0000)
struct FortUIManagerWidget_NUI_GetUIManagerWidget final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortUIManagerWidget_NUI*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_GetUIManagerWidget) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_GetUIManagerWidget");
static_assert(sizeof(FortUIManagerWidget_NUI_GetUIManagerWidget) == 0x000010, "Wrong size on FortUIManagerWidget_NUI_GetUIManagerWidget");
static_assert(offsetof(FortUIManagerWidget_NUI_GetUIManagerWidget, WorldContextObject) == 0x000000, "Member 'FortUIManagerWidget_NUI_GetUIManagerWidget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_GetUIManagerWidget, ReturnValue) == 0x000008, "Member 'FortUIManagerWidget_NUI_GetUIManagerWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.GetUINavigationManager
// 0x0010 (0x0010 - 0x0000)
struct FortUIManagerWidget_NUI_GetUINavigationManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortUINavigationManager*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_GetUINavigationManager) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_GetUINavigationManager");
static_assert(sizeof(FortUIManagerWidget_NUI_GetUINavigationManager) == 0x000010, "Wrong size on FortUIManagerWidget_NUI_GetUINavigationManager");
static_assert(offsetof(FortUIManagerWidget_NUI_GetUINavigationManager, WorldContextObject) == 0x000000, "Member 'FortUIManagerWidget_NUI_GetUINavigationManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_GetUINavigationManager, ReturnValue) == 0x000008, "Member 'FortUIManagerWidget_NUI_GetUINavigationManager::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.GetUINotificationQueue
// 0x0018 (0x0018 - 0x0000)
struct FortUIManagerWidget_NUI_GetUINotificationQueue final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortNotificationQueueType                    QueueType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUINotificationQueue*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_GetUINotificationQueue) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_GetUINotificationQueue");
static_assert(sizeof(FortUIManagerWidget_NUI_GetUINotificationQueue) == 0x000018, "Wrong size on FortUIManagerWidget_NUI_GetUINotificationQueue");
static_assert(offsetof(FortUIManagerWidget_NUI_GetUINotificationQueue, WorldContextObject) == 0x000000, "Member 'FortUIManagerWidget_NUI_GetUINotificationQueue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_GetUINotificationQueue, QueueType) == 0x000008, "Member 'FortUIManagerWidget_NUI_GetUINotificationQueue::QueueType' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_GetUINotificationQueue, ReturnValue) == 0x000010, "Member 'FortUIManagerWidget_NUI_GetUINotificationQueue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.KillConfirmationDialog
// 0x0008 (0x0008 - 0x0000)
struct FortUIManagerWidget_NUI_KillConfirmationDialog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_KillConfirmationDialog) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_KillConfirmationDialog");
static_assert(sizeof(FortUIManagerWidget_NUI_KillConfirmationDialog) == 0x000008, "Wrong size on FortUIManagerWidget_NUI_KillConfirmationDialog");
static_assert(offsetof(FortUIManagerWidget_NUI_KillConfirmationDialog, WorldContextObject) == 0x000000, "Member 'FortUIManagerWidget_NUI_KillConfirmationDialog::WorldContextObject' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.ShowErrorDialog
// 0x0050 (0x0050 - 0x0000)
struct FortUIManagerWidget_NUI_ShowErrorDialog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OperationDesc;                                     // 0x0008(0x0018)(Parm, Deprecated, NativeAccessSpecifierPublic)
	class FText                                   DisplayMessage;                                    // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ErrorNote;                                         // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortErrorSeverity                            ErrorSeverity;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIManagerWidget_NUI_ShowErrorDialog) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_ShowErrorDialog");
static_assert(sizeof(FortUIManagerWidget_NUI_ShowErrorDialog) == 0x000050, "Wrong size on FortUIManagerWidget_NUI_ShowErrorDialog");
static_assert(offsetof(FortUIManagerWidget_NUI_ShowErrorDialog, WorldContextObject) == 0x000000, "Member 'FortUIManagerWidget_NUI_ShowErrorDialog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_ShowErrorDialog, OperationDesc) == 0x000008, "Member 'FortUIManagerWidget_NUI_ShowErrorDialog::OperationDesc' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_ShowErrorDialog, DisplayMessage) == 0x000020, "Member 'FortUIManagerWidget_NUI_ShowErrorDialog::DisplayMessage' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_ShowErrorDialog, ErrorNote) == 0x000038, "Member 'FortUIManagerWidget_NUI_ShowErrorDialog::ErrorNote' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_ShowErrorDialog, ErrorSeverity) == 0x000048, "Member 'FortUIManagerWidget_NUI_ShowErrorDialog::ErrorSeverity' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.CreateNotification
// 0x0010 (0x0010 - 0x0000)
struct FortUIManagerWidget_NUI_CreateNotification final
{
public:
	TSubclassOf<class UFortUINotification>        UINotificationClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortUINotification*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_CreateNotification) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_CreateNotification");
static_assert(sizeof(FortUIManagerWidget_NUI_CreateNotification) == 0x000010, "Wrong size on FortUIManagerWidget_NUI_CreateNotification");
static_assert(offsetof(FortUIManagerWidget_NUI_CreateNotification, UINotificationClass) == 0x000000, "Member 'FortUIManagerWidget_NUI_CreateNotification::UINotificationClass' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_CreateNotification, ReturnValue) == 0x000008, "Member 'FortUIManagerWidget_NUI_CreateNotification::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.DisplayErrorDialog
// 0x0070 (0x0070 - 0x0000)
struct FortUIManagerWidget_NUI_DisplayErrorDialog final
{
public:
	struct FFortErrorInfo                         Info;                                              // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_DisplayErrorDialog) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_DisplayErrorDialog");
static_assert(sizeof(FortUIManagerWidget_NUI_DisplayErrorDialog) == 0x000070, "Wrong size on FortUIManagerWidget_NUI_DisplayErrorDialog");
static_assert(offsetof(FortUIManagerWidget_NUI_DisplayErrorDialog, Info) == 0x000000, "Member 'FortUIManagerWidget_NUI_DisplayErrorDialog::Info' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.DisplayStateContent
// 0x0001 (0x0001 - 0x0000)
struct FortUIManagerWidget_NUI_DisplayStateContent final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_DisplayStateContent) == 0x000001, "Wrong alignment on FortUIManagerWidget_NUI_DisplayStateContent");
static_assert(sizeof(FortUIManagerWidget_NUI_DisplayStateContent) == 0x000001, "Wrong size on FortUIManagerWidget_NUI_DisplayStateContent");
static_assert(offsetof(FortUIManagerWidget_NUI_DisplayStateContent, bDisplay) == 0x000000, "Member 'FortUIManagerWidget_NUI_DisplayStateContent::bDisplay' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.GetCachedWidget
// 0x0010 (0x0010 - 0x0000)
struct FortUIManagerWidget_NUI_GetCachedWidget final
{
public:
	class UClass*                                 InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_GetCachedWidget) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_GetCachedWidget");
static_assert(sizeof(FortUIManagerWidget_NUI_GetCachedWidget) == 0x000010, "Wrong size on FortUIManagerWidget_NUI_GetCachedWidget");
static_assert(offsetof(FortUIManagerWidget_NUI_GetCachedWidget, InClass) == 0x000000, "Member 'FortUIManagerWidget_NUI_GetCachedWidget::InClass' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_GetCachedWidget, ReturnValue) == 0x000008, "Member 'FortUIManagerWidget_NUI_GetCachedWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.HandleDeactivatedModal
// 0x0008 (0x0008 - 0x0000)
struct FortUIManagerWidget_NUI_HandleDeactivatedModal final
{
public:
	class UCommonActivatablePanel*                DeactivatedPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_HandleDeactivatedModal) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_HandleDeactivatedModal");
static_assert(sizeof(FortUIManagerWidget_NUI_HandleDeactivatedModal) == 0x000008, "Wrong size on FortUIManagerWidget_NUI_HandleDeactivatedModal");
static_assert(offsetof(FortUIManagerWidget_NUI_HandleDeactivatedModal, DeactivatedPanel) == 0x000000, "Member 'FortUIManagerWidget_NUI_HandleDeactivatedModal::DeactivatedPanel' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.IsShowingModalsConfirmationsErrors
// 0x0001 (0x0001 - 0x0000)
struct FortUIManagerWidget_NUI_IsShowingModalsConfirmationsErrors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_IsShowingModalsConfirmationsErrors) == 0x000001, "Wrong alignment on FortUIManagerWidget_NUI_IsShowingModalsConfirmationsErrors");
static_assert(sizeof(FortUIManagerWidget_NUI_IsShowingModalsConfirmationsErrors) == 0x000001, "Wrong size on FortUIManagerWidget_NUI_IsShowingModalsConfirmationsErrors");
static_assert(offsetof(FortUIManagerWidget_NUI_IsShowingModalsConfirmationsErrors, ReturnValue) == 0x000000, "Member 'FortUIManagerWidget_NUI_IsShowingModalsConfirmationsErrors::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.IsStateContentChildShowing
// 0x0001 (0x0001 - 0x0000)
struct FortUIManagerWidget_NUI_IsStateContentChildShowing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_IsStateContentChildShowing) == 0x000001, "Wrong alignment on FortUIManagerWidget_NUI_IsStateContentChildShowing");
static_assert(sizeof(FortUIManagerWidget_NUI_IsStateContentChildShowing) == 0x000001, "Wrong size on FortUIManagerWidget_NUI_IsStateContentChildShowing");
static_assert(offsetof(FortUIManagerWidget_NUI_IsStateContentChildShowing, ReturnValue) == 0x000000, "Member 'FortUIManagerWidget_NUI_IsStateContentChildShowing::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.NotifyPreShowConfirmation_NUI
// 0x0120 (0x0120 - 0x0000)
struct FortUIManagerWidget_NUI_NotifyPreShowConfirmation_NUI final
{
public:
	struct FFortDialogDescription_NUI             DialogDescription;                                 // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_NotifyPreShowConfirmation_NUI) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_NotifyPreShowConfirmation_NUI");
static_assert(sizeof(FortUIManagerWidget_NUI_NotifyPreShowConfirmation_NUI) == 0x000120, "Wrong size on FortUIManagerWidget_NUI_NotifyPreShowConfirmation_NUI");
static_assert(offsetof(FortUIManagerWidget_NUI_NotifyPreShowConfirmation_NUI, DialogDescription) == 0x000000, "Member 'FortUIManagerWidget_NUI_NotifyPreShowConfirmation_NUI::DialogDescription' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.OnEndLatentWaitForConfirmationDialog
// 0x0004 (0x0004 - 0x0000)
struct FortUIManagerWidget_NUI_OnEndLatentWaitForConfirmationDialog final
{
public:
	struct FFortDialogExternalLatentActionHandle  WaitingDialogHandle;                               // 0x0000(0x0004)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_OnEndLatentWaitForConfirmationDialog) == 0x000004, "Wrong alignment on FortUIManagerWidget_NUI_OnEndLatentWaitForConfirmationDialog");
static_assert(sizeof(FortUIManagerWidget_NUI_OnEndLatentWaitForConfirmationDialog) == 0x000004, "Wrong size on FortUIManagerWidget_NUI_OnEndLatentWaitForConfirmationDialog");
static_assert(offsetof(FortUIManagerWidget_NUI_OnEndLatentWaitForConfirmationDialog, WaitingDialogHandle) == 0x000000, "Member 'FortUIManagerWidget_NUI_OnEndLatentWaitForConfirmationDialog::WaitingDialogHandle' has a wrong offset!");

// DelegateFunction FortniteUI.FortUIManagerWidget_NUI.OnPreShowConfirmation_NUI__DelegateSignature
// 0x0128 (0x0128 - 0x0000)
struct FortUIManagerWidget_NUI_OnPreShowConfirmation_NUI__DelegateSignature final
{
public:
	class UFortUIManagerWidget_NUI*               Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortDialogDescription_NUI             DialogDescription;                                 // 0x0008(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_OnPreShowConfirmation_NUI__DelegateSignature) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_OnPreShowConfirmation_NUI__DelegateSignature");
static_assert(sizeof(FortUIManagerWidget_NUI_OnPreShowConfirmation_NUI__DelegateSignature) == 0x000128, "Wrong size on FortUIManagerWidget_NUI_OnPreShowConfirmation_NUI__DelegateSignature");
static_assert(offsetof(FortUIManagerWidget_NUI_OnPreShowConfirmation_NUI__DelegateSignature, Source) == 0x000000, "Member 'FortUIManagerWidget_NUI_OnPreShowConfirmation_NUI__DelegateSignature::Source' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_OnPreShowConfirmation_NUI__DelegateSignature, DialogDescription) == 0x000008, "Member 'FortUIManagerWidget_NUI_OnPreShowConfirmation_NUI__DelegateSignature::DialogDescription' has a wrong offset!");

// DelegateFunction FortniteUI.FortUIManagerWidget_NUI.OnShouldBlockSubtitlePortraitChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortUIManagerWidget_NUI_OnShouldBlockSubtitlePortraitChanged__DelegateSignature final
{
public:
	bool                                          bShouldBlockSubtitlePortrait;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_OnShouldBlockSubtitlePortraitChanged__DelegateSignature) == 0x000001, "Wrong alignment on FortUIManagerWidget_NUI_OnShouldBlockSubtitlePortraitChanged__DelegateSignature");
static_assert(sizeof(FortUIManagerWidget_NUI_OnShouldBlockSubtitlePortraitChanged__DelegateSignature) == 0x000001, "Wrong size on FortUIManagerWidget_NUI_OnShouldBlockSubtitlePortraitChanged__DelegateSignature");
static_assert(offsetof(FortUIManagerWidget_NUI_OnShouldBlockSubtitlePortraitChanged__DelegateSignature, bShouldBlockSubtitlePortrait) == 0x000000, "Member 'FortUIManagerWidget_NUI_OnShouldBlockSubtitlePortraitChanged__DelegateSignature::bShouldBlockSubtitlePortrait' has a wrong offset!");

// DelegateFunction FortniteUI.FortUIManagerWidget_NUI.OnShouldOpenTalkingHead__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Subtitle;                                          // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	EFortAnnouncementDisplayPreference            DisplayPreference;                                 // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature");
static_assert(sizeof(FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature) == 0x000040, "Wrong size on FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature");
static_assert(offsetof(FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature, Image) == 0x000000, "Member 'FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature::Image' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature, Title) == 0x000008, "Member 'FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature::Title' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature, Subtitle) == 0x000020, "Member 'FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature::Subtitle' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature, DisplayPreference) == 0x000038, "Member 'FortUIManagerWidget_NUI_OnShouldOpenTalkingHead__DelegateSignature::DisplayPreference' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.OnShowConfirmation
// 0x0130 (0x0130 - 0x0000)
struct FortUIManagerWidget_NUI_OnShowConfirmation final
{
public:
	struct FFortDialogDescription                 Description;                                       // 0x0000(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_OnShowConfirmation) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_OnShowConfirmation");
static_assert(sizeof(FortUIManagerWidget_NUI_OnShowConfirmation) == 0x000130, "Wrong size on FortUIManagerWidget_NUI_OnShowConfirmation");
static_assert(offsetof(FortUIManagerWidget_NUI_OnShowConfirmation, Description) == 0x000000, "Member 'FortUIManagerWidget_NUI_OnShowConfirmation::Description' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.OnShowConfirmation_NUI
// 0x0120 (0x0120 - 0x0000)
struct FortUIManagerWidget_NUI_OnShowConfirmation_NUI final
{
public:
	struct FFortDialogDescription_NUI             Description;                                       // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_OnShowConfirmation_NUI) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_OnShowConfirmation_NUI");
static_assert(sizeof(FortUIManagerWidget_NUI_OnShowConfirmation_NUI) == 0x000120, "Wrong size on FortUIManagerWidget_NUI_OnShowConfirmation_NUI");
static_assert(offsetof(FortUIManagerWidget_NUI_OnShowConfirmation_NUI, Description) == 0x000000, "Member 'FortUIManagerWidget_NUI_OnShowConfirmation_NUI::Description' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.PopActivatablePanelInModalLayer
// 0x0008 (0x0008 - 0x0000)
struct FortUIManagerWidget_NUI_PopActivatablePanelInModalLayer final
{
public:
	class UCommonActivatablePanel*                Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_PopActivatablePanelInModalLayer) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_PopActivatablePanelInModalLayer");
static_assert(sizeof(FortUIManagerWidget_NUI_PopActivatablePanelInModalLayer) == 0x000008, "Wrong size on FortUIManagerWidget_NUI_PopActivatablePanelInModalLayer");
static_assert(offsetof(FortUIManagerWidget_NUI_PopActivatablePanelInModalLayer, Panel) == 0x000000, "Member 'FortUIManagerWidget_NUI_PopActivatablePanelInModalLayer::Panel' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.QueueActivatablePanelIntoModalLayer
// 0x0008 (0x0008 - 0x0000)
struct FortUIManagerWidget_NUI_QueueActivatablePanelIntoModalLayer final
{
public:
	class UCommonActivatablePanel*                Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_QueueActivatablePanelIntoModalLayer) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_QueueActivatablePanelIntoModalLayer");
static_assert(sizeof(FortUIManagerWidget_NUI_QueueActivatablePanelIntoModalLayer) == 0x000008, "Wrong size on FortUIManagerWidget_NUI_QueueActivatablePanelIntoModalLayer");
static_assert(offsetof(FortUIManagerWidget_NUI_QueueActivatablePanelIntoModalLayer, Panel) == 0x000000, "Member 'FortUIManagerWidget_NUI_QueueActivatablePanelIntoModalLayer::Panel' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.QueueNotification
// 0x0010 (0x0010 - 0x0000)
struct FortUIManagerWidget_NUI_QueueNotification final
{
public:
	EFortNotificationQueueType                    QueueType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUINotification*                    Notification;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_QueueNotification) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_QueueNotification");
static_assert(sizeof(FortUIManagerWidget_NUI_QueueNotification) == 0x000010, "Wrong size on FortUIManagerWidget_NUI_QueueNotification");
static_assert(offsetof(FortUIManagerWidget_NUI_QueueNotification, QueueType) == 0x000000, "Member 'FortUIManagerWidget_NUI_QueueNotification::QueueType' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_QueueNotification, Notification) == 0x000008, "Member 'FortUIManagerWidget_NUI_QueueNotification::Notification' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.ReleaseNotification
// 0x0008 (0x0008 - 0x0000)
struct FortUIManagerWidget_NUI_ReleaseNotification final
{
public:
	class UFortUINotification*                    Notification;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_ReleaseNotification) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_ReleaseNotification");
static_assert(sizeof(FortUIManagerWidget_NUI_ReleaseNotification) == 0x000008, "Wrong size on FortUIManagerWidget_NUI_ReleaseNotification");
static_assert(offsetof(FortUIManagerWidget_NUI_ReleaseNotification, Notification) == 0x000000, "Member 'FortUIManagerWidget_NUI_ReleaseNotification::Notification' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.RemoveModalPanel
// 0x0008 (0x0008 - 0x0000)
struct FortUIManagerWidget_NUI_RemoveModalPanel final
{
public:
	class UCommonActivatablePanel*                ModalPanel;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_RemoveModalPanel) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_RemoveModalPanel");
static_assert(sizeof(FortUIManagerWidget_NUI_RemoveModalPanel) == 0x000008, "Wrong size on FortUIManagerWidget_NUI_RemoveModalPanel");
static_assert(offsetof(FortUIManagerWidget_NUI_RemoveModalPanel, ModalPanel) == 0x000000, "Member 'FortUIManagerWidget_NUI_RemoveModalPanel::ModalPanel' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.SetStateContentDisplayed
// 0x0001 (0x0001 - 0x0000)
struct FortUIManagerWidget_NUI_SetStateContentDisplayed final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_SetStateContentDisplayed) == 0x000001, "Wrong alignment on FortUIManagerWidget_NUI_SetStateContentDisplayed");
static_assert(sizeof(FortUIManagerWidget_NUI_SetStateContentDisplayed) == 0x000001, "Wrong size on FortUIManagerWidget_NUI_SetStateContentDisplayed");
static_assert(offsetof(FortUIManagerWidget_NUI_SetStateContentDisplayed, bDisplay) == 0x000000, "Member 'FortUIManagerWidget_NUI_SetStateContentDisplayed::bDisplay' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.UpdateStateWidgetContent
// 0x0008 (0x0008 - 0x0000)
struct FortUIManagerWidget_NUI_UpdateStateWidgetContent final
{
public:
	class UFortUIStateWidget_NUI*                 StateWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_UpdateStateWidgetContent) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_UpdateStateWidgetContent");
static_assert(sizeof(FortUIManagerWidget_NUI_UpdateStateWidgetContent) == 0x000008, "Wrong size on FortUIManagerWidget_NUI_UpdateStateWidgetContent");
static_assert(offsetof(FortUIManagerWidget_NUI_UpdateStateWidgetContent, StateWidget) == 0x000000, "Member 'FortUIManagerWidget_NUI_UpdateStateWidgetContent::StateWidget' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI._BPGetCurrentUIState
// 0x0001 (0x0001 - 0x0000)
struct FortUIManagerWidget_NUI__BPGetCurrentUIState final
{
public:
	EFortUIState                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI__BPGetCurrentUIState) == 0x000001, "Wrong alignment on FortUIManagerWidget_NUI__BPGetCurrentUIState");
static_assert(sizeof(FortUIManagerWidget_NUI__BPGetCurrentUIState) == 0x000001, "Wrong size on FortUIManagerWidget_NUI__BPGetCurrentUIState");
static_assert(offsetof(FortUIManagerWidget_NUI__BPGetCurrentUIState, ReturnValue) == 0x000000, "Member 'FortUIManagerWidget_NUI__BPGetCurrentUIState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.CanNotificationBeQueued
// 0x0003 (0x0003 - 0x0000)
struct FortUIManagerWidget_NUI_CanNotificationBeQueued final
{
public:
	EFortNotificationQueueType                    QueueType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortNotificationPriority                     NotificationPriority;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_CanNotificationBeQueued) == 0x000001, "Wrong alignment on FortUIManagerWidget_NUI_CanNotificationBeQueued");
static_assert(sizeof(FortUIManagerWidget_NUI_CanNotificationBeQueued) == 0x000003, "Wrong size on FortUIManagerWidget_NUI_CanNotificationBeQueued");
static_assert(offsetof(FortUIManagerWidget_NUI_CanNotificationBeQueued, QueueType) == 0x000000, "Member 'FortUIManagerWidget_NUI_CanNotificationBeQueued::QueueType' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_CanNotificationBeQueued, NotificationPriority) == 0x000001, "Member 'FortUIManagerWidget_NUI_CanNotificationBeQueued::NotificationPriority' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_CanNotificationBeQueued, ReturnValue) == 0x000002, "Member 'FortUIManagerWidget_NUI_CanNotificationBeQueued::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.GetCurrentModal
// 0x0008 (0x0008 - 0x0000)
struct FortUIManagerWidget_NUI_GetCurrentModal final
{
public:
	class UCommonActivatablePanel*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_GetCurrentModal) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_GetCurrentModal");
static_assert(sizeof(FortUIManagerWidget_NUI_GetCurrentModal) == 0x000008, "Wrong size on FortUIManagerWidget_NUI_GetCurrentModal");
static_assert(offsetof(FortUIManagerWidget_NUI_GetCurrentModal, ReturnValue) == 0x000000, "Member 'FortUIManagerWidget_NUI_GetCurrentModal::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.GetCurrentUIStateWidget
// 0x0008 (0x0008 - 0x0000)
struct FortUIManagerWidget_NUI_GetCurrentUIStateWidget final
{
public:
	class UFortUIStateWidget_NUI*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_GetCurrentUIStateWidget) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_GetCurrentUIStateWidget");
static_assert(sizeof(FortUIManagerWidget_NUI_GetCurrentUIStateWidget) == 0x000008, "Wrong size on FortUIManagerWidget_NUI_GetCurrentUIStateWidget");
static_assert(offsetof(FortUIManagerWidget_NUI_GetCurrentUIStateWidget, ReturnValue) == 0x000000, "Member 'FortUIManagerWidget_NUI_GetCurrentUIStateWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.GetNavigationManager
// 0x0008 (0x0008 - 0x0000)
struct FortUIManagerWidget_NUI_GetNavigationManager final
{
public:
	class UFortUINavigationManager*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_GetNavigationManager) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_GetNavigationManager");
static_assert(sizeof(FortUIManagerWidget_NUI_GetNavigationManager) == 0x000008, "Wrong size on FortUIManagerWidget_NUI_GetNavigationManager");
static_assert(offsetof(FortUIManagerWidget_NUI_GetNavigationManager, ReturnValue) == 0x000000, "Member 'FortUIManagerWidget_NUI_GetNavigationManager::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.HasActiveModalWidget
// 0x0001 (0x0001 - 0x0000)
struct FortUIManagerWidget_NUI_HasActiveModalWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_HasActiveModalWidget) == 0x000001, "Wrong alignment on FortUIManagerWidget_NUI_HasActiveModalWidget");
static_assert(sizeof(FortUIManagerWidget_NUI_HasActiveModalWidget) == 0x000001, "Wrong size on FortUIManagerWidget_NUI_HasActiveModalWidget");
static_assert(offsetof(FortUIManagerWidget_NUI_HasActiveModalWidget, ReturnValue) == 0x000000, "Member 'FortUIManagerWidget_NUI_HasActiveModalWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.IsStateContentDisplayed
// 0x0001 (0x0001 - 0x0000)
struct FortUIManagerWidget_NUI_IsStateContentDisplayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_IsStateContentDisplayed) == 0x000001, "Wrong alignment on FortUIManagerWidget_NUI_IsStateContentDisplayed");
static_assert(sizeof(FortUIManagerWidget_NUI_IsStateContentDisplayed) == 0x000001, "Wrong size on FortUIManagerWidget_NUI_IsStateContentDisplayed");
static_assert(offsetof(FortUIManagerWidget_NUI_IsStateContentDisplayed, ReturnValue) == 0x000000, "Member 'FortUIManagerWidget_NUI_IsStateContentDisplayed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.PushContentWidget
// 0x0008 (0x0008 - 0x0000)
struct FortUIManagerWidget_NUI_PushContentWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_PushContentWidget) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_PushContentWidget");
static_assert(sizeof(FortUIManagerWidget_NUI_PushContentWidget) == 0x000008, "Wrong size on FortUIManagerWidget_NUI_PushContentWidget");
static_assert(offsetof(FortUIManagerWidget_NUI_PushContentWidget, Widget) == 0x000000, "Member 'FortUIManagerWidget_NUI_PushContentWidget::Widget' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.PushContentWidgetAdvanced
// 0x0010 (0x0010 - 0x0000)
struct FortUIManagerWidget_NUI_PushContentWidgetAdvanced final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideHeader;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideFooter;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChatWidget;                                   // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIManagerWidget_NUI_PushContentWidgetAdvanced) == 0x000008, "Wrong alignment on FortUIManagerWidget_NUI_PushContentWidgetAdvanced");
static_assert(sizeof(FortUIManagerWidget_NUI_PushContentWidgetAdvanced) == 0x000010, "Wrong size on FortUIManagerWidget_NUI_PushContentWidgetAdvanced");
static_assert(offsetof(FortUIManagerWidget_NUI_PushContentWidgetAdvanced, Widget) == 0x000000, "Member 'FortUIManagerWidget_NUI_PushContentWidgetAdvanced::Widget' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_PushContentWidgetAdvanced, bHideHeader) == 0x000008, "Member 'FortUIManagerWidget_NUI_PushContentWidgetAdvanced::bHideHeader' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_PushContentWidgetAdvanced, bHideFooter) == 0x000009, "Member 'FortUIManagerWidget_NUI_PushContentWidgetAdvanced::bHideFooter' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_PushContentWidgetAdvanced, bHideChatWidget) == 0x00000A, "Member 'FortUIManagerWidget_NUI_PushContentWidgetAdvanced::bHideChatWidget' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.SetFrontEndVisibility
// 0x0003 (0x0003 - 0x0000)
struct FortUIManagerWidget_NUI_SetFrontEndVisibility final
{
public:
	bool                                          bHideHeader;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideFooter;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChatWidget;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_SetFrontEndVisibility) == 0x000001, "Wrong alignment on FortUIManagerWidget_NUI_SetFrontEndVisibility");
static_assert(sizeof(FortUIManagerWidget_NUI_SetFrontEndVisibility) == 0x000003, "Wrong size on FortUIManagerWidget_NUI_SetFrontEndVisibility");
static_assert(offsetof(FortUIManagerWidget_NUI_SetFrontEndVisibility, bHideHeader) == 0x000000, "Member 'FortUIManagerWidget_NUI_SetFrontEndVisibility::bHideHeader' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_SetFrontEndVisibility, bHideFooter) == 0x000001, "Member 'FortUIManagerWidget_NUI_SetFrontEndVisibility::bHideFooter' has a wrong offset!");
static_assert(offsetof(FortUIManagerWidget_NUI_SetFrontEndVisibility, bHideChatWidget) == 0x000002, "Member 'FortUIManagerWidget_NUI_SetFrontEndVisibility::bHideChatWidget' has a wrong offset!");

// Function FortniteUI.FortUIManagerWidget_NUI.ShouldBlockSubtitlePortrait
// 0x0001 (0x0001 - 0x0000)
struct FortUIManagerWidget_NUI_ShouldBlockSubtitlePortrait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIManagerWidget_NUI_ShouldBlockSubtitlePortrait) == 0x000001, "Wrong alignment on FortUIManagerWidget_NUI_ShouldBlockSubtitlePortrait");
static_assert(sizeof(FortUIManagerWidget_NUI_ShouldBlockSubtitlePortrait) == 0x000001, "Wrong size on FortUIManagerWidget_NUI_ShouldBlockSubtitlePortrait");
static_assert(offsetof(FortUIManagerWidget_NUI_ShouldBlockSubtitlePortrait, ReturnValue) == 0x000000, "Member 'FortUIManagerWidget_NUI_ShouldBlockSubtitlePortrait::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationModOptinScreenBase.RequestClose
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationModOptinScreenBase_RequestClose final
{
public:
	bool                                          bCancelled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModOptinScreenBase_RequestClose) == 0x000001, "Wrong alignment on FortAlterationModOptinScreenBase_RequestClose");
static_assert(sizeof(FortAlterationModOptinScreenBase_RequestClose) == 0x000001, "Wrong size on FortAlterationModOptinScreenBase_RequestClose");
static_assert(offsetof(FortAlterationModOptinScreenBase_RequestClose, bCancelled) == 0x000000, "Member 'FortAlterationModOptinScreenBase_RequestClose::bCancelled' has a wrong offset!");

// Function FortniteUI.FortAlterationModOptinScreenBase.SetupItem
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationModOptinScreenBase_SetupItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModOptinScreenBase_SetupItem) == 0x000008, "Wrong alignment on FortAlterationModOptinScreenBase_SetupItem");
static_assert(sizeof(FortAlterationModOptinScreenBase_SetupItem) == 0x000008, "Wrong size on FortAlterationModOptinScreenBase_SetupItem");
static_assert(offsetof(FortAlterationModOptinScreenBase_SetupItem, Item) == 0x000000, "Member 'FortAlterationModOptinScreenBase_SetupItem::Item' has a wrong offset!");

// Function FortniteUI.FortAlterationModScreenBase.AreIngredientRequirementsMent
// 0x0018 (0x0018 - 0x0000)
struct FortAlterationModScreenBase_AreIngredientRequirementsMent final
{
public:
	TArray<struct FFortItemQuantityPair>          RequiredIngredients;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAlterationModScreenBase_AreIngredientRequirementsMent) == 0x000008, "Wrong alignment on FortAlterationModScreenBase_AreIngredientRequirementsMent");
static_assert(sizeof(FortAlterationModScreenBase_AreIngredientRequirementsMent) == 0x000018, "Wrong size on FortAlterationModScreenBase_AreIngredientRequirementsMent");
static_assert(offsetof(FortAlterationModScreenBase_AreIngredientRequirementsMent, RequiredIngredients) == 0x000000, "Member 'FortAlterationModScreenBase_AreIngredientRequirementsMent::RequiredIngredients' has a wrong offset!");
static_assert(offsetof(FortAlterationModScreenBase_AreIngredientRequirementsMent, ReturnValue) == 0x000010, "Member 'FortAlterationModScreenBase_AreIngredientRequirementsMent::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationModScreenBase.HandleBackAction
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationModScreenBase_HandleBackAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModScreenBase_HandleBackAction) == 0x000001, "Wrong alignment on FortAlterationModScreenBase_HandleBackAction");
static_assert(sizeof(FortAlterationModScreenBase_HandleBackAction) == 0x000001, "Wrong size on FortAlterationModScreenBase_HandleBackAction");
static_assert(offsetof(FortAlterationModScreenBase_HandleBackAction, bPassThrough) == 0x000000, "Member 'FortAlterationModScreenBase_HandleBackAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortAlterationModScreenBase.OnAlterationModificationSucess
// 0x0004 (0x0004 - 0x0000)
struct FortAlterationModScreenBase_OnAlterationModificationSucess final
{
public:
	int32                                         ModifiedSlotIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModScreenBase_OnAlterationModificationSucess) == 0x000004, "Wrong alignment on FortAlterationModScreenBase_OnAlterationModificationSucess");
static_assert(sizeof(FortAlterationModScreenBase_OnAlterationModificationSucess) == 0x000004, "Wrong size on FortAlterationModScreenBase_OnAlterationModificationSucess");
static_assert(offsetof(FortAlterationModScreenBase_OnAlterationModificationSucess, ModifiedSlotIndex) == 0x000000, "Member 'FortAlterationModScreenBase_OnAlterationModificationSucess::ModifiedSlotIndex' has a wrong offset!");

// Function FortniteUI.FortAlterationModScreenBase.OnAlterationOptionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationModScreenBase_OnAlterationOptionChanged final
{
public:
	class UFortAlterationOption*                  CurrentAlterationOption;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModScreenBase_OnAlterationOptionChanged) == 0x000008, "Wrong alignment on FortAlterationModScreenBase_OnAlterationOptionChanged");
static_assert(sizeof(FortAlterationModScreenBase_OnAlterationOptionChanged) == 0x000008, "Wrong size on FortAlterationModScreenBase_OnAlterationOptionChanged");
static_assert(offsetof(FortAlterationModScreenBase_OnAlterationOptionChanged, CurrentAlterationOption) == 0x000000, "Member 'FortAlterationModScreenBase_OnAlterationOptionChanged::CurrentAlterationOption' has a wrong offset!");

// Function FortniteUI.FortAlterationModScreenBase.OnItemSlotChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationModScreenBase_OnItemSlotChanged final
{
public:
	bool                                          SelectedSlot;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModScreenBase_OnItemSlotChanged) == 0x000001, "Wrong alignment on FortAlterationModScreenBase_OnItemSlotChanged");
static_assert(sizeof(FortAlterationModScreenBase_OnItemSlotChanged) == 0x000001, "Wrong size on FortAlterationModScreenBase_OnItemSlotChanged");
static_assert(offsetof(FortAlterationModScreenBase_OnItemSlotChanged, SelectedSlot) == 0x000000, "Member 'FortAlterationModScreenBase_OnItemSlotChanged::SelectedSlot' has a wrong offset!");

// Function FortniteUI.FortAlterationModScreenBase.SetItemForAlterationsModding
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationModScreenBase_SetItemForAlterationsModding final
{
public:
	class UFortAlterableItem*                     InAlterableItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationModScreenBase_SetItemForAlterationsModding) == 0x000008, "Wrong alignment on FortAlterationModScreenBase_SetItemForAlterationsModding");
static_assert(sizeof(FortAlterationModScreenBase_SetItemForAlterationsModding) == 0x000008, "Wrong size on FortAlterationModScreenBase_SetItemForAlterationsModding");
static_assert(offsetof(FortAlterationModScreenBase_SetItemForAlterationsModding, InAlterableItem) == 0x000000, "Member 'FortAlterationModScreenBase_SetItemForAlterationsModding::InAlterableItem' has a wrong offset!");

// Function FortniteUI.FortSurvivorSquadSelectorButton.TryGetPersonalityMatches
// 0x0348 (0x0348 - 0x0000)
struct FortSurvivorSquadSelectorButton_TryGetPersonalityMatches final
{
public:
	struct FFortSurvivorSquadSelectorButtonPersonalityMatches OutPersonalityMatches;                             // 0x0000(0x0340)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0340(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSurvivorSquadSelectorButton_TryGetPersonalityMatches) == 0x000008, "Wrong alignment on FortSurvivorSquadSelectorButton_TryGetPersonalityMatches");
static_assert(sizeof(FortSurvivorSquadSelectorButton_TryGetPersonalityMatches) == 0x000348, "Wrong size on FortSurvivorSquadSelectorButton_TryGetPersonalityMatches");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetPersonalityMatches, OutPersonalityMatches) == 0x000000, "Member 'FortSurvivorSquadSelectorButton_TryGetPersonalityMatches::OutPersonalityMatches' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetPersonalityMatches, ReturnValue) == 0x000340, "Member 'FortSurvivorSquadSelectorButton_TryGetPersonalityMatches::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSurvivorSquadSelectorButton.TryGetSquadMembers
// 0x0018 (0x0018 - 0x0000)
struct FortSurvivorSquadSelectorButton_TryGetSquadMembers final
{
public:
	TArray<class UFortWorker*>                    OutSquadMembers;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSurvivorSquadSelectorButton_TryGetSquadMembers) == 0x000008, "Wrong alignment on FortSurvivorSquadSelectorButton_TryGetSquadMembers");
static_assert(sizeof(FortSurvivorSquadSelectorButton_TryGetSquadMembers) == 0x000018, "Wrong size on FortSurvivorSquadSelectorButton_TryGetSquadMembers");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetSquadMembers, OutSquadMembers) == 0x000000, "Member 'FortSurvivorSquadSelectorButton_TryGetSquadMembers::OutSquadMembers' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetSquadMembers, ReturnValue) == 0x000010, "Member 'FortSurvivorSquadSelectorButton_TryGetSquadMembers::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSurvivorSquadSelectorButton.TryGetSummaryStats
// 0x0078 (0x0078 - 0x0000)
struct FortSurvivorSquadSelectorButton_TryGetSummaryStats final
{
public:
	struct FFortSurvivorSquadSelectorButtonSummaryStats OutSummaryStats;                                   // 0x0000(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSurvivorSquadSelectorButton_TryGetSummaryStats) == 0x000008, "Wrong alignment on FortSurvivorSquadSelectorButton_TryGetSummaryStats");
static_assert(sizeof(FortSurvivorSquadSelectorButton_TryGetSummaryStats) == 0x000078, "Wrong size on FortSurvivorSquadSelectorButton_TryGetSummaryStats");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetSummaryStats, OutSummaryStats) == 0x000000, "Member 'FortSurvivorSquadSelectorButton_TryGetSummaryStats::OutSummaryStats' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadSelectorButton_TryGetSummaryStats, ReturnValue) == 0x000070, "Member 'FortSurvivorSquadSelectorButton_TryGetSummaryStats::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationOption.Setup
// 0x0040 (0x0040 - 0x0000)
struct FortAlterationOption_Setup final
{
public:
	struct FAlterationOption                      InAlterationOption;                                // 0x0000(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortAlterationOptionType                     InAlterationOptionType;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAlterationOption_Setup) == 0x000008, "Wrong alignment on FortAlterationOption_Setup");
static_assert(sizeof(FortAlterationOption_Setup) == 0x000040, "Wrong size on FortAlterationOption_Setup");
static_assert(offsetof(FortAlterationOption_Setup, InAlterationOption) == 0x000000, "Member 'FortAlterationOption_Setup::InAlterationOption' has a wrong offset!");
static_assert(offsetof(FortAlterationOption_Setup, InAlterationOptionType) == 0x000038, "Member 'FortAlterationOption_Setup::InAlterationOptionType' has a wrong offset!");

// Function FortniteUI.FortAlterationOption.GetAlterationDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationOption_GetAlterationDefinition final
{
public:
	class UFortAlterationItemDefinition*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOption_GetAlterationDefinition) == 0x000008, "Wrong alignment on FortAlterationOption_GetAlterationDefinition");
static_assert(sizeof(FortAlterationOption_GetAlterationDefinition) == 0x000008, "Wrong size on FortAlterationOption_GetAlterationDefinition");
static_assert(offsetof(FortAlterationOption_GetAlterationDefinition, ReturnValue) == 0x000000, "Member 'FortAlterationOption_GetAlterationDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationOption.GetAlterationOptionType
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationOption_GetAlterationOptionType final
{
public:
	EFortAlterationOptionType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOption_GetAlterationOptionType) == 0x000001, "Wrong alignment on FortAlterationOption_GetAlterationOptionType");
static_assert(sizeof(FortAlterationOption_GetAlterationOptionType) == 0x000001, "Wrong size on FortAlterationOption_GetAlterationOptionType");
static_assert(offsetof(FortAlterationOption_GetAlterationOptionType, ReturnValue) == 0x000000, "Member 'FortAlterationOption_GetAlterationOptionType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationOption.GetCurrentPipCount
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationOption_GetCurrentPipCount final
{
public:
	float                                         MaxPipCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOption_GetCurrentPipCount) == 0x000004, "Wrong alignment on FortAlterationOption_GetCurrentPipCount");
static_assert(sizeof(FortAlterationOption_GetCurrentPipCount) == 0x000008, "Wrong size on FortAlterationOption_GetCurrentPipCount");
static_assert(offsetof(FortAlterationOption_GetCurrentPipCount, MaxPipCount) == 0x000000, "Member 'FortAlterationOption_GetCurrentPipCount::MaxPipCount' has a wrong offset!");
static_assert(offsetof(FortAlterationOption_GetCurrentPipCount, ReturnValue) == 0x000004, "Member 'FortAlterationOption_GetCurrentPipCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationOption.GetNextPipCount
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationOption_GetNextPipCount final
{
public:
	float                                         MaxPipCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOption_GetNextPipCount) == 0x000004, "Wrong alignment on FortAlterationOption_GetNextPipCount");
static_assert(sizeof(FortAlterationOption_GetNextPipCount) == 0x000008, "Wrong size on FortAlterationOption_GetNextPipCount");
static_assert(offsetof(FortAlterationOption_GetNextPipCount, MaxPipCount) == 0x000000, "Member 'FortAlterationOption_GetNextPipCount::MaxPipCount' has a wrong offset!");
static_assert(offsetof(FortAlterationOption_GetNextPipCount, ReturnValue) == 0x000004, "Member 'FortAlterationOption_GetNextPipCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationOption.GetRequiredIngredients
// 0x0010 (0x0010 - 0x0000)
struct FortAlterationOption_GetRequiredIngredients final
{
public:
	TArray<struct FFortItemQuantityPair>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOption_GetRequiredIngredients) == 0x000008, "Wrong alignment on FortAlterationOption_GetRequiredIngredients");
static_assert(sizeof(FortAlterationOption_GetRequiredIngredients) == 0x000010, "Wrong size on FortAlterationOption_GetRequiredIngredients");
static_assert(offsetof(FortAlterationOption_GetRequiredIngredients, ReturnValue) == 0x000000, "Member 'FortAlterationOption_GetRequiredIngredients::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationOptionsBase.HandleAlterationsOptionHovered
// 0x0010 (0x0010 - 0x0000)
struct FortAlterationOptionsBase_HandleAlterationsOptionHovered final
{
public:
	class UCommonButton*                          AlterationOptionButton;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAlterationOptionsBase_HandleAlterationsOptionHovered) == 0x000008, "Wrong alignment on FortAlterationOptionsBase_HandleAlterationsOptionHovered");
static_assert(sizeof(FortAlterationOptionsBase_HandleAlterationsOptionHovered) == 0x000010, "Wrong size on FortAlterationOptionsBase_HandleAlterationsOptionHovered");
static_assert(offsetof(FortAlterationOptionsBase_HandleAlterationsOptionHovered, AlterationOptionButton) == 0x000000, "Member 'FortAlterationOptionsBase_HandleAlterationsOptionHovered::AlterationOptionButton' has a wrong offset!");
static_assert(offsetof(FortAlterationOptionsBase_HandleAlterationsOptionHovered, GroupIndex) == 0x000008, "Member 'FortAlterationOptionsBase_HandleAlterationsOptionHovered::GroupIndex' has a wrong offset!");

// Function FortniteUI.FortAlterationOptionsBase.HandleAlterationsOptionSelected
// 0x0010 (0x0010 - 0x0000)
struct FortAlterationOptionsBase_HandleAlterationsOptionSelected final
{
public:
	class UCommonButton*                          AlterationOptionButton;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAlterationOptionsBase_HandleAlterationsOptionSelected) == 0x000008, "Wrong alignment on FortAlterationOptionsBase_HandleAlterationsOptionSelected");
static_assert(sizeof(FortAlterationOptionsBase_HandleAlterationsOptionSelected) == 0x000010, "Wrong size on FortAlterationOptionsBase_HandleAlterationsOptionSelected");
static_assert(offsetof(FortAlterationOptionsBase_HandleAlterationsOptionSelected, AlterationOptionButton) == 0x000000, "Member 'FortAlterationOptionsBase_HandleAlterationsOptionSelected::AlterationOptionButton' has a wrong offset!");
static_assert(offsetof(FortAlterationOptionsBase_HandleAlterationsOptionSelected, GroupIndex) == 0x000008, "Member 'FortAlterationOptionsBase_HandleAlterationsOptionSelected::GroupIndex' has a wrong offset!");

// Function FortniteUI.FortAlterationOptionsBase.OnGenerateOption
// 0x0010 (0x0010 - 0x0000)
struct FortAlterationOptionsBase_OnGenerateOption final
{
public:
	EFortAlterationOptionType                     OptionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAlterationOption*                  OptionWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOptionsBase_OnGenerateOption) == 0x000008, "Wrong alignment on FortAlterationOptionsBase_OnGenerateOption");
static_assert(sizeof(FortAlterationOptionsBase_OnGenerateOption) == 0x000010, "Wrong size on FortAlterationOptionsBase_OnGenerateOption");
static_assert(offsetof(FortAlterationOptionsBase_OnGenerateOption, OptionType) == 0x000000, "Member 'FortAlterationOptionsBase_OnGenerateOption::OptionType' has a wrong offset!");
static_assert(offsetof(FortAlterationOptionsBase_OnGenerateOption, OptionWidget) == 0x000008, "Member 'FortAlterationOptionsBase_OnGenerateOption::OptionWidget' has a wrong offset!");

// Function FortniteUI.FortAlterationOptionsBase.OnItemChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationOptionsBase_OnItemChanged final
{
public:
	bool                                          bIntroAlterations;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOptionsBase_OnItemChanged) == 0x000001, "Wrong alignment on FortAlterationOptionsBase_OnItemChanged");
static_assert(sizeof(FortAlterationOptionsBase_OnItemChanged) == 0x000001, "Wrong size on FortAlterationOptionsBase_OnItemChanged");
static_assert(offsetof(FortAlterationOptionsBase_OnItemChanged, bIntroAlterations) == 0x000000, "Member 'FortAlterationOptionsBase_OnItemChanged::bIntroAlterations' has a wrong offset!");

// Function FortniteUI.FortAlterationOptionsBase.ProcessAlterationOptions
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationOptionsBase_ProcessAlterationOptions final
{
public:
	bool                                          bIntroAlterations;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOptionsBase_ProcessAlterationOptions) == 0x000001, "Wrong alignment on FortAlterationOptionsBase_ProcessAlterationOptions");
static_assert(sizeof(FortAlterationOptionsBase_ProcessAlterationOptions) == 0x000001, "Wrong size on FortAlterationOptionsBase_ProcessAlterationOptions");
static_assert(offsetof(FortAlterationOptionsBase_ProcessAlterationOptions, bIntroAlterations) == 0x000000, "Member 'FortAlterationOptionsBase_ProcessAlterationOptions::bIntroAlterations' has a wrong offset!");

// Function FortniteUI.FortAlterationOptionsBase.DoAlterationOptionsExist
// 0x0002 (0x0002 - 0x0000)
struct FortAlterationOptionsBase_DoAlterationOptionsExist final
{
public:
	EFortAlterationOptionType                     OptionType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOptionsBase_DoAlterationOptionsExist) == 0x000001, "Wrong alignment on FortAlterationOptionsBase_DoAlterationOptionsExist");
static_assert(sizeof(FortAlterationOptionsBase_DoAlterationOptionsExist) == 0x000002, "Wrong size on FortAlterationOptionsBase_DoAlterationOptionsExist");
static_assert(offsetof(FortAlterationOptionsBase_DoAlterationOptionsExist, OptionType) == 0x000000, "Member 'FortAlterationOptionsBase_DoAlterationOptionsExist::OptionType' has a wrong offset!");
static_assert(offsetof(FortAlterationOptionsBase_DoAlterationOptionsExist, ReturnValue) == 0x000001, "Member 'FortAlterationOptionsBase_DoAlterationOptionsExist::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationOptionsBase.IsValidAlterationSlot
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationOptionsBase_IsValidAlterationSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationOptionsBase_IsValidAlterationSlot) == 0x000001, "Wrong alignment on FortAlterationOptionsBase_IsValidAlterationSlot");
static_assert(sizeof(FortAlterationOptionsBase_IsValidAlterationSlot) == 0x000001, "Wrong size on FortAlterationOptionsBase_IsValidAlterationSlot");
static_assert(offsetof(FortAlterationOptionsBase_IsValidAlterationSlot, ReturnValue) == 0x000000, "Member 'FortAlterationOptionsBase_IsValidAlterationSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotButton.GetPopupMenu
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSlotButton_GetPopupMenu final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotButton_GetPopupMenu) == 0x000008, "Wrong alignment on FortCollectionBookSlotButton_GetPopupMenu");
static_assert(sizeof(FortCollectionBookSlotButton_GetPopupMenu) == 0x000008, "Wrong size on FortCollectionBookSlotButton_GetPopupMenu");
static_assert(offsetof(FortCollectionBookSlotButton_GetPopupMenu, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotButton_GetPopupMenu::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotButton.PopupMenuClosedWithAction
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSlotButton_PopupMenuClosedWithAction final
{
public:
	EFortCollectionBookPopupButtonType            Selection;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotButton_PopupMenuClosedWithAction) == 0x000001, "Wrong alignment on FortCollectionBookSlotButton_PopupMenuClosedWithAction");
static_assert(sizeof(FortCollectionBookSlotButton_PopupMenuClosedWithAction) == 0x000001, "Wrong size on FortCollectionBookSlotButton_PopupMenuClosedWithAction");
static_assert(offsetof(FortCollectionBookSlotButton_PopupMenuClosedWithAction, Selection) == 0x000000, "Member 'FortCollectionBookSlotButton_PopupMenuClosedWithAction::Selection' has a wrong offset!");

// Function FortniteUI.FortAlterationInfo.GetAlterationDefintion
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationInfo_GetAlterationDefintion final
{
public:
	class UFortAlterationItemDefinition*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationInfo_GetAlterationDefintion) == 0x000008, "Wrong alignment on FortAlterationInfo_GetAlterationDefintion");
static_assert(sizeof(FortAlterationInfo_GetAlterationDefintion) == 0x000008, "Wrong size on FortAlterationInfo_GetAlterationDefintion");
static_assert(offsetof(FortAlterationInfo_GetAlterationDefintion, ReturnValue) == 0x000000, "Member 'FortAlterationInfo_GetAlterationDefintion::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationInfo.GetCorrespondingItem
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationInfo_GetCorrespondingItem final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationInfo_GetCorrespondingItem) == 0x000008, "Wrong alignment on FortAlterationInfo_GetCorrespondingItem");
static_assert(sizeof(FortAlterationInfo_GetCorrespondingItem) == 0x000008, "Wrong size on FortAlterationInfo_GetCorrespondingItem");
static_assert(offsetof(FortAlterationInfo_GetCorrespondingItem, ReturnValue) == 0x000000, "Member 'FortAlterationInfo_GetCorrespondingItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationInfo.GetCurrentPipCount
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationInfo_GetCurrentPipCount final
{
public:
	float                                         MaxPips;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationInfo_GetCurrentPipCount) == 0x000004, "Wrong alignment on FortAlterationInfo_GetCurrentPipCount");
static_assert(sizeof(FortAlterationInfo_GetCurrentPipCount) == 0x000008, "Wrong size on FortAlterationInfo_GetCurrentPipCount");
static_assert(offsetof(FortAlterationInfo_GetCurrentPipCount, MaxPips) == 0x000000, "Member 'FortAlterationInfo_GetCurrentPipCount::MaxPips' has a wrong offset!");
static_assert(offsetof(FortAlterationInfo_GetCurrentPipCount, ReturnValue) == 0x000004, "Member 'FortAlterationInfo_GetCurrentPipCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationInfo.GetRarity
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationInfo_GetRarity final
{
public:
	EFortRarity                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationInfo_GetRarity) == 0x000001, "Wrong alignment on FortAlterationInfo_GetRarity");
static_assert(sizeof(FortAlterationInfo_GetRarity) == 0x000001, "Wrong size on FortAlterationInfo_GetRarity");
static_assert(offsetof(FortAlterationInfo_GetRarity, ReturnValue) == 0x000000, "Member 'FortAlterationInfo_GetRarity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationInfo.GetRequiredLevel
// 0x0004 (0x0004 - 0x0000)
struct FortAlterationInfo_GetRequiredLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationInfo_GetRequiredLevel) == 0x000004, "Wrong alignment on FortAlterationInfo_GetRequiredLevel");
static_assert(sizeof(FortAlterationInfo_GetRequiredLevel) == 0x000004, "Wrong size on FortAlterationInfo_GetRequiredLevel");
static_assert(offsetof(FortAlterationInfo_GetRequiredLevel, ReturnValue) == 0x000000, "Member 'FortAlterationInfo_GetRequiredLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationInfo.GetSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct FortAlterationInfo_GetSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationInfo_GetSlotIndex) == 0x000004, "Wrong alignment on FortAlterationInfo_GetSlotIndex");
static_assert(sizeof(FortAlterationInfo_GetSlotIndex) == 0x000004, "Wrong size on FortAlterationInfo_GetSlotIndex");
static_assert(offsetof(FortAlterationInfo_GetSlotIndex, ReturnValue) == 0x000000, "Member 'FortAlterationInfo_GetSlotIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationInfo.IsAlterationHighlighted
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationInfo_IsAlterationHighlighted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationInfo_IsAlterationHighlighted) == 0x000001, "Wrong alignment on FortAlterationInfo_IsAlterationHighlighted");
static_assert(sizeof(FortAlterationInfo_IsAlterationHighlighted) == 0x000001, "Wrong size on FortAlterationInfo_IsAlterationHighlighted");
static_assert(offsetof(FortAlterationInfo_IsAlterationHighlighted, ReturnValue) == 0x000000, "Member 'FortAlterationInfo_IsAlterationHighlighted::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationInfo.IsAlterationUnlocked
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationInfo_IsAlterationUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationInfo_IsAlterationUnlocked) == 0x000001, "Wrong alignment on FortAlterationInfo_IsAlterationUnlocked");
static_assert(sizeof(FortAlterationInfo_IsAlterationUnlocked) == 0x000001, "Wrong size on FortAlterationInfo_IsAlterationUnlocked");
static_assert(offsetof(FortAlterationInfo_IsAlterationUnlocked, ReturnValue) == 0x000000, "Member 'FortAlterationInfo_IsAlterationUnlocked::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationInfo.IsFreeAlterationChoice
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationInfo_IsFreeAlterationChoice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationInfo_IsFreeAlterationChoice) == 0x000001, "Wrong alignment on FortAlterationInfo_IsFreeAlterationChoice");
static_assert(sizeof(FortAlterationInfo_IsFreeAlterationChoice) == 0x000001, "Wrong size on FortAlterationInfo_IsFreeAlterationChoice");
static_assert(offsetof(FortAlterationInfo_IsFreeAlterationChoice, ReturnValue) == 0x000000, "Member 'FortAlterationInfo_IsFreeAlterationChoice::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAlterationsWidget.HandleAlterationsSlotHovered
// 0x0010 (0x0010 - 0x0000)
struct FortAlterationsWidget_HandleAlterationsSlotHovered final
{
public:
	class UCommonButton*                          InAlterationButton;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAlterationsWidget_HandleAlterationsSlotHovered) == 0x000008, "Wrong alignment on FortAlterationsWidget_HandleAlterationsSlotHovered");
static_assert(sizeof(FortAlterationsWidget_HandleAlterationsSlotHovered) == 0x000010, "Wrong size on FortAlterationsWidget_HandleAlterationsSlotHovered");
static_assert(offsetof(FortAlterationsWidget_HandleAlterationsSlotHovered, InAlterationButton) == 0x000000, "Member 'FortAlterationsWidget_HandleAlterationsSlotHovered::InAlterationButton' has a wrong offset!");
static_assert(offsetof(FortAlterationsWidget_HandleAlterationsSlotHovered, SelectedIndex) == 0x000008, "Member 'FortAlterationsWidget_HandleAlterationsSlotHovered::SelectedIndex' has a wrong offset!");

// Function FortniteUI.FortAlterationsWidget.HandleAlterationsSlotSelected
// 0x0010 (0x0010 - 0x0000)
struct FortAlterationsWidget_HandleAlterationsSlotSelected final
{
public:
	class UCommonButton*                          InAlterationButton;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAlterationsWidget_HandleAlterationsSlotSelected) == 0x000008, "Wrong alignment on FortAlterationsWidget_HandleAlterationsSlotSelected");
static_assert(sizeof(FortAlterationsWidget_HandleAlterationsSlotSelected) == 0x000010, "Wrong size on FortAlterationsWidget_HandleAlterationsSlotSelected");
static_assert(offsetof(FortAlterationsWidget_HandleAlterationsSlotSelected, InAlterationButton) == 0x000000, "Member 'FortAlterationsWidget_HandleAlterationsSlotSelected::InAlterationButton' has a wrong offset!");
static_assert(offsetof(FortAlterationsWidget_HandleAlterationsSlotSelected, SelectedIndex) == 0x000008, "Member 'FortAlterationsWidget_HandleAlterationsSlotSelected::SelectedIndex' has a wrong offset!");

// Function FortniteUI.FortAlterationsWidget.OnAlterationSlotIndexModifiedBP
// 0x0004 (0x0004 - 0x0000)
struct FortAlterationsWidget_OnAlterationSlotIndexModifiedBP final
{
public:
	int32                                         ModifiedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationsWidget_OnAlterationSlotIndexModifiedBP) == 0x000004, "Wrong alignment on FortAlterationsWidget_OnAlterationSlotIndexModifiedBP");
static_assert(sizeof(FortAlterationsWidget_OnAlterationSlotIndexModifiedBP) == 0x000004, "Wrong size on FortAlterationsWidget_OnAlterationSlotIndexModifiedBP");
static_assert(offsetof(FortAlterationsWidget_OnAlterationSlotIndexModifiedBP, ModifiedIndex) == 0x000000, "Member 'FortAlterationsWidget_OnAlterationSlotIndexModifiedBP::ModifiedIndex' has a wrong offset!");

// Function FortniteUI.FortAlterationsWidget.OnGenerateAlteration
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationsWidget_OnGenerateAlteration final
{
public:
	class UFortAlterationInfo*                    AlterationInfo;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationsWidget_OnGenerateAlteration) == 0x000008, "Wrong alignment on FortAlterationsWidget_OnGenerateAlteration");
static_assert(sizeof(FortAlterationsWidget_OnGenerateAlteration) == 0x000008, "Wrong size on FortAlterationsWidget_OnGenerateAlteration");
static_assert(offsetof(FortAlterationsWidget_OnGenerateAlteration, AlterationInfo) == 0x000000, "Member 'FortAlterationsWidget_OnGenerateAlteration::AlterationInfo' has a wrong offset!");

// Function FortniteUI.FortAlterationsWidget.OnItemChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationsWidget_OnItemChanged final
{
public:
	bool                                          bIntroAlterations;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationsWidget_OnItemChanged) == 0x000001, "Wrong alignment on FortAlterationsWidget_OnItemChanged");
static_assert(sizeof(FortAlterationsWidget_OnItemChanged) == 0x000001, "Wrong size on FortAlterationsWidget_OnItemChanged");
static_assert(offsetof(FortAlterationsWidget_OnItemChanged, bIntroAlterations) == 0x000000, "Member 'FortAlterationsWidget_OnItemChanged::bIntroAlterations' has a wrong offset!");

// Function FortniteUI.FortAlterationsWidget.SetItem
// 0x0010 (0x0010 - 0x0000)
struct FortAlterationsWidget_SetItem final
{
public:
	class UFortItem*                              InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPreviewNewAlterations;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntroAlterations;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAlterationsWidget_SetItem) == 0x000008, "Wrong alignment on FortAlterationsWidget_SetItem");
static_assert(sizeof(FortAlterationsWidget_SetItem) == 0x000010, "Wrong size on FortAlterationsWidget_SetItem");
static_assert(offsetof(FortAlterationsWidget_SetItem, InItem) == 0x000000, "Member 'FortAlterationsWidget_SetItem::InItem' has a wrong offset!");
static_assert(offsetof(FortAlterationsWidget_SetItem, bInPreviewNewAlterations) == 0x000008, "Member 'FortAlterationsWidget_SetItem::bInPreviewNewAlterations' has a wrong offset!");
static_assert(offsetof(FortAlterationsWidget_SetItem, bIntroAlterations) == 0x000009, "Member 'FortAlterationsWidget_SetItem::bIntroAlterations' has a wrong offset!");

// Function FortniteUI.FortAlterationsWidget.SetItemToCompareWith
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationsWidget_SetItemToCompareWith final
{
public:
	class UFortItem*                              InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationsWidget_SetItemToCompareWith) == 0x000008, "Wrong alignment on FortAlterationsWidget_SetItemToCompareWith");
static_assert(sizeof(FortAlterationsWidget_SetItemToCompareWith) == 0x000008, "Wrong size on FortAlterationsWidget_SetItemToCompareWith");
static_assert(offsetof(FortAlterationsWidget_SetItemToCompareWith, InItem) == 0x000000, "Member 'FortAlterationsWidget_SetItemToCompareWith::InItem' has a wrong offset!");

// Function FortniteUI.FortAlterationsWidget.SetState
// 0x0001 (0x0001 - 0x0000)
struct FortAlterationsWidget_SetState final
{
public:
	EFortAlterationWidgetState                    InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationsWidget_SetState) == 0x000001, "Wrong alignment on FortAlterationsWidget_SetState");
static_assert(sizeof(FortAlterationsWidget_SetState) == 0x000001, "Wrong size on FortAlterationsWidget_SetState");
static_assert(offsetof(FortAlterationsWidget_SetState, InState) == 0x000000, "Member 'FortAlterationsWidget_SetState::InState' has a wrong offset!");

// Function FortniteUI.FortAlterationsWidget.SetupInteractionEvents
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationsWidget_SetupInteractionEvents final
{
public:
	class UFortAlterationButtonWidget*            Buttion;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationsWidget_SetupInteractionEvents) == 0x000008, "Wrong alignment on FortAlterationsWidget_SetupInteractionEvents");
static_assert(sizeof(FortAlterationsWidget_SetupInteractionEvents) == 0x000008, "Wrong size on FortAlterationsWidget_SetupInteractionEvents");
static_assert(offsetof(FortAlterationsWidget_SetupInteractionEvents, Buttion) == 0x000000, "Member 'FortAlterationsWidget_SetupInteractionEvents::Buttion' has a wrong offset!");

// Function FortniteUI.FortCreativeSettingsFlow.HasActiveModalWidget
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeSettingsFlow_HasActiveModalWidget final
{
public:
	bool                                          OutWidgetActive;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeSettingsFlow_HasActiveModalWidget) == 0x000001, "Wrong alignment on FortCreativeSettingsFlow_HasActiveModalWidget");
static_assert(sizeof(FortCreativeSettingsFlow_HasActiveModalWidget) == 0x000001, "Wrong size on FortCreativeSettingsFlow_HasActiveModalWidget");
static_assert(offsetof(FortCreativeSettingsFlow_HasActiveModalWidget, OutWidgetActive) == 0x000000, "Member 'FortCreativeSettingsFlow_HasActiveModalWidget::OutWidgetActive' has a wrong offset!");

// Function FortniteUI.FortAlterationWidget.Setup
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationWidget_Setup final
{
public:
	class UFortAlterationInfo*                    InAlterationInfo;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationWidget_Setup) == 0x000008, "Wrong alignment on FortAlterationWidget_Setup");
static_assert(sizeof(FortAlterationWidget_Setup) == 0x000008, "Wrong size on FortAlterationWidget_Setup");
static_assert(offsetof(FortAlterationWidget_Setup, InAlterationInfo) == 0x000000, "Member 'FortAlterationWidget_Setup::InAlterationInfo' has a wrong offset!");

// Function FortniteUI.FortAlterationWidget.GetAlterationInfo
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationWidget_GetAlterationInfo final
{
public:
	class UFortAlterationInfo*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationWidget_GetAlterationInfo) == 0x000008, "Wrong alignment on FortAlterationWidget_GetAlterationInfo");
static_assert(sizeof(FortAlterationWidget_GetAlterationInfo) == 0x000008, "Wrong size on FortAlterationWidget_GetAlterationInfo");
static_assert(offsetof(FortAlterationWidget_GetAlterationInfo, ReturnValue) == 0x000000, "Member 'FortAlterationWidget_GetAlterationInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAnnouncementWidget.AnnouncementStopped
// 0x0008 (0x0008 - 0x0000)
struct FortAnnouncementWidget_AnnouncementStopped final
{
public:
	class AFortClientAnnouncement*                Announcement;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnnouncementWidget_AnnouncementStopped) == 0x000008, "Wrong alignment on FortAnnouncementWidget_AnnouncementStopped");
static_assert(sizeof(FortAnnouncementWidget_AnnouncementStopped) == 0x000008, "Wrong size on FortAnnouncementWidget_AnnouncementStopped");
static_assert(offsetof(FortAnnouncementWidget_AnnouncementStopped, Announcement) == 0x000000, "Member 'FortAnnouncementWidget_AnnouncementStopped::Announcement' has a wrong offset!");

// Function FortniteUI.FortAnnouncementWidget.BindUpdateEvents
// 0x0008 (0x0008 - 0x0000)
struct FortAnnouncementWidget_BindUpdateEvents final
{
public:
	class AFortClientAnnouncement*                Announcement;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnnouncementWidget_BindUpdateEvents) == 0x000008, "Wrong alignment on FortAnnouncementWidget_BindUpdateEvents");
static_assert(sizeof(FortAnnouncementWidget_BindUpdateEvents) == 0x000008, "Wrong size on FortAnnouncementWidget_BindUpdateEvents");
static_assert(offsetof(FortAnnouncementWidget_BindUpdateEvents, Announcement) == 0x000000, "Member 'FortAnnouncementWidget_BindUpdateEvents::Announcement' has a wrong offset!");

// Function FortniteUI.FortAnnouncementWidget.FindFirstUnboundAction
// 0x0020 (0x0020 - 0x0000)
struct FortAnnouncementWidget_FindFirstUnboundAction final
{
public:
	class FText                                   AnnouncementBody;                                  // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnnouncementWidget_FindFirstUnboundAction) == 0x000008, "Wrong alignment on FortAnnouncementWidget_FindFirstUnboundAction");
static_assert(sizeof(FortAnnouncementWidget_FindFirstUnboundAction) == 0x000020, "Wrong size on FortAnnouncementWidget_FindFirstUnboundAction");
static_assert(offsetof(FortAnnouncementWidget_FindFirstUnboundAction, AnnouncementBody) == 0x000000, "Member 'FortAnnouncementWidget_FindFirstUnboundAction::AnnouncementBody' has a wrong offset!");
static_assert(offsetof(FortAnnouncementWidget_FindFirstUnboundAction, ReturnValue) == 0x000018, "Member 'FortAnnouncementWidget_FindFirstUnboundAction::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAnnouncementWidget.UpdateWidgetData
// 0x0008 (0x0008 - 0x0000)
struct FortAnnouncementWidget_UpdateWidgetData final
{
public:
	class AFortClientAnnouncement*                Announcement;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnnouncementWidget_UpdateWidgetData) == 0x000008, "Wrong alignment on FortAnnouncementWidget_UpdateWidgetData");
static_assert(sizeof(FortAnnouncementWidget_UpdateWidgetData) == 0x000008, "Wrong size on FortAnnouncementWidget_UpdateWidgetData");
static_assert(offsetof(FortAnnouncementWidget_UpdateWidgetData, Announcement) == 0x000000, "Member 'FortAnnouncementWidget_UpdateWidgetData::Announcement' has a wrong offset!");

// Function FortniteUI.FortAnnouncementWidget.GetTextForAction
// 0x0020 (0x0020 - 0x0000)
struct FortAnnouncementWidget_GetTextForAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnnouncementWidget_GetTextForAction) == 0x000008, "Wrong alignment on FortAnnouncementWidget_GetTextForAction");
static_assert(sizeof(FortAnnouncementWidget_GetTextForAction) == 0x000020, "Wrong size on FortAnnouncementWidget_GetTextForAction");
static_assert(offsetof(FortAnnouncementWidget_GetTextForAction, ActionName) == 0x000000, "Member 'FortAnnouncementWidget_GetTextForAction::ActionName' has a wrong offset!");
static_assert(offsetof(FortAnnouncementWidget_GetTextForAction, ReturnValue) == 0x000008, "Member 'FortAnnouncementWidget_GetTextForAction::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookWidget.OnCollectionBookPageClicked
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookWidget_OnCollectionBookPageClicked final
{
public:
	const class UFortCollectionBookPage*          ClickedPage;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookWidget_OnCollectionBookPageClicked) == 0x000008, "Wrong alignment on FortCollectionBookWidget_OnCollectionBookPageClicked");
static_assert(sizeof(FortCollectionBookWidget_OnCollectionBookPageClicked) == 0x000008, "Wrong size on FortCollectionBookWidget_OnCollectionBookPageClicked");
static_assert(offsetof(FortCollectionBookWidget_OnCollectionBookPageClicked, ClickedPage) == 0x000000, "Member 'FortCollectionBookWidget_OnCollectionBookPageClicked::ClickedPage' has a wrong offset!");

// Function FortniteUI.FortCollectionBookWidget.OnCollectionBookPageSelected
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookWidget_OnCollectionBookPageSelected final
{
public:
	const class UFortCollectionBookPage*          SelectedPage;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookWidget_OnCollectionBookPageSelected) == 0x000008, "Wrong alignment on FortCollectionBookWidget_OnCollectionBookPageSelected");
static_assert(sizeof(FortCollectionBookWidget_OnCollectionBookPageSelected) == 0x000008, "Wrong size on FortCollectionBookWidget_OnCollectionBookPageSelected");
static_assert(offsetof(FortCollectionBookWidget_OnCollectionBookPageSelected, SelectedPage) == 0x000000, "Member 'FortCollectionBookWidget_OnCollectionBookPageSelected::SelectedPage' has a wrong offset!");

// Function FortniteUI.FortCollectionBookWidget.OnCollectionBookSectionClicked
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookWidget_OnCollectionBookSectionClicked final
{
public:
	const class UFortCollectionBookSection*       ClickedSection;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookWidget_OnCollectionBookSectionClicked) == 0x000008, "Wrong alignment on FortCollectionBookWidget_OnCollectionBookSectionClicked");
static_assert(sizeof(FortCollectionBookWidget_OnCollectionBookSectionClicked) == 0x000008, "Wrong size on FortCollectionBookWidget_OnCollectionBookSectionClicked");
static_assert(offsetof(FortCollectionBookWidget_OnCollectionBookSectionClicked, ClickedSection) == 0x000000, "Member 'FortCollectionBookWidget_OnCollectionBookSectionClicked::ClickedSection' has a wrong offset!");

// Function FortniteUI.FortCollectionBookWidget.OnPreviewXPChangeRequest
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookWidget_OnPreviewXPChangeRequest final
{
public:
	int32                                         XPChange;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookWidget_OnPreviewXPChangeRequest) == 0x000004, "Wrong alignment on FortCollectionBookWidget_OnPreviewXPChangeRequest");
static_assert(sizeof(FortCollectionBookWidget_OnPreviewXPChangeRequest) == 0x000004, "Wrong size on FortCollectionBookWidget_OnPreviewXPChangeRequest");
static_assert(offsetof(FortCollectionBookWidget_OnPreviewXPChangeRequest, XPChange) == 0x000000, "Member 'FortCollectionBookWidget_OnPreviewXPChangeRequest::XPChange' has a wrong offset!");

// Function FortniteUI.FortArenaLoadingScreen.UpdateBackground
// 0x0004 (0x0004 - 0x0000)
struct FortArenaLoadingScreen_UpdateBackground final
{
public:
	int32                                         DivisionRank;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortArenaLoadingScreen_UpdateBackground) == 0x000004, "Wrong alignment on FortArenaLoadingScreen_UpdateBackground");
static_assert(sizeof(FortArenaLoadingScreen_UpdateBackground) == 0x000004, "Wrong size on FortArenaLoadingScreen_UpdateBackground");
static_assert(offsetof(FortArenaLoadingScreen_UpdateBackground, DivisionRank) == 0x000000, "Member 'FortArenaLoadingScreen_UpdateBackground::DivisionRank' has a wrong offset!");

// Function FortniteUI.FortTabButtonInterface.SetTabLabelInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FortTabButtonInterface_SetTabLabelInfo final
{
public:
	struct FFortTabButtonLabelInfo                TabLabelInfo;                                      // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTabButtonInterface_SetTabLabelInfo) == 0x000008, "Wrong alignment on FortTabButtonInterface_SetTabLabelInfo");
static_assert(sizeof(FortTabButtonInterface_SetTabLabelInfo) == 0x0000A0, "Wrong size on FortTabButtonInterface_SetTabLabelInfo");
static_assert(offsetof(FortTabButtonInterface_SetTabLabelInfo, TabLabelInfo) == 0x000000, "Member 'FortTabButtonInterface_SetTabLabelInfo::TabLabelInfo' has a wrong offset!");

// Function FortniteUI.FortAsyncAction_CheckForStwMfaReward.CheckForStwMfaReward
// 0x0010 (0x0010 - 0x0000)
struct FortAsyncAction_CheckForStwMfaReward_CheckForStwMfaReward final
{
public:
	class AFortPlayerController*                  Param_PlayerController;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_CheckForStwMfaReward*  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_CheckForStwMfaReward_CheckForStwMfaReward) == 0x000008, "Wrong alignment on FortAsyncAction_CheckForStwMfaReward_CheckForStwMfaReward");
static_assert(sizeof(FortAsyncAction_CheckForStwMfaReward_CheckForStwMfaReward) == 0x000010, "Wrong size on FortAsyncAction_CheckForStwMfaReward_CheckForStwMfaReward");
static_assert(offsetof(FortAsyncAction_CheckForStwMfaReward_CheckForStwMfaReward, Param_PlayerController) == 0x000000, "Member 'FortAsyncAction_CheckForStwMfaReward_CheckForStwMfaReward::Param_PlayerController' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_CheckForStwMfaReward_CheckForStwMfaReward, ReturnValue) == 0x000008, "Member 'FortAsyncAction_CheckForStwMfaReward_CheckForStwMfaReward::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.MovePlayerRegionTick
// 0x003C (0x003C - 0x0000)
struct FortTouchControlRegion_MovePlayerRegionTick final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_MovePlayerRegionTick) == 0x000004, "Wrong alignment on FortTouchControlRegion_MovePlayerRegionTick");
static_assert(sizeof(FortTouchControlRegion_MovePlayerRegionTick) == 0x00003C, "Wrong size on FortTouchControlRegion_MovePlayerRegionTick");
static_assert(offsetof(FortTouchControlRegion_MovePlayerRegionTick, InGeometry) == 0x000000, "Member 'FortTouchControlRegion_MovePlayerRegionTick::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_MovePlayerRegionTick, DeltaTime) == 0x000038, "Member 'FortTouchControlRegion_MovePlayerRegionTick::DeltaTime' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnAdditionalTouchEnded
// 0x00A8 (0x00A8 - 0x0000)
struct FortTouchControlRegion_OnAdditionalTouchEnded final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InGestureEvent;                                    // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnAdditionalTouchEnded) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnAdditionalTouchEnded");
static_assert(sizeof(FortTouchControlRegion_OnAdditionalTouchEnded) == 0x0000A8, "Wrong size on FortTouchControlRegion_OnAdditionalTouchEnded");
static_assert(offsetof(FortTouchControlRegion_OnAdditionalTouchEnded, InGeometry) == 0x000000, "Member 'FortTouchControlRegion_OnAdditionalTouchEnded::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnAdditionalTouchEnded, InGestureEvent) == 0x000038, "Member 'FortTouchControlRegion_OnAdditionalTouchEnded::InGestureEvent' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnAdditionalTouchLost
// 0x0004 (0x0004 - 0x0000)
struct FortTouchControlRegion_OnAdditionalTouchLost final
{
public:
	int32                                         PointerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnAdditionalTouchLost) == 0x000004, "Wrong alignment on FortTouchControlRegion_OnAdditionalTouchLost");
static_assert(sizeof(FortTouchControlRegion_OnAdditionalTouchLost) == 0x000004, "Wrong size on FortTouchControlRegion_OnAdditionalTouchLost");
static_assert(offsetof(FortTouchControlRegion_OnAdditionalTouchLost, PointerIndex) == 0x000000, "Member 'FortTouchControlRegion_OnAdditionalTouchLost::PointerIndex' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnAdditionalTouchStarted
// 0x00A8 (0x00A8 - 0x0000)
struct FortTouchControlRegion_OnAdditionalTouchStarted final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InGestureEvent;                                    // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnAdditionalTouchStarted) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnAdditionalTouchStarted");
static_assert(sizeof(FortTouchControlRegion_OnAdditionalTouchStarted) == 0x0000A8, "Wrong size on FortTouchControlRegion_OnAdditionalTouchStarted");
static_assert(offsetof(FortTouchControlRegion_OnAdditionalTouchStarted, InGeometry) == 0x000000, "Member 'FortTouchControlRegion_OnAdditionalTouchStarted::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnAdditionalTouchStarted, InGestureEvent) == 0x000038, "Member 'FortTouchControlRegion_OnAdditionalTouchStarted::InGestureEvent' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnBuildModeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortTouchControlRegion_OnBuildModeChanged final
{
public:
	bool                                          bBuildModeEnabled;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnBuildModeChanged) == 0x000001, "Wrong alignment on FortTouchControlRegion_OnBuildModeChanged");
static_assert(sizeof(FortTouchControlRegion_OnBuildModeChanged) == 0x000001, "Wrong size on FortTouchControlRegion_OnBuildModeChanged");
static_assert(offsetof(FortTouchControlRegion_OnBuildModeChanged, bBuildModeEnabled) == 0x000000, "Member 'FortTouchControlRegion_OnBuildModeChanged::bBuildModeEnabled' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnCursorModeChanged
// 0x0018 (0x0018 - 0x0000)
struct FortTouchControlRegion_OnCursorModeChanged final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CustomWidget;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnCursorModeChanged) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnCursorModeChanged");
static_assert(sizeof(FortTouchControlRegion_OnCursorModeChanged) == 0x000018, "Wrong size on FortTouchControlRegion_OnCursorModeChanged");
static_assert(offsetof(FortTouchControlRegion_OnCursorModeChanged, bCursorModeEnabled) == 0x000000, "Member 'FortTouchControlRegion_OnCursorModeChanged::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnCursorModeChanged, ActionName) == 0x000004, "Member 'FortTouchControlRegion_OnCursorModeChanged::ActionName' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnCursorModeChanged, CustomWidget) == 0x000010, "Member 'FortTouchControlRegion_OnCursorModeChanged::CustomWidget' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnMovePlayerRegionTouchEnded
// 0x00A8 (0x00A8 - 0x0000)
struct FortTouchControlRegion_OnMovePlayerRegionTouchEnded final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InGestureEvent;                                    // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnMovePlayerRegionTouchEnded) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnMovePlayerRegionTouchEnded");
static_assert(sizeof(FortTouchControlRegion_OnMovePlayerRegionTouchEnded) == 0x0000A8, "Wrong size on FortTouchControlRegion_OnMovePlayerRegionTouchEnded");
static_assert(offsetof(FortTouchControlRegion_OnMovePlayerRegionTouchEnded, InGeometry) == 0x000000, "Member 'FortTouchControlRegion_OnMovePlayerRegionTouchEnded::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnMovePlayerRegionTouchEnded, InGestureEvent) == 0x000038, "Member 'FortTouchControlRegion_OnMovePlayerRegionTouchEnded::InGestureEvent' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnMovePlayerRegionTouchLost
// 0x0004 (0x0004 - 0x0000)
struct FortTouchControlRegion_OnMovePlayerRegionTouchLost final
{
public:
	int32                                         PointerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnMovePlayerRegionTouchLost) == 0x000004, "Wrong alignment on FortTouchControlRegion_OnMovePlayerRegionTouchLost");
static_assert(sizeof(FortTouchControlRegion_OnMovePlayerRegionTouchLost) == 0x000004, "Wrong size on FortTouchControlRegion_OnMovePlayerRegionTouchLost");
static_assert(offsetof(FortTouchControlRegion_OnMovePlayerRegionTouchLost, PointerIndex) == 0x000000, "Member 'FortTouchControlRegion_OnMovePlayerRegionTouchLost::PointerIndex' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnMovePlayerRegionTouchMoved
// 0x00A8 (0x00A8 - 0x0000)
struct FortTouchControlRegion_OnMovePlayerRegionTouchMoved final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InGestureEvent;                                    // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnMovePlayerRegionTouchMoved) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnMovePlayerRegionTouchMoved");
static_assert(sizeof(FortTouchControlRegion_OnMovePlayerRegionTouchMoved) == 0x0000A8, "Wrong size on FortTouchControlRegion_OnMovePlayerRegionTouchMoved");
static_assert(offsetof(FortTouchControlRegion_OnMovePlayerRegionTouchMoved, InGeometry) == 0x000000, "Member 'FortTouchControlRegion_OnMovePlayerRegionTouchMoved::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnMovePlayerRegionTouchMoved, InGestureEvent) == 0x000038, "Member 'FortTouchControlRegion_OnMovePlayerRegionTouchMoved::InGestureEvent' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnMovePlayerRegionTouchStarted
// 0x00A8 (0x00A8 - 0x0000)
struct FortTouchControlRegion_OnMovePlayerRegionTouchStarted final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InGestureEvent;                                    // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnMovePlayerRegionTouchStarted) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnMovePlayerRegionTouchStarted");
static_assert(sizeof(FortTouchControlRegion_OnMovePlayerRegionTouchStarted) == 0x0000A8, "Wrong size on FortTouchControlRegion_OnMovePlayerRegionTouchStarted");
static_assert(offsetof(FortTouchControlRegion_OnMovePlayerRegionTouchStarted, InGeometry) == 0x000000, "Member 'FortTouchControlRegion_OnMovePlayerRegionTouchStarted::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnMovePlayerRegionTouchStarted, InGestureEvent) == 0x000038, "Member 'FortTouchControlRegion_OnMovePlayerRegionTouchStarted::InGestureEvent' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnRegionTouchEnded
// 0x00B0 (0x00B0 - 0x0000)
struct FortTouchControlRegion_OnRegionTouchEnded final
{
public:
	EFortTouchControlRegion                       Region;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              InGeometry;                                        // 0x0004(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          InGestureEvent;                                    // 0x0040(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnRegionTouchEnded) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnRegionTouchEnded");
static_assert(sizeof(FortTouchControlRegion_OnRegionTouchEnded) == 0x0000B0, "Wrong size on FortTouchControlRegion_OnRegionTouchEnded");
static_assert(offsetof(FortTouchControlRegion_OnRegionTouchEnded, Region) == 0x000000, "Member 'FortTouchControlRegion_OnRegionTouchEnded::Region' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnRegionTouchEnded, InGeometry) == 0x000004, "Member 'FortTouchControlRegion_OnRegionTouchEnded::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnRegionTouchEnded, InGestureEvent) == 0x000040, "Member 'FortTouchControlRegion_OnRegionTouchEnded::InGestureEvent' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnRegionTouchMoved
// 0x00B8 (0x00B8 - 0x0000)
struct FortTouchControlRegion_OnRegionTouchMoved final
{
public:
	EFortTouchControlRegion                       Region;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              InGeometry;                                        // 0x0004(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          InGestureEvent;                                    // 0x0040(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              MoveDelta;                                         // 0x00B0(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnRegionTouchMoved) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnRegionTouchMoved");
static_assert(sizeof(FortTouchControlRegion_OnRegionTouchMoved) == 0x0000B8, "Wrong size on FortTouchControlRegion_OnRegionTouchMoved");
static_assert(offsetof(FortTouchControlRegion_OnRegionTouchMoved, Region) == 0x000000, "Member 'FortTouchControlRegion_OnRegionTouchMoved::Region' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnRegionTouchMoved, InGeometry) == 0x000004, "Member 'FortTouchControlRegion_OnRegionTouchMoved::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnRegionTouchMoved, InGestureEvent) == 0x000040, "Member 'FortTouchControlRegion_OnRegionTouchMoved::InGestureEvent' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnRegionTouchMoved, MoveDelta) == 0x0000B0, "Member 'FortTouchControlRegion_OnRegionTouchMoved::MoveDelta' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnRegionTouchStarted
// 0x00B0 (0x00B0 - 0x0000)
struct FortTouchControlRegion_OnRegionTouchStarted final
{
public:
	EFortTouchControlRegion                       Region;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              InGeometry;                                        // 0x0004(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          InGestureEvent;                                    // 0x0040(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnRegionTouchStarted) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnRegionTouchStarted");
static_assert(sizeof(FortTouchControlRegion_OnRegionTouchStarted) == 0x0000B0, "Wrong size on FortTouchControlRegion_OnRegionTouchStarted");
static_assert(offsetof(FortTouchControlRegion_OnRegionTouchStarted, Region) == 0x000000, "Member 'FortTouchControlRegion_OnRegionTouchStarted::Region' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnRegionTouchStarted, InGeometry) == 0x000004, "Member 'FortTouchControlRegion_OnRegionTouchStarted::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnRegionTouchStarted, InGestureEvent) == 0x000040, "Member 'FortTouchControlRegion_OnRegionTouchStarted::InGestureEvent' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnRotatePlayerRegionTouchEnded
// 0x00A8 (0x00A8 - 0x0000)
struct FortTouchControlRegion_OnRotatePlayerRegionTouchEnded final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InGestureEvent;                                    // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnRotatePlayerRegionTouchEnded) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnRotatePlayerRegionTouchEnded");
static_assert(sizeof(FortTouchControlRegion_OnRotatePlayerRegionTouchEnded) == 0x0000A8, "Wrong size on FortTouchControlRegion_OnRotatePlayerRegionTouchEnded");
static_assert(offsetof(FortTouchControlRegion_OnRotatePlayerRegionTouchEnded, InGeometry) == 0x000000, "Member 'FortTouchControlRegion_OnRotatePlayerRegionTouchEnded::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnRotatePlayerRegionTouchEnded, InGestureEvent) == 0x000038, "Member 'FortTouchControlRegion_OnRotatePlayerRegionTouchEnded::InGestureEvent' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnRotatePlayerRegionTouchLost
// 0x0004 (0x0004 - 0x0000)
struct FortTouchControlRegion_OnRotatePlayerRegionTouchLost final
{
public:
	int32                                         PointerIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnRotatePlayerRegionTouchLost) == 0x000004, "Wrong alignment on FortTouchControlRegion_OnRotatePlayerRegionTouchLost");
static_assert(sizeof(FortTouchControlRegion_OnRotatePlayerRegionTouchLost) == 0x000004, "Wrong size on FortTouchControlRegion_OnRotatePlayerRegionTouchLost");
static_assert(offsetof(FortTouchControlRegion_OnRotatePlayerRegionTouchLost, PointerIndex) == 0x000000, "Member 'FortTouchControlRegion_OnRotatePlayerRegionTouchLost::PointerIndex' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnRotatePlayerRegionTouchMoved
// 0x00B0 (0x00B0 - 0x0000)
struct FortTouchControlRegion_OnRotatePlayerRegionTouchMoved final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InGestureEvent;                                    // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              MoveDelta;                                         // 0x00A8(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnRotatePlayerRegionTouchMoved) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnRotatePlayerRegionTouchMoved");
static_assert(sizeof(FortTouchControlRegion_OnRotatePlayerRegionTouchMoved) == 0x0000B0, "Wrong size on FortTouchControlRegion_OnRotatePlayerRegionTouchMoved");
static_assert(offsetof(FortTouchControlRegion_OnRotatePlayerRegionTouchMoved, InGeometry) == 0x000000, "Member 'FortTouchControlRegion_OnRotatePlayerRegionTouchMoved::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnRotatePlayerRegionTouchMoved, InGestureEvent) == 0x000038, "Member 'FortTouchControlRegion_OnRotatePlayerRegionTouchMoved::InGestureEvent' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnRotatePlayerRegionTouchMoved, MoveDelta) == 0x0000A8, "Member 'FortTouchControlRegion_OnRotatePlayerRegionTouchMoved::MoveDelta' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.OnRotatePlayerRegionTouchStarted
// 0x00A8 (0x00A8 - 0x0000)
struct FortTouchControlRegion_OnRotatePlayerRegionTouchStarted final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InGestureEvent;                                    // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_OnRotatePlayerRegionTouchStarted) == 0x000008, "Wrong alignment on FortTouchControlRegion_OnRotatePlayerRegionTouchStarted");
static_assert(sizeof(FortTouchControlRegion_OnRotatePlayerRegionTouchStarted) == 0x0000A8, "Wrong size on FortTouchControlRegion_OnRotatePlayerRegionTouchStarted");
static_assert(offsetof(FortTouchControlRegion_OnRotatePlayerRegionTouchStarted, InGeometry) == 0x000000, "Member 'FortTouchControlRegion_OnRotatePlayerRegionTouchStarted::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_OnRotatePlayerRegionTouchStarted, InGestureEvent) == 0x000038, "Member 'FortTouchControlRegion_OnRotatePlayerRegionTouchStarted::InGestureEvent' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.RotatePlayerRegionTick
// 0x003C (0x003C - 0x0000)
struct FortTouchControlRegion_RotatePlayerRegionTick final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_RotatePlayerRegionTick) == 0x000004, "Wrong alignment on FortTouchControlRegion_RotatePlayerRegionTick");
static_assert(sizeof(FortTouchControlRegion_RotatePlayerRegionTick) == 0x00003C, "Wrong size on FortTouchControlRegion_RotatePlayerRegionTick");
static_assert(offsetof(FortTouchControlRegion_RotatePlayerRegionTick, InGeometry) == 0x000000, "Member 'FortTouchControlRegion_RotatePlayerRegionTick::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_RotatePlayerRegionTick, DeltaTime) == 0x000038, "Member 'FortTouchControlRegion_RotatePlayerRegionTick::DeltaTime' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.SetFeedbackPosition
// 0x00A8 (0x00A8 - 0x0000)
struct FortTouchControlRegion_SetFeedbackPosition final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InGestureEvent;                                    // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_SetFeedbackPosition) == 0x000008, "Wrong alignment on FortTouchControlRegion_SetFeedbackPosition");
static_assert(sizeof(FortTouchControlRegion_SetFeedbackPosition) == 0x0000A8, "Wrong size on FortTouchControlRegion_SetFeedbackPosition");
static_assert(offsetof(FortTouchControlRegion_SetFeedbackPosition, InGeometry) == 0x000000, "Member 'FortTouchControlRegion_SetFeedbackPosition::InGeometry' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_SetFeedbackPosition, InGestureEvent) == 0x000038, "Member 'FortTouchControlRegion_SetFeedbackPosition::InGestureEvent' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.SetLockOnStickPosition
// 0x0008 (0x0008 - 0x0000)
struct FortTouchControlRegion_SetLockOnStickPosition final
{
public:
	struct FVector2D                              LocalPos;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_SetLockOnStickPosition) == 0x000004, "Wrong alignment on FortTouchControlRegion_SetLockOnStickPosition");
static_assert(sizeof(FortTouchControlRegion_SetLockOnStickPosition) == 0x000008, "Wrong size on FortTouchControlRegion_SetLockOnStickPosition");
static_assert(offsetof(FortTouchControlRegion_SetLockOnStickPosition, LocalPos) == 0x000000, "Member 'FortTouchControlRegion_SetLockOnStickPosition::LocalPos' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.SetMoveStickPos
// 0x0008 (0x0008 - 0x0000)
struct FortTouchControlRegion_SetMoveStickPos final
{
public:
	struct FVector2D                              NewMoveStickPos;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_SetMoveStickPos) == 0x000004, "Wrong alignment on FortTouchControlRegion_SetMoveStickPos");
static_assert(sizeof(FortTouchControlRegion_SetMoveStickPos) == 0x000008, "Wrong size on FortTouchControlRegion_SetMoveStickPos");
static_assert(offsetof(FortTouchControlRegion_SetMoveStickPos, NewMoveStickPos) == 0x000000, "Member 'FortTouchControlRegion_SetMoveStickPos::NewMoveStickPos' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.UpdateLockOnStickOrigin
// 0x000C (0x000C - 0x0000)
struct FortTouchControlRegion_UpdateLockOnStickOrigin final
{
public:
	struct FVector2D                              LocalPos;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTouchStartEvent;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTouchControlRegion_UpdateLockOnStickOrigin) == 0x000004, "Wrong alignment on FortTouchControlRegion_UpdateLockOnStickOrigin");
static_assert(sizeof(FortTouchControlRegion_UpdateLockOnStickOrigin) == 0x00000C, "Wrong size on FortTouchControlRegion_UpdateLockOnStickOrigin");
static_assert(offsetof(FortTouchControlRegion_UpdateLockOnStickOrigin, LocalPos) == 0x000000, "Member 'FortTouchControlRegion_UpdateLockOnStickOrigin::LocalPos' has a wrong offset!");
static_assert(offsetof(FortTouchControlRegion_UpdateLockOnStickOrigin, IsTouchStartEvent) == 0x000008, "Member 'FortTouchControlRegion_UpdateLockOnStickOrigin::IsTouchStartEvent' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.UpdateLockOnStickPosition
// 0x0008 (0x0008 - 0x0000)
struct FortTouchControlRegion_UpdateLockOnStickPosition final
{
public:
	struct FVector2D                              LocalPos;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_UpdateLockOnStickPosition) == 0x000004, "Wrong alignment on FortTouchControlRegion_UpdateLockOnStickPosition");
static_assert(sizeof(FortTouchControlRegion_UpdateLockOnStickPosition) == 0x000008, "Wrong size on FortTouchControlRegion_UpdateLockOnStickPosition");
static_assert(offsetof(FortTouchControlRegion_UpdateLockOnStickPosition, LocalPos) == 0x000000, "Member 'FortTouchControlRegion_UpdateLockOnStickPosition::LocalPos' has a wrong offset!");

// Function FortniteUI.FortTouchControlRegion.GetTouchStickRange
// 0x0004 (0x0004 - 0x0000)
struct FortTouchControlRegion_GetTouchStickRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchControlRegion_GetTouchStickRange) == 0x000004, "Wrong alignment on FortTouchControlRegion_GetTouchStickRange");
static_assert(sizeof(FortTouchControlRegion_GetTouchStickRange) == 0x000004, "Wrong size on FortTouchControlRegion_GetTouchStickRange");
static_assert(offsetof(FortTouchControlRegion_GetTouchStickRange, ReturnValue) == 0x000000, "Member 'FortTouchControlRegion_GetTouchStickRange::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAsyncAction_CreateWidgetAsync.CreateWidgetAsync
// 0x0048 (0x0048 - 0x0000)
struct FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   UserWidgetSoftClass;                               // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningPlayer;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuspendInputUntilComplete;                        // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAsyncAction_CreateWidgetAsync*     ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync) == 0x000008, "Wrong alignment on FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync");
static_assert(sizeof(FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync) == 0x000048, "Wrong size on FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync");
static_assert(offsetof(FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync, WorldContextObject) == 0x000000, "Member 'FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync, UserWidgetSoftClass) == 0x000008, "Member 'FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync::UserWidgetSoftClass' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync, OwningPlayer) == 0x000030, "Member 'FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync::OwningPlayer' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync, bSuspendInputUntilComplete) == 0x000038, "Member 'FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync::bSuspendInputUntilComplete' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync, ReturnValue) == 0x000040, "Member 'FortAsyncAction_CreateWidgetAsync_CreateWidgetAsync::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAsyncAction_LoadBannerAsset.AsyncLoadBannerAsset
// 0x0048 (0x0048 - 0x0000)
struct FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 AssetToLoad;                                       // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MIDRef;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BannerColorName;                                   // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_LoadBannerAsset*       ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset) == 0x000008, "Wrong alignment on FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset");
static_assert(sizeof(FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset) == 0x000048, "Wrong size on FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset");
static_assert(offsetof(FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset, WorldContextObject) == 0x000000, "Member 'FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset, AssetToLoad) == 0x000008, "Member 'FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset::AssetToLoad' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset, MIDRef) == 0x000030, "Member 'FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset::MIDRef' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset, BannerColorName) == 0x000038, "Member 'FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset::BannerColorName' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset, ReturnValue) == 0x000040, "Member 'FortAsyncAction_LoadBannerAsset_AsyncLoadBannerAsset::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAsyncAction_LoadCurrentSubgameProfiles.LoadCurrentSubgameProfiles
// 0x0010 (0x0010 - 0x0000)
struct FortAsyncAction_LoadCurrentSubgameProfiles_LoadCurrentSubgameProfiles final
{
public:
	class AFortPlayerController*                  Param_PlayerController;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_LoadCurrentSubgameProfiles* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_LoadCurrentSubgameProfiles_LoadCurrentSubgameProfiles) == 0x000008, "Wrong alignment on FortAsyncAction_LoadCurrentSubgameProfiles_LoadCurrentSubgameProfiles");
static_assert(sizeof(FortAsyncAction_LoadCurrentSubgameProfiles_LoadCurrentSubgameProfiles) == 0x000010, "Wrong size on FortAsyncAction_LoadCurrentSubgameProfiles_LoadCurrentSubgameProfiles");
static_assert(offsetof(FortAsyncAction_LoadCurrentSubgameProfiles_LoadCurrentSubgameProfiles, Param_PlayerController) == 0x000000, "Member 'FortAsyncAction_LoadCurrentSubgameProfiles_LoadCurrentSubgameProfiles::Param_PlayerController' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_LoadCurrentSubgameProfiles_LoadCurrentSubgameProfiles, ReturnValue) == 0x000008, "Member 'FortAsyncAction_LoadCurrentSubgameProfiles_LoadCurrentSubgameProfiles::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAsyncAction_SetUIState.SetUIState
// 0x0018 (0x0018 - 0x0000)
struct FortAsyncAction_SetUIState_SetUIState final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIState                                  DesiredState;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAsyncAction_SetUIState*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_SetUIState_SetUIState) == 0x000008, "Wrong alignment on FortAsyncAction_SetUIState_SetUIState");
static_assert(sizeof(FortAsyncAction_SetUIState_SetUIState) == 0x000018, "Wrong size on FortAsyncAction_SetUIState_SetUIState");
static_assert(offsetof(FortAsyncAction_SetUIState_SetUIState, InWorldContextObject) == 0x000000, "Member 'FortAsyncAction_SetUIState_SetUIState::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SetUIState_SetUIState, DesiredState) == 0x000008, "Member 'FortAsyncAction_SetUIState_SetUIState::DesiredState' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SetUIState_SetUIState, ReturnValue) == 0x000010, "Member 'FortAsyncAction_SetUIState_SetUIState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAsyncAction_ShowAdvancedLatentConfirmation_NUI.ShowAdvancedLatentActionConfirmation
// 0x00F0 (0x00F0 - 0x0000)
struct FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0008(0x0088)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0090(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   MESSAGE;                                           // 0x00A8(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FConfirmationDialogAction>      ConfirmButtonInputActions;                         // 0x00C0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   DeclineButtonInputAction;                          // 0x00D0(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AdditionalContent;                                 // 0x00D8(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                LeftAdditionalContent;                             // 0x00E0(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI* ReturnValue;                                       // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation) == 0x000008, "Wrong alignment on FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation");
static_assert(sizeof(FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation) == 0x0000F0, "Wrong size on FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation");
static_assert(offsetof(FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation, InWorldContextObject) == 0x000000, "Member 'FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation, Icon) == 0x000008, "Member 'FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation::Icon' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation, Title) == 0x000090, "Member 'FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation::Title' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation, MESSAGE) == 0x0000A8, "Member 'FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation::MESSAGE' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation, ConfirmButtonInputActions) == 0x0000C0, "Member 'FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation::ConfirmButtonInputActions' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation, DeclineButtonInputAction) == 0x0000D0, "Member 'FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation::DeclineButtonInputAction' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation, AdditionalContent) == 0x0000D8, "Member 'FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation::AdditionalContent' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation, LeftAdditionalContent) == 0x0000E0, "Member 'FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation::LeftAdditionalContent' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation, ReturnValue) == 0x0000E8, "Member 'FortAsyncAction_ShowAdvancedLatentConfirmation_NUI_ShowAdvancedLatentActionConfirmation::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAsyncAction_ShowConfirmation_NUI.ShowConfirmationDialog_NUI
// 0x00F0 (0x00F0 - 0x0000)
struct FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0008(0x0088)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0090(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   MESSAGE;                                           // 0x00A8(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FConfirmationDialogAction>      ConfirmButtonInputActions;                         // 0x00C0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   DeclineButtonInputAction;                          // 0x00D0(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AdditionalContent;                                 // 0x00D8(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                LeftAdditionalContent;                             // 0x00E0(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_ShowConfirmation_NUI*  ReturnValue;                                       // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI) == 0x000008, "Wrong alignment on FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI");
static_assert(sizeof(FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI) == 0x0000F0, "Wrong size on FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI, InWorldContextObject) == 0x000000, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI, Icon) == 0x000008, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI::Icon' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI, Title) == 0x000090, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI::Title' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI, MESSAGE) == 0x0000A8, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI::MESSAGE' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI, ConfirmButtonInputActions) == 0x0000C0, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI::ConfirmButtonInputActions' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI, DeclineButtonInputAction) == 0x0000D0, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI::DeclineButtonInputAction' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI, AdditionalContent) == 0x0000D8, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI::AdditionalContent' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI, LeftAdditionalContent) == 0x0000E0, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI::LeftAdditionalContent' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI, ReturnValue) == 0x0000E8, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowConfirmationDialog_NUI::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAsyncAction_ShowConfirmation_NUI.ShowSimpleConfirmationDialog_CustomInput
// 0x00F0 (0x00F0 - 0x0000)
struct FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0008(0x0088)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0090(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   MESSAGE;                                           // 0x00A8(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FName                                   ConfirmAction;                                     // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DeclineAction;                                     // 0x00C8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AdditionalContent;                                 // 0x00D0(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                LeftAdditionalContent;                             // 0x00D8(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cancelable;                                        // 0x00E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAsyncAction_ShowConfirmation_NUI*  ReturnValue;                                       // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput) == 0x000008, "Wrong alignment on FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput");
static_assert(sizeof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput) == 0x0000F0, "Wrong size on FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput, InWorldContextObject) == 0x000000, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput, Icon) == 0x000008, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput::Icon' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput, Title) == 0x000090, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput::Title' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput, MESSAGE) == 0x0000A8, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput::MESSAGE' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput, ConfirmAction) == 0x0000C0, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput::ConfirmAction' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput, DeclineAction) == 0x0000C8, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput::DeclineAction' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput, AdditionalContent) == 0x0000D0, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput::AdditionalContent' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput, LeftAdditionalContent) == 0x0000D8, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput::LeftAdditionalContent' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput, Cancelable) == 0x0000E0, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput::Cancelable' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput, ReturnValue) == 0x0000E8, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_CustomInput::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAsyncAction_ShowConfirmation_NUI.ShowSimpleConfirmationDialog_NUI
// 0x00E0 (0x00E0 - 0x0000)
struct FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0008(0x0088)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0090(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   MESSAGE;                                           // 0x00A8(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bShowConfirm;                                      // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDecline;                                      // 0x00C1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                AdditionalContent;                                 // 0x00C8(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                LeftAdditionalContent;                             // 0x00D0(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_ShowConfirmation_NUI*  ReturnValue;                                       // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI) == 0x000008, "Wrong alignment on FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI");
static_assert(sizeof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI) == 0x0000E0, "Wrong size on FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI, InWorldContextObject) == 0x000000, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI, Icon) == 0x000008, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI::Icon' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI, Title) == 0x000090, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI::Title' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI, MESSAGE) == 0x0000A8, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI::MESSAGE' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI, bShowConfirm) == 0x0000C0, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI::bShowConfirm' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI, bShowDecline) == 0x0000C1, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI::bShowDecline' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI, AdditionalContent) == 0x0000C8, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI::AdditionalContent' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI, LeftAdditionalContent) == 0x0000D0, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI::LeftAdditionalContent' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI, ReturnValue) == 0x0000D8, "Member 'FortAsyncAction_ShowConfirmation_NUI_ShowSimpleConfirmationDialog_NUI::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.HandleButtonGroupSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMatchmakingOptions_HandleButtonGroupSelectionChanged final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaMatchmakingOptions_HandleButtonGroupSelectionChanged) == 0x000008, "Wrong alignment on FortAthenaMatchmakingOptions_HandleButtonGroupSelectionChanged");
static_assert(sizeof(FortAthenaMatchmakingOptions_HandleButtonGroupSelectionChanged) == 0x000010, "Wrong size on FortAthenaMatchmakingOptions_HandleButtonGroupSelectionChanged");
static_assert(offsetof(FortAthenaMatchmakingOptions_HandleButtonGroupSelectionChanged, Button) == 0x000000, "Member 'FortAthenaMatchmakingOptions_HandleButtonGroupSelectionChanged::Button' has a wrong offset!");
static_assert(offsetof(FortAthenaMatchmakingOptions_HandleButtonGroupSelectionChanged, Param_Index) == 0x000008, "Member 'FortAthenaMatchmakingOptions_HandleButtonGroupSelectionChanged::Param_Index' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.HandleInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMatchmakingOptions_HandleInputTypeChanged final
{
public:
	ECommonInputType                              CurrentInputType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingOptions_HandleInputTypeChanged) == 0x000001, "Wrong alignment on FortAthenaMatchmakingOptions_HandleInputTypeChanged");
static_assert(sizeof(FortAthenaMatchmakingOptions_HandleInputTypeChanged) == 0x000001, "Wrong size on FortAthenaMatchmakingOptions_HandleInputTypeChanged");
static_assert(offsetof(FortAthenaMatchmakingOptions_HandleInputTypeChanged, CurrentInputType) == 0x000000, "Member 'FortAthenaMatchmakingOptions_HandleInputTypeChanged::CurrentInputType' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.OnAffiliateUpdated
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMatchmakingOptions_OnAffiliateUpdated final
{
public:
	class FString                                 AffiliateName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingOptions_OnAffiliateUpdated) == 0x000008, "Wrong alignment on FortAthenaMatchmakingOptions_OnAffiliateUpdated");
static_assert(sizeof(FortAthenaMatchmakingOptions_OnAffiliateUpdated) == 0x000010, "Wrong size on FortAthenaMatchmakingOptions_OnAffiliateUpdated");
static_assert(offsetof(FortAthenaMatchmakingOptions_OnAffiliateUpdated, AffiliateName) == 0x000000, "Member 'FortAthenaMatchmakingOptions_OnAffiliateUpdated::AffiliateName' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.OnTileDoubleClicked
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaMatchmakingOptions_OnTileDoubleClicked final
{
public:
	class UCommonButton*                          ButtonClicked;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingOptions_OnTileDoubleClicked) == 0x000008, "Wrong alignment on FortAthenaMatchmakingOptions_OnTileDoubleClicked");
static_assert(sizeof(FortAthenaMatchmakingOptions_OnTileDoubleClicked) == 0x000008, "Wrong size on FortAthenaMatchmakingOptions_OnTileDoubleClicked");
static_assert(offsetof(FortAthenaMatchmakingOptions_OnTileDoubleClicked, ButtonClicked) == 0x000000, "Member 'FortAthenaMatchmakingOptions_OnTileDoubleClicked::ButtonClicked' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.RepresentedPlaylistChanged
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaMatchmakingOptions_RepresentedPlaylistChanged final
{
public:
	struct FPlaylistFrontEndData                  NewRepresentedPlaylist;                            // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingOptions_RepresentedPlaylistChanged) == 0x000008, "Wrong alignment on FortAthenaMatchmakingOptions_RepresentedPlaylistChanged");
static_assert(sizeof(FortAthenaMatchmakingOptions_RepresentedPlaylistChanged) == 0x000028, "Wrong size on FortAthenaMatchmakingOptions_RepresentedPlaylistChanged");
static_assert(offsetof(FortAthenaMatchmakingOptions_RepresentedPlaylistChanged, NewRepresentedPlaylist) == 0x000000, "Member 'FortAthenaMatchmakingOptions_RepresentedPlaylistChanged::NewRepresentedPlaylist' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.SetCustomMatchOptions
// 0x0058 (0x0058 - 0x0000)
struct FortAthenaMatchmakingOptions_SetCustomMatchOptions final
{
public:
	TMap<class FString, class FString>            Options;                                           // 0x0000(0x0050)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PlaylistName;                                      // 0x0050(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingOptions_SetCustomMatchOptions) == 0x000008, "Wrong alignment on FortAthenaMatchmakingOptions_SetCustomMatchOptions");
static_assert(sizeof(FortAthenaMatchmakingOptions_SetCustomMatchOptions) == 0x000058, "Wrong size on FortAthenaMatchmakingOptions_SetCustomMatchOptions");
static_assert(offsetof(FortAthenaMatchmakingOptions_SetCustomMatchOptions, Options) == 0x000000, "Member 'FortAthenaMatchmakingOptions_SetCustomMatchOptions::Options' has a wrong offset!");
static_assert(offsetof(FortAthenaMatchmakingOptions_SetCustomMatchOptions, PlaylistName) == 0x000050, "Member 'FortAthenaMatchmakingOptions_SetCustomMatchOptions::PlaylistName' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.SetOwningMatchmakingWidget
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaMatchmakingOptions_SetOwningMatchmakingWidget final
{
public:
	class UFortAthenaMatchmakingWidget*           InOwningMatchmakingWidget;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingOptions_SetOwningMatchmakingWidget) == 0x000008, "Wrong alignment on FortAthenaMatchmakingOptions_SetOwningMatchmakingWidget");
static_assert(sizeof(FortAthenaMatchmakingOptions_SetOwningMatchmakingWidget) == 0x000008, "Wrong size on FortAthenaMatchmakingOptions_SetOwningMatchmakingWidget");
static_assert(offsetof(FortAthenaMatchmakingOptions_SetOwningMatchmakingWidget, InOwningMatchmakingWidget) == 0x000000, "Member 'FortAthenaMatchmakingOptions_SetOwningMatchmakingWidget::InOwningMatchmakingWidget' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.SetServerAccessText
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMatchmakingOptions_SetServerAccessText final
{
public:
	EServerAccessSetting                          InServerAccessSetting;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingOptions_SetServerAccessText) == 0x000001, "Wrong alignment on FortAthenaMatchmakingOptions_SetServerAccessText");
static_assert(sizeof(FortAthenaMatchmakingOptions_SetServerAccessText) == 0x000001, "Wrong size on FortAthenaMatchmakingOptions_SetServerAccessText");
static_assert(offsetof(FortAthenaMatchmakingOptions_SetServerAccessText, InServerAccessSetting) == 0x000000, "Member 'FortAthenaMatchmakingOptions_SetServerAccessText::InServerAccessSetting' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.SetSpectatorButtonText
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMatchmakingOptions_SetSpectatorButtonText final
{
public:
	ESpectatorQueueType                           InSpectatorQueueType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingOptions_SetSpectatorButtonText) == 0x000001, "Wrong alignment on FortAthenaMatchmakingOptions_SetSpectatorButtonText");
static_assert(sizeof(FortAthenaMatchmakingOptions_SetSpectatorButtonText) == 0x000001, "Wrong size on FortAthenaMatchmakingOptions_SetSpectatorButtonText");
static_assert(offsetof(FortAthenaMatchmakingOptions_SetSpectatorButtonText, InSpectatorQueueType) == 0x000000, "Member 'FortAthenaMatchmakingOptions_SetSpectatorButtonText::InSpectatorQueueType' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.SetSquadFillText
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMatchmakingOptions_SetSquadFillText final
{
public:
	ESquadFillSetting                             InSquadFillSetting;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingOptions_SetSquadFillText) == 0x000001, "Wrong alignment on FortAthenaMatchmakingOptions_SetSquadFillText");
static_assert(sizeof(FortAthenaMatchmakingOptions_SetSquadFillText) == 0x000001, "Wrong size on FortAthenaMatchmakingOptions_SetSquadFillText");
static_assert(offsetof(FortAthenaMatchmakingOptions_SetSquadFillText, InSquadFillSetting) == 0x000000, "Member 'FortAthenaMatchmakingOptions_SetSquadFillText::InSquadFillSetting' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.UpdateMMButtonStatusBP
// 0x0002 (0x0002 - 0x0000)
struct FortAthenaMatchmakingOptions_UpdateMMButtonStatusBP final
{
public:
	bool                                          bPlaylistIsEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFillDisableReason                            FillDisableReason;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingOptions_UpdateMMButtonStatusBP) == 0x000001, "Wrong alignment on FortAthenaMatchmakingOptions_UpdateMMButtonStatusBP");
static_assert(sizeof(FortAthenaMatchmakingOptions_UpdateMMButtonStatusBP) == 0x000002, "Wrong size on FortAthenaMatchmakingOptions_UpdateMMButtonStatusBP");
static_assert(offsetof(FortAthenaMatchmakingOptions_UpdateMMButtonStatusBP, bPlaylistIsEnabled) == 0x000000, "Member 'FortAthenaMatchmakingOptions_UpdateMMButtonStatusBP::bPlaylistIsEnabled' has a wrong offset!");
static_assert(offsetof(FortAthenaMatchmakingOptions_UpdateMMButtonStatusBP, FillDisableReason) == 0x000001, "Member 'FortAthenaMatchmakingOptions_UpdateMMButtonStatusBP::FillDisableReason' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingOptions.UpdateShowSupportAffiliateButton
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMatchmakingOptions_UpdateShowSupportAffiliateButton final
{
public:
	bool                                          bIsCreativeLTM;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingOptions_UpdateShowSupportAffiliateButton) == 0x000001, "Wrong alignment on FortAthenaMatchmakingOptions_UpdateShowSupportAffiliateButton");
static_assert(sizeof(FortAthenaMatchmakingOptions_UpdateShowSupportAffiliateButton) == 0x000001, "Wrong size on FortAthenaMatchmakingOptions_UpdateShowSupportAffiliateButton");
static_assert(offsetof(FortAthenaMatchmakingOptions_UpdateShowSupportAffiliateButton, bIsCreativeLTM) == 0x000000, "Member 'FortAthenaMatchmakingOptions_UpdateShowSupportAffiliateButton::bIsCreativeLTM' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingWidget.OnMatchmakingFinishedBlueprint
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMatchmakingWidget_OnMatchmakingFinishedBlueprint final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingWidget_OnMatchmakingFinishedBlueprint) == 0x000001, "Wrong alignment on FortAthenaMatchmakingWidget_OnMatchmakingFinishedBlueprint");
static_assert(sizeof(FortAthenaMatchmakingWidget_OnMatchmakingFinishedBlueprint) == 0x000001, "Wrong size on FortAthenaMatchmakingWidget_OnMatchmakingFinishedBlueprint");
static_assert(offsetof(FortAthenaMatchmakingWidget_OnMatchmakingFinishedBlueprint, bSuccess) == 0x000000, "Member 'FortAthenaMatchmakingWidget_OnMatchmakingFinishedBlueprint::bSuccess' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingWidget.OnNewModeViolatorUpdated
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMatchmakingWidget_OnNewModeViolatorUpdated final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingWidget_OnNewModeViolatorUpdated) == 0x000001, "Wrong alignment on FortAthenaMatchmakingWidget_OnNewModeViolatorUpdated");
static_assert(sizeof(FortAthenaMatchmakingWidget_OnNewModeViolatorUpdated) == 0x000001, "Wrong size on FortAthenaMatchmakingWidget_OnNewModeViolatorUpdated");
static_assert(offsetof(FortAthenaMatchmakingWidget_OnNewModeViolatorUpdated, bShouldShow) == 0x000000, "Member 'FortAthenaMatchmakingWidget_OnNewModeViolatorUpdated::bShouldShow' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingWidget.OnSetCancelButtonText
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaMatchmakingWidget_OnSetCancelButtonText final
{
public:
	class FText                                   CancelButtonText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingWidget_OnSetCancelButtonText) == 0x000008, "Wrong alignment on FortAthenaMatchmakingWidget_OnSetCancelButtonText");
static_assert(sizeof(FortAthenaMatchmakingWidget_OnSetCancelButtonText) == 0x000018, "Wrong size on FortAthenaMatchmakingWidget_OnSetCancelButtonText");
static_assert(offsetof(FortAthenaMatchmakingWidget_OnSetCancelButtonText, CancelButtonText) == 0x000000, "Member 'FortAthenaMatchmakingWidget_OnSetCancelButtonText::CancelButtonText' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingWidget.OnSetPlayButtonText
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaMatchmakingWidget_OnSetPlayButtonText final
{
public:
	class FText                                   PlayButtonText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingWidget_OnSetPlayButtonText) == 0x000008, "Wrong alignment on FortAthenaMatchmakingWidget_OnSetPlayButtonText");
static_assert(sizeof(FortAthenaMatchmakingWidget_OnSetPlayButtonText) == 0x000018, "Wrong size on FortAthenaMatchmakingWidget_OnSetPlayButtonText");
static_assert(offsetof(FortAthenaMatchmakingWidget_OnSetPlayButtonText, PlayButtonText) == 0x000000, "Member 'FortAthenaMatchmakingWidget_OnSetPlayButtonText::PlayButtonText' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingWidget.PlaylistChanged
// 0x0048 (0x0048 - 0x0000)
struct FortAthenaMatchmakingWidget_PlaylistChanged final
{
public:
	struct FPlaylistFrontEndData                  NewPlaylist;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   PlaylistCMSOverrideName;                           // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EFortLobbyType                                LobbyType;                                         // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaMatchmakingWidget_PlaylistChanged) == 0x000008, "Wrong alignment on FortAthenaMatchmakingWidget_PlaylistChanged");
static_assert(sizeof(FortAthenaMatchmakingWidget_PlaylistChanged) == 0x000048, "Wrong size on FortAthenaMatchmakingWidget_PlaylistChanged");
static_assert(offsetof(FortAthenaMatchmakingWidget_PlaylistChanged, NewPlaylist) == 0x000000, "Member 'FortAthenaMatchmakingWidget_PlaylistChanged::NewPlaylist' has a wrong offset!");
static_assert(offsetof(FortAthenaMatchmakingWidget_PlaylistChanged, PlaylistCMSOverrideName) == 0x000028, "Member 'FortAthenaMatchmakingWidget_PlaylistChanged::PlaylistCMSOverrideName' has a wrong offset!");
static_assert(offsetof(FortAthenaMatchmakingWidget_PlaylistChanged, LobbyType) == 0x000040, "Member 'FortAthenaMatchmakingWidget_PlaylistChanged::LobbyType' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingWidget.SetSquadFillText
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaMatchmakingWidget_SetSquadFillText final
{
public:
	bool                                          InCurrentSquadFill;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingWidget_SetSquadFillText) == 0x000001, "Wrong alignment on FortAthenaMatchmakingWidget_SetSquadFillText");
static_assert(sizeof(FortAthenaMatchmakingWidget_SetSquadFillText) == 0x000001, "Wrong size on FortAthenaMatchmakingWidget_SetSquadFillText");
static_assert(offsetof(FortAthenaMatchmakingWidget_SetSquadFillText, InCurrentSquadFill) == 0x000000, "Member 'FortAthenaMatchmakingWidget_SetSquadFillText::InCurrentSquadFill' has a wrong offset!");

// Function FortniteUI.FortAthenaMatchmakingWidget.UpdateCustomViolatorText
// 0x0030 (0x0030 - 0x0000)
struct FortAthenaMatchmakingWidget_UpdateCustomViolatorText final
{
public:
	class FText                                   ModeName;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   SubText;                                           // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMatchmakingWidget_UpdateCustomViolatorText) == 0x000008, "Wrong alignment on FortAthenaMatchmakingWidget_UpdateCustomViolatorText");
static_assert(sizeof(FortAthenaMatchmakingWidget_UpdateCustomViolatorText) == 0x000030, "Wrong size on FortAthenaMatchmakingWidget_UpdateCustomViolatorText");
static_assert(offsetof(FortAthenaMatchmakingWidget_UpdateCustomViolatorText, ModeName) == 0x000000, "Member 'FortAthenaMatchmakingWidget_UpdateCustomViolatorText::ModeName' has a wrong offset!");
static_assert(offsetof(FortAthenaMatchmakingWidget_UpdateCustomViolatorText, SubText) == 0x000018, "Member 'FortAthenaMatchmakingWidget_UpdateCustomViolatorText::SubText' has a wrong offset!");

// Function FortniteUI.FortAttributeList.SetData
// 0x0020 (0x0020 - 0x0000)
struct FortAttributeList_SetData final
{
public:
	TArray<struct FFortDisplayAttribute>          Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FFortDisplayAttribute>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeList_SetData) == 0x000008, "Wrong alignment on FortAttributeList_SetData");
static_assert(sizeof(FortAttributeList_SetData) == 0x000020, "Wrong size on FortAttributeList_SetData");
static_assert(offsetof(FortAttributeList_SetData, Data) == 0x000000, "Member 'FortAttributeList_SetData::Data' has a wrong offset!");
static_assert(offsetof(FortAttributeList_SetData, ReturnValue) == 0x000010, "Member 'FortAttributeList_SetData::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAttributeList.SetPreviewData
// 0x0010 (0x0010 - 0x0000)
struct FortAttributeList_SetPreviewData final
{
public:
	TArray<struct FFortDisplayAttribute>          Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeList_SetPreviewData) == 0x000008, "Wrong alignment on FortAttributeList_SetPreviewData");
static_assert(sizeof(FortAttributeList_SetPreviewData) == 0x000010, "Wrong size on FortAttributeList_SetPreviewData");
static_assert(offsetof(FortAttributeList_SetPreviewData, Data) == 0x000000, "Member 'FortAttributeList_SetPreviewData::Data' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem.SetDisplayAttribute
// 0x00E8 (0x00E8 - 0x0000)
struct FortAttributeListItem_SetDisplayAttribute final
{
public:
	struct FFortDisplayAttribute                  InDisplayAttribute;                                // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortDisplayAttribute                  DeltaAttribute;                                    // 0x0070(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAttributeListItem_SetDisplayAttribute) == 0x000008, "Wrong alignment on FortAttributeListItem_SetDisplayAttribute");
static_assert(sizeof(FortAttributeListItem_SetDisplayAttribute) == 0x0000E8, "Wrong size on FortAttributeListItem_SetDisplayAttribute");
static_assert(offsetof(FortAttributeListItem_SetDisplayAttribute, InDisplayAttribute) == 0x000000, "Member 'FortAttributeListItem_SetDisplayAttribute::InDisplayAttribute' has a wrong offset!");
static_assert(offsetof(FortAttributeListItem_SetDisplayAttribute, DeltaAttribute) == 0x000070, "Member 'FortAttributeListItem_SetDisplayAttribute::DeltaAttribute' has a wrong offset!");
static_assert(offsetof(FortAttributeListItem_SetDisplayAttribute, ReturnValue) == 0x0000E0, "Member 'FortAttributeListItem_SetDisplayAttribute::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem.SetPreviewAttribute
// 0x0070 (0x0070 - 0x0000)
struct FortAttributeListItem_SetPreviewAttribute final
{
public:
	struct FFortDisplayAttribute                  InPreviewAttribute;                                // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_SetPreviewAttribute) == 0x000008, "Wrong alignment on FortAttributeListItem_SetPreviewAttribute");
static_assert(sizeof(FortAttributeListItem_SetPreviewAttribute) == 0x000070, "Wrong size on FortAttributeListItem_SetPreviewAttribute");
static_assert(offsetof(FortAttributeListItem_SetPreviewAttribute, InPreviewAttribute) == 0x000000, "Member 'FortAttributeListItem_SetPreviewAttribute::InPreviewAttribute' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem.ValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortAttributeListItem_ValueChanged final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_ValueChanged) == 0x000004, "Wrong alignment on FortAttributeListItem_ValueChanged");
static_assert(sizeof(FortAttributeListItem_ValueChanged) == 0x000004, "Wrong size on FortAttributeListItem_ValueChanged");
static_assert(offsetof(FortAttributeListItem_ValueChanged, Delta) == 0x000000, "Member 'FortAttributeListItem_ValueChanged::Delta' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem.GetCurrentAttributeCopy
// 0x0070 (0x0070 - 0x0000)
struct FortAttributeListItem_GetCurrentAttributeCopy final
{
public:
	struct FFortDisplayAttribute                  OutDisplayAttribute;                               // 0x0000(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_GetCurrentAttributeCopy) == 0x000008, "Wrong alignment on FortAttributeListItem_GetCurrentAttributeCopy");
static_assert(sizeof(FortAttributeListItem_GetCurrentAttributeCopy) == 0x000070, "Wrong size on FortAttributeListItem_GetCurrentAttributeCopy");
static_assert(offsetof(FortAttributeListItem_GetCurrentAttributeCopy, OutDisplayAttribute) == 0x000000, "Member 'FortAttributeListItem_GetCurrentAttributeCopy::OutDisplayAttribute' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem.GetDisplayAttributeCopy
// 0x0070 (0x0070 - 0x0000)
struct FortAttributeListItem_GetDisplayAttributeCopy final
{
public:
	struct FFortDisplayAttribute                  OutDisplayAttribute;                               // 0x0000(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_GetDisplayAttributeCopy) == 0x000008, "Wrong alignment on FortAttributeListItem_GetDisplayAttributeCopy");
static_assert(sizeof(FortAttributeListItem_GetDisplayAttributeCopy) == 0x000070, "Wrong size on FortAttributeListItem_GetDisplayAttributeCopy");
static_assert(offsetof(FortAttributeListItem_GetDisplayAttributeCopy, OutDisplayAttribute) == 0x000000, "Member 'FortAttributeListItem_GetDisplayAttributeCopy::OutDisplayAttribute' has a wrong offset!");

// Function FortniteUI.FortAttributeListItem.GetDisplayPreviewCopy
// 0x0070 (0x0070 - 0x0000)
struct FortAttributeListItem_GetDisplayPreviewCopy final
{
public:
	struct FFortDisplayAttribute                  OutPreviewAttribute;                               // 0x0000(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttributeListItem_GetDisplayPreviewCopy) == 0x000008, "Wrong alignment on FortAttributeListItem_GetDisplayPreviewCopy");
static_assert(sizeof(FortAttributeListItem_GetDisplayPreviewCopy) == 0x000070, "Wrong size on FortAttributeListItem_GetDisplayPreviewCopy");
static_assert(offsetof(FortAttributeListItem_GetDisplayPreviewCopy, OutPreviewAttribute) == 0x000000, "Member 'FortAttributeListItem_GetDisplayPreviewCopy::OutPreviewAttribute' has a wrong offset!");

// Function FortniteUI.FortAutorunLockZone.OnInZoneChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAutorunLockZone_OnInZoneChanged final
{
public:
	bool                                          bNewIsInZone;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAutorunLockZone_OnInZoneChanged) == 0x000001, "Wrong alignment on FortAutorunLockZone_OnInZoneChanged");
static_assert(sizeof(FortAutorunLockZone_OnInZoneChanged) == 0x000001, "Wrong size on FortAutorunLockZone_OnInZoneChanged");
static_assert(offsetof(FortAutorunLockZone_OnInZoneChanged, bNewIsInZone) == 0x000000, "Member 'FortAutorunLockZone_OnInZoneChanged::bNewIsInZone' has a wrong offset!");

// Function FortniteUI.FortBangWrapperContentInterface.OnBangStateChanged
// 0x0008 (0x0008 - 0x0000)
struct FortBangWrapperContentInterface_OnBangStateChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBangWrapperContentInterface_OnBangStateChanged) == 0x000004, "Wrong alignment on FortBangWrapperContentInterface_OnBangStateChanged");
static_assert(sizeof(FortBangWrapperContentInterface_OnBangStateChanged) == 0x000008, "Wrong size on FortBangWrapperContentInterface_OnBangStateChanged");
static_assert(offsetof(FortBangWrapperContentInterface_OnBangStateChanged, bEnabled) == 0x000000, "Member 'FortBangWrapperContentInterface_OnBangStateChanged::bEnabled' has a wrong offset!");
static_assert(offsetof(FortBangWrapperContentInterface_OnBangStateChanged, Count) == 0x000004, "Member 'FortBangWrapperContentInterface_OnBangStateChanged::Count' has a wrong offset!");

// Function FortniteUI.FortBangWrapperContentInterface.OnStartCallout
// 0x000C (0x000C - 0x0000)
struct FortBangWrapperContentInterface_OnStartCallout final
{
public:
	class FName                                   TutorialObjectiveName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialType                                 TutorialType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBangWrapperContentInterface_OnStartCallout) == 0x000004, "Wrong alignment on FortBangWrapperContentInterface_OnStartCallout");
static_assert(sizeof(FortBangWrapperContentInterface_OnStartCallout) == 0x00000C, "Wrong size on FortBangWrapperContentInterface_OnStartCallout");
static_assert(offsetof(FortBangWrapperContentInterface_OnStartCallout, TutorialObjectiveName) == 0x000000, "Member 'FortBangWrapperContentInterface_OnStartCallout::TutorialObjectiveName' has a wrong offset!");
static_assert(offsetof(FortBangWrapperContentInterface_OnStartCallout, TutorialType) == 0x000008, "Member 'FortBangWrapperContentInterface_OnStartCallout::TutorialType' has a wrong offset!");

// Function FortniteUI.FortBannerSelectorBase.HandleBannerNameChanged
// 0x0018 (0x0018 - 0x0000)
struct FortBannerSelectorBase_HandleBannerNameChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerSelectorBase_HandleBannerNameChanged) == 0x000008, "Wrong alignment on FortBannerSelectorBase_HandleBannerNameChanged");
static_assert(sizeof(FortBannerSelectorBase_HandleBannerNameChanged) == 0x000018, "Wrong size on FortBannerSelectorBase_HandleBannerNameChanged");
static_assert(offsetof(FortBannerSelectorBase_HandleBannerNameChanged, Text) == 0x000000, "Member 'FortBannerSelectorBase_HandleBannerNameChanged::Text' has a wrong offset!");

// Function FortniteUI.FortBannerSelectorBase.UpdateErrorText
// 0x0018 (0x0018 - 0x0000)
struct FortBannerSelectorBase_UpdateErrorText final
{
public:
	class FText                                   ErrorMessageText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerSelectorBase_UpdateErrorText) == 0x000008, "Wrong alignment on FortBannerSelectorBase_UpdateErrorText");
static_assert(sizeof(FortBannerSelectorBase_UpdateErrorText) == 0x000018, "Wrong size on FortBannerSelectorBase_UpdateErrorText");
static_assert(offsetof(FortBannerSelectorBase_UpdateErrorText, ErrorMessageText) == 0x000000, "Member 'FortBannerSelectorBase_UpdateErrorText::ErrorMessageText' has a wrong offset!");

// Function FortniteUI.FortBannerSelectorBase.HasIllegalChars
// 0x0018 (0x0018 - 0x0000)
struct FortBannerSelectorBase_HasIllegalChars final
{
public:
	class FString                                 NewBannerName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBannerSelectorBase_HasIllegalChars) == 0x000008, "Wrong alignment on FortBannerSelectorBase_HasIllegalChars");
static_assert(sizeof(FortBannerSelectorBase_HasIllegalChars) == 0x000018, "Wrong size on FortBannerSelectorBase_HasIllegalChars");
static_assert(offsetof(FortBannerSelectorBase_HasIllegalChars, NewBannerName) == 0x000000, "Member 'FortBannerSelectorBase_HasIllegalChars::NewBannerName' has a wrong offset!");
static_assert(offsetof(FortBannerSelectorBase_HasIllegalChars, ReturnValue) == 0x000010, "Member 'FortBannerSelectorBase_HasIllegalChars::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortBannerSelectorBase.IsPlayerNameValid
// 0x0038 (0x0038 - 0x0000)
struct FortBannerSelectorBase_IsPlayerNameValid final
{
public:
	class FText                                   PlayerName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          OutIsValid;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutErrorText;                                      // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerSelectorBase_IsPlayerNameValid) == 0x000008, "Wrong alignment on FortBannerSelectorBase_IsPlayerNameValid");
static_assert(sizeof(FortBannerSelectorBase_IsPlayerNameValid) == 0x000038, "Wrong size on FortBannerSelectorBase_IsPlayerNameValid");
static_assert(offsetof(FortBannerSelectorBase_IsPlayerNameValid, PlayerName) == 0x000000, "Member 'FortBannerSelectorBase_IsPlayerNameValid::PlayerName' has a wrong offset!");
static_assert(offsetof(FortBannerSelectorBase_IsPlayerNameValid, OutIsValid) == 0x000018, "Member 'FortBannerSelectorBase_IsPlayerNameValid::OutIsValid' has a wrong offset!");
static_assert(offsetof(FortBannerSelectorBase_IsPlayerNameValid, OutErrorText) == 0x000020, "Member 'FortBannerSelectorBase_IsPlayerNameValid::OutErrorText' has a wrong offset!");

// Function FortniteUI.FortBaseButton.GetSelectionGroupIndex
// 0x0004 (0x0004 - 0x0000)
struct FortBaseButton_GetSelectionGroupIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_GetSelectionGroupIndex) == 0x000004, "Wrong alignment on FortBaseButton_GetSelectionGroupIndex");
static_assert(sizeof(FortBaseButton_GetSelectionGroupIndex) == 0x000004, "Wrong size on FortBaseButton_GetSelectionGroupIndex");
static_assert(offsetof(FortBaseButton_GetSelectionGroupIndex, ReturnValue) == 0x000000, "Member 'FortBaseButton_GetSelectionGroupIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortBaseButton.SetBangVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortBaseButton_SetBangVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_SetBangVisibility) == 0x000001, "Wrong alignment on FortBaseButton_SetBangVisibility");
static_assert(sizeof(FortBaseButton_SetBangVisibility) == 0x000001, "Wrong size on FortBaseButton_SetBangVisibility");
static_assert(offsetof(FortBaseButton_SetBangVisibility, bVisible) == 0x000000, "Member 'FortBaseButton_SetBangVisibility::bVisible' has a wrong offset!");

// Function FortniteUI.FortBaseButton.SetBrushSize
// 0x0001 (0x0001 - 0x0000)
struct FortBaseButton_SetBrushSize final
{
public:
	EFortBrushSize                                InSize;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_SetBrushSize) == 0x000001, "Wrong alignment on FortBaseButton_SetBrushSize");
static_assert(sizeof(FortBaseButton_SetBrushSize) == 0x000001, "Wrong size on FortBaseButton_SetBrushSize");
static_assert(offsetof(FortBaseButton_SetBrushSize, InSize) == 0x000000, "Member 'FortBaseButton_SetBrushSize::InSize' has a wrong offset!");

// Function FortniteUI.FortBaseButton.SetClickable
// 0x0001 (0x0001 - 0x0000)
struct FortBaseButton_SetClickable final
{
public:
	bool                                          InClickable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_SetClickable) == 0x000001, "Wrong alignment on FortBaseButton_SetClickable");
static_assert(sizeof(FortBaseButton_SetClickable) == 0x000001, "Wrong size on FortBaseButton_SetClickable");
static_assert(offsetof(FortBaseButton_SetClickable, InClickable) == 0x000000, "Member 'FortBaseButton_SetClickable::InClickable' has a wrong offset!");

// Function FortniteUI.FortBaseButton.SetClickMethod
// 0x0001 (0x0001 - 0x0000)
struct FortBaseButton_SetClickMethod final
{
public:
	EButtonClickMethod                            InClickMethod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_SetClickMethod) == 0x000001, "Wrong alignment on FortBaseButton_SetClickMethod");
static_assert(sizeof(FortBaseButton_SetClickMethod) == 0x000001, "Wrong size on FortBaseButton_SetClickMethod");
static_assert(offsetof(FortBaseButton_SetClickMethod, InClickMethod) == 0x000000, "Member 'FortBaseButton_SetClickMethod::InClickMethod' has a wrong offset!");

// Function FortniteUI.FortBaseButton.SetHovered
// 0x0001 (0x0001 - 0x0000)
struct FortBaseButton_SetHovered final
{
public:
	bool                                          InHovered;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_SetHovered) == 0x000001, "Wrong alignment on FortBaseButton_SetHovered");
static_assert(sizeof(FortBaseButton_SetHovered) == 0x000001, "Wrong size on FortBaseButton_SetHovered");
static_assert(offsetof(FortBaseButton_SetHovered, InHovered) == 0x000000, "Member 'FortBaseButton_SetHovered::InHovered' has a wrong offset!");

// Function FortniteUI.FortBaseButton.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct FortBaseButton_SetSelected final
{
public:
	bool                                          InSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_SetSelected) == 0x000001, "Wrong alignment on FortBaseButton_SetSelected");
static_assert(sizeof(FortBaseButton_SetSelected) == 0x000001, "Wrong size on FortBaseButton_SetSelected");
static_assert(offsetof(FortBaseButton_SetSelected, InSelected) == 0x000000, "Member 'FortBaseButton_SetSelected::InSelected' has a wrong offset!");

// Function FortniteUI.FortBaseButton.SetSelectionGroup
// 0x0008 (0x0008 - 0x0000)
struct FortBaseButton_SetSelectionGroup final
{
public:
	class FName                                   InSelectionGroup;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_SetSelectionGroup) == 0x000004, "Wrong alignment on FortBaseButton_SetSelectionGroup");
static_assert(sizeof(FortBaseButton_SetSelectionGroup) == 0x000008, "Wrong size on FortBaseButton_SetSelectionGroup");
static_assert(offsetof(FortBaseButton_SetSelectionGroup, InSelectionGroup) == 0x000000, "Member 'FortBaseButton_SetSelectionGroup::InSelectionGroup' has a wrong offset!");

// Function FortniteUI.FortBaseButton.SetStyle
// 0x0008 (0x0008 - 0x0000)
struct FortBaseButton_SetStyle final
{
public:
	TSubclassOf<class UFortButtonStyle>           InStyle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_SetStyle) == 0x000008, "Wrong alignment on FortBaseButton_SetStyle");
static_assert(sizeof(FortBaseButton_SetStyle) == 0x000008, "Wrong size on FortBaseButton_SetStyle");
static_assert(offsetof(FortBaseButton_SetStyle, InStyle) == 0x000000, "Member 'FortBaseButton_SetStyle::InStyle' has a wrong offset!");

// Function FortniteUI.FortBaseButton.GetCurrentButtonPadding
// 0x0010 (0x0010 - 0x0000)
struct FortBaseButton_GetCurrentButtonPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_GetCurrentButtonPadding) == 0x000004, "Wrong alignment on FortBaseButton_GetCurrentButtonPadding");
static_assert(sizeof(FortBaseButton_GetCurrentButtonPadding) == 0x000010, "Wrong size on FortBaseButton_GetCurrentButtonPadding");
static_assert(offsetof(FortBaseButton_GetCurrentButtonPadding, ReturnValue) == 0x000000, "Member 'FortBaseButton_GetCurrentButtonPadding::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortBaseButton.GetCurrentCustomPadding
// 0x0010 (0x0010 - 0x0000)
struct FortBaseButton_GetCurrentCustomPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_GetCurrentCustomPadding) == 0x000004, "Wrong alignment on FortBaseButton_GetCurrentCustomPadding");
static_assert(sizeof(FortBaseButton_GetCurrentCustomPadding) == 0x000010, "Wrong size on FortBaseButton_GetCurrentCustomPadding");
static_assert(offsetof(FortBaseButton_GetCurrentCustomPadding, ReturnValue) == 0x000000, "Member 'FortBaseButton_GetCurrentCustomPadding::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortBaseButton.GetCurrentFont
// 0x0050 (0x0050 - 0x0000)
struct FortBaseButton_GetCurrentFont final
{
public:
	struct FSlateFontInfo                         ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_GetCurrentFont) == 0x000008, "Wrong alignment on FortBaseButton_GetCurrentFont");
static_assert(sizeof(FortBaseButton_GetCurrentFont) == 0x000050, "Wrong size on FortBaseButton_GetCurrentFont");
static_assert(offsetof(FortBaseButton_GetCurrentFont, ReturnValue) == 0x000000, "Member 'FortBaseButton_GetCurrentFont::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortBaseButton.GetCurrentStateStyle
// 0x0350 (0x0350 - 0x0000)
struct FortBaseButton_GetCurrentStateStyle final
{
public:
	struct FFortStateStyle                        ReturnValue;                                       // 0x0000(0x0350)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_GetCurrentStateStyle) == 0x000008, "Wrong alignment on FortBaseButton_GetCurrentStateStyle");
static_assert(sizeof(FortBaseButton_GetCurrentStateStyle) == 0x000350, "Wrong size on FortBaseButton_GetCurrentStateStyle");
static_assert(offsetof(FortBaseButton_GetCurrentStateStyle, ReturnValue) == 0x000000, "Member 'FortBaseButton_GetCurrentStateStyle::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortBaseButton.GetSelected
// 0x0001 (0x0001 - 0x0000)
struct FortBaseButton_GetSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_GetSelected) == 0x000001, "Wrong alignment on FortBaseButton_GetSelected");
static_assert(sizeof(FortBaseButton_GetSelected) == 0x000001, "Wrong size on FortBaseButton_GetSelected");
static_assert(offsetof(FortBaseButton_GetSelected, ReturnValue) == 0x000000, "Member 'FortBaseButton_GetSelected::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortBaseButton.GetStyle
// 0x0008 (0x0008 - 0x0000)
struct FortBaseButton_GetStyle final
{
public:
	class UFortButtonStyle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBaseButton_GetStyle) == 0x000008, "Wrong alignment on FortBaseButton_GetStyle");
static_assert(sizeof(FortBaseButton_GetStyle) == 0x000008, "Wrong size on FortBaseButton_GetStyle");
static_assert(offsetof(FortBaseButton_GetStyle, ReturnValue) == 0x000000, "Member 'FortBaseButton_GetStyle::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortBluGloCounter.OnBluGloQuantityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortBluGloCounter_OnBluGloQuantityChanged final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBluGloCounter_OnBluGloQuantityChanged) == 0x000004, "Wrong alignment on FortBluGloCounter_OnBluGloQuantityChanged");
static_assert(sizeof(FortBluGloCounter_OnBluGloQuantityChanged) == 0x000004, "Wrong size on FortBluGloCounter_OnBluGloQuantityChanged");
static_assert(offsetof(FortBluGloCounter_OnBluGloQuantityChanged, Quantity) == 0x000000, "Member 'FortBluGloCounter_OnBluGloQuantityChanged::Quantity' has a wrong offset!");

// Function FortniteUI.FortBuildingInfoIndicatorWidget.SetKeyBindWidgetBoundAction
// 0x0018 (0x0018 - 0x0000)
struct FortBuildingInfoIndicatorWidget_SetKeyBindWidgetBoundAction final
{
public:
	class UFortKeybindWidget*                     FortKeybindWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingInteraction                      InteractionType;                                   // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBuildingInfoIndicatorWidget_SetKeyBindWidgetBoundAction) == 0x000008, "Wrong alignment on FortBuildingInfoIndicatorWidget_SetKeyBindWidgetBoundAction");
static_assert(sizeof(FortBuildingInfoIndicatorWidget_SetKeyBindWidgetBoundAction) == 0x000018, "Wrong size on FortBuildingInfoIndicatorWidget_SetKeyBindWidgetBoundAction");
static_assert(offsetof(FortBuildingInfoIndicatorWidget_SetKeyBindWidgetBoundAction, FortKeybindWidget) == 0x000000, "Member 'FortBuildingInfoIndicatorWidget_SetKeyBindWidgetBoundAction::FortKeybindWidget' has a wrong offset!");
static_assert(offsetof(FortBuildingInfoIndicatorWidget_SetKeyBindWidgetBoundAction, ActionName) == 0x000008, "Member 'FortBuildingInfoIndicatorWidget_SetKeyBindWidgetBoundAction::ActionName' has a wrong offset!");
static_assert(offsetof(FortBuildingInfoIndicatorWidget_SetKeyBindWidgetBoundAction, InteractionType) == 0x000010, "Member 'FortBuildingInfoIndicatorWidget_SetKeyBindWidgetBoundAction::InteractionType' has a wrong offset!");

// Function FortniteUI.FortCampaignTeamMemberDailyBonusXpBoost.GetCurrentBoostAmount
// 0x0004 (0x0004 - 0x0000)
struct FortCampaignTeamMemberDailyBonusXpBoost_GetCurrentBoostAmount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTeamMemberDailyBonusXpBoost_GetCurrentBoostAmount) == 0x000004, "Wrong alignment on FortCampaignTeamMemberDailyBonusXpBoost_GetCurrentBoostAmount");
static_assert(sizeof(FortCampaignTeamMemberDailyBonusXpBoost_GetCurrentBoostAmount) == 0x000004, "Wrong size on FortCampaignTeamMemberDailyBonusXpBoost_GetCurrentBoostAmount");
static_assert(offsetof(FortCampaignTeamMemberDailyBonusXpBoost_GetCurrentBoostAmount, ReturnValue) == 0x000000, "Member 'FortCampaignTeamMemberDailyBonusXpBoost_GetCurrentBoostAmount::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolFireModePanel.SetOpenState
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolFireModePanel_SetOpenState final
{
public:
	bool                                          bNewOpenState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolFireModePanel_SetOpenState) == 0x000001, "Wrong alignment on HUDLayoutToolFireModePanel_SetOpenState");
static_assert(sizeof(HUDLayoutToolFireModePanel_SetOpenState) == 0x000001, "Wrong size on HUDLayoutToolFireModePanel_SetOpenState");
static_assert(offsetof(HUDLayoutToolFireModePanel_SetOpenState, bNewOpenState) == 0x000000, "Member 'HUDLayoutToolFireModePanel_SetOpenState::bNewOpenState' has a wrong offset!");

// Function FortniteUI.FortCampaignTeamMemberResult.UpdateMemberWithUniqueNetID
// 0x0028 (0x0028 - 0x0000)
struct FortCampaignTeamMemberResult_UpdateMemberWithUniqueNetID final
{
public:
	struct FUniqueNetIdRepl                       MemberId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCampaignTeamMemberResult_UpdateMemberWithUniqueNetID) == 0x000008, "Wrong alignment on FortCampaignTeamMemberResult_UpdateMemberWithUniqueNetID");
static_assert(sizeof(FortCampaignTeamMemberResult_UpdateMemberWithUniqueNetID) == 0x000028, "Wrong size on FortCampaignTeamMemberResult_UpdateMemberWithUniqueNetID");
static_assert(offsetof(FortCampaignTeamMemberResult_UpdateMemberWithUniqueNetID, MemberId) == 0x000000, "Member 'FortCampaignTeamMemberResult_UpdateMemberWithUniqueNetID::MemberId' has a wrong offset!");

// Function FortniteUI.FortChatContainer.HandleGetMenuContentForAnchor
// 0x0008 (0x0008 - 0x0000)
struct FortChatContainer_HandleGetMenuContentForAnchor final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortChatContainer_HandleGetMenuContentForAnchor) == 0x000008, "Wrong alignment on FortChatContainer_HandleGetMenuContentForAnchor");
static_assert(sizeof(FortChatContainer_HandleGetMenuContentForAnchor) == 0x000008, "Wrong size on FortChatContainer_HandleGetMenuContentForAnchor");
static_assert(offsetof(FortChatContainer_HandleGetMenuContentForAnchor, ReturnValue) == 0x000000, "Member 'FortChatContainer_HandleGetMenuContentForAnchor::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortChatContainer.OnSendButtonDisplayChanged
// 0x0001 (0x0001 - 0x0000)
struct FortChatContainer_OnSendButtonDisplayChanged final
{
public:
	bool                                          bShowSendButton;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortChatContainer_OnSendButtonDisplayChanged) == 0x000001, "Wrong alignment on FortChatContainer_OnSendButtonDisplayChanged");
static_assert(sizeof(FortChatContainer_OnSendButtonDisplayChanged) == 0x000001, "Wrong size on FortChatContainer_OnSendButtonDisplayChanged");
static_assert(offsetof(FortChatContainer_OnSendButtonDisplayChanged, bShowSendButton) == 0x000000, "Member 'FortChatContainer_OnSendButtonDisplayChanged::bShowSendButton' has a wrong offset!");

// Function FortniteUI.FortChatPanel.OnWidgetIsOnFocusedPathChanged
// 0x0001 (0x0001 - 0x0000)
struct FortChatPanel_OnWidgetIsOnFocusedPathChanged final
{
public:
	bool                                          bOnFocusPath;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortChatPanel_OnWidgetIsOnFocusedPathChanged) == 0x000001, "Wrong alignment on FortChatPanel_OnWidgetIsOnFocusedPathChanged");
static_assert(sizeof(FortChatPanel_OnWidgetIsOnFocusedPathChanged) == 0x000001, "Wrong size on FortChatPanel_OnWidgetIsOnFocusedPathChanged");
static_assert(offsetof(FortChatPanel_OnWidgetIsOnFocusedPathChanged, bOnFocusPath) == 0x000000, "Member 'FortChatPanel_OnWidgetIsOnFocusedPathChanged::bOnFocusPath' has a wrong offset!");

// Function FortniteUI.FortCheatMenuFactory.AddGrantCheatMenu
// 0x0028 (0x0028 - 0x0000)
struct FortCheatMenuFactory_AddGrantCheatMenu final
{
public:
	class UCommonUserWidget*                      Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TemplateId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceId;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatMenuFactory_AddGrantCheatMenu) == 0x000008, "Wrong alignment on FortCheatMenuFactory_AddGrantCheatMenu");
static_assert(sizeof(FortCheatMenuFactory_AddGrantCheatMenu) == 0x000028, "Wrong size on FortCheatMenuFactory_AddGrantCheatMenu");
static_assert(offsetof(FortCheatMenuFactory_AddGrantCheatMenu, Widget) == 0x000000, "Member 'FortCheatMenuFactory_AddGrantCheatMenu::Widget' has a wrong offset!");
static_assert(offsetof(FortCheatMenuFactory_AddGrantCheatMenu, TemplateId) == 0x000008, "Member 'FortCheatMenuFactory_AddGrantCheatMenu::TemplateId' has a wrong offset!");
static_assert(offsetof(FortCheatMenuFactory_AddGrantCheatMenu, InstanceId) == 0x000018, "Member 'FortCheatMenuFactory_AddGrantCheatMenu::InstanceId' has a wrong offset!");

// Function FortniteUI.FortCheatMenuFactory.AddStoreCheatMenu
// 0x0008 (0x0008 - 0x0000)
struct FortCheatMenuFactory_AddStoreCheatMenu final
{
public:
	class UCommonUserWidget*                      Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatMenuFactory_AddStoreCheatMenu) == 0x000008, "Wrong alignment on FortCheatMenuFactory_AddStoreCheatMenu");
static_assert(sizeof(FortCheatMenuFactory_AddStoreCheatMenu) == 0x000008, "Wrong size on FortCheatMenuFactory_AddStoreCheatMenu");
static_assert(offsetof(FortCheatMenuFactory_AddStoreCheatMenu, Widget) == 0x000000, "Member 'FortCheatMenuFactory_AddStoreCheatMenu::Widget' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolProxy.BP_SetPropertyValue
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolProxy_BP_SetPropertyValue final
{
public:
	int32                                         PropertyIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolProxy_BP_SetPropertyValue) == 0x000004, "Wrong alignment on HUDLayoutToolProxy_BP_SetPropertyValue");
static_assert(sizeof(HUDLayoutToolProxy_BP_SetPropertyValue) == 0x000008, "Wrong size on HUDLayoutToolProxy_BP_SetPropertyValue");
static_assert(offsetof(HUDLayoutToolProxy_BP_SetPropertyValue, PropertyIndex) == 0x000000, "Member 'HUDLayoutToolProxy_BP_SetPropertyValue::PropertyIndex' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolProxy_BP_SetPropertyValue, NewValue) == 0x000004, "Member 'HUDLayoutToolProxy_BP_SetPropertyValue::NewValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolProxy.BP_GetMultiOptionLabels
// 0x0018 (0x0018 - 0x0000)
struct HUDLayoutToolProxy_BP_GetMultiOptionLabels final
{
public:
	int32                                         PropertyIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolProxy_BP_GetMultiOptionLabels) == 0x000008, "Wrong alignment on HUDLayoutToolProxy_BP_GetMultiOptionLabels");
static_assert(sizeof(HUDLayoutToolProxy_BP_GetMultiOptionLabels) == 0x000018, "Wrong size on HUDLayoutToolProxy_BP_GetMultiOptionLabels");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetMultiOptionLabels, PropertyIndex) == 0x000000, "Member 'HUDLayoutToolProxy_BP_GetMultiOptionLabels::PropertyIndex' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetMultiOptionLabels, ReturnValue) == 0x000008, "Member 'HUDLayoutToolProxy_BP_GetMultiOptionLabels::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolProxy.BP_GetNumOfProperties
// 0x0004 (0x0004 - 0x0000)
struct HUDLayoutToolProxy_BP_GetNumOfProperties final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolProxy_BP_GetNumOfProperties) == 0x000004, "Wrong alignment on HUDLayoutToolProxy_BP_GetNumOfProperties");
static_assert(sizeof(HUDLayoutToolProxy_BP_GetNumOfProperties) == 0x000004, "Wrong size on HUDLayoutToolProxy_BP_GetNumOfProperties");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetNumOfProperties, ReturnValue) == 0x000000, "Member 'HUDLayoutToolProxy_BP_GetNumOfProperties::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolProxy.BP_GetPropertyName
// 0x0020 (0x0020 - 0x0000)
struct HUDLayoutToolProxy_BP_GetPropertyName final
{
public:
	int32                                         PropertyIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolProxy_BP_GetPropertyName) == 0x000008, "Wrong alignment on HUDLayoutToolProxy_BP_GetPropertyName");
static_assert(sizeof(HUDLayoutToolProxy_BP_GetPropertyName) == 0x000020, "Wrong size on HUDLayoutToolProxy_BP_GetPropertyName");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetPropertyName, PropertyIndex) == 0x000000, "Member 'HUDLayoutToolProxy_BP_GetPropertyName::PropertyIndex' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetPropertyName, ReturnValue) == 0x000008, "Member 'HUDLayoutToolProxy_BP_GetPropertyName::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolProxy.BP_GetPropertyRange
// 0x000C (0x000C - 0x0000)
struct HUDLayoutToolProxy_BP_GetPropertyRange final
{
public:
	int32                                         PropertyIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMin;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMax;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolProxy_BP_GetPropertyRange) == 0x000004, "Wrong alignment on HUDLayoutToolProxy_BP_GetPropertyRange");
static_assert(sizeof(HUDLayoutToolProxy_BP_GetPropertyRange) == 0x00000C, "Wrong size on HUDLayoutToolProxy_BP_GetPropertyRange");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetPropertyRange, PropertyIndex) == 0x000000, "Member 'HUDLayoutToolProxy_BP_GetPropertyRange::PropertyIndex' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetPropertyRange, OutMin) == 0x000004, "Member 'HUDLayoutToolProxy_BP_GetPropertyRange::OutMin' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetPropertyRange, OutMax) == 0x000008, "Member 'HUDLayoutToolProxy_BP_GetPropertyRange::OutMax' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolProxy.BP_GetPropertyType
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolProxy_BP_GetPropertyType final
{
public:
	int32                                         PropertyIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELayoutPropertyType                           ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDLayoutToolProxy_BP_GetPropertyType) == 0x000004, "Wrong alignment on HUDLayoutToolProxy_BP_GetPropertyType");
static_assert(sizeof(HUDLayoutToolProxy_BP_GetPropertyType) == 0x000008, "Wrong size on HUDLayoutToolProxy_BP_GetPropertyType");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetPropertyType, PropertyIndex) == 0x000000, "Member 'HUDLayoutToolProxy_BP_GetPropertyType::PropertyIndex' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetPropertyType, ReturnValue) == 0x000004, "Member 'HUDLayoutToolProxy_BP_GetPropertyType::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolProxy.BP_GetPropertyValue
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolProxy_BP_GetPropertyValue final
{
public:
	int32                                         PropertyIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolProxy_BP_GetPropertyValue) == 0x000004, "Wrong alignment on HUDLayoutToolProxy_BP_GetPropertyValue");
static_assert(sizeof(HUDLayoutToolProxy_BP_GetPropertyValue) == 0x000008, "Wrong size on HUDLayoutToolProxy_BP_GetPropertyValue");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetPropertyValue, PropertyIndex) == 0x000000, "Member 'HUDLayoutToolProxy_BP_GetPropertyValue::PropertyIndex' has a wrong offset!");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetPropertyValue, ReturnValue) == 0x000004, "Member 'HUDLayoutToolProxy_BP_GetPropertyValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolProxy.BP_GetWidgetName
// 0x0018 (0x0018 - 0x0000)
struct HUDLayoutToolProxy_BP_GetWidgetName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolProxy_BP_GetWidgetName) == 0x000008, "Wrong alignment on HUDLayoutToolProxy_BP_GetWidgetName");
static_assert(sizeof(HUDLayoutToolProxy_BP_GetWidgetName) == 0x000018, "Wrong size on HUDLayoutToolProxy_BP_GetWidgetName");
static_assert(offsetof(HUDLayoutToolProxy_BP_GetWidgetName, ReturnValue) == 0x000000, "Member 'HUDLayoutToolProxy_BP_GetWidgetName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPageDetailsWidget.HandleRewardDetailsModalWidgetDeactivated
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated final
{
public:
	class UCommonActivatablePanel*                DeactivatedPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated) == 0x000008, "Wrong alignment on FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated");
static_assert(sizeof(FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated) == 0x000008, "Wrong size on FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated, DeactivatedPanel) == 0x000000, "Member 'FortCollectionBookPageDetailsWidget_HandleRewardDetailsModalWidgetDeactivated::DeactivatedPanel' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPageDetailsWidget.OnDetailsPageChanged
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPageDetailsWidget_OnDetailsPageChanged final
{
public:
	const class UFortCollectionBookPage*          InNewDetailsPage;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageDetailsWidget_OnDetailsPageChanged) == 0x000008, "Wrong alignment on FortCollectionBookPageDetailsWidget_OnDetailsPageChanged");
static_assert(sizeof(FortCollectionBookPageDetailsWidget_OnDetailsPageChanged) == 0x000008, "Wrong size on FortCollectionBookPageDetailsWidget_OnDetailsPageChanged");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnDetailsPageChanged, InNewDetailsPage) == 0x000000, "Member 'FortCollectionBookPageDetailsWidget_OnDetailsPageChanged::InNewDetailsPage' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPageDetailsWidget.OnPageProgressionUpdated
// 0x000C (0x000C - 0x0000)
struct FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated final
{
public:
	int32                                         TotalFilledSlots;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSlots;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCollectionBookState                      State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated) == 0x000004, "Wrong alignment on FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated");
static_assert(sizeof(FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated) == 0x00000C, "Wrong size on FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated, TotalFilledSlots) == 0x000000, "Member 'FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated::TotalFilledSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated, TotalSlots) == 0x000004, "Member 'FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated::TotalSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated, State) == 0x000008, "Member 'FortCollectionBookPageDetailsWidget_OnPageProgressionUpdated::State' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPageDetailsWidget.OnSlotItemComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookPageDetailsWidget_OnSlotItemComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageDetailsWidget_OnSlotItemComplete) == 0x000008, "Wrong alignment on FortCollectionBookPageDetailsWidget_OnSlotItemComplete");
static_assert(sizeof(FortCollectionBookPageDetailsWidget_OnSlotItemComplete) == 0x000010, "Wrong size on FortCollectionBookPageDetailsWidget_OnSlotItemComplete");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnSlotItemComplete, SlottedItem) == 0x000000, "Member 'FortCollectionBookPageDetailsWidget_OnSlotItemComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnSlotItemComplete, SlotId) == 0x000008, "Member 'FortCollectionBookPageDetailsWidget_OnSlotItemComplete::SlotId' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPageDetailsWidget.OnUnslotItemComplete
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookPageDetailsWidget_OnUnslotItemComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortAccountItem*                 OldItem;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPageDetailsWidget_OnUnslotItemComplete) == 0x000008, "Wrong alignment on FortCollectionBookPageDetailsWidget_OnUnslotItemComplete");
static_assert(sizeof(FortCollectionBookPageDetailsWidget_OnUnslotItemComplete) == 0x000018, "Wrong size on FortCollectionBookPageDetailsWidget_OnUnslotItemComplete");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnUnslotItemComplete, SlottedItem) == 0x000000, "Member 'FortCollectionBookPageDetailsWidget_OnUnslotItemComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnUnslotItemComplete, OldItem) == 0x000008, "Member 'FortCollectionBookPageDetailsWidget_OnUnslotItemComplete::OldItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPageDetailsWidget_OnUnslotItemComplete, SlotId) == 0x000010, "Member 'FortCollectionBookPageDetailsWidget_OnUnslotItemComplete::SlotId' has a wrong offset!");

// Function FortniteUI.LiveStreamMenuToggleButton.RefreshButton
// 0x0001 (0x0001 - 0x0000)
struct LiveStreamMenuToggleButton_RefreshButton final
{
public:
	bool                                          IsLiveStreamEnabled;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiveStreamMenuToggleButton_RefreshButton) == 0x000001, "Wrong alignment on LiveStreamMenuToggleButton_RefreshButton");
static_assert(sizeof(LiveStreamMenuToggleButton_RefreshButton) == 0x000001, "Wrong size on LiveStreamMenuToggleButton_RefreshButton");
static_assert(offsetof(LiveStreamMenuToggleButton_RefreshButton, IsLiveStreamEnabled) == 0x000000, "Member 'LiveStreamMenuToggleButton_RefreshButton::IsLiveStreamEnabled' has a wrong offset!");

// DelegateFunction FortniteUI.FortCollectionBookPicker.OnSlotItemConfirmed__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookPicker_OnSlotItemConfirmed__DelegateSignature final
{
public:
	class UFortItem*                              ItemToSlot;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortDialogExternalLatentActionHandle  LatentActionHandle;                                // 0x0010(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookPicker_OnSlotItemConfirmed__DelegateSignature) == 0x000008, "Wrong alignment on FortCollectionBookPicker_OnSlotItemConfirmed__DelegateSignature");
static_assert(sizeof(FortCollectionBookPicker_OnSlotItemConfirmed__DelegateSignature) == 0x000018, "Wrong size on FortCollectionBookPicker_OnSlotItemConfirmed__DelegateSignature");
static_assert(offsetof(FortCollectionBookPicker_OnSlotItemConfirmed__DelegateSignature, ItemToSlot) == 0x000000, "Member 'FortCollectionBookPicker_OnSlotItemConfirmed__DelegateSignature::ItemToSlot' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPicker_OnSlotItemConfirmed__DelegateSignature, SlotId) == 0x000008, "Member 'FortCollectionBookPicker_OnSlotItemConfirmed__DelegateSignature::SlotId' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPicker_OnSlotItemConfirmed__DelegateSignature, LatentActionHandle) == 0x000010, "Member 'FortCollectionBookPicker_OnSlotItemConfirmed__DelegateSignature::LatentActionHandle' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPicker.SlotItemConfirmationComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookPicker_SlotItemConfirmationComplete final
{
public:
	class UFortItem*                              CommittedItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortDialogExternalLatentActionHandle  LatentActionHandle;                                // 0x0008(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookPicker_SlotItemConfirmationComplete) == 0x000008, "Wrong alignment on FortCollectionBookPicker_SlotItemConfirmationComplete");
static_assert(sizeof(FortCollectionBookPicker_SlotItemConfirmationComplete) == 0x000010, "Wrong size on FortCollectionBookPicker_SlotItemConfirmationComplete");
static_assert(offsetof(FortCollectionBookPicker_SlotItemConfirmationComplete, CommittedItem) == 0x000000, "Member 'FortCollectionBookPicker_SlotItemConfirmationComplete::CommittedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPicker_SlotItemConfirmationComplete, LatentActionHandle) == 0x000008, "Member 'FortCollectionBookPicker_SlotItemConfirmationComplete::LatentActionHandle' has a wrong offset!");

// Function FortniteUI.FortCollectionBookPicker.GetCurrentSlottedItem
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookPicker_GetCurrentSlottedItem final
{
public:
	class UFortAccountItem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPicker_GetCurrentSlottedItem) == 0x000008, "Wrong alignment on FortCollectionBookPicker_GetCurrentSlottedItem");
static_assert(sizeof(FortCollectionBookPicker_GetCurrentSlottedItem) == 0x000008, "Wrong size on FortCollectionBookPicker_GetCurrentSlottedItem");
static_assert(offsetof(FortCollectionBookPicker_GetCurrentSlottedItem, ReturnValue) == 0x000000, "Member 'FortCollectionBookPicker_GetCurrentSlottedItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressionRewardDetailInspectWidget.OnXPRequiredChanged
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged final
{
public:
	int32                                         NewXPRequired;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged) == 0x000004, "Wrong alignment on FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged");
static_assert(sizeof(FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged) == 0x000004, "Wrong size on FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged");
static_assert(offsetof(FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged, NewXPRequired) == 0x000000, "Member 'FortCollectionBookProgressionRewardDetailInspectWidget_OnXPRequiredChanged::NewXPRequired' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressionRewardDetailInspectWidget.SetAssociatedLevel
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel) == 0x000004, "Wrong alignment on FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel");
static_assert(sizeof(FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel) == 0x000004, "Wrong size on FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel");
static_assert(offsetof(FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel, Level) == 0x000000, "Member 'FortCollectionBookProgressionRewardDetailInspectWidget_SetAssociatedLevel::Level' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressionRewardDetailInspectWidget.GetXPRequired
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired) == 0x000004, "Wrong alignment on FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired");
static_assert(sizeof(FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired) == 0x000004, "Wrong size on FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired");
static_assert(offsetof(FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired, ReturnValue) == 0x000000, "Member 'FortCollectionBookProgressionRewardDetailInspectWidget_GetXPRequired::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressWidget.HandleDetailsModalWidgetDeactivated
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated final
{
public:
	class UCommonActivatablePanel*                DeactivatedPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated) == 0x000008, "Wrong alignment on FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated");
static_assert(sizeof(FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated) == 0x000008, "Wrong size on FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated");
static_assert(offsetof(FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated, DeactivatedPanel) == 0x000000, "Member 'FortCollectionBookProgressWidget_HandleDetailsModalWidgetDeactivated::DeactivatedPanel' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressWidget.OnCollectionBookLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressWidget_OnCollectionBookLevelChanged final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressWidget_OnCollectionBookLevelChanged) == 0x000004, "Wrong alignment on FortCollectionBookProgressWidget_OnCollectionBookLevelChanged");
static_assert(sizeof(FortCollectionBookProgressWidget_OnCollectionBookLevelChanged) == 0x000004, "Wrong size on FortCollectionBookProgressWidget_OnCollectionBookLevelChanged");
static_assert(offsetof(FortCollectionBookProgressWidget_OnCollectionBookLevelChanged, NewLevel) == 0x000000, "Member 'FortCollectionBookProgressWidget_OnCollectionBookLevelChanged::NewLevel' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressWidget.OnCollectionBookLevelProgressionChanged
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged final
{
public:
	float                                         NewCompletionPct;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged) == 0x000004, "Wrong alignment on FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged");
static_assert(sizeof(FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged) == 0x000004, "Wrong size on FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged");
static_assert(offsetof(FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged, NewCompletionPct) == 0x000000, "Member 'FortCollectionBookProgressWidget_OnCollectionBookLevelProgressionChanged::NewCompletionPct' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressWidget.OnCollectionBookPageSelected
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookProgressWidget_OnCollectionBookPageSelected final
{
public:
	const class UFortCollectionBookPage*          SelectedPage;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressWidget_OnCollectionBookPageSelected) == 0x000008, "Wrong alignment on FortCollectionBookProgressWidget_OnCollectionBookPageSelected");
static_assert(sizeof(FortCollectionBookProgressWidget_OnCollectionBookPageSelected) == 0x000008, "Wrong size on FortCollectionBookProgressWidget_OnCollectionBookPageSelected");
static_assert(offsetof(FortCollectionBookProgressWidget_OnCollectionBookPageSelected, SelectedPage) == 0x000000, "Member 'FortCollectionBookProgressWidget_OnCollectionBookPageSelected::SelectedPage' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressWidget.OnCollectionBookPreviewXPChange
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange final
{
public:
	float                                         PreviewCompletionPct;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange) == 0x000004, "Wrong alignment on FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange");
static_assert(sizeof(FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange) == 0x000004, "Wrong size on FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange");
static_assert(offsetof(FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange, PreviewCompletionPct) == 0x000000, "Member 'FortCollectionBookProgressWidget_OnCollectionBookPreviewXPChange::PreviewCompletionPct' has a wrong offset!");

// Function FortniteUI.FortCollectionBookProgressWidget.OnSlottedItemOperationComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookProgressWidget_OnSlottedItemOperationComplete final
{
public:
	const class UFortAccountItem*                 ItemSlotted;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookProgressWidget_OnSlottedItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookProgressWidget_OnSlottedItemOperationComplete");
static_assert(sizeof(FortCollectionBookProgressWidget_OnSlottedItemOperationComplete) == 0x000010, "Wrong size on FortCollectionBookProgressWidget_OnSlottedItemOperationComplete");
static_assert(offsetof(FortCollectionBookProgressWidget_OnSlottedItemOperationComplete, ItemSlotted) == 0x000000, "Member 'FortCollectionBookProgressWidget_OnSlottedItemOperationComplete::ItemSlotted' has a wrong offset!");
static_assert(offsetof(FortCollectionBookProgressWidget_OnSlottedItemOperationComplete, SlotId) == 0x000008, "Member 'FortCollectionBookProgressWidget_OnSlottedItemOperationComplete::SlotId' has a wrong offset!");

// Function FortniteUI.MassiveGadgetEquippedWidget.HandleMassiveTagChanged
// 0x000C (0x000C - 0x0000)
struct MassiveGadgetEquippedWidget_HandleMassiveTagChanged final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MassiveGadgetEquippedWidget_HandleMassiveTagChanged) == 0x000004, "Wrong alignment on MassiveGadgetEquippedWidget_HandleMassiveTagChanged");
static_assert(sizeof(MassiveGadgetEquippedWidget_HandleMassiveTagChanged) == 0x00000C, "Wrong size on MassiveGadgetEquippedWidget_HandleMassiveTagChanged");
static_assert(offsetof(MassiveGadgetEquippedWidget_HandleMassiveTagChanged, Tag) == 0x000000, "Member 'MassiveGadgetEquippedWidget_HandleMassiveTagChanged::Tag' has a wrong offset!");
static_assert(offsetof(MassiveGadgetEquippedWidget_HandleMassiveTagChanged, Count) == 0x000008, "Member 'MassiveGadgetEquippedWidget_HandleMassiveTagChanged::Count' has a wrong offset!");

// DelegateFunction FortniteUI.FortCollectionBookRewardCardWidget.OnDisplayedItemChangedEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookRewardCardWidget_OnDisplayedItemChangedEvent__DelegateSignature final
{
public:
	class UFortItem*                              DisplayedItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookRewardCardWidget_OnDisplayedItemChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on FortCollectionBookRewardCardWidget_OnDisplayedItemChangedEvent__DelegateSignature");
static_assert(sizeof(FortCollectionBookRewardCardWidget_OnDisplayedItemChangedEvent__DelegateSignature) == 0x000008, "Wrong size on FortCollectionBookRewardCardWidget_OnDisplayedItemChangedEvent__DelegateSignature");
static_assert(offsetof(FortCollectionBookRewardCardWidget_OnDisplayedItemChangedEvent__DelegateSignature, DisplayedItem) == 0x000000, "Member 'FortCollectionBookRewardCardWidget_OnDisplayedItemChangedEvent__DelegateSignature::DisplayedItem' has a wrong offset!");

// Function FortniteUI.FortCollectionBookRewardCardWidget.SetRewards
// 0x0030 (0x0030 - 0x0000)
struct FortCollectionBookRewardCardWidget_SetRewards final
{
public:
	struct FFortRewardInfo                        Rewards;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookRewardCardWidget_SetRewards) == 0x000008, "Wrong alignment on FortCollectionBookRewardCardWidget_SetRewards");
static_assert(sizeof(FortCollectionBookRewardCardWidget_SetRewards) == 0x000030, "Wrong size on FortCollectionBookRewardCardWidget_SetRewards");
static_assert(offsetof(FortCollectionBookRewardCardWidget_SetRewards, Rewards) == 0x000000, "Member 'FortCollectionBookRewardCardWidget_SetRewards::Rewards' has a wrong offset!");

// Function FortniteUI.FortCollectionBookRewardCardWidget.HasRewards
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookRewardCardWidget_HasRewards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookRewardCardWidget_HasRewards) == 0x000001, "Wrong alignment on FortCollectionBookRewardCardWidget_HasRewards");
static_assert(sizeof(FortCollectionBookRewardCardWidget_HasRewards) == 0x000001, "Wrong size on FortCollectionBookRewardCardWidget_HasRewards");
static_assert(offsetof(FortCollectionBookRewardCardWidget_HasRewards, ReturnValue) == 0x000000, "Member 'FortCollectionBookRewardCardWidget_HasRewards::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionCompletionRewardWidget.HandleRewardDetailsModalWidgetDeactivated
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated final
{
public:
	class UCommonActivatablePanel*                DeactivatedPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated) == 0x000008, "Wrong alignment on FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated");
static_assert(sizeof(FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated) == 0x000008, "Wrong size on FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated");
static_assert(offsetof(FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated, DeactivatedPanel) == 0x000000, "Member 'FortCollectionBookSectionCompletionRewardWidget_HandleRewardDetailsModalWidgetDeactivated::DeactivatedPanel' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionTileWidget.OnItemSlotted
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSectionTileWidget_OnItemSlotted final
{
public:
	const class UFortAccountItem*                 ItemSlotted;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionTileWidget_OnItemSlotted) == 0x000008, "Wrong alignment on FortCollectionBookSectionTileWidget_OnItemSlotted");
static_assert(sizeof(FortCollectionBookSectionTileWidget_OnItemSlotted) == 0x000010, "Wrong size on FortCollectionBookSectionTileWidget_OnItemSlotted");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnItemSlotted, ItemSlotted) == 0x000000, "Member 'FortCollectionBookSectionTileWidget_OnItemSlotted::ItemSlotted' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnItemSlotted, SlotId) == 0x000008, "Member 'FortCollectionBookSectionTileWidget_OnItemSlotted::SlotId' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionTileWidget.OnItemUnslotted
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookSectionTileWidget_OnItemUnslotted final
{
public:
	const class UFortAccountItem*                 ItemUnslotted;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortAccountItem*                 OldSlottedItem;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSectionTileWidget_OnItemUnslotted) == 0x000008, "Wrong alignment on FortCollectionBookSectionTileWidget_OnItemUnslotted");
static_assert(sizeof(FortCollectionBookSectionTileWidget_OnItemUnslotted) == 0x000018, "Wrong size on FortCollectionBookSectionTileWidget_OnItemUnslotted");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnItemUnslotted, ItemUnslotted) == 0x000000, "Member 'FortCollectionBookSectionTileWidget_OnItemUnslotted::ItemUnslotted' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnItemUnslotted, OldSlottedItem) == 0x000008, "Member 'FortCollectionBookSectionTileWidget_OnItemUnslotted::OldSlottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnItemUnslotted, SlotId) == 0x000010, "Member 'FortCollectionBookSectionTileWidget_OnItemUnslotted::SlotId' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSectionTileWidget.OnSectionSlotUpdate
// 0x000C (0x000C - 0x0000)
struct FortCollectionBookSectionTileWidget_OnSectionSlotUpdate final
{
public:
	int32                                         NumFilledSlots;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSlots;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCollectionBookState                      SectionState;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookSectionTileWidget_OnSectionSlotUpdate) == 0x000004, "Wrong alignment on FortCollectionBookSectionTileWidget_OnSectionSlotUpdate");
static_assert(sizeof(FortCollectionBookSectionTileWidget_OnSectionSlotUpdate) == 0x00000C, "Wrong size on FortCollectionBookSectionTileWidget_OnSectionSlotUpdate");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnSectionSlotUpdate, NumFilledSlots) == 0x000000, "Member 'FortCollectionBookSectionTileWidget_OnSectionSlotUpdate::NumFilledSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnSectionSlotUpdate, NumSlots) == 0x000004, "Member 'FortCollectionBookSectionTileWidget_OnSectionSlotUpdate::NumSlots' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSectionTileWidget_OnSectionSlotUpdate, SectionState) == 0x000008, "Member 'FortCollectionBookSectionTileWidget_OnSectionSlotUpdate::SectionState' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotWidget.OnSlottedItemOperationComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookSlotWidget_OnSlottedItemOperationComplete final
{
public:
	const class UFortAccountItem*                 ItemSlotted;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_OnSlottedItemOperationComplete) == 0x000008, "Wrong alignment on FortCollectionBookSlotWidget_OnSlottedItemOperationComplete");
static_assert(sizeof(FortCollectionBookSlotWidget_OnSlottedItemOperationComplete) == 0x000010, "Wrong size on FortCollectionBookSlotWidget_OnSlottedItemOperationComplete");
static_assert(offsetof(FortCollectionBookSlotWidget_OnSlottedItemOperationComplete, ItemSlotted) == 0x000000, "Member 'FortCollectionBookSlotWidget_OnSlottedItemOperationComplete::ItemSlotted' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotWidget_OnSlottedItemOperationComplete, SlotId) == 0x000008, "Member 'FortCollectionBookSlotWidget_OnSlottedItemOperationComplete::SlotId' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotWidget.OnUnslotItemComplete
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookSlotWidget_OnUnslotItemComplete final
{
public:
	const class UFortAccountItem*                 UnslottedItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortAccountItem*                 OldItem;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_OnUnslotItemComplete) == 0x000008, "Wrong alignment on FortCollectionBookSlotWidget_OnUnslotItemComplete");
static_assert(sizeof(FortCollectionBookSlotWidget_OnUnslotItemComplete) == 0x000018, "Wrong size on FortCollectionBookSlotWidget_OnUnslotItemComplete");
static_assert(offsetof(FortCollectionBookSlotWidget_OnUnslotItemComplete, UnslottedItem) == 0x000000, "Member 'FortCollectionBookSlotWidget_OnUnslotItemComplete::UnslottedItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotWidget_OnUnslotItemComplete, OldItem) == 0x000008, "Member 'FortCollectionBookSlotWidget_OnUnslotItemComplete::OldItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookSlotWidget_OnUnslotItemComplete, SlotId) == 0x000010, "Member 'FortCollectionBookSlotWidget_OnUnslotItemComplete::SlotId' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotWidget.GetNumItemsToSlot
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookSlotWidget_GetNumItemsToSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_GetNumItemsToSlot) == 0x000004, "Wrong alignment on FortCollectionBookSlotWidget_GetNumItemsToSlot");
static_assert(sizeof(FortCollectionBookSlotWidget_GetNumItemsToSlot) == 0x000004, "Wrong size on FortCollectionBookSlotWidget_GetNumItemsToSlot");
static_assert(offsetof(FortCollectionBookSlotWidget_GetNumItemsToSlot, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotWidget_GetNumItemsToSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotWidget.GetSlotRowName
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSlotWidget_GetSlotRowName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_GetSlotRowName) == 0x000004, "Wrong alignment on FortCollectionBookSlotWidget_GetSlotRowName");
static_assert(sizeof(FortCollectionBookSlotWidget_GetSlotRowName) == 0x000008, "Wrong size on FortCollectionBookSlotWidget_GetSlotRowName");
static_assert(offsetof(FortCollectionBookSlotWidget_GetSlotRowName, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotWidget_GetSlotRowName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotWidget.GetSlottedItemRepresentation
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookSlotWidget_GetSlottedItemRepresentation final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_GetSlottedItemRepresentation) == 0x000008, "Wrong alignment on FortCollectionBookSlotWidget_GetSlottedItemRepresentation");
static_assert(sizeof(FortCollectionBookSlotWidget_GetSlottedItemRepresentation) == 0x000008, "Wrong size on FortCollectionBookSlotWidget_GetSlottedItemRepresentation");
static_assert(offsetof(FortCollectionBookSlotWidget_GetSlottedItemRepresentation, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotWidget_GetSlottedItemRepresentation::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotWidget.HasItemsToSlot
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSlotWidget_HasItemsToSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_HasItemsToSlot) == 0x000001, "Wrong alignment on FortCollectionBookSlotWidget_HasItemsToSlot");
static_assert(sizeof(FortCollectionBookSlotWidget_HasItemsToSlot) == 0x000001, "Wrong size on FortCollectionBookSlotWidget_HasItemsToSlot");
static_assert(offsetof(FortCollectionBookSlotWidget_HasItemsToSlot, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotWidget_HasItemsToSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCollectionBookSlotWidget.IsItemSlotted
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookSlotWidget_IsItemSlotted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookSlotWidget_IsItemSlotted) == 0x000001, "Wrong alignment on FortCollectionBookSlotWidget_IsItemSlotted");
static_assert(sizeof(FortCollectionBookSlotWidget_IsItemSlotted) == 0x000001, "Wrong size on FortCollectionBookSlotWidget_IsItemSlotted");
static_assert(offsetof(FortCollectionBookSlotWidget_IsItemSlotted, ReturnValue) == 0x000000, "Member 'FortCollectionBookSlotWidget_IsItemSlotted::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCraftingBarWidget.HandlePlayerStoppedCrafting
// 0x0002 (0x0002 - 0x0000)
struct FortCraftingBarWidget_HandlePlayerStoppedCrafting final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCraftFailCause                           CraftFailureCause;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCraftingBarWidget_HandlePlayerStoppedCrafting) == 0x000001, "Wrong alignment on FortCraftingBarWidget_HandlePlayerStoppedCrafting");
static_assert(sizeof(FortCraftingBarWidget_HandlePlayerStoppedCrafting) == 0x000002, "Wrong size on FortCraftingBarWidget_HandlePlayerStoppedCrafting");
static_assert(offsetof(FortCraftingBarWidget_HandlePlayerStoppedCrafting, bSuccess) == 0x000000, "Member 'FortCraftingBarWidget_HandlePlayerStoppedCrafting::bSuccess' has a wrong offset!");
static_assert(offsetof(FortCraftingBarWidget_HandlePlayerStoppedCrafting, CraftFailureCause) == 0x000001, "Member 'FortCraftingBarWidget_HandlePlayerStoppedCrafting::CraftFailureCause' has a wrong offset!");

// Function FortniteUI.FortCraftingBarWidget.SetHideCraftingBar
// 0x0001 (0x0001 - 0x0000)
struct FortCraftingBarWidget_SetHideCraftingBar final
{
public:
	bool                                          bInHideCraftBar;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCraftingBarWidget_SetHideCraftingBar) == 0x000001, "Wrong alignment on FortCraftingBarWidget_SetHideCraftingBar");
static_assert(sizeof(FortCraftingBarWidget_SetHideCraftingBar) == 0x000001, "Wrong size on FortCraftingBarWidget_SetHideCraftingBar");
static_assert(offsetof(FortCraftingBarWidget_SetHideCraftingBar, bInHideCraftBar) == 0x000000, "Member 'FortCraftingBarWidget_SetHideCraftingBar::bInHideCraftBar' has a wrong offset!");

// Function FortniteUI.FortCreativeInfoIndicatorWidget.SetKeyBindWidgetBoundAction
// 0x0018 (0x0018 - 0x0000)
struct FortCreativeInfoIndicatorWidget_SetKeyBindWidgetBoundAction final
{
public:
	class UFortKeybindWidget*                     FortKeybindWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingInteraction                      InteractionType;                                   // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativeInfoIndicatorWidget_SetKeyBindWidgetBoundAction) == 0x000008, "Wrong alignment on FortCreativeInfoIndicatorWidget_SetKeyBindWidgetBoundAction");
static_assert(sizeof(FortCreativeInfoIndicatorWidget_SetKeyBindWidgetBoundAction) == 0x000018, "Wrong size on FortCreativeInfoIndicatorWidget_SetKeyBindWidgetBoundAction");
static_assert(offsetof(FortCreativeInfoIndicatorWidget_SetKeyBindWidgetBoundAction, FortKeybindWidget) == 0x000000, "Member 'FortCreativeInfoIndicatorWidget_SetKeyBindWidgetBoundAction::FortKeybindWidget' has a wrong offset!");
static_assert(offsetof(FortCreativeInfoIndicatorWidget_SetKeyBindWidgetBoundAction, ActionName) == 0x000008, "Member 'FortCreativeInfoIndicatorWidget_SetKeyBindWidgetBoundAction::ActionName' has a wrong offset!");
static_assert(offsetof(FortCreativeInfoIndicatorWidget_SetKeyBindWidgetBoundAction, InteractionType) == 0x000010, "Member 'FortCreativeInfoIndicatorWidget_SetKeyBindWidgetBoundAction::InteractionType' has a wrong offset!");

// Function FortniteUI.FortCreativeIslandPanel.PopPanelInputComponent
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeIslandPanel_PopPanelInputComponent final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeIslandPanel_PopPanelInputComponent) == 0x000008, "Wrong alignment on FortCreativeIslandPanel_PopPanelInputComponent");
static_assert(sizeof(FortCreativeIslandPanel_PopPanelInputComponent) == 0x000008, "Wrong size on FortCreativeIslandPanel_PopPanelInputComponent");
static_assert(offsetof(FortCreativeIslandPanel_PopPanelInputComponent, PlayerController) == 0x000000, "Member 'FortCreativeIslandPanel_PopPanelInputComponent::PlayerController' has a wrong offset!");

// Function FortniteUI.FortCreativeIslandPanel.PushPanelInputComponent
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeIslandPanel_PushPanelInputComponent final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeIslandPanel_PushPanelInputComponent) == 0x000008, "Wrong alignment on FortCreativeIslandPanel_PushPanelInputComponent");
static_assert(sizeof(FortCreativeIslandPanel_PushPanelInputComponent) == 0x000008, "Wrong size on FortCreativeIslandPanel_PushPanelInputComponent");
static_assert(offsetof(FortCreativeIslandPanel_PushPanelInputComponent, PlayerController) == 0x000000, "Member 'FortCreativeIslandPanel_PushPanelInputComponent::PlayerController' has a wrong offset!");

// Function FortniteUI.FortCreativeIslandPanel.GetSupportCode
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeIslandPanel_GetSupportCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeIslandPanel_GetSupportCode) == 0x000008, "Wrong alignment on FortCreativeIslandPanel_GetSupportCode");
static_assert(sizeof(FortCreativeIslandPanel_GetSupportCode) == 0x000010, "Wrong size on FortCreativeIslandPanel_GetSupportCode");
static_assert(offsetof(FortCreativeIslandPanel_GetSupportCode, ReturnValue) == 0x000000, "Member 'FortCreativeIslandPanel_GetSupportCode::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativeItemListMenu.BroadcastOnItemSelected
// 0x0120 (0x0120 - 0x0000)
struct FortCreativeItemListMenu_BroadcastOnItemSelected final
{
public:
	struct FFortItemEntry                         ItemToSpawn;                                       // 0x0000(0x0120)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeItemListMenu_BroadcastOnItemSelected) == 0x000008, "Wrong alignment on FortCreativeItemListMenu_BroadcastOnItemSelected");
static_assert(sizeof(FortCreativeItemListMenu_BroadcastOnItemSelected) == 0x000120, "Wrong size on FortCreativeItemListMenu_BroadcastOnItemSelected");
static_assert(offsetof(FortCreativeItemListMenu_BroadcastOnItemSelected, ItemToSpawn) == 0x000000, "Member 'FortCreativeItemListMenu_BroadcastOnItemSelected::ItemToSpawn' has a wrong offset!");

// Function FortniteUI.FortCreativeItemListMenu.CanPlayerCreateInVolume
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeItemListMenu_CanPlayerCreateInVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativeItemListMenu_CanPlayerCreateInVolume) == 0x000008, "Wrong alignment on FortCreativeItemListMenu_CanPlayerCreateInVolume");
static_assert(sizeof(FortCreativeItemListMenu_CanPlayerCreateInVolume) == 0x000010, "Wrong size on FortCreativeItemListMenu_CanPlayerCreateInVolume");
static_assert(offsetof(FortCreativeItemListMenu_CanPlayerCreateInVolume, WorldContextObject) == 0x000000, "Member 'FortCreativeItemListMenu_CanPlayerCreateInVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortCreativeItemListMenu_CanPlayerCreateInVolume, ReturnValue) == 0x000008, "Member 'FortCreativeItemListMenu_CanPlayerCreateInVolume::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativeItemListMenu.GetCardSizeForCategory
// 0x000C (0x000C - 0x0000)
struct FortCreativeItemListMenu_GetCardSizeForCategory final
{
public:
	class FName                                   ItemListCategoryName;                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemCardSize                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativeItemListMenu_GetCardSizeForCategory) == 0x000004, "Wrong alignment on FortCreativeItemListMenu_GetCardSizeForCategory");
static_assert(sizeof(FortCreativeItemListMenu_GetCardSizeForCategory) == 0x00000C, "Wrong size on FortCreativeItemListMenu_GetCardSizeForCategory");
static_assert(offsetof(FortCreativeItemListMenu_GetCardSizeForCategory, ItemListCategoryName) == 0x000000, "Member 'FortCreativeItemListMenu_GetCardSizeForCategory::ItemListCategoryName' has a wrong offset!");
static_assert(offsetof(FortCreativeItemListMenu_GetCardSizeForCategory, ReturnValue) == 0x000008, "Member 'FortCreativeItemListMenu_GetCardSizeForCategory::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativeItemListMenu.GetCollapseBorderPadFlagForCategory
// 0x000C (0x000C - 0x0000)
struct FortCreativeItemListMenu_GetCollapseBorderPadFlagForCategory final
{
public:
	class FName                                   ItemListCategoryName;                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativeItemListMenu_GetCollapseBorderPadFlagForCategory) == 0x000004, "Wrong alignment on FortCreativeItemListMenu_GetCollapseBorderPadFlagForCategory");
static_assert(sizeof(FortCreativeItemListMenu_GetCollapseBorderPadFlagForCategory) == 0x00000C, "Wrong size on FortCreativeItemListMenu_GetCollapseBorderPadFlagForCategory");
static_assert(offsetof(FortCreativeItemListMenu_GetCollapseBorderPadFlagForCategory, ItemListCategoryName) == 0x000000, "Member 'FortCreativeItemListMenu_GetCollapseBorderPadFlagForCategory::ItemListCategoryName' has a wrong offset!");
static_assert(offsetof(FortCreativeItemListMenu_GetCollapseBorderPadFlagForCategory, ReturnValue) == 0x000008, "Member 'FortCreativeItemListMenu_GetCollapseBorderPadFlagForCategory::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativeItemListMenu.GetTabNameFromLabel
// 0x0020 (0x0020 - 0x0000)
struct FortCreativeItemListMenu_GetTabNameFromLabel final
{
public:
	class FText                                   TabLabel;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeItemListMenu_GetTabNameFromLabel) == 0x000008, "Wrong alignment on FortCreativeItemListMenu_GetTabNameFromLabel");
static_assert(sizeof(FortCreativeItemListMenu_GetTabNameFromLabel) == 0x000020, "Wrong size on FortCreativeItemListMenu_GetTabNameFromLabel");
static_assert(offsetof(FortCreativeItemListMenu_GetTabNameFromLabel, TabLabel) == 0x000000, "Member 'FortCreativeItemListMenu_GetTabNameFromLabel::TabLabel' has a wrong offset!");
static_assert(offsetof(FortCreativeItemListMenu_GetTabNameFromLabel, ReturnValue) == 0x000018, "Member 'FortCreativeItemListMenu_GetTabNameFromLabel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortCreativeMoreInfoPanel.OnPublishComplete
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeMoreInfoPanel_OnPublishComplete final
{
public:
	class FString                                 Result;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMoreInfoPanel_OnPublishComplete) == 0x000008, "Wrong alignment on FortCreativeMoreInfoPanel_OnPublishComplete");
static_assert(sizeof(FortCreativeMoreInfoPanel_OnPublishComplete) == 0x000010, "Wrong size on FortCreativeMoreInfoPanel_OnPublishComplete");
static_assert(offsetof(FortCreativeMoreInfoPanel_OnPublishComplete, Result) == 0x000000, "Member 'FortCreativeMoreInfoPanel_OnPublishComplete::Result' has a wrong offset!");

// Function FortniteUI.FortCreativeMoreInfoPanel.OnSaveCallBack
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeMoreInfoPanel_OnSaveCallBack final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMoreInfoPanel_OnSaveCallBack) == 0x000001, "Wrong alignment on FortCreativeMoreInfoPanel_OnSaveCallBack");
static_assert(sizeof(FortCreativeMoreInfoPanel_OnSaveCallBack) == 0x000001, "Wrong size on FortCreativeMoreInfoPanel_OnSaveCallBack");
static_assert(offsetof(FortCreativeMoreInfoPanel_OnSaveCallBack, bSuccess) == 0x000000, "Member 'FortCreativeMoreInfoPanel_OnSaveCallBack::bSuccess' has a wrong offset!");

// Function FortniteUI.FortCreativeMoreInfoPanel.ShowError
// 0x0010 (0x0010 - 0x0000)
struct FortCreativeMoreInfoPanel_ShowError final
{
public:
	class FString                                 Error;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMoreInfoPanel_ShowError) == 0x000008, "Wrong alignment on FortCreativeMoreInfoPanel_ShowError");
static_assert(sizeof(FortCreativeMoreInfoPanel_ShowError) == 0x000010, "Wrong size on FortCreativeMoreInfoPanel_ShowError");
static_assert(offsetof(FortCreativeMoreInfoPanel_ShowError, Error) == 0x000000, "Member 'FortCreativeMoreInfoPanel_ShowError::Error' has a wrong offset!");

// Function FortniteUI.FortCreativeMoreInfoPanel.ShowSpinner
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeMoreInfoPanel_ShowSpinner final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeMoreInfoPanel_ShowSpinner) == 0x000001, "Wrong alignment on FortCreativeMoreInfoPanel_ShowSpinner");
static_assert(sizeof(FortCreativeMoreInfoPanel_ShowSpinner) == 0x000001, "Wrong size on FortCreativeMoreInfoPanel_ShowSpinner");
static_assert(offsetof(FortCreativeMoreInfoPanel_ShowSpinner, bShow) == 0x000000, "Member 'FortCreativeMoreInfoPanel_ShowSpinner::bShow' has a wrong offset!");

// Function FortniteUI.FortCreativePermissionOptions.UpdatePermissions
// 0x0018 (0x0018 - 0x0000)
struct FortCreativePermissionOptions_UpdatePermissions final
{
public:
	EFortCreativePlotPermission                   Permissions;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         WhiteList;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePermissionOptions_UpdatePermissions) == 0x000008, "Wrong alignment on FortCreativePermissionOptions_UpdatePermissions");
static_assert(sizeof(FortCreativePermissionOptions_UpdatePermissions) == 0x000018, "Wrong size on FortCreativePermissionOptions_UpdatePermissions");
static_assert(offsetof(FortCreativePermissionOptions_UpdatePermissions, Permissions) == 0x000000, "Member 'FortCreativePermissionOptions_UpdatePermissions::Permissions' has a wrong offset!");
static_assert(offsetof(FortCreativePermissionOptions_UpdatePermissions, WhiteList) == 0x000008, "Member 'FortCreativePermissionOptions_UpdatePermissions::WhiteList' has a wrong offset!");

// Function FortniteUI.FortCreativePublishModal.HandleDescriptionTextChanged
// 0x0018 (0x0018 - 0x0000)
struct FortCreativePublishModal_HandleDescriptionTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishModal_HandleDescriptionTextChanged) == 0x000008, "Wrong alignment on FortCreativePublishModal_HandleDescriptionTextChanged");
static_assert(sizeof(FortCreativePublishModal_HandleDescriptionTextChanged) == 0x000018, "Wrong size on FortCreativePublishModal_HandleDescriptionTextChanged");
static_assert(offsetof(FortCreativePublishModal_HandleDescriptionTextChanged, Text) == 0x000000, "Member 'FortCreativePublishModal_HandleDescriptionTextChanged::Text' has a wrong offset!");

// Function FortniteUI.FortCreativePublishModal.HandleDescriptionTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortCreativePublishModal_HandleDescriptionTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommittMethod;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativePublishModal_HandleDescriptionTextCommitted) == 0x000008, "Wrong alignment on FortCreativePublishModal_HandleDescriptionTextCommitted");
static_assert(sizeof(FortCreativePublishModal_HandleDescriptionTextCommitted) == 0x000020, "Wrong size on FortCreativePublishModal_HandleDescriptionTextCommitted");
static_assert(offsetof(FortCreativePublishModal_HandleDescriptionTextCommitted, Text) == 0x000000, "Member 'FortCreativePublishModal_HandleDescriptionTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(FortCreativePublishModal_HandleDescriptionTextCommitted, CommittMethod) == 0x000018, "Member 'FortCreativePublishModal_HandleDescriptionTextCommitted::CommittMethod' has a wrong offset!");

// Function FortniteUI.FortCreativePublishModal.HandleNameTextChanged
// 0x0018 (0x0018 - 0x0000)
struct FortCreativePublishModal_HandleNameTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishModal_HandleNameTextChanged) == 0x000008, "Wrong alignment on FortCreativePublishModal_HandleNameTextChanged");
static_assert(sizeof(FortCreativePublishModal_HandleNameTextChanged) == 0x000018, "Wrong size on FortCreativePublishModal_HandleNameTextChanged");
static_assert(offsetof(FortCreativePublishModal_HandleNameTextChanged, Text) == 0x000000, "Member 'FortCreativePublishModal_HandleNameTextChanged::Text' has a wrong offset!");

// Function FortniteUI.FortCreativePublishModal.HandleNameTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortCreativePublishModal_HandleNameTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommittMethod;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCreativePublishModal_HandleNameTextCommitted) == 0x000008, "Wrong alignment on FortCreativePublishModal_HandleNameTextCommitted");
static_assert(sizeof(FortCreativePublishModal_HandleNameTextCommitted) == 0x000020, "Wrong size on FortCreativePublishModal_HandleNameTextCommitted");
static_assert(offsetof(FortCreativePublishModal_HandleNameTextCommitted, Text) == 0x000000, "Member 'FortCreativePublishModal_HandleNameTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(FortCreativePublishModal_HandleNameTextCommitted, CommittMethod) == 0x000018, "Member 'FortCreativePublishModal_HandleNameTextCommitted::CommittMethod' has a wrong offset!");

// Function FortniteUI.FortCreativePublishModal.OnPublishedLinksChanged
// 0x0020 (0x0020 - 0x0000)
struct FortCreativePublishModal_OnPublishedLinksChanged final
{
public:
	class FString                                 ErrorCode;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mnemonic;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishModal_OnPublishedLinksChanged) == 0x000008, "Wrong alignment on FortCreativePublishModal_OnPublishedLinksChanged");
static_assert(sizeof(FortCreativePublishModal_OnPublishedLinksChanged) == 0x000020, "Wrong size on FortCreativePublishModal_OnPublishedLinksChanged");
static_assert(offsetof(FortCreativePublishModal_OnPublishedLinksChanged, ErrorCode) == 0x000000, "Member 'FortCreativePublishModal_OnPublishedLinksChanged::ErrorCode' has a wrong offset!");
static_assert(offsetof(FortCreativePublishModal_OnPublishedLinksChanged, Mnemonic) == 0x000010, "Member 'FortCreativePublishModal_OnPublishedLinksChanged::Mnemonic' has a wrong offset!");

// Function FortniteUI.FortCreativePublishModal.OnValidCheckComplete
// 0x0001 (0x0001 - 0x0000)
struct FortCreativePublishModal_OnValidCheckComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishModal_OnValidCheckComplete) == 0x000001, "Wrong alignment on FortCreativePublishModal_OnValidCheckComplete");
static_assert(sizeof(FortCreativePublishModal_OnValidCheckComplete) == 0x000001, "Wrong size on FortCreativePublishModal_OnValidCheckComplete");
static_assert(offsetof(FortCreativePublishModal_OnValidCheckComplete, bSuccess) == 0x000000, "Member 'FortCreativePublishModal_OnValidCheckComplete::bSuccess' has a wrong offset!");

// Function FortniteUI.FortCreativePublishModal.PublishMyCurrentCreativePlot
// 0x0048 (0x0048 - 0x0000)
struct FortCreativePublishModal_PublishMyCurrentCreativePlot final
{
public:
	struct FCreativePublishOptions                MyPublishOptions;                                  // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativePublishModal_PublishMyCurrentCreativePlot) == 0x000008, "Wrong alignment on FortCreativePublishModal_PublishMyCurrentCreativePlot");
static_assert(sizeof(FortCreativePublishModal_PublishMyCurrentCreativePlot) == 0x000048, "Wrong size on FortCreativePublishModal_PublishMyCurrentCreativePlot");
static_assert(offsetof(FortCreativePublishModal_PublishMyCurrentCreativePlot, MyPublishOptions) == 0x000000, "Member 'FortCreativePublishModal_PublishMyCurrentCreativePlot::MyPublishOptions' has a wrong offset!");

// Function FortniteUI.FortCreativeServerOptionTile.SetBPData
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeServerOptionTile_SetBPData final
{
public:
	const class UFortCreativeServerInfo*          ServerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeServerOptionTile_SetBPData) == 0x000008, "Wrong alignment on FortCreativeServerOptionTile_SetBPData");
static_assert(sizeof(FortCreativeServerOptionTile_SetBPData) == 0x000008, "Wrong size on FortCreativeServerOptionTile_SetBPData");
static_assert(offsetof(FortCreativeServerOptionTile_SetBPData, ServerInfo) == 0x000000, "Member 'FortCreativeServerOptionTile_SetBPData::ServerInfo' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.GetAmmoCountFromDefender
// 0x0010 (0x0010 - 0x0000)
struct FortDefenderConfigPanel_GetAmmoCountFromDefender final
{
public:
	const class UFortWorldItemDefinition*         AmmoItemDef;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDefenderConfigPanel_GetAmmoCountFromDefender) == 0x000008, "Wrong alignment on FortDefenderConfigPanel_GetAmmoCountFromDefender");
static_assert(sizeof(FortDefenderConfigPanel_GetAmmoCountFromDefender) == 0x000010, "Wrong size on FortDefenderConfigPanel_GetAmmoCountFromDefender");
static_assert(offsetof(FortDefenderConfigPanel_GetAmmoCountFromDefender, AmmoItemDef) == 0x000000, "Member 'FortDefenderConfigPanel_GetAmmoCountFromDefender::AmmoItemDef' has a wrong offset!");
static_assert(offsetof(FortDefenderConfigPanel_GetAmmoCountFromDefender, ReturnValue) == 0x000008, "Member 'FortDefenderConfigPanel_GetAmmoCountFromDefender::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.GetAmmoCountFromPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortDefenderConfigPanel_GetAmmoCountFromPlayer final
{
public:
	const class UFortWorldItemDefinition*         AmmoItemDef;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDefenderConfigPanel_GetAmmoCountFromPlayer) == 0x000008, "Wrong alignment on FortDefenderConfigPanel_GetAmmoCountFromPlayer");
static_assert(sizeof(FortDefenderConfigPanel_GetAmmoCountFromPlayer) == 0x000010, "Wrong size on FortDefenderConfigPanel_GetAmmoCountFromPlayer");
static_assert(offsetof(FortDefenderConfigPanel_GetAmmoCountFromPlayer, AmmoItemDef) == 0x000000, "Member 'FortDefenderConfigPanel_GetAmmoCountFromPlayer::AmmoItemDef' has a wrong offset!");
static_assert(offsetof(FortDefenderConfigPanel_GetAmmoCountFromPlayer, ReturnValue) == 0x000008, "Member 'FortDefenderConfigPanel_GetAmmoCountFromPlayer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.GetCompatibleAmmo
// 0x0008 (0x0008 - 0x0000)
struct FortDefenderConfigPanel_GetCompatibleAmmo final
{
public:
	class UFortWorldItem*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderConfigPanel_GetCompatibleAmmo) == 0x000008, "Wrong alignment on FortDefenderConfigPanel_GetCompatibleAmmo");
static_assert(sizeof(FortDefenderConfigPanel_GetCompatibleAmmo) == 0x000008, "Wrong size on FortDefenderConfigPanel_GetCompatibleAmmo");
static_assert(offsetof(FortDefenderConfigPanel_GetCompatibleAmmo, ReturnValue) == 0x000000, "Member 'FortDefenderConfigPanel_GetCompatibleAmmo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.GetCompatibleAmmoDef
// 0x0008 (0x0008 - 0x0000)
struct FortDefenderConfigPanel_GetCompatibleAmmoDef final
{
public:
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderConfigPanel_GetCompatibleAmmoDef) == 0x000008, "Wrong alignment on FortDefenderConfigPanel_GetCompatibleAmmoDef");
static_assert(sizeof(FortDefenderConfigPanel_GetCompatibleAmmoDef) == 0x000008, "Wrong size on FortDefenderConfigPanel_GetCompatibleAmmoDef");
static_assert(offsetof(FortDefenderConfigPanel_GetCompatibleAmmoDef, ReturnValue) == 0x000000, "Member 'FortDefenderConfigPanel_GetCompatibleAmmoDef::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.GetDefenderPawnWeaponItem
// 0x0010 (0x0010 - 0x0000)
struct FortDefenderConfigPanel_GetDefenderPawnWeaponItem final
{
public:
	const class AFortAIPawn*                      DefenderPawn;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItem*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderConfigPanel_GetDefenderPawnWeaponItem) == 0x000008, "Wrong alignment on FortDefenderConfigPanel_GetDefenderPawnWeaponItem");
static_assert(sizeof(FortDefenderConfigPanel_GetDefenderPawnWeaponItem) == 0x000010, "Wrong size on FortDefenderConfigPanel_GetDefenderPawnWeaponItem");
static_assert(offsetof(FortDefenderConfigPanel_GetDefenderPawnWeaponItem, DefenderPawn) == 0x000000, "Member 'FortDefenderConfigPanel_GetDefenderPawnWeaponItem::DefenderPawn' has a wrong offset!");
static_assert(offsetof(FortDefenderConfigPanel_GetDefenderPawnWeaponItem, ReturnValue) == 0x000008, "Member 'FortDefenderConfigPanel_GetDefenderPawnWeaponItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.GetSelectedDefenderPawn
// 0x0008 (0x0008 - 0x0000)
struct FortDefenderConfigPanel_GetSelectedDefenderPawn final
{
public:
	class AFortAIPawn*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderConfigPanel_GetSelectedDefenderPawn) == 0x000008, "Wrong alignment on FortDefenderConfigPanel_GetSelectedDefenderPawn");
static_assert(sizeof(FortDefenderConfigPanel_GetSelectedDefenderPawn) == 0x000008, "Wrong size on FortDefenderConfigPanel_GetSelectedDefenderPawn");
static_assert(offsetof(FortDefenderConfigPanel_GetSelectedDefenderPawn, ReturnValue) == 0x000000, "Member 'FortDefenderConfigPanel_GetSelectedDefenderPawn::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.GetSourceSchematic
// 0x0010 (0x0010 - 0x0000)
struct FortDefenderConfigPanel_GetSourceSchematic final
{
public:
	const class UFortWorldItemDefinition*         ItemDefUsedForCrafting;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSchematicItemDefinition*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderConfigPanel_GetSourceSchematic) == 0x000008, "Wrong alignment on FortDefenderConfigPanel_GetSourceSchematic");
static_assert(sizeof(FortDefenderConfigPanel_GetSourceSchematic) == 0x000010, "Wrong size on FortDefenderConfigPanel_GetSourceSchematic");
static_assert(offsetof(FortDefenderConfigPanel_GetSourceSchematic, ItemDefUsedForCrafting) == 0x000000, "Member 'FortDefenderConfigPanel_GetSourceSchematic::ItemDefUsedForCrafting' has a wrong offset!");
static_assert(offsetof(FortDefenderConfigPanel_GetSourceSchematic, ReturnValue) == 0x000008, "Member 'FortDefenderConfigPanel_GetSourceSchematic::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.HasAnyDefenders
// 0x0001 (0x0001 - 0x0000)
struct FortDefenderConfigPanel_HasAnyDefenders final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderConfigPanel_HasAnyDefenders) == 0x000001, "Wrong alignment on FortDefenderConfigPanel_HasAnyDefenders");
static_assert(sizeof(FortDefenderConfigPanel_HasAnyDefenders) == 0x000001, "Wrong size on FortDefenderConfigPanel_HasAnyDefenders");
static_assert(offsetof(FortDefenderConfigPanel_HasAnyDefenders, ReturnValue) == 0x000000, "Member 'FortDefenderConfigPanel_HasAnyDefenders::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.HasWeaponForSelectedDefender
// 0x0001 (0x0001 - 0x0000)
struct FortDefenderConfigPanel_HasWeaponForSelectedDefender final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderConfigPanel_HasWeaponForSelectedDefender) == 0x000001, "Wrong alignment on FortDefenderConfigPanel_HasWeaponForSelectedDefender");
static_assert(sizeof(FortDefenderConfigPanel_HasWeaponForSelectedDefender) == 0x000001, "Wrong size on FortDefenderConfigPanel_HasWeaponForSelectedDefender");
static_assert(offsetof(FortDefenderConfigPanel_HasWeaponForSelectedDefender, ReturnValue) == 0x000000, "Member 'FortDefenderConfigPanel_HasWeaponForSelectedDefender::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.IsWeaponSelectionValid
// 0x0001 (0x0001 - 0x0000)
struct FortDefenderConfigPanel_IsWeaponSelectionValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderConfigPanel_IsWeaponSelectionValid) == 0x000001, "Wrong alignment on FortDefenderConfigPanel_IsWeaponSelectionValid");
static_assert(sizeof(FortDefenderConfigPanel_IsWeaponSelectionValid) == 0x000001, "Wrong size on FortDefenderConfigPanel_IsWeaponSelectionValid");
static_assert(offsetof(FortDefenderConfigPanel_IsWeaponSelectionValid, ReturnValue) == 0x000000, "Member 'FortDefenderConfigPanel_IsWeaponSelectionValid::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.SpawnDefender
// 0x0001 (0x0001 - 0x0000)
struct FortDefenderConfigPanel_SpawnDefender final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderConfigPanel_SpawnDefender) == 0x000001, "Wrong alignment on FortDefenderConfigPanel_SpawnDefender");
static_assert(sizeof(FortDefenderConfigPanel_SpawnDefender) == 0x000001, "Wrong size on FortDefenderConfigPanel_SpawnDefender");
static_assert(offsetof(FortDefenderConfigPanel_SpawnDefender, ReturnValue) == 0x000000, "Member 'FortDefenderConfigPanel_SpawnDefender::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDefenderConfigPanel.UnsummonDefender
// 0x0001 (0x0001 - 0x0000)
struct FortDefenderConfigPanel_UnsummonDefender final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderConfigPanel_UnsummonDefender) == 0x000001, "Wrong alignment on FortDefenderConfigPanel_UnsummonDefender");
static_assert(sizeof(FortDefenderConfigPanel_UnsummonDefender) == 0x000001, "Wrong size on FortDefenderConfigPanel_UnsummonDefender");
static_assert(offsetof(FortDefenderConfigPanel_UnsummonDefender, ReturnValue) == 0x000000, "Member 'FortDefenderConfigPanel_UnsummonDefender::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.CanAutoEquip
// 0x0001 (0x0001 - 0x0000)
struct FortDirectAcquisitionOfferDetailsWidgetBase_CanAutoEquip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionOfferDetailsWidgetBase_CanAutoEquip) == 0x000001, "Wrong alignment on FortDirectAcquisitionOfferDetailsWidgetBase_CanAutoEquip");
static_assert(sizeof(FortDirectAcquisitionOfferDetailsWidgetBase_CanAutoEquip) == 0x000001, "Wrong size on FortDirectAcquisitionOfferDetailsWidgetBase_CanAutoEquip");
static_assert(offsetof(FortDirectAcquisitionOfferDetailsWidgetBase_CanAutoEquip, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionOfferDetailsWidgetBase_CanAutoEquip::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.HandleCurrentlyViewedAccountInfoChanged
// 0x0034 (0x0034 - 0x0000)
struct FortDirectAcquisitionOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged final
{
public:
	struct FFortPublicAccountInfo                 NewInfo;                                           // 0x0000(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged) == 0x000004, "Wrong alignment on FortDirectAcquisitionOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged");
static_assert(sizeof(FortDirectAcquisitionOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged) == 0x000034, "Wrong size on FortDirectAcquisitionOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged");
static_assert(offsetof(FortDirectAcquisitionOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged, NewInfo) == 0x000000, "Member 'FortDirectAcquisitionOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged::NewInfo' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.OnEnterViewModeActionCommitted
// 0x0001 (0x0001 - 0x0000)
struct FortDirectAcquisitionOfferDetailsWidgetBase_OnEnterViewModeActionCommitted final
{
public:
	bool                                          PassThrough;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionOfferDetailsWidgetBase_OnEnterViewModeActionCommitted) == 0x000001, "Wrong alignment on FortDirectAcquisitionOfferDetailsWidgetBase_OnEnterViewModeActionCommitted");
static_assert(sizeof(FortDirectAcquisitionOfferDetailsWidgetBase_OnEnterViewModeActionCommitted) == 0x000001, "Wrong size on FortDirectAcquisitionOfferDetailsWidgetBase_OnEnterViewModeActionCommitted");
static_assert(offsetof(FortDirectAcquisitionOfferDetailsWidgetBase_OnEnterViewModeActionCommitted, PassThrough) == 0x000000, "Member 'FortDirectAcquisitionOfferDetailsWidgetBase_OnEnterViewModeActionCommitted::PassThrough' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.SetIsInItemViewMode
// 0x0001 (0x0001 - 0x0000)
struct FortDirectAcquisitionOfferDetailsWidgetBase_SetIsInItemViewMode final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionOfferDetailsWidgetBase_SetIsInItemViewMode) == 0x000001, "Wrong alignment on FortDirectAcquisitionOfferDetailsWidgetBase_SetIsInItemViewMode");
static_assert(sizeof(FortDirectAcquisitionOfferDetailsWidgetBase_SetIsInItemViewMode) == 0x000001, "Wrong size on FortDirectAcquisitionOfferDetailsWidgetBase_SetIsInItemViewMode");
static_assert(offsetof(FortDirectAcquisitionOfferDetailsWidgetBase_SetIsInItemViewMode, Value) == 0x000000, "Member 'FortDirectAcquisitionOfferDetailsWidgetBase_SetIsInItemViewMode::Value' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.SetPagedItems
// 0x0010 (0x0010 - 0x0000)
struct FortDirectAcquisitionOfferDetailsWidgetBase_SetPagedItems final
{
public:
	TArray<class UFortStoreFrontOfferInfo*>       InPagedItems;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionOfferDetailsWidgetBase_SetPagedItems) == 0x000008, "Wrong alignment on FortDirectAcquisitionOfferDetailsWidgetBase_SetPagedItems");
static_assert(sizeof(FortDirectAcquisitionOfferDetailsWidgetBase_SetPagedItems) == 0x000010, "Wrong size on FortDirectAcquisitionOfferDetailsWidgetBase_SetPagedItems");
static_assert(offsetof(FortDirectAcquisitionOfferDetailsWidgetBase_SetPagedItems, InPagedItems) == 0x000000, "Member 'FortDirectAcquisitionOfferDetailsWidgetBase_SetPagedItems::InPagedItems' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.SetShouldAllowItemViewModeAction
// 0x0001 (0x0001 - 0x0000)
struct FortDirectAcquisitionOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction) == 0x000001, "Wrong alignment on FortDirectAcquisitionOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction");
static_assert(sizeof(FortDirectAcquisitionOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction) == 0x000001, "Wrong size on FortDirectAcquisitionOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction");
static_assert(offsetof(FortDirectAcquisitionOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction, Value) == 0x000000, "Member 'FortDirectAcquisitionOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction::Value' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.SetupOffer
// 0x0008 (0x0008 - 0x0000)
struct FortDirectAcquisitionOfferDetailsWidgetBase_SetupOffer final
{
public:
	class UFortStoreFrontOfferInfo*               InOfferData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionOfferDetailsWidgetBase_SetupOffer) == 0x000008, "Wrong alignment on FortDirectAcquisitionOfferDetailsWidgetBase_SetupOffer");
static_assert(sizeof(FortDirectAcquisitionOfferDetailsWidgetBase_SetupOffer) == 0x000008, "Wrong size on FortDirectAcquisitionOfferDetailsWidgetBase_SetupOffer");
static_assert(offsetof(FortDirectAcquisitionOfferDetailsWidgetBase_SetupOffer, InOfferData) == 0x000000, "Member 'FortDirectAcquisitionOfferDetailsWidgetBase_SetupOffer::InOfferData' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.GetOfferInfo
// 0x0008 (0x0008 - 0x0000)
struct FortDirectAcquisitionOfferDetailsWidgetBase_GetOfferInfo final
{
public:
	class UFortStoreFrontOfferInfo*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionOfferDetailsWidgetBase_GetOfferInfo) == 0x000008, "Wrong alignment on FortDirectAcquisitionOfferDetailsWidgetBase_GetOfferInfo");
static_assert(sizeof(FortDirectAcquisitionOfferDetailsWidgetBase_GetOfferInfo) == 0x000008, "Wrong size on FortDirectAcquisitionOfferDetailsWidgetBase_GetOfferInfo");
static_assert(offsetof(FortDirectAcquisitionOfferDetailsWidgetBase_GetOfferInfo, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionOfferDetailsWidgetBase_GetOfferInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.SendShopInteractionAnalytic
// 0x0010 (0x0010 - 0x0000)
struct FortDirectAcquisitionOfferDetailsWidgetBase_SendShopInteractionAnalytic final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionOfferDetailsWidgetBase_SendShopInteractionAnalytic) == 0x000008, "Wrong alignment on FortDirectAcquisitionOfferDetailsWidgetBase_SendShopInteractionAnalytic");
static_assert(sizeof(FortDirectAcquisitionOfferDetailsWidgetBase_SendShopInteractionAnalytic) == 0x000010, "Wrong size on FortDirectAcquisitionOfferDetailsWidgetBase_SendShopInteractionAnalytic");
static_assert(offsetof(FortDirectAcquisitionOfferDetailsWidgetBase_SendShopInteractionAnalytic, Interaction) == 0x000000, "Member 'FortDirectAcquisitionOfferDetailsWidgetBase_SendShopInteractionAnalytic::Interaction' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.ShouldHavePurchaseConfirmation
// 0x0001 (0x0001 - 0x0000)
struct FortDirectAcquisitionOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation) == 0x000001, "Wrong alignment on FortDirectAcquisitionOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation");
static_assert(sizeof(FortDirectAcquisitionOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation) == 0x000001, "Wrong size on FortDirectAcquisitionOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation");
static_assert(offsetof(FortDirectAcquisitionOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionWidgetBase.OnAffiliateUpdated
// 0x0010 (0x0010 - 0x0000)
struct FortDirectAcquisitionWidgetBase_OnAffiliateUpdated final
{
public:
	class FString                                 AffiliateName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_OnAffiliateUpdated) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_OnAffiliateUpdated");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_OnAffiliateUpdated) == 0x000010, "Wrong size on FortDirectAcquisitionWidgetBase_OnAffiliateUpdated");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_OnAffiliateUpdated, AffiliateName) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_OnAffiliateUpdated::AffiliateName' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionWidgetBase.OnDisplayToast
// 0x0001 (0x0001 - 0x0000)
struct FortDirectAcquisitionWidgetBase_OnDisplayToast final
{
public:
	bool                                          bDisplayToast;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_OnDisplayToast) == 0x000001, "Wrong alignment on FortDirectAcquisitionWidgetBase_OnDisplayToast");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_OnDisplayToast) == 0x000001, "Wrong size on FortDirectAcquisitionWidgetBase_OnDisplayToast");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_OnDisplayToast, bDisplayToast) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_OnDisplayToast::bDisplayToast' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionWidgetBase.GetDailyStoreEndDate
// 0x0008 (0x0008 - 0x0000)
struct FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate) == 0x000008, "Wrong size on FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_GetDailyStoreEndDate::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionWidgetBase.GetSeasonStoreEndDate
// 0x0008 (0x0008 - 0x0000)
struct FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate) == 0x000008, "Wrong size on FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_GetSeasonStoreEndDate::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionWidgetBase.GetStoreCurrencies
// 0x0010 (0x0010 - 0x0000)
struct FortDirectAcquisitionWidgetBase_GetStoreCurrencies final
{
public:
	TArray<class UFortAccountItemDefinition*>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_GetStoreCurrencies) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_GetStoreCurrencies");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_GetStoreCurrencies) == 0x000010, "Wrong size on FortDirectAcquisitionWidgetBase_GetStoreCurrencies");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_GetStoreCurrencies, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_GetStoreCurrencies::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDirectAcquisitionWidgetBase.GetWeeklyStoreEndDate
// 0x0008 (0x0008 - 0x0000)
struct FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate) == 0x000008, "Wrong alignment on FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate");
static_assert(sizeof(FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate) == 0x000008, "Wrong size on FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate");
static_assert(offsetof(FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate, ReturnValue) == 0x000000, "Member 'FortDirectAcquisitionWidgetBase_GetWeeklyStoreEndDate::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDivisionDetailsScreen.SetTournamentAndEventId
// 0x0020 (0x0020 - 0x0000)
struct FortDivisionDetailsScreen_SetTournamentAndEventId final
{
public:
	class FString                                 InTournamentId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InEventId;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDivisionDetailsScreen_SetTournamentAndEventId) == 0x000008, "Wrong alignment on FortDivisionDetailsScreen_SetTournamentAndEventId");
static_assert(sizeof(FortDivisionDetailsScreen_SetTournamentAndEventId) == 0x000020, "Wrong size on FortDivisionDetailsScreen_SetTournamentAndEventId");
static_assert(offsetof(FortDivisionDetailsScreen_SetTournamentAndEventId, InTournamentId) == 0x000000, "Member 'FortDivisionDetailsScreen_SetTournamentAndEventId::InTournamentId' has a wrong offset!");
static_assert(offsetof(FortDivisionDetailsScreen_SetTournamentAndEventId, InEventId) == 0x000010, "Member 'FortDivisionDetailsScreen_SetTournamentAndEventId::InEventId' has a wrong offset!");

// Function FortniteUI.FortDropdownDelegateRegistrar.GetOrCreateDropdownMenu
// 0x0008 (0x0008 - 0x0000)
struct FortDropdownDelegateRegistrar_GetOrCreateDropdownMenu final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDropdownDelegateRegistrar_GetOrCreateDropdownMenu) == 0x000008, "Wrong alignment on FortDropdownDelegateRegistrar_GetOrCreateDropdownMenu");
static_assert(sizeof(FortDropdownDelegateRegistrar_GetOrCreateDropdownMenu) == 0x000008, "Wrong size on FortDropdownDelegateRegistrar_GetOrCreateDropdownMenu");
static_assert(offsetof(FortDropdownDelegateRegistrar_GetOrCreateDropdownMenu, ReturnValue) == 0x000000, "Member 'FortDropdownDelegateRegistrar_GetOrCreateDropdownMenu::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortDropdownDelegateRegistrar.OnOpenStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortDropdownDelegateRegistrar_OnOpenStatusChanged final
{
public:
	bool                                          Open;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDropdownDelegateRegistrar_OnOpenStatusChanged) == 0x000001, "Wrong alignment on FortDropdownDelegateRegistrar_OnOpenStatusChanged");
static_assert(sizeof(FortDropdownDelegateRegistrar_OnOpenStatusChanged) == 0x000001, "Wrong size on FortDropdownDelegateRegistrar_OnOpenStatusChanged");
static_assert(offsetof(FortDropdownDelegateRegistrar_OnOpenStatusChanged, Open) == 0x000000, "Member 'FortDropdownDelegateRegistrar_OnOpenStatusChanged::Open' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardTeammateEntry.SetPlayerFlag
// 0x0028 (0x0028 - 0x0000)
struct FortEventLeaderboardTeammateEntry_SetPlayerFlag final
{
public:
	TSoftObjectPtr<class UTexture2D>              PlayerFlag;                                        // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardTeammateEntry_SetPlayerFlag) == 0x000008, "Wrong alignment on FortEventLeaderboardTeammateEntry_SetPlayerFlag");
static_assert(sizeof(FortEventLeaderboardTeammateEntry_SetPlayerFlag) == 0x000028, "Wrong size on FortEventLeaderboardTeammateEntry_SetPlayerFlag");
static_assert(offsetof(FortEventLeaderboardTeammateEntry_SetPlayerFlag, PlayerFlag) == 0x000000, "Member 'FortEventLeaderboardTeammateEntry_SetPlayerFlag::PlayerFlag' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardTeammateEntry.SetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct FortEventLeaderboardTeammateEntry_SetPlayerName final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardTeammateEntry_SetPlayerName) == 0x000008, "Wrong alignment on FortEventLeaderboardTeammateEntry_SetPlayerName");
static_assert(sizeof(FortEventLeaderboardTeammateEntry_SetPlayerName) == 0x000010, "Wrong size on FortEventLeaderboardTeammateEntry_SetPlayerName");
static_assert(offsetof(FortEventLeaderboardTeammateEntry_SetPlayerName, PlayerName) == 0x000000, "Member 'FortEventLeaderboardTeammateEntry_SetPlayerName::PlayerName' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardScreen.GetMyLeaderboardEntry
// 0x0008 (0x0008 - 0x0000)
struct FortEventLeaderboardScreen_GetMyLeaderboardEntry final
{
public:
	class UFortEventLeaderboardEntryData*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardScreen_GetMyLeaderboardEntry) == 0x000008, "Wrong alignment on FortEventLeaderboardScreen_GetMyLeaderboardEntry");
static_assert(sizeof(FortEventLeaderboardScreen_GetMyLeaderboardEntry) == 0x000008, "Wrong size on FortEventLeaderboardScreen_GetMyLeaderboardEntry");
static_assert(offsetof(FortEventLeaderboardScreen_GetMyLeaderboardEntry, ReturnValue) == 0x000000, "Member 'FortEventLeaderboardScreen_GetMyLeaderboardEntry::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardScreen.OnLeaderboardEntrySelected
// 0x0008 (0x0008 - 0x0000)
struct FortEventLeaderboardScreen_OnLeaderboardEntrySelected final
{
public:
	const class UFortEventLeaderboardEntryData*   EntryData;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardScreen_OnLeaderboardEntrySelected) == 0x000008, "Wrong alignment on FortEventLeaderboardScreen_OnLeaderboardEntrySelected");
static_assert(sizeof(FortEventLeaderboardScreen_OnLeaderboardEntrySelected) == 0x000008, "Wrong size on FortEventLeaderboardScreen_OnLeaderboardEntrySelected");
static_assert(offsetof(FortEventLeaderboardScreen_OnLeaderboardEntrySelected, EntryData) == 0x000000, "Member 'FortEventLeaderboardScreen_OnLeaderboardEntrySelected::EntryData' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardScreen.OnLeaderboardPageRequestComplete
// 0x0004 (0x0004 - 0x0000)
struct FortEventLeaderboardScreen_OnLeaderboardPageRequestComplete final
{
public:
	int32                                         EntryCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardScreen_OnLeaderboardPageRequestComplete) == 0x000004, "Wrong alignment on FortEventLeaderboardScreen_OnLeaderboardPageRequestComplete");
static_assert(sizeof(FortEventLeaderboardScreen_OnLeaderboardPageRequestComplete) == 0x000004, "Wrong size on FortEventLeaderboardScreen_OnLeaderboardPageRequestComplete");
static_assert(offsetof(FortEventLeaderboardScreen_OnLeaderboardPageRequestComplete, EntryCount) == 0x000000, "Member 'FortEventLeaderboardScreen_OnLeaderboardPageRequestComplete::EntryCount' has a wrong offset!");

// Function FortniteUI.FortEventLeaderboardScreen.SetEvent
// 0x0020 (0x0020 - 0x0000)
struct FortEventLeaderboardScreen_SetEvent final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventWindowId;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventLeaderboardScreen_SetEvent) == 0x000008, "Wrong alignment on FortEventLeaderboardScreen_SetEvent");
static_assert(sizeof(FortEventLeaderboardScreen_SetEvent) == 0x000020, "Wrong size on FortEventLeaderboardScreen_SetEvent");
static_assert(offsetof(FortEventLeaderboardScreen_SetEvent, EventId) == 0x000000, "Member 'FortEventLeaderboardScreen_SetEvent::EventId' has a wrong offset!");
static_assert(offsetof(FortEventLeaderboardScreen_SetEvent, EventWindowId) == 0x000010, "Member 'FortEventLeaderboardScreen_SetEvent::EventWindowId' has a wrong offset!");

// Function FortniteUI.FortEventTeamMatchHistoryModal.SetupMatchHistory
// 0x0008 (0x0008 - 0x0000)
struct FortEventTeamMatchHistoryModal_SetupMatchHistory final
{
public:
	const class UFortEventLeaderboardEntryData*   DataForDisplay;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEventTeamMatchHistoryModal_SetupMatchHistory) == 0x000008, "Wrong alignment on FortEventTeamMatchHistoryModal_SetupMatchHistory");
static_assert(sizeof(FortEventTeamMatchHistoryModal_SetupMatchHistory) == 0x000008, "Wrong size on FortEventTeamMatchHistoryModal_SetupMatchHistory");
static_assert(offsetof(FortEventTeamMatchHistoryModal_SetupMatchHistory, DataForDisplay) == 0x000000, "Member 'FortEventTeamMatchHistoryModal_SetupMatchHistory::DataForDisplay' has a wrong offset!");

// Function FortniteUI.FortExpeditionDetailsWidget.HandleAbandonExpeditionCompleted
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted) == 0x000008, "Wrong alignment on FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted");
static_assert(sizeof(FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted) == 0x000010, "Wrong size on FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted");
static_assert(offsetof(FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted, Expedition) == 0x000000, "Member 'FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted, bSuccess) == 0x000008, "Member 'FortExpeditionDetailsWidget_HandleAbandonExpeditionCompleted::bSuccess' has a wrong offset!");

// Function FortniteUI.FortExpeditionDetailsWidget.SetCurrentSquadId
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionDetailsWidget_SetCurrentSquadId final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionDetailsWidget_SetCurrentSquadId) == 0x000004, "Wrong alignment on FortExpeditionDetailsWidget_SetCurrentSquadId");
static_assert(sizeof(FortExpeditionDetailsWidget_SetCurrentSquadId) == 0x000008, "Wrong size on FortExpeditionDetailsWidget_SetCurrentSquadId");
static_assert(offsetof(FortExpeditionDetailsWidget_SetCurrentSquadId, SquadId) == 0x000000, "Member 'FortExpeditionDetailsWidget_SetCurrentSquadId::SquadId' has a wrong offset!");

// Function FortniteUI.FortExpeditionDetailsWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionDetailsWidget_SetData final
{
public:
	class UFortExpeditionItem*                    InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionDetailsWidget_SetData) == 0x000008, "Wrong alignment on FortExpeditionDetailsWidget_SetData");
static_assert(sizeof(FortExpeditionDetailsWidget_SetData) == 0x000008, "Wrong size on FortExpeditionDetailsWidget_SetData");
static_assert(offsetof(FortExpeditionDetailsWidget_SetData, InItem) == 0x000000, "Member 'FortExpeditionDetailsWidget_SetData::InItem' has a wrong offset!");

// Function FortniteUI.FortExpeditionPickVehicleWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionPickVehicleWidget_SetData final
{
public:
	class UFortExpeditionItem*                    InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionPickVehicleWidget_SetData) == 0x000008, "Wrong alignment on FortExpeditionPickVehicleWidget_SetData");
static_assert(sizeof(FortExpeditionPickVehicleWidget_SetData) == 0x000008, "Wrong size on FortExpeditionPickVehicleWidget_SetData");
static_assert(offsetof(FortExpeditionPickVehicleWidget_SetData, InItem) == 0x000000, "Member 'FortExpeditionPickVehicleWidget_SetData::InItem' has a wrong offset!");

// Function FortniteUI.FortExpeditionRewardsWidget.HandleCollectionExpeditionCompleted
// 0x0028 (0x0028 - 0x0000)
struct FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted final
{
public:
	bool                                          bMcpSuccess;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortExpeditionItem*              Expedition;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExpeditionSuccess;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemInstanceQuantityPair>  Rewards;                                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted) == 0x000008, "Wrong alignment on FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted");
static_assert(sizeof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted) == 0x000028, "Wrong size on FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted");
static_assert(offsetof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted, bMcpSuccess) == 0x000000, "Member 'FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted::bMcpSuccess' has a wrong offset!");
static_assert(offsetof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted, Expedition) == 0x000008, "Member 'FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted, bExpeditionSuccess) == 0x000010, "Member 'FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted::bExpeditionSuccess' has a wrong offset!");
static_assert(offsetof(FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted, Rewards) == 0x000018, "Member 'FortExpeditionRewardsWidget_HandleCollectionExpeditionCompleted::Rewards' has a wrong offset!");

// Function FortniteUI.FortExpeditionRewardsWidget.RefreshRewardsUI
// 0x0020 (0x0020 - 0x0000)
struct FortExpeditionRewardsWidget_RefreshRewardsUI final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExpeditionSucceeded;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemInstanceQuantityPair>  Rewards;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionRewardsWidget_RefreshRewardsUI) == 0x000008, "Wrong alignment on FortExpeditionRewardsWidget_RefreshRewardsUI");
static_assert(sizeof(FortExpeditionRewardsWidget_RefreshRewardsUI) == 0x000020, "Wrong size on FortExpeditionRewardsWidget_RefreshRewardsUI");
static_assert(offsetof(FortExpeditionRewardsWidget_RefreshRewardsUI, Expedition) == 0x000000, "Member 'FortExpeditionRewardsWidget_RefreshRewardsUI::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionRewardsWidget_RefreshRewardsUI, bExpeditionSucceeded) == 0x000008, "Member 'FortExpeditionRewardsWidget_RefreshRewardsUI::bExpeditionSucceeded' has a wrong offset!");
static_assert(offsetof(FortExpeditionRewardsWidget_RefreshRewardsUI, Rewards) == 0x000010, "Member 'FortExpeditionRewardsWidget_RefreshRewardsUI::Rewards' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.AreAnyExpeditionsComplete
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionUtilities_AreAnyExpeditionsComplete final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_AreAnyExpeditionsComplete) == 0x000008, "Wrong alignment on FortExpeditionUtilities_AreAnyExpeditionsComplete");
static_assert(sizeof(FortExpeditionUtilities_AreAnyExpeditionsComplete) == 0x000010, "Wrong size on FortExpeditionUtilities_AreAnyExpeditionsComplete");
static_assert(offsetof(FortExpeditionUtilities_AreAnyExpeditionsComplete, Widget) == 0x000000, "Member 'FortExpeditionUtilities_AreAnyExpeditionsComplete::Widget' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_AreAnyExpeditionsComplete, ReturnValue) == 0x000008, "Member 'FortExpeditionUtilities_AreAnyExpeditionsComplete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.AreExpeditionsUnlocked
// 0x0038 (0x0038 - 0x0000)
struct FortExpeditionUtilities_AreExpeditionsUnlocked final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_AreExpeditionsUnlocked) == 0x000008, "Wrong alignment on FortExpeditionUtilities_AreExpeditionsUnlocked");
static_assert(sizeof(FortExpeditionUtilities_AreExpeditionsUnlocked) == 0x000038, "Wrong size on FortExpeditionUtilities_AreExpeditionsUnlocked");
static_assert(offsetof(FortExpeditionUtilities_AreExpeditionsUnlocked, WorldContextObject) == 0x000000, "Member 'FortExpeditionUtilities_AreExpeditionsUnlocked::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_AreExpeditionsUnlocked, UniqueId) == 0x000008, "Member 'FortExpeditionUtilities_AreExpeditionsUnlocked::UniqueId' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_AreExpeditionsUnlocked, ReturnValue) == 0x000030, "Member 'FortExpeditionUtilities_AreExpeditionsUnlocked::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.CalculateExpeditionPercentageChanceForSuccess
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPower;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess) == 0x000008, "Wrong alignment on FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess");
static_assert(sizeof(FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess) == 0x000010, "Wrong size on FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess");
static_assert(offsetof(FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess, Expedition) == 0x000000, "Member 'FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess, TotalPower) == 0x000008, "Member 'FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess::TotalPower' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess, ReturnValue) == 0x00000C, "Member 'FortExpeditionUtilities_CalculateExpeditionPercentageChanceForSuccess::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.CalculateGlobalAndItemRatingModValuesBP
// 0x0030 (0x0030 - 0x0000)
struct FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      SlottedItems;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         GlobalPowerMod;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SlottedItemMods;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP) == 0x000008, "Wrong alignment on FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP");
static_assert(sizeof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP) == 0x000030, "Wrong size on FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP");
static_assert(offsetof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP, Expedition) == 0x000000, "Member 'FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP, SlottedItems) == 0x000008, "Member 'FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP::SlottedItems' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP, GlobalPowerMod) == 0x000018, "Member 'FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP::GlobalPowerMod' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP, SlottedItemMods) == 0x000020, "Member 'FortExpeditionUtilities_CalculateGlobalAndItemRatingModValuesBP::SlottedItemMods' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.CalculateTotalPower
// 0x0030 (0x0030 - 0x0000)
struct FortExpeditionUtilities_CalculateTotalPower final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortExpeditionItem*              Expedition;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SquadId;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      SlottedItems;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_CalculateTotalPower) == 0x000008, "Wrong alignment on FortExpeditionUtilities_CalculateTotalPower");
static_assert(sizeof(FortExpeditionUtilities_CalculateTotalPower) == 0x000030, "Wrong size on FortExpeditionUtilities_CalculateTotalPower");
static_assert(offsetof(FortExpeditionUtilities_CalculateTotalPower, FortPC) == 0x000000, "Member 'FortExpeditionUtilities_CalculateTotalPower::FortPC' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateTotalPower, Expedition) == 0x000008, "Member 'FortExpeditionUtilities_CalculateTotalPower::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateTotalPower, SquadId) == 0x000010, "Member 'FortExpeditionUtilities_CalculateTotalPower::SquadId' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateTotalPower, SlottedItems) == 0x000018, "Member 'FortExpeditionUtilities_CalculateTotalPower::SlottedItems' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_CalculateTotalPower, ReturnValue) == 0x000028, "Member 'FortExpeditionUtilities_CalculateTotalPower::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.GetAllExpeditionSquadIds
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionUtilities_GetAllExpeditionSquadIds final
{
public:
	TArray<class FName>                           OutExpeditionSquadIds;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_GetAllExpeditionSquadIds) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetAllExpeditionSquadIds");
static_assert(sizeof(FortExpeditionUtilities_GetAllExpeditionSquadIds) == 0x000010, "Wrong size on FortExpeditionUtilities_GetAllExpeditionSquadIds");
static_assert(offsetof(FortExpeditionUtilities_GetAllExpeditionSquadIds, OutExpeditionSquadIds) == 0x000000, "Member 'FortExpeditionUtilities_GetAllExpeditionSquadIds::OutExpeditionSquadIds' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.GetExpeditionSquadPower
// 0x0018 (0x0018 - 0x0000)
struct FortExpeditionUtilities_GetExpeditionSquadPower final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SquadId;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_GetExpeditionSquadPower) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetExpeditionSquadPower");
static_assert(sizeof(FortExpeditionUtilities_GetExpeditionSquadPower) == 0x000018, "Wrong size on FortExpeditionUtilities_GetExpeditionSquadPower");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadPower, FortPC) == 0x000000, "Member 'FortExpeditionUtilities_GetExpeditionSquadPower::FortPC' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadPower, SquadId) == 0x000008, "Member 'FortExpeditionUtilities_GetExpeditionSquadPower::SquadId' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadPower, ReturnValue) == 0x000010, "Member 'FortExpeditionUtilities_GetExpeditionSquadPower::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.GetExpeditionSquadsThatMatchRequirements
// 0x0040 (0x0040 - 0x0000)
struct FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements final
{
public:
	struct FGameplayTagContainer                  RequirementTags;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FortPC;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutExpeditionSquadIds;                             // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements");
static_assert(sizeof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements) == 0x000040, "Wrong size on FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements, RequirementTags) == 0x000000, "Member 'FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements::RequirementTags' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements, FortPC) == 0x000020, "Member 'FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements::FortPC' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements, OutExpeditionSquadIds) == 0x000028, "Member 'FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements::OutExpeditionSquadIds' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements, ReturnValue) == 0x000038, "Member 'FortExpeditionUtilities_GetExpeditionSquadsThatMatchRequirements::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.GetMatchedCriteriaTags
// 0x0028 (0x0028 - 0x0000)
struct FortExpeditionUtilities_GetMatchedCriteriaTags final
{
public:
	class UFortExpeditionItem*                    Expedition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      SlottedItems;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   OutMatchedCriteria;                                // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_GetMatchedCriteriaTags) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetMatchedCriteriaTags");
static_assert(sizeof(FortExpeditionUtilities_GetMatchedCriteriaTags) == 0x000028, "Wrong size on FortExpeditionUtilities_GetMatchedCriteriaTags");
static_assert(offsetof(FortExpeditionUtilities_GetMatchedCriteriaTags, Expedition) == 0x000000, "Member 'FortExpeditionUtilities_GetMatchedCriteriaTags::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetMatchedCriteriaTags, SlottedItems) == 0x000008, "Member 'FortExpeditionUtilities_GetMatchedCriteriaTags::SlottedItems' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetMatchedCriteriaTags, OutMatchedCriteria) == 0x000018, "Member 'FortExpeditionUtilities_GetMatchedCriteriaTags::OutMatchedCriteria' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.GetTotalExpeditionVehiclesAvailable
// 0x0028 (0x0028 - 0x0000)
struct FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FortPC;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLandVehicles;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLandVehiclesAvailable;                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSeaVehicles;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSeaVehiclesAvailable;                           // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAirVehicles;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAirVehiclesAvailable;                           // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable");
static_assert(sizeof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable) == 0x000028, "Wrong size on FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, Widget) == 0x000000, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::Widget' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, FortPC) == 0x000008, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::FortPC' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutLandVehicles) == 0x000010, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutLandVehicles' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutLandVehiclesAvailable) == 0x000014, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutLandVehiclesAvailable' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutSeaVehicles) == 0x000018, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutSeaVehicles' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutSeaVehiclesAvailable) == 0x00001C, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutSeaVehiclesAvailable' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutAirVehicles) == 0x000020, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutAirVehicles' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable, OutAirVehiclesAvailable) == 0x000024, "Member 'FortExpeditionUtilities_GetTotalExpeditionVehiclesAvailable::OutAirVehiclesAvailable' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.GetVehicleTagFromSquadId
// 0x0014 (0x0014 - 0x0000)
struct FortExpeditionUtilities_GetVehicleTagFromSquadId final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OutFoundVehicleTag;                                // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_GetVehicleTagFromSquadId) == 0x000004, "Wrong alignment on FortExpeditionUtilities_GetVehicleTagFromSquadId");
static_assert(sizeof(FortExpeditionUtilities_GetVehicleTagFromSquadId) == 0x000014, "Wrong size on FortExpeditionUtilities_GetVehicleTagFromSquadId");
static_assert(offsetof(FortExpeditionUtilities_GetVehicleTagFromSquadId, SquadId) == 0x000000, "Member 'FortExpeditionUtilities_GetVehicleTagFromSquadId::SquadId' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetVehicleTagFromSquadId, OutFoundVehicleTag) == 0x000008, "Member 'FortExpeditionUtilities_GetVehicleTagFromSquadId::OutFoundVehicleTag' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetVehicleTagFromSquadId, ReturnValue) == 0x000010, "Member 'FortExpeditionUtilities_GetVehicleTagFromSquadId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.GetVehicleTagRequiredForExpedition
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionUtilities_GetVehicleTagRequiredForExpedition final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionUtilities_GetVehicleTagRequiredForExpedition) == 0x000008, "Wrong alignment on FortExpeditionUtilities_GetVehicleTagRequiredForExpedition");
static_assert(sizeof(FortExpeditionUtilities_GetVehicleTagRequiredForExpedition) == 0x000010, "Wrong size on FortExpeditionUtilities_GetVehicleTagRequiredForExpedition");
static_assert(offsetof(FortExpeditionUtilities_GetVehicleTagRequiredForExpedition, Expedition) == 0x000000, "Member 'FortExpeditionUtilities_GetVehicleTagRequiredForExpedition::Expedition' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_GetVehicleTagRequiredForExpedition, ReturnValue) == 0x000008, "Member 'FortExpeditionUtilities_GetVehicleTagRequiredForExpedition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.IsSquadOnExpedition
// 0x0018 (0x0018 - 0x0000)
struct FortExpeditionUtilities_IsSquadOnExpedition final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SquadId;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_IsSquadOnExpedition) == 0x000008, "Wrong alignment on FortExpeditionUtilities_IsSquadOnExpedition");
static_assert(sizeof(FortExpeditionUtilities_IsSquadOnExpedition) == 0x000018, "Wrong size on FortExpeditionUtilities_IsSquadOnExpedition");
static_assert(offsetof(FortExpeditionUtilities_IsSquadOnExpedition, Widget) == 0x000000, "Member 'FortExpeditionUtilities_IsSquadOnExpedition::Widget' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_IsSquadOnExpedition, SquadId) == 0x000008, "Member 'FortExpeditionUtilities_IsSquadOnExpedition::SquadId' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_IsSquadOnExpedition, ReturnValue) == 0x000010, "Member 'FortExpeditionUtilities_IsSquadOnExpedition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortExpeditionUtilities.TotalUnseenExpeditionsForTab
// 0x0018 (0x0018 - 0x0000)
struct FortExpeditionUtilities_TotalUnseenExpeditionsForTab final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TabNameID;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionUtilities_TotalUnseenExpeditionsForTab) == 0x000008, "Wrong alignment on FortExpeditionUtilities_TotalUnseenExpeditionsForTab");
static_assert(sizeof(FortExpeditionUtilities_TotalUnseenExpeditionsForTab) == 0x000018, "Wrong size on FortExpeditionUtilities_TotalUnseenExpeditionsForTab");
static_assert(offsetof(FortExpeditionUtilities_TotalUnseenExpeditionsForTab, Widget) == 0x000000, "Member 'FortExpeditionUtilities_TotalUnseenExpeditionsForTab::Widget' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_TotalUnseenExpeditionsForTab, TabNameID) == 0x000008, "Member 'FortExpeditionUtilities_TotalUnseenExpeditionsForTab::TabNameID' has a wrong offset!");
static_assert(offsetof(FortExpeditionUtilities_TotalUnseenExpeditionsForTab, ReturnValue) == 0x000010, "Member 'FortExpeditionUtilities_TotalUnseenExpeditionsForTab::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortFriendLinkPanel.OnShareButtonTypeSet
// 0x0001 (0x0001 - 0x0000)
struct FortFriendLinkPanel_OnShareButtonTypeSet final
{
public:
	EShareButtonType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFriendLinkPanel_OnShareButtonTypeSet) == 0x000001, "Wrong alignment on FortFriendLinkPanel_OnShareButtonTypeSet");
static_assert(sizeof(FortFriendLinkPanel_OnShareButtonTypeSet) == 0x000001, "Wrong size on FortFriendLinkPanel_OnShareButtonTypeSet");
static_assert(offsetof(FortFriendLinkPanel_OnShareButtonTypeSet, Type) == 0x000000, "Member 'FortFriendLinkPanel_OnShareButtonTypeSet::Type' has a wrong offset!");

// Function FortniteUI.FortGameFeedbackBase.AddButtonWithFeedbackType
// 0x0010 (0x0010 - 0x0000)
struct FortGameFeedbackBase_AddButtonWithFeedbackType final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIGameFeedbackType                       UIFeedbackType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameFeedbackBase_AddButtonWithFeedbackType) == 0x000008, "Wrong alignment on FortGameFeedbackBase_AddButtonWithFeedbackType");
static_assert(sizeof(FortGameFeedbackBase_AddButtonWithFeedbackType) == 0x000010, "Wrong size on FortGameFeedbackBase_AddButtonWithFeedbackType");
static_assert(offsetof(FortGameFeedbackBase_AddButtonWithFeedbackType, Button) == 0x000000, "Member 'FortGameFeedbackBase_AddButtonWithFeedbackType::Button' has a wrong offset!");
static_assert(offsetof(FortGameFeedbackBase_AddButtonWithFeedbackType, UIFeedbackType) == 0x000008, "Member 'FortGameFeedbackBase_AddButtonWithFeedbackType::UIFeedbackType' has a wrong offset!");

// Function FortniteUI.FortGameFeedbackBase.GetButtonVisibilityByUIFeedbackType
// 0x0002 (0x0002 - 0x0000)
struct FortGameFeedbackBase_GetButtonVisibilityByUIFeedbackType final
{
public:
	EFortUIGameFeedbackType                       UIFeedbackType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameFeedbackBase_GetButtonVisibilityByUIFeedbackType) == 0x000001, "Wrong alignment on FortGameFeedbackBase_GetButtonVisibilityByUIFeedbackType");
static_assert(sizeof(FortGameFeedbackBase_GetButtonVisibilityByUIFeedbackType) == 0x000002, "Wrong size on FortGameFeedbackBase_GetButtonVisibilityByUIFeedbackType");
static_assert(offsetof(FortGameFeedbackBase_GetButtonVisibilityByUIFeedbackType, UIFeedbackType) == 0x000000, "Member 'FortGameFeedbackBase_GetButtonVisibilityByUIFeedbackType::UIFeedbackType' has a wrong offset!");
static_assert(offsetof(FortGameFeedbackBase_GetButtonVisibilityByUIFeedbackType, ReturnValue) == 0x000001, "Member 'FortGameFeedbackBase_GetButtonVisibilityByUIFeedbackType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGameFeedbackBase.OnFeedbackTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortGameFeedbackBase_OnFeedbackTypeChanged final
{
public:
	EFortUIGameFeedbackType                       FeedBackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameFeedbackBase_OnFeedbackTypeChanged) == 0x000001, "Wrong alignment on FortGameFeedbackBase_OnFeedbackTypeChanged");
static_assert(sizeof(FortGameFeedbackBase_OnFeedbackTypeChanged) == 0x000001, "Wrong size on FortGameFeedbackBase_OnFeedbackTypeChanged");
static_assert(offsetof(FortGameFeedbackBase_OnFeedbackTypeChanged, FeedBackType) == 0x000000, "Member 'FortGameFeedbackBase_OnFeedbackTypeChanged::FeedBackType' has a wrong offset!");

// Function FortniteUI.FortGameFeedbackBase.OnFeedbackTypeSelected
// 0x0010 (0x0010 - 0x0000)
struct FortGameFeedbackBase_OnFeedbackTypeSelected final
{
public:
	class UCommonButton*                          SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameFeedbackBase_OnFeedbackTypeSelected) == 0x000008, "Wrong alignment on FortGameFeedbackBase_OnFeedbackTypeSelected");
static_assert(sizeof(FortGameFeedbackBase_OnFeedbackTypeSelected) == 0x000010, "Wrong size on FortGameFeedbackBase_OnFeedbackTypeSelected");
static_assert(offsetof(FortGameFeedbackBase_OnFeedbackTypeSelected, SelectedButton) == 0x000000, "Member 'FortGameFeedbackBase_OnFeedbackTypeSelected::SelectedButton' has a wrong offset!");
static_assert(offsetof(FortGameFeedbackBase_OnFeedbackTypeSelected, ButtonIndex) == 0x000008, "Member 'FortGameFeedbackBase_OnFeedbackTypeSelected::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortGamepadInputOptions.AreAllImportantActionsBound
// 0x0018 (0x0018 - 0x0000)
struct FortGamepadInputOptions_AreAllImportantActionsBound final
{
public:
	TArray<class FText>                           OutUnboundScreenLabels;                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRichText;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGamepadInputOptions_AreAllImportantActionsBound) == 0x000008, "Wrong alignment on FortGamepadInputOptions_AreAllImportantActionsBound");
static_assert(sizeof(FortGamepadInputOptions_AreAllImportantActionsBound) == 0x000018, "Wrong size on FortGamepadInputOptions_AreAllImportantActionsBound");
static_assert(offsetof(FortGamepadInputOptions_AreAllImportantActionsBound, OutUnboundScreenLabels) == 0x000000, "Member 'FortGamepadInputOptions_AreAllImportantActionsBound::OutUnboundScreenLabels' has a wrong offset!");
static_assert(offsetof(FortGamepadInputOptions_AreAllImportantActionsBound, bRichText) == 0x000010, "Member 'FortGamepadInputOptions_AreAllImportantActionsBound::bRichText' has a wrong offset!");
static_assert(offsetof(FortGamepadInputOptions_AreAllImportantActionsBound, ReturnValue) == 0x000011, "Member 'FortGamepadInputOptions_AreAllImportantActionsBound::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGamepadInputOptions.SetControllerPlatform
// 0x0010 (0x0010 - 0x0000)
struct FortGamepadInputOptions_SetControllerPlatform final
{
public:
	class FString                                 InControllerPlatform;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGamepadInputOptions_SetControllerPlatform) == 0x000008, "Wrong alignment on FortGamepadInputOptions_SetControllerPlatform");
static_assert(sizeof(FortGamepadInputOptions_SetControllerPlatform) == 0x000010, "Wrong size on FortGamepadInputOptions_SetControllerPlatform");
static_assert(offsetof(FortGamepadInputOptions_SetControllerPlatform, InControllerPlatform) == 0x000000, "Member 'FortGamepadInputOptions_SetControllerPlatform::InControllerPlatform' has a wrong offset!");

// Function FortniteUI.FortGamepadInputOptions.GetControllerPlatform
// 0x0010 (0x0010 - 0x0000)
struct FortGamepadInputOptions_GetControllerPlatform final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGamepadInputOptions_GetControllerPlatform) == 0x000008, "Wrong alignment on FortGamepadInputOptions_GetControllerPlatform");
static_assert(sizeof(FortGamepadInputOptions_GetControllerPlatform) == 0x000010, "Wrong size on FortGamepadInputOptions_GetControllerPlatform");
static_assert(offsetof(FortGamepadInputOptions_GetControllerPlatform, ReturnValue) == 0x000000, "Member 'FortGamepadInputOptions_GetControllerPlatform::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGamepadInputOptions.HasCustomGamepadBindingChanges
// 0x0001 (0x0001 - 0x0000)
struct FortGamepadInputOptions_HasCustomGamepadBindingChanges final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGamepadInputOptions_HasCustomGamepadBindingChanges) == 0x000001, "Wrong alignment on FortGamepadInputOptions_HasCustomGamepadBindingChanges");
static_assert(sizeof(FortGamepadInputOptions_HasCustomGamepadBindingChanges) == 0x000001, "Wrong size on FortGamepadInputOptions_HasCustomGamepadBindingChanges");
static_assert(offsetof(FortGamepadInputOptions_HasCustomGamepadBindingChanges, ReturnValue) == 0x000000, "Member 'FortGamepadInputOptions_HasCustomGamepadBindingChanges::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGamepadInputOptions.IsCustomGamepadConfig
// 0x0018 (0x0018 - 0x0000)
struct FortGamepadInputOptions_IsCustomGamepadConfig final
{
public:
	class FString                                 ConfigName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGamepadInputOptions_IsCustomGamepadConfig) == 0x000008, "Wrong alignment on FortGamepadInputOptions_IsCustomGamepadConfig");
static_assert(sizeof(FortGamepadInputOptions_IsCustomGamepadConfig) == 0x000018, "Wrong size on FortGamepadInputOptions_IsCustomGamepadConfig");
static_assert(offsetof(FortGamepadInputOptions_IsCustomGamepadConfig, ConfigName) == 0x000000, "Member 'FortGamepadInputOptions_IsCustomGamepadConfig::ConfigName' has a wrong offset!");
static_assert(offsetof(FortGamepadInputOptions_IsCustomGamepadConfig, ReturnValue) == 0x000010, "Member 'FortGamepadInputOptions_IsCustomGamepadConfig::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGiftingScreen.AllowGiftWrapSelection
// 0x0001 (0x0001 - 0x0000)
struct FortGiftingScreen_AllowGiftWrapSelection final
{
public:
	bool                                          bIsAllowed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGiftingScreen_AllowGiftWrapSelection) == 0x000001, "Wrong alignment on FortGiftingScreen_AllowGiftWrapSelection");
static_assert(sizeof(FortGiftingScreen_AllowGiftWrapSelection) == 0x000001, "Wrong size on FortGiftingScreen_AllowGiftWrapSelection");
static_assert(offsetof(FortGiftingScreen_AllowGiftWrapSelection, bIsAllowed) == 0x000000, "Member 'FortGiftingScreen_AllowGiftWrapSelection::bIsAllowed' has a wrong offset!");

// Function FortniteUI.FortGiftingScreen.DynamicHandleGiftSent
// 0x0028 (0x0028 - 0x0000)
struct FortGiftingScreen_DynamicHandleGiftSent final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         IneligibleAccounts;                                // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ErrorCodes;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGiftingScreen_DynamicHandleGiftSent) == 0x000008, "Wrong alignment on FortGiftingScreen_DynamicHandleGiftSent");
static_assert(sizeof(FortGiftingScreen_DynamicHandleGiftSent) == 0x000028, "Wrong size on FortGiftingScreen_DynamicHandleGiftSent");
static_assert(offsetof(FortGiftingScreen_DynamicHandleGiftSent, bSuccess) == 0x000000, "Member 'FortGiftingScreen_DynamicHandleGiftSent::bSuccess' has a wrong offset!");
static_assert(offsetof(FortGiftingScreen_DynamicHandleGiftSent, IneligibleAccounts) == 0x000008, "Member 'FortGiftingScreen_DynamicHandleGiftSent::IneligibleAccounts' has a wrong offset!");
static_assert(offsetof(FortGiftingScreen_DynamicHandleGiftSent, ErrorCodes) == 0x000018, "Member 'FortGiftingScreen_DynamicHandleGiftSent::ErrorCodes' has a wrong offset!");

// Function FortniteUI.FortGiftingScreen.HandleMessageChanged
// 0x0018 (0x0018 - 0x0000)
struct FortGiftingScreen_HandleMessageChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGiftingScreen_HandleMessageChanged) == 0x000008, "Wrong alignment on FortGiftingScreen_HandleMessageChanged");
static_assert(sizeof(FortGiftingScreen_HandleMessageChanged) == 0x000018, "Wrong size on FortGiftingScreen_HandleMessageChanged");
static_assert(offsetof(FortGiftingScreen_HandleMessageChanged, InText) == 0x000000, "Member 'FortGiftingScreen_HandleMessageChanged::InText' has a wrong offset!");

// Function FortniteUI.FortGiftingScreen.OnEndGiftingSubmission
// 0x0001 (0x0001 - 0x0000)
struct FortGiftingScreen_OnEndGiftingSubmission final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGiftingScreen_OnEndGiftingSubmission) == 0x000001, "Wrong alignment on FortGiftingScreen_OnEndGiftingSubmission");
static_assert(sizeof(FortGiftingScreen_OnEndGiftingSubmission) == 0x000001, "Wrong size on FortGiftingScreen_OnEndGiftingSubmission");
static_assert(offsetof(FortGiftingScreen_OnEndGiftingSubmission, bSuccess) == 0x000000, "Member 'FortGiftingScreen_OnEndGiftingSubmission::bSuccess' has a wrong offset!");

// Function FortniteUI.FortGiftingScreen.OnMoveToGiftWrapStep
// 0x0001 (0x0001 - 0x0000)
struct FortGiftingScreen_OnMoveToGiftWrapStep final
{
public:
	bool                                          bGiftingToSelf;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGiftingScreen_OnMoveToGiftWrapStep) == 0x000001, "Wrong alignment on FortGiftingScreen_OnMoveToGiftWrapStep");
static_assert(sizeof(FortGiftingScreen_OnMoveToGiftWrapStep) == 0x000001, "Wrong size on FortGiftingScreen_OnMoveToGiftWrapStep");
static_assert(offsetof(FortGiftingScreen_OnMoveToGiftWrapStep, bGiftingToSelf) == 0x000000, "Member 'FortGiftingScreen_OnMoveToGiftWrapStep::bGiftingToSelf' has a wrong offset!");

// Function FortniteUI.FortGiftingScreen.OnOfferSet
// 0x0008 (0x0008 - 0x0000)
struct FortGiftingScreen_OnOfferSet final
{
public:
	class UFortStoreFrontOfferInfo*               NewOfferInfo;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGiftingScreen_OnOfferSet) == 0x000008, "Wrong alignment on FortGiftingScreen_OnOfferSet");
static_assert(sizeof(FortGiftingScreen_OnOfferSet) == 0x000008, "Wrong size on FortGiftingScreen_OnOfferSet");
static_assert(offsetof(FortGiftingScreen_OnOfferSet, NewOfferInfo) == 0x000000, "Member 'FortGiftingScreen_OnOfferSet::NewOfferInfo' has a wrong offset!");

// Function FortniteUI.FortGiftingScreen.SetOffer
// 0x0008 (0x0008 - 0x0000)
struct FortGiftingScreen_SetOffer final
{
public:
	class UFortStoreFrontOfferInfo*               NewOfferInfo;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGiftingScreen_SetOffer) == 0x000008, "Wrong alignment on FortGiftingScreen_SetOffer");
static_assert(sizeof(FortGiftingScreen_SetOffer) == 0x000008, "Wrong size on FortGiftingScreen_SetOffer");
static_assert(offsetof(FortGiftingScreen_SetOffer, NewOfferInfo) == 0x000000, "Member 'FortGiftingScreen_SetOffer::NewOfferInfo' has a wrong offset!");

// Function FortniteUI.FortGiftingUserItem.SetSelectionState
// 0x0002 (0x0002 - 0x0000)
struct FortGiftingUserItem_SetSelectionState final
{
public:
	ESelectionState                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateOnSelect;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGiftingUserItem_SetSelectionState) == 0x000001, "Wrong alignment on FortGiftingUserItem_SetSelectionState");
static_assert(sizeof(FortGiftingUserItem_SetSelectionState) == 0x000002, "Wrong size on FortGiftingUserItem_SetSelectionState");
static_assert(offsetof(FortGiftingUserItem_SetSelectionState, NewState) == 0x000000, "Member 'FortGiftingUserItem_SetSelectionState::NewState' has a wrong offset!");
static_assert(offsetof(FortGiftingUserItem_SetSelectionState, bAnimateOnSelect) == 0x000001, "Member 'FortGiftingUserItem_SetSelectionState::bAnimateOnSelect' has a wrong offset!");

// Function FortniteUI.FortGiftingUserItem.UpdateMessageText
// 0x0018 (0x0018 - 0x0000)
struct FortGiftingUserItem_UpdateMessageText final
{
public:
	class FText                                   NewMessage;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGiftingUserItem_UpdateMessageText) == 0x000008, "Wrong alignment on FortGiftingUserItem_UpdateMessageText");
static_assert(sizeof(FortGiftingUserItem_UpdateMessageText) == 0x000018, "Wrong size on FortGiftingUserItem_UpdateMessageText");
static_assert(offsetof(FortGiftingUserItem_UpdateMessageText, NewMessage) == 0x000000, "Member 'FortGiftingUserItem_UpdateMessageText::NewMessage' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.CancelDrawAttention
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_CancelDrawAttention final
{
public:
	class UWidget*                                BaseWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_CancelDrawAttention) == 0x000008, "Wrong alignment on FortGlobalUIContext_CancelDrawAttention");
static_assert(sizeof(FortGlobalUIContext_CancelDrawAttention) == 0x000008, "Wrong size on FortGlobalUIContext_CancelDrawAttention");
static_assert(offsetof(FortGlobalUIContext_CancelDrawAttention, BaseWidget) == 0x000000, "Member 'FortGlobalUIContext_CancelDrawAttention::BaseWidget' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.CheckFlag
// 0x0018 (0x0018 - 0x0000)
struct FortGlobalUIContext_CheckFlag final
{
public:
	class FString                                 FlagName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFlagStatus                                   OutStatus;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_CheckFlag) == 0x000008, "Wrong alignment on FortGlobalUIContext_CheckFlag");
static_assert(sizeof(FortGlobalUIContext_CheckFlag) == 0x000018, "Wrong size on FortGlobalUIContext_CheckFlag");
static_assert(offsetof(FortGlobalUIContext_CheckFlag, FlagName) == 0x000000, "Member 'FortGlobalUIContext_CheckFlag::FlagName' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_CheckFlag, OutStatus) == 0x000010, "Member 'FortGlobalUIContext_CheckFlag::OutStatus' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.DrawAttention
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_DrawAttention final
{
public:
	class UWidget*                                BaseWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_DrawAttention) == 0x000008, "Wrong alignment on FortGlobalUIContext_DrawAttention");
static_assert(sizeof(FortGlobalUIContext_DrawAttention) == 0x000008, "Wrong size on FortGlobalUIContext_DrawAttention");
static_assert(offsetof(FortGlobalUIContext_DrawAttention, BaseWidget) == 0x000000, "Member 'FortGlobalUIContext_DrawAttention::BaseWidget' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.AutoSelectSubGame
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_AutoSelectSubGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_AutoSelectSubGame) == 0x000001, "Wrong alignment on FortGlobalUIContext_AutoSelectSubGame");
static_assert(sizeof(FortGlobalUIContext_AutoSelectSubGame) == 0x000001, "Wrong size on FortGlobalUIContext_AutoSelectSubGame");
static_assert(offsetof(FortGlobalUIContext_AutoSelectSubGame, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_AutoSelectSubGame::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.BindToFeatureStateAndInitialize
// 0x0014 (0x0014 - 0x0000)
struct FortGlobalUIContext_BindToFeatureStateAndInitialize final
{
public:
	EFortUIFeature                                Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EFortUIFeature ChangedFeature, EFortUIFeatureState NewState, EFortUIFeatureStateReason StateReason)> Delegate;                                          // 0x0004(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_BindToFeatureStateAndInitialize) == 0x000004, "Wrong alignment on FortGlobalUIContext_BindToFeatureStateAndInitialize");
static_assert(sizeof(FortGlobalUIContext_BindToFeatureStateAndInitialize) == 0x000014, "Wrong size on FortGlobalUIContext_BindToFeatureStateAndInitialize");
static_assert(offsetof(FortGlobalUIContext_BindToFeatureStateAndInitialize, Feature) == 0x000000, "Member 'FortGlobalUIContext_BindToFeatureStateAndInitialize::Feature' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_BindToFeatureStateAndInitialize, Delegate) == 0x000004, "Member 'FortGlobalUIContext_BindToFeatureStateAndInitialize::Delegate' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.BroadcastItemReceivedNotificationShown
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_BroadcastItemReceivedNotificationShown final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_BroadcastItemReceivedNotificationShown) == 0x000001, "Wrong alignment on FortGlobalUIContext_BroadcastItemReceivedNotificationShown");
static_assert(sizeof(FortGlobalUIContext_BroadcastItemReceivedNotificationShown) == 0x000001, "Wrong size on FortGlobalUIContext_BroadcastItemReceivedNotificationShown");
static_assert(offsetof(FortGlobalUIContext_BroadcastItemReceivedNotificationShown, IsActive) == 0x000000, "Member 'FortGlobalUIContext_BroadcastItemReceivedNotificationShown::IsActive' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.CanMatchmake
// 0x0028 (0x0028 - 0x0000)
struct FortGlobalUIContext_CanMatchmake final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DenialReason;                                      // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_CanMatchmake) == 0x000008, "Wrong alignment on FortGlobalUIContext_CanMatchmake");
static_assert(sizeof(FortGlobalUIContext_CanMatchmake) == 0x000028, "Wrong size on FortGlobalUIContext_CanMatchmake");
static_assert(offsetof(FortGlobalUIContext_CanMatchmake, SubGame) == 0x000000, "Member 'FortGlobalUIContext_CanMatchmake::SubGame' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_CanMatchmake, DenialReason) == 0x000008, "Member 'FortGlobalUIContext_CanMatchmake::DenialReason' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_CanMatchmake, ReturnValue) == 0x000020, "Member 'FortGlobalUIContext_CanMatchmake::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.ClearForceSetFeatureState
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_ClearForceSetFeatureState final
{
public:
	EFortUIFeature                                Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_ClearForceSetFeatureState) == 0x000001, "Wrong alignment on FortGlobalUIContext_ClearForceSetFeatureState");
static_assert(sizeof(FortGlobalUIContext_ClearForceSetFeatureState) == 0x000001, "Wrong size on FortGlobalUIContext_ClearForceSetFeatureState");
static_assert(offsetof(FortGlobalUIContext_ClearForceSetFeatureState, Feature) == 0x000000, "Member 'FortGlobalUIContext_ClearForceSetFeatureState::Feature' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.ClearSelectionGroup
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_ClearSelectionGroup final
{
public:
	class FName                                   SelectionGroup;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_ClearSelectionGroup) == 0x000004, "Wrong alignment on FortGlobalUIContext_ClearSelectionGroup");
static_assert(sizeof(FortGlobalUIContext_ClearSelectionGroup) == 0x000008, "Wrong size on FortGlobalUIContext_ClearSelectionGroup");
static_assert(offsetof(FortGlobalUIContext_ClearSelectionGroup, SelectionGroup) == 0x000000, "Member 'FortGlobalUIContext_ClearSelectionGroup::SelectionGroup' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.CopyToClipboard
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_CopyToClipboard final
{
public:
	class FString                                 ClipboardText;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_CopyToClipboard) == 0x000008, "Wrong alignment on FortGlobalUIContext_CopyToClipboard");
static_assert(sizeof(FortGlobalUIContext_CopyToClipboard) == 0x000010, "Wrong size on FortGlobalUIContext_CopyToClipboard");
static_assert(offsetof(FortGlobalUIContext_CopyToClipboard, ClipboardText) == 0x000000, "Member 'FortGlobalUIContext_CopyToClipboard::ClipboardText' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.DisplayStateContent
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_DisplayStateContent final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_DisplayStateContent) == 0x000001, "Wrong alignment on FortGlobalUIContext_DisplayStateContent");
static_assert(sizeof(FortGlobalUIContext_DisplayStateContent) == 0x000001, "Wrong size on FortGlobalUIContext_DisplayStateContent");
static_assert(offsetof(FortGlobalUIContext_DisplayStateContent, bDisplay) == 0x000000, "Member 'FortGlobalUIContext_DisplayStateContent::bDisplay' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.ForceSetFeatureState
// 0x0003 (0x0003 - 0x0000)
struct FortGlobalUIContext_ForceSetFeatureState final
{
public:
	EFortUIFeature                                Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureState                           ForcedState;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureStateReason                     Reason;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_ForceSetFeatureState) == 0x000001, "Wrong alignment on FortGlobalUIContext_ForceSetFeatureState");
static_assert(sizeof(FortGlobalUIContext_ForceSetFeatureState) == 0x000003, "Wrong size on FortGlobalUIContext_ForceSetFeatureState");
static_assert(offsetof(FortGlobalUIContext_ForceSetFeatureState, Feature) == 0x000000, "Member 'FortGlobalUIContext_ForceSetFeatureState::Feature' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_ForceSetFeatureState, ForcedState) == 0x000001, "Member 'FortGlobalUIContext_ForceSetFeatureState::ForcedState' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_ForceSetFeatureState, Reason) == 0x000002, "Member 'FortGlobalUIContext_ForceSetFeatureState::Reason' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetConningDifficultyXpModifier
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetConningDifficultyXpModifier final
{
public:
	int32                                         TotalSkillPoints;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentDifficulty;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetConningDifficultyXpModifier) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetConningDifficultyXpModifier");
static_assert(sizeof(FortGlobalUIContext_GetConningDifficultyXpModifier) == 0x00000C, "Wrong size on FortGlobalUIContext_GetConningDifficultyXpModifier");
static_assert(offsetof(FortGlobalUIContext_GetConningDifficultyXpModifier, TotalSkillPoints) == 0x000000, "Member 'FortGlobalUIContext_GetConningDifficultyXpModifier::TotalSkillPoints' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetConningDifficultyXpModifier, ContentDifficulty) == 0x000004, "Member 'FortGlobalUIContext_GetConningDifficultyXpModifier::ContentDifficulty' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetConningDifficultyXpModifier, ReturnValue) == 0x000008, "Member 'FortGlobalUIContext_GetConningDifficultyXpModifier::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetConningXpModifierMessage
// 0x0020 (0x0020 - 0x0000)
struct FortGlobalUIContext_GetConningXpModifierMessage final
{
public:
	int32                                         TotalSkillPoints;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentDifficulty;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetConningXpModifierMessage) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetConningXpModifierMessage");
static_assert(sizeof(FortGlobalUIContext_GetConningXpModifierMessage) == 0x000020, "Wrong size on FortGlobalUIContext_GetConningXpModifierMessage");
static_assert(offsetof(FortGlobalUIContext_GetConningXpModifierMessage, TotalSkillPoints) == 0x000000, "Member 'FortGlobalUIContext_GetConningXpModifierMessage::TotalSkillPoints' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetConningXpModifierMessage, ContentDifficulty) == 0x000004, "Member 'FortGlobalUIContext_GetConningXpModifierMessage::ContentDifficulty' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetConningXpModifierMessage, ReturnValue) == 0x000008, "Member 'FortGlobalUIContext_GetConningXpModifierMessage::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetFeatureState
// 0x0003 (0x0003 - 0x0000)
struct FortGlobalUIContext_GetFeatureState final
{
public:
	EFortUIFeature                                Feature;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureState                           OutFeatureState;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureStateReason                     OutReason;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetFeatureState) == 0x000001, "Wrong alignment on FortGlobalUIContext_GetFeatureState");
static_assert(sizeof(FortGlobalUIContext_GetFeatureState) == 0x000003, "Wrong size on FortGlobalUIContext_GetFeatureState");
static_assert(offsetof(FortGlobalUIContext_GetFeatureState, Feature) == 0x000000, "Member 'FortGlobalUIContext_GetFeatureState::Feature' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetFeatureState, OutFeatureState) == 0x000001, "Member 'FortGlobalUIContext_GetFeatureState::OutFeatureState' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetFeatureState, OutReason) == 0x000002, "Member 'FortGlobalUIContext_GetFeatureState::OutReason' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetLastMissionRewardReport
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetLastMissionRewardReport final
{
public:
	class UFortUIRewardReport*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetLastMissionRewardReport) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetLastMissionRewardReport");
static_assert(sizeof(FortGlobalUIContext_GetLastMissionRewardReport) == 0x000008, "Wrong size on FortGlobalUIContext_GetLastMissionRewardReport");
static_assert(offsetof(FortGlobalUIContext_GetLastMissionRewardReport, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetLastMissionRewardReport::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetMessageManager
// 0x0018 (0x0018 - 0x0000)
struct FortGlobalUIContext_GetMessageManager final
{
public:
	class FName                                   ManagerName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreatedNew;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUIMessageManager*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetMessageManager) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetMessageManager");
static_assert(sizeof(FortGlobalUIContext_GetMessageManager) == 0x000018, "Wrong size on FortGlobalUIContext_GetMessageManager");
static_assert(offsetof(FortGlobalUIContext_GetMessageManager, ManagerName) == 0x000000, "Member 'FortGlobalUIContext_GetMessageManager::ManagerName' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetMessageManager, bCreatedNew) == 0x000008, "Member 'FortGlobalUIContext_GetMessageManager::bCreatedNew' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetMessageManager, ReturnValue) == 0x000010, "Member 'FortGlobalUIContext_GetMessageManager::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetScoreReport
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetScoreReport final
{
public:
	class UFortUIScoreReport*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetScoreReport) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetScoreReport");
static_assert(sizeof(FortGlobalUIContext_GetScoreReport) == 0x000008, "Wrong size on FortGlobalUIContext_GetScoreReport");
static_assert(offsetof(FortGlobalUIContext_GetScoreReport, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetScoreReport::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetTopLevelHelpItems
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_GetTopLevelHelpItems final
{
public:
	TArray<class UFortHelpItem*>                  ActiveHelpEntries;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetTopLevelHelpItems) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetTopLevelHelpItems");
static_assert(sizeof(FortGlobalUIContext_GetTopLevelHelpItems) == 0x000010, "Wrong size on FortGlobalUIContext_GetTopLevelHelpItems");
static_assert(offsetof(FortGlobalUIContext_GetTopLevelHelpItems, ActiveHelpEntries) == 0x000000, "Member 'FortGlobalUIContext_GetTopLevelHelpItems::ActiveHelpEntries' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetWatermark
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_GetWatermark final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetWatermark) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetWatermark");
static_assert(sizeof(FortGlobalUIContext_GetWatermark) == 0x000010, "Wrong size on FortGlobalUIContext_GetWatermark");
static_assert(offsetof(FortGlobalUIContext_GetWatermark, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetWatermark::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.HideBang
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_HideBang final
{
public:
	EFortBangType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_HideBang) == 0x000001, "Wrong alignment on FortGlobalUIContext_HideBang");
static_assert(sizeof(FortGlobalUIContext_HideBang) == 0x000001, "Wrong size on FortGlobalUIContext_HideBang");
static_assert(offsetof(FortGlobalUIContext_HideBang, Type) == 0x000000, "Member 'FortGlobalUIContext_HideBang::Type' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.InputActionHoldStarted
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_InputActionHoldStarted final
{
public:
	class FName                                   InputActionName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldDuration;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_InputActionHoldStarted) == 0x000004, "Wrong alignment on FortGlobalUIContext_InputActionHoldStarted");
static_assert(sizeof(FortGlobalUIContext_InputActionHoldStarted) == 0x00000C, "Wrong size on FortGlobalUIContext_InputActionHoldStarted");
static_assert(offsetof(FortGlobalUIContext_InputActionHoldStarted, InputActionName) == 0x000000, "Member 'FortGlobalUIContext_InputActionHoldStarted::InputActionName' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_InputActionHoldStarted, HoldDuration) == 0x000008, "Member 'FortGlobalUIContext_InputActionHoldStarted::HoldDuration' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.InputActionHoldStopped
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_InputActionHoldStopped final
{
public:
	class FName                                   InputActionName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompletedSuccessfully;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_InputActionHoldStopped) == 0x000004, "Wrong alignment on FortGlobalUIContext_InputActionHoldStopped");
static_assert(sizeof(FortGlobalUIContext_InputActionHoldStopped) == 0x00000C, "Wrong size on FortGlobalUIContext_InputActionHoldStopped");
static_assert(offsetof(FortGlobalUIContext_InputActionHoldStopped, InputActionName) == 0x000000, "Member 'FortGlobalUIContext_InputActionHoldStopped::InputActionName' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_InputActionHoldStopped, bCompletedSuccessfully) == 0x000008, "Member 'FortGlobalUIContext_InputActionHoldStopped::bCompletedSuccessfully' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsAllContentInstalled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsAllContentInstalled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsAllContentInstalled) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsAllContentInstalled");
static_assert(sizeof(FortGlobalUIContext_IsAllContentInstalled) == 0x000001, "Wrong size on FortGlobalUIContext_IsAllContentInstalled");
static_assert(offsetof(FortGlobalUIContext_IsAllContentInstalled, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsAllContentInstalled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsBluGloEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsBluGloEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsBluGloEnabled) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsBluGloEnabled");
static_assert(sizeof(FortGlobalUIContext_IsBluGloEnabled) == 0x000001, "Wrong size on FortGlobalUIContext_IsBluGloEnabled");
static_assert(offsetof(FortGlobalUIContext_IsBluGloEnabled, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsBluGloEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsDesktopPlatform
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsDesktopPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsDesktopPlatform) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsDesktopPlatform");
static_assert(sizeof(FortGlobalUIContext_IsDesktopPlatform) == 0x000001, "Wrong size on FortGlobalUIContext_IsDesktopPlatform");
static_assert(offsetof(FortGlobalUIContext_IsDesktopPlatform, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsDesktopPlatform::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsHUDVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsHUDVisible) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsHUDVisible");
static_assert(sizeof(FortGlobalUIContext_IsHUDVisible) == 0x000001, "Wrong size on FortGlobalUIContext_IsHUDVisible");
static_assert(offsetof(FortGlobalUIContext_IsHUDVisible, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsHUDVisible::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteUI.FortGlobalUIContext.OnLoadingScreenVisibilityChangedDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_OnLoadingScreenVisibilityChangedDelegate__DelegateSignature final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_OnLoadingScreenVisibilityChangedDelegate__DelegateSignature) == 0x000001, "Wrong alignment on FortGlobalUIContext_OnLoadingScreenVisibilityChangedDelegate__DelegateSignature");
static_assert(sizeof(FortGlobalUIContext_OnLoadingScreenVisibilityChangedDelegate__DelegateSignature) == 0x000001, "Wrong size on FortGlobalUIContext_OnLoadingScreenVisibilityChangedDelegate__DelegateSignature");
static_assert(offsetof(FortGlobalUIContext_OnLoadingScreenVisibilityChangedDelegate__DelegateSignature, IsVisible) == 0x000000, "Member 'FortGlobalUIContext_OnLoadingScreenVisibilityChangedDelegate__DelegateSignature::IsVisible' has a wrong offset!");

// DelegateFunction FortniteUI.FortGlobalUIContext.OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature final
{
public:
	bool                                          bConnected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature) == 0x000001, "Wrong alignment on FortGlobalUIContext_OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature");
static_assert(sizeof(FortGlobalUIContext_OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature) == 0x000001, "Wrong size on FortGlobalUIContext_OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature");
static_assert(offsetof(FortGlobalUIContext_OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature, bConnected) == 0x000000, "Member 'FortGlobalUIContext_OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature::bConnected' has a wrong offset!");

// DelegateFunction FortniteUI.FortGlobalUIContext.OnQueryFortBackendVersionDelegate__DelegateSignature
// 0x0098 (0x0098 - 0x0000)
struct FortGlobalUIContext_OnQueryFortBackendVersionDelegate__DelegateSignature final
{
public:
	struct FFortBackendVersion                    FortBackendVersion;                                // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_OnQueryFortBackendVersionDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortGlobalUIContext_OnQueryFortBackendVersionDelegate__DelegateSignature");
static_assert(sizeof(FortGlobalUIContext_OnQueryFortBackendVersionDelegate__DelegateSignature) == 0x000098, "Wrong size on FortGlobalUIContext_OnQueryFortBackendVersionDelegate__DelegateSignature");
static_assert(offsetof(FortGlobalUIContext_OnQueryFortBackendVersionDelegate__DelegateSignature, FortBackendVersion) == 0x000000, "Member 'FortGlobalUIContext_OnQueryFortBackendVersionDelegate__DelegateSignature::FortBackendVersion' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.ProcessConfirmationResult
// 0x0138 (0x0138 - 0x0000)
struct FortGlobalUIContext_ProcessConfirmationResult final
{
public:
	EFortDialogResult                             InResult;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InResultName;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortDialogDescription_NUI             ConfirmationDescription;                           // 0x0010(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bWaitingForLatentAction;                           // 0x0130(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortDialogExternalLatentActionHandle  WaitingDialogHandle;                               // 0x0134(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_ProcessConfirmationResult) == 0x000008, "Wrong alignment on FortGlobalUIContext_ProcessConfirmationResult");
static_assert(sizeof(FortGlobalUIContext_ProcessConfirmationResult) == 0x000138, "Wrong size on FortGlobalUIContext_ProcessConfirmationResult");
static_assert(offsetof(FortGlobalUIContext_ProcessConfirmationResult, InResult) == 0x000000, "Member 'FortGlobalUIContext_ProcessConfirmationResult::InResult' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_ProcessConfirmationResult, InResultName) == 0x000004, "Member 'FortGlobalUIContext_ProcessConfirmationResult::InResultName' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_ProcessConfirmationResult, ConfirmationDescription) == 0x000010, "Member 'FortGlobalUIContext_ProcessConfirmationResult::ConfirmationDescription' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_ProcessConfirmationResult, bWaitingForLatentAction) == 0x000130, "Member 'FortGlobalUIContext_ProcessConfirmationResult::bWaitingForLatentAction' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_ProcessConfirmationResult, WaitingDialogHandle) == 0x000134, "Member 'FortGlobalUIContext_ProcessConfirmationResult::WaitingDialogHandle' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.RegisterInputAction
// 0x0030 (0x0030 - 0x0000)
struct FortGlobalUIContext_RegisterInputAction final
{
public:
	const class UUserWidget*                      UserWidget;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    InputActionRow;                                    // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool* bPassThrough)>           CommitedEvent;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InFilterPriority;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_RegisterInputAction) == 0x000008, "Wrong alignment on FortGlobalUIContext_RegisterInputAction");
static_assert(sizeof(FortGlobalUIContext_RegisterInputAction) == 0x000030, "Wrong size on FortGlobalUIContext_RegisterInputAction");
static_assert(offsetof(FortGlobalUIContext_RegisterInputAction, UserWidget) == 0x000000, "Member 'FortGlobalUIContext_RegisterInputAction::UserWidget' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_RegisterInputAction, InputActionRow) == 0x000008, "Member 'FortGlobalUIContext_RegisterInputAction::InputActionRow' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_RegisterInputAction, CommitedEvent) == 0x000018, "Member 'FortGlobalUIContext_RegisterInputAction::CommitedEvent' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_RegisterInputAction, InFilterPriority) == 0x000028, "Member 'FortGlobalUIContext_RegisterInputAction::InFilterPriority' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.RegisterScriptedAction
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_RegisterScriptedAction final
{
public:
	TSubclassOf<class AFortScriptedAction>        ScriptedAction;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_RegisterScriptedAction) == 0x000008, "Wrong alignment on FortGlobalUIContext_RegisterScriptedAction");
static_assert(sizeof(FortGlobalUIContext_RegisterScriptedAction) == 0x000008, "Wrong size on FortGlobalUIContext_RegisterScriptedAction");
static_assert(offsetof(FortGlobalUIContext_RegisterScriptedAction, ScriptedAction) == 0x000000, "Member 'FortGlobalUIContext_RegisterScriptedAction::ScriptedAction' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.RegisterScriptedActions
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_RegisterScriptedActions final
{
public:
	TArray<TSubclassOf<class AFortScriptedAction>> ScriptedActions;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_RegisterScriptedActions) == 0x000008, "Wrong alignment on FortGlobalUIContext_RegisterScriptedActions");
static_assert(sizeof(FortGlobalUIContext_RegisterScriptedActions) == 0x000010, "Wrong size on FortGlobalUIContext_RegisterScriptedActions");
static_assert(offsetof(FortGlobalUIContext_RegisterScriptedActions, ScriptedActions) == 0x000000, "Member 'FortGlobalUIContext_RegisterScriptedActions::ScriptedActions' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.RunLauncherWithOptions
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_RunLauncherWithOptions final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_RunLauncherWithOptions) == 0x000008, "Wrong alignment on FortGlobalUIContext_RunLauncherWithOptions");
static_assert(sizeof(FortGlobalUIContext_RunLauncherWithOptions) == 0x000010, "Wrong size on FortGlobalUIContext_RunLauncherWithOptions");
static_assert(offsetof(FortGlobalUIContext_RunLauncherWithOptions, Options) == 0x000000, "Member 'FortGlobalUIContext_RunLauncherWithOptions::Options' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SendExperienceRatingAnalytic
// 0x0060 (0x0060 - 0x0000)
struct FortGlobalUIContext_SendExperienceRatingAnalytic final
{
public:
	class FString                                 RatingType;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FeedbackSentBy;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RatingQuestion;                                    // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         StarCount;                                         // 0x0038(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameSessionId;                                     // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_SendExperienceRatingAnalytic) == 0x000008, "Wrong alignment on FortGlobalUIContext_SendExperienceRatingAnalytic");
static_assert(sizeof(FortGlobalUIContext_SendExperienceRatingAnalytic) == 0x000060, "Wrong size on FortGlobalUIContext_SendExperienceRatingAnalytic");
static_assert(offsetof(FortGlobalUIContext_SendExperienceRatingAnalytic, RatingType) == 0x000000, "Member 'FortGlobalUIContext_SendExperienceRatingAnalytic::RatingType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_SendExperienceRatingAnalytic, FeedbackSentBy) == 0x000010, "Member 'FortGlobalUIContext_SendExperienceRatingAnalytic::FeedbackSentBy' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_SendExperienceRatingAnalytic, RatingQuestion) == 0x000020, "Member 'FortGlobalUIContext_SendExperienceRatingAnalytic::RatingQuestion' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_SendExperienceRatingAnalytic, StarCount) == 0x000038, "Member 'FortGlobalUIContext_SendExperienceRatingAnalytic::StarCount' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_SendExperienceRatingAnalytic, GameSessionId) == 0x000040, "Member 'FortGlobalUIContext_SendExperienceRatingAnalytic::GameSessionId' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_SendExperienceRatingAnalytic, Comment) == 0x000050, "Member 'FortGlobalUIContext_SendExperienceRatingAnalytic::Comment' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SendUINavigationAnalytic
// 0x0018 (0x0018 - 0x0000)
struct FortGlobalUIContext_SendUINavigationAnalytic final
{
public:
	class FString                                 Destination;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUserInitiated;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_SendUINavigationAnalytic) == 0x000008, "Wrong alignment on FortGlobalUIContext_SendUINavigationAnalytic");
static_assert(sizeof(FortGlobalUIContext_SendUINavigationAnalytic) == 0x000018, "Wrong size on FortGlobalUIContext_SendUINavigationAnalytic");
static_assert(offsetof(FortGlobalUIContext_SendUINavigationAnalytic, Destination) == 0x000000, "Member 'FortGlobalUIContext_SendUINavigationAnalytic::Destination' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_SendUINavigationAnalytic, bUserInitiated) == 0x000010, "Member 'FortGlobalUIContext_SendUINavigationAnalytic::bUserInitiated' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SetBangFromCount
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_SetBangFromCount final
{
public:
	EFortBangType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_SetBangFromCount) == 0x000004, "Wrong alignment on FortGlobalUIContext_SetBangFromCount");
static_assert(sizeof(FortGlobalUIContext_SetBangFromCount) == 0x000008, "Wrong size on FortGlobalUIContext_SetBangFromCount");
static_assert(offsetof(FortGlobalUIContext_SetBangFromCount, Type) == 0x000000, "Member 'FortGlobalUIContext_SetBangFromCount::Type' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_SetBangFromCount, Count) == 0x000004, "Member 'FortGlobalUIContext_SetBangFromCount::Count' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SetContextHelpItem
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_SetContextHelpItem final
{
public:
	class UFortHelpItem*                          ContextSpecificHelpItem;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_SetContextHelpItem) == 0x000008, "Wrong alignment on FortGlobalUIContext_SetContextHelpItem");
static_assert(sizeof(FortGlobalUIContext_SetContextHelpItem) == 0x000008, "Wrong size on FortGlobalUIContext_SetContextHelpItem");
static_assert(offsetof(FortGlobalUIContext_SetContextHelpItem, ContextSpecificHelpItem) == 0x000000, "Member 'FortGlobalUIContext_SetContextHelpItem::ContextSpecificHelpItem' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SetCreativeMode
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_SetCreativeMode final
{
public:
	bool                                          IsCreativeMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_SetCreativeMode) == 0x000001, "Wrong alignment on FortGlobalUIContext_SetCreativeMode");
static_assert(sizeof(FortGlobalUIContext_SetCreativeMode) == 0x000001, "Wrong size on FortGlobalUIContext_SetCreativeMode");
static_assert(offsetof(FortGlobalUIContext_SetCreativeMode, IsCreativeMode) == 0x000000, "Member 'FortGlobalUIContext_SetCreativeMode::IsCreativeMode' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SetCurrentCustomInputTemplatePresetName
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_SetCurrentCustomInputTemplatePresetName final
{
public:
	class FString                                 InputPresetName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_SetCurrentCustomInputTemplatePresetName) == 0x000008, "Wrong alignment on FortGlobalUIContext_SetCurrentCustomInputTemplatePresetName");
static_assert(sizeof(FortGlobalUIContext_SetCurrentCustomInputTemplatePresetName) == 0x000010, "Wrong size on FortGlobalUIContext_SetCurrentCustomInputTemplatePresetName");
static_assert(offsetof(FortGlobalUIContext_SetCurrentCustomInputTemplatePresetName, InputPresetName) == 0x000000, "Member 'FortGlobalUIContext_SetCurrentCustomInputTemplatePresetName::InputPresetName' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SetCurrentInputPresetName
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_SetCurrentInputPresetName final
{
public:
	class FString                                 InputPresetName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_SetCurrentInputPresetName) == 0x000008, "Wrong alignment on FortGlobalUIContext_SetCurrentInputPresetName");
static_assert(sizeof(FortGlobalUIContext_SetCurrentInputPresetName) == 0x000010, "Wrong size on FortGlobalUIContext_SetCurrentInputPresetName");
static_assert(offsetof(FortGlobalUIContext_SetCurrentInputPresetName, InputPresetName) == 0x000000, "Member 'FortGlobalUIContext_SetCurrentInputPresetName::InputPresetName' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SetHidePerkRecombobulatorHelp
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_SetHidePerkRecombobulatorHelp final
{
public:
	bool                                          bInHideHelp;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_SetHidePerkRecombobulatorHelp) == 0x000001, "Wrong alignment on FortGlobalUIContext_SetHidePerkRecombobulatorHelp");
static_assert(sizeof(FortGlobalUIContext_SetHidePerkRecombobulatorHelp) == 0x000001, "Wrong size on FortGlobalUIContext_SetHidePerkRecombobulatorHelp");
static_assert(offsetof(FortGlobalUIContext_SetHidePerkRecombobulatorHelp, bInHideHelp) == 0x000000, "Member 'FortGlobalUIContext_SetHidePerkRecombobulatorHelp::bInHideHelp' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SetHideStwItemRefundHelp
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_SetHideStwItemRefundHelp final
{
public:
	bool                                          bInHideHelp;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_SetHideStwItemRefundHelp) == 0x000001, "Wrong alignment on FortGlobalUIContext_SetHideStwItemRefundHelp");
static_assert(sizeof(FortGlobalUIContext_SetHideStwItemRefundHelp) == 0x000001, "Wrong size on FortGlobalUIContext_SetHideStwItemRefundHelp");
static_assert(offsetof(FortGlobalUIContext_SetHideStwItemRefundHelp, bInHideHelp) == 0x000000, "Member 'FortGlobalUIContext_SetHideStwItemRefundHelp::bInHideHelp' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_SetInputMode final
{
public:
	EFortInputMode                                InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_SetInputMode) == 0x000001, "Wrong alignment on FortGlobalUIContext_SetInputMode");
static_assert(sizeof(FortGlobalUIContext_SetInputMode) == 0x000001, "Wrong size on FortGlobalUIContext_SetInputMode");
static_assert(offsetof(FortGlobalUIContext_SetInputMode, InMode) == 0x000000, "Member 'FortGlobalUIContext_SetInputMode::InMode' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SetRatingWidgetFeedbackTitle
// 0x0018 (0x0018 - 0x0000)
struct FortGlobalUIContext_SetRatingWidgetFeedbackTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_SetRatingWidgetFeedbackTitle) == 0x000008, "Wrong alignment on FortGlobalUIContext_SetRatingWidgetFeedbackTitle");
static_assert(sizeof(FortGlobalUIContext_SetRatingWidgetFeedbackTitle) == 0x000018, "Wrong size on FortGlobalUIContext_SetRatingWidgetFeedbackTitle");
static_assert(offsetof(FortGlobalUIContext_SetRatingWidgetFeedbackTitle, Title) == 0x000000, "Member 'FortGlobalUIContext_SetRatingWidgetFeedbackTitle::Title' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.SetSubGame
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_SetSubGame final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_SetSubGame) == 0x000001, "Wrong alignment on FortGlobalUIContext_SetSubGame");
static_assert(sizeof(FortGlobalUIContext_SetSubGame) == 0x000001, "Wrong size on FortGlobalUIContext_SetSubGame");
static_assert(offsetof(FortGlobalUIContext_SetSubGame, SubGame) == 0x000000, "Member 'FortGlobalUIContext_SetSubGame::SubGame' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.ShowBang
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_ShowBang final
{
public:
	EFortBangType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_ShowBang) == 0x000001, "Wrong alignment on FortGlobalUIContext_ShowBang");
static_assert(sizeof(FortGlobalUIContext_ShowBang) == 0x000001, "Wrong size on FortGlobalUIContext_ShowBang");
static_assert(offsetof(FortGlobalUIContext_ShowBang, Type) == 0x000000, "Member 'FortGlobalUIContext_ShowBang::Type' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.ShowConsoleAccountPicker
// 0x0014 (0x0014 - 0x0000)
struct FortGlobalUIContext_ShowConsoleAccountPicker final
{
public:
	int32                                         ControllerIndex;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 ControllerIndex, bool bUserSwitched)> CompletionDelegate;                                // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_ShowConsoleAccountPicker) == 0x000004, "Wrong alignment on FortGlobalUIContext_ShowConsoleAccountPicker");
static_assert(sizeof(FortGlobalUIContext_ShowConsoleAccountPicker) == 0x000014, "Wrong size on FortGlobalUIContext_ShowConsoleAccountPicker");
static_assert(offsetof(FortGlobalUIContext_ShowConsoleAccountPicker, ControllerIndex) == 0x000000, "Member 'FortGlobalUIContext_ShowConsoleAccountPicker::ControllerIndex' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_ShowConsoleAccountPicker, CompletionDelegate) == 0x000004, "Member 'FortGlobalUIContext_ShowConsoleAccountPicker::CompletionDelegate' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.ShowWebURL
// 0x0018 (0x0018 - 0x0000)
struct FortGlobalUIContext_ShowWebURL final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUrlType                                  URLType;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_ShowWebURL) == 0x000008, "Wrong alignment on FortGlobalUIContext_ShowWebURL");
static_assert(sizeof(FortGlobalUIContext_ShowWebURL) == 0x000018, "Wrong size on FortGlobalUIContext_ShowWebURL");
static_assert(offsetof(FortGlobalUIContext_ShowWebURL, URL) == 0x000000, "Member 'FortGlobalUIContext_ShowWebURL::URL' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_ShowWebURL, URLType) == 0x000010, "Member 'FortGlobalUIContext_ShowWebURL::URLType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_ShowWebURL, ReturnValue) == 0x000011, "Member 'FortGlobalUIContext_ShowWebURL::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.UnbindToFeatureState
// 0x0014 (0x0014 - 0x0000)
struct FortGlobalUIContext_UnbindToFeatureState final
{
public:
	EFortUIFeature                                Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EFortUIFeature ChangedFeature, EFortUIFeatureState NewState, EFortUIFeatureStateReason StateReason)> Delegate;                                          // 0x0004(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_UnbindToFeatureState) == 0x000004, "Wrong alignment on FortGlobalUIContext_UnbindToFeatureState");
static_assert(sizeof(FortGlobalUIContext_UnbindToFeatureState) == 0x000014, "Wrong size on FortGlobalUIContext_UnbindToFeatureState");
static_assert(offsetof(FortGlobalUIContext_UnbindToFeatureState, Feature) == 0x000000, "Member 'FortGlobalUIContext_UnbindToFeatureState::Feature' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_UnbindToFeatureState, Delegate) == 0x000004, "Member 'FortGlobalUIContext_UnbindToFeatureState::Delegate' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.UnregisterInputAction
// 0x0018 (0x0018 - 0x0000)
struct FortGlobalUIContext_UnregisterInputAction final
{
public:
	const class UUserWidget*                      UserWidget;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    InputActionRow;                                    // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_UnregisterInputAction) == 0x000008, "Wrong alignment on FortGlobalUIContext_UnregisterInputAction");
static_assert(sizeof(FortGlobalUIContext_UnregisterInputAction) == 0x000018, "Wrong size on FortGlobalUIContext_UnregisterInputAction");
static_assert(offsetof(FortGlobalUIContext_UnregisterInputAction, UserWidget) == 0x000000, "Member 'FortGlobalUIContext_UnregisterInputAction::UserWidget' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_UnregisterInputAction, InputActionRow) == 0x000008, "Member 'FortGlobalUIContext_UnregisterInputAction::InputActionRow' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.UnregisterScriptedAction
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_UnregisterScriptedAction final
{
public:
	TSubclassOf<class AFortScriptedAction>        ScriptedAction;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_UnregisterScriptedAction) == 0x000008, "Wrong alignment on FortGlobalUIContext_UnregisterScriptedAction");
static_assert(sizeof(FortGlobalUIContext_UnregisterScriptedAction) == 0x000008, "Wrong size on FortGlobalUIContext_UnregisterScriptedAction");
static_assert(offsetof(FortGlobalUIContext_UnregisterScriptedAction, ScriptedAction) == 0x000000, "Member 'FortGlobalUIContext_UnregisterScriptedAction::ScriptedAction' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.UnregisterScriptedActions
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_UnregisterScriptedActions final
{
public:
	TArray<TSubclassOf<class AFortScriptedAction>> ScriptedActions;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_UnregisterScriptedActions) == 0x000008, "Wrong alignment on FortGlobalUIContext_UnregisterScriptedActions");
static_assert(sizeof(FortGlobalUIContext_UnregisterScriptedActions) == 0x000010, "Wrong size on FortGlobalUIContext_UnregisterScriptedActions");
static_assert(offsetof(FortGlobalUIContext_UnregisterScriptedActions, ScriptedActions) == 0x000000, "Member 'FortGlobalUIContext_UnregisterScriptedActions::ScriptedActions' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.AllowLogout
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_AllowLogout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_AllowLogout) == 0x000001, "Wrong alignment on FortGlobalUIContext_AllowLogout");
static_assert(sizeof(FortGlobalUIContext_AllowLogout) == 0x000001, "Wrong size on FortGlobalUIContext_AllowLogout");
static_assert(offsetof(FortGlobalUIContext_AllowLogout, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_AllowLogout::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.AllowQuit
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_AllowQuit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_AllowQuit) == 0x000001, "Wrong alignment on FortGlobalUIContext_AllowQuit");
static_assert(sizeof(FortGlobalUIContext_AllowQuit) == 0x000001, "Wrong size on FortGlobalUIContext_AllowQuit");
static_assert(offsetof(FortGlobalUIContext_AllowQuit, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_AllowQuit::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.CanPlay
// 0x0028 (0x0028 - 0x0000)
struct FortGlobalUIContext_CanPlay final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DenialReason;                                      // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_CanPlay) == 0x000008, "Wrong alignment on FortGlobalUIContext_CanPlay");
static_assert(sizeof(FortGlobalUIContext_CanPlay) == 0x000028, "Wrong size on FortGlobalUIContext_CanPlay");
static_assert(offsetof(FortGlobalUIContext_CanPlay, SubGame) == 0x000000, "Member 'FortGlobalUIContext_CanPlay::SubGame' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_CanPlay, DenialReason) == 0x000008, "Member 'FortGlobalUIContext_CanPlay::DenialReason' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_CanPlay, ReturnValue) == 0x000020, "Member 'FortGlobalUIContext_CanPlay::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.ContentInstallationProgress
// 0x0004 (0x0004 - 0x0000)
struct FortGlobalUIContext_ContentInstallationProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_ContentInstallationProgress) == 0x000004, "Wrong alignment on FortGlobalUIContext_ContentInstallationProgress");
static_assert(sizeof(FortGlobalUIContext_ContentInstallationProgress) == 0x000004, "Wrong size on FortGlobalUIContext_ContentInstallationProgress");
static_assert(offsetof(FortGlobalUIContext_ContentInstallationProgress, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_ContentInstallationProgress::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetAbility1ActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetAbility1ActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetAbility1ActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetAbility1ActionName");
static_assert(sizeof(FortGlobalUIContext_GetAbility1ActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetAbility1ActionName");
static_assert(offsetof(FortGlobalUIContext_GetAbility1ActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetAbility1ActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetAbility1ActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetAbility1ActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetAbility2ActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetAbility2ActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetAbility2ActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetAbility2ActionName");
static_assert(sizeof(FortGlobalUIContext_GetAbility2ActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetAbility2ActionName");
static_assert(offsetof(FortGlobalUIContext_GetAbility2ActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetAbility2ActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetAbility2ActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetAbility2ActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetAbility3ActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetAbility3ActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetAbility3ActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetAbility3ActionName");
static_assert(sizeof(FortGlobalUIContext_GetAbility3ActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetAbility3ActionName");
static_assert(offsetof(FortGlobalUIContext_GetAbility3ActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetAbility3ActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetAccessReason
// 0x0002 (0x0002 - 0x0000)
struct FortGlobalUIContext_GetAccessReason final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubGameAccessReason                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetAccessReason) == 0x000001, "Wrong alignment on FortGlobalUIContext_GetAccessReason");
static_assert(sizeof(FortGlobalUIContext_GetAccessReason) == 0x000002, "Wrong size on FortGlobalUIContext_GetAccessReason");
static_assert(offsetof(FortGlobalUIContext_GetAccessReason, SubGame) == 0x000000, "Member 'FortGlobalUIContext_GetAccessReason::SubGame' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetAccessReason, ReturnValue) == 0x000001, "Member 'FortGlobalUIContext_GetAccessReason::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetAccountGameplayRestrictionText
// 0x0018 (0x0018 - 0x0000)
struct FortGlobalUIContext_GetAccountGameplayRestrictionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetAccountGameplayRestrictionText) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetAccountGameplayRestrictionText");
static_assert(sizeof(FortGlobalUIContext_GetAccountGameplayRestrictionText) == 0x000018, "Wrong size on FortGlobalUIContext_GetAccountGameplayRestrictionText");
static_assert(offsetof(FortGlobalUIContext_GetAccountGameplayRestrictionText, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetAccountGameplayRestrictionText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetActionDetails
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_GetActionDetails final
{
public:
	EFortGlobalAction                             Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGlobalActionDetailsFunctionContext Context;                                           // 0x0001(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGlobalActionDetails               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetActionDetails) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetActionDetails");
static_assert(sizeof(FortGlobalUIContext_GetActionDetails) == 0x000010, "Wrong size on FortGlobalUIContext_GetActionDetails");
static_assert(offsetof(FortGlobalUIContext_GetActionDetails, Action) == 0x000000, "Member 'FortGlobalUIContext_GetActionDetails::Action' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetActionDetails, Context) == 0x000001, "Member 'FortGlobalUIContext_GetActionDetails::Context' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetActionDetails, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetActionDetails::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetActionForKey
// 0x0030 (0x0030 - 0x0000)
struct FortGlobalUIContext_GetActionForKey final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInputActionGroup                         InputActionGroup;                                  // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingGamepad;                                   // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0024(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_GetActionForKey) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetActionForKey");
static_assert(sizeof(FortGlobalUIContext_GetActionForKey) == 0x000030, "Wrong size on FortGlobalUIContext_GetActionForKey");
static_assert(offsetof(FortGlobalUIContext_GetActionForKey, PresetName) == 0x000000, "Member 'FortGlobalUIContext_GetActionForKey::PresetName' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetActionForKey, Key) == 0x000008, "Member 'FortGlobalUIContext_GetActionForKey::Key' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetActionForKey, InputActionGroup) == 0x000020, "Member 'FortGlobalUIContext_GetActionForKey::InputActionGroup' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetActionForKey, bIsUsingGamepad) == 0x000021, "Member 'FortGlobalUIContext_GetActionForKey::bIsUsingGamepad' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetActionForKey, ReturnValue) == 0x000024, "Member 'FortGlobalUIContext_GetActionForKey::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetAllPlayerInputPresetNames
// 0x0020 (0x0020 - 0x0000)
struct FortGlobalUIContext_GetAllPlayerInputPresetNames final
{
public:
	TArray<class FString>                         InputPresetNames;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           InputPresetFriendlyNames;                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetAllPlayerInputPresetNames) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetAllPlayerInputPresetNames");
static_assert(sizeof(FortGlobalUIContext_GetAllPlayerInputPresetNames) == 0x000020, "Wrong size on FortGlobalUIContext_GetAllPlayerInputPresetNames");
static_assert(offsetof(FortGlobalUIContext_GetAllPlayerInputPresetNames, InputPresetNames) == 0x000000, "Member 'FortGlobalUIContext_GetAllPlayerInputPresetNames::InputPresetNames' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetAllPlayerInputPresetNames, InputPresetFriendlyNames) == 0x000010, "Member 'FortGlobalUIContext_GetAllPlayerInputPresetNames::InputPresetFriendlyNames' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetAllPlayerInputPresetNamesForSubGame
// 0x0028 (0x0028 - 0x0000)
struct FortGlobalUIContext_GetAllPlayerInputPresetNamesForSubGame final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         InputPresetNames;                                  // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           InputPresetFriendlyNames;                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetAllPlayerInputPresetNamesForSubGame) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetAllPlayerInputPresetNamesForSubGame");
static_assert(sizeof(FortGlobalUIContext_GetAllPlayerInputPresetNamesForSubGame) == 0x000028, "Wrong size on FortGlobalUIContext_GetAllPlayerInputPresetNamesForSubGame");
static_assert(offsetof(FortGlobalUIContext_GetAllPlayerInputPresetNamesForSubGame, SubGame) == 0x000000, "Member 'FortGlobalUIContext_GetAllPlayerInputPresetNamesForSubGame::SubGame' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetAllPlayerInputPresetNamesForSubGame, InputPresetNames) == 0x000008, "Member 'FortGlobalUIContext_GetAllPlayerInputPresetNamesForSubGame::InputPresetNames' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetAllPlayerInputPresetNamesForSubGame, InputPresetFriendlyNames) == 0x000018, "Member 'FortGlobalUIContext_GetAllPlayerInputPresetNamesForSubGame::InputPresetFriendlyNames' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBackendName
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_GetBackendName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetBackendName) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetBackendName");
static_assert(sizeof(FortGlobalUIContext_GetBackendName) == 0x000010, "Wrong size on FortGlobalUIContext_GetBackendName");
static_assert(offsetof(FortGlobalUIContext_GetBackendName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetBackendName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBiplaneBoostName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetBiplaneBoostName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetBiplaneBoostName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetBiplaneBoostName");
static_assert(sizeof(FortGlobalUIContext_GetBiplaneBoostName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetBiplaneBoostName");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneBoostName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetBiplaneBoostName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneBoostName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetBiplaneBoostName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBiplaneFreelookName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetBiplaneFreelookName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetBiplaneFreelookName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetBiplaneFreelookName");
static_assert(sizeof(FortGlobalUIContext_GetBiplaneFreelookName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetBiplaneFreelookName");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneFreelookName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetBiplaneFreelookName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneFreelookName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetBiplaneFreelookName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBiplaneRollInvertName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetBiplaneRollInvertName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetBiplaneRollInvertName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetBiplaneRollInvertName");
static_assert(sizeof(FortGlobalUIContext_GetBiplaneRollInvertName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetBiplaneRollInvertName");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneRollInvertName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetBiplaneRollInvertName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneRollInvertName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetBiplaneRollInvertName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBiplaneRollLeftName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetBiplaneRollLeftName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetBiplaneRollLeftName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetBiplaneRollLeftName");
static_assert(sizeof(FortGlobalUIContext_GetBiplaneRollLeftName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetBiplaneRollLeftName");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneRollLeftName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetBiplaneRollLeftName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneRollLeftName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetBiplaneRollLeftName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBiplaneRollRightName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetBiplaneRollRightName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetBiplaneRollRightName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetBiplaneRollRightName");
static_assert(sizeof(FortGlobalUIContext_GetBiplaneRollRightName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetBiplaneRollRightName");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneRollRightName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetBiplaneRollRightName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneRollRightName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetBiplaneRollRightName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBiplaneShootName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetBiplaneShootName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetBiplaneShootName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetBiplaneShootName");
static_assert(sizeof(FortGlobalUIContext_GetBiplaneShootName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetBiplaneShootName");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneShootName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetBiplaneShootName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneShootName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetBiplaneShootName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBiplaneStartEngineName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetBiplaneStartEngineName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetBiplaneStartEngineName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetBiplaneStartEngineName");
static_assert(sizeof(FortGlobalUIContext_GetBiplaneStartEngineName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetBiplaneStartEngineName");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneStartEngineName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetBiplaneStartEngineName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneStartEngineName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetBiplaneStartEngineName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBiplaneStopEngineName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetBiplaneStopEngineName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetBiplaneStopEngineName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetBiplaneStopEngineName");
static_assert(sizeof(FortGlobalUIContext_GetBiplaneStopEngineName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetBiplaneStopEngineName");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneStopEngineName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetBiplaneStopEngineName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneStopEngineName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetBiplaneStopEngineName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBiplaneTaxiBackwardsName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetBiplaneTaxiBackwardsName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetBiplaneTaxiBackwardsName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetBiplaneTaxiBackwardsName");
static_assert(sizeof(FortGlobalUIContext_GetBiplaneTaxiBackwardsName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetBiplaneTaxiBackwardsName");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneTaxiBackwardsName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetBiplaneTaxiBackwardsName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBiplaneTaxiBackwardsName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetBiplaneTaxiBackwardsName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBrushForKey
// 0x00A8 (0x00A8 - 0x0000)
struct FortGlobalUIContext_GetBrushForKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0018(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_GetBrushForKey) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetBrushForKey");
static_assert(sizeof(FortGlobalUIContext_GetBrushForKey) == 0x0000A8, "Wrong size on FortGlobalUIContext_GetBrushForKey");
static_assert(offsetof(FortGlobalUIContext_GetBrushForKey, Key) == 0x000000, "Member 'FortGlobalUIContext_GetBrushForKey::Key' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBrushForKey, Brush) == 0x000018, "Member 'FortGlobalUIContext_GetBrushForKey::Brush' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBrushForKey, ReturnValue) == 0x0000A0, "Member 'FortGlobalUIContext_GetBrushForKey::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBrushForKeyWithCustomInput
// 0x00A8 (0x00A8 - 0x0000)
struct FortGlobalUIContext_GetBrushForKeyWithCustomInput final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0018(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	ECommonInputType                              InputType;                                         // 0x00A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonGamepadType                            GamepadType;                                       // 0x00A1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A2(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_GetBrushForKeyWithCustomInput) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetBrushForKeyWithCustomInput");
static_assert(sizeof(FortGlobalUIContext_GetBrushForKeyWithCustomInput) == 0x0000A8, "Wrong size on FortGlobalUIContext_GetBrushForKeyWithCustomInput");
static_assert(offsetof(FortGlobalUIContext_GetBrushForKeyWithCustomInput, Key) == 0x000000, "Member 'FortGlobalUIContext_GetBrushForKeyWithCustomInput::Key' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBrushForKeyWithCustomInput, Brush) == 0x000018, "Member 'FortGlobalUIContext_GetBrushForKeyWithCustomInput::Brush' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBrushForKeyWithCustomInput, InputType) == 0x0000A0, "Member 'FortGlobalUIContext_GetBrushForKeyWithCustomInput::InputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBrushForKeyWithCustomInput, GamepadType) == 0x0000A1, "Member 'FortGlobalUIContext_GetBrushForKeyWithCustomInput::GamepadType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBrushForKeyWithCustomInput, ReturnValue) == 0x0000A2, "Member 'FortGlobalUIContext_GetBrushForKeyWithCustomInput::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetBuildConfirmActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetBuildConfirmActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetBuildConfirmActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetBuildConfirmActionName");
static_assert(sizeof(FortGlobalUIContext_GetBuildConfirmActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetBuildConfirmActionName");
static_assert(offsetof(FortGlobalUIContext_GetBuildConfirmActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetBuildConfirmActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetBuildConfirmActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetBuildConfirmActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCannonCoastActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetCannonCoastActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCannonCoastActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCannonCoastActionName");
static_assert(sizeof(FortGlobalUIContext_GetCannonCoastActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetCannonCoastActionName");
static_assert(offsetof(FortGlobalUIContext_GetCannonCoastActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetCannonCoastActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetCannonCoastActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetCannonCoastActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCannonShootActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetCannonShootActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCannonShootActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCannonShootActionName");
static_assert(sizeof(FortGlobalUIContext_GetCannonShootActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetCannonShootActionName");
static_assert(offsetof(FortGlobalUIContext_GetCannonShootActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetCannonShootActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetCannonShootActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetCannonShootActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetChangeMaterialActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetChangeMaterialActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetChangeMaterialActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetChangeMaterialActionName");
static_assert(sizeof(FortGlobalUIContext_GetChangeMaterialActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetChangeMaterialActionName");
static_assert(offsetof(FortGlobalUIContext_GetChangeMaterialActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetChangeMaterialActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCollectionBookManager
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCollectionBookManager final
{
public:
	class UFortCollectionBookManager*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCollectionBookManager) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetCollectionBookManager");
static_assert(sizeof(FortGlobalUIContext_GetCollectionBookManager) == 0x000008, "Wrong size on FortGlobalUIContext_GetCollectionBookManager");
static_assert(offsetof(FortGlobalUIContext_GetCollectionBookManager, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCollectionBookManager::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeFlyDownActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeFlyDownActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeFlyDownActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeFlyDownActionName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeFlyDownActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeFlyDownActionName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeFlyDownActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeFlyDownActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeFlyUpActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeFlyUpActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeFlyUpActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeFlyUpActionName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeFlyUpActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeFlyUpActionName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeFlyUpActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeFlyUpActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeIslandPanelStartMinigameName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeIslandPanelStartMinigameName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeIslandPanelStartMinigameName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeIslandPanelStartMinigameName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeIslandPanelStartMinigameName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeIslandPanelStartMinigameName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeIslandPanelStartMinigameName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeIslandPanelStartMinigameName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeIslandPanelSupportAffiliateName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeIslandPanelSupportAffiliateName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeIslandPanelSupportAffiliateName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeIslandPanelSupportAffiliateName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeIslandPanelSupportAffiliateName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeIslandPanelSupportAffiliateName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeIslandPanelSupportAffiliateName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeIslandPanelSupportAffiliateName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeIslandPanelToggleDetailsName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeIslandPanelToggleDetailsName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeIslandPanelToggleDetailsName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeIslandPanelToggleDetailsName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeIslandPanelToggleDetailsName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeIslandPanelToggleDetailsName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeIslandPanelToggleDetailsName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeIslandPanelToggleDetailsName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMode
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_GetCreativeMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMode) == 0x000001, "Wrong alignment on FortGlobalUIContext_GetCreativeMode");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMode) == 0x000001, "Wrong size on FortGlobalUIContext_GetCreativeMode");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMode, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeModeLimitedAccessEndTime
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeModeLimitedAccessEndTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeModeLimitedAccessEndTime) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetCreativeModeLimitedAccessEndTime");
static_assert(sizeof(FortGlobalUIContext_GetCreativeModeLimitedAccessEndTime) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeModeLimitedAccessEndTime");
static_assert(offsetof(FortGlobalUIContext_GetCreativeModeLimitedAccessEndTime, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeModeLimitedAccessEndTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveBuildingsOnGridChangePrecisionLevelName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveBuildingsOnGridChangePrecisionLevelName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridChangePrecisionLevelName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridChangePrecisionLevelName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridChangePrecisionLevelName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridChangePrecisionLevelName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridChangePrecisionLevelName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveBuildingsOnGridChangePrecisionLevelName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveBuildingsOnGridDuplicateName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveBuildingsOnGridDuplicateName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridDuplicateName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridDuplicateName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridDuplicateName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridDuplicateName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridDuplicateName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveBuildingsOnGridDuplicateName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveBuildingsOnGridExitName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveBuildingsOnGridExitName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridExitName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridExitName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridExitName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridExitName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridExitName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveBuildingsOnGridExitName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveBuildingsOnGridLetGoName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveBuildingsOnGridLetGoName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridLetGoName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridLetGoName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridLetGoName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridLetGoName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridLetGoName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveBuildingsOnGridLetGoName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveBuildingsOnGridMirrorName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveBuildingsOnGridMirrorName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridMirrorName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridMirrorName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridMirrorName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridMirrorName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridMirrorName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveBuildingsOnGridMirrorName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveBuildingsOnGridRotateClockwiseName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateClockwiseName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateClockwiseName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateClockwiseName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateClockwiseName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateClockwiseName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateClockwiseName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateClockwiseName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveBuildingsOnGridRotateCounterclockwiseName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateCounterclockwiseName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateCounterclockwiseName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateCounterclockwiseName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateCounterclockwiseName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateCounterclockwiseName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateCounterclockwiseName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveBuildingsOnGridRotateCounterclockwiseName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveObjectsFreelyChangePrecisionLevelName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveObjectsFreelyChangePrecisionLevelName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyChangePrecisionLevelName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveObjectsFreelyChangePrecisionLevelName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyChangePrecisionLevelName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveObjectsFreelyChangePrecisionLevelName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyChangePrecisionLevelName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveObjectsFreelyChangePrecisionLevelName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveObjectsFreelyDropToFloorName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveObjectsFreelyDropToFloorName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyDropToFloorName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveObjectsFreelyDropToFloorName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyDropToFloorName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveObjectsFreelyDropToFloorName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyDropToFloorName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveObjectsFreelyDropToFloorName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveObjectsFreelyDuplicateName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveObjectsFreelyDuplicateName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyDuplicateName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveObjectsFreelyDuplicateName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyDuplicateName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveObjectsFreelyDuplicateName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyDuplicateName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveObjectsFreelyDuplicateName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveObjectsFreelyExitName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveObjectsFreelyExitName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyExitName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveObjectsFreelyExitName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyExitName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveObjectsFreelyExitName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyExitName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveObjectsFreelyExitName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveObjectsFreelyLetGoName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveObjectsFreelyLetGoName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyLetGoName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveObjectsFreelyLetGoName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyLetGoName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveObjectsFreelyLetGoName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyLetGoName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveObjectsFreelyLetGoName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveObjectsFreelyPullName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveObjectsFreelyPullName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyPullName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveObjectsFreelyPullName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyPullName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveObjectsFreelyPullName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyPullName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveObjectsFreelyPullName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveObjectsFreelyPushName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveObjectsFreelyPushName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyPushName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveObjectsFreelyPushName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyPushName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveObjectsFreelyPushName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyPushName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveObjectsFreelyPushName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveObjectsFreelyRotateClockwiseName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateClockwiseName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateClockwiseName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateClockwiseName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateClockwiseName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateClockwiseName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateClockwiseName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateClockwiseName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveObjectsFreelyRotateCounterclockwiseName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateCounterclockwiseName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateCounterclockwiseName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateCounterclockwiseName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateCounterclockwiseName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateCounterclockwiseName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateCounterclockwiseName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveObjectsFreelyRotateCounterclockwiseName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveObjectsFreelySwitchAxisName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveObjectsFreelySwitchAxisName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveObjectsFreelySwitchAxisName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveObjectsFreelySwitchAxisName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveObjectsFreelySwitchAxisName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveObjectsFreelySwitchAxisName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveObjectsFreelySwitchAxisName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveObjectsFreelySwitchAxisName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveToolClearMultiSelectName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveToolClearMultiSelectName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveToolClearMultiSelectName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveToolClearMultiSelectName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveToolClearMultiSelectName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveToolClearMultiSelectName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveToolClearMultiSelectName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveToolClearMultiSelectName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveToolEquippedCopyGrabOrDuplicateName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveToolEquippedCopyGrabOrDuplicateName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveToolEquippedCopyGrabOrDuplicateName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveToolEquippedCopyGrabOrDuplicateName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveToolEquippedCopyGrabOrDuplicateName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveToolEquippedCopyGrabOrDuplicateName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveToolEquippedCopyGrabOrDuplicateName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveToolEquippedCopyGrabOrDuplicateName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveToolEquippedDeleteName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveToolEquippedDeleteName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveToolEquippedDeleteName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveToolEquippedDeleteName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveToolEquippedDeleteName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveToolEquippedDeleteName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveToolEquippedDeleteName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveToolEquippedDeleteName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveToolEquippedGrabOrLetGoName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveToolEquippedGrabOrLetGoName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveToolEquippedGrabOrLetGoName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveToolEquippedGrabOrLetGoName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveToolEquippedGrabOrLetGoName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveToolEquippedGrabOrLetGoName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveToolEquippedGrabOrLetGoName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveToolEquippedGrabOrLetGoName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeMoveToolMultiSelectName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeMoveToolMultiSelectName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeMoveToolMultiSelectName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeMoveToolMultiSelectName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeMoveToolMultiSelectName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeMoveToolMultiSelectName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeMoveToolMultiSelectName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeMoveToolMultiSelectName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativePossessPropActivateName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativePossessPropActivateName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativePossessPropActivateName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativePossessPropActivateName");
static_assert(sizeof(FortGlobalUIContext_GetCreativePossessPropActivateName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativePossessPropActivateName");
static_assert(offsetof(FortGlobalUIContext_GetCreativePossessPropActivateName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativePossessPropActivateName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeQuickbarActivateClutchName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeQuickbarActivateClutchName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeQuickbarActivateClutchName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeQuickbarActivateClutchName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeQuickbarActivateClutchName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeQuickbarActivateClutchName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeQuickbarActivateClutchName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeQuickbarActivateClutchName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCreativeToggleGhostName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetCreativeToggleGhostName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCreativeToggleGhostName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCreativeToggleGhostName");
static_assert(sizeof(FortGlobalUIContext_GetCreativeToggleGhostName) == 0x000008, "Wrong size on FortGlobalUIContext_GetCreativeToggleGhostName");
static_assert(offsetof(FortGlobalUIContext_GetCreativeToggleGhostName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCreativeToggleGhostName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCrouchActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetCrouchActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCrouchActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetCrouchActionName");
static_assert(sizeof(FortGlobalUIContext_GetCrouchActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetCrouchActionName");
static_assert(offsetof(FortGlobalUIContext_GetCrouchActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetCrouchActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetCrouchActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetCrouchActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCurrentCustomInputTemplatePresetName
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_GetCurrentCustomInputTemplatePresetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCurrentCustomInputTemplatePresetName) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetCurrentCustomInputTemplatePresetName");
static_assert(sizeof(FortGlobalUIContext_GetCurrentCustomInputTemplatePresetName) == 0x000010, "Wrong size on FortGlobalUIContext_GetCurrentCustomInputTemplatePresetName");
static_assert(offsetof(FortGlobalUIContext_GetCurrentCustomInputTemplatePresetName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCurrentCustomInputTemplatePresetName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCurrentInputPresetName
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_GetCurrentInputPresetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCurrentInputPresetName) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetCurrentInputPresetName");
static_assert(sizeof(FortGlobalUIContext_GetCurrentInputPresetName) == 0x000010, "Wrong size on FortGlobalUIContext_GetCurrentInputPresetName");
static_assert(offsetof(FortGlobalUIContext_GetCurrentInputPresetName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCurrentInputPresetName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetCustomGamepadInputPresetName
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_GetCustomGamepadInputPresetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetCustomGamepadInputPresetName) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetCustomGamepadInputPresetName");
static_assert(sizeof(FortGlobalUIContext_GetCustomGamepadInputPresetName) == 0x000010, "Wrong size on FortGlobalUIContext_GetCustomGamepadInputPresetName");
static_assert(offsetof(FortGlobalUIContext_GetCustomGamepadInputPresetName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetCustomGamepadInputPresetName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetFeatureStateReasonText
// 0x0020 (0x0020 - 0x0000)
struct FortGlobalUIContext_GetFeatureStateReasonText final
{
public:
	EFortUIFeatureStateReason                     Reason;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetFeatureStateReasonText) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetFeatureStateReasonText");
static_assert(sizeof(FortGlobalUIContext_GetFeatureStateReasonText) == 0x000020, "Wrong size on FortGlobalUIContext_GetFeatureStateReasonText");
static_assert(offsetof(FortGlobalUIContext_GetFeatureStateReasonText, Reason) == 0x000000, "Member 'FortGlobalUIContext_GetFeatureStateReasonText::Reason' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetFeatureStateReasonText, ReturnValue) == 0x000008, "Member 'FortGlobalUIContext_GetFeatureStateReasonText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetFeedbackTitle
// 0x0018 (0x0018 - 0x0000)
struct FortGlobalUIContext_GetFeedbackTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetFeedbackTitle) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetFeedbackTitle");
static_assert(sizeof(FortGlobalUIContext_GetFeedbackTitle) == 0x000018, "Wrong size on FortGlobalUIContext_GetFeedbackTitle");
static_assert(offsetof(FortGlobalUIContext_GetFeedbackTitle, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetFeedbackTitle::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetFireActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetFireActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetFireActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetFireActionName");
static_assert(sizeof(FortGlobalUIContext_GetFireActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetFireActionName");
static_assert(offsetof(FortGlobalUIContext_GetFireActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetFireActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetGadget1ActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetGadget1ActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetGadget1ActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetGadget1ActionName");
static_assert(sizeof(FortGlobalUIContext_GetGadget1ActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetGadget1ActionName");
static_assert(offsetof(FortGlobalUIContext_GetGadget1ActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetGadget1ActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetGadget2ActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetGadget2ActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetGadget2ActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetGadget2ActionName");
static_assert(sizeof(FortGlobalUIContext_GetGadget2ActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetGadget2ActionName");
static_assert(offsetof(FortGlobalUIContext_GetGadget2ActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetGadget2ActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetGamepadJackalExitActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetGamepadJackalExitActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetGamepadJackalExitActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetGamepadJackalExitActionName");
static_assert(sizeof(FortGlobalUIContext_GetGamepadJackalExitActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetGamepadJackalExitActionName");
static_assert(offsetof(FortGlobalUIContext_GetGamepadJackalExitActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetGamepadJackalExitActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetGamepadJackalExitActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetGamepadJackalExitActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetGolfCartEBrakeActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetGolfCartEBrakeActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetGolfCartEBrakeActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetGolfCartEBrakeActionName");
static_assert(sizeof(FortGlobalUIContext_GetGolfCartEBrakeActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetGolfCartEBrakeActionName");
static_assert(offsetof(FortGlobalUIContext_GetGolfCartEBrakeActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetGolfCartEBrakeActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetGolfCartEBrakeActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetGolfCartEBrakeActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetGolfCartForwardActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetGolfCartForwardActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetGolfCartForwardActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetGolfCartForwardActionName");
static_assert(sizeof(FortGlobalUIContext_GetGolfCartForwardActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetGolfCartForwardActionName");
static_assert(offsetof(FortGlobalUIContext_GetGolfCartForwardActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetGolfCartForwardActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetGolfCartForwardActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetGolfCartForwardActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetGolfCartReverseActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetGolfCartReverseActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetGolfCartReverseActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetGolfCartReverseActionName");
static_assert(sizeof(FortGlobalUIContext_GetGolfCartReverseActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetGolfCartReverseActionName");
static_assert(offsetof(FortGlobalUIContext_GetGolfCartReverseActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetGolfCartReverseActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetGolfCartReverseActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetGolfCartReverseActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetHamsterballBoostActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetHamsterballBoostActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetHamsterballBoostActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetHamsterballBoostActionName");
static_assert(sizeof(FortGlobalUIContext_GetHamsterballBoostActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetHamsterballBoostActionName");
static_assert(offsetof(FortGlobalUIContext_GetHamsterballBoostActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetHamsterballBoostActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetHamsterballBoostActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetHamsterballBoostActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetHamsterballExtendActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetHamsterballExtendActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetHamsterballExtendActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetHamsterballExtendActionName");
static_assert(sizeof(FortGlobalUIContext_GetHamsterballExtendActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetHamsterballExtendActionName");
static_assert(offsetof(FortGlobalUIContext_GetHamsterballExtendActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetHamsterballExtendActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetHamsterballExtendActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetHamsterballExtendActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetHamsterballShootActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetHamsterballShootActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetHamsterballShootActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetHamsterballShootActionName");
static_assert(sizeof(FortGlobalUIContext_GetHamsterballShootActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetHamsterballShootActionName");
static_assert(offsetof(FortGlobalUIContext_GetHamsterballShootActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetHamsterballShootActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetHamsterballShootActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetHamsterballShootActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetHidePerkRecombobulatorHelp
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_GetHidePerkRecombobulatorHelp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetHidePerkRecombobulatorHelp) == 0x000001, "Wrong alignment on FortGlobalUIContext_GetHidePerkRecombobulatorHelp");
static_assert(sizeof(FortGlobalUIContext_GetHidePerkRecombobulatorHelp) == 0x000001, "Wrong size on FortGlobalUIContext_GetHidePerkRecombobulatorHelp");
static_assert(offsetof(FortGlobalUIContext_GetHidePerkRecombobulatorHelp, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetHidePerkRecombobulatorHelp::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetHideStwItemRefundHelp
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_GetHideStwItemRefundHelp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetHideStwItemRefundHelp) == 0x000001, "Wrong alignment on FortGlobalUIContext_GetHideStwItemRefundHelp");
static_assert(sizeof(FortGlobalUIContext_GetHideStwItemRefundHelp) == 0x000001, "Wrong size on FortGlobalUIContext_GetHideStwItemRefundHelp");
static_assert(offsetof(FortGlobalUIContext_GetHideStwItemRefundHelp, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetHideStwItemRefundHelp::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetInputDetailsForAction
// 0x0030 (0x0030 - 0x0000)
struct FortGlobalUIContext_GetInputDetailsForAction final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortInputActionDetails                InputActionDetails;                                // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_GetInputDetailsForAction) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetInputDetailsForAction");
static_assert(sizeof(FortGlobalUIContext_GetInputDetailsForAction) == 0x000030, "Wrong size on FortGlobalUIContext_GetInputDetailsForAction");
static_assert(offsetof(FortGlobalUIContext_GetInputDetailsForAction, Action) == 0x000000, "Member 'FortGlobalUIContext_GetInputDetailsForAction::Action' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetInputDetailsForAction, InputActionDetails) == 0x000008, "Member 'FortGlobalUIContext_GetInputDetailsForAction::InputActionDetails' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetInputDetailsForAction, ReturnValue) == 0x000028, "Member 'FortGlobalUIContext_GetInputDetailsForAction::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetInputPriority
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetInputPriority final
{
public:
	EInputPriority                                Priority;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetInputPriority) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetInputPriority");
static_assert(sizeof(FortGlobalUIContext_GetInputPriority) == 0x000008, "Wrong size on FortGlobalUIContext_GetInputPriority");
static_assert(offsetof(FortGlobalUIContext_GetInputPriority, Priority) == 0x000000, "Member 'FortGlobalUIContext_GetInputPriority::Priority' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetInputPriority, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetInputPriority::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetJackalBoostActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetJackalBoostActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetJackalBoostActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetJackalBoostActionName");
static_assert(sizeof(FortGlobalUIContext_GetJackalBoostActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetJackalBoostActionName");
static_assert(offsetof(FortGlobalUIContext_GetJackalBoostActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetJackalBoostActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetJackalBoostActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetJackalBoostActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetJackalUseOrExitActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetJackalUseOrExitActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetJackalUseOrExitActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetJackalUseOrExitActionName");
static_assert(sizeof(FortGlobalUIContext_GetJackalUseOrExitActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetJackalUseOrExitActionName");
static_assert(offsetof(FortGlobalUIContext_GetJackalUseOrExitActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetJackalUseOrExitActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetJackalUseOrExitActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetJackalUseOrExitActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetJumpActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetJumpActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetJumpActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetJumpActionName");
static_assert(sizeof(FortGlobalUIContext_GetJumpActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetJumpActionName");
static_assert(offsetof(FortGlobalUIContext_GetJumpActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetJumpActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetKBMPlayerInputPresetDescriptionForSubGame
// 0x0038 (0x0038 - 0x0000)
struct FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentPreset;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InputPresetDescription;                            // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   InputPresetSubDescription;                         // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame");
static_assert(sizeof(FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame) == 0x000038, "Wrong size on FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame");
static_assert(offsetof(FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame, SubGame) == 0x000000, "Member 'FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame::SubGame' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame, CurrentPreset) == 0x000004, "Member 'FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame::CurrentPreset' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame, InputPresetDescription) == 0x000008, "Member 'FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame::InputPresetDescription' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame, InputPresetSubDescription) == 0x000020, "Member 'FortGlobalUIContext_GetKBMPlayerInputPresetDescriptionForSubGame::InputPresetSubDescription' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetKBMPlayerInputPresetNamesForSubGame
// 0x0028 (0x0028 - 0x0000)
struct FortGlobalUIContext_GetKBMPlayerInputPresetNamesForSubGame final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         InputPresetNames;                                  // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           InputPresetFriendlyNames;                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetKBMPlayerInputPresetNamesForSubGame) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetKBMPlayerInputPresetNamesForSubGame");
static_assert(sizeof(FortGlobalUIContext_GetKBMPlayerInputPresetNamesForSubGame) == 0x000028, "Wrong size on FortGlobalUIContext_GetKBMPlayerInputPresetNamesForSubGame");
static_assert(offsetof(FortGlobalUIContext_GetKBMPlayerInputPresetNamesForSubGame, SubGame) == 0x000000, "Member 'FortGlobalUIContext_GetKBMPlayerInputPresetNamesForSubGame::SubGame' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKBMPlayerInputPresetNamesForSubGame, InputPresetNames) == 0x000008, "Member 'FortGlobalUIContext_GetKBMPlayerInputPresetNamesForSubGame::InputPresetNames' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKBMPlayerInputPresetNamesForSubGame, InputPresetFriendlyNames) == 0x000018, "Member 'FortGlobalUIContext_GetKBMPlayerInputPresetNamesForSubGame::InputPresetFriendlyNames' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetKeyForAction
// 0x0030 (0x0030 - 0x0000)
struct FortGlobalUIContext_GetKeyForAction final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceGamepadKey;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PresetNameOverride;                                // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetKeyForAction) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetKeyForAction");
static_assert(sizeof(FortGlobalUIContext_GetKeyForAction) == 0x000030, "Wrong size on FortGlobalUIContext_GetKeyForAction");
static_assert(offsetof(FortGlobalUIContext_GetKeyForAction, Action) == 0x000000, "Member 'FortGlobalUIContext_GetKeyForAction::Action' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyForAction, bForceGamepadKey) == 0x000008, "Member 'FortGlobalUIContext_GetKeyForAction::bForceGamepadKey' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyForAction, PresetNameOverride) == 0x00000C, "Member 'FortGlobalUIContext_GetKeyForAction::PresetNameOverride' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyForAction, ReturnValue) == 0x000018, "Member 'FortGlobalUIContext_GetKeyForAction::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetKeyForAxis
// 0x0028 (0x0028 - 0x0000)
struct FortGlobalUIContext_GetKeyForAxis final
{
public:
	class FName                                   Axis;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingGamepad;                                   // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetKeyForAxis) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetKeyForAxis");
static_assert(sizeof(FortGlobalUIContext_GetKeyForAxis) == 0x000028, "Wrong size on FortGlobalUIContext_GetKeyForAxis");
static_assert(offsetof(FortGlobalUIContext_GetKeyForAxis, Axis) == 0x000000, "Member 'FortGlobalUIContext_GetKeyForAxis::Axis' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyForAxis, Scale) == 0x000008, "Member 'FortGlobalUIContext_GetKeyForAxis::Scale' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyForAxis, bIsUsingGamepad) == 0x00000C, "Member 'FortGlobalUIContext_GetKeyForAxis::bIsUsingGamepad' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyForAxis, ReturnValue) == 0x000010, "Member 'FortGlobalUIContext_GetKeyForAxis::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetKeyTextForAction
// 0x0040 (0x0040 - 0x0000)
struct FortGlobalUIContext_GetKeyTextForAction final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ButtonActionType;                                  // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bUseAbbreviatedText;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetKeyTextForAction) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetKeyTextForAction");
static_assert(sizeof(FortGlobalUIContext_GetKeyTextForAction) == 0x000040, "Wrong size on FortGlobalUIContext_GetKeyTextForAction");
static_assert(offsetof(FortGlobalUIContext_GetKeyTextForAction, Action) == 0x000000, "Member 'FortGlobalUIContext_GetKeyTextForAction::Action' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyTextForAction, ButtonActionType) == 0x000008, "Member 'FortGlobalUIContext_GetKeyTextForAction::ButtonActionType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyTextForAction, bUseAbbreviatedText) == 0x000020, "Member 'FortGlobalUIContext_GetKeyTextForAction::bUseAbbreviatedText' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyTextForAction, ReturnValue) == 0x000028, "Member 'FortGlobalUIContext_GetKeyTextForAction::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetKeyTextForAxis
// 0x0028 (0x0028 - 0x0000)
struct FortGlobalUIContext_GetKeyTextForAxis final
{
public:
	class FName                                   Axis;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisScale;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingGamepad;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAbbreviatedText;                               // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetKeyTextForAxis) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetKeyTextForAxis");
static_assert(sizeof(FortGlobalUIContext_GetKeyTextForAxis) == 0x000028, "Wrong size on FortGlobalUIContext_GetKeyTextForAxis");
static_assert(offsetof(FortGlobalUIContext_GetKeyTextForAxis, Axis) == 0x000000, "Member 'FortGlobalUIContext_GetKeyTextForAxis::Axis' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyTextForAxis, AxisScale) == 0x000008, "Member 'FortGlobalUIContext_GetKeyTextForAxis::AxisScale' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyTextForAxis, bIsUsingGamepad) == 0x00000C, "Member 'FortGlobalUIContext_GetKeyTextForAxis::bIsUsingGamepad' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyTextForAxis, bUseAbbreviatedText) == 0x00000D, "Member 'FortGlobalUIContext_GetKeyTextForAxis::bUseAbbreviatedText' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetKeyTextForAxis, ReturnValue) == 0x000010, "Member 'FortGlobalUIContext_GetKeyTextForAxis::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetLastGameSummaryInfo
// 0x0018 (0x0018 - 0x0000)
struct FortGlobalUIContext_GetLastGameSummaryInfo final
{
public:
	struct FGameSummaryInfo                       ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetLastGameSummaryInfo) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetLastGameSummaryInfo");
static_assert(sizeof(FortGlobalUIContext_GetLastGameSummaryInfo) == 0x000018, "Wrong size on FortGlobalUIContext_GetLastGameSummaryInfo");
static_assert(offsetof(FortGlobalUIContext_GetLastGameSummaryInfo, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetLastGameSummaryInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetLastMissionInfo
// 0x0048 (0x0048 - 0x0000)
struct FortGlobalUIContext_GetLastMissionInfo final
{
public:
	struct FFortLastMissionInfo                   LastMissionInfo;                                   // 0x0000(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetLastMissionInfo) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetLastMissionInfo");
static_assert(sizeof(FortGlobalUIContext_GetLastMissionInfo) == 0x000048, "Wrong size on FortGlobalUIContext_GetLastMissionInfo");
static_assert(offsetof(FortGlobalUIContext_GetLastMissionInfo, LastMissionInfo) == 0x000000, "Member 'FortGlobalUIContext_GetLastMissionInfo::LastMissionInfo' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetPerformBuildingEditInteractionActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetPerformBuildingEditInteractionActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetPerformBuildingEditInteractionActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetPerformBuildingEditInteractionActionName");
static_assert(sizeof(FortGlobalUIContext_GetPerformBuildingEditInteractionActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetPerformBuildingEditInteractionActionName");
static_assert(offsetof(FortGlobalUIContext_GetPerformBuildingEditInteractionActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetPerformBuildingEditInteractionActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetPerformBuildingEditInteractionActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetPerformBuildingEditInteractionActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetPerformBuildingImprovementInteractionActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetPerformBuildingImprovementInteractionActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetPerformBuildingImprovementInteractionActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetPerformBuildingImprovementInteractionActionName");
static_assert(sizeof(FortGlobalUIContext_GetPerformBuildingImprovementInteractionActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetPerformBuildingImprovementInteractionActionName");
static_assert(offsetof(FortGlobalUIContext_GetPerformBuildingImprovementInteractionActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetPerformBuildingImprovementInteractionActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetPerformBuildingImprovementInteractionActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetPerformBuildingImprovementInteractionActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetPickerCancelActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetPickerCancelActionName final
{
public:
	EFortPickerMode                               PickerMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetPickerCancelActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetPickerCancelActionName");
static_assert(sizeof(FortGlobalUIContext_GetPickerCancelActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetPickerCancelActionName");
static_assert(offsetof(FortGlobalUIContext_GetPickerCancelActionName, PickerMode) == 0x000000, "Member 'FortGlobalUIContext_GetPickerCancelActionName::PickerMode' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetPickerCancelActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetPickerCancelActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetPickerConfirmActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetPickerConfirmActionName final
{
public:
	EFortPickerMode                               PickerMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetPickerConfirmActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetPickerConfirmActionName");
static_assert(sizeof(FortGlobalUIContext_GetPickerConfirmActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetPickerConfirmActionName");
static_assert(offsetof(FortGlobalUIContext_GetPickerConfirmActionName, PickerMode) == 0x000000, "Member 'FortGlobalUIContext_GetPickerConfirmActionName::PickerMode' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetPickerConfirmActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetPickerConfirmActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetPlatformDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortGlobalUIContext_GetPlatformDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetPlatformDisplayName) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetPlatformDisplayName");
static_assert(sizeof(FortGlobalUIContext_GetPlatformDisplayName) == 0x000018, "Wrong size on FortGlobalUIContext_GetPlatformDisplayName");
static_assert(offsetof(FortGlobalUIContext_GetPlatformDisplayName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetPlatformDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetQuadCrasherBoostActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetQuadCrasherBoostActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetQuadCrasherBoostActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetQuadCrasherBoostActionName");
static_assert(sizeof(FortGlobalUIContext_GetQuadCrasherBoostActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetQuadCrasherBoostActionName");
static_assert(offsetof(FortGlobalUIContext_GetQuadCrasherBoostActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetQuadCrasherBoostActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetQuadCrasherBoostActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetQuadCrasherBoostActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetQuestManager
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_GetQuestManager final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestManager*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetQuestManager) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetQuestManager");
static_assert(sizeof(FortGlobalUIContext_GetQuestManager) == 0x000010, "Wrong size on FortGlobalUIContext_GetQuestManager");
static_assert(offsetof(FortGlobalUIContext_GetQuestManager, SubGame) == 0x000000, "Member 'FortGlobalUIContext_GetQuestManager::SubGame' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetQuestManager, ReturnValue) == 0x000008, "Member 'FortGlobalUIContext_GetQuestManager::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetRotatePrimitiveClockwiseActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetRotatePrimitiveClockwiseActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetRotatePrimitiveClockwiseActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetRotatePrimitiveClockwiseActionName");
static_assert(sizeof(FortGlobalUIContext_GetRotatePrimitiveClockwiseActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetRotatePrimitiveClockwiseActionName");
static_assert(offsetof(FortGlobalUIContext_GetRotatePrimitiveClockwiseActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetRotatePrimitiveClockwiseActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetRotatePrimitiveClockwiseActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetRotatePrimitiveClockwiseActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetSeasonalEventManager
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetSeasonalEventManager final
{
public:
	class UFortSeasonalEventManager*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetSeasonalEventManager) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetSeasonalEventManager");
static_assert(sizeof(FortGlobalUIContext_GetSeasonalEventManager) == 0x000008, "Wrong size on FortGlobalUIContext_GetSeasonalEventManager");
static_assert(offsetof(FortGlobalUIContext_GetSeasonalEventManager, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetSeasonalEventManager::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetSessionConnectString
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_GetSessionConnectString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetSessionConnectString) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetSessionConnectString");
static_assert(sizeof(FortGlobalUIContext_GetSessionConnectString) == 0x000010, "Wrong size on FortGlobalUIContext_GetSessionConnectString");
static_assert(offsetof(FortGlobalUIContext_GetSessionConnectString, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetSessionConnectString::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetSessionId
// 0x0010 (0x0010 - 0x0000)
struct FortGlobalUIContext_GetSessionId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetSessionId) == 0x000008, "Wrong alignment on FortGlobalUIContext_GetSessionId");
static_assert(sizeof(FortGlobalUIContext_GetSessionId) == 0x000010, "Wrong size on FortGlobalUIContext_GetSessionId");
static_assert(offsetof(FortGlobalUIContext_GetSessionId, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetSessionId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetShoppingCartCoastActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetShoppingCartCoastActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetShoppingCartCoastActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetShoppingCartCoastActionName");
static_assert(sizeof(FortGlobalUIContext_GetShoppingCartCoastActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetShoppingCartCoastActionName");
static_assert(offsetof(FortGlobalUIContext_GetShoppingCartCoastActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetShoppingCartCoastActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetSubGame
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_GetSubGame final
{
public:
	ESubGame                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetSubGame) == 0x000001, "Wrong alignment on FortGlobalUIContext_GetSubGame");
static_assert(sizeof(FortGlobalUIContext_GetSubGame) == 0x000001, "Wrong size on FortGlobalUIContext_GetSubGame");
static_assert(offsetof(FortGlobalUIContext_GetSubGame, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetSubGame::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetSwitchQuickBarActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetSwitchQuickBarActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetSwitchQuickBarActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetSwitchQuickBarActionName");
static_assert(sizeof(FortGlobalUIContext_GetSwitchQuickBarActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetSwitchQuickBarActionName");
static_assert(offsetof(FortGlobalUIContext_GetSwitchQuickBarActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetSwitchQuickBarActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetSwitchQuickBarActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetSwitchQuickBarActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetTargetActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetTargetActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetTargetActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetTargetActionName");
static_assert(sizeof(FortGlobalUIContext_GetTargetActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetTargetActionName");
static_assert(offsetof(FortGlobalUIContext_GetTargetActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetTargetActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetTargetActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetTargetActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetToggleFullscreenMapActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetToggleFullscreenMapActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetToggleFullscreenMapActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetToggleFullscreenMapActionName");
static_assert(sizeof(FortGlobalUIContext_GetToggleFullscreenMapActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetToggleFullscreenMapActionName");
static_assert(offsetof(FortGlobalUIContext_GetToggleFullscreenMapActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetToggleFullscreenMapActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetToggleInventoryActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetToggleInventoryActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetToggleInventoryActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetToggleInventoryActionName");
static_assert(sizeof(FortGlobalUIContext_GetToggleInventoryActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetToggleInventoryActionName");
static_assert(offsetof(FortGlobalUIContext_GetToggleInventoryActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetToggleInventoryActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetTrapConfirmActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetTrapConfirmActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetTrapConfirmActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetTrapConfirmActionName");
static_assert(sizeof(FortGlobalUIContext_GetTrapConfirmActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetTrapConfirmActionName");
static_assert(offsetof(FortGlobalUIContext_GetTrapConfirmActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetTrapConfirmActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetTrapConfirmActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetTrapConfirmActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetTrapHotbarActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetTrapHotbarActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetTrapHotbarActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetTrapHotbarActionName");
static_assert(sizeof(FortGlobalUIContext_GetTrapHotbarActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetTrapHotbarActionName");
static_assert(offsetof(FortGlobalUIContext_GetTrapHotbarActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetTrapHotbarActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetTrapHotbarActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetTrapHotbarActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetTrapPickerActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetTrapPickerActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetTrapPickerActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetTrapPickerActionName");
static_assert(sizeof(FortGlobalUIContext_GetTrapPickerActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetTrapPickerActionName");
static_assert(offsetof(FortGlobalUIContext_GetTrapPickerActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetTrapPickerActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetTrapPickerActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetTrapPickerActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetUseActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetUseActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetUseActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetUseActionName");
static_assert(sizeof(FortGlobalUIContext_GetUseActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetUseActionName");
static_assert(offsetof(FortGlobalUIContext_GetUseActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetUseActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetUseActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetUseActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetVehicleChangeSeatActionName
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_GetVehicleChangeSeatActionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetVehicleChangeSeatActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetVehicleChangeSeatActionName");
static_assert(sizeof(FortGlobalUIContext_GetVehicleChangeSeatActionName) == 0x000008, "Wrong size on FortGlobalUIContext_GetVehicleChangeSeatActionName");
static_assert(offsetof(FortGlobalUIContext_GetVehicleChangeSeatActionName, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_GetVehicleChangeSeatActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetVehicleExitActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetVehicleExitActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetVehicleExitActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetVehicleExitActionName");
static_assert(sizeof(FortGlobalUIContext_GetVehicleExitActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetVehicleExitActionName");
static_assert(offsetof(FortGlobalUIContext_GetVehicleExitActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetVehicleExitActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetVehicleExitActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetVehicleExitActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetVehicleJumpActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetVehicleJumpActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetVehicleJumpActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetVehicleJumpActionName");
static_assert(sizeof(FortGlobalUIContext_GetVehicleJumpActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetVehicleJumpActionName");
static_assert(offsetof(FortGlobalUIContext_GetVehicleJumpActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetVehicleJumpActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetVehicleJumpActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetVehicleJumpActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.GetVehicleUseOrExitActionName
// 0x000C (0x000C - 0x0000)
struct FortGlobalUIContext_GetVehicleUseOrExitActionName final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_GetVehicleUseOrExitActionName) == 0x000004, "Wrong alignment on FortGlobalUIContext_GetVehicleUseOrExitActionName");
static_assert(sizeof(FortGlobalUIContext_GetVehicleUseOrExitActionName) == 0x00000C, "Wrong size on FortGlobalUIContext_GetVehicleUseOrExitActionName");
static_assert(offsetof(FortGlobalUIContext_GetVehicleUseOrExitActionName, OverrideInputType) == 0x000000, "Member 'FortGlobalUIContext_GetVehicleUseOrExitActionName::OverrideInputType' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_GetVehicleUseOrExitActionName, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_GetVehicleUseOrExitActionName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.HasAccesstoMultipleSubGames
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_HasAccesstoMultipleSubGames final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_HasAccesstoMultipleSubGames) == 0x000001, "Wrong alignment on FortGlobalUIContext_HasAccesstoMultipleSubGames");
static_assert(sizeof(FortGlobalUIContext_HasAccesstoMultipleSubGames) == 0x000001, "Wrong size on FortGlobalUIContext_HasAccesstoMultipleSubGames");
static_assert(offsetof(FortGlobalUIContext_HasAccesstoMultipleSubGames, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_HasAccesstoMultipleSubGames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.HasCompletedOnboardingObjective
// 0x0018 (0x0018 - 0x0000)
struct FortGlobalUIContext_HasCompletedOnboardingObjective final
{
public:
	struct FDataTableRowHandle                    Objective;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_HasCompletedOnboardingObjective) == 0x000008, "Wrong alignment on FortGlobalUIContext_HasCompletedOnboardingObjective");
static_assert(sizeof(FortGlobalUIContext_HasCompletedOnboardingObjective) == 0x000018, "Wrong size on FortGlobalUIContext_HasCompletedOnboardingObjective");
static_assert(offsetof(FortGlobalUIContext_HasCompletedOnboardingObjective, Objective) == 0x000000, "Member 'FortGlobalUIContext_HasCompletedOnboardingObjective::Objective' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_HasCompletedOnboardingObjective, ReturnValue) == 0x000010, "Member 'FortGlobalUIContext_HasCompletedOnboardingObjective::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsBattleRoyaleMatchmakingEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsBattleRoyaleMatchmakingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsBattleRoyaleMatchmakingEnabled) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsBattleRoyaleMatchmakingEnabled");
static_assert(sizeof(FortGlobalUIContext_IsBattleRoyaleMatchmakingEnabled) == 0x000001, "Wrong size on FortGlobalUIContext_IsBattleRoyaleMatchmakingEnabled");
static_assert(offsetof(FortGlobalUIContext_IsBattleRoyaleMatchmakingEnabled, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsBattleRoyaleMatchmakingEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsCreativeModeAccessLimited
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsCreativeModeAccessLimited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsCreativeModeAccessLimited) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsCreativeModeAccessLimited");
static_assert(sizeof(FortGlobalUIContext_IsCreativeModeAccessLimited) == 0x000001, "Wrong size on FortGlobalUIContext_IsCreativeModeAccessLimited");
static_assert(offsetof(FortGlobalUIContext_IsCreativeModeAccessLimited, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsCreativeModeAccessLimited::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsCurrentlyShowingLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsCurrentlyShowingLoadingScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsCurrentlyShowingLoadingScreen) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsCurrentlyShowingLoadingScreen");
static_assert(sizeof(FortGlobalUIContext_IsCurrentlyShowingLoadingScreen) == 0x000001, "Wrong size on FortGlobalUIContext_IsCurrentlyShowingLoadingScreen");
static_assert(offsetof(FortGlobalUIContext_IsCurrentlyShowingLoadingScreen, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsCurrentlyShowingLoadingScreen::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsCustomGamepadConfig
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_IsCustomGamepadConfig final
{
public:
	int32                                         ConfigIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGlobalUIContext_IsCustomGamepadConfig) == 0x000004, "Wrong alignment on FortGlobalUIContext_IsCustomGamepadConfig");
static_assert(sizeof(FortGlobalUIContext_IsCustomGamepadConfig) == 0x000008, "Wrong size on FortGlobalUIContext_IsCustomGamepadConfig");
static_assert(offsetof(FortGlobalUIContext_IsCustomGamepadConfig, ConfigIndex) == 0x000000, "Member 'FortGlobalUIContext_IsCustomGamepadConfig::ConfigIndex' has a wrong offset!");
static_assert(offsetof(FortGlobalUIContext_IsCustomGamepadConfig, ReturnValue) == 0x000004, "Member 'FortGlobalUIContext_IsCustomGamepadConfig::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsGamepadAttached
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsGamepadAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsGamepadAttached) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsGamepadAttached");
static_assert(sizeof(FortGlobalUIContext_IsGamepadAttached) == 0x000001, "Wrong size on FortGlobalUIContext_IsGamepadAttached");
static_assert(offsetof(FortGlobalUIContext_IsGamepadAttached, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsGamepadAttached::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsInOutpostZone
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsInOutpostZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsInOutpostZone) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsInOutpostZone");
static_assert(sizeof(FortGlobalUIContext_IsInOutpostZone) == 0x000001, "Wrong size on FortGlobalUIContext_IsInOutpostZone");
static_assert(offsetof(FortGlobalUIContext_IsInOutpostZone, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsInOutpostZone::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsInZone
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsInZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsInZone) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsInZone");
static_assert(sizeof(FortGlobalUIContext_IsInZone) == 0x000001, "Wrong size on FortGlobalUIContext_IsInZone");
static_assert(offsetof(FortGlobalUIContext_IsInZone, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsInZone::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsMobileApp
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsMobileApp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsMobileApp) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsMobileApp");
static_assert(sizeof(FortGlobalUIContext_IsMobileApp) == 0x000001, "Wrong size on FortGlobalUIContext_IsMobileApp");
static_assert(offsetof(FortGlobalUIContext_IsMobileApp, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsMobileApp::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsPendingLogout
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsPendingLogout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsPendingLogout) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsPendingLogout");
static_assert(sizeof(FortGlobalUIContext_IsPendingLogout) == 0x000001, "Wrong size on FortGlobalUIContext_IsPendingLogout");
static_assert(offsetof(FortGlobalUIContext_IsPendingLogout, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsPendingLogout::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsUIVisible
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsUIVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsUIVisible) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsUIVisible");
static_assert(sizeof(FortGlobalUIContext_IsUIVisible) == 0x000001, "Wrong size on FortGlobalUIContext_IsUIVisible");
static_assert(offsetof(FortGlobalUIContext_IsUIVisible, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsUIVisible::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.IsUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_IsUsingGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_IsUsingGamepad) == 0x000001, "Wrong alignment on FortGlobalUIContext_IsUsingGamepad");
static_assert(sizeof(FortGlobalUIContext_IsUsingGamepad) == 0x000001, "Wrong size on FortGlobalUIContext_IsUsingGamepad");
static_assert(offsetof(FortGlobalUIContext_IsUsingGamepad, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_IsUsingGamepad::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.ShouldCloseMenuOnEscape
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_ShouldCloseMenuOnEscape final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_ShouldCloseMenuOnEscape) == 0x000001, "Wrong alignment on FortGlobalUIContext_ShouldCloseMenuOnEscape");
static_assert(sizeof(FortGlobalUIContext_ShouldCloseMenuOnEscape) == 0x000001, "Wrong size on FortGlobalUIContext_ShouldCloseMenuOnEscape");
static_assert(offsetof(FortGlobalUIContext_ShouldCloseMenuOnEscape, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_ShouldCloseMenuOnEscape::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.ShouldShowRateWidget
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_ShouldShowRateWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_ShouldShowRateWidget) == 0x000001, "Wrong alignment on FortGlobalUIContext_ShouldShowRateWidget");
static_assert(sizeof(FortGlobalUIContext_ShouldShowRateWidget) == 0x000001, "Wrong size on FortGlobalUIContext_ShouldShowRateWidget");
static_assert(offsetof(FortGlobalUIContext_ShouldShowRateWidget, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_ShouldShowRateWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.ShowVehicleHealthBarOnPlayerHUD
// 0x0001 (0x0001 - 0x0000)
struct FortGlobalUIContext_ShowVehicleHealthBarOnPlayerHUD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_ShowVehicleHealthBarOnPlayerHUD) == 0x000001, "Wrong alignment on FortGlobalUIContext_ShowVehicleHealthBarOnPlayerHUD");
static_assert(sizeof(FortGlobalUIContext_ShowVehicleHealthBarOnPlayerHUD) == 0x000001, "Wrong size on FortGlobalUIContext_ShowVehicleHealthBarOnPlayerHUD");
static_assert(offsetof(FortGlobalUIContext_ShowVehicleHealthBarOnPlayerHUD, ReturnValue) == 0x000000, "Member 'FortGlobalUIContext_ShowVehicleHealthBarOnPlayerHUD::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortGlobalUIContext.TriggerUIFeedbackEvent
// 0x0008 (0x0008 - 0x0000)
struct FortGlobalUIContext_TriggerUIFeedbackEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobalUIContext_TriggerUIFeedbackEvent) == 0x000004, "Wrong alignment on FortGlobalUIContext_TriggerUIFeedbackEvent");
static_assert(sizeof(FortGlobalUIContext_TriggerUIFeedbackEvent) == 0x000008, "Wrong size on FortGlobalUIContext_TriggerUIFeedbackEvent");
static_assert(offsetof(FortGlobalUIContext_TriggerUIFeedbackEvent, EventName) == 0x000000, "Member 'FortGlobalUIContext_TriggerUIFeedbackEvent::EventName' has a wrong offset!");

// DelegateFunction FortniteUI.FortGridPickerButton.CreateGridWidget__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortGridPickerButton_CreateGridWidget__DelegateSignature final
{
public:
	class UFortGridPickerGrid*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridPickerButton_CreateGridWidget__DelegateSignature) == 0x000008, "Wrong alignment on FortGridPickerButton_CreateGridWidget__DelegateSignature");
static_assert(sizeof(FortGridPickerButton_CreateGridWidget__DelegateSignature) == 0x000008, "Wrong size on FortGridPickerButton_CreateGridWidget__DelegateSignature");
static_assert(offsetof(FortGridPickerButton_CreateGridWidget__DelegateSignature, ReturnValue) == 0x000000, "Member 'FortGridPickerButton_CreateGridWidget__DelegateSignature::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteUI.FortGridPickerButton.OnIsGridPickerOpenChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortGridPickerButton_OnIsGridPickerOpenChanged__DelegateSignature final
{
public:
	bool                                          IsOpen;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridPickerButton_OnIsGridPickerOpenChanged__DelegateSignature) == 0x000001, "Wrong alignment on FortGridPickerButton_OnIsGridPickerOpenChanged__DelegateSignature");
static_assert(sizeof(FortGridPickerButton_OnIsGridPickerOpenChanged__DelegateSignature) == 0x000001, "Wrong size on FortGridPickerButton_OnIsGridPickerOpenChanged__DelegateSignature");
static_assert(offsetof(FortGridPickerButton_OnIsGridPickerOpenChanged__DelegateSignature, IsOpen) == 0x000000, "Member 'FortGridPickerButton_OnIsGridPickerOpenChanged__DelegateSignature::IsOpen' has a wrong offset!");

// Function FortniteUI.FortGridPickerButton.SetIsOpen
// 0x0001 (0x0001 - 0x0000)
struct FortGridPickerButton_SetIsOpen final
{
public:
	bool                                          ShouldBeOpen;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridPickerButton_SetIsOpen) == 0x000001, "Wrong alignment on FortGridPickerButton_SetIsOpen");
static_assert(sizeof(FortGridPickerButton_SetIsOpen) == 0x000001, "Wrong size on FortGridPickerButton_SetIsOpen");
static_assert(offsetof(FortGridPickerButton_SetIsOpen, ShouldBeOpen) == 0x000000, "Member 'FortGridPickerButton_SetIsOpen::ShouldBeOpen' has a wrong offset!");

// Function FortniteUI.FortGridPickerTile.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortGridPickerTile_SetData final
{
public:
	class UObject*                                InData;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGridPickerTile_SetData) == 0x000008, "Wrong alignment on FortGridPickerTile_SetData");
static_assert(sizeof(FortGridPickerTile_SetData) == 0x000008, "Wrong size on FortGridPickerTile_SetData");
static_assert(offsetof(FortGridPickerTile_SetData, InData) == 0x000000, "Member 'FortGridPickerTile_SetData::InData' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutGadgetPicker.SetTargetLoadoutSlot
// 0x0010 (0x0010 - 0x0000)
struct FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot final
{
public:
	const class UFortCampaignHeroLoadoutItem*     LoadoutItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot) == 0x000008, "Wrong alignment on FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot");
static_assert(sizeof(FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot) == 0x000010, "Wrong size on FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot");
static_assert(offsetof(FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot, LoadoutItem) == 0x000000, "Member 'FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot::LoadoutItem' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot, SlotIndex) == 0x000008, "Member 'FortHeroLoadoutGadgetPicker_SetTargetLoadoutSlot::SlotIndex' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutHeroPicker.AssociateFilterTabList
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutHeroPicker_AssociateFilterTabList final
{
public:
	const class UFortTabListWidgetBase*           Param_ExternalFilterTabList;                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutHeroPicker_AssociateFilterTabList) == 0x000008, "Wrong alignment on FortHeroLoadoutHeroPicker_AssociateFilterTabList");
static_assert(sizeof(FortHeroLoadoutHeroPicker_AssociateFilterTabList) == 0x000008, "Wrong size on FortHeroLoadoutHeroPicker_AssociateFilterTabList");
static_assert(offsetof(FortHeroLoadoutHeroPicker_AssociateFilterTabList, Param_ExternalFilterTabList) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_AssociateFilterTabList::Param_ExternalFilterTabList' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutHeroPicker.GetCurrentlySelectedTab
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab) == 0x000004, "Wrong alignment on FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab");
static_assert(sizeof(FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab) == 0x000008, "Wrong size on FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab");
static_assert(offsetof(FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab, ReturnValue) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_GetCurrentlySelectedTab::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutHeroPicker.HandleFilterTabSelected
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutHeroPicker_HandleFilterTabSelected final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutHeroPicker_HandleFilterTabSelected) == 0x000004, "Wrong alignment on FortHeroLoadoutHeroPicker_HandleFilterTabSelected");
static_assert(sizeof(FortHeroLoadoutHeroPicker_HandleFilterTabSelected) == 0x000008, "Wrong size on FortHeroLoadoutHeroPicker_HandleFilterTabSelected");
static_assert(offsetof(FortHeroLoadoutHeroPicker_HandleFilterTabSelected, TabId) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_HandleFilterTabSelected::TabId' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutHeroPicker.HandleFilterTabSelectedBP
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP) == 0x000004, "Wrong alignment on FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP");
static_assert(sizeof(FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP) == 0x000008, "Wrong size on FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP");
static_assert(offsetof(FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP, TabId) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_HandleFilterTabSelectedBP::TabId' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutHeroPicker.SetTargetLoadoutSlot
// 0x0010 (0x0010 - 0x0000)
struct FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot final
{
public:
	const class UFortCampaignHeroLoadoutItem*     LoadoutItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot) == 0x000008, "Wrong alignment on FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot");
static_assert(sizeof(FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot) == 0x000010, "Wrong size on FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot");
static_assert(offsetof(FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot, LoadoutItem) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot::LoadoutItem' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot, SlotName) == 0x000008, "Member 'FortHeroLoadoutHeroPicker_SetTargetLoadoutSlot::SlotName' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutHeroPicker.UpdateFilterTabList
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutHeroPicker_UpdateFilterTabList final
{
public:
	class FName                                   PreviouslySelectedTab;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutHeroPicker_UpdateFilterTabList) == 0x000004, "Wrong alignment on FortHeroLoadoutHeroPicker_UpdateFilterTabList");
static_assert(sizeof(FortHeroLoadoutHeroPicker_UpdateFilterTabList) == 0x000008, "Wrong size on FortHeroLoadoutHeroPicker_UpdateFilterTabList");
static_assert(offsetof(FortHeroLoadoutHeroPicker_UpdateFilterTabList, PreviouslySelectedTab) == 0x000000, "Member 'FortHeroLoadoutHeroPicker_UpdateFilterTabList::PreviouslySelectedTab' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutInGameScreenBase.OnPerkWidgetAdded
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded final
{
public:
	class UGridSlot*                              GridSlot;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded) == 0x000008, "Wrong alignment on FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded");
static_assert(sizeof(FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded) == 0x000008, "Wrong size on FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded");
static_assert(offsetof(FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded, GridSlot) == 0x000000, "Member 'FortHeroLoadoutInGameScreenBase_OnPerkWidgetAdded::GridSlot' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutInGameScreenBase.GetGadgetDefinitionBySlot
// 0x0010 (0x0010 - 0x0000)
struct FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGadgetItemDefinition*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot) == 0x000008, "Wrong alignment on FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot");
static_assert(sizeof(FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot) == 0x000010, "Wrong size on FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot");
static_assert(offsetof(FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot, SlotIndex) == 0x000000, "Member 'FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot, ReturnValue) == 0x000008, "Member 'FortHeroLoadoutInGameScreenBase_GetGadgetDefinitionBySlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutPerkTileBase.OnPerkInitialized
// 0x0003 (0x0003 - 0x0000)
struct FortHeroLoadoutPerkTileBase_OnPerkInitialized final
{
public:
	EFortHeroPerkDisplayType                      InPerkType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowWarning;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutPerkTileBase_OnPerkInitialized) == 0x000001, "Wrong alignment on FortHeroLoadoutPerkTileBase_OnPerkInitialized");
static_assert(sizeof(FortHeroLoadoutPerkTileBase_OnPerkInitialized) == 0x000003, "Wrong size on FortHeroLoadoutPerkTileBase_OnPerkInitialized");
static_assert(offsetof(FortHeroLoadoutPerkTileBase_OnPerkInitialized, InPerkType) == 0x000000, "Member 'FortHeroLoadoutPerkTileBase_OnPerkInitialized::InPerkType' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutPerkTileBase_OnPerkInitialized, bActive) == 0x000001, "Member 'FortHeroLoadoutPerkTileBase_OnPerkInitialized::bActive' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutPerkTileBase_OnPerkInitialized, bShowWarning) == 0x000002, "Member 'FortHeroLoadoutPerkTileBase_OnPerkInitialized::bShowWarning' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutSlotButton.HandleMenuOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutSlotButton_HandleMenuOpenChanged final
{
public:
	bool                                          bIsMenuOpen;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutSlotButton_HandleMenuOpenChanged) == 0x000001, "Wrong alignment on FortHeroLoadoutSlotButton_HandleMenuOpenChanged");
static_assert(sizeof(FortHeroLoadoutSlotButton_HandleMenuOpenChanged) == 0x000001, "Wrong size on FortHeroLoadoutSlotButton_HandleMenuOpenChanged");
static_assert(offsetof(FortHeroLoadoutSlotButton_HandleMenuOpenChanged, bIsMenuOpen) == 0x000000, "Member 'FortHeroLoadoutSlotButton_HandleMenuOpenChanged::bIsMenuOpen' has a wrong offset!");

// DelegateFunction FortniteUI.FortHeroLoadoutSlotButton.OnMenuOpenChangedEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FortHeroLoadoutSlotButton_OnMenuOpenChangedEvent__DelegateSignature final
{
public:
	class UFortHeroLoadoutSlotButton*             SlotButton;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMenuOpen;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHeroLoadoutSlotButton_OnMenuOpenChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on FortHeroLoadoutSlotButton_OnMenuOpenChangedEvent__DelegateSignature");
static_assert(sizeof(FortHeroLoadoutSlotButton_OnMenuOpenChangedEvent__DelegateSignature) == 0x000010, "Wrong size on FortHeroLoadoutSlotButton_OnMenuOpenChangedEvent__DelegateSignature");
static_assert(offsetof(FortHeroLoadoutSlotButton_OnMenuOpenChangedEvent__DelegateSignature, SlotButton) == 0x000000, "Member 'FortHeroLoadoutSlotButton_OnMenuOpenChangedEvent__DelegateSignature::SlotButton' has a wrong offset!");
static_assert(offsetof(FortHeroLoadoutSlotButton_OnMenuOpenChangedEvent__DelegateSignature, bIsMenuOpen) == 0x000008, "Member 'FortHeroLoadoutSlotButton_OnMenuOpenChangedEvent__DelegateSignature::bIsMenuOpen' has a wrong offset!");

// DelegateFunction FortniteUI.FortHeroLoadoutSlotButton.OnRequestChangeHero__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutSlotButton_OnRequestChangeHero__DelegateSignature final
{
public:
	class UFortHeroLoadoutSlotButton*             SlotButton;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutSlotButton_OnRequestChangeHero__DelegateSignature) == 0x000008, "Wrong alignment on FortHeroLoadoutSlotButton_OnRequestChangeHero__DelegateSignature");
static_assert(sizeof(FortHeroLoadoutSlotButton_OnRequestChangeHero__DelegateSignature) == 0x000008, "Wrong size on FortHeroLoadoutSlotButton_OnRequestChangeHero__DelegateSignature");
static_assert(offsetof(FortHeroLoadoutSlotButton_OnRequestChangeHero__DelegateSignature, SlotButton) == 0x000000, "Member 'FortHeroLoadoutSlotButton_OnRequestChangeHero__DelegateSignature::SlotButton' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutSlotButton.IsContextMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct FortHeroLoadoutSlotButton_IsContextMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutSlotButton_IsContextMenuOpen) == 0x000001, "Wrong alignment on FortHeroLoadoutSlotButton_IsContextMenuOpen");
static_assert(sizeof(FortHeroLoadoutSlotButton_IsContextMenuOpen) == 0x000001, "Wrong size on FortHeroLoadoutSlotButton_IsContextMenuOpen");
static_assert(offsetof(FortHeroLoadoutSlotButton_IsContextMenuOpen, ReturnValue) == 0x000000, "Member 'FortHeroLoadoutSlotButton_IsContextMenuOpen::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroLoadoutTeamPerkPicker.SetTargetLoadout
// 0x0008 (0x0008 - 0x0000)
struct FortHeroLoadoutTeamPerkPicker_SetTargetLoadout final
{
public:
	const class UFortCampaignHeroLoadoutItem*     LoadoutItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroLoadoutTeamPerkPicker_SetTargetLoadout) == 0x000008, "Wrong alignment on FortHeroLoadoutTeamPerkPicker_SetTargetLoadout");
static_assert(sizeof(FortHeroLoadoutTeamPerkPicker_SetTargetLoadout) == 0x000008, "Wrong size on FortHeroLoadoutTeamPerkPicker_SetTargetLoadout");
static_assert(offsetof(FortHeroLoadoutTeamPerkPicker_SetTargetLoadout, LoadoutItem) == 0x000000, "Member 'FortHeroLoadoutTeamPerkPicker_SetTargetLoadout::LoadoutItem' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemDetailsHostPanel.SetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000008, "Member 'FortSquadSlotItemDetailsHostPanel_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemDetailsHostPanel.GetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000008, "Member 'FortSquadSlotItemDetailsHostPanel_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemDetailsHostPanel.GetItemInSquadSlotBP
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP final
{
public:
	const class ULocalPlayer*                     LocalPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP) == 0x000008, "Wrong alignment on FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP");
static_assert(sizeof(FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP) == 0x000010, "Wrong size on FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP, LocalPlayer) == 0x000000, "Member 'FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP::LocalPlayer' has a wrong offset!");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP, ReturnValue) == 0x000008, "Member 'FortSquadSlotItemDetailsHostPanel_GetItemInSquadSlotBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemDetailsHostPanel.IsSquadSlotLockedBP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP) == 0x000001, "Wrong alignment on FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP");
static_assert(sizeof(FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP) == 0x000001, "Wrong size on FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP");
static_assert(offsetof(FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotItemDetailsHostPanel_IsSquadSlotLockedBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHeroSquadManagementScreen.PlayFeedbackForSlottingPerson
// 0x0010 (0x0010 - 0x0000)
struct FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson final
{
public:
	class UFortCharacter*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson) == 0x000008, "Wrong alignment on FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson");
static_assert(sizeof(FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson) == 0x000010, "Wrong size on FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson");
static_assert(offsetof(FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson, Character) == 0x000000, "Member 'FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson::Character' has a wrong offset!");
static_assert(offsetof(FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson, SlotIndex) == 0x000008, "Member 'FortHeroSquadManagementScreen_PlayFeedbackForSlottingPerson::SlotIndex' has a wrong offset!");

// Function FortniteUI.FortHeroSupportPerkIndicator.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortHeroSupportPerkIndicator_SetItemToRepresent final
{
public:
	const class UFortItem*                        Param_ItemToRepresent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroSupportPerkIndicator_SetItemToRepresent) == 0x000008, "Wrong alignment on FortHeroSupportPerkIndicator_SetItemToRepresent");
static_assert(sizeof(FortHeroSupportPerkIndicator_SetItemToRepresent) == 0x000008, "Wrong size on FortHeroSupportPerkIndicator_SetItemToRepresent");
static_assert(offsetof(FortHeroSupportPerkIndicator_SetItemToRepresent, Param_ItemToRepresent) == 0x000000, "Member 'FortHeroSupportPerkIndicator_SetItemToRepresent::Param_ItemToRepresent' has a wrong offset!");

// Function FortniteUI.FortHeroSupportPerkIndicator.SetSupportTypeToRepresent
// 0x0001 (0x0001 - 0x0000)
struct FortHeroSupportPerkIndicator_SetSupportTypeToRepresent final
{
public:
	EFortSupportBonusType                         Param_SupportTypeToRepresent;                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroSupportPerkIndicator_SetSupportTypeToRepresent) == 0x000001, "Wrong alignment on FortHeroSupportPerkIndicator_SetSupportTypeToRepresent");
static_assert(sizeof(FortHeroSupportPerkIndicator_SetSupportTypeToRepresent) == 0x000001, "Wrong size on FortHeroSupportPerkIndicator_SetSupportTypeToRepresent");
static_assert(offsetof(FortHeroSupportPerkIndicator_SetSupportTypeToRepresent, Param_SupportTypeToRepresent) == 0x000000, "Member 'FortHeroSupportPerkIndicator_SetSupportTypeToRepresent::Param_SupportTypeToRepresent' has a wrong offset!");

// Function FortniteUI.FortHighlightWidget.OnShowNotification
// 0x0001 (0x0001 - 0x0000)
struct FortHighlightWidget_OnShowNotification final
{
public:
	bool                                          bShowNotification;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHighlightWidget_OnShowNotification) == 0x000001, "Wrong alignment on FortHighlightWidget_OnShowNotification");
static_assert(sizeof(FortHighlightWidget_OnShowNotification) == 0x000001, "Wrong size on FortHighlightWidget_OnShowNotification");
static_assert(offsetof(FortHighlightWidget_OnShowNotification, bShowNotification) == 0x000000, "Member 'FortHighlightWidget_OnShowNotification::bShowNotification' has a wrong offset!");

// Function FortniteUI.FortSquadStatsWidgetBase.HandlePowerRatingChanged_BP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP final
{
public:
	bool                                          bHasTeamMebers;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP) == 0x000001, "Wrong alignment on FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP");
static_assert(sizeof(FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP) == 0x000001, "Wrong size on FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP");
static_assert(offsetof(FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP, bHasTeamMebers) == 0x000000, "Member 'FortSquadStatsWidgetBase_HandlePowerRatingChanged_BP::bHasTeamMebers' has a wrong offset!");

// Function FortniteUI.FortSquadStatsWidgetBase.GetLocalPlayerId
// 0x0028 (0x0028 - 0x0000)
struct FortSquadStatsWidgetBase_GetLocalPlayerId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadStatsWidgetBase_GetLocalPlayerId) == 0x000008, "Wrong alignment on FortSquadStatsWidgetBase_GetLocalPlayerId");
static_assert(sizeof(FortSquadStatsWidgetBase_GetLocalPlayerId) == 0x000028, "Wrong size on FortSquadStatsWidgetBase_GetLocalPlayerId");
static_assert(offsetof(FortSquadStatsWidgetBase_GetLocalPlayerId, ReturnValue) == 0x000000, "Member 'FortSquadStatsWidgetBase_GetLocalPlayerId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseNodeItemUtilities.AreAnyHomebaseNodeItemsUnseenForSquadId
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadId final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SquadId;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadId) == 0x000008, "Wrong alignment on FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadId");
static_assert(sizeof(FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadId) == 0x000018, "Wrong size on FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadId");
static_assert(offsetof(FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadId, FortPC) == 0x000000, "Member 'FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadId::FortPC' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadId, SquadId) == 0x000008, "Member 'FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadId::SquadId' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadId, ReturnValue) == 0x000010, "Member 'FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseNodeItemUtilities.AreAnyHomebaseNodeItemsUnseenForSquadType
// 0x0010 (0x0010 - 0x0000)
struct FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadType final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortHomebaseSquadType                        SquadType;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadType) == 0x000008, "Wrong alignment on FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadType");
static_assert(sizeof(FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadType) == 0x000010, "Wrong size on FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadType");
static_assert(offsetof(FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadType, FortPC) == 0x000000, "Member 'FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadType::FortPC' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadType, SquadType) == 0x000008, "Member 'FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadType::SquadType' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadType, ReturnValue) == 0x000009, "Member 'FortHomebaseNodeItemUtilities_AreAnyHomebaseNodeItemsUnseenForSquadType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseNodeItemUtilities.GetHomebaseNodeItemForSquadSlot
// 0x0020 (0x0020 - 0x0000)
struct FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SquadId;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlot;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHomebaseNodeItem*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot) == 0x000008, "Wrong alignment on FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot");
static_assert(sizeof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot) == 0x000020, "Wrong size on FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot");
static_assert(offsetof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot, FortPC) == 0x000000, "Member 'FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot::FortPC' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot, SquadId) == 0x000008, "Member 'FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot::SquadId' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot, SquadSlot) == 0x000010, "Member 'FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot::SquadSlot' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot, ReturnValue) == 0x000018, "Member 'FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForSquadSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseNodeItemUtilities.GetHomebaseNodeItemForTagContainer
// 0x0030 (0x0030 - 0x0000)
struct FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForTagContainer final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortHomebaseNodeItem*                  ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForTagContainer) == 0x000008, "Wrong alignment on FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForTagContainer");
static_assert(sizeof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForTagContainer) == 0x000030, "Wrong size on FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForTagContainer");
static_assert(offsetof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForTagContainer, FortPC) == 0x000000, "Member 'FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForTagContainer::FortPC' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForTagContainer, Tags) == 0x000008, "Member 'FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForTagContainer::Tags' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForTagContainer, ReturnValue) == 0x000028, "Member 'FortHomebaseNodeItemUtilities_GetHomebaseNodeItemForTagContainer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseNodeItemUtilities.GetHomebaseNodeItemNameForTagContainer
// 0x0038 (0x0038 - 0x0000)
struct FortHomebaseNodeItemUtilities_GetHomebaseNodeItemNameForTagContainer final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemNameForTagContainer) == 0x000008, "Wrong alignment on FortHomebaseNodeItemUtilities_GetHomebaseNodeItemNameForTagContainer");
static_assert(sizeof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemNameForTagContainer) == 0x000038, "Wrong size on FortHomebaseNodeItemUtilities_GetHomebaseNodeItemNameForTagContainer");
static_assert(offsetof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemNameForTagContainer, FortPC) == 0x000000, "Member 'FortHomebaseNodeItemUtilities_GetHomebaseNodeItemNameForTagContainer::FortPC' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemNameForTagContainer, Tags) == 0x000008, "Member 'FortHomebaseNodeItemUtilities_GetHomebaseNodeItemNameForTagContainer::Tags' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_GetHomebaseNodeItemNameForTagContainer, ReturnValue) == 0x000028, "Member 'FortHomebaseNodeItemUtilities_GetHomebaseNodeItemNameForTagContainer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseNodeItemUtilities.IsHomebaseNodeItemUnseenForTagContainer
// 0x0030 (0x0030 - 0x0000)
struct FortHomebaseNodeItemUtilities_IsHomebaseNodeItemUnseenForTagContainer final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseNodeItemUtilities_IsHomebaseNodeItemUnseenForTagContainer) == 0x000008, "Wrong alignment on FortHomebaseNodeItemUtilities_IsHomebaseNodeItemUnseenForTagContainer");
static_assert(sizeof(FortHomebaseNodeItemUtilities_IsHomebaseNodeItemUnseenForTagContainer) == 0x000030, "Wrong size on FortHomebaseNodeItemUtilities_IsHomebaseNodeItemUnseenForTagContainer");
static_assert(offsetof(FortHomebaseNodeItemUtilities_IsHomebaseNodeItemUnseenForTagContainer, FortPC) == 0x000000, "Member 'FortHomebaseNodeItemUtilities_IsHomebaseNodeItemUnseenForTagContainer::FortPC' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_IsHomebaseNodeItemUnseenForTagContainer, Tags) == 0x000008, "Member 'FortHomebaseNodeItemUtilities_IsHomebaseNodeItemUnseenForTagContainer::Tags' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_IsHomebaseNodeItemUnseenForTagContainer, ReturnValue) == 0x000028, "Member 'FortHomebaseNodeItemUtilities_IsHomebaseNodeItemUnseenForTagContainer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseNodeItemUtilities.IsSquadSlotUnseen
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseNodeItemUtilities_IsSquadSlotUnseen final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SquadId;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlot;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseNodeItemUtilities_IsSquadSlotUnseen) == 0x000008, "Wrong alignment on FortHomebaseNodeItemUtilities_IsSquadSlotUnseen");
static_assert(sizeof(FortHomebaseNodeItemUtilities_IsSquadSlotUnseen) == 0x000018, "Wrong size on FortHomebaseNodeItemUtilities_IsSquadSlotUnseen");
static_assert(offsetof(FortHomebaseNodeItemUtilities_IsSquadSlotUnseen, FortPC) == 0x000000, "Member 'FortHomebaseNodeItemUtilities_IsSquadSlotUnseen::FortPC' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_IsSquadSlotUnseen, SquadId) == 0x000008, "Member 'FortHomebaseNodeItemUtilities_IsSquadSlotUnseen::SquadId' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_IsSquadSlotUnseen, SquadSlot) == 0x000010, "Member 'FortHomebaseNodeItemUtilities_IsSquadSlotUnseen::SquadSlot' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemUtilities_IsSquadSlotUnseen, ReturnValue) == 0x000014, "Member 'FortHomebaseNodeItemUtilities_IsSquadSlotUnseen::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetLocalPlayerHasHeroBackpack
// 0x0001 (0x0001 - 0x0000)
struct FortHomebaseUIContext_GetLocalPlayerHasHeroBackpack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetLocalPlayerHasHeroBackpack) == 0x000001, "Wrong alignment on FortHomebaseUIContext_GetLocalPlayerHasHeroBackpack");
static_assert(sizeof(FortHomebaseUIContext_GetLocalPlayerHasHeroBackpack) == 0x000001, "Wrong size on FortHomebaseUIContext_GetLocalPlayerHasHeroBackpack");
static_assert(offsetof(FortHomebaseUIContext_GetLocalPlayerHasHeroBackpack, ReturnValue) == 0x000000, "Member 'FortHomebaseUIContext_GetLocalPlayerHasHeroBackpack::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetLocalPlayerHasHeroHeadAccessories
// 0x0001 (0x0001 - 0x0000)
struct FortHomebaseUIContext_GetLocalPlayerHasHeroHeadAccessories final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetLocalPlayerHasHeroHeadAccessories) == 0x000001, "Wrong alignment on FortHomebaseUIContext_GetLocalPlayerHasHeroHeadAccessories");
static_assert(sizeof(FortHomebaseUIContext_GetLocalPlayerHasHeroHeadAccessories) == 0x000001, "Wrong size on FortHomebaseUIContext_GetLocalPlayerHasHeroHeadAccessories");
static_assert(offsetof(FortHomebaseUIContext_GetLocalPlayerHasHeroHeadAccessories, ReturnValue) == 0x000000, "Member 'FortHomebaseUIContext_GetLocalPlayerHasHeroHeadAccessories::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetShowHeroBackpackForLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct FortHomebaseUIContext_GetShowHeroBackpackForLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetShowHeroBackpackForLocalPlayer) == 0x000001, "Wrong alignment on FortHomebaseUIContext_GetShowHeroBackpackForLocalPlayer");
static_assert(sizeof(FortHomebaseUIContext_GetShowHeroBackpackForLocalPlayer) == 0x000001, "Wrong size on FortHomebaseUIContext_GetShowHeroBackpackForLocalPlayer");
static_assert(offsetof(FortHomebaseUIContext_GetShowHeroBackpackForLocalPlayer, ReturnValue) == 0x000000, "Member 'FortHomebaseUIContext_GetShowHeroBackpackForLocalPlayer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetShowHeroHeadAccessoriesForLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct FortHomebaseUIContext_GetShowHeroHeadAccessoriesForLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetShowHeroHeadAccessoriesForLocalPlayer) == 0x000001, "Wrong alignment on FortHomebaseUIContext_GetShowHeroHeadAccessoriesForLocalPlayer");
static_assert(sizeof(FortHomebaseUIContext_GetShowHeroHeadAccessoriesForLocalPlayer) == 0x000001, "Wrong size on FortHomebaseUIContext_GetShowHeroHeadAccessoriesForLocalPlayer");
static_assert(offsetof(FortHomebaseUIContext_GetShowHeroHeadAccessoriesForLocalPlayer, ReturnValue) == 0x000000, "Member 'FortHomebaseUIContext_GetShowHeroHeadAccessoriesForLocalPlayer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.HandleDifferentHeroLoadoutActivated
// 0x0008 (0x0008 - 0x0000)
struct FortHomebaseUIContext_HandleDifferentHeroLoadoutActivated final
{
public:
	class UFortMcpProfileCampaign*                Profile;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_HandleDifferentHeroLoadoutActivated) == 0x000008, "Wrong alignment on FortHomebaseUIContext_HandleDifferentHeroLoadoutActivated");
static_assert(sizeof(FortHomebaseUIContext_HandleDifferentHeroLoadoutActivated) == 0x000008, "Wrong size on FortHomebaseUIContext_HandleDifferentHeroLoadoutActivated");
static_assert(offsetof(FortHomebaseUIContext_HandleDifferentHeroLoadoutActivated, Profile) == 0x000000, "Member 'FortHomebaseUIContext_HandleDifferentHeroLoadoutActivated::Profile' has a wrong offset!");

// DelegateFunction FortniteUI.FortHomebaseUIContext.OnDifferentHeroLoadoutSlotFocused__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortHomebaseUIContext_OnDifferentHeroLoadoutSlotFocused__DelegateSignature final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_OnDifferentHeroLoadoutSlotFocused__DelegateSignature) == 0x000004, "Wrong alignment on FortHomebaseUIContext_OnDifferentHeroLoadoutSlotFocused__DelegateSignature");
static_assert(sizeof(FortHomebaseUIContext_OnDifferentHeroLoadoutSlotFocused__DelegateSignature) == 0x000008, "Wrong size on FortHomebaseUIContext_OnDifferentHeroLoadoutSlotFocused__DelegateSignature");
static_assert(offsetof(FortHomebaseUIContext_OnDifferentHeroLoadoutSlotFocused__DelegateSignature, SlotName) == 0x000000, "Member 'FortHomebaseUIContext_OnDifferentHeroLoadoutSlotFocused__DelegateSignature::SlotName' has a wrong offset!");

// DelegateFunction FortniteUI.FortHomebaseUIContext.OnDifferentHeroLoadoutViewed__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FortHomebaseUIContext_OnDifferentHeroLoadoutViewed__DelegateSignature final
{
public:
	const class UFortCampaignHeroLoadoutItem*     PreviousLoadout;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortCampaignHeroLoadoutItem*     NewLoadout;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_OnDifferentHeroLoadoutViewed__DelegateSignature) == 0x000008, "Wrong alignment on FortHomebaseUIContext_OnDifferentHeroLoadoutViewed__DelegateSignature");
static_assert(sizeof(FortHomebaseUIContext_OnDifferentHeroLoadoutViewed__DelegateSignature) == 0x000010, "Wrong size on FortHomebaseUIContext_OnDifferentHeroLoadoutViewed__DelegateSignature");
static_assert(offsetof(FortHomebaseUIContext_OnDifferentHeroLoadoutViewed__DelegateSignature, PreviousLoadout) == 0x000000, "Member 'FortHomebaseUIContext_OnDifferentHeroLoadoutViewed__DelegateSignature::PreviousLoadout' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_OnDifferentHeroLoadoutViewed__DelegateSignature, NewLoadout) == 0x000008, "Member 'FortHomebaseUIContext_OnDifferentHeroLoadoutViewed__DelegateSignature::NewLoadout' has a wrong offset!");

// DelegateFunction FortniteUI.FortHomebaseUIContext.OnNodesPurchased__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortHomebaseUIContext_OnNodesPurchased__DelegateSignature final
{
public:
	class FName                                   NodeId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_OnNodesPurchased__DelegateSignature) == 0x000004, "Wrong alignment on FortHomebaseUIContext_OnNodesPurchased__DelegateSignature");
static_assert(sizeof(FortHomebaseUIContext_OnNodesPurchased__DelegateSignature) == 0x000008, "Wrong size on FortHomebaseUIContext_OnNodesPurchased__DelegateSignature");
static_assert(offsetof(FortHomebaseUIContext_OnNodesPurchased__DelegateSignature, NodeId) == 0x000000, "Member 'FortHomebaseUIContext_OnNodesPurchased__DelegateSignature::NodeId' has a wrong offset!");

// DelegateFunction FortniteUI.FortHomebaseUIContext.OnSquadSlotChanged__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct FortHomebaseUIContext_OnSquadSlotChanged__DelegateSignature final
{
public:
	class FName                                   SquadName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_OnSquadSlotChanged__DelegateSignature) == 0x000004, "Wrong alignment on FortHomebaseUIContext_OnSquadSlotChanged__DelegateSignature");
static_assert(sizeof(FortHomebaseUIContext_OnSquadSlotChanged__DelegateSignature) == 0x00000C, "Wrong size on FortHomebaseUIContext_OnSquadSlotChanged__DelegateSignature");
static_assert(offsetof(FortHomebaseUIContext_OnSquadSlotChanged__DelegateSignature, SquadName) == 0x000000, "Member 'FortHomebaseUIContext_OnSquadSlotChanged__DelegateSignature::SquadName' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_OnSquadSlotChanged__DelegateSignature, SlotIndex) == 0x000008, "Member 'FortHomebaseUIContext_OnSquadSlotChanged__DelegateSignature::SlotIndex' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.SetCurrentlyFocusedHeroLoadoutSlotName
// 0x0008 (0x0008 - 0x0000)
struct FortHomebaseUIContext_SetCurrentlyFocusedHeroLoadoutSlotName final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_SetCurrentlyFocusedHeroLoadoutSlotName) == 0x000004, "Wrong alignment on FortHomebaseUIContext_SetCurrentlyFocusedHeroLoadoutSlotName");
static_assert(sizeof(FortHomebaseUIContext_SetCurrentlyFocusedHeroLoadoutSlotName) == 0x000008, "Wrong size on FortHomebaseUIContext_SetCurrentlyFocusedHeroLoadoutSlotName");
static_assert(offsetof(FortHomebaseUIContext_SetCurrentlyFocusedHeroLoadoutSlotName, SlotName) == 0x000000, "Member 'FortHomebaseUIContext_SetCurrentlyFocusedHeroLoadoutSlotName::SlotName' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.SetCurrentlyViewedHeroLoadout
// 0x0008 (0x0008 - 0x0000)
struct FortHomebaseUIContext_SetCurrentlyViewedHeroLoadout final
{
public:
	const class UFortCampaignHeroLoadoutItem*     Loadout;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_SetCurrentlyViewedHeroLoadout) == 0x000008, "Wrong alignment on FortHomebaseUIContext_SetCurrentlyViewedHeroLoadout");
static_assert(sizeof(FortHomebaseUIContext_SetCurrentlyViewedHeroLoadout) == 0x000008, "Wrong size on FortHomebaseUIContext_SetCurrentlyViewedHeroLoadout");
static_assert(offsetof(FortHomebaseUIContext_SetCurrentlyViewedHeroLoadout, Loadout) == 0x000000, "Member 'FortHomebaseUIContext_SetCurrentlyViewedHeroLoadout::Loadout' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.SetShouldAutoSlotSurvivorSquads
// 0x0001 (0x0001 - 0x0000)
struct FortHomebaseUIContext_SetShouldAutoSlotSurvivorSquads final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_SetShouldAutoSlotSurvivorSquads) == 0x000001, "Wrong alignment on FortHomebaseUIContext_SetShouldAutoSlotSurvivorSquads");
static_assert(sizeof(FortHomebaseUIContext_SetShouldAutoSlotSurvivorSquads) == 0x000001, "Wrong size on FortHomebaseUIContext_SetShouldAutoSlotSurvivorSquads");
static_assert(offsetof(FortHomebaseUIContext_SetShouldAutoSlotSurvivorSquads, Value) == 0x000000, "Member 'FortHomebaseUIContext_SetShouldAutoSlotSurvivorSquads::Value' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.SetShowHeroBackpackForLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct FortHomebaseUIContext_SetShowHeroBackpackForLocalPlayer final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_SetShowHeroBackpackForLocalPlayer) == 0x000001, "Wrong alignment on FortHomebaseUIContext_SetShowHeroBackpackForLocalPlayer");
static_assert(sizeof(FortHomebaseUIContext_SetShowHeroBackpackForLocalPlayer) == 0x000001, "Wrong size on FortHomebaseUIContext_SetShowHeroBackpackForLocalPlayer");
static_assert(offsetof(FortHomebaseUIContext_SetShowHeroBackpackForLocalPlayer, bShow) == 0x000000, "Member 'FortHomebaseUIContext_SetShowHeroBackpackForLocalPlayer::bShow' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.SetShowHeroHeadAccessoriesForLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct FortHomebaseUIContext_SetShowHeroHeadAccessoriesForLocalPlayer final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_SetShowHeroHeadAccessoriesForLocalPlayer) == 0x000001, "Wrong alignment on FortHomebaseUIContext_SetShowHeroHeadAccessoriesForLocalPlayer");
static_assert(sizeof(FortHomebaseUIContext_SetShowHeroHeadAccessoriesForLocalPlayer) == 0x000001, "Wrong size on FortHomebaseUIContext_SetShowHeroHeadAccessoriesForLocalPlayer");
static_assert(offsetof(FortHomebaseUIContext_SetShowHeroHeadAccessoriesForLocalPlayer, bShow) == 0x000000, "Member 'FortHomebaseUIContext_SetShowHeroHeadAccessoriesForLocalPlayer::bShow' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetCollectionBookData
// 0x0008 (0x0008 - 0x0000)
struct FortHomebaseUIContext_GetCollectionBookData final
{
public:
	class UFortCollectionBookData*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetCollectionBookData) == 0x000008, "Wrong alignment on FortHomebaseUIContext_GetCollectionBookData");
static_assert(sizeof(FortHomebaseUIContext_GetCollectionBookData) == 0x000008, "Wrong size on FortHomebaseUIContext_GetCollectionBookData");
static_assert(offsetof(FortHomebaseUIContext_GetCollectionBookData, ReturnValue) == 0x000000, "Member 'FortHomebaseUIContext_GetCollectionBookData::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetCurrentlyFocusedHeroLoadoutSlotName
// 0x0008 (0x0008 - 0x0000)
struct FortHomebaseUIContext_GetCurrentlyFocusedHeroLoadoutSlotName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetCurrentlyFocusedHeroLoadoutSlotName) == 0x000004, "Wrong alignment on FortHomebaseUIContext_GetCurrentlyFocusedHeroLoadoutSlotName");
static_assert(sizeof(FortHomebaseUIContext_GetCurrentlyFocusedHeroLoadoutSlotName) == 0x000008, "Wrong size on FortHomebaseUIContext_GetCurrentlyFocusedHeroLoadoutSlotName");
static_assert(offsetof(FortHomebaseUIContext_GetCurrentlyFocusedHeroLoadoutSlotName, ReturnValue) == 0x000000, "Member 'FortHomebaseUIContext_GetCurrentlyFocusedHeroLoadoutSlotName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetCurrentlyViewedHeroLoadout
// 0x0008 (0x0008 - 0x0000)
struct FortHomebaseUIContext_GetCurrentlyViewedHeroLoadout final
{
public:
	class UFortCampaignHeroLoadoutItem*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetCurrentlyViewedHeroLoadout) == 0x000008, "Wrong alignment on FortHomebaseUIContext_GetCurrentlyViewedHeroLoadout");
static_assert(sizeof(FortHomebaseUIContext_GetCurrentlyViewedHeroLoadout) == 0x000008, "Wrong size on FortHomebaseUIContext_GetCurrentlyViewedHeroLoadout");
static_assert(offsetof(FortHomebaseUIContext_GetCurrentlyViewedHeroLoadout, ReturnValue) == 0x000000, "Member 'FortHomebaseUIContext_GetCurrentlyViewedHeroLoadout::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetItemInSquadSlot
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseUIContext_GetItemInSquadSlot final
{
public:
	class FName                                   SquadName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetItemInSquadSlot) == 0x000008, "Wrong alignment on FortHomebaseUIContext_GetItemInSquadSlot");
static_assert(sizeof(FortHomebaseUIContext_GetItemInSquadSlot) == 0x000018, "Wrong size on FortHomebaseUIContext_GetItemInSquadSlot");
static_assert(offsetof(FortHomebaseUIContext_GetItemInSquadSlot, SquadName) == 0x000000, "Member 'FortHomebaseUIContext_GetItemInSquadSlot::SquadName' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_GetItemInSquadSlot, SlotIndex) == 0x000008, "Member 'FortHomebaseUIContext_GetItemInSquadSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_GetItemInSquadSlot, ReturnValue) == 0x000010, "Member 'FortHomebaseUIContext_GetItemInSquadSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetItemsInSquad
// 0x0020 (0x0020 - 0x0000)
struct FortHomebaseUIContext_GetItemsInSquad final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveEmptySquadSlots;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetItemsInSquad) == 0x000008, "Wrong alignment on FortHomebaseUIContext_GetItemsInSquad");
static_assert(sizeof(FortHomebaseUIContext_GetItemsInSquad) == 0x000020, "Wrong size on FortHomebaseUIContext_GetItemsInSquad");
static_assert(offsetof(FortHomebaseUIContext_GetItemsInSquad, SquadId) == 0x000000, "Member 'FortHomebaseUIContext_GetItemsInSquad::SquadId' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_GetItemsInSquad, bRemoveEmptySquadSlots) == 0x000008, "Member 'FortHomebaseUIContext_GetItemsInSquad::bRemoveEmptySquadSlots' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_GetItemsInSquad, ReturnValue) == 0x000010, "Member 'FortHomebaseUIContext_GetItemsInSquad::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetShouldAutoSlotSurvivorSquads
// 0x0001 (0x0001 - 0x0000)
struct FortHomebaseUIContext_GetShouldAutoSlotSurvivorSquads final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetShouldAutoSlotSurvivorSquads) == 0x000001, "Wrong alignment on FortHomebaseUIContext_GetShouldAutoSlotSurvivorSquads");
static_assert(sizeof(FortHomebaseUIContext_GetShouldAutoSlotSurvivorSquads) == 0x000001, "Wrong size on FortHomebaseUIContext_GetShouldAutoSlotSurvivorSquads");
static_assert(offsetof(FortHomebaseUIContext_GetShouldAutoSlotSurvivorSquads, ReturnValue) == 0x000000, "Member 'FortHomebaseUIContext_GetShouldAutoSlotSurvivorSquads::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetSlottedPrimaryHero
// 0x0008 (0x0008 - 0x0000)
struct FortHomebaseUIContext_GetSlottedPrimaryHero final
{
public:
	class UFortHero*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetSlottedPrimaryHero) == 0x000008, "Wrong alignment on FortHomebaseUIContext_GetSlottedPrimaryHero");
static_assert(sizeof(FortHomebaseUIContext_GetSlottedPrimaryHero) == 0x000008, "Wrong size on FortHomebaseUIContext_GetSlottedPrimaryHero");
static_assert(offsetof(FortHomebaseUIContext_GetSlottedPrimaryHero, ReturnValue) == 0x000000, "Member 'FortHomebaseUIContext_GetSlottedPrimaryHero::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetSquadIcon
// 0x0338 (0x0338 - 0x0000)
struct FortHomebaseUIContext_GetSquadIcon final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    ReturnValue;                                       // 0x0008(0x0330)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetSquadIcon) == 0x000008, "Wrong alignment on FortHomebaseUIContext_GetSquadIcon");
static_assert(sizeof(FortHomebaseUIContext_GetSquadIcon) == 0x000338, "Wrong size on FortHomebaseUIContext_GetSquadIcon");
static_assert(offsetof(FortHomebaseUIContext_GetSquadIcon, SquadId) == 0x000000, "Member 'FortHomebaseUIContext_GetSquadIcon::SquadId' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_GetSquadIcon, ReturnValue) == 0x000008, "Member 'FortHomebaseUIContext_GetSquadIcon::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetUnlockedGadgets
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseUIContext_GetUnlockedGadgets final
{
public:
	TArray<class UFortItem*>                      UnlockedGadgets;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseUIContext_GetUnlockedGadgets) == 0x000008, "Wrong alignment on FortHomebaseUIContext_GetUnlockedGadgets");
static_assert(sizeof(FortHomebaseUIContext_GetUnlockedGadgets) == 0x000018, "Wrong size on FortHomebaseUIContext_GetUnlockedGadgets");
static_assert(offsetof(FortHomebaseUIContext_GetUnlockedGadgets, UnlockedGadgets) == 0x000000, "Member 'FortHomebaseUIContext_GetUnlockedGadgets::UnlockedGadgets' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_GetUnlockedGadgets, ReturnValue) == 0x000010, "Member 'FortHomebaseUIContext_GetUnlockedGadgets::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetUnlockingQuestDefinitionForHeroLoadoutSlot
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseUIContext_GetUnlockingQuestDefinitionForHeroLoadoutSlot final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortCampaignHeroLoadoutItem*     Loadout;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortQuestItemDefinition*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetUnlockingQuestDefinitionForHeroLoadoutSlot) == 0x000008, "Wrong alignment on FortHomebaseUIContext_GetUnlockingQuestDefinitionForHeroLoadoutSlot");
static_assert(sizeof(FortHomebaseUIContext_GetUnlockingQuestDefinitionForHeroLoadoutSlot) == 0x000018, "Wrong size on FortHomebaseUIContext_GetUnlockingQuestDefinitionForHeroLoadoutSlot");
static_assert(offsetof(FortHomebaseUIContext_GetUnlockingQuestDefinitionForHeroLoadoutSlot, SlotName) == 0x000000, "Member 'FortHomebaseUIContext_GetUnlockingQuestDefinitionForHeroLoadoutSlot::SlotName' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_GetUnlockingQuestDefinitionForHeroLoadoutSlot, Loadout) == 0x000008, "Member 'FortHomebaseUIContext_GetUnlockingQuestDefinitionForHeroLoadoutSlot::Loadout' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_GetUnlockingQuestDefinitionForHeroLoadoutSlot, ReturnValue) == 0x000010, "Member 'FortHomebaseUIContext_GetUnlockingQuestDefinitionForHeroLoadoutSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetUnlockingQuestDefinitionForSquadSlot
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseUIContext_GetUnlockingQuestDefinitionForSquadSlot final
{
public:
	class FName                                   SquadName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestItemDefinition*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetUnlockingQuestDefinitionForSquadSlot) == 0x000008, "Wrong alignment on FortHomebaseUIContext_GetUnlockingQuestDefinitionForSquadSlot");
static_assert(sizeof(FortHomebaseUIContext_GetUnlockingQuestDefinitionForSquadSlot) == 0x000018, "Wrong size on FortHomebaseUIContext_GetUnlockingQuestDefinitionForSquadSlot");
static_assert(offsetof(FortHomebaseUIContext_GetUnlockingQuestDefinitionForSquadSlot, SquadName) == 0x000000, "Member 'FortHomebaseUIContext_GetUnlockingQuestDefinitionForSquadSlot::SquadName' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_GetUnlockingQuestDefinitionForSquadSlot, SlotIndex) == 0x000008, "Member 'FortHomebaseUIContext_GetUnlockingQuestDefinitionForSquadSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_GetUnlockingQuestDefinitionForSquadSlot, ReturnValue) == 0x000010, "Member 'FortHomebaseUIContext_GetUnlockingQuestDefinitionForSquadSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.GetWorkerSetBonusEffectModifiers
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseUIContext_GetWorkerSetBonusEffectModifiers final
{
public:
	struct FGameplayTag                           SetBonusTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAttributeModifierDisplayData> OutModifiers;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseUIContext_GetWorkerSetBonusEffectModifiers) == 0x000008, "Wrong alignment on FortHomebaseUIContext_GetWorkerSetBonusEffectModifiers");
static_assert(sizeof(FortHomebaseUIContext_GetWorkerSetBonusEffectModifiers) == 0x000018, "Wrong size on FortHomebaseUIContext_GetWorkerSetBonusEffectModifiers");
static_assert(offsetof(FortHomebaseUIContext_GetWorkerSetBonusEffectModifiers, SetBonusTag) == 0x000000, "Member 'FortHomebaseUIContext_GetWorkerSetBonusEffectModifiers::SetBonusTag' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_GetWorkerSetBonusEffectModifiers, OutModifiers) == 0x000008, "Member 'FortHomebaseUIContext_GetWorkerSetBonusEffectModifiers::OutModifiers' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.IsAnySquadSlotUnlocked
// 0x000C (0x000C - 0x0000)
struct FortHomebaseUIContext_IsAnySquadSlotUnlocked final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseUIContext_IsAnySquadSlotUnlocked) == 0x000004, "Wrong alignment on FortHomebaseUIContext_IsAnySquadSlotUnlocked");
static_assert(sizeof(FortHomebaseUIContext_IsAnySquadSlotUnlocked) == 0x00000C, "Wrong size on FortHomebaseUIContext_IsAnySquadSlotUnlocked");
static_assert(offsetof(FortHomebaseUIContext_IsAnySquadSlotUnlocked, SquadId) == 0x000000, "Member 'FortHomebaseUIContext_IsAnySquadSlotUnlocked::SquadId' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_IsAnySquadSlotUnlocked, ReturnValue) == 0x000008, "Member 'FortHomebaseUIContext_IsAnySquadSlotUnlocked::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHomebaseUIContext.IsHeroLoadoutSlotUnlocked
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseUIContext_IsHeroLoadoutSlotUnlocked final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortCampaignHeroLoadoutItem*     Loadout;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseUIContext_IsHeroLoadoutSlotUnlocked) == 0x000008, "Wrong alignment on FortHomebaseUIContext_IsHeroLoadoutSlotUnlocked");
static_assert(sizeof(FortHomebaseUIContext_IsHeroLoadoutSlotUnlocked) == 0x000018, "Wrong size on FortHomebaseUIContext_IsHeroLoadoutSlotUnlocked");
static_assert(offsetof(FortHomebaseUIContext_IsHeroLoadoutSlotUnlocked, SlotName) == 0x000000, "Member 'FortHomebaseUIContext_IsHeroLoadoutSlotUnlocked::SlotName' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_IsHeroLoadoutSlotUnlocked, Loadout) == 0x000008, "Member 'FortHomebaseUIContext_IsHeroLoadoutSlotUnlocked::Loadout' has a wrong offset!");
static_assert(offsetof(FortHomebaseUIContext_IsHeroLoadoutSlotUnlocked, ReturnValue) == 0x000010, "Member 'FortHomebaseUIContext_IsHeroLoadoutSlotUnlocked::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortHUDCenterPopupMessageWidget.OnModalDisplayed
// 0x0010 (0x0010 - 0x0000)
struct FortHUDCenterPopupMessageWidget_OnModalDisplayed final
{
public:
	ECenterPopupMessageStateEnum                  NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonActivatablePanel*                ModalPopup;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDCenterPopupMessageWidget_OnModalDisplayed) == 0x000008, "Wrong alignment on FortHUDCenterPopupMessageWidget_OnModalDisplayed");
static_assert(sizeof(FortHUDCenterPopupMessageWidget_OnModalDisplayed) == 0x000010, "Wrong size on FortHUDCenterPopupMessageWidget_OnModalDisplayed");
static_assert(offsetof(FortHUDCenterPopupMessageWidget_OnModalDisplayed, NewState) == 0x000000, "Member 'FortHUDCenterPopupMessageWidget_OnModalDisplayed::NewState' has a wrong offset!");
static_assert(offsetof(FortHUDCenterPopupMessageWidget_OnModalDisplayed, ModalPopup) == 0x000008, "Member 'FortHUDCenterPopupMessageWidget_OnModalDisplayed::ModalPopup' has a wrong offset!");

// Function FortniteUI.FortHUDCenterPopupMessageWidget.GetCenterPopupMessageState
// 0x0001 (0x0001 - 0x0000)
struct FortHUDCenterPopupMessageWidget_GetCenterPopupMessageState final
{
public:
	ECenterPopupMessageStateEnum                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDCenterPopupMessageWidget_GetCenterPopupMessageState) == 0x000001, "Wrong alignment on FortHUDCenterPopupMessageWidget_GetCenterPopupMessageState");
static_assert(sizeof(FortHUDCenterPopupMessageWidget_GetCenterPopupMessageState) == 0x000001, "Wrong size on FortHUDCenterPopupMessageWidget_GetCenterPopupMessageState");
static_assert(offsetof(FortHUDCenterPopupMessageWidget_GetCenterPopupMessageState, ReturnValue) == 0x000000, "Member 'FortHUDCenterPopupMessageWidget_GetCenterPopupMessageState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreRootBase.OnAffiliateUpdated
// 0x0010 (0x0010 - 0x0000)
struct FortStoreRootBase_OnAffiliateUpdated final
{
public:
	class FString                                 AffiliateName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreRootBase_OnAffiliateUpdated) == 0x000008, "Wrong alignment on FortStoreRootBase_OnAffiliateUpdated");
static_assert(sizeof(FortStoreRootBase_OnAffiliateUpdated) == 0x000010, "Wrong size on FortStoreRootBase_OnAffiliateUpdated");
static_assert(offsetof(FortStoreRootBase_OnAffiliateUpdated, AffiliateName) == 0x000000, "Member 'FortStoreRootBase_OnAffiliateUpdated::AffiliateName' has a wrong offset!");

// Function FortniteUI.FortStoreRootBase.OnUpdateOtherPlatformMTXMessage
// 0x0020 (0x0020 - 0x0000)
struct FortStoreRootBase_OnUpdateOtherPlatformMTXMessage final
{
public:
	bool                                          HasOtherPlatformCurrency;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CurrencyMessageLocText;                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreRootBase_OnUpdateOtherPlatformMTXMessage) == 0x000008, "Wrong alignment on FortStoreRootBase_OnUpdateOtherPlatformMTXMessage");
static_assert(sizeof(FortStoreRootBase_OnUpdateOtherPlatformMTXMessage) == 0x000020, "Wrong size on FortStoreRootBase_OnUpdateOtherPlatformMTXMessage");
static_assert(offsetof(FortStoreRootBase_OnUpdateOtherPlatformMTXMessage, HasOtherPlatformCurrency) == 0x000000, "Member 'FortStoreRootBase_OnUpdateOtherPlatformMTXMessage::HasOtherPlatformCurrency' has a wrong offset!");
static_assert(offsetof(FortStoreRootBase_OnUpdateOtherPlatformMTXMessage, CurrencyMessageLocText) == 0x000008, "Member 'FortStoreRootBase_OnUpdateOtherPlatformMTXMessage::CurrencyMessageLocText' has a wrong offset!");

// Function FortniteUI.FortStoreRootBase.PopulatePrerollOffers
// 0x0010 (0x0010 - 0x0000)
struct FortStoreRootBase_PopulatePrerollOffers final
{
public:
	TDelegate<void(bool bSuccess)>                Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreRootBase_PopulatePrerollOffers) == 0x000004, "Wrong alignment on FortStoreRootBase_PopulatePrerollOffers");
static_assert(sizeof(FortStoreRootBase_PopulatePrerollOffers) == 0x000010, "Wrong size on FortStoreRootBase_PopulatePrerollOffers");
static_assert(offsetof(FortStoreRootBase_PopulatePrerollOffers, Callback) == 0x000000, "Member 'FortStoreRootBase_PopulatePrerollOffers::Callback' has a wrong offset!");

// Function FortniteUI.FortHUDPointCounter.OnPointTextSet
// 0x0001 (0x0001 - 0x0000)
struct FortHUDPointCounter_OnPointTextSet final
{
public:
	bool                                          bHasScore;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDPointCounter_OnPointTextSet) == 0x000001, "Wrong alignment on FortHUDPointCounter_OnPointTextSet");
static_assert(sizeof(FortHUDPointCounter_OnPointTextSet) == 0x000001, "Wrong size on FortHUDPointCounter_OnPointTextSet");
static_assert(offsetof(FortHUDPointCounter_OnPointTextSet, bHasScore) == 0x000000, "Member 'FortHUDPointCounter_OnPointTextSet::bHasScore' has a wrong offset!");

// Function FortniteUI.FortHUDTargetUnderReticleWidget.HandleOnHUDTargetUnderReticle
// 0x0010 (0x0010 - 0x0000)
struct FortHUDTargetUnderReticleWidget_HandleOnHUDTargetUnderReticle final
{
public:
	TScriptInterface<class IFortHUDTargetUnderReticleInterface> NewTarget;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDTargetUnderReticleWidget_HandleOnHUDTargetUnderReticle) == 0x000008, "Wrong alignment on FortHUDTargetUnderReticleWidget_HandleOnHUDTargetUnderReticle");
static_assert(sizeof(FortHUDTargetUnderReticleWidget_HandleOnHUDTargetUnderReticle) == 0x000010, "Wrong size on FortHUDTargetUnderReticleWidget_HandleOnHUDTargetUnderReticle");
static_assert(offsetof(FortHUDTargetUnderReticleWidget_HandleOnHUDTargetUnderReticle, NewTarget) == 0x000000, "Member 'FortHUDTargetUnderReticleWidget_HandleOnHUDTargetUnderReticle::NewTarget' has a wrong offset!");

// Function FortniteUI.FortHUDTargetUnderReticleWidget.OnTargetActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FortHUDTargetUnderReticleWidget_OnTargetActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDTargetUnderReticleWidget_OnTargetActorDestroyed) == 0x000008, "Wrong alignment on FortHUDTargetUnderReticleWidget_OnTargetActorDestroyed");
static_assert(sizeof(FortHUDTargetUnderReticleWidget_OnTargetActorDestroyed) == 0x000008, "Wrong size on FortHUDTargetUnderReticleWidget_OnTargetActorDestroyed");
static_assert(offsetof(FortHUDTargetUnderReticleWidget_OnTargetActorDestroyed, DestroyedActor) == 0x000000, "Member 'FortHUDTargetUnderReticleWidget_OnTargetActorDestroyed::DestroyedActor' has a wrong offset!");

// Function FortniteUI.FortHUDTargetUnderReticleWidget.Setup
// 0x0028 (0x0028 - 0x0000)
struct FortHUDTargetUnderReticleWidget_Setup final
{
public:
	bool                                          bInKeepTargetUntilNewValidTarget;                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InTargetRequiredTags;                              // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDTargetUnderReticleWidget_Setup) == 0x000008, "Wrong alignment on FortHUDTargetUnderReticleWidget_Setup");
static_assert(sizeof(FortHUDTargetUnderReticleWidget_Setup) == 0x000028, "Wrong size on FortHUDTargetUnderReticleWidget_Setup");
static_assert(offsetof(FortHUDTargetUnderReticleWidget_Setup, bInKeepTargetUntilNewValidTarget) == 0x000000, "Member 'FortHUDTargetUnderReticleWidget_Setup::bInKeepTargetUntilNewValidTarget' has a wrong offset!");
static_assert(offsetof(FortHUDTargetUnderReticleWidget_Setup, InTargetRequiredTags) == 0x000008, "Member 'FortHUDTargetUnderReticleWidget_Setup::InTargetRequiredTags' has a wrong offset!");

// Function FortniteUI.FortInfoWindow.GetListWidget
// 0x0010 (0x0010 - 0x0000)
struct FortInfoWindow_GetListWidget final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInfoWindow_GetListWidget) == 0x000008, "Wrong alignment on FortInfoWindow_GetListWidget");
static_assert(sizeof(FortInfoWindow_GetListWidget) == 0x000010, "Wrong size on FortInfoWindow_GetListWidget");
static_assert(offsetof(FortInfoWindow_GetListWidget, Item) == 0x000000, "Member 'FortInfoWindow_GetListWidget::Item' has a wrong offset!");
static_assert(offsetof(FortInfoWindow_GetListWidget, ReturnValue) == 0x000008, "Member 'FortInfoWindow_GetListWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.AreAnyItemsAnimate
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_AreAnyItemsAnimate final
{
public:
	TArray<class UFortItem*>                      Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_AreAnyItemsAnimate) == 0x000008, "Wrong alignment on FortInventoryContext_AreAnyItemsAnimate");
static_assert(sizeof(FortInventoryContext_AreAnyItemsAnimate) == 0x000018, "Wrong size on FortInventoryContext_AreAnyItemsAnimate");
static_assert(offsetof(FortInventoryContext_AreAnyItemsAnimate, Items) == 0x000000, "Member 'FortInventoryContext_AreAnyItemsAnimate::Items' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_AreAnyItemsAnimate, ReturnValue) == 0x000010, "Member 'FortInventoryContext_AreAnyItemsAnimate::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.AreAnyItemsInanimate
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_AreAnyItemsInanimate final
{
public:
	TArray<class UFortItem*>                      Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_AreAnyItemsInanimate) == 0x000008, "Wrong alignment on FortInventoryContext_AreAnyItemsInanimate");
static_assert(sizeof(FortInventoryContext_AreAnyItemsInanimate) == 0x000018, "Wrong size on FortInventoryContext_AreAnyItemsInanimate");
static_assert(offsetof(FortInventoryContext_AreAnyItemsInanimate, Items) == 0x000000, "Member 'FortInventoryContext_AreAnyItemsInanimate::Items' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_AreAnyItemsInanimate, ReturnValue) == 0x000010, "Member 'FortInventoryContext_AreAnyItemsInanimate::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetDisassembleRestrictionReasonText
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_GetDisassembleRestrictionReasonText final
{
public:
	EItemDisassembleRestrictionReason             Reason;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetDisassembleRestrictionReasonText) == 0x000008, "Wrong alignment on FortInventoryContext_GetDisassembleRestrictionReasonText");
static_assert(sizeof(FortInventoryContext_GetDisassembleRestrictionReasonText) == 0x000020, "Wrong size on FortInventoryContext_GetDisassembleRestrictionReasonText");
static_assert(offsetof(FortInventoryContext_GetDisassembleRestrictionReasonText, Reason) == 0x000000, "Member 'FortInventoryContext_GetDisassembleRestrictionReasonText::Reason' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetDisassembleRestrictionReasonText, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetDisassembleRestrictionReasonText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetEvolveRestrictionReasonText
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_GetEvolveRestrictionReasonText final
{
public:
	EItemEvolutionRestrictionReason               Reason;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetEvolveRestrictionReasonText) == 0x000008, "Wrong alignment on FortInventoryContext_GetEvolveRestrictionReasonText");
static_assert(sizeof(FortInventoryContext_GetEvolveRestrictionReasonText) == 0x000020, "Wrong size on FortInventoryContext_GetEvolveRestrictionReasonText");
static_assert(offsetof(FortInventoryContext_GetEvolveRestrictionReasonText, Reason) == 0x000000, "Member 'FortInventoryContext_GetEvolveRestrictionReasonText::Reason' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetEvolveRestrictionReasonText, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetEvolveRestrictionReasonText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetItemLevelRecyclingWarningThreshold
// 0x0004 (0x0004 - 0x0000)
struct FortInventoryContext_GetItemLevelRecyclingWarningThreshold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetItemLevelRecyclingWarningThreshold) == 0x000004, "Wrong alignment on FortInventoryContext_GetItemLevelRecyclingWarningThreshold");
static_assert(sizeof(FortInventoryContext_GetItemLevelRecyclingWarningThreshold) == 0x000004, "Wrong size on FortInventoryContext_GetItemLevelRecyclingWarningThreshold");
static_assert(offsetof(FortInventoryContext_GetItemLevelRecyclingWarningThreshold, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetItemLevelRecyclingWarningThreshold::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetItemRarityRecyclingWarningThreshold
// 0x0001 (0x0001 - 0x0000)
struct FortInventoryContext_GetItemRarityRecyclingWarningThreshold final
{
public:
	EFortRarity                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetItemRarityRecyclingWarningThreshold) == 0x000001, "Wrong alignment on FortInventoryContext_GetItemRarityRecyclingWarningThreshold");
static_assert(sizeof(FortInventoryContext_GetItemRarityRecyclingWarningThreshold) == 0x000001, "Wrong size on FortInventoryContext_GetItemRarityRecyclingWarningThreshold");
static_assert(offsetof(FortInventoryContext_GetItemRarityRecyclingWarningThreshold, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetItemRarityRecyclingWarningThreshold::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetItemTierRecyclingWarningThreshold
// 0x0001 (0x0001 - 0x0000)
struct FortInventoryContext_GetItemTierRecyclingWarningThreshold final
{
public:
	EFortItemTier                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetItemTierRecyclingWarningThreshold) == 0x000001, "Wrong alignment on FortInventoryContext_GetItemTierRecyclingWarningThreshold");
static_assert(sizeof(FortInventoryContext_GetItemTierRecyclingWarningThreshold) == 0x000001, "Wrong size on FortInventoryContext_GetItemTierRecyclingWarningThreshold");
static_assert(offsetof(FortInventoryContext_GetItemTierRecyclingWarningThreshold, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetItemTierRecyclingWarningThreshold::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetRecycleRestrictionReasonText
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_GetRecycleRestrictionReasonText final
{
public:
	EItemRecyclingRestrictionReason               Reason;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetRecycleRestrictionReasonText) == 0x000008, "Wrong alignment on FortInventoryContext_GetRecycleRestrictionReasonText");
static_assert(sizeof(FortInventoryContext_GetRecycleRestrictionReasonText) == 0x000020, "Wrong size on FortInventoryContext_GetRecycleRestrictionReasonText");
static_assert(offsetof(FortInventoryContext_GetRecycleRestrictionReasonText, Reason) == 0x000000, "Member 'FortInventoryContext_GetRecycleRestrictionReasonText::Reason' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetRecycleRestrictionReasonText, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetRecycleRestrictionReasonText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetRecyclingCatalystDisplayName
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_GetRecyclingCatalystDisplayName final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetRecyclingCatalystDisplayName) == 0x000008, "Wrong alignment on FortInventoryContext_GetRecyclingCatalystDisplayName");
static_assert(sizeof(FortInventoryContext_GetRecyclingCatalystDisplayName) == 0x000020, "Wrong size on FortInventoryContext_GetRecyclingCatalystDisplayName");
static_assert(offsetof(FortInventoryContext_GetRecyclingCatalystDisplayName, Item) == 0x000000, "Member 'FortInventoryContext_GetRecyclingCatalystDisplayName::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetRecyclingCatalystDisplayName, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetRecyclingCatalystDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetRecyclingWarningText
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_GetRecyclingWarningText final
{
public:
	EItemRecyclingWarning                         Warning;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WereAnyItemsAnimate;                               // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetRecyclingWarningText) == 0x000008, "Wrong alignment on FortInventoryContext_GetRecyclingWarningText");
static_assert(sizeof(FortInventoryContext_GetRecyclingWarningText) == 0x000020, "Wrong size on FortInventoryContext_GetRecyclingWarningText");
static_assert(offsetof(FortInventoryContext_GetRecyclingWarningText, Warning) == 0x000000, "Member 'FortInventoryContext_GetRecyclingWarningText::Warning' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetRecyclingWarningText, WereAnyItemsAnimate) == 0x000001, "Member 'FortInventoryContext_GetRecyclingWarningText::WereAnyItemsAnimate' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetRecyclingWarningText, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetRecyclingWarningText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetShorthandItemStackCount
// 0x0028 (0x0028 - 0x0000)
struct FortInventoryContext_GetShorthandItemStackCount final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiniumFractionalDigits;                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumFractionalDigits;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetShorthandItemStackCount) == 0x000008, "Wrong alignment on FortInventoryContext_GetShorthandItemStackCount");
static_assert(sizeof(FortInventoryContext_GetShorthandItemStackCount) == 0x000028, "Wrong size on FortInventoryContext_GetShorthandItemStackCount");
static_assert(offsetof(FortInventoryContext_GetShorthandItemStackCount, Quantity) == 0x000000, "Member 'FortInventoryContext_GetShorthandItemStackCount::Quantity' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetShorthandItemStackCount, MiniumFractionalDigits) == 0x000004, "Member 'FortInventoryContext_GetShorthandItemStackCount::MiniumFractionalDigits' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetShorthandItemStackCount, MaximumFractionalDigits) == 0x000008, "Member 'FortInventoryContext_GetShorthandItemStackCount::MaximumFractionalDigits' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetShorthandItemStackCount, ReturnValue) == 0x000010, "Member 'FortInventoryContext_GetShorthandItemStackCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetTierText
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_GetTierText final
{
public:
	EFortItemTier                                 Tier;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetTierText) == 0x000008, "Wrong alignment on FortInventoryContext_GetTierText");
static_assert(sizeof(FortInventoryContext_GetTierText) == 0x000020, "Wrong size on FortInventoryContext_GetTierText");
static_assert(offsetof(FortInventoryContext_GetTierText, Tier) == 0x000000, "Member 'FortInventoryContext_GetTierText::Tier' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetTierText, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetTierText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetUserFriendlyTags
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_GetUserFriendlyTags final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetUserFriendlyTags) == 0x000008, "Wrong alignment on FortInventoryContext_GetUserFriendlyTags");
static_assert(sizeof(FortInventoryContext_GetUserFriendlyTags) == 0x000018, "Wrong size on FortInventoryContext_GetUserFriendlyTags");
static_assert(offsetof(FortInventoryContext_GetUserFriendlyTags, Item) == 0x000000, "Member 'FortInventoryContext_GetUserFriendlyTags::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetUserFriendlyTags, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetUserFriendlyTags::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.MakeItemQuantityPair
// 0x0050 (0x0050 - 0x0000)
struct FortInventoryContext_MakeItemQuantityPair final
{
public:
	const class UFortItemDefinition*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemQuantity;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortItemQuantityPair                  ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_MakeItemQuantityPair) == 0x000008, "Wrong alignment on FortInventoryContext_MakeItemQuantityPair");
static_assert(sizeof(FortInventoryContext_MakeItemQuantityPair) == 0x000050, "Wrong size on FortInventoryContext_MakeItemQuantityPair");
static_assert(offsetof(FortInventoryContext_MakeItemQuantityPair, ItemDefinition) == 0x000000, "Member 'FortInventoryContext_MakeItemQuantityPair::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_MakeItemQuantityPair, ItemQuantity) == 0x000008, "Member 'FortInventoryContext_MakeItemQuantityPair::ItemQuantity' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_MakeItemQuantityPair, ReturnValue) == 0x000010, "Member 'FortInventoryContext_MakeItemQuantityPair::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.ActivateItem
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_ActivateItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_ActivateItem) == 0x000008, "Wrong alignment on FortInventoryContext_ActivateItem");
static_assert(sizeof(FortInventoryContext_ActivateItem) == 0x000010, "Wrong size on FortInventoryContext_ActivateItem");
static_assert(offsetof(FortInventoryContext_ActivateItem, Item) == 0x000000, "Member 'FortInventoryContext_ActivateItem::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_ActivateItem, ReturnValue) == 0x000008, "Member 'FortInventoryContext_ActivateItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.CanSwapItem
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_CanSwapItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuickBars                                TargetQuickbar;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetSlot;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_CanSwapItem) == 0x000008, "Wrong alignment on FortInventoryContext_CanSwapItem");
static_assert(sizeof(FortInventoryContext_CanSwapItem) == 0x000018, "Wrong size on FortInventoryContext_CanSwapItem");
static_assert(offsetof(FortInventoryContext_CanSwapItem, Item) == 0x000000, "Member 'FortInventoryContext_CanSwapItem::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanSwapItem, TargetQuickbar) == 0x000008, "Member 'FortInventoryContext_CanSwapItem::TargetQuickbar' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanSwapItem, TargetSlot) == 0x00000C, "Member 'FortInventoryContext_CanSwapItem::TargetSlot' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanSwapItem, ReturnValue) == 0x000010, "Member 'FortInventoryContext_CanSwapItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.CanUpgradeItemRarity
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_CanUpgradeItemRarity final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EItemEvolutionRestrictionReason>       OutRestrictionReasons;                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_CanUpgradeItemRarity) == 0x000008, "Wrong alignment on FortInventoryContext_CanUpgradeItemRarity");
static_assert(sizeof(FortInventoryContext_CanUpgradeItemRarity) == 0x000020, "Wrong size on FortInventoryContext_CanUpgradeItemRarity");
static_assert(offsetof(FortInventoryContext_CanUpgradeItemRarity, Item) == 0x000000, "Member 'FortInventoryContext_CanUpgradeItemRarity::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanUpgradeItemRarity, OutRestrictionReasons) == 0x000008, "Member 'FortInventoryContext_CanUpgradeItemRarity::OutRestrictionReasons' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanUpgradeItemRarity, ReturnValue) == 0x000018, "Member 'FortInventoryContext_CanUpgradeItemRarity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.CraftAndSlotSchematic
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_CraftAndSlotSchematic final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostCraftSlot;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCraftFailCause                           FailCause;                                         // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 RequestedTier;                                     // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftCount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_CraftAndSlotSchematic) == 0x000008, "Wrong alignment on FortInventoryContext_CraftAndSlotSchematic");
static_assert(sizeof(FortInventoryContext_CraftAndSlotSchematic) == 0x000018, "Wrong size on FortInventoryContext_CraftAndSlotSchematic");
static_assert(offsetof(FortInventoryContext_CraftAndSlotSchematic, SchematicItem) == 0x000000, "Member 'FortInventoryContext_CraftAndSlotSchematic::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CraftAndSlotSchematic, PostCraftSlot) == 0x000008, "Member 'FortInventoryContext_CraftAndSlotSchematic::PostCraftSlot' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CraftAndSlotSchematic, FailCause) == 0x00000C, "Member 'FortInventoryContext_CraftAndSlotSchematic::FailCause' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CraftAndSlotSchematic, RequestedTier) == 0x00000D, "Member 'FortInventoryContext_CraftAndSlotSchematic::RequestedTier' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CraftAndSlotSchematic, CraftCount) == 0x000010, "Member 'FortInventoryContext_CraftAndSlotSchematic::CraftCount' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CraftAndSlotSchematic, ReturnValue) == 0x000014, "Member 'FortInventoryContext_CraftAndSlotSchematic::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.CraftSchematic
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_CraftSchematic final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCraftFailCause                           FailCause;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 RequestedTier;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_CraftSchematic) == 0x000008, "Wrong alignment on FortInventoryContext_CraftSchematic");
static_assert(sizeof(FortInventoryContext_CraftSchematic) == 0x000018, "Wrong size on FortInventoryContext_CraftSchematic");
static_assert(offsetof(FortInventoryContext_CraftSchematic, SchematicItem) == 0x000000, "Member 'FortInventoryContext_CraftSchematic::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CraftSchematic, FailCause) == 0x000008, "Member 'FortInventoryContext_CraftSchematic::FailCause' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CraftSchematic, RequestedTier) == 0x000009, "Member 'FortInventoryContext_CraftSchematic::RequestedTier' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CraftSchematic, CraftCount) == 0x00000C, "Member 'FortInventoryContext_CraftSchematic::CraftCount' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CraftSchematic, ReturnValue) == 0x000010, "Member 'FortInventoryContext_CraftSchematic::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.DestroyWorldItem
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_DestroyWorldItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_DestroyWorldItem) == 0x000008, "Wrong alignment on FortInventoryContext_DestroyWorldItem");
static_assert(sizeof(FortInventoryContext_DestroyWorldItem) == 0x000008, "Wrong size on FortInventoryContext_DestroyWorldItem");
static_assert(offsetof(FortInventoryContext_DestroyWorldItem, Item) == 0x000000, "Member 'FortInventoryContext_DestroyWorldItem::Item' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.DropItem
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_DropItem final
{
public:
	const class UFortWorldItem*                   ItemBeingDropped;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_DropItem) == 0x000008, "Wrong alignment on FortInventoryContext_DropItem");
static_assert(sizeof(FortInventoryContext_DropItem) == 0x000010, "Wrong size on FortInventoryContext_DropItem");
static_assert(offsetof(FortInventoryContext_DropItem, ItemBeingDropped) == 0x000000, "Member 'FortInventoryContext_DropItem::ItemBeingDropped' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_DropItem, Quantity) == 0x000008, "Member 'FortInventoryContext_DropItem::Quantity' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.DropItemOnQuickBar
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_DropItemOnQuickBar final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuickBars                                TargetQuickbar;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetSlot;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_DropItemOnQuickBar) == 0x000008, "Wrong alignment on FortInventoryContext_DropItemOnQuickBar");
static_assert(sizeof(FortInventoryContext_DropItemOnQuickBar) == 0x000018, "Wrong size on FortInventoryContext_DropItemOnQuickBar");
static_assert(offsetof(FortInventoryContext_DropItemOnQuickBar, Item) == 0x000000, "Member 'FortInventoryContext_DropItemOnQuickBar::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_DropItemOnQuickBar, TargetQuickbar) == 0x000008, "Member 'FortInventoryContext_DropItemOnQuickBar::TargetQuickbar' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_DropItemOnQuickBar, TargetSlot) == 0x00000C, "Member 'FortInventoryContext_DropItemOnQuickBar::TargetSlot' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_DropItemOnQuickBar, ReturnValue) == 0x000010, "Member 'FortInventoryContext_DropItemOnQuickBar::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.EnumerateRecyclingWarningsForItems
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_EnumerateRecyclingWarningsForItems final
{
public:
	TArray<class UFortItem*>                      Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EItemRecyclingWarning>                 OutWarnings;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_EnumerateRecyclingWarningsForItems) == 0x000008, "Wrong alignment on FortInventoryContext_EnumerateRecyclingWarningsForItems");
static_assert(sizeof(FortInventoryContext_EnumerateRecyclingWarningsForItems) == 0x000020, "Wrong size on FortInventoryContext_EnumerateRecyclingWarningsForItems");
static_assert(offsetof(FortInventoryContext_EnumerateRecyclingWarningsForItems, Items) == 0x000000, "Member 'FortInventoryContext_EnumerateRecyclingWarningsForItems::Items' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_EnumerateRecyclingWarningsForItems, OutWarnings) == 0x000010, "Member 'FortInventoryContext_EnumerateRecyclingWarningsForItems::OutWarnings' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.EquipItem
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_EquipItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_EquipItem) == 0x000008, "Wrong alignment on FortInventoryContext_EquipItem");
static_assert(sizeof(FortInventoryContext_EquipItem) == 0x000008, "Wrong size on FortInventoryContext_EquipItem");
static_assert(offsetof(FortInventoryContext_EquipItem, Item) == 0x000000, "Member 'FortInventoryContext_EquipItem::Item' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetConversionRecipesFromItemDefintion
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_GetConversionRecipesFromItemDefintion final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRecipe>                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetConversionRecipesFromItemDefintion) == 0x000008, "Wrong alignment on FortInventoryContext_GetConversionRecipesFromItemDefintion");
static_assert(sizeof(FortInventoryContext_GetConversionRecipesFromItemDefintion) == 0x000018, "Wrong size on FortInventoryContext_GetConversionRecipesFromItemDefintion");
static_assert(offsetof(FortInventoryContext_GetConversionRecipesFromItemDefintion, ItemDefinition) == 0x000000, "Member 'FortInventoryContext_GetConversionRecipesFromItemDefintion::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetConversionRecipesFromItemDefintion, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetConversionRecipesFromItemDefintion::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetGameplayTagByIndex
// 0x0030 (0x0030 - 0x0000)
struct FortInventoryContext_GetGameplayTagByIndex final
{
public:
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Result;                                            // 0x0024(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_GetGameplayTagByIndex) == 0x000008, "Wrong alignment on FortInventoryContext_GetGameplayTagByIndex");
static_assert(sizeof(FortInventoryContext_GetGameplayTagByIndex) == 0x000030, "Wrong size on FortInventoryContext_GetGameplayTagByIndex");
static_assert(offsetof(FortInventoryContext_GetGameplayTagByIndex, GameplayTagContainer) == 0x000000, "Member 'FortInventoryContext_GetGameplayTagByIndex::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetGameplayTagByIndex, Param_Index) == 0x000020, "Member 'FortInventoryContext_GetGameplayTagByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetGameplayTagByIndex, Result) == 0x000024, "Member 'FortInventoryContext_GetGameplayTagByIndex::Result' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetGameplayTagByIndex, ReturnValue) == 0x00002C, "Member 'FortInventoryContext_GetGameplayTagByIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetTransformKeys
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_GetTransformKeys final
{
public:
	EConversionControlKeyRequest                  RequestType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryContentSortType                     SortType;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAccountItem*>               TransformKeys;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetTransformKeys) == 0x000008, "Wrong alignment on FortInventoryContext_GetTransformKeys");
static_assert(sizeof(FortInventoryContext_GetTransformKeys) == 0x000018, "Wrong size on FortInventoryContext_GetTransformKeys");
static_assert(offsetof(FortInventoryContext_GetTransformKeys, RequestType) == 0x000000, "Member 'FortInventoryContext_GetTransformKeys::RequestType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetTransformKeys, SortType) == 0x000001, "Member 'FortInventoryContext_GetTransformKeys::SortType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetTransformKeys, TransformKeys) == 0x000008, "Member 'FortInventoryContext_GetTransformKeys::TransformKeys' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetUnseenTransformKeys
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_GetUnseenTransformKeys final
{
public:
	EConversionControlKeyRequest                  RequestType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryContentSortType                     SortType;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAccountItem*>               TransformKeys;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetUnseenTransformKeys) == 0x000008, "Wrong alignment on FortInventoryContext_GetUnseenTransformKeys");
static_assert(sizeof(FortInventoryContext_GetUnseenTransformKeys) == 0x000018, "Wrong size on FortInventoryContext_GetUnseenTransformKeys");
static_assert(offsetof(FortInventoryContext_GetUnseenTransformKeys, RequestType) == 0x000000, "Member 'FortInventoryContext_GetUnseenTransformKeys::RequestType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetUnseenTransformKeys, SortType) == 0x000001, "Member 'FortInventoryContext_GetUnseenTransformKeys::SortType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetUnseenTransformKeys, TransformKeys) == 0x000008, "Member 'FortInventoryContext_GetUnseenTransformKeys::TransformKeys' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetUpgradeItemRarityRecipeFromItemDefintion
// 0x0060 (0x0060 - 0x0000)
struct FortInventoryContext_GetUpgradeItemRarityRecipeFromItemDefintion final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRecipe                                ReturnValue;                                       // 0x0008(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetUpgradeItemRarityRecipeFromItemDefintion) == 0x000008, "Wrong alignment on FortInventoryContext_GetUpgradeItemRarityRecipeFromItemDefintion");
static_assert(sizeof(FortInventoryContext_GetUpgradeItemRarityRecipeFromItemDefintion) == 0x000060, "Wrong size on FortInventoryContext_GetUpgradeItemRarityRecipeFromItemDefintion");
static_assert(offsetof(FortInventoryContext_GetUpgradeItemRarityRecipeFromItemDefintion, ItemDefinition) == 0x000000, "Member 'FortInventoryContext_GetUpgradeItemRarityRecipeFromItemDefintion::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetUpgradeItemRarityRecipeFromItemDefintion, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetUpgradeItemRarityRecipeFromItemDefintion::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.HasRecyclingWarnings
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_HasRecyclingWarnings final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_HasRecyclingWarnings) == 0x000008, "Wrong alignment on FortInventoryContext_HasRecyclingWarnings");
static_assert(sizeof(FortInventoryContext_HasRecyclingWarnings) == 0x000010, "Wrong size on FortInventoryContext_HasRecyclingWarnings");
static_assert(offsetof(FortInventoryContext_HasRecyclingWarnings, Item) == 0x000000, "Member 'FortInventoryContext_HasRecyclingWarnings::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_HasRecyclingWarnings, ReturnValue) == 0x000008, "Member 'FortInventoryContext_HasRecyclingWarnings::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteUI.FortInventoryContext.OnInventoryFiltersWithUnseenItemsChanged__DelegateSignature
// 0x0050 (0x0050 - 0x0000)
struct FortInventoryContext_OnInventoryFiltersWithUnseenItemsChanged__DelegateSignature final
{
public:
	TSet<EFortFrontendInventoryFilter>            AffectedInventoryFilters;                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_OnInventoryFiltersWithUnseenItemsChanged__DelegateSignature) == 0x000008, "Wrong alignment on FortInventoryContext_OnInventoryFiltersWithUnseenItemsChanged__DelegateSignature");
static_assert(sizeof(FortInventoryContext_OnInventoryFiltersWithUnseenItemsChanged__DelegateSignature) == 0x000050, "Wrong size on FortInventoryContext_OnInventoryFiltersWithUnseenItemsChanged__DelegateSignature");
static_assert(offsetof(FortInventoryContext_OnInventoryFiltersWithUnseenItemsChanged__DelegateSignature, AffectedInventoryFilters) == 0x000000, "Member 'FortInventoryContext_OnInventoryFiltersWithUnseenItemsChanged__DelegateSignature::AffectedInventoryFilters' has a wrong offset!");

// DelegateFunction FortniteUI.FortInventoryContext.OnItemTypesWithUnseenItemsChanged__DelegateSignature
// 0x0050 (0x0050 - 0x0000)
struct FortInventoryContext_OnItemTypesWithUnseenItemsChanged__DelegateSignature final
{
public:
	TSet<EFortItemType>                           AffectedItemTypes;                                 // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_OnItemTypesWithUnseenItemsChanged__DelegateSignature) == 0x000008, "Wrong alignment on FortInventoryContext_OnItemTypesWithUnseenItemsChanged__DelegateSignature");
static_assert(sizeof(FortInventoryContext_OnItemTypesWithUnseenItemsChanged__DelegateSignature) == 0x000050, "Wrong size on FortInventoryContext_OnItemTypesWithUnseenItemsChanged__DelegateSignature");
static_assert(offsetof(FortInventoryContext_OnItemTypesWithUnseenItemsChanged__DelegateSignature, AffectedItemTypes) == 0x000000, "Member 'FortInventoryContext_OnItemTypesWithUnseenItemsChanged__DelegateSignature::AffectedItemTypes' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.RemoveItemFromQuickBar
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_RemoveItemFromQuickBar final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_RemoveItemFromQuickBar) == 0x000008, "Wrong alignment on FortInventoryContext_RemoveItemFromQuickBar");
static_assert(sizeof(FortInventoryContext_RemoveItemFromQuickBar) == 0x000010, "Wrong size on FortInventoryContext_RemoveItemFromQuickBar");
static_assert(offsetof(FortInventoryContext_RemoveItemFromQuickBar, Item) == 0x000000, "Member 'FortInventoryContext_RemoveItemFromQuickBar::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_RemoveItemFromQuickBar, ReturnValue) == 0x000008, "Member 'FortInventoryContext_RemoveItemFromQuickBar::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.SetSchematicPinned
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_SetSchematicPinned final
{
public:
	class UFortSchematicItem*                     Schematic;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_SetSchematicPinned) == 0x000008, "Wrong alignment on FortInventoryContext_SetSchematicPinned");
static_assert(sizeof(FortInventoryContext_SetSchematicPinned) == 0x000010, "Wrong size on FortInventoryContext_SetSchematicPinned");
static_assert(offsetof(FortInventoryContext_SetSchematicPinned, Schematic) == 0x000000, "Member 'FortInventoryContext_SetSchematicPinned::Schematic' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_SetSchematicPinned, bEnabled) == 0x000008, "Member 'FortInventoryContext_SetSchematicPinned::bEnabled' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_SetSchematicPinned, ReturnValue) == 0x000009, "Member 'FortInventoryContext_SetSchematicPinned::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.UnlockSchematic
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_UnlockSchematic final
{
public:
	class UFortSchematicItemDefinition*           SchematicDefinition;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_UnlockSchematic) == 0x000008, "Wrong alignment on FortInventoryContext_UnlockSchematic");
static_assert(sizeof(FortInventoryContext_UnlockSchematic) == 0x000008, "Wrong size on FortInventoryContext_UnlockSchematic");
static_assert(offsetof(FortInventoryContext_UnlockSchematic, SchematicDefinition) == 0x000000, "Member 'FortInventoryContext_UnlockSchematic::SchematicDefinition' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.AreAnyItemsUnseenForInventoryFilter
// 0x0002 (0x0002 - 0x0000)
struct FortInventoryContext_AreAnyItemsUnseenForInventoryFilter final
{
public:
	EFortFrontendInventoryFilter                  InventoryFilter;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_AreAnyItemsUnseenForInventoryFilter) == 0x000001, "Wrong alignment on FortInventoryContext_AreAnyItemsUnseenForInventoryFilter");
static_assert(sizeof(FortInventoryContext_AreAnyItemsUnseenForInventoryFilter) == 0x000002, "Wrong size on FortInventoryContext_AreAnyItemsUnseenForInventoryFilter");
static_assert(offsetof(FortInventoryContext_AreAnyItemsUnseenForInventoryFilter, InventoryFilter) == 0x000000, "Member 'FortInventoryContext_AreAnyItemsUnseenForInventoryFilter::InventoryFilter' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_AreAnyItemsUnseenForInventoryFilter, ReturnValue) == 0x000001, "Member 'FortInventoryContext_AreAnyItemsUnseenForInventoryFilter::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.AreAnyItemsUnseenForItemType
// 0x0002 (0x0002 - 0x0000)
struct FortInventoryContext_AreAnyItemsUnseenForItemType final
{
public:
	EFortItemType                                 ItemType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_AreAnyItemsUnseenForItemType) == 0x000001, "Wrong alignment on FortInventoryContext_AreAnyItemsUnseenForItemType");
static_assert(sizeof(FortInventoryContext_AreAnyItemsUnseenForItemType) == 0x000002, "Wrong size on FortInventoryContext_AreAnyItemsUnseenForItemType");
static_assert(offsetof(FortInventoryContext_AreAnyItemsUnseenForItemType, ItemType) == 0x000000, "Member 'FortInventoryContext_AreAnyItemsUnseenForItemType::ItemType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_AreAnyItemsUnseenForItemType, ReturnValue) == 0x000001, "Member 'FortInventoryContext_AreAnyItemsUnseenForItemType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.AreRecipeRequirementsMet
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_AreRecipeRequirementsMet final
{
public:
	TArray<struct FFortItemQuantityPair>          RecipeCosts;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_AreRecipeRequirementsMet) == 0x000008, "Wrong alignment on FortInventoryContext_AreRecipeRequirementsMet");
static_assert(sizeof(FortInventoryContext_AreRecipeRequirementsMet) == 0x000018, "Wrong size on FortInventoryContext_AreRecipeRequirementsMet");
static_assert(offsetof(FortInventoryContext_AreRecipeRequirementsMet, RecipeCosts) == 0x000000, "Member 'FortInventoryContext_AreRecipeRequirementsMet::RecipeCosts' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_AreRecipeRequirementsMet, ReturnValue) == 0x000010, "Member 'FortInventoryContext_AreRecipeRequirementsMet::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.CanBulkCraftSchematic
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_CanBulkCraftSchematic final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_CanBulkCraftSchematic) == 0x000008, "Wrong alignment on FortInventoryContext_CanBulkCraftSchematic");
static_assert(sizeof(FortInventoryContext_CanBulkCraftSchematic) == 0x000010, "Wrong size on FortInventoryContext_CanBulkCraftSchematic");
static_assert(offsetof(FortInventoryContext_CanBulkCraftSchematic, SchematicItem) == 0x000000, "Member 'FortInventoryContext_CanBulkCraftSchematic::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanBulkCraftSchematic, ReturnValue) == 0x000008, "Member 'FortInventoryContext_CanBulkCraftSchematic::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.CanCraftSchematic
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_CanCraftSchematic final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCraftFailCause                           FailCause;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 RequestedTier;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_CanCraftSchematic) == 0x000008, "Wrong alignment on FortInventoryContext_CanCraftSchematic");
static_assert(sizeof(FortInventoryContext_CanCraftSchematic) == 0x000018, "Wrong size on FortInventoryContext_CanCraftSchematic");
static_assert(offsetof(FortInventoryContext_CanCraftSchematic, SchematicItem) == 0x000000, "Member 'FortInventoryContext_CanCraftSchematic::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanCraftSchematic, FailCause) == 0x000008, "Member 'FortInventoryContext_CanCraftSchematic::FailCause' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanCraftSchematic, RequestedTier) == 0x000009, "Member 'FortInventoryContext_CanCraftSchematic::RequestedTier' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanCraftSchematic, CraftCount) == 0x00000C, "Member 'FortInventoryContext_CanCraftSchematic::CraftCount' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanCraftSchematic, ReturnValue) == 0x000010, "Member 'FortInventoryContext_CanCraftSchematic::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.CanDisassembleItem
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_CanDisassembleItem final
{
public:
	const class UFortWorldItem*                   Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EItemDisassembleRestrictionReason>     OutRestrictionReasons;                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_CanDisassembleItem) == 0x000008, "Wrong alignment on FortInventoryContext_CanDisassembleItem");
static_assert(sizeof(FortInventoryContext_CanDisassembleItem) == 0x000020, "Wrong size on FortInventoryContext_CanDisassembleItem");
static_assert(offsetof(FortInventoryContext_CanDisassembleItem, Item) == 0x000000, "Member 'FortInventoryContext_CanDisassembleItem::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanDisassembleItem, OutRestrictionReasons) == 0x000008, "Member 'FortInventoryContext_CanDisassembleItem::OutRestrictionReasons' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanDisassembleItem, ReturnValue) == 0x000018, "Member 'FortInventoryContext_CanDisassembleItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.CanEvolve
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_CanEvolve final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EItemEvolutionRestrictionReason>       OutRestrictionReasons;                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_CanEvolve) == 0x000008, "Wrong alignment on FortInventoryContext_CanEvolve");
static_assert(sizeof(FortInventoryContext_CanEvolve) == 0x000020, "Wrong size on FortInventoryContext_CanEvolve");
static_assert(offsetof(FortInventoryContext_CanEvolve, Item) == 0x000000, "Member 'FortInventoryContext_CanEvolve::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanEvolve, OutRestrictionReasons) == 0x000008, "Member 'FortInventoryContext_CanEvolve::OutRestrictionReasons' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanEvolve, ReturnValue) == 0x000018, "Member 'FortInventoryContext_CanEvolve::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.CanItemBeMulched
// 0x0028 (0x0028 - 0x0000)
struct FortInventoryContext_CanItemBeMulched final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutRestrictionReasons;                             // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_CanItemBeMulched) == 0x000008, "Wrong alignment on FortInventoryContext_CanItemBeMulched");
static_assert(sizeof(FortInventoryContext_CanItemBeMulched) == 0x000028, "Wrong size on FortInventoryContext_CanItemBeMulched");
static_assert(offsetof(FortInventoryContext_CanItemBeMulched, Item) == 0x000000, "Member 'FortInventoryContext_CanItemBeMulched::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanItemBeMulched, OutRestrictionReasons) == 0x000008, "Member 'FortInventoryContext_CanItemBeMulched::OutRestrictionReasons' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanItemBeMulched, ReturnValue) == 0x000020, "Member 'FortInventoryContext_CanItemBeMulched::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.CanPinSchematic
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_CanPinSchematic final
{
public:
	class UFortSchematicItem*                     Schematic;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_CanPinSchematic) == 0x000008, "Wrong alignment on FortInventoryContext_CanPinSchematic");
static_assert(sizeof(FortInventoryContext_CanPinSchematic) == 0x000010, "Wrong size on FortInventoryContext_CanPinSchematic");
static_assert(offsetof(FortInventoryContext_CanPinSchematic, Schematic) == 0x000000, "Member 'FortInventoryContext_CanPinSchematic::Schematic' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanPinSchematic, ReturnValue) == 0x000008, "Member 'FortInventoryContext_CanPinSchematic::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.CanRecycle
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_CanRecycle final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EItemRecyclingRestrictionReason>       OutRestrictionReasons;                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_CanRecycle) == 0x000008, "Wrong alignment on FortInventoryContext_CanRecycle");
static_assert(sizeof(FortInventoryContext_CanRecycle) == 0x000020, "Wrong size on FortInventoryContext_CanRecycle");
static_assert(offsetof(FortInventoryContext_CanRecycle, Item) == 0x000000, "Member 'FortInventoryContext_CanRecycle::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanRecycle, OutRestrictionReasons) == 0x000008, "Member 'FortInventoryContext_CanRecycle::OutRestrictionReasons' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_CanRecycle, ReturnValue) == 0x000018, "Member 'FortInventoryContext_CanRecycle::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.DoesItemMatchFilter
// 0x0028 (0x0028 - 0x0000)
struct FortInventoryContext_DoesItemMatchFilter final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemListFilter                    FilterSettings;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_DoesItemMatchFilter) == 0x000008, "Wrong alignment on FortInventoryContext_DoesItemMatchFilter");
static_assert(sizeof(FortInventoryContext_DoesItemMatchFilter) == 0x000028, "Wrong size on FortInventoryContext_DoesItemMatchFilter");
static_assert(offsetof(FortInventoryContext_DoesItemMatchFilter, Item) == 0x000000, "Member 'FortInventoryContext_DoesItemMatchFilter::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_DoesItemMatchFilter, FilterSettings) == 0x000008, "Member 'FortInventoryContext_DoesItemMatchFilter::FilterSettings' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_DoesItemMatchFilter, ReturnValue) == 0x000020, "Member 'FortInventoryContext_DoesItemMatchFilter::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.DoesRequireResourceUpdate
// 0x0001 (0x0001 - 0x0000)
struct FortInventoryContext_DoesRequireResourceUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_DoesRequireResourceUpdate) == 0x000001, "Wrong alignment on FortInventoryContext_DoesRequireResourceUpdate");
static_assert(sizeof(FortInventoryContext_DoesRequireResourceUpdate) == 0x000001, "Wrong size on FortInventoryContext_DoesRequireResourceUpdate");
static_assert(offsetof(FortInventoryContext_DoesRequireResourceUpdate, ReturnValue) == 0x000000, "Member 'FortInventoryContext_DoesRequireResourceUpdate::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetAccountItemsByFilterType
// 0x0028 (0x0028 - 0x0000)
struct FortInventoryContext_GetAccountItemsByFilterType final
{
public:
	class FString                                 SearchText;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryContentSortType                     SortType;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          SubType;                                           // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAccountItem*>               OutItemList;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetAccountItemsByFilterType) == 0x000008, "Wrong alignment on FortInventoryContext_GetAccountItemsByFilterType");
static_assert(sizeof(FortInventoryContext_GetAccountItemsByFilterType) == 0x000028, "Wrong size on FortInventoryContext_GetAccountItemsByFilterType");
static_assert(offsetof(FortInventoryContext_GetAccountItemsByFilterType, SearchText) == 0x000000, "Member 'FortInventoryContext_GetAccountItemsByFilterType::SearchText' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetAccountItemsByFilterType, SortType) == 0x000010, "Member 'FortInventoryContext_GetAccountItemsByFilterType::SortType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetAccountItemsByFilterType, SubType) == 0x000011, "Member 'FortInventoryContext_GetAccountItemsByFilterType::SubType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetAccountItemsByFilterType, OutItemList) == 0x000018, "Member 'FortInventoryContext_GetAccountItemsByFilterType::OutItemList' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetAccountItemsByType
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_GetAccountItemsByType final
{
public:
	EFortItemType                                 ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAccountItem*>               Items;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetAccountItemsByType) == 0x000008, "Wrong alignment on FortInventoryContext_GetAccountItemsByType");
static_assert(sizeof(FortInventoryContext_GetAccountItemsByType) == 0x000018, "Wrong size on FortInventoryContext_GetAccountItemsByType");
static_assert(offsetof(FortInventoryContext_GetAccountItemsByType, ItemType) == 0x000000, "Member 'FortInventoryContext_GetAccountItemsByType::ItemType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetAccountItemsByType, Items) == 0x000008, "Member 'FortInventoryContext_GetAccountItemsByType::Items' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetBackpackItemCounts
// 0x000C (0x000C - 0x0000)
struct FortInventoryContext_GetBackpackItemCounts final
{
public:
	int32                                         ItemsCount;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxItemsCount;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverflowItemsCount;                                // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetBackpackItemCounts) == 0x000004, "Wrong alignment on FortInventoryContext_GetBackpackItemCounts");
static_assert(sizeof(FortInventoryContext_GetBackpackItemCounts) == 0x00000C, "Wrong size on FortInventoryContext_GetBackpackItemCounts");
static_assert(offsetof(FortInventoryContext_GetBackpackItemCounts, ItemsCount) == 0x000000, "Member 'FortInventoryContext_GetBackpackItemCounts::ItemsCount' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetBackpackItemCounts, MaxItemsCount) == 0x000004, "Member 'FortInventoryContext_GetBackpackItemCounts::MaxItemsCount' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetBackpackItemCounts, OverflowItemsCount) == 0x000008, "Member 'FortInventoryContext_GetBackpackItemCounts::OverflowItemsCount' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetBackpackOverflowFromAddingItem
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetBackpackOverflowFromAddingItem final
{
public:
	class UFortWorldItem*                         Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetBackpackOverflowFromAddingItem) == 0x000008, "Wrong alignment on FortInventoryContext_GetBackpackOverflowFromAddingItem");
static_assert(sizeof(FortInventoryContext_GetBackpackOverflowFromAddingItem) == 0x000010, "Wrong size on FortInventoryContext_GetBackpackOverflowFromAddingItem");
static_assert(offsetof(FortInventoryContext_GetBackpackOverflowFromAddingItem, Item) == 0x000000, "Member 'FortInventoryContext_GetBackpackOverflowFromAddingItem::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetBackpackOverflowFromAddingItem, Count) == 0x000008, "Member 'FortInventoryContext_GetBackpackOverflowFromAddingItem::Count' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetBackpackOverflowFromAddingItem, ReturnValue) == 0x00000C, "Member 'FortInventoryContext_GetBackpackOverflowFromAddingItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetCoreItemsByFilterType
// 0x0028 (0x0028 - 0x0000)
struct FortInventoryContext_GetCoreItemsByFilterType final
{
public:
	class FString                                 SearchText;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryContentSortType                     SortType;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          SubType;                                           // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAccountItem*>               OutItemList;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetCoreItemsByFilterType) == 0x000008, "Wrong alignment on FortInventoryContext_GetCoreItemsByFilterType");
static_assert(sizeof(FortInventoryContext_GetCoreItemsByFilterType) == 0x000028, "Wrong size on FortInventoryContext_GetCoreItemsByFilterType");
static_assert(offsetof(FortInventoryContext_GetCoreItemsByFilterType, SearchText) == 0x000000, "Member 'FortInventoryContext_GetCoreItemsByFilterType::SearchText' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetCoreItemsByFilterType, SortType) == 0x000010, "Member 'FortInventoryContext_GetCoreItemsByFilterType::SortType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetCoreItemsByFilterType, SubType) == 0x000011, "Member 'FortInventoryContext_GetCoreItemsByFilterType::SubType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetCoreItemsByFilterType, OutItemList) == 0x000018, "Member 'FortInventoryContext_GetCoreItemsByFilterType::OutItemList' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetCoreItemsByType
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_GetCoreItemsByType final
{
public:
	EFortItemType                                 ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAccountItem*>               Items;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetCoreItemsByType) == 0x000008, "Wrong alignment on FortInventoryContext_GetCoreItemsByType");
static_assert(sizeof(FortInventoryContext_GetCoreItemsByType) == 0x000018, "Wrong size on FortInventoryContext_GetCoreItemsByType");
static_assert(offsetof(FortInventoryContext_GetCoreItemsByType, ItemType) == 0x000000, "Member 'FortInventoryContext_GetCoreItemsByType::ItemType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetCoreItemsByType, Items) == 0x000008, "Member 'FortInventoryContext_GetCoreItemsByType::Items' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetCountOfHeroItems
// 0x0004 (0x0004 - 0x0000)
struct FortInventoryContext_GetCountOfHeroItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetCountOfHeroItems) == 0x000004, "Wrong alignment on FortInventoryContext_GetCountOfHeroItems");
static_assert(sizeof(FortInventoryContext_GetCountOfHeroItems) == 0x000004, "Wrong size on FortInventoryContext_GetCountOfHeroItems");
static_assert(offsetof(FortInventoryContext_GetCountOfHeroItems, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetCountOfHeroItems::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetCountOfVaultLimitedItems
// 0x0004 (0x0004 - 0x0000)
struct FortInventoryContext_GetCountOfVaultLimitedItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetCountOfVaultLimitedItems) == 0x000004, "Wrong alignment on FortInventoryContext_GetCountOfVaultLimitedItems");
static_assert(sizeof(FortInventoryContext_GetCountOfVaultLimitedItems) == 0x000004, "Wrong size on FortInventoryContext_GetCountOfVaultLimitedItems");
static_assert(offsetof(FortInventoryContext_GetCountOfVaultLimitedItems, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetCountOfVaultLimitedItems::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetCurrentAmmoItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_GetCurrentAmmoItemDefinition final
{
public:
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetCurrentAmmoItemDefinition) == 0x000008, "Wrong alignment on FortInventoryContext_GetCurrentAmmoItemDefinition");
static_assert(sizeof(FortInventoryContext_GetCurrentAmmoItemDefinition) == 0x000008, "Wrong size on FortInventoryContext_GetCurrentAmmoItemDefinition");
static_assert(offsetof(FortInventoryContext_GetCurrentAmmoItemDefinition, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetCurrentAmmoItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetCurrentResourceCount
// 0x0004 (0x0004 - 0x0000)
struct FortInventoryContext_GetCurrentResourceCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetCurrentResourceCount) == 0x000004, "Wrong alignment on FortInventoryContext_GetCurrentResourceCount");
static_assert(sizeof(FortInventoryContext_GetCurrentResourceCount) == 0x000004, "Wrong size on FortInventoryContext_GetCurrentResourceCount");
static_assert(offsetof(FortInventoryContext_GetCurrentResourceCount, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetCurrentResourceCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetCurrentResourceItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_GetCurrentResourceItemDefinition final
{
public:
	class UFortResourceItemDefinition*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetCurrentResourceItemDefinition) == 0x000008, "Wrong alignment on FortInventoryContext_GetCurrentResourceItemDefinition");
static_assert(sizeof(FortInventoryContext_GetCurrentResourceItemDefinition) == 0x000008, "Wrong size on FortInventoryContext_GetCurrentResourceItemDefinition");
static_assert(offsetof(FortInventoryContext_GetCurrentResourceItemDefinition, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetCurrentResourceItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetDeployableBaseItemCounts
// 0x000C (0x000C - 0x0000)
struct FortInventoryContext_GetDeployableBaseItemCounts final
{
public:
	int32                                         ItemsCount;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxItemsCount;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverflowItemsCount;                                // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetDeployableBaseItemCounts) == 0x000004, "Wrong alignment on FortInventoryContext_GetDeployableBaseItemCounts");
static_assert(sizeof(FortInventoryContext_GetDeployableBaseItemCounts) == 0x00000C, "Wrong size on FortInventoryContext_GetDeployableBaseItemCounts");
static_assert(offsetof(FortInventoryContext_GetDeployableBaseItemCounts, ItemsCount) == 0x000000, "Member 'FortInventoryContext_GetDeployableBaseItemCounts::ItemsCount' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetDeployableBaseItemCounts, MaxItemsCount) == 0x000004, "Member 'FortInventoryContext_GetDeployableBaseItemCounts::MaxItemsCount' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetDeployableBaseItemCounts, OverflowItemsCount) == 0x000008, "Member 'FortInventoryContext_GetDeployableBaseItemCounts::OverflowItemsCount' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetDeployableBaseOverflowFromAddingItem
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetDeployableBaseOverflowFromAddingItem final
{
public:
	class UFortWorldItem*                         Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetDeployableBaseOverflowFromAddingItem) == 0x000008, "Wrong alignment on FortInventoryContext_GetDeployableBaseOverflowFromAddingItem");
static_assert(sizeof(FortInventoryContext_GetDeployableBaseOverflowFromAddingItem) == 0x000010, "Wrong size on FortInventoryContext_GetDeployableBaseOverflowFromAddingItem");
static_assert(offsetof(FortInventoryContext_GetDeployableBaseOverflowFromAddingItem, Item) == 0x000000, "Member 'FortInventoryContext_GetDeployableBaseOverflowFromAddingItem::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetDeployableBaseOverflowFromAddingItem, Count) == 0x000008, "Member 'FortInventoryContext_GetDeployableBaseOverflowFromAddingItem::Count' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetDeployableBaseOverflowFromAddingItem, ReturnValue) == 0x00000C, "Member 'FortInventoryContext_GetDeployableBaseOverflowFromAddingItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetEquippedWeapon
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_GetEquippedWeapon final
{
public:
	class AFortWeapon*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetEquippedWeapon) == 0x000008, "Wrong alignment on FortInventoryContext_GetEquippedWeapon");
static_assert(sizeof(FortInventoryContext_GetEquippedWeapon) == 0x000008, "Wrong size on FortInventoryContext_GetEquippedWeapon");
static_assert(offsetof(FortInventoryContext_GetEquippedWeapon, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetEquippedWeapon::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetHeroAbilityPerks
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_GetHeroAbilityPerks final
{
public:
	class UFortHero*                              Hero;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortUIPerk>                    HeroAbilityPerks;                                  // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_GetHeroAbilityPerks) == 0x000008, "Wrong alignment on FortInventoryContext_GetHeroAbilityPerks");
static_assert(sizeof(FortInventoryContext_GetHeroAbilityPerks) == 0x000020, "Wrong size on FortInventoryContext_GetHeroAbilityPerks");
static_assert(offsetof(FortInventoryContext_GetHeroAbilityPerks, Hero) == 0x000000, "Member 'FortInventoryContext_GetHeroAbilityPerks::Hero' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetHeroAbilityPerks, HeroAbilityPerks) == 0x000008, "Member 'FortInventoryContext_GetHeroAbilityPerks::HeroAbilityPerks' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetHeroAbilityPerks, ReturnValue) == 0x000018, "Member 'FortInventoryContext_GetHeroAbilityPerks::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetHeroResourceItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_GetHeroResourceItemDefinition final
{
public:
	class UFortPersistentResourceItemDefinition*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetHeroResourceItemDefinition) == 0x000008, "Wrong alignment on FortInventoryContext_GetHeroResourceItemDefinition");
static_assert(sizeof(FortInventoryContext_GetHeroResourceItemDefinition) == 0x000008, "Wrong size on FortInventoryContext_GetHeroResourceItemDefinition");
static_assert(offsetof(FortInventoryContext_GetHeroResourceItemDefinition, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetHeroResourceItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetHomebaseUnlockedTransmogKeys
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetHomebaseUnlockedTransmogKeys final
{
public:
	TArray<class UFortAccountItem*>               TransmogKeys;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetHomebaseUnlockedTransmogKeys) == 0x000008, "Wrong alignment on FortInventoryContext_GetHomebaseUnlockedTransmogKeys");
static_assert(sizeof(FortInventoryContext_GetHomebaseUnlockedTransmogKeys) == 0x000010, "Wrong size on FortInventoryContext_GetHomebaseUnlockedTransmogKeys");
static_assert(offsetof(FortInventoryContext_GetHomebaseUnlockedTransmogKeys, TransmogKeys) == 0x000000, "Member 'FortInventoryContext_GetHomebaseUnlockedTransmogKeys::TransmogKeys' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetItemInstancesByDefinition
// 0x0018 (0x0018 - 0x0000)
struct FortInventoryContext_GetItemInstancesByDefinition final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      Items;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetItemInstancesByDefinition) == 0x000008, "Wrong alignment on FortInventoryContext_GetItemInstancesByDefinition");
static_assert(sizeof(FortInventoryContext_GetItemInstancesByDefinition) == 0x000018, "Wrong size on FortInventoryContext_GetItemInstancesByDefinition");
static_assert(offsetof(FortInventoryContext_GetItemInstancesByDefinition, ItemDefinition) == 0x000000, "Member 'FortInventoryContext_GetItemInstancesByDefinition::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetItemInstancesByDefinition, Items) == 0x000008, "Member 'FortInventoryContext_GetItemInstancesByDefinition::Items' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetItemsToMulchBP
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetItemsToMulchBP final
{
public:
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetItemsToMulchBP) == 0x000008, "Wrong alignment on FortInventoryContext_GetItemsToMulchBP");
static_assert(sizeof(FortInventoryContext_GetItemsToMulchBP) == 0x000010, "Wrong size on FortInventoryContext_GetItemsToMulchBP");
static_assert(offsetof(FortInventoryContext_GetItemsToMulchBP, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetItemsToMulchBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetNumInInventory
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetNumInInventory final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeReserved;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetNumInInventory) == 0x000008, "Wrong alignment on FortInventoryContext_GetNumInInventory");
static_assert(sizeof(FortInventoryContext_GetNumInInventory) == 0x000010, "Wrong size on FortInventoryContext_GetNumInInventory");
static_assert(offsetof(FortInventoryContext_GetNumInInventory, ItemDefinition) == 0x000000, "Member 'FortInventoryContext_GetNumInInventory::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetNumInInventory, bIncludeReserved) == 0x000008, "Member 'FortInventoryContext_GetNumInInventory::bIncludeReserved' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetNumInInventory, ReturnValue) == 0x00000C, "Member 'FortInventoryContext_GetNumInInventory::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetNumItemsToMulch
// 0x0004 (0x0004 - 0x0000)
struct FortInventoryContext_GetNumItemsToMulch final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetNumItemsToMulch) == 0x000004, "Wrong alignment on FortInventoryContext_GetNumItemsToMulch");
static_assert(sizeof(FortInventoryContext_GetNumItemsToMulch) == 0x000004, "Wrong size on FortInventoryContext_GetNumItemsToMulch");
static_assert(offsetof(FortInventoryContext_GetNumItemsToMulch, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetNumItemsToMulch::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetNumOfItemToMulch
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetNumOfItemToMulch final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_GetNumOfItemToMulch) == 0x000008, "Wrong alignment on FortInventoryContext_GetNumOfItemToMulch");
static_assert(sizeof(FortInventoryContext_GetNumOfItemToMulch) == 0x000010, "Wrong size on FortInventoryContext_GetNumOfItemToMulch");
static_assert(offsetof(FortInventoryContext_GetNumOfItemToMulch, Item) == 0x000000, "Member 'FortInventoryContext_GetNumOfItemToMulch::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetNumOfItemToMulch, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetNumOfItemToMulch::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetPersonnelResourceItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_GetPersonnelResourceItemDefinition final
{
public:
	class UFortPersistentResourceItemDefinition*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetPersonnelResourceItemDefinition) == 0x000008, "Wrong alignment on FortInventoryContext_GetPersonnelResourceItemDefinition");
static_assert(sizeof(FortInventoryContext_GetPersonnelResourceItemDefinition) == 0x000008, "Wrong size on FortInventoryContext_GetPersonnelResourceItemDefinition");
static_assert(offsetof(FortInventoryContext_GetPersonnelResourceItemDefinition, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetPersonnelResourceItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetPinnedSchematicList
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetPinnedSchematicList final
{
public:
	TArray<class UFortSchematicItem*>             PinnedItems;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetPinnedSchematicList) == 0x000008, "Wrong alignment on FortInventoryContext_GetPinnedSchematicList");
static_assert(sizeof(FortInventoryContext_GetPinnedSchematicList) == 0x000010, "Wrong size on FortInventoryContext_GetPinnedSchematicList");
static_assert(offsetof(FortInventoryContext_GetPinnedSchematicList, PinnedItems) == 0x000000, "Member 'FortInventoryContext_GetPinnedSchematicList::PinnedItems' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetProfileItemsByFilterType
// 0x0030 (0x0030 - 0x0000)
struct FortInventoryContext_GetProfileItemsByFilterType final
{
public:
	class UFortMcpProfile*                        Profile;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SearchText;                                        // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryContentSortType                     SortType;                                          // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          SubType;                                           // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAccountItem*>               OutItemList;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetProfileItemsByFilterType) == 0x000008, "Wrong alignment on FortInventoryContext_GetProfileItemsByFilterType");
static_assert(sizeof(FortInventoryContext_GetProfileItemsByFilterType) == 0x000030, "Wrong size on FortInventoryContext_GetProfileItemsByFilterType");
static_assert(offsetof(FortInventoryContext_GetProfileItemsByFilterType, Profile) == 0x000000, "Member 'FortInventoryContext_GetProfileItemsByFilterType::Profile' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetProfileItemsByFilterType, SearchText) == 0x000008, "Member 'FortInventoryContext_GetProfileItemsByFilterType::SearchText' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetProfileItemsByFilterType, SortType) == 0x000018, "Member 'FortInventoryContext_GetProfileItemsByFilterType::SortType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetProfileItemsByFilterType, SubType) == 0x000019, "Member 'FortInventoryContext_GetProfileItemsByFilterType::SubType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetProfileItemsByFilterType, OutItemList) == 0x000020, "Member 'FortInventoryContext_GetProfileItemsByFilterType::OutItemList' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetProfileItemsByType
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_GetProfileItemsByType final
{
public:
	class UFortMcpProfile*                        Profile;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemType                                 ItemType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAccountItem*>               Items;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetProfileItemsByType) == 0x000008, "Wrong alignment on FortInventoryContext_GetProfileItemsByType");
static_assert(sizeof(FortInventoryContext_GetProfileItemsByType) == 0x000020, "Wrong size on FortInventoryContext_GetProfileItemsByType");
static_assert(offsetof(FortInventoryContext_GetProfileItemsByType, Profile) == 0x000000, "Member 'FortInventoryContext_GetProfileItemsByType::Profile' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetProfileItemsByType, ItemType) == 0x000008, "Member 'FortInventoryContext_GetProfileItemsByType::ItemType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetProfileItemsByType, Items) == 0x000010, "Member 'FortInventoryContext_GetProfileItemsByType::Items' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetQuickbarFocus
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetQuickbarFocus final
{
public:
	EFortQuickBars                                OutQuickBar;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutSlot;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSecondarySlot;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutPreviousFocusedSlot;                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetQuickbarFocus) == 0x000004, "Wrong alignment on FortInventoryContext_GetQuickbarFocus");
static_assert(sizeof(FortInventoryContext_GetQuickbarFocus) == 0x000010, "Wrong size on FortInventoryContext_GetQuickbarFocus");
static_assert(offsetof(FortInventoryContext_GetQuickbarFocus, OutQuickBar) == 0x000000, "Member 'FortInventoryContext_GetQuickbarFocus::OutQuickBar' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetQuickbarFocus, OutSlot) == 0x000004, "Member 'FortInventoryContext_GetQuickbarFocus::OutSlot' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetQuickbarFocus, OutSecondarySlot) == 0x000008, "Member 'FortInventoryContext_GetQuickbarFocus::OutSecondarySlot' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetQuickbarFocus, OutPreviousFocusedSlot) == 0x00000C, "Member 'FortInventoryContext_GetQuickbarFocus::OutPreviousFocusedSlot' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetQuickBarSlottedItem
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetQuickBarSlottedItem final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetQuickBarSlottedItem) == 0x000008, "Wrong alignment on FortInventoryContext_GetQuickBarSlottedItem");
static_assert(sizeof(FortInventoryContext_GetQuickBarSlottedItem) == 0x000010, "Wrong size on FortInventoryContext_GetQuickBarSlottedItem");
static_assert(offsetof(FortInventoryContext_GetQuickBarSlottedItem, InQuickBar) == 0x000000, "Member 'FortInventoryContext_GetQuickBarSlottedItem::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetQuickBarSlottedItem, Slot) == 0x000004, "Member 'FortInventoryContext_GetQuickBarSlottedItem::Slot' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetQuickBarSlottedItem, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetQuickBarSlottedItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetResourceCount
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_GetResourceCount final
{
public:
	EFortResourceType                             ResourceType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetResourceCount) == 0x000004, "Wrong alignment on FortInventoryContext_GetResourceCount");
static_assert(sizeof(FortInventoryContext_GetResourceCount) == 0x000008, "Wrong size on FortInventoryContext_GetResourceCount");
static_assert(offsetof(FortInventoryContext_GetResourceCount, ResourceType) == 0x000000, "Member 'FortInventoryContext_GetResourceCount::ResourceType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetResourceCount, ReturnValue) == 0x000004, "Member 'FortInventoryContext_GetResourceCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetResourceIcon
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetResourceIcon final
{
public:
	EFortResourceType                             ResourceType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetResourceIcon) == 0x000008, "Wrong alignment on FortInventoryContext_GetResourceIcon");
static_assert(sizeof(FortInventoryContext_GetResourceIcon) == 0x000010, "Wrong size on FortInventoryContext_GetResourceIcon");
static_assert(offsetof(FortInventoryContext_GetResourceIcon, ResourceType) == 0x000000, "Member 'FortInventoryContext_GetResourceIcon::ResourceType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetResourceIcon, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetResourceIcon::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetResourceItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetResourceItemDefinition final
{
public:
	EFortResourceType                             ResourceType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortResourceItemDefinition*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetResourceItemDefinition) == 0x000008, "Wrong alignment on FortInventoryContext_GetResourceItemDefinition");
static_assert(sizeof(FortInventoryContext_GetResourceItemDefinition) == 0x000010, "Wrong size on FortInventoryContext_GetResourceItemDefinition");
static_assert(offsetof(FortInventoryContext_GetResourceItemDefinition, ResourceType) == 0x000000, "Member 'FortInventoryContext_GetResourceItemDefinition::ResourceType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetResourceItemDefinition, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetResourceItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetResourceItemMaxStackSize
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_GetResourceItemMaxStackSize final
{
public:
	EFortResourceType                             ResourceType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetResourceItemMaxStackSize) == 0x000004, "Wrong alignment on FortInventoryContext_GetResourceItemMaxStackSize");
static_assert(sizeof(FortInventoryContext_GetResourceItemMaxStackSize) == 0x000008, "Wrong size on FortInventoryContext_GetResourceItemMaxStackSize");
static_assert(offsetof(FortInventoryContext_GetResourceItemMaxStackSize, ResourceType) == 0x000000, "Member 'FortInventoryContext_GetResourceItemMaxStackSize::ResourceType' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetResourceItemMaxStackSize, ReturnValue) == 0x000004, "Member 'FortInventoryContext_GetResourceItemMaxStackSize::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetSchematicResourceItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_GetSchematicResourceItemDefinition final
{
public:
	class UFortPersistentResourceItemDefinition*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetSchematicResourceItemDefinition) == 0x000008, "Wrong alignment on FortInventoryContext_GetSchematicResourceItemDefinition");
static_assert(sizeof(FortInventoryContext_GetSchematicResourceItemDefinition) == 0x000008, "Wrong size on FortInventoryContext_GetSchematicResourceItemDefinition");
static_assert(offsetof(FortInventoryContext_GetSchematicResourceItemDefinition, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetSchematicResourceItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetStorageCapacity
// 0x0004 (0x0004 - 0x0000)
struct FortInventoryContext_GetStorageCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetStorageCapacity) == 0x000004, "Wrong alignment on FortInventoryContext_GetStorageCapacity");
static_assert(sizeof(FortInventoryContext_GetStorageCapacity) == 0x000004, "Wrong size on FortInventoryContext_GetStorageCapacity");
static_assert(offsetof(FortInventoryContext_GetStorageCapacity, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetStorageCapacity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetStorageNumItems
// 0x0004 (0x0004 - 0x0000)
struct FortInventoryContext_GetStorageNumItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetStorageNumItems) == 0x000004, "Wrong alignment on FortInventoryContext_GetStorageNumItems");
static_assert(sizeof(FortInventoryContext_GetStorageNumItems) == 0x000004, "Wrong size on FortInventoryContext_GetStorageNumItems");
static_assert(offsetof(FortInventoryContext_GetStorageNumItems, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetStorageNumItems::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetStorageOverflowFromAddingItem
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetStorageOverflowFromAddingItem final
{
public:
	class UFortWorldItem*                         Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetStorageOverflowFromAddingItem) == 0x000008, "Wrong alignment on FortInventoryContext_GetStorageOverflowFromAddingItem");
static_assert(sizeof(FortInventoryContext_GetStorageOverflowFromAddingItem) == 0x000010, "Wrong size on FortInventoryContext_GetStorageOverflowFromAddingItem");
static_assert(offsetof(FortInventoryContext_GetStorageOverflowFromAddingItem, Item) == 0x000000, "Member 'FortInventoryContext_GetStorageOverflowFromAddingItem::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetStorageOverflowFromAddingItem, Count) == 0x000008, "Member 'FortInventoryContext_GetStorageOverflowFromAddingItem::Count' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetStorageOverflowFromAddingItem, ReturnValue) == 0x00000C, "Member 'FortInventoryContext_GetStorageOverflowFromAddingItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetSupportBonusPerks
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_GetSupportBonusPerks final
{
public:
	class UFortHero*                              Hero;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortUIPerk>                    SupportBonusPerks;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_GetSupportBonusPerks) == 0x000008, "Wrong alignment on FortInventoryContext_GetSupportBonusPerks");
static_assert(sizeof(FortInventoryContext_GetSupportBonusPerks) == 0x000020, "Wrong size on FortInventoryContext_GetSupportBonusPerks");
static_assert(offsetof(FortInventoryContext_GetSupportBonusPerks, Hero) == 0x000000, "Member 'FortInventoryContext_GetSupportBonusPerks::Hero' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetSupportBonusPerks, SupportBonusPerks) == 0x000008, "Member 'FortInventoryContext_GetSupportBonusPerks::SupportBonusPerks' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetSupportBonusPerks, ReturnValue) == 0x000018, "Member 'FortInventoryContext_GetSupportBonusPerks::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetTotalItemQuantityByDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_GetTotalItemQuantityByDefinition final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_GetTotalItemQuantityByDefinition) == 0x000008, "Wrong alignment on FortInventoryContext_GetTotalItemQuantityByDefinition");
static_assert(sizeof(FortInventoryContext_GetTotalItemQuantityByDefinition) == 0x000010, "Wrong size on FortInventoryContext_GetTotalItemQuantityByDefinition");
static_assert(offsetof(FortInventoryContext_GetTotalItemQuantityByDefinition, ItemDefinition) == 0x000000, "Member 'FortInventoryContext_GetTotalItemQuantityByDefinition::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetTotalItemQuantityByDefinition, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetTotalItemQuantityByDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetTransmogSacrificeDataFromItemDefintion
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_GetTransmogSacrificeDataFromItemDefintion final
{
public:
	const class UFortItemDefinition*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransmogSacrifice                     OutTransmogData;                                   // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_GetTransmogSacrificeDataFromItemDefintion) == 0x000008, "Wrong alignment on FortInventoryContext_GetTransmogSacrificeDataFromItemDefintion");
static_assert(sizeof(FortInventoryContext_GetTransmogSacrificeDataFromItemDefintion) == 0x000020, "Wrong size on FortInventoryContext_GetTransmogSacrificeDataFromItemDefintion");
static_assert(offsetof(FortInventoryContext_GetTransmogSacrificeDataFromItemDefintion, ItemDefinition) == 0x000000, "Member 'FortInventoryContext_GetTransmogSacrificeDataFromItemDefintion::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetTransmogSacrificeDataFromItemDefintion, OutTransmogData) == 0x000008, "Member 'FortInventoryContext_GetTransmogSacrificeDataFromItemDefintion::OutTransmogData' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetTransmogSacrificeDataFromItemDefintion, ReturnValue) == 0x000018, "Member 'FortInventoryContext_GetTransmogSacrificeDataFromItemDefintion::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetTrapAttachTypeName
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_GetTrapAttachTypeName final
{
public:
	class ABuildingSMActor*                       Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetTrapAttachTypeName) == 0x000008, "Wrong alignment on FortInventoryContext_GetTrapAttachTypeName");
static_assert(sizeof(FortInventoryContext_GetTrapAttachTypeName) == 0x000020, "Wrong size on FortInventoryContext_GetTrapAttachTypeName");
static_assert(offsetof(FortInventoryContext_GetTrapAttachTypeName, Actor) == 0x000000, "Member 'FortInventoryContext_GetTrapAttachTypeName::Actor' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetTrapAttachTypeName, ReturnValue) == 0x000008, "Member 'FortInventoryContext_GetTrapAttachTypeName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetVaultItemLimit
// 0x0004 (0x0004 - 0x0000)
struct FortInventoryContext_GetVaultItemLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetVaultItemLimit) == 0x000004, "Wrong alignment on FortInventoryContext_GetVaultItemLimit");
static_assert(sizeof(FortInventoryContext_GetVaultItemLimit) == 0x000004, "Wrong size on FortInventoryContext_GetVaultItemLimit");
static_assert(offsetof(FortInventoryContext_GetVaultItemLimit, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetVaultItemLimit::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetVaultItemLimitStatus
// 0x0001 (0x0001 - 0x0000)
struct FortInventoryContext_GetVaultItemLimitStatus final
{
public:
	EVaultItemLimitStatus                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetVaultItemLimitStatus) == 0x000001, "Wrong alignment on FortInventoryContext_GetVaultItemLimitStatus");
static_assert(sizeof(FortInventoryContext_GetVaultItemLimitStatus) == 0x000001, "Wrong size on FortInventoryContext_GetVaultItemLimitStatus");
static_assert(offsetof(FortInventoryContext_GetVaultItemLimitStatus, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetVaultItemLimitStatus::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetVoucherResourceItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortInventoryContext_GetVoucherResourceItemDefinition final
{
public:
	class UFortPersistentResourceItemDefinition*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetVoucherResourceItemDefinition) == 0x000008, "Wrong alignment on FortInventoryContext_GetVoucherResourceItemDefinition");
static_assert(sizeof(FortInventoryContext_GetVoucherResourceItemDefinition) == 0x000008, "Wrong size on FortInventoryContext_GetVoucherResourceItemDefinition");
static_assert(offsetof(FortInventoryContext_GetVoucherResourceItemDefinition, ReturnValue) == 0x000000, "Member 'FortInventoryContext_GetVoucherResourceItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetWorldItemList
// 0x0028 (0x0028 - 0x0000)
struct FortInventoryContext_GetWorldItemList final
{
public:
	TArray<class UFortWorldItem*>                 Items;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortItemListFilter                    FilterSettings;                                    // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetWorldItemList) == 0x000008, "Wrong alignment on FortInventoryContext_GetWorldItemList");
static_assert(sizeof(FortInventoryContext_GetWorldItemList) == 0x000028, "Wrong size on FortInventoryContext_GetWorldItemList");
static_assert(offsetof(FortInventoryContext_GetWorldItemList, Items) == 0x000000, "Member 'FortInventoryContext_GetWorldItemList::Items' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetWorldItemList, FilterSettings) == 0x000010, "Member 'FortInventoryContext_GetWorldItemList::FilterSettings' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.GetWorldItemListForDeployableBaseThePlayerIsIn
// 0x0028 (0x0028 - 0x0000)
struct FortInventoryContext_GetWorldItemListForDeployableBaseThePlayerIsIn final
{
public:
	TArray<class UFortWorldItem*>                 Items;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortItemListFilter                    FilterSettings;                                    // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_GetWorldItemListForDeployableBaseThePlayerIsIn) == 0x000008, "Wrong alignment on FortInventoryContext_GetWorldItemListForDeployableBaseThePlayerIsIn");
static_assert(sizeof(FortInventoryContext_GetWorldItemListForDeployableBaseThePlayerIsIn) == 0x000028, "Wrong size on FortInventoryContext_GetWorldItemListForDeployableBaseThePlayerIsIn");
static_assert(offsetof(FortInventoryContext_GetWorldItemListForDeployableBaseThePlayerIsIn, Items) == 0x000000, "Member 'FortInventoryContext_GetWorldItemListForDeployableBaseThePlayerIsIn::Items' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_GetWorldItemListForDeployableBaseThePlayerIsIn, FilterSettings) == 0x000010, "Member 'FortInventoryContext_GetWorldItemListForDeployableBaseThePlayerIsIn::FilterSettings' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.HasEvolutions
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_HasEvolutions final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_HasEvolutions) == 0x000008, "Wrong alignment on FortInventoryContext_HasEvolutions");
static_assert(sizeof(FortInventoryContext_HasEvolutions) == 0x000010, "Wrong size on FortInventoryContext_HasEvolutions");
static_assert(offsetof(FortInventoryContext_HasEvolutions, Item) == 0x000000, "Member 'FortInventoryContext_HasEvolutions::Item' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_HasEvolutions, ReturnValue) == 0x000008, "Member 'FortInventoryContext_HasEvolutions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.HasGameplayTagContainer
// 0x0028 (0x0028 - 0x0000)
struct FortInventoryContext_HasGameplayTagContainer final
{
public:
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_HasGameplayTagContainer) == 0x000008, "Wrong alignment on FortInventoryContext_HasGameplayTagContainer");
static_assert(sizeof(FortInventoryContext_HasGameplayTagContainer) == 0x000028, "Wrong size on FortInventoryContext_HasGameplayTagContainer");
static_assert(offsetof(FortInventoryContext_HasGameplayTagContainer, GameplayTagContainer) == 0x000000, "Member 'FortInventoryContext_HasGameplayTagContainer::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_HasGameplayTagContainer, ReturnValue) == 0x000020, "Member 'FortInventoryContext_HasGameplayTagContainer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.HasGameplayTagContainerExact
// 0x0028 (0x0028 - 0x0000)
struct FortInventoryContext_HasGameplayTagContainerExact final
{
public:
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_HasGameplayTagContainerExact) == 0x000008, "Wrong alignment on FortInventoryContext_HasGameplayTagContainerExact");
static_assert(sizeof(FortInventoryContext_HasGameplayTagContainerExact) == 0x000028, "Wrong size on FortInventoryContext_HasGameplayTagContainerExact");
static_assert(offsetof(FortInventoryContext_HasGameplayTagContainerExact, GameplayTagContainer) == 0x000000, "Member 'FortInventoryContext_HasGameplayTagContainerExact::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_HasGameplayTagContainerExact, ReturnValue) == 0x000020, "Member 'FortInventoryContext_HasGameplayTagContainerExact::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.HasTrapReadyForBuilding
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_HasTrapReadyForBuilding final
{
public:
	const class ABuildingSMActor*                 BuildingToAttachTo;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_HasTrapReadyForBuilding) == 0x000008, "Wrong alignment on FortInventoryContext_HasTrapReadyForBuilding");
static_assert(sizeof(FortInventoryContext_HasTrapReadyForBuilding) == 0x000010, "Wrong size on FortInventoryContext_HasTrapReadyForBuilding");
static_assert(offsetof(FortInventoryContext_HasTrapReadyForBuilding, BuildingToAttachTo) == 0x000000, "Member 'FortInventoryContext_HasTrapReadyForBuilding::BuildingToAttachTo' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_HasTrapReadyForBuilding, ReturnValue) == 0x000008, "Member 'FortInventoryContext_HasTrapReadyForBuilding::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.HasUnavailableItemsInStorage
// 0x0001 (0x0001 - 0x0000)
struct FortInventoryContext_HasUnavailableItemsInStorage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_HasUnavailableItemsInStorage) == 0x000001, "Wrong alignment on FortInventoryContext_HasUnavailableItemsInStorage");
static_assert(sizeof(FortInventoryContext_HasUnavailableItemsInStorage) == 0x000001, "Wrong size on FortInventoryContext_HasUnavailableItemsInStorage");
static_assert(offsetof(FortInventoryContext_HasUnavailableItemsInStorage, ReturnValue) == 0x000000, "Member 'FortInventoryContext_HasUnavailableItemsInStorage::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.HasUnseenHomebasePoints
// 0x0001 (0x0001 - 0x0000)
struct FortInventoryContext_HasUnseenHomebasePoints final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_HasUnseenHomebasePoints) == 0x000001, "Wrong alignment on FortInventoryContext_HasUnseenHomebasePoints");
static_assert(sizeof(FortInventoryContext_HasUnseenHomebasePoints) == 0x000001, "Wrong size on FortInventoryContext_HasUnseenHomebasePoints");
static_assert(offsetof(FortInventoryContext_HasUnseenHomebasePoints, ReturnValue) == 0x000000, "Member 'FortInventoryContext_HasUnseenHomebasePoints::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.HasUnseenResearchPointCollectionNodes
// 0x0001 (0x0001 - 0x0000)
struct FortInventoryContext_HasUnseenResearchPointCollectionNodes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_HasUnseenResearchPointCollectionNodes) == 0x000001, "Wrong alignment on FortInventoryContext_HasUnseenResearchPointCollectionNodes");
static_assert(sizeof(FortInventoryContext_HasUnseenResearchPointCollectionNodes) == 0x000001, "Wrong size on FortInventoryContext_HasUnseenResearchPointCollectionNodes");
static_assert(offsetof(FortInventoryContext_HasUnseenResearchPointCollectionNodes, ReturnValue) == 0x000000, "Member 'FortInventoryContext_HasUnseenResearchPointCollectionNodes::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.IsSchematicPinned
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_IsSchematicPinned final
{
public:
	class UFortSchematicItem*                     Schematic;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_IsSchematicPinned) == 0x000008, "Wrong alignment on FortInventoryContext_IsSchematicPinned");
static_assert(sizeof(FortInventoryContext_IsSchematicPinned) == 0x000010, "Wrong size on FortInventoryContext_IsSchematicPinned");
static_assert(offsetof(FortInventoryContext_IsSchematicPinned, Schematic) == 0x000000, "Member 'FortInventoryContext_IsSchematicPinned::Schematic' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_IsSchematicPinned, ReturnValue) == 0x000008, "Member 'FortInventoryContext_IsSchematicPinned::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.IsSlotHidden
// 0x000C (0x000C - 0x0000)
struct FortInventoryContext_IsSlotHidden final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_IsSlotHidden) == 0x000004, "Wrong alignment on FortInventoryContext_IsSlotHidden");
static_assert(sizeof(FortInventoryContext_IsSlotHidden) == 0x00000C, "Wrong size on FortInventoryContext_IsSlotHidden");
static_assert(offsetof(FortInventoryContext_IsSlotHidden, InQuickBar) == 0x000000, "Member 'FortInventoryContext_IsSlotHidden::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_IsSlotHidden, Slot) == 0x000004, "Member 'FortInventoryContext_IsSlotHidden::Slot' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_IsSlotHidden, ReturnValue) == 0x000008, "Member 'FortInventoryContext_IsSlotHidden::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.IsTrapAvailableForBuilding
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_IsTrapAvailableForBuilding final
{
public:
	class ABuildingSMActor*                       Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_IsTrapAvailableForBuilding) == 0x000008, "Wrong alignment on FortInventoryContext_IsTrapAvailableForBuilding");
static_assert(sizeof(FortInventoryContext_IsTrapAvailableForBuilding) == 0x000010, "Wrong size on FortInventoryContext_IsTrapAvailableForBuilding");
static_assert(offsetof(FortInventoryContext_IsTrapAvailableForBuilding, Actor) == 0x000000, "Member 'FortInventoryContext_IsTrapAvailableForBuilding::Actor' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_IsTrapAvailableForBuilding, ReturnValue) == 0x000008, "Member 'FortInventoryContext_IsTrapAvailableForBuilding::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.SortAccountItemArrayForTransmog
// 0x0020 (0x0020 - 0x0000)
struct FortInventoryContext_SortAccountItemArrayForTransmog final
{
public:
	TArray<class UFortAccountItem*>               VaultItems;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UFortAccountItem*>               SortedItems;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventoryContext_SortAccountItemArrayForTransmog) == 0x000008, "Wrong alignment on FortInventoryContext_SortAccountItemArrayForTransmog");
static_assert(sizeof(FortInventoryContext_SortAccountItemArrayForTransmog) == 0x000020, "Wrong size on FortInventoryContext_SortAccountItemArrayForTransmog");
static_assert(offsetof(FortInventoryContext_SortAccountItemArrayForTransmog, VaultItems) == 0x000000, "Member 'FortInventoryContext_SortAccountItemArrayForTransmog::VaultItems' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_SortAccountItemArrayForTransmog, SortedItems) == 0x000010, "Member 'FortInventoryContext_SortAccountItemArrayForTransmog::SortedItems' has a wrong offset!");

// Function FortniteUI.FortInventoryContext.WouldExceedMaxStackSize
// 0x0010 (0x0010 - 0x0000)
struct FortInventoryContext_WouldExceedMaxStackSize final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityToTest;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInventoryContext_WouldExceedMaxStackSize) == 0x000008, "Wrong alignment on FortInventoryContext_WouldExceedMaxStackSize");
static_assert(sizeof(FortInventoryContext_WouldExceedMaxStackSize) == 0x000010, "Wrong size on FortInventoryContext_WouldExceedMaxStackSize");
static_assert(offsetof(FortInventoryContext_WouldExceedMaxStackSize, ItemDefinition) == 0x000000, "Member 'FortInventoryContext_WouldExceedMaxStackSize::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_WouldExceedMaxStackSize, QuantityToTest) == 0x000008, "Member 'FortInventoryContext_WouldExceedMaxStackSize::QuantityToTest' has a wrong offset!");
static_assert(offsetof(FortInventoryContext_WouldExceedMaxStackSize, ReturnValue) == 0x00000C, "Member 'FortInventoryContext_WouldExceedMaxStackSize::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemBaseWidget.HandleItemCountChanged
// 0x0010 (0x0010 - 0x0000)
struct FortItemBaseWidget_HandleItemCountChanged final
{
public:
	class UFortItemDefinition*                    Definition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delta;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemBaseWidget_HandleItemCountChanged) == 0x000008, "Wrong alignment on FortItemBaseWidget_HandleItemCountChanged");
static_assert(sizeof(FortItemBaseWidget_HandleItemCountChanged) == 0x000010, "Wrong size on FortItemBaseWidget_HandleItemCountChanged");
static_assert(offsetof(FortItemBaseWidget_HandleItemCountChanged, Definition) == 0x000000, "Member 'FortItemBaseWidget_HandleItemCountChanged::Definition' has a wrong offset!");
static_assert(offsetof(FortItemBaseWidget_HandleItemCountChanged, Delta) == 0x000008, "Member 'FortItemBaseWidget_HandleItemCountChanged::Delta' has a wrong offset!");

// Function FortniteUI.FortItemBaseWidget.OnItemCountChanged
// 0x0004 (0x0004 - 0x0000)
struct FortItemBaseWidget_OnItemCountChanged final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemBaseWidget_OnItemCountChanged) == 0x000004, "Wrong alignment on FortItemBaseWidget_OnItemCountChanged");
static_assert(sizeof(FortItemBaseWidget_OnItemCountChanged) == 0x000004, "Wrong size on FortItemBaseWidget_OnItemCountChanged");
static_assert(offsetof(FortItemBaseWidget_OnItemCountChanged, NewCount) == 0x000000, "Member 'FortItemBaseWidget_OnItemCountChanged::NewCount' has a wrong offset!");

// Function FortniteUI.FortItemBaseWidget.SetItemDefinitionToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortItemBaseWidget_SetItemDefinitionToRepresent final
{
public:
	class UFortItemDefinition*                    InItemDefinition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemBaseWidget_SetItemDefinitionToRepresent) == 0x000008, "Wrong alignment on FortItemBaseWidget_SetItemDefinitionToRepresent");
static_assert(sizeof(FortItemBaseWidget_SetItemDefinitionToRepresent) == 0x000008, "Wrong size on FortItemBaseWidget_SetItemDefinitionToRepresent");
static_assert(offsetof(FortItemBaseWidget_SetItemDefinitionToRepresent, InItemDefinition) == 0x000000, "Member 'FortItemBaseWidget_SetItemDefinitionToRepresent::InItemDefinition' has a wrong offset!");

// Function FortniteUI.FortItemBaseWidget.SetItemQuantityPairToRepresent
// 0x0048 (0x0048 - 0x0000)
struct FortItemBaseWidget_SetItemQuantityPairToRepresent final
{
public:
	struct FFortItemQuantityPair                  InItemQuantityPair;                                // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemBaseWidget_SetItemQuantityPairToRepresent) == 0x000008, "Wrong alignment on FortItemBaseWidget_SetItemQuantityPairToRepresent");
static_assert(sizeof(FortItemBaseWidget_SetItemQuantityPairToRepresent) == 0x000048, "Wrong size on FortItemBaseWidget_SetItemQuantityPairToRepresent");
static_assert(offsetof(FortItemBaseWidget_SetItemQuantityPairToRepresent, InItemQuantityPair) == 0x000000, "Member 'FortItemBaseWidget_SetItemQuantityPairToRepresent::InItemQuantityPair' has a wrong offset!");
static_assert(offsetof(FortItemBaseWidget_SetItemQuantityPairToRepresent, ReturnValue) == 0x000040, "Member 'FortItemBaseWidget_SetItemQuantityPairToRepresent::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemBaseWidget.GetItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortItemBaseWidget_GetItemDefinition final
{
public:
	class UFortItemDefinition*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemBaseWidget_GetItemDefinition) == 0x000008, "Wrong alignment on FortItemBaseWidget_GetItemDefinition");
static_assert(sizeof(FortItemBaseWidget_GetItemDefinition) == 0x000008, "Wrong size on FortItemBaseWidget_GetItemDefinition");
static_assert(offsetof(FortItemBaseWidget_GetItemDefinition, ReturnValue) == 0x000000, "Member 'FortItemBaseWidget_GetItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemBaseWidget.GetQuantity
// 0x0004 (0x0004 - 0x0000)
struct FortItemBaseWidget_GetQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemBaseWidget_GetQuantity) == 0x000004, "Wrong alignment on FortItemBaseWidget_GetQuantity");
static_assert(sizeof(FortItemBaseWidget_GetQuantity) == 0x000004, "Wrong size on FortItemBaseWidget_GetQuantity");
static_assert(offsetof(FortItemBaseWidget_GetQuantity, ReturnValue) == 0x000000, "Member 'FortItemBaseWidget_GetQuantity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemCardUtilities.GetCardDimensions
// 0x000C (0x000C - 0x0000)
struct FortItemCardUtilities_GetCardDimensions final
{
public:
	EFortItemType                                 ItemType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemCardSize                             CardSize;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReward;                                          // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNewItemCardSizes;                               // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCardUtilities_GetCardDimensions) == 0x000004, "Wrong alignment on FortItemCardUtilities_GetCardDimensions");
static_assert(sizeof(FortItemCardUtilities_GetCardDimensions) == 0x00000C, "Wrong size on FortItemCardUtilities_GetCardDimensions");
static_assert(offsetof(FortItemCardUtilities_GetCardDimensions, ItemType) == 0x000000, "Member 'FortItemCardUtilities_GetCardDimensions::ItemType' has a wrong offset!");
static_assert(offsetof(FortItemCardUtilities_GetCardDimensions, CardSize) == 0x000001, "Member 'FortItemCardUtilities_GetCardDimensions::CardSize' has a wrong offset!");
static_assert(offsetof(FortItemCardUtilities_GetCardDimensions, IsReward) == 0x000002, "Member 'FortItemCardUtilities_GetCardDimensions::IsReward' has a wrong offset!");
static_assert(offsetof(FortItemCardUtilities_GetCardDimensions, UseNewItemCardSizes) == 0x000003, "Member 'FortItemCardUtilities_GetCardDimensions::UseNewItemCardSizes' has a wrong offset!");
static_assert(offsetof(FortItemCardUtilities_GetCardDimensions, ReturnValue) == 0x000004, "Member 'FortItemCardUtilities_GetCardDimensions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemCategoryIndicator.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortItemCategoryIndicator_SetItemToRepresent final
{
public:
	const class UFortItem*                        Param_ItemToRepresent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCategoryIndicator_SetItemToRepresent) == 0x000008, "Wrong alignment on FortItemCategoryIndicator_SetItemToRepresent");
static_assert(sizeof(FortItemCategoryIndicator_SetItemToRepresent) == 0x000008, "Wrong size on FortItemCategoryIndicator_SetItemToRepresent");
static_assert(offsetof(FortItemCategoryIndicator_SetItemToRepresent, Param_ItemToRepresent) == 0x000000, "Member 'FortItemCategoryIndicator_SetItemToRepresent::Param_ItemToRepresent' has a wrong offset!");

// Function FortniteUI.FortItemCategoryIndicator.SetLabelColorOverride
// 0x0010 (0x0010 - 0x0000)
struct FortItemCategoryIndicator_SetLabelColorOverride final
{
public:
	struct FLinearColor                           InLabelColorOverride;                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCategoryIndicator_SetLabelColorOverride) == 0x000004, "Wrong alignment on FortItemCategoryIndicator_SetLabelColorOverride");
static_assert(sizeof(FortItemCategoryIndicator_SetLabelColorOverride) == 0x000010, "Wrong size on FortItemCategoryIndicator_SetLabelColorOverride");
static_assert(offsetof(FortItemCategoryIndicator_SetLabelColorOverride, InLabelColorOverride) == 0x000000, "Member 'FortItemCategoryIndicator_SetLabelColorOverride::InLabelColorOverride' has a wrong offset!");

// Function FortniteUI.FortItemCategoryIndicator.SetOrdinalOfCategoryToRepresent
// 0x0001 (0x0001 - 0x0000)
struct FortItemCategoryIndicator_SetOrdinalOfCategoryToRepresent final
{
public:
	EFortItemCategoryOrdinal                      ItemCategoryOrdinal;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCategoryIndicator_SetOrdinalOfCategoryToRepresent) == 0x000001, "Wrong alignment on FortItemCategoryIndicator_SetOrdinalOfCategoryToRepresent");
static_assert(sizeof(FortItemCategoryIndicator_SetOrdinalOfCategoryToRepresent) == 0x000001, "Wrong size on FortItemCategoryIndicator_SetOrdinalOfCategoryToRepresent");
static_assert(offsetof(FortItemCategoryIndicator_SetOrdinalOfCategoryToRepresent, ItemCategoryOrdinal) == 0x000000, "Member 'FortItemCategoryIndicator_SetOrdinalOfCategoryToRepresent::ItemCategoryOrdinal' has a wrong offset!");

// Function FortniteUI.FortItemCooldownWidget.OnCooldownStarted
// 0x0001 (0x0001 - 0x0000)
struct FortItemCooldownWidget_OnCooldownStarted final
{
public:
	EFortItemCooldownType                         CooldownType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCooldownWidget_OnCooldownStarted) == 0x000001, "Wrong alignment on FortItemCooldownWidget_OnCooldownStarted");
static_assert(sizeof(FortItemCooldownWidget_OnCooldownStarted) == 0x000001, "Wrong size on FortItemCooldownWidget_OnCooldownStarted");
static_assert(offsetof(FortItemCooldownWidget_OnCooldownStarted, CooldownType) == 0x000000, "Member 'FortItemCooldownWidget_OnCooldownStarted::CooldownType' has a wrong offset!");

// Function FortniteUI.FortItemCooldownWidget.OnCooldownStopped
// 0x0001 (0x0001 - 0x0000)
struct FortItemCooldownWidget_OnCooldownStopped final
{
public:
	EFortItemCooldownType                         CooldownType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCooldownWidget_OnCooldownStopped) == 0x000001, "Wrong alignment on FortItemCooldownWidget_OnCooldownStopped");
static_assert(sizeof(FortItemCooldownWidget_OnCooldownStopped) == 0x000001, "Wrong size on FortItemCooldownWidget_OnCooldownStopped");
static_assert(offsetof(FortItemCooldownWidget_OnCooldownStopped, CooldownType) == 0x000000, "Member 'FortItemCooldownWidget_OnCooldownStopped::CooldownType' has a wrong offset!");

// Function FortniteUI.FortItemCooldownWidget.SetItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemCooldownWidget_SetItem final
{
public:
	const class UFortWorldItem*                   InWorldItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCooldownWidget_SetItem) == 0x000008, "Wrong alignment on FortItemCooldownWidget_SetItem");
static_assert(sizeof(FortItemCooldownWidget_SetItem) == 0x000008, "Wrong size on FortItemCooldownWidget_SetItem");
static_assert(offsetof(FortItemCooldownWidget_SetItem, InWorldItem) == 0x000000, "Member 'FortItemCooldownWidget_SetItem::InWorldItem' has a wrong offset!");

// Function FortniteUI.FortItemCountTextBlock.HandleItemCountChanged
// 0x0010 (0x0010 - 0x0000)
struct FortItemCountTextBlock_HandleItemCountChanged final
{
public:
	class UFortItemDefinition*                    Definition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delta;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemCountTextBlock_HandleItemCountChanged) == 0x000008, "Wrong alignment on FortItemCountTextBlock_HandleItemCountChanged");
static_assert(sizeof(FortItemCountTextBlock_HandleItemCountChanged) == 0x000010, "Wrong size on FortItemCountTextBlock_HandleItemCountChanged");
static_assert(offsetof(FortItemCountTextBlock_HandleItemCountChanged, Definition) == 0x000000, "Member 'FortItemCountTextBlock_HandleItemCountChanged::Definition' has a wrong offset!");
static_assert(offsetof(FortItemCountTextBlock_HandleItemCountChanged, Delta) == 0x000008, "Member 'FortItemCountTextBlock_HandleItemCountChanged::Delta' has a wrong offset!");

// Function FortniteUI.FortItemCountTextBlock.InterpolateOverrideToValue
// 0x0010 (0x0010 - 0x0000)
struct FortItemCountTextBlock_InterpolateOverrideToValue final
{
public:
	int32                                         TargetValue;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumInterpolationDuration;                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumChangeRate;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutroOffset;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCountTextBlock_InterpolateOverrideToValue) == 0x000004, "Wrong alignment on FortItemCountTextBlock_InterpolateOverrideToValue");
static_assert(sizeof(FortItemCountTextBlock_InterpolateOverrideToValue) == 0x000010, "Wrong size on FortItemCountTextBlock_InterpolateOverrideToValue");
static_assert(offsetof(FortItemCountTextBlock_InterpolateOverrideToValue, TargetValue) == 0x000000, "Member 'FortItemCountTextBlock_InterpolateOverrideToValue::TargetValue' has a wrong offset!");
static_assert(offsetof(FortItemCountTextBlock_InterpolateOverrideToValue, MaximumInterpolationDuration) == 0x000004, "Member 'FortItemCountTextBlock_InterpolateOverrideToValue::MaximumInterpolationDuration' has a wrong offset!");
static_assert(offsetof(FortItemCountTextBlock_InterpolateOverrideToValue, MinimumChangeRate) == 0x000008, "Member 'FortItemCountTextBlock_InterpolateOverrideToValue::MinimumChangeRate' has a wrong offset!");
static_assert(offsetof(FortItemCountTextBlock_InterpolateOverrideToValue, OutroOffset) == 0x00000C, "Member 'FortItemCountTextBlock_InterpolateOverrideToValue::OutroOffset' has a wrong offset!");

// Function FortniteUI.FortItemCountTextBlock.SetCountStyle
// 0x0001 (0x0001 - 0x0000)
struct FortItemCountTextBlock_SetCountStyle final
{
public:
	EFortItemCountStyle                           InCountStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCountTextBlock_SetCountStyle) == 0x000001, "Wrong alignment on FortItemCountTextBlock_SetCountStyle");
static_assert(sizeof(FortItemCountTextBlock_SetCountStyle) == 0x000001, "Wrong size on FortItemCountTextBlock_SetCountStyle");
static_assert(offsetof(FortItemCountTextBlock_SetCountStyle, InCountStyle) == 0x000000, "Member 'FortItemCountTextBlock_SetCountStyle::InCountStyle' has a wrong offset!");

// Function FortniteUI.FortItemCountTextBlock.SetItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortItemCountTextBlock_SetItemDefinition final
{
public:
	class UFortItemDefinition*                    InItemDefinition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCountTextBlock_SetItemDefinition) == 0x000008, "Wrong alignment on FortItemCountTextBlock_SetItemDefinition");
static_assert(sizeof(FortItemCountTextBlock_SetItemDefinition) == 0x000008, "Wrong size on FortItemCountTextBlock_SetItemDefinition");
static_assert(offsetof(FortItemCountTextBlock_SetItemDefinition, InItemDefinition) == 0x000000, "Member 'FortItemCountTextBlock_SetItemDefinition::InItemDefinition' has a wrong offset!");

// Function FortniteUI.FortItemCountTextBlock.SetOverrideValue
// 0x0004 (0x0004 - 0x0000)
struct FortItemCountTextBlock_SetOverrideValue final
{
public:
	int32                                         InOverrideValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCountTextBlock_SetOverrideValue) == 0x000004, "Wrong alignment on FortItemCountTextBlock_SetOverrideValue");
static_assert(sizeof(FortItemCountTextBlock_SetOverrideValue) == 0x000004, "Wrong size on FortItemCountTextBlock_SetOverrideValue");
static_assert(offsetof(FortItemCountTextBlock_SetOverrideValue, InOverrideValue) == 0x000000, "Member 'FortItemCountTextBlock_SetOverrideValue::InOverrideValue' has a wrong offset!");

// Function FortniteUI.FortItemCraftingOptionsActivatablePanel.OnBaseItemChanged
// 0x0008 (0x0008 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_OnBaseItemChanged final
{
public:
	class UFortSchematicItem*                     NewBaseItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_OnBaseItemChanged) == 0x000008, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_OnBaseItemChanged");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_OnBaseItemChanged) == 0x000008, "Wrong size on FortItemCraftingOptionsActivatablePanel_OnBaseItemChanged");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_OnBaseItemChanged, NewBaseItem) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_OnBaseItemChanged::NewBaseItem' has a wrong offset!");

// Function FortniteUI.FortItemCraftingOptionsActivatablePanel.OnMaxQuantityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_OnMaxQuantityChanged final
{
public:
	int32                                         NewMaxQuantity;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_OnMaxQuantityChanged) == 0x000004, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_OnMaxQuantityChanged");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_OnMaxQuantityChanged) == 0x000004, "Wrong size on FortItemCraftingOptionsActivatablePanel_OnMaxQuantityChanged");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_OnMaxQuantityChanged, NewMaxQuantity) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_OnMaxQuantityChanged::NewMaxQuantity' has a wrong offset!");

// Function FortniteUI.FortItemCraftingOptionsActivatablePanel.OnSelectedQuantityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_OnSelectedQuantityChanged final
{
public:
	int32                                         NewSelectedQuantity;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_OnSelectedQuantityChanged) == 0x000004, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_OnSelectedQuantityChanged");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_OnSelectedQuantityChanged) == 0x000004, "Wrong size on FortItemCraftingOptionsActivatablePanel_OnSelectedQuantityChanged");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_OnSelectedQuantityChanged, NewSelectedQuantity) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_OnSelectedQuantityChanged::NewSelectedQuantity' has a wrong offset!");

// Function FortniteUI.FortItemCraftingOptionsActivatablePanel.OnTargetItemChanged
// 0x0008 (0x0008 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_OnTargetItemChanged final
{
public:
	class UFortSchematicItem*                     NewTargetItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_OnTargetItemChanged) == 0x000008, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_OnTargetItemChanged");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_OnTargetItemChanged) == 0x000008, "Wrong size on FortItemCraftingOptionsActivatablePanel_OnTargetItemChanged");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_OnTargetItemChanged, NewTargetItem) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_OnTargetItemChanged::NewTargetItem' has a wrong offset!");

// Function FortniteUI.FortItemCraftingOptionsActivatablePanel.SetBaseSchematicItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_SetBaseSchematicItem final
{
public:
	class UFortSchematicItem*                     InBaseItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_SetBaseSchematicItem) == 0x000008, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_SetBaseSchematicItem");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_SetBaseSchematicItem) == 0x000008, "Wrong size on FortItemCraftingOptionsActivatablePanel_SetBaseSchematicItem");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_SetBaseSchematicItem, InBaseItem) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_SetBaseSchematicItem::InBaseItem' has a wrong offset!");

// Function FortniteUI.FortItemCraftingOptionsActivatablePanel.SetItemManagementScreen
// 0x0008 (0x0008 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_SetItemManagementScreen final
{
public:
	class UFortItemManagementScreen*              InItemManagementScreen;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_SetItemManagementScreen) == 0x000008, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_SetItemManagementScreen");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_SetItemManagementScreen) == 0x000008, "Wrong size on FortItemCraftingOptionsActivatablePanel_SetItemManagementScreen");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_SetItemManagementScreen, InItemManagementScreen) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_SetItemManagementScreen::InItemManagementScreen' has a wrong offset!");

// Function FortniteUI.FortItemCraftingOptionsActivatablePanel.SetSelectedQuantity_BP
// 0x0004 (0x0004 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_SetSelectedQuantity_BP final
{
public:
	int32                                         NewQuantity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_SetSelectedQuantity_BP) == 0x000004, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_SetSelectedQuantity_BP");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_SetSelectedQuantity_BP) == 0x000004, "Wrong size on FortItemCraftingOptionsActivatablePanel_SetSelectedQuantity_BP");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_SetSelectedQuantity_BP, NewQuantity) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_SetSelectedQuantity_BP::NewQuantity' has a wrong offset!");

// Function FortniteUI.FortItemCraftingOptionsActivatablePanel.SetTargetCraftingTierIndex
// 0x0004 (0x0004 - 0x0000)
struct FortItemCraftingOptionsActivatablePanel_SetTargetCraftingTierIndex final
{
public:
	int32                                         NewTierIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftingOptionsActivatablePanel_SetTargetCraftingTierIndex) == 0x000004, "Wrong alignment on FortItemCraftingOptionsActivatablePanel_SetTargetCraftingTierIndex");
static_assert(sizeof(FortItemCraftingOptionsActivatablePanel_SetTargetCraftingTierIndex) == 0x000004, "Wrong size on FortItemCraftingOptionsActivatablePanel_SetTargetCraftingTierIndex");
static_assert(offsetof(FortItemCraftingOptionsActivatablePanel_SetTargetCraftingTierIndex, NewTierIndex) == 0x000000, "Member 'FortItemCraftingOptionsActivatablePanel_SetTargetCraftingTierIndex::NewTierIndex' has a wrong offset!");

// Function FortniteUI.FortItemDetailsModeActivatablePanel.HandleOnActiveWidgetChanged
// 0x0010 (0x0010 - 0x0000)
struct FortItemDetailsModeActivatablePanel_HandleOnActiveWidgetChanged final
{
public:
	class UWidget*                                ActiveWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveWidgetIndex;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemDetailsModeActivatablePanel_HandleOnActiveWidgetChanged) == 0x000008, "Wrong alignment on FortItemDetailsModeActivatablePanel_HandleOnActiveWidgetChanged");
static_assert(sizeof(FortItemDetailsModeActivatablePanel_HandleOnActiveWidgetChanged) == 0x000010, "Wrong size on FortItemDetailsModeActivatablePanel_HandleOnActiveWidgetChanged");
static_assert(offsetof(FortItemDetailsModeActivatablePanel_HandleOnActiveWidgetChanged, ActiveWidget) == 0x000000, "Member 'FortItemDetailsModeActivatablePanel_HandleOnActiveWidgetChanged::ActiveWidget' has a wrong offset!");
static_assert(offsetof(FortItemDetailsModeActivatablePanel_HandleOnActiveWidgetChanged, ActiveWidgetIndex) == 0x000008, "Member 'FortItemDetailsModeActivatablePanel_HandleOnActiveWidgetChanged::ActiveWidgetIndex' has a wrong offset!");

// Function FortniteUI.FortItemDetailsPanel.HandleCursorModeChanged
// 0x0018 (0x0018 - 0x0000)
struct FortItemDetailsPanel_HandleCursorModeChanged final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CustomWidget;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsPanel_HandleCursorModeChanged) == 0x000008, "Wrong alignment on FortItemDetailsPanel_HandleCursorModeChanged");
static_assert(sizeof(FortItemDetailsPanel_HandleCursorModeChanged) == 0x000018, "Wrong size on FortItemDetailsPanel_HandleCursorModeChanged");
static_assert(offsetof(FortItemDetailsPanel_HandleCursorModeChanged, bCursorModeEnabled) == 0x000000, "Member 'FortItemDetailsPanel_HandleCursorModeChanged::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(FortItemDetailsPanel_HandleCursorModeChanged, ActionName) == 0x000004, "Member 'FortItemDetailsPanel_HandleCursorModeChanged::ActionName' has a wrong offset!");
static_assert(offsetof(FortItemDetailsPanel_HandleCursorModeChanged, CustomWidget) == 0x000010, "Member 'FortItemDetailsPanel_HandleCursorModeChanged::CustomWidget' has a wrong offset!");

// Function FortniteUI.FortItemDetailsPanel.HandleItemToCompareWithChanged
// 0x0003 (0x0003 - 0x0000)
struct FortItemDetailsPanel_HandleItemToCompareWithChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsPanel_HandleItemToCompareWithChanged) == 0x000001, "Wrong alignment on FortItemDetailsPanel_HandleItemToCompareWithChanged");
static_assert(sizeof(FortItemDetailsPanel_HandleItemToCompareWithChanged) == 0x000003, "Wrong size on FortItemDetailsPanel_HandleItemToCompareWithChanged");
static_assert(offsetof(FortItemDetailsPanel_HandleItemToCompareWithChanged, bItemChanged) == 0x000000, "Member 'FortItemDetailsPanel_HandleItemToCompareWithChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortItemDetailsPanel_HandleItemToCompareWithChanged, bAmmoChanged) == 0x000001, "Member 'FortItemDetailsPanel_HandleItemToCompareWithChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortItemDetailsPanel_HandleItemToCompareWithChanged, bIngredientsChanged) == 0x000002, "Member 'FortItemDetailsPanel_HandleItemToCompareWithChanged::bIngredientsChanged' has a wrong offset!");

// Function FortniteUI.FortItemDetailsPanel.HandleItemToDetailChanged
// 0x0003 (0x0003 - 0x0000)
struct FortItemDetailsPanel_HandleItemToDetailChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsPanel_HandleItemToDetailChanged) == 0x000001, "Wrong alignment on FortItemDetailsPanel_HandleItemToDetailChanged");
static_assert(sizeof(FortItemDetailsPanel_HandleItemToDetailChanged) == 0x000003, "Wrong size on FortItemDetailsPanel_HandleItemToDetailChanged");
static_assert(offsetof(FortItemDetailsPanel_HandleItemToDetailChanged, bItemChanged) == 0x000000, "Member 'FortItemDetailsPanel_HandleItemToDetailChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortItemDetailsPanel_HandleItemToDetailChanged, bAmmoChanged) == 0x000001, "Member 'FortItemDetailsPanel_HandleItemToDetailChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortItemDetailsPanel_HandleItemToDetailChanged, bIngredientsChanged) == 0x000002, "Member 'FortItemDetailsPanel_HandleItemToDetailChanged::bIngredientsChanged' has a wrong offset!");

// Function FortniteUI.FortItemDetailsPanel.SetItemToCompareWith
// 0x0008 (0x0008 - 0x0000)
struct FortItemDetailsPanel_SetItemToCompareWith final
{
public:
	const class UFortItem*                        Param_ItemToCompareWith;                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsPanel_SetItemToCompareWith) == 0x000008, "Wrong alignment on FortItemDetailsPanel_SetItemToCompareWith");
static_assert(sizeof(FortItemDetailsPanel_SetItemToCompareWith) == 0x000008, "Wrong size on FortItemDetailsPanel_SetItemToCompareWith");
static_assert(offsetof(FortItemDetailsPanel_SetItemToCompareWith, Param_ItemToCompareWith) == 0x000000, "Member 'FortItemDetailsPanel_SetItemToCompareWith::Param_ItemToCompareWith' has a wrong offset!");

// Function FortniteUI.FortItemDetailsPanel.SetItemToDetail
// 0x0008 (0x0008 - 0x0000)
struct FortItemDetailsPanel_SetItemToDetail final
{
public:
	const class UFortItem*                        Param_ItemToDetail;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDetailsPanel_SetItemToDetail) == 0x000008, "Wrong alignment on FortItemDetailsPanel_SetItemToDetail");
static_assert(sizeof(FortItemDetailsPanel_SetItemToDetail) == 0x000008, "Wrong size on FortItemDetailsPanel_SetItemToDetail");
static_assert(offsetof(FortItemDetailsPanel_SetItemToDetail, Param_ItemToDetail) == 0x000000, "Member 'FortItemDetailsPanel_SetItemToDetail::Param_ItemToDetail' has a wrong offset!");

// Function FortniteUI.FortItemDisplayNameText.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortItemDisplayNameText_SetItemToRepresent final
{
public:
	class UFortItem*                              Param_ItemToRepresent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDisplayNameText_SetItemToRepresent) == 0x000008, "Wrong alignment on FortItemDisplayNameText_SetItemToRepresent");
static_assert(sizeof(FortItemDisplayNameText_SetItemToRepresent) == 0x000008, "Wrong size on FortItemDisplayNameText_SetItemToRepresent");
static_assert(offsetof(FortItemDisplayNameText_SetItemToRepresent, Param_ItemToRepresent) == 0x000000, "Member 'FortItemDisplayNameText_SetItemToRepresent::Param_ItemToRepresent' has a wrong offset!");

// Function FortniteUI.FortItemInfoWidget.PopulateUsingItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemInfoWidget_PopulateUsingItem final
{
public:
	class UFortItem*                              NewItem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInfoWidget_PopulateUsingItem) == 0x000008, "Wrong alignment on FortItemInfoWidget_PopulateUsingItem");
static_assert(sizeof(FortItemInfoWidget_PopulateUsingItem) == 0x000008, "Wrong size on FortItemInfoWidget_PopulateUsingItem");
static_assert(offsetof(FortItemInfoWidget_PopulateUsingItem, NewItem) == 0x000000, "Member 'FortItemInfoWidget_PopulateUsingItem::NewItem' has a wrong offset!");

// Function FortniteUI.FortItemInfoWidget.PopulateUsingItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortItemInfoWidget_PopulateUsingItemDefinition final
{
public:
	class UFortItemDefinition*                    NewItem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInfoWidget_PopulateUsingItemDefinition) == 0x000008, "Wrong alignment on FortItemInfoWidget_PopulateUsingItemDefinition");
static_assert(sizeof(FortItemInfoWidget_PopulateUsingItemDefinition) == 0x000008, "Wrong size on FortItemInfoWidget_PopulateUsingItemDefinition");
static_assert(offsetof(FortItemInfoWidget_PopulateUsingItemDefinition, NewItem) == 0x000000, "Member 'FortItemInfoWidget_PopulateUsingItemDefinition::NewItem' has a wrong offset!");

// Function FortniteUI.FortItemInspectCycleWidget.OnItemCycled
// 0x0018 (0x0018 - 0x0000)
struct FortItemInspectCycleWidget_OnItemCycled final
{
public:
	class UFortItem*                              OldItem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              NewItem;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetFromPreviousItem;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemInspectCycleWidget_OnItemCycled) == 0x000008, "Wrong alignment on FortItemInspectCycleWidget_OnItemCycled");
static_assert(sizeof(FortItemInspectCycleWidget_OnItemCycled) == 0x000018, "Wrong size on FortItemInspectCycleWidget_OnItemCycled");
static_assert(offsetof(FortItemInspectCycleWidget_OnItemCycled, OldItem) == 0x000000, "Member 'FortItemInspectCycleWidget_OnItemCycled::OldItem' has a wrong offset!");
static_assert(offsetof(FortItemInspectCycleWidget_OnItemCycled, NewItem) == 0x000008, "Member 'FortItemInspectCycleWidget_OnItemCycled::NewItem' has a wrong offset!");
static_assert(offsetof(FortItemInspectCycleWidget_OnItemCycled, OffsetFromPreviousItem) == 0x000010, "Member 'FortItemInspectCycleWidget_OnItemCycled::OffsetFromPreviousItem' has a wrong offset!");

// Function FortniteUI.FortItemInspectCycleWidget.SelectItemWithOffset
// 0x0004 (0x0004 - 0x0000)
struct FortItemInspectCycleWidget_SelectItemWithOffset final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectCycleWidget_SelectItemWithOffset) == 0x000004, "Wrong alignment on FortItemInspectCycleWidget_SelectItemWithOffset");
static_assert(sizeof(FortItemInspectCycleWidget_SelectItemWithOffset) == 0x000004, "Wrong size on FortItemInspectCycleWidget_SelectItemWithOffset");
static_assert(offsetof(FortItemInspectCycleWidget_SelectItemWithOffset, Offset) == 0x000000, "Member 'FortItemInspectCycleWidget_SelectItemWithOffset::Offset' has a wrong offset!");

// Function FortniteUI.FortItemInspectCycleWidget.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortItemInspectCycleWidget_SetItemToRepresent final
{
public:
	const class UFortItem*                        NewItemToRepresent;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectCycleWidget_SetItemToRepresent) == 0x000008, "Wrong alignment on FortItemInspectCycleWidget_SetItemToRepresent");
static_assert(sizeof(FortItemInspectCycleWidget_SetItemToRepresent) == 0x000008, "Wrong size on FortItemInspectCycleWidget_SetItemToRepresent");
static_assert(offsetof(FortItemInspectCycleWidget_SetItemToRepresent, NewItemToRepresent) == 0x000000, "Member 'FortItemInspectCycleWidget_SetItemToRepresent::NewItemToRepresent' has a wrong offset!");

// Function FortniteUI.FortItemInspectCycleWidget.SetOwningItemInspectScreen
// 0x0008 (0x0008 - 0x0000)
struct FortItemInspectCycleWidget_SetOwningItemInspectScreen final
{
public:
	class UFortItemInspectionScreen*              ItemInspect;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectCycleWidget_SetOwningItemInspectScreen) == 0x000008, "Wrong alignment on FortItemInspectCycleWidget_SetOwningItemInspectScreen");
static_assert(sizeof(FortItemInspectCycleWidget_SetOwningItemInspectScreen) == 0x000008, "Wrong size on FortItemInspectCycleWidget_SetOwningItemInspectScreen");
static_assert(offsetof(FortItemInspectCycleWidget_SetOwningItemInspectScreen, ItemInspect) == 0x000000, "Member 'FortItemInspectCycleWidget_SetOwningItemInspectScreen::ItemInspect' has a wrong offset!");

// Function FortniteUI.FortItemInspectCycleWidget.GetItemWithOffset_BP
// 0x0010 (0x0010 - 0x0000)
struct FortItemInspectCycleWidget_GetItemWithOffset_BP final
{
public:
	int32                                         IndexOffset;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemInspectCycleWidget_GetItemWithOffset_BP) == 0x000008, "Wrong alignment on FortItemInspectCycleWidget_GetItemWithOffset_BP");
static_assert(sizeof(FortItemInspectCycleWidget_GetItemWithOffset_BP) == 0x000010, "Wrong size on FortItemInspectCycleWidget_GetItemWithOffset_BP");
static_assert(offsetof(FortItemInspectCycleWidget_GetItemWithOffset_BP, IndexOffset) == 0x000000, "Member 'FortItemInspectCycleWidget_GetItemWithOffset_BP::IndexOffset' has a wrong offset!");
static_assert(offsetof(FortItemInspectCycleWidget_GetItemWithOffset_BP, ReturnValue) == 0x000008, "Member 'FortItemInspectCycleWidget_GetItemWithOffset_BP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.HandleItemEvolutionBegun
// 0x0010 (0x0010 - 0x0000)
struct FortItemListViewInterface_HandleItemEvolutionBegun final
{
public:
	class FString                                 OriginalItemInstanceId;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_HandleItemEvolutionBegun) == 0x000008, "Wrong alignment on FortItemListViewInterface_HandleItemEvolutionBegun");
static_assert(sizeof(FortItemListViewInterface_HandleItemEvolutionBegun) == 0x000010, "Wrong size on FortItemListViewInterface_HandleItemEvolutionBegun");
static_assert(offsetof(FortItemListViewInterface_HandleItemEvolutionBegun, OriginalItemInstanceId) == 0x000000, "Member 'FortItemListViewInterface_HandleItemEvolutionBegun::OriginalItemInstanceId' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.HandleItemEvolutionCompleted
// 0x0028 (0x0028 - 0x0000)
struct FortItemListViewInterface_HandleItemEvolutionCompleted final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OriginalItemInstanceId;                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemInstanceQuantityPair>  ItemQuantities;                                    // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_HandleItemEvolutionCompleted) == 0x000008, "Wrong alignment on FortItemListViewInterface_HandleItemEvolutionCompleted");
static_assert(sizeof(FortItemListViewInterface_HandleItemEvolutionCompleted) == 0x000028, "Wrong size on FortItemListViewInterface_HandleItemEvolutionCompleted");
static_assert(offsetof(FortItemListViewInterface_HandleItemEvolutionCompleted, bWasSuccessful) == 0x000000, "Member 'FortItemListViewInterface_HandleItemEvolutionCompleted::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(FortItemListViewInterface_HandleItemEvolutionCompleted, OriginalItemInstanceId) == 0x000008, "Member 'FortItemListViewInterface_HandleItemEvolutionCompleted::OriginalItemInstanceId' has a wrong offset!");
static_assert(offsetof(FortItemListViewInterface_HandleItemEvolutionCompleted, ItemQuantities) == 0x000018, "Member 'FortItemListViewInterface_HandleItemEvolutionCompleted::ItemQuantities' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.HandleItemRarityUpgradeBegun
// 0x0010 (0x0010 - 0x0000)
struct FortItemListViewInterface_HandleItemRarityUpgradeBegun final
{
public:
	class FString                                 OriginalItemInstanceId;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_HandleItemRarityUpgradeBegun) == 0x000008, "Wrong alignment on FortItemListViewInterface_HandleItemRarityUpgradeBegun");
static_assert(sizeof(FortItemListViewInterface_HandleItemRarityUpgradeBegun) == 0x000010, "Wrong size on FortItemListViewInterface_HandleItemRarityUpgradeBegun");
static_assert(offsetof(FortItemListViewInterface_HandleItemRarityUpgradeBegun, OriginalItemInstanceId) == 0x000000, "Member 'FortItemListViewInterface_HandleItemRarityUpgradeBegun::OriginalItemInstanceId' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.HandleItemRarityUpgradeCompleted
// 0x0028 (0x0028 - 0x0000)
struct FortItemListViewInterface_HandleItemRarityUpgradeCompleted final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OriginalItemInstanceId;                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemInstanceQuantityPair>  ItemQuantities;                                    // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_HandleItemRarityUpgradeCompleted) == 0x000008, "Wrong alignment on FortItemListViewInterface_HandleItemRarityUpgradeCompleted");
static_assert(sizeof(FortItemListViewInterface_HandleItemRarityUpgradeCompleted) == 0x000028, "Wrong size on FortItemListViewInterface_HandleItemRarityUpgradeCompleted");
static_assert(offsetof(FortItemListViewInterface_HandleItemRarityUpgradeCompleted, bWasSuccessful) == 0x000000, "Member 'FortItemListViewInterface_HandleItemRarityUpgradeCompleted::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(FortItemListViewInterface_HandleItemRarityUpgradeCompleted, OriginalItemInstanceId) == 0x000008, "Member 'FortItemListViewInterface_HandleItemRarityUpgradeCompleted::OriginalItemInstanceId' has a wrong offset!");
static_assert(offsetof(FortItemListViewInterface_HandleItemRarityUpgradeCompleted, ItemQuantities) == 0x000018, "Member 'FortItemListViewInterface_HandleItemRarityUpgradeCompleted::ItemQuantities' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.HandleItemRefundBegun
// 0x0010 (0x0010 - 0x0000)
struct FortItemListViewInterface_HandleItemRefundBegun final
{
public:
	class FString                                 OriginalItemInstanceId;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_HandleItemRefundBegun) == 0x000008, "Wrong alignment on FortItemListViewInterface_HandleItemRefundBegun");
static_assert(sizeof(FortItemListViewInterface_HandleItemRefundBegun) == 0x000010, "Wrong size on FortItemListViewInterface_HandleItemRefundBegun");
static_assert(offsetof(FortItemListViewInterface_HandleItemRefundBegun, OriginalItemInstanceId) == 0x000000, "Member 'FortItemListViewInterface_HandleItemRefundBegun::OriginalItemInstanceId' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.HandleItemRefundCompleted
// 0x0028 (0x0028 - 0x0000)
struct FortItemListViewInterface_HandleItemRefundCompleted final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OriginalItemInstanceId;                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemInstanceQuantityPair>  ItemQuantities;                                    // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_HandleItemRefundCompleted) == 0x000008, "Wrong alignment on FortItemListViewInterface_HandleItemRefundCompleted");
static_assert(sizeof(FortItemListViewInterface_HandleItemRefundCompleted) == 0x000028, "Wrong size on FortItemListViewInterface_HandleItemRefundCompleted");
static_assert(offsetof(FortItemListViewInterface_HandleItemRefundCompleted, bWasSuccessful) == 0x000000, "Member 'FortItemListViewInterface_HandleItemRefundCompleted::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(FortItemListViewInterface_HandleItemRefundCompleted, OriginalItemInstanceId) == 0x000008, "Member 'FortItemListViewInterface_HandleItemRefundCompleted::OriginalItemInstanceId' has a wrong offset!");
static_assert(offsetof(FortItemListViewInterface_HandleItemRefundCompleted, ItemQuantities) == 0x000018, "Member 'FortItemListViewInterface_HandleItemRefundCompleted::ItemQuantities' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.SetConfig
// 0x00C0 (0x00C0 - 0x0000)
struct FortItemListViewInterface_SetConfig final
{
public:
	struct FFortItemListViewConfig                Config;                                            // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_SetConfig) == 0x000010, "Wrong alignment on FortItemListViewInterface_SetConfig");
static_assert(sizeof(FortItemListViewInterface_SetConfig) == 0x0000C0, "Wrong size on FortItemListViewInterface_SetConfig");
static_assert(offsetof(FortItemListViewInterface_SetConfig, Config) == 0x000000, "Member 'FortItemListViewInterface_SetConfig::Config' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.SetCustomItemList
// 0x0010 (0x0010 - 0x0000)
struct FortItemListViewInterface_SetCustomItemList final
{
public:
	TArray<class UFortItem*>                      ItemList;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_SetCustomItemList) == 0x000008, "Wrong alignment on FortItemListViewInterface_SetCustomItemList");
static_assert(sizeof(FortItemListViewInterface_SetCustomItemList) == 0x000010, "Wrong size on FortItemListViewInterface_SetCustomItemList");
static_assert(offsetof(FortItemListViewInterface_SetCustomItemList, ItemList) == 0x000000, "Member 'FortItemListViewInterface_SetCustomItemList::ItemList' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.SetFilter
// 0x0060 (0x0060 - 0x0000)
struct FortItemListViewInterface_SetFilter final
{
public:
	struct FFortItemFilterDefinition              Filter;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_SetFilter) == 0x000010, "Wrong alignment on FortItemListViewInterface_SetFilter");
static_assert(sizeof(FortItemListViewInterface_SetFilter) == 0x000060, "Wrong size on FortItemListViewInterface_SetFilter");
static_assert(offsetof(FortItemListViewInterface_SetFilter, Filter) == 0x000000, "Member 'FortItemListViewInterface_SetFilter::Filter' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.SetFilterAndSorter
// 0x00B0 (0x00B0 - 0x0000)
struct FortItemListViewInterface_SetFilterAndSorter final
{
public:
	struct FFortItemFilterDefinition              Filter;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortItemSorterDefinition              Sorter;                                            // 0x0060(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_SetFilterAndSorter) == 0x000010, "Wrong alignment on FortItemListViewInterface_SetFilterAndSorter");
static_assert(sizeof(FortItemListViewInterface_SetFilterAndSorter) == 0x0000B0, "Wrong size on FortItemListViewInterface_SetFilterAndSorter");
static_assert(offsetof(FortItemListViewInterface_SetFilterAndSorter, Filter) == 0x000000, "Member 'FortItemListViewInterface_SetFilterAndSorter::Filter' has a wrong offset!");
static_assert(offsetof(FortItemListViewInterface_SetFilterAndSorter, Sorter) == 0x000060, "Member 'FortItemListViewInterface_SetFilterAndSorter::Sorter' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.SetItemViewContext
// 0x0010 (0x0010 - 0x0000)
struct FortItemListViewInterface_SetItemViewContext final
{
public:
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_SetItemViewContext) == 0x000008, "Wrong alignment on FortItemListViewInterface_SetItemViewContext");
static_assert(sizeof(FortItemListViewInterface_SetItemViewContext) == 0x000010, "Wrong size on FortItemListViewInterface_SetItemViewContext");
static_assert(offsetof(FortItemListViewInterface_SetItemViewContext, ItemViewContext) == 0x000000, "Member 'FortItemListViewInterface_SetItemViewContext::ItemViewContext' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.SetSorter
// 0x0050 (0x0050 - 0x0000)
struct FortItemListViewInterface_SetSorter final
{
public:
	struct FFortItemSorterDefinition              Sorter;                                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_SetSorter) == 0x000010, "Wrong alignment on FortItemListViewInterface_SetSorter");
static_assert(sizeof(FortItemListViewInterface_SetSorter) == 0x000050, "Wrong size on FortItemListViewInterface_SetSorter");
static_assert(offsetof(FortItemListViewInterface_SetSorter, Sorter) == 0x000000, "Member 'FortItemListViewInterface_SetSorter::Sorter' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.ContainsItem
// 0x0010 (0x0010 - 0x0000)
struct FortItemListViewInterface_ContainsItem final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemListViewInterface_ContainsItem) == 0x000008, "Wrong alignment on FortItemListViewInterface_ContainsItem");
static_assert(sizeof(FortItemListViewInterface_ContainsItem) == 0x000010, "Wrong size on FortItemListViewInterface_ContainsItem");
static_assert(offsetof(FortItemListViewInterface_ContainsItem, Item) == 0x000000, "Member 'FortItemListViewInterface_ContainsItem::Item' has a wrong offset!");
static_assert(offsetof(FortItemListViewInterface_ContainsItem, ReturnValue) == 0x000008, "Member 'FortItemListViewInterface_ContainsItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.GetConfig
// 0x00C0 (0x00C0 - 0x0000)
struct FortItemListViewInterface_GetConfig final
{
public:
	struct FFortItemListViewConfig                ReturnValue;                                       // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_GetConfig) == 0x000010, "Wrong alignment on FortItemListViewInterface_GetConfig");
static_assert(sizeof(FortItemListViewInterface_GetConfig) == 0x0000C0, "Wrong size on FortItemListViewInterface_GetConfig");
static_assert(offsetof(FortItemListViewInterface_GetConfig, ReturnValue) == 0x000000, "Member 'FortItemListViewInterface_GetConfig::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.GetFilter
// 0x0060 (0x0060 - 0x0000)
struct FortItemListViewInterface_GetFilter final
{
public:
	struct FFortItemFilterDefinition              ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_GetFilter) == 0x000010, "Wrong alignment on FortItemListViewInterface_GetFilter");
static_assert(sizeof(FortItemListViewInterface_GetFilter) == 0x000060, "Wrong size on FortItemListViewInterface_GetFilter");
static_assert(offsetof(FortItemListViewInterface_GetFilter, ReturnValue) == 0x000000, "Member 'FortItemListViewInterface_GetFilter::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemListViewInterface.GetSorter
// 0x0050 (0x0050 - 0x0000)
struct FortItemListViewInterface_GetSorter final
{
public:
	struct FFortItemSorterDefinition              ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemListViewInterface_GetSorter) == 0x000010, "Wrong alignment on FortItemListViewInterface_GetSorter");
static_assert(sizeof(FortItemListViewInterface_GetSorter) == 0x000050, "Wrong size on FortItemListViewInterface_GetSorter");
static_assert(offsetof(FortItemListViewInterface_GetSorter, ReturnValue) == 0x000000, "Member 'FortItemListViewInterface_GetSorter::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementCustomFilterModalWidget.OnEndCommitCustomFilter
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementCustomFilterModalWidget_OnEndCommitCustomFilter final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementCustomFilterModalWidget_OnEndCommitCustomFilter) == 0x000001, "Wrong alignment on FortItemManagementCustomFilterModalWidget_OnEndCommitCustomFilter");
static_assert(sizeof(FortItemManagementCustomFilterModalWidget_OnEndCommitCustomFilter) == 0x000001, "Wrong size on FortItemManagementCustomFilterModalWidget_OnEndCommitCustomFilter");
static_assert(offsetof(FortItemManagementCustomFilterModalWidget_OnEndCommitCustomFilter, bWasSuccessful) == 0x000000, "Member 'FortItemManagementCustomFilterModalWidget_OnEndCommitCustomFilter::bWasSuccessful' has a wrong offset!");

// Function FortniteUI.FortItemManagementCustomFilterModalWidget.ToggleFilter
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementCustomFilterModalWidget_ToggleFilter final
{
public:
	EFortInventoryCustomFilter                    Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementCustomFilterModalWidget_ToggleFilter) == 0x000001, "Wrong alignment on FortItemManagementCustomFilterModalWidget_ToggleFilter");
static_assert(sizeof(FortItemManagementCustomFilterModalWidget_ToggleFilter) == 0x000001, "Wrong size on FortItemManagementCustomFilterModalWidget_ToggleFilter");
static_assert(offsetof(FortItemManagementCustomFilterModalWidget_ToggleFilter, Filter) == 0x000000, "Member 'FortItemManagementCustomFilterModalWidget_ToggleFilter::Filter' has a wrong offset!");

// Function FortniteUI.FortItemManagementCustomFilterModalWidget.IsCustomFilterEnabled
// 0x0002 (0x0002 - 0x0000)
struct FortItemManagementCustomFilterModalWidget_IsCustomFilterEnabled final
{
public:
	EFortInventoryCustomFilter                    Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementCustomFilterModalWidget_IsCustomFilterEnabled) == 0x000001, "Wrong alignment on FortItemManagementCustomFilterModalWidget_IsCustomFilterEnabled");
static_assert(sizeof(FortItemManagementCustomFilterModalWidget_IsCustomFilterEnabled) == 0x000002, "Wrong size on FortItemManagementCustomFilterModalWidget_IsCustomFilterEnabled");
static_assert(offsetof(FortItemManagementCustomFilterModalWidget_IsCustomFilterEnabled, Filter) == 0x000000, "Member 'FortItemManagementCustomFilterModalWidget_IsCustomFilterEnabled::Filter' has a wrong offset!");
static_assert(offsetof(FortItemManagementCustomFilterModalWidget_IsCustomFilterEnabled, ReturnValue) == 0x000001, "Member 'FortItemManagementCustomFilterModalWidget_IsCustomFilterEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.AddItemStackToMulch
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementInventoryPanel_AddItemStackToMulch final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemManagementInventoryPanel_AddItemStackToMulch) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_AddItemStackToMulch");
static_assert(sizeof(FortItemManagementInventoryPanel_AddItemStackToMulch) == 0x000010, "Wrong size on FortItemManagementInventoryPanel_AddItemStackToMulch");
static_assert(offsetof(FortItemManagementInventoryPanel_AddItemStackToMulch, Item) == 0x000000, "Member 'FortItemManagementInventoryPanel_AddItemStackToMulch::Item' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_AddItemStackToMulch, Count) == 0x000008, "Member 'FortItemManagementInventoryPanel_AddItemStackToMulch::Count' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.GetShouldPrioritizeFavorites
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_GetShouldPrioritizeFavorites final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_GetShouldPrioritizeFavorites) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_GetShouldPrioritizeFavorites");
static_assert(sizeof(FortItemManagementInventoryPanel_GetShouldPrioritizeFavorites) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_GetShouldPrioritizeFavorites");
static_assert(offsetof(FortItemManagementInventoryPanel_GetShouldPrioritizeFavorites, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_GetShouldPrioritizeFavorites::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.HandleCursorModeChanged
// 0x0018 (0x0018 - 0x0000)
struct FortItemManagementInventoryPanel_HandleCursorModeChanged final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CursorModeContentWidget;                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_HandleCursorModeChanged) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_HandleCursorModeChanged");
static_assert(sizeof(FortItemManagementInventoryPanel_HandleCursorModeChanged) == 0x000018, "Wrong size on FortItemManagementInventoryPanel_HandleCursorModeChanged");
static_assert(offsetof(FortItemManagementInventoryPanel_HandleCursorModeChanged, bCursorModeEnabled) == 0x000000, "Member 'FortItemManagementInventoryPanel_HandleCursorModeChanged::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_HandleCursorModeChanged, ActionName) == 0x000004, "Member 'FortItemManagementInventoryPanel_HandleCursorModeChanged::ActionName' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_HandleCursorModeChanged, CursorModeContentWidget) == 0x000010, "Member 'FortItemManagementInventoryPanel_HandleCursorModeChanged::CursorModeContentWidget' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.HandleCursorModeChangedBP
// 0x0018 (0x0018 - 0x0000)
struct FortItemManagementInventoryPanel_HandleCursorModeChangedBP final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CursorModeContentWidget;                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_HandleCursorModeChangedBP) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_HandleCursorModeChangedBP");
static_assert(sizeof(FortItemManagementInventoryPanel_HandleCursorModeChangedBP) == 0x000018, "Wrong size on FortItemManagementInventoryPanel_HandleCursorModeChangedBP");
static_assert(offsetof(FortItemManagementInventoryPanel_HandleCursorModeChangedBP, bCursorModeEnabled) == 0x000000, "Member 'FortItemManagementInventoryPanel_HandleCursorModeChangedBP::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_HandleCursorModeChangedBP, ActionName) == 0x000004, "Member 'FortItemManagementInventoryPanel_HandleCursorModeChangedBP::ActionName' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_HandleCursorModeChangedBP, CursorModeContentWidget) == 0x000010, "Member 'FortItemManagementInventoryPanel_HandleCursorModeChangedBP::CursorModeContentWidget' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.HandleFilterTabButtonCreated
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementInventoryPanel_HandleFilterTabButtonCreated final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonButton*                          TabButton;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_HandleFilterTabButtonCreated) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_HandleFilterTabButtonCreated");
static_assert(sizeof(FortItemManagementInventoryPanel_HandleFilterTabButtonCreated) == 0x000010, "Wrong size on FortItemManagementInventoryPanel_HandleFilterTabButtonCreated");
static_assert(offsetof(FortItemManagementInventoryPanel_HandleFilterTabButtonCreated, TabNameID) == 0x000000, "Member 'FortItemManagementInventoryPanel_HandleFilterTabButtonCreated::TabNameID' has a wrong offset!");
static_assert(offsetof(FortItemManagementInventoryPanel_HandleFilterTabButtonCreated, TabButton) == 0x000008, "Member 'FortItemManagementInventoryPanel_HandleFilterTabButtonCreated::TabButton' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.HandleFilterTabSelected
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementInventoryPanel_HandleFilterTabSelected final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_HandleFilterTabSelected) == 0x000004, "Wrong alignment on FortItemManagementInventoryPanel_HandleFilterTabSelected");
static_assert(sizeof(FortItemManagementInventoryPanel_HandleFilterTabSelected) == 0x000008, "Wrong size on FortItemManagementInventoryPanel_HandleFilterTabSelected");
static_assert(offsetof(FortItemManagementInventoryPanel_HandleFilterTabSelected, TabNameID) == 0x000000, "Member 'FortItemManagementInventoryPanel_HandleFilterTabSelected::TabNameID' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.HandleQuickBarChangedBP
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_HandleQuickBarChangedBP final
{
public:
	EFortQuickBars                                QuickBarType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_HandleQuickBarChangedBP) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_HandleQuickBarChangedBP");
static_assert(sizeof(FortItemManagementInventoryPanel_HandleQuickBarChangedBP) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_HandleQuickBarChangedBP");
static_assert(offsetof(FortItemManagementInventoryPanel_HandleQuickBarChangedBP, QuickBarType) == 0x000000, "Member 'FortItemManagementInventoryPanel_HandleQuickBarChangedBP::QuickBarType' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.OnMulchRestrictionTextShown
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_OnMulchRestrictionTextShown final
{
public:
	bool                                          bShown;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_OnMulchRestrictionTextShown) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_OnMulchRestrictionTextShown");
static_assert(sizeof(FortItemManagementInventoryPanel_OnMulchRestrictionTextShown) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_OnMulchRestrictionTextShown");
static_assert(offsetof(FortItemManagementInventoryPanel_OnMulchRestrictionTextShown, bShown) == 0x000000, "Member 'FortItemManagementInventoryPanel_OnMulchRestrictionTextShown::bShown' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.SetFilter
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementInventoryPanel_SetFilter final
{
public:
	class FName                                   FilterName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_SetFilter) == 0x000004, "Wrong alignment on FortItemManagementInventoryPanel_SetFilter");
static_assert(sizeof(FortItemManagementInventoryPanel_SetFilter) == 0x000008, "Wrong size on FortItemManagementInventoryPanel_SetFilter");
static_assert(offsetof(FortItemManagementInventoryPanel_SetFilter, FilterName) == 0x000000, "Member 'FortItemManagementInventoryPanel_SetFilter::FilterName' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.SetSortType
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_SetSortType final
{
public:
	EInventoryContentSortType                     SortType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_SetSortType) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_SetSortType");
static_assert(sizeof(FortItemManagementInventoryPanel_SetSortType) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_SetSortType");
static_assert(offsetof(FortItemManagementInventoryPanel_SetSortType, SortType) == 0x000000, "Member 'FortItemManagementInventoryPanel_SetSortType::SortType' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.CanDragItems
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_CanDragItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_CanDragItems) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_CanDragItems");
static_assert(sizeof(FortItemManagementInventoryPanel_CanDragItems) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_CanDragItems");
static_assert(offsetof(FortItemManagementInventoryPanel_CanDragItems, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_CanDragItems::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.GetQualifiedFilterDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortItemManagementInventoryPanel_GetQualifiedFilterDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_GetQualifiedFilterDisplayName) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_GetQualifiedFilterDisplayName");
static_assert(sizeof(FortItemManagementInventoryPanel_GetQualifiedFilterDisplayName) == 0x000018, "Wrong size on FortItemManagementInventoryPanel_GetQualifiedFilterDisplayName");
static_assert(offsetof(FortItemManagementInventoryPanel_GetQualifiedFilterDisplayName, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_GetQualifiedFilterDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.GetSupportedSortTypesForCurrentInventory
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementInventoryPanel_GetSupportedSortTypesForCurrentInventory final
{
public:
	TArray<EInventoryContentSortType>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_GetSupportedSortTypesForCurrentInventory) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_GetSupportedSortTypesForCurrentInventory");
static_assert(sizeof(FortItemManagementInventoryPanel_GetSupportedSortTypesForCurrentInventory) == 0x000010, "Wrong size on FortItemManagementInventoryPanel_GetSupportedSortTypesForCurrentInventory");
static_assert(offsetof(FortItemManagementInventoryPanel_GetSupportedSortTypesForCurrentInventory, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_GetSupportedSortTypesForCurrentInventory::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.GetUpgradeItemDefinitionsForCurrentInventory
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementInventoryPanel_GetUpgradeItemDefinitionsForCurrentInventory final
{
public:
	TArray<class UFortItemDefinition*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_GetUpgradeItemDefinitionsForCurrentInventory) == 0x000008, "Wrong alignment on FortItemManagementInventoryPanel_GetUpgradeItemDefinitionsForCurrentInventory");
static_assert(sizeof(FortItemManagementInventoryPanel_GetUpgradeItemDefinitionsForCurrentInventory) == 0x000010, "Wrong size on FortItemManagementInventoryPanel_GetUpgradeItemDefinitionsForCurrentInventory");
static_assert(offsetof(FortItemManagementInventoryPanel_GetUpgradeItemDefinitionsForCurrentInventory, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_GetUpgradeItemDefinitionsForCurrentInventory::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementInventoryPanel.IsSwitchPanelAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementInventoryPanel_IsSwitchPanelAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementInventoryPanel_IsSwitchPanelAvailable) == 0x000001, "Wrong alignment on FortItemManagementInventoryPanel_IsSwitchPanelAvailable");
static_assert(sizeof(FortItemManagementInventoryPanel_IsSwitchPanelAvailable) == 0x000001, "Wrong size on FortItemManagementInventoryPanel_IsSwitchPanelAvailable");
static_assert(offsetof(FortItemManagementInventoryPanel_IsSwitchPanelAvailable, ReturnValue) == 0x000000, "Member 'FortItemManagementInventoryPanel_IsSwitchPanelAvailable::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementItemPopupMenu.HandleItemChanged
// 0x0003 (0x0003 - 0x0000)
struct FortItemManagementItemPopupMenu_HandleItemChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemPopupMenu_HandleItemChanged) == 0x000001, "Wrong alignment on FortItemManagementItemPopupMenu_HandleItemChanged");
static_assert(sizeof(FortItemManagementItemPopupMenu_HandleItemChanged) == 0x000003, "Wrong size on FortItemManagementItemPopupMenu_HandleItemChanged");
static_assert(offsetof(FortItemManagementItemPopupMenu_HandleItemChanged, bItemChanged) == 0x000000, "Member 'FortItemManagementItemPopupMenu_HandleItemChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortItemManagementItemPopupMenu_HandleItemChanged, bAmmoChanged) == 0x000001, "Member 'FortItemManagementItemPopupMenu_HandleItemChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortItemManagementItemPopupMenu_HandleItemChanged, bIngredientsChanged) == 0x000002, "Member 'FortItemManagementItemPopupMenu_HandleItemChanged::bIngredientsChanged' has a wrong offset!");

// Function FortniteUI.FortItemManagementItemPopupMenu.GetHostButton
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementItemPopupMenu_GetHostButton final
{
public:
	class UFortItemManagementItemTileButton*      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemPopupMenu_GetHostButton) == 0x000008, "Wrong alignment on FortItemManagementItemPopupMenu_GetHostButton");
static_assert(sizeof(FortItemManagementItemPopupMenu_GetHostButton) == 0x000008, "Wrong size on FortItemManagementItemPopupMenu_GetHostButton");
static_assert(offsetof(FortItemManagementItemPopupMenu_GetHostButton, ReturnValue) == 0x000000, "Member 'FortItemManagementItemPopupMenu_GetHostButton::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementItemTileButton.GetPopupMenu
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementItemTileButton_GetPopupMenu final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemTileButton_GetPopupMenu) == 0x000008, "Wrong alignment on FortItemManagementItemTileButton_GetPopupMenu");
static_assert(sizeof(FortItemManagementItemTileButton_GetPopupMenu) == 0x000008, "Wrong size on FortItemManagementItemTileButton_GetPopupMenu");
static_assert(offsetof(FortItemManagementItemTileButton_GetPopupMenu, ReturnValue) == 0x000000, "Member 'FortItemManagementItemTileButton_GetPopupMenu::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementItemTileButton.HandleEquipSlotChanged
// 0x0004 (0x0004 - 0x0000)
struct FortItemManagementItemTileButton_HandleEquipSlotChanged final
{
public:
	int32                                         EquipSlot;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemTileButton_HandleEquipSlotChanged) == 0x000004, "Wrong alignment on FortItemManagementItemTileButton_HandleEquipSlotChanged");
static_assert(sizeof(FortItemManagementItemTileButton_HandleEquipSlotChanged) == 0x000004, "Wrong size on FortItemManagementItemTileButton_HandleEquipSlotChanged");
static_assert(offsetof(FortItemManagementItemTileButton_HandleEquipSlotChanged, EquipSlot) == 0x000000, "Member 'FortItemManagementItemTileButton_HandleEquipSlotChanged::EquipSlot' has a wrong offset!");

// Function FortniteUI.FortItemManagementItemTileButton.OnSlotItemComplete
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementItemTileButton_OnSlotItemComplete final
{
public:
	const class UFortAccountItem*                 SlottedItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemTileButton_OnSlotItemComplete) == 0x000008, "Wrong alignment on FortItemManagementItemTileButton_OnSlotItemComplete");
static_assert(sizeof(FortItemManagementItemTileButton_OnSlotItemComplete) == 0x000010, "Wrong size on FortItemManagementItemTileButton_OnSlotItemComplete");
static_assert(offsetof(FortItemManagementItemTileButton_OnSlotItemComplete, SlottedItem) == 0x000000, "Member 'FortItemManagementItemTileButton_OnSlotItemComplete::SlottedItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementItemTileButton_OnSlotItemComplete, SlotId) == 0x000008, "Member 'FortItemManagementItemTileButton_OnSlotItemComplete::SlotId' has a wrong offset!");

// Function FortniteUI.FortItemManagementItemTileButton.GetHomebaseSquadSlotForItem
// 0x000C (0x000C - 0x0000)
struct FortItemManagementItemTileButton_GetHomebaseSquadSlotForItem final
{
public:
	struct FHomebaseSquadSlotId                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemTileButton_GetHomebaseSquadSlotForItem) == 0x000004, "Wrong alignment on FortItemManagementItemTileButton_GetHomebaseSquadSlotForItem");
static_assert(sizeof(FortItemManagementItemTileButton_GetHomebaseSquadSlotForItem) == 0x00000C, "Wrong size on FortItemManagementItemTileButton_GetHomebaseSquadSlotForItem");
static_assert(offsetof(FortItemManagementItemTileButton_GetHomebaseSquadSlotForItem, ReturnValue) == 0x000000, "Member 'FortItemManagementItemTileButton_GetHomebaseSquadSlotForItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementItemTileButton.GetItemManagementMode
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementItemTileButton_GetItemManagementMode final
{
public:
	EFortItemManagementMode                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemTileButton_GetItemManagementMode) == 0x000001, "Wrong alignment on FortItemManagementItemTileButton_GetItemManagementMode");
static_assert(sizeof(FortItemManagementItemTileButton_GetItemManagementMode) == 0x000001, "Wrong size on FortItemManagementItemTileButton_GetItemManagementMode");
static_assert(offsetof(FortItemManagementItemTileButton_GetItemManagementMode, ReturnValue) == 0x000000, "Member 'FortItemManagementItemTileButton_GetItemManagementMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementItemDetailsPanel.GetAmmoTypeItemDefinitions
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementItemDetailsPanel_GetAmmoTypeItemDefinitions final
{
public:
	TArray<class UFortAmmoItemDefinition*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementItemDetailsPanel_GetAmmoTypeItemDefinitions) == 0x000008, "Wrong alignment on FortItemManagementItemDetailsPanel_GetAmmoTypeItemDefinitions");
static_assert(sizeof(FortItemManagementItemDetailsPanel_GetAmmoTypeItemDefinitions) == 0x000010, "Wrong size on FortItemManagementItemDetailsPanel_GetAmmoTypeItemDefinitions");
static_assert(offsetof(FortItemManagementItemDetailsPanel_GetAmmoTypeItemDefinitions, ReturnValue) == 0x000000, "Member 'FortItemManagementItemDetailsPanel_GetAmmoTypeItemDefinitions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementMulchDetailsPanel.GetItemCountsToMulch
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementMulchDetailsPanel_GetItemCountsToMulch final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementMulchDetailsPanel_GetItemCountsToMulch) == 0x000008, "Wrong alignment on FortItemManagementMulchDetailsPanel_GetItemCountsToMulch");
static_assert(sizeof(FortItemManagementMulchDetailsPanel_GetItemCountsToMulch) == 0x000010, "Wrong size on FortItemManagementMulchDetailsPanel_GetItemCountsToMulch");
static_assert(offsetof(FortItemManagementMulchDetailsPanel_GetItemCountsToMulch, ReturnValue) == 0x000000, "Member 'FortItemManagementMulchDetailsPanel_GetItemCountsToMulch::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementMulchDetailsPanel.GetItemsToMulch
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementMulchDetailsPanel_GetItemsToMulch final
{
public:
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementMulchDetailsPanel_GetItemsToMulch) == 0x000008, "Wrong alignment on FortItemManagementMulchDetailsPanel_GetItemsToMulch");
static_assert(sizeof(FortItemManagementMulchDetailsPanel_GetItemsToMulch) == 0x000010, "Wrong size on FortItemManagementMulchDetailsPanel_GetItemsToMulch");
static_assert(offsetof(FortItemManagementMulchDetailsPanel_GetItemsToMulch, ReturnValue) == 0x000000, "Member 'FortItemManagementMulchDetailsPanel_GetItemsToMulch::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementMulchDetailsPanel.IsSpaceAvailableForMulch
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementMulchDetailsPanel_IsSpaceAvailableForMulch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementMulchDetailsPanel_IsSpaceAvailableForMulch) == 0x000001, "Wrong alignment on FortItemManagementMulchDetailsPanel_IsSpaceAvailableForMulch");
static_assert(sizeof(FortItemManagementMulchDetailsPanel_IsSpaceAvailableForMulch) == 0x000001, "Wrong size on FortItemManagementMulchDetailsPanel_IsSpaceAvailableForMulch");
static_assert(offsetof(FortItemManagementMulchDetailsPanel_IsSpaceAvailableForMulch, ReturnValue) == 0x000000, "Member 'FortItemManagementMulchDetailsPanel_IsSpaceAvailableForMulch::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementModeDetailsPanel.GetItemManagementMode
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementModeDetailsPanel_GetItemManagementMode final
{
public:
	EFortItemManagementMode                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementModeDetailsPanel_GetItemManagementMode) == 0x000001, "Wrong alignment on FortItemManagementModeDetailsPanel_GetItemManagementMode");
static_assert(sizeof(FortItemManagementModeDetailsPanel_GetItemManagementMode) == 0x000001, "Wrong size on FortItemManagementModeDetailsPanel_GetItemManagementMode");
static_assert(offsetof(FortItemManagementModeDetailsPanel_GetItemManagementMode, ReturnValue) == 0x000000, "Member 'FortItemManagementModeDetailsPanel_GetItemManagementMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.GooseRadarWidgetBase.OnPlaneRep
// 0x0010 (0x0010 - 0x0000)
struct GooseRadarWidgetBase_OnPlaneRep final
{
public:
	TArray<class AFortAthenaVehicle*>             Planes;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseRadarWidgetBase_OnPlaneRep) == 0x000008, "Wrong alignment on GooseRadarWidgetBase_OnPlaneRep");
static_assert(sizeof(GooseRadarWidgetBase_OnPlaneRep) == 0x000010, "Wrong size on GooseRadarWidgetBase_OnPlaneRep");
static_assert(offsetof(GooseRadarWidgetBase_OnPlaneRep, Planes) == 0x000000, "Member 'GooseRadarWidgetBase_OnPlaneRep::Planes' has a wrong offset!");

// Function FortniteUI.FortFrontendInventoryFilterFunctionLibrary.ToText
// 0x0020 (0x0020 - 0x0000)
struct FortFrontendInventoryFilterFunctionLibrary_ToText final
{
public:
	EFortFrontendInventoryFilter                  FrontendInventoryFilter;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontendInventoryFilterFunctionLibrary_ToText) == 0x000008, "Wrong alignment on FortFrontendInventoryFilterFunctionLibrary_ToText");
static_assert(sizeof(FortFrontendInventoryFilterFunctionLibrary_ToText) == 0x000020, "Wrong size on FortFrontendInventoryFilterFunctionLibrary_ToText");
static_assert(offsetof(FortFrontendInventoryFilterFunctionLibrary_ToText, FrontendInventoryFilter) == 0x000000, "Member 'FortFrontendInventoryFilterFunctionLibrary_ToText::FrontendInventoryFilter' has a wrong offset!");
static_assert(offsetof(FortFrontendInventoryFilterFunctionLibrary_ToText, ReturnValue) == 0x000008, "Member 'FortFrontendInventoryFilterFunctionLibrary_ToText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.CanRequestPopupMenuForSelectedItem
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_CanRequestPopupMenuForSelectedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_CanRequestPopupMenuForSelectedItem) == 0x000001, "Wrong alignment on FortItemManagementScreen_CanRequestPopupMenuForSelectedItem");
static_assert(sizeof(FortItemManagementScreen_CanRequestPopupMenuForSelectedItem) == 0x000001, "Wrong size on FortItemManagementScreen_CanRequestPopupMenuForSelectedItem");
static_assert(offsetof(FortItemManagementScreen_CanRequestPopupMenuForSelectedItem, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_CanRequestPopupMenuForSelectedItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.ConsumeItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_ConsumeItem final
{
public:
	class UFortConsumableAccountItem*             ConsumableItem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_ConsumeItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_ConsumeItem");
static_assert(sizeof(FortItemManagementScreen_ConsumeItem) == 0x000008, "Wrong size on FortItemManagementScreen_ConsumeItem");
static_assert(offsetof(FortItemManagementScreen_ConsumeItem, ConsumableItem) == 0x000000, "Member 'FortItemManagementScreen_ConsumeItem::ConsumableItem' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.CraftAndSlotItem
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_CraftAndSlotItem final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 RequestedTier;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_CraftAndSlotItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_CraftAndSlotItem");
static_assert(sizeof(FortItemManagementScreen_CraftAndSlotItem) == 0x000010, "Wrong size on FortItemManagementScreen_CraftAndSlotItem");
static_assert(offsetof(FortItemManagementScreen_CraftAndSlotItem, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_CraftAndSlotItem::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_CraftAndSlotItem, RequestedTier) == 0x000008, "Member 'FortItemManagementScreen_CraftAndSlotItem::RequestedTier' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_CraftAndSlotItem, CraftCount) == 0x00000C, "Member 'FortItemManagementScreen_CraftAndSlotItem::CraftCount' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.CraftItem
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_CraftItem final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 RequestedTier;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_CraftItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_CraftItem");
static_assert(sizeof(FortItemManagementScreen_CraftItem) == 0x000010, "Wrong size on FortItemManagementScreen_CraftItem");
static_assert(offsetof(FortItemManagementScreen_CraftItem, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_CraftItem::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_CraftItem, RequestedTier) == 0x000008, "Member 'FortItemManagementScreen_CraftItem::RequestedTier' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_CraftItem, CraftCount) == 0x00000C, "Member 'FortItemManagementScreen_CraftItem::CraftCount' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.DropItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_DropItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_DropItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_DropItem");
static_assert(sizeof(FortItemManagementScreen_DropItem) == 0x000008, "Wrong size on FortItemManagementScreen_DropItem");
static_assert(offsetof(FortItemManagementScreen_DropItem, Item) == 0x000000, "Member 'FortItemManagementScreen_DropItem::Item' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.EnterComparisonMode
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_EnterComparisonMode final
{
public:
	class UFortItem*                              ItemToCompareDetailsWith;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_EnterComparisonMode) == 0x000008, "Wrong alignment on FortItemManagementScreen_EnterComparisonMode");
static_assert(sizeof(FortItemManagementScreen_EnterComparisonMode) == 0x000008, "Wrong size on FortItemManagementScreen_EnterComparisonMode");
static_assert(offsetof(FortItemManagementScreen_EnterComparisonMode, ItemToCompareDetailsWith) == 0x000000, "Member 'FortItemManagementScreen_EnterComparisonMode::ItemToCompareDetailsWith' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.EnterDetailsMode
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_EnterDetailsMode final
{
public:
	class UFortItem*                              Param_ItemToDetail;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_EnterDetailsMode) == 0x000008, "Wrong alignment on FortItemManagementScreen_EnterDetailsMode");
static_assert(sizeof(FortItemManagementScreen_EnterDetailsMode) == 0x000008, "Wrong size on FortItemManagementScreen_EnterDetailsMode");
static_assert(offsetof(FortItemManagementScreen_EnterDetailsMode, Param_ItemToDetail) == 0x000000, "Member 'FortItemManagementScreen_EnterDetailsMode::Param_ItemToDetail' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.EnterMulchMode
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_EnterMulchMode final
{
public:
	class UFortItem*                              ItemToMulch;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_EnterMulchMode) == 0x000008, "Wrong alignment on FortItemManagementScreen_EnterMulchMode");
static_assert(sizeof(FortItemManagementScreen_EnterMulchMode) == 0x000008, "Wrong size on FortItemManagementScreen_EnterMulchMode");
static_assert(offsetof(FortItemManagementScreen_EnterMulchMode, ItemToMulch) == 0x000000, "Member 'FortItemManagementScreen_EnterMulchMode::ItemToMulch' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.EquipItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_EquipItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_EquipItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_EquipItem");
static_assert(sizeof(FortItemManagementScreen_EquipItem) == 0x000008, "Wrong size on FortItemManagementScreen_EquipItem");
static_assert(offsetof(FortItemManagementScreen_EquipItem, Item) == 0x000000, "Member 'FortItemManagementScreen_EquipItem::Item' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.GuardActionForReadOnlyWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_GuardActionForReadOnlyWIFE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_GuardActionForReadOnlyWIFE) == 0x000001, "Wrong alignment on FortItemManagementScreen_GuardActionForReadOnlyWIFE");
static_assert(sizeof(FortItemManagementScreen_GuardActionForReadOnlyWIFE) == 0x000001, "Wrong size on FortItemManagementScreen_GuardActionForReadOnlyWIFE");
static_assert(offsetof(FortItemManagementScreen_GuardActionForReadOnlyWIFE, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_GuardActionForReadOnlyWIFE::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HandleConsumeItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_HandleConsumeItemBP final
{
public:
	class UFortConsumableAccountItem*             ConsumableItem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_HandleConsumeItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_HandleConsumeItemBP");
static_assert(sizeof(FortItemManagementScreen_HandleConsumeItemBP) == 0x000008, "Wrong size on FortItemManagementScreen_HandleConsumeItemBP");
static_assert(offsetof(FortItemManagementScreen_HandleConsumeItemBP, ConsumableItem) == 0x000000, "Member 'FortItemManagementScreen_HandleConsumeItemBP::ConsumableItem' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HandleCraftAndSlotItemBP
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_HandleCraftAndSlotItemBP final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 RequestedTier;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_HandleCraftAndSlotItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_HandleCraftAndSlotItemBP");
static_assert(sizeof(FortItemManagementScreen_HandleCraftAndSlotItemBP) == 0x000010, "Wrong size on FortItemManagementScreen_HandleCraftAndSlotItemBP");
static_assert(offsetof(FortItemManagementScreen_HandleCraftAndSlotItemBP, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_HandleCraftAndSlotItemBP::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_HandleCraftAndSlotItemBP, RequestedTier) == 0x000008, "Member 'FortItemManagementScreen_HandleCraftAndSlotItemBP::RequestedTier' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_HandleCraftAndSlotItemBP, CraftCount) == 0x00000C, "Member 'FortItemManagementScreen_HandleCraftAndSlotItemBP::CraftCount' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HandleCraftItemBP
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_HandleCraftItemBP final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 RequestedTier;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_HandleCraftItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_HandleCraftItemBP");
static_assert(sizeof(FortItemManagementScreen_HandleCraftItemBP) == 0x000010, "Wrong size on FortItemManagementScreen_HandleCraftItemBP");
static_assert(offsetof(FortItemManagementScreen_HandleCraftItemBP, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_HandleCraftItemBP::SchematicItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_HandleCraftItemBP, RequestedTier) == 0x000008, "Member 'FortItemManagementScreen_HandleCraftItemBP::RequestedTier' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_HandleCraftItemBP, CraftCount) == 0x00000C, "Member 'FortItemManagementScreen_HandleCraftItemBP::CraftCount' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HandleDropItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_HandleDropItemBP final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_HandleDropItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_HandleDropItemBP");
static_assert(sizeof(FortItemManagementScreen_HandleDropItemBP) == 0x000008, "Wrong size on FortItemManagementScreen_HandleDropItemBP");
static_assert(offsetof(FortItemManagementScreen_HandleDropItemBP, Item) == 0x000000, "Member 'FortItemManagementScreen_HandleDropItemBP::Item' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HandleEquipItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_HandleEquipItemBP final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_HandleEquipItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_HandleEquipItemBP");
static_assert(sizeof(FortItemManagementScreen_HandleEquipItemBP) == 0x000008, "Wrong size on FortItemManagementScreen_HandleEquipItemBP");
static_assert(offsetof(FortItemManagementScreen_HandleEquipItemBP, Item) == 0x000000, "Member 'FortItemManagementScreen_HandleEquipItemBP::Item' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HandleInspectItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_HandleInspectItemBP final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_HandleInspectItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_HandleInspectItemBP");
static_assert(sizeof(FortItemManagementScreen_HandleInspectItemBP) == 0x000008, "Wrong size on FortItemManagementScreen_HandleInspectItemBP");
static_assert(offsetof(FortItemManagementScreen_HandleInspectItemBP, Item) == 0x000000, "Member 'FortItemManagementScreen_HandleInspectItemBP::Item' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HandleItemToCompareWithChanged
// 0x0003 (0x0003 - 0x0000)
struct FortItemManagementScreen_HandleItemToCompareWithChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_HandleItemToCompareWithChanged) == 0x000001, "Wrong alignment on FortItemManagementScreen_HandleItemToCompareWithChanged");
static_assert(sizeof(FortItemManagementScreen_HandleItemToCompareWithChanged) == 0x000003, "Wrong size on FortItemManagementScreen_HandleItemToCompareWithChanged");
static_assert(offsetof(FortItemManagementScreen_HandleItemToCompareWithChanged, bItemChanged) == 0x000000, "Member 'FortItemManagementScreen_HandleItemToCompareWithChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_HandleItemToCompareWithChanged, bAmmoChanged) == 0x000001, "Member 'FortItemManagementScreen_HandleItemToCompareWithChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_HandleItemToCompareWithChanged, bIngredientsChanged) == 0x000002, "Member 'FortItemManagementScreen_HandleItemToCompareWithChanged::bIngredientsChanged' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HandleItemToDetailChanged
// 0x0003 (0x0003 - 0x0000)
struct FortItemManagementScreen_HandleItemToDetailChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_HandleItemToDetailChanged) == 0x000001, "Wrong alignment on FortItemManagementScreen_HandleItemToDetailChanged");
static_assert(sizeof(FortItemManagementScreen_HandleItemToDetailChanged) == 0x000003, "Wrong size on FortItemManagementScreen_HandleItemToDetailChanged");
static_assert(offsetof(FortItemManagementScreen_HandleItemToDetailChanged, bItemChanged) == 0x000000, "Member 'FortItemManagementScreen_HandleItemToDetailChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_HandleItemToDetailChanged, bAmmoChanged) == 0x000001, "Member 'FortItemManagementScreen_HandleItemToDetailChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_HandleItemToDetailChanged, bIngredientsChanged) == 0x000002, "Member 'FortItemManagementScreen_HandleItemToDetailChanged::bIngredientsChanged' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HandleMulchQuantitySelection
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_HandleMulchQuantitySelection final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_HandleMulchQuantitySelection) == 0x000008, "Wrong alignment on FortItemManagementScreen_HandleMulchQuantitySelection");
static_assert(sizeof(FortItemManagementScreen_HandleMulchQuantitySelection) == 0x000008, "Wrong size on FortItemManagementScreen_HandleMulchQuantitySelection");
static_assert(offsetof(FortItemManagementScreen_HandleMulchQuantitySelection, Item) == 0x000000, "Member 'FortItemManagementScreen_HandleMulchQuantitySelection::Item' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HandleOpenCraftingOptionsBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_HandleOpenCraftingOptionsBP final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_HandleOpenCraftingOptionsBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_HandleOpenCraftingOptionsBP");
static_assert(sizeof(FortItemManagementScreen_HandleOpenCraftingOptionsBP) == 0x000008, "Wrong size on FortItemManagementScreen_HandleOpenCraftingOptionsBP");
static_assert(offsetof(FortItemManagementScreen_HandleOpenCraftingOptionsBP, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_HandleOpenCraftingOptionsBP::SchematicItem' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HandleTransferItemBP
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_HandleTransferItemBP final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_HandleTransferItemBP) == 0x000008, "Wrong alignment on FortItemManagementScreen_HandleTransferItemBP");
static_assert(sizeof(FortItemManagementScreen_HandleTransferItemBP) == 0x000008, "Wrong size on FortItemManagementScreen_HandleTransferItemBP");
static_assert(offsetof(FortItemManagementScreen_HandleTransferItemBP, Item) == 0x000000, "Member 'FortItemManagementScreen_HandleTransferItemBP::Item' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.InspectItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_InspectItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_InspectItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_InspectItem");
static_assert(sizeof(FortItemManagementScreen_InspectItem) == 0x000008, "Wrong size on FortItemManagementScreen_InspectItem");
static_assert(offsetof(FortItemManagementScreen_InspectItem, Item) == 0x000000, "Member 'FortItemManagementScreen_InspectItem::Item' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.OpenCraftingOptions
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_OpenCraftingOptions final
{
public:
	class UFortSchematicItem*                     SchematicItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_OpenCraftingOptions) == 0x000008, "Wrong alignment on FortItemManagementScreen_OpenCraftingOptions");
static_assert(sizeof(FortItemManagementScreen_OpenCraftingOptions) == 0x000008, "Wrong size on FortItemManagementScreen_OpenCraftingOptions");
static_assert(offsetof(FortItemManagementScreen_OpenCraftingOptions, SchematicItem) == 0x000000, "Member 'FortItemManagementScreen_OpenCraftingOptions::SchematicItem' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.SetConsumeItemRequestInProgress
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_SetConsumeItemRequestInProgress final
{
public:
	bool                                          InProgress;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_SetConsumeItemRequestInProgress) == 0x000001, "Wrong alignment on FortItemManagementScreen_SetConsumeItemRequestInProgress");
static_assert(sizeof(FortItemManagementScreen_SetConsumeItemRequestInProgress) == 0x000001, "Wrong size on FortItemManagementScreen_SetConsumeItemRequestInProgress");
static_assert(offsetof(FortItemManagementScreen_SetConsumeItemRequestInProgress, InProgress) == 0x000000, "Member 'FortItemManagementScreen_SetConsumeItemRequestInProgress::InProgress' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.SetFrontendInventoryFilter
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_SetFrontendInventoryFilter final
{
public:
	EFortFrontendInventoryFilter                  Param_FrontendInventoryFilter;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_SetFrontendInventoryFilter) == 0x000001, "Wrong alignment on FortItemManagementScreen_SetFrontendInventoryFilter");
static_assert(sizeof(FortItemManagementScreen_SetFrontendInventoryFilter) == 0x000001, "Wrong size on FortItemManagementScreen_SetFrontendInventoryFilter");
static_assert(offsetof(FortItemManagementScreen_SetFrontendInventoryFilter, Param_FrontendInventoryFilter) == 0x000000, "Member 'FortItemManagementScreen_SetFrontendInventoryFilter::Param_FrontendInventoryFilter' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.ShowWarningReadOnlyWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_ShowWarningReadOnlyWIFE final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_ShowWarningReadOnlyWIFE) == 0x000001, "Wrong alignment on FortItemManagementScreen_ShowWarningReadOnlyWIFE");
static_assert(sizeof(FortItemManagementScreen_ShowWarningReadOnlyWIFE) == 0x000001, "Wrong size on FortItemManagementScreen_ShowWarningReadOnlyWIFE");
static_assert(offsetof(FortItemManagementScreen_ShowWarningReadOnlyWIFE, Force) == 0x000000, "Member 'FortItemManagementScreen_ShowWarningReadOnlyWIFE::Force' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.TransferItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_TransferItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_TransferItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_TransferItem");
static_assert(sizeof(FortItemManagementScreen_TransferItem) == 0x000008, "Wrong size on FortItemManagementScreen_TransferItem");
static_assert(offsetof(FortItemManagementScreen_TransferItem, Item) == 0x000000, "Member 'FortItemManagementScreen_TransferItem::Item' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.CanEquipItem
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_CanEquipItem final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemManagementScreen_CanEquipItem) == 0x000008, "Wrong alignment on FortItemManagementScreen_CanEquipItem");
static_assert(sizeof(FortItemManagementScreen_CanEquipItem) == 0x000010, "Wrong size on FortItemManagementScreen_CanEquipItem");
static_assert(offsetof(FortItemManagementScreen_CanEquipItem, Item) == 0x000000, "Member 'FortItemManagementScreen_CanEquipItem::Item' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_CanEquipItem, ReturnValue) == 0x000008, "Member 'FortItemManagementScreen_CanEquipItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.GetItemToCompareDetailsWith
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_GetItemToCompareDetailsWith final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_GetItemToCompareDetailsWith) == 0x000008, "Wrong alignment on FortItemManagementScreen_GetItemToCompareDetailsWith");
static_assert(sizeof(FortItemManagementScreen_GetItemToCompareDetailsWith) == 0x000008, "Wrong size on FortItemManagementScreen_GetItemToCompareDetailsWith");
static_assert(offsetof(FortItemManagementScreen_GetItemToCompareDetailsWith, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_GetItemToCompareDetailsWith::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.GetItemToDetail
// 0x0008 (0x0008 - 0x0000)
struct FortItemManagementScreen_GetItemToDetail final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_GetItemToDetail) == 0x000008, "Wrong alignment on FortItemManagementScreen_GetItemToDetail");
static_assert(sizeof(FortItemManagementScreen_GetItemToDetail) == 0x000008, "Wrong size on FortItemManagementScreen_GetItemToDetail");
static_assert(offsetof(FortItemManagementScreen_GetItemToDetail, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_GetItemToDetail::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.GetShouldShowCollectionBookIndicator
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_GetShouldShowCollectionBookIndicator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_GetShouldShowCollectionBookIndicator) == 0x000001, "Wrong alignment on FortItemManagementScreen_GetShouldShowCollectionBookIndicator");
static_assert(sizeof(FortItemManagementScreen_GetShouldShowCollectionBookIndicator) == 0x000001, "Wrong size on FortItemManagementScreen_GetShouldShowCollectionBookIndicator");
static_assert(offsetof(FortItemManagementScreen_GetShouldShowCollectionBookIndicator, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_GetShouldShowCollectionBookIndicator::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.GetShouldShowRefundIndicator
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_GetShouldShowRefundIndicator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_GetShouldShowRefundIndicator) == 0x000001, "Wrong alignment on FortItemManagementScreen_GetShouldShowRefundIndicator");
static_assert(sizeof(FortItemManagementScreen_GetShouldShowRefundIndicator) == 0x000001, "Wrong size on FortItemManagementScreen_GetShouldShowRefundIndicator");
static_assert(offsetof(FortItemManagementScreen_GetShouldShowRefundIndicator, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_GetShouldShowRefundIndicator::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.HasItemBeenSeen
// 0x0010 (0x0010 - 0x0000)
struct FortItemManagementScreen_HasItemBeenSeen final
{
public:
	class UFortAccountItem*                       AccountItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemManagementScreen_HasItemBeenSeen) == 0x000008, "Wrong alignment on FortItemManagementScreen_HasItemBeenSeen");
static_assert(sizeof(FortItemManagementScreen_HasItemBeenSeen) == 0x000010, "Wrong size on FortItemManagementScreen_HasItemBeenSeen");
static_assert(offsetof(FortItemManagementScreen_HasItemBeenSeen, AccountItem) == 0x000000, "Member 'FortItemManagementScreen_HasItemBeenSeen::AccountItem' has a wrong offset!");
static_assert(offsetof(FortItemManagementScreen_HasItemBeenSeen, ReturnValue) == 0x000008, "Member 'FortItemManagementScreen_HasItemBeenSeen::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemManagementScreen.IsScreenWIFE
// 0x0001 (0x0001 - 0x0000)
struct FortItemManagementScreen_IsScreenWIFE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemManagementScreen_IsScreenWIFE) == 0x000001, "Wrong alignment on FortItemManagementScreen_IsScreenWIFE");
static_assert(sizeof(FortItemManagementScreen_IsScreenWIFE) == 0x000001, "Wrong size on FortItemManagementScreen_IsScreenWIFE");
static_assert(offsetof(FortItemManagementScreen_IsScreenWIFE, ReturnValue) == 0x000000, "Member 'FortItemManagementScreen_IsScreenWIFE::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListEntryBase.HandleDifferentItemOrQuantitySetBP
// 0x0001 (0x0001 - 0x0000)
struct FortItemQuantityListEntryBase_HandleDifferentItemOrQuantitySetBP final
{
public:
	bool                                          IsBeingReset;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemQuantityListEntryBase_HandleDifferentItemOrQuantitySetBP) == 0x000001, "Wrong alignment on FortItemQuantityListEntryBase_HandleDifferentItemOrQuantitySetBP");
static_assert(sizeof(FortItemQuantityListEntryBase_HandleDifferentItemOrQuantitySetBP) == 0x000001, "Wrong size on FortItemQuantityListEntryBase_HandleDifferentItemOrQuantitySetBP");
static_assert(offsetof(FortItemQuantityListEntryBase_HandleDifferentItemOrQuantitySetBP, IsBeingReset) == 0x000000, "Member 'FortItemQuantityListEntryBase_HandleDifferentItemOrQuantitySetBP::IsBeingReset' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListEntryBase.SetItemDefinitionAndQuantity
// 0x0048 (0x0048 - 0x0000)
struct FortItemQuantityListEntryBase_SetItemDefinitionAndQuantity final
{
public:
	struct FFortItemQuantityPair                  ItemQuantityPair;                                  // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ShouldTreatAsReset;                                // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemQuantityListEntryBase_SetItemDefinitionAndQuantity) == 0x000008, "Wrong alignment on FortItemQuantityListEntryBase_SetItemDefinitionAndQuantity");
static_assert(sizeof(FortItemQuantityListEntryBase_SetItemDefinitionAndQuantity) == 0x000048, "Wrong size on FortItemQuantityListEntryBase_SetItemDefinitionAndQuantity");
static_assert(offsetof(FortItemQuantityListEntryBase_SetItemDefinitionAndQuantity, ItemQuantityPair) == 0x000000, "Member 'FortItemQuantityListEntryBase_SetItemDefinitionAndQuantity::ItemQuantityPair' has a wrong offset!");
static_assert(offsetof(FortItemQuantityListEntryBase_SetItemDefinitionAndQuantity, ShouldTreatAsReset) == 0x000040, "Member 'FortItemQuantityListEntryBase_SetItemDefinitionAndQuantity::ShouldTreatAsReset' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListEntryBase.SetItemInstanceAndQuantity
// 0x0018 (0x0018 - 0x0000)
struct FortItemQuantityListEntryBase_SetItemInstanceAndQuantity final
{
public:
	struct FFortItemInstanceQuantityPair          ItemQuantityPair;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ShouldTreatAsReset;                                // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemQuantityListEntryBase_SetItemInstanceAndQuantity) == 0x000008, "Wrong alignment on FortItemQuantityListEntryBase_SetItemInstanceAndQuantity");
static_assert(sizeof(FortItemQuantityListEntryBase_SetItemInstanceAndQuantity) == 0x000018, "Wrong size on FortItemQuantityListEntryBase_SetItemInstanceAndQuantity");
static_assert(offsetof(FortItemQuantityListEntryBase_SetItemInstanceAndQuantity, ItemQuantityPair) == 0x000000, "Member 'FortItemQuantityListEntryBase_SetItemInstanceAndQuantity::ItemQuantityPair' has a wrong offset!");
static_assert(offsetof(FortItemQuantityListEntryBase_SetItemInstanceAndQuantity, ShouldTreatAsReset) == 0x000010, "Member 'FortItemQuantityListEntryBase_SetItemInstanceAndQuantity::ShouldTreatAsReset' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListEntryBase.SetPreviewData
// 0x0008 (0x0008 - 0x0000)
struct FortItemQuantityListEntryBase_SetPreviewData final
{
public:
	struct FFortItemEntryPreviewData              PreviewData;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemQuantityListEntryBase_SetPreviewData) == 0x000004, "Wrong alignment on FortItemQuantityListEntryBase_SetPreviewData");
static_assert(sizeof(FortItemQuantityListEntryBase_SetPreviewData) == 0x000008, "Wrong size on FortItemQuantityListEntryBase_SetPreviewData");
static_assert(offsetof(FortItemQuantityListEntryBase_SetPreviewData, PreviewData) == 0x000000, "Member 'FortItemQuantityListEntryBase_SetPreviewData::PreviewData' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListEntryBase.GetItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortItemQuantityListEntryBase_GetItemDefinition final
{
public:
	class UFortItemDefinition*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemQuantityListEntryBase_GetItemDefinition) == 0x000008, "Wrong alignment on FortItemQuantityListEntryBase_GetItemDefinition");
static_assert(sizeof(FortItemQuantityListEntryBase_GetItemDefinition) == 0x000008, "Wrong size on FortItemQuantityListEntryBase_GetItemDefinition");
static_assert(offsetof(FortItemQuantityListEntryBase_GetItemDefinition, ReturnValue) == 0x000000, "Member 'FortItemQuantityListEntryBase_GetItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListEntryBase.GetItemInstance
// 0x0008 (0x0008 - 0x0000)
struct FortItemQuantityListEntryBase_GetItemInstance final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemQuantityListEntryBase_GetItemInstance) == 0x000008, "Wrong alignment on FortItemQuantityListEntryBase_GetItemInstance");
static_assert(sizeof(FortItemQuantityListEntryBase_GetItemInstance) == 0x000008, "Wrong size on FortItemQuantityListEntryBase_GetItemInstance");
static_assert(offsetof(FortItemQuantityListEntryBase_GetItemInstance, ReturnValue) == 0x000000, "Member 'FortItemQuantityListEntryBase_GetItemInstance::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListEntryBase.GetPreviewData
// 0x0008 (0x0008 - 0x0000)
struct FortItemQuantityListEntryBase_GetPreviewData final
{
public:
	struct FFortItemEntryPreviewData              OutPreviewData;                                    // 0x0000(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemQuantityListEntryBase_GetPreviewData) == 0x000004, "Wrong alignment on FortItemQuantityListEntryBase_GetPreviewData");
static_assert(sizeof(FortItemQuantityListEntryBase_GetPreviewData) == 0x000008, "Wrong size on FortItemQuantityListEntryBase_GetPreviewData");
static_assert(offsetof(FortItemQuantityListEntryBase_GetPreviewData, OutPreviewData) == 0x000000, "Member 'FortItemQuantityListEntryBase_GetPreviewData::OutPreviewData' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListEntryBase.IsBeingPreviewed
// 0x0001 (0x0001 - 0x0000)
struct FortItemQuantityListEntryBase_IsBeingPreviewed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemQuantityListEntryBase_IsBeingPreviewed) == 0x000001, "Wrong alignment on FortItemQuantityListEntryBase_IsBeingPreviewed");
static_assert(sizeof(FortItemQuantityListEntryBase_IsBeingPreviewed) == 0x000001, "Wrong size on FortItemQuantityListEntryBase_IsBeingPreviewed");
static_assert(offsetof(FortItemQuantityListEntryBase_IsBeingPreviewed, ReturnValue) == 0x000000, "Member 'FortItemQuantityListEntryBase_IsBeingPreviewed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListBase.AddListEntry
// 0x0008 (0x0008 - 0x0000)
struct FortItemQuantityListBase_AddListEntry final
{
public:
	class UFortItemQuantityListEntryBase*         ListEntry;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemQuantityListBase_AddListEntry) == 0x000008, "Wrong alignment on FortItemQuantityListBase_AddListEntry");
static_assert(sizeof(FortItemQuantityListBase_AddListEntry) == 0x000008, "Wrong size on FortItemQuantityListBase_AddListEntry");
static_assert(offsetof(FortItemQuantityListBase_AddListEntry, ListEntry) == 0x000000, "Member 'FortItemQuantityListBase_AddListEntry::ListEntry' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListBase.GetItemDefinitions
// 0x0010 (0x0010 - 0x0000)
struct FortItemQuantityListBase_GetItemDefinitions final
{
public:
	TArray<class UFortItemDefinition*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemQuantityListBase_GetItemDefinitions) == 0x000008, "Wrong alignment on FortItemQuantityListBase_GetItemDefinitions");
static_assert(sizeof(FortItemQuantityListBase_GetItemDefinitions) == 0x000010, "Wrong size on FortItemQuantityListBase_GetItemDefinitions");
static_assert(offsetof(FortItemQuantityListBase_GetItemDefinitions, ReturnValue) == 0x000000, "Member 'FortItemQuantityListBase_GetItemDefinitions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListBase.SetItemDefinitionsAndQuantities
// 0x0018 (0x0018 - 0x0000)
struct FortItemQuantityListBase_SetItemDefinitionsAndQuantities final
{
public:
	TArray<struct FFortItemQuantityPair>          ItemQuantityPairs;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ShouldResetWidgets;                                // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemQuantityListBase_SetItemDefinitionsAndQuantities) == 0x000008, "Wrong alignment on FortItemQuantityListBase_SetItemDefinitionsAndQuantities");
static_assert(sizeof(FortItemQuantityListBase_SetItemDefinitionsAndQuantities) == 0x000018, "Wrong size on FortItemQuantityListBase_SetItemDefinitionsAndQuantities");
static_assert(offsetof(FortItemQuantityListBase_SetItemDefinitionsAndQuantities, ItemQuantityPairs) == 0x000000, "Member 'FortItemQuantityListBase_SetItemDefinitionsAndQuantities::ItemQuantityPairs' has a wrong offset!");
static_assert(offsetof(FortItemQuantityListBase_SetItemDefinitionsAndQuantities, ShouldResetWidgets) == 0x000010, "Member 'FortItemQuantityListBase_SetItemDefinitionsAndQuantities::ShouldResetWidgets' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListBase.SetItemInspectMode
// 0x0001 (0x0001 - 0x0000)
struct FortItemQuantityListBase_SetItemInspectMode final
{
public:
	EFortItemInspectionMode                       InspectMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemQuantityListBase_SetItemInspectMode) == 0x000001, "Wrong alignment on FortItemQuantityListBase_SetItemInspectMode");
static_assert(sizeof(FortItemQuantityListBase_SetItemInspectMode) == 0x000001, "Wrong size on FortItemQuantityListBase_SetItemInspectMode");
static_assert(offsetof(FortItemQuantityListBase_SetItemInspectMode, InspectMode) == 0x000000, "Member 'FortItemQuantityListBase_SetItemInspectMode::InspectMode' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListBase.SetItemInstancesAndQuantities
// 0x0018 (0x0018 - 0x0000)
struct FortItemQuantityListBase_SetItemInstancesAndQuantities final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  ItemQuantityPairs;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ShouldResetWidgets;                                // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemQuantityListBase_SetItemInstancesAndQuantities) == 0x000008, "Wrong alignment on FortItemQuantityListBase_SetItemInstancesAndQuantities");
static_assert(sizeof(FortItemQuantityListBase_SetItemInstancesAndQuantities) == 0x000018, "Wrong size on FortItemQuantityListBase_SetItemInstancesAndQuantities");
static_assert(offsetof(FortItemQuantityListBase_SetItemInstancesAndQuantities, ItemQuantityPairs) == 0x000000, "Member 'FortItemQuantityListBase_SetItemInstancesAndQuantities::ItemQuantityPairs' has a wrong offset!");
static_assert(offsetof(FortItemQuantityListBase_SetItemInstancesAndQuantities, ShouldResetWidgets) == 0x000010, "Member 'FortItemQuantityListBase_SetItemInstancesAndQuantities::ShouldResetWidgets' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListBase.SetItemToCompareDefinitionsAndQuantities
// 0x0010 (0x0010 - 0x0000)
struct FortItemQuantityListBase_SetItemToCompareDefinitionsAndQuantities final
{
public:
	TArray<struct FFortItemQuantityPair>          ItemToCompareQuantityPairs;                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemQuantityListBase_SetItemToCompareDefinitionsAndQuantities) == 0x000008, "Wrong alignment on FortItemQuantityListBase_SetItemToCompareDefinitionsAndQuantities");
static_assert(sizeof(FortItemQuantityListBase_SetItemToCompareDefinitionsAndQuantities) == 0x000010, "Wrong size on FortItemQuantityListBase_SetItemToCompareDefinitionsAndQuantities");
static_assert(offsetof(FortItemQuantityListBase_SetItemToCompareDefinitionsAndQuantities, ItemToCompareQuantityPairs) == 0x000000, "Member 'FortItemQuantityListBase_SetItemToCompareDefinitionsAndQuantities::ItemToCompareQuantityPairs' has a wrong offset!");

// Function FortniteUI.FortItemQuantityListBase.IsEmptyList
// 0x0001 (0x0001 - 0x0000)
struct FortItemQuantityListBase_IsEmptyList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemQuantityListBase_IsEmptyList) == 0x000001, "Wrong alignment on FortItemQuantityListBase_IsEmptyList");
static_assert(sizeof(FortItemQuantityListBase_IsEmptyList) == 0x000001, "Wrong size on FortItemQuantityListBase_IsEmptyList");
static_assert(offsetof(FortItemQuantityListBase_IsEmptyList, ReturnValue) == 0x000000, "Member 'FortItemQuantityListBase_IsEmptyList::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemRatingIndicator.SetItemToCompareWith
// 0x0008 (0x0008 - 0x0000)
struct FortItemRatingIndicator_SetItemToCompareWith final
{
public:
	const class UFortItem*                        Param_ItemToCompareWith;                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemRatingIndicator_SetItemToCompareWith) == 0x000008, "Wrong alignment on FortItemRatingIndicator_SetItemToCompareWith");
static_assert(sizeof(FortItemRatingIndicator_SetItemToCompareWith) == 0x000008, "Wrong size on FortItemRatingIndicator_SetItemToCompareWith");
static_assert(offsetof(FortItemRatingIndicator_SetItemToCompareWith, Param_ItemToCompareWith) == 0x000000, "Member 'FortItemRatingIndicator_SetItemToCompareWith::Param_ItemToCompareWith' has a wrong offset!");

// Function FortniteUI.FortItemRatingIndicator.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortItemRatingIndicator_SetItemToRepresent final
{
public:
	const class UFortItem*                        Param_ItemToRepresent;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemRatingIndicator_SetItemToRepresent) == 0x000008, "Wrong alignment on FortItemRatingIndicator_SetItemToRepresent");
static_assert(sizeof(FortItemRatingIndicator_SetItemToRepresent) == 0x000008, "Wrong size on FortItemRatingIndicator_SetItemToRepresent");
static_assert(offsetof(FortItemRatingIndicator_SetItemToRepresent, Param_ItemToRepresent) == 0x000000, "Member 'FortItemRatingIndicator_SetItemToRepresent::Param_ItemToRepresent' has a wrong offset!");

// Function FortniteUI.FortItemRatingIndicator.SetItemViewContext
// 0x0010 (0x0010 - 0x0000)
struct FortItemRatingIndicator_SetItemViewContext final
{
public:
	TScriptInterface<class IFortItemViewContextInterface> ItemViewContext;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemRatingIndicator_SetItemViewContext) == 0x000008, "Wrong alignment on FortItemRatingIndicator_SetItemViewContext");
static_assert(sizeof(FortItemRatingIndicator_SetItemViewContext) == 0x000010, "Wrong size on FortItemRatingIndicator_SetItemViewContext");
static_assert(offsetof(FortItemRatingIndicator_SetItemViewContext, ItemViewContext) == 0x000000, "Member 'FortItemRatingIndicator_SetItemViewContext::ItemViewContext' has a wrong offset!");

// Function FortniteUI.FortItemReceivedWidgetBase.GetTemporaryInstance
// 0x0030 (0x0030 - 0x0000)
struct FortItemReceivedWidgetBase_GetTemporaryInstance final
{
public:
	struct FFortReceivedItemLootInfo              ItemReference;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemReceivedWidgetBase_GetTemporaryInstance) == 0x000008, "Wrong alignment on FortItemReceivedWidgetBase_GetTemporaryInstance");
static_assert(sizeof(FortItemReceivedWidgetBase_GetTemporaryInstance) == 0x000030, "Wrong size on FortItemReceivedWidgetBase_GetTemporaryInstance");
static_assert(offsetof(FortItemReceivedWidgetBase_GetTemporaryInstance, ItemReference) == 0x000000, "Member 'FortItemReceivedWidgetBase_GetTemporaryInstance::ItemReference' has a wrong offset!");
static_assert(offsetof(FortItemReceivedWidgetBase_GetTemporaryInstance, ReturnValue) == 0x000028, "Member 'FortItemReceivedWidgetBase_GetTemporaryInstance::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemReceivedWidgetBase.OnGiftBoxItemSet
// 0x0001 (0x0001 - 0x0000)
struct FortItemReceivedWidgetBase_OnGiftBoxItemSet final
{
public:
	bool                                          bFromSelf;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemReceivedWidgetBase_OnGiftBoxItemSet) == 0x000001, "Wrong alignment on FortItemReceivedWidgetBase_OnGiftBoxItemSet");
static_assert(sizeof(FortItemReceivedWidgetBase_OnGiftBoxItemSet) == 0x000001, "Wrong size on FortItemReceivedWidgetBase_OnGiftBoxItemSet");
static_assert(offsetof(FortItemReceivedWidgetBase_OnGiftBoxItemSet, bFromSelf) == 0x000000, "Member 'FortItemReceivedWidgetBase_OnGiftBoxItemSet::bFromSelf' has a wrong offset!");

// Function FortniteUI.FortItemReceivedWidgetBase.OnGiftBoxItemSetInternal
// 0x0001 (0x0001 - 0x0000)
struct FortItemReceivedWidgetBase_OnGiftBoxItemSetInternal final
{
public:
	bool                                          bFromSelf;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemReceivedWidgetBase_OnGiftBoxItemSetInternal) == 0x000001, "Wrong alignment on FortItemReceivedWidgetBase_OnGiftBoxItemSetInternal");
static_assert(sizeof(FortItemReceivedWidgetBase_OnGiftBoxItemSetInternal) == 0x000001, "Wrong size on FortItemReceivedWidgetBase_OnGiftBoxItemSetInternal");
static_assert(offsetof(FortItemReceivedWidgetBase_OnGiftBoxItemSetInternal, bFromSelf) == 0x000000, "Member 'FortItemReceivedWidgetBase_OnGiftBoxItemSetInternal::bFromSelf' has a wrong offset!");

// Function FortniteUI.FortItemReceivedWidgetBase.SetAlignmentOnSlot
// 0x0010 (0x0010 - 0x0000)
struct FortItemReceivedWidgetBase_SetAlignmentOnSlot final
{
public:
	class UScrollBox*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemReceivedWidgetBase_SetAlignmentOnSlot) == 0x000008, "Wrong alignment on FortItemReceivedWidgetBase_SetAlignmentOnSlot");
static_assert(sizeof(FortItemReceivedWidgetBase_SetAlignmentOnSlot) == 0x000010, "Wrong size on FortItemReceivedWidgetBase_SetAlignmentOnSlot");
static_assert(offsetof(FortItemReceivedWidgetBase_SetAlignmentOnSlot, Widget) == 0x000000, "Member 'FortItemReceivedWidgetBase_SetAlignmentOnSlot::Widget' has a wrong offset!");
static_assert(offsetof(FortItemReceivedWidgetBase_SetAlignmentOnSlot, Param_Index) == 0x000008, "Member 'FortItemReceivedWidgetBase_SetAlignmentOnSlot::Param_Index' has a wrong offset!");

// Function FortniteUI.FortItemReceivedWidgetBase.SetAlignmentOnSlots
// 0x0008 (0x0008 - 0x0000)
struct FortItemReceivedWidgetBase_SetAlignmentOnSlots final
{
public:
	class UScrollBox*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemReceivedWidgetBase_SetAlignmentOnSlots) == 0x000008, "Wrong alignment on FortItemReceivedWidgetBase_SetAlignmentOnSlots");
static_assert(sizeof(FortItemReceivedWidgetBase_SetAlignmentOnSlots) == 0x000008, "Wrong size on FortItemReceivedWidgetBase_SetAlignmentOnSlots");
static_assert(offsetof(FortItemReceivedWidgetBase_SetAlignmentOnSlots, Widget) == 0x000000, "Member 'FortItemReceivedWidgetBase_SetAlignmentOnSlots::Widget' has a wrong offset!");

// Function FortniteUI.FortItemReceivedWidgetBase.SetGiftBoxItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemReceivedWidgetBase_SetGiftBoxItem final
{
public:
	class UFortGiftBoxItem*                       Param_GiftBoxItem;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemReceivedWidgetBase_SetGiftBoxItem) == 0x000008, "Wrong alignment on FortItemReceivedWidgetBase_SetGiftBoxItem");
static_assert(sizeof(FortItemReceivedWidgetBase_SetGiftBoxItem) == 0x000008, "Wrong size on FortItemReceivedWidgetBase_SetGiftBoxItem");
static_assert(offsetof(FortItemReceivedWidgetBase_SetGiftBoxItem, Param_GiftBoxItem) == 0x000000, "Member 'FortItemReceivedWidgetBase_SetGiftBoxItem::Param_GiftBoxItem' has a wrong offset!");

// Function FortniteUI.ItemCardWidgetBase.SetLootInfo
// 0x0008 (0x0008 - 0x0000)
struct ItemCardWidgetBase_SetLootInfo final
{
public:
	class UFortGiftInfo*                          Param_LootInfo;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemCardWidgetBase_SetLootInfo) == 0x000008, "Wrong alignment on ItemCardWidgetBase_SetLootInfo");
static_assert(sizeof(ItemCardWidgetBase_SetLootInfo) == 0x000008, "Wrong size on ItemCardWidgetBase_SetLootInfo");
static_assert(offsetof(ItemCardWidgetBase_SetLootInfo, Param_LootInfo) == 0x000000, "Member 'ItemCardWidgetBase_SetLootInfo::Param_LootInfo' has a wrong offset!");

// Function FortniteUI.FortItemTransform.LogSelectedKey
// 0x0008 (0x0008 - 0x0000)
struct FortItemTransform_LogSelectedKey final
{
public:
	const class UFortItem*                        SelectedKey;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemTransform_LogSelectedKey) == 0x000008, "Wrong alignment on FortItemTransform_LogSelectedKey");
static_assert(sizeof(FortItemTransform_LogSelectedKey) == 0x000008, "Wrong size on FortItemTransform_LogSelectedKey");
static_assert(offsetof(FortItemTransform_LogSelectedKey, SelectedKey) == 0x000000, "Member 'FortItemTransform_LogSelectedKey::SelectedKey' has a wrong offset!");

// Function FortniteUI.FortItemView.SetOwningPanel
// 0x0008 (0x0008 - 0x0000)
struct FortItemView_SetOwningPanel final
{
public:
	class UCommonActivatablePanel*                Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemView_SetOwningPanel) == 0x000008, "Wrong alignment on FortItemView_SetOwningPanel");
static_assert(sizeof(FortItemView_SetOwningPanel) == 0x000008, "Wrong size on FortItemView_SetOwningPanel");
static_assert(offsetof(FortItemView_SetOwningPanel, Panel) == 0x000000, "Member 'FortItemView_SetOwningPanel::Panel' has a wrong offset!");

// Function FortniteUI.FortItemView.SetSceneComponentToAffect
// 0x0008 (0x0008 - 0x0000)
struct FortItemView_SetSceneComponentToAffect final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemView_SetSceneComponentToAffect) == 0x000008, "Wrong alignment on FortItemView_SetSceneComponentToAffect");
static_assert(sizeof(FortItemView_SetSceneComponentToAffect) == 0x000008, "Wrong size on FortItemView_SetSceneComponentToAffect");
static_assert(offsetof(FortItemView_SetSceneComponentToAffect, Component) == 0x000000, "Member 'FortItemView_SetSceneComponentToAffect::Component' has a wrong offset!");

// Function FortniteUI.FortItemView.SetSettings
// 0x0034 (0x0034 - 0x0000)
struct FortItemView_SetSettings final
{
public:
	struct FFortItemViewSettings                  Settings;                                          // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemView_SetSettings) == 0x000004, "Wrong alignment on FortItemView_SetSettings");
static_assert(sizeof(FortItemView_SetSettings) == 0x000034, "Wrong size on FortItemView_SetSettings");
static_assert(offsetof(FortItemView_SetSettings, Settings) == 0x000000, "Member 'FortItemView_SetSettings::Settings' has a wrong offset!");

// Function FortniteUI.FortItemView.GetSettings
// 0x0034 (0x0034 - 0x0000)
struct FortItemView_GetSettings final
{
public:
	struct FFortItemViewSettings                  ReturnValue;                                       // 0x0000(0x0034)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemView_GetSettings) == 0x000004, "Wrong alignment on FortItemView_GetSettings");
static_assert(sizeof(FortItemView_GetSettings) == 0x000034, "Wrong size on FortItemView_GetSettings");
static_assert(offsetof(FortItemView_GetSettings, ReturnValue) == 0x000000, "Member 'FortItemView_GetSettings::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.BPOnActivatableChanged
// 0x0001 (0x0001 - 0x0000)
struct FortItemWidget_BPOnActivatableChanged final
{
public:
	bool                                          bNewActivatable;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_BPOnActivatableChanged) == 0x000001, "Wrong alignment on FortItemWidget_BPOnActivatableChanged");
static_assert(sizeof(FortItemWidget_BPOnActivatableChanged) == 0x000001, "Wrong size on FortItemWidget_BPOnActivatableChanged");
static_assert(offsetof(FortItemWidget_BPOnActivatableChanged, bNewActivatable) == 0x000000, "Member 'FortItemWidget_BPOnActivatableChanged::bNewActivatable' has a wrong offset!");

// Function FortniteUI.FortItemWidget.BPOnCooldownSecondsChanged
// 0x0004 (0x0004 - 0x0000)
struct FortItemWidget_BPOnCooldownSecondsChanged final
{
public:
	int32                                         NewCooldownSeconds;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_BPOnCooldownSecondsChanged) == 0x000004, "Wrong alignment on FortItemWidget_BPOnCooldownSecondsChanged");
static_assert(sizeof(FortItemWidget_BPOnCooldownSecondsChanged) == 0x000004, "Wrong size on FortItemWidget_BPOnCooldownSecondsChanged");
static_assert(offsetof(FortItemWidget_BPOnCooldownSecondsChanged, NewCooldownSeconds) == 0x000000, "Member 'FortItemWidget_BPOnCooldownSecondsChanged::NewCooldownSeconds' has a wrong offset!");

// Function FortniteUI.FortItemWidget.BPOnItemSet
// 0x0008 (0x0008 - 0x0000)
struct FortItemWidget_BPOnItemSet final
{
public:
	class UFortItem*                              NewItem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_BPOnItemSet) == 0x000008, "Wrong alignment on FortItemWidget_BPOnItemSet");
static_assert(sizeof(FortItemWidget_BPOnItemSet) == 0x000008, "Wrong size on FortItemWidget_BPOnItemSet");
static_assert(offsetof(FortItemWidget_BPOnItemSet, NewItem) == 0x000000, "Member 'FortItemWidget_BPOnItemSet::NewItem' has a wrong offset!");

// Function FortniteUI.FortItemWidget.GetItemToCompare
// 0x0008 (0x0008 - 0x0000)
struct FortItemWidget_GetItemToCompare final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_GetItemToCompare) == 0x000008, "Wrong alignment on FortItemWidget_GetItemToCompare");
static_assert(sizeof(FortItemWidget_GetItemToCompare) == 0x000008, "Wrong size on FortItemWidget_GetItemToCompare");
static_assert(offsetof(FortItemWidget_GetItemToCompare, ReturnValue) == 0x000000, "Member 'FortItemWidget_GetItemToCompare::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.OnFortItemUpdated
// 0x0003 (0x0003 - 0x0000)
struct FortItemWidget_OnFortItemUpdated final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_OnFortItemUpdated) == 0x000001, "Wrong alignment on FortItemWidget_OnFortItemUpdated");
static_assert(sizeof(FortItemWidget_OnFortItemUpdated) == 0x000003, "Wrong size on FortItemWidget_OnFortItemUpdated");
static_assert(offsetof(FortItemWidget_OnFortItemUpdated, bItemChanged) == 0x000000, "Member 'FortItemWidget_OnFortItemUpdated::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortItemWidget_OnFortItemUpdated, bAmmoChanged) == 0x000001, "Member 'FortItemWidget_OnFortItemUpdated::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortItemWidget_OnFortItemUpdated, bIngredientsChanged) == 0x000002, "Member 'FortItemWidget_OnFortItemUpdated::bIngredientsChanged' has a wrong offset!");

// DelegateFunction FortniteUI.FortItemWidget.OnGetItemToCompare__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortItemWidget_OnGetItemToCompare__DelegateSignature final
{
public:
	class UFortItem*                              ItemToCompare;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_OnGetItemToCompare__DelegateSignature) == 0x000008, "Wrong alignment on FortItemWidget_OnGetItemToCompare__DelegateSignature");
static_assert(sizeof(FortItemWidget_OnGetItemToCompare__DelegateSignature) == 0x000008, "Wrong size on FortItemWidget_OnGetItemToCompare__DelegateSignature");
static_assert(offsetof(FortItemWidget_OnGetItemToCompare__DelegateSignature, ItemToCompare) == 0x000000, "Member 'FortItemWidget_OnGetItemToCompare__DelegateSignature::ItemToCompare' has a wrong offset!");

// Function FortniteUI.FortItemWidget.SetCooldownMaterial
// 0x0008 (0x0008 - 0x0000)
struct FortItemWidget_SetCooldownMaterial final
{
public:
	class UMaterialInstanceDynamic*               NewCooldownMaterial;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_SetCooldownMaterial) == 0x000008, "Wrong alignment on FortItemWidget_SetCooldownMaterial");
static_assert(sizeof(FortItemWidget_SetCooldownMaterial) == 0x000008, "Wrong size on FortItemWidget_SetCooldownMaterial");
static_assert(offsetof(FortItemWidget_SetCooldownMaterial, NewCooldownMaterial) == 0x000000, "Member 'FortItemWidget_SetCooldownMaterial::NewCooldownMaterial' has a wrong offset!");

// Function FortniteUI.FortItemWidget.SetItem
// 0x0010 (0x0010 - 0x0000)
struct FortItemWidget_SetItem final
{
public:
	const class UFortItem*                        InItem;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_QuantityOverride;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemWidget_SetItem) == 0x000008, "Wrong alignment on FortItemWidget_SetItem");
static_assert(sizeof(FortItemWidget_SetItem) == 0x000010, "Wrong size on FortItemWidget_SetItem");
static_assert(offsetof(FortItemWidget_SetItem, InItem) == 0x000000, "Member 'FortItemWidget_SetItem::InItem' has a wrong offset!");
static_assert(offsetof(FortItemWidget_SetItem, Param_QuantityOverride) == 0x000008, "Member 'FortItemWidget_SetItem::Param_QuantityOverride' has a wrong offset!");

// Function FortniteUI.FortItemWidget.SetOnGetItemToCompareDelegate
// 0x0010 (0x0010 - 0x0000)
struct FortItemWidget_SetOnGetItemToCompareDelegate final
{
public:
	TDelegate<void(class UFortItem** ItemToCompare)> InDelegate;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_SetOnGetItemToCompareDelegate) == 0x000004, "Wrong alignment on FortItemWidget_SetOnGetItemToCompareDelegate");
static_assert(sizeof(FortItemWidget_SetOnGetItemToCompareDelegate) == 0x000010, "Wrong size on FortItemWidget_SetOnGetItemToCompareDelegate");
static_assert(offsetof(FortItemWidget_SetOnGetItemToCompareDelegate, InDelegate) == 0x000000, "Member 'FortItemWidget_SetOnGetItemToCompareDelegate::InDelegate' has a wrong offset!");

// Function FortniteUI.FortItemWidget.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct FortItemWidget_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_GetDescription) == 0x000008, "Wrong alignment on FortItemWidget_GetDescription");
static_assert(sizeof(FortItemWidget_GetDescription) == 0x000018, "Wrong size on FortItemWidget_GetDescription");
static_assert(offsetof(FortItemWidget_GetDescription, ReturnValue) == 0x000000, "Member 'FortItemWidget_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortItemWidget_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_GetDisplayName) == 0x000008, "Wrong alignment on FortItemWidget_GetDisplayName");
static_assert(sizeof(FortItemWidget_GetDisplayName) == 0x000018, "Wrong size on FortItemWidget_GetDisplayName");
static_assert(offsetof(FortItemWidget_GetDisplayName, ReturnValue) == 0x000000, "Member 'FortItemWidget_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.GetDurability
// 0x0004 (0x0004 - 0x0000)
struct FortItemWidget_GetDurability final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_GetDurability) == 0x000004, "Wrong alignment on FortItemWidget_GetDurability");
static_assert(sizeof(FortItemWidget_GetDurability) == 0x000004, "Wrong size on FortItemWidget_GetDurability");
static_assert(offsetof(FortItemWidget_GetDurability, ReturnValue) == 0x000000, "Member 'FortItemWidget_GetDurability::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.GetIconTexture
// 0x0010 (0x0010 - 0x0000)
struct FortItemWidget_GetIconTexture final
{
public:
	EFortBrushSize                                InBrushSize;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_GetIconTexture) == 0x000008, "Wrong alignment on FortItemWidget_GetIconTexture");
static_assert(sizeof(FortItemWidget_GetIconTexture) == 0x000010, "Wrong size on FortItemWidget_GetIconTexture");
static_assert(offsetof(FortItemWidget_GetIconTexture, InBrushSize) == 0x000000, "Member 'FortItemWidget_GetIconTexture::InBrushSize' has a wrong offset!");
static_assert(offsetof(FortItemWidget_GetIconTexture, ReturnValue) == 0x000008, "Member 'FortItemWidget_GetIconTexture::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.GetItem
// 0x0008 (0x0008 - 0x0000)
struct FortItemWidget_GetItem final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_GetItem) == 0x000008, "Wrong alignment on FortItemWidget_GetItem");
static_assert(sizeof(FortItemWidget_GetItem) == 0x000008, "Wrong size on FortItemWidget_GetItem");
static_assert(offsetof(FortItemWidget_GetItem, ReturnValue) == 0x000000, "Member 'FortItemWidget_GetItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct FortItemWidget_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_GetLevel) == 0x000004, "Wrong alignment on FortItemWidget_GetLevel");
static_assert(sizeof(FortItemWidget_GetLevel) == 0x000004, "Wrong size on FortItemWidget_GetLevel");
static_assert(offsetof(FortItemWidget_GetLevel, ReturnValue) == 0x000000, "Member 'FortItemWidget_GetLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.GetRarity
// 0x0001 (0x0001 - 0x0000)
struct FortItemWidget_GetRarity final
{
public:
	EFortRarity                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_GetRarity) == 0x000001, "Wrong alignment on FortItemWidget_GetRarity");
static_assert(sizeof(FortItemWidget_GetRarity) == 0x000001, "Wrong size on FortItemWidget_GetRarity");
static_assert(offsetof(FortItemWidget_GetRarity, ReturnValue) == 0x000000, "Member 'FortItemWidget_GetRarity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.GetStackCount
// 0x0004 (0x0004 - 0x0000)
struct FortItemWidget_GetStackCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_GetStackCount) == 0x000004, "Wrong alignment on FortItemWidget_GetStackCount");
static_assert(sizeof(FortItemWidget_GetStackCount) == 0x000004, "Wrong size on FortItemWidget_GetStackCount");
static_assert(offsetof(FortItemWidget_GetStackCount, ReturnValue) == 0x000000, "Member 'FortItemWidget_GetStackCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.GetType
// 0x0004 (0x0004 - 0x0000)
struct FortItemWidget_GetType final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_GetType) == 0x000004, "Wrong alignment on FortItemWidget_GetType");
static_assert(sizeof(FortItemWidget_GetType) == 0x000004, "Wrong size on FortItemWidget_GetType");
static_assert(offsetof(FortItemWidget_GetType, ReturnValue) == 0x000000, "Member 'FortItemWidget_GetType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.HasDurability
// 0x0001 (0x0001 - 0x0000)
struct FortItemWidget_HasDurability final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_HasDurability) == 0x000001, "Wrong alignment on FortItemWidget_HasDurability");
static_assert(sizeof(FortItemWidget_HasDurability) == 0x000001, "Wrong size on FortItemWidget_HasDurability");
static_assert(offsetof(FortItemWidget_HasDurability, ReturnValue) == 0x000000, "Member 'FortItemWidget_HasDurability::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.HasLevel
// 0x0001 (0x0001 - 0x0000)
struct FortItemWidget_HasLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_HasLevel) == 0x000001, "Wrong alignment on FortItemWidget_HasLevel");
static_assert(sizeof(FortItemWidget_HasLevel) == 0x000001, "Wrong size on FortItemWidget_HasLevel");
static_assert(offsetof(FortItemWidget_HasLevel, ReturnValue) == 0x000000, "Member 'FortItemWidget_HasLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.HasSecondaryCategory
// 0x0001 (0x0001 - 0x0000)
struct FortItemWidget_HasSecondaryCategory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_HasSecondaryCategory) == 0x000001, "Wrong alignment on FortItemWidget_HasSecondaryCategory");
static_assert(sizeof(FortItemWidget_HasSecondaryCategory) == 0x000001, "Wrong size on FortItemWidget_HasSecondaryCategory");
static_assert(offsetof(FortItemWidget_HasSecondaryCategory, ReturnValue) == 0x000000, "Member 'FortItemWidget_HasSecondaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.HasTertiaryCategory
// 0x0001 (0x0001 - 0x0000)
struct FortItemWidget_HasTertiaryCategory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_HasTertiaryCategory) == 0x000001, "Wrong alignment on FortItemWidget_HasTertiaryCategory");
static_assert(sizeof(FortItemWidget_HasTertiaryCategory) == 0x000001, "Wrong size on FortItemWidget_HasTertiaryCategory");
static_assert(offsetof(FortItemWidget_HasTertiaryCategory, ReturnValue) == 0x000000, "Member 'FortItemWidget_HasTertiaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct FortItemWidget_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_IsEquipped) == 0x000001, "Wrong alignment on FortItemWidget_IsEquipped");
static_assert(sizeof(FortItemWidget_IsEquipped) == 0x000001, "Wrong size on FortItemWidget_IsEquipped");
static_assert(offsetof(FortItemWidget_IsEquipped, ReturnValue) == 0x000000, "Member 'FortItemWidget_IsEquipped::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.IsInventoryOverflowItem
// 0x0001 (0x0001 - 0x0000)
struct FortItemWidget_IsInventoryOverflowItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_IsInventoryOverflowItem) == 0x000001, "Wrong alignment on FortItemWidget_IsInventoryOverflowItem");
static_assert(sizeof(FortItemWidget_IsInventoryOverflowItem) == 0x000001, "Wrong size on FortItemWidget_IsInventoryOverflowItem");
static_assert(offsetof(FortItemWidget_IsInventoryOverflowItem, ReturnValue) == 0x000000, "Member 'FortItemWidget_IsInventoryOverflowItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.IsItemValid
// 0x0001 (0x0001 - 0x0000)
struct FortItemWidget_IsItemValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_IsItemValid) == 0x000001, "Wrong alignment on FortItemWidget_IsItemValid");
static_assert(sizeof(FortItemWidget_IsItemValid) == 0x000001, "Wrong size on FortItemWidget_IsItemValid");
static_assert(offsetof(FortItemWidget_IsItemValid, ReturnValue) == 0x000000, "Member 'FortItemWidget_IsItemValid::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.IsSchematic
// 0x0001 (0x0001 - 0x0000)
struct FortItemWidget_IsSchematic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_IsSchematic) == 0x000001, "Wrong alignment on FortItemWidget_IsSchematic");
static_assert(sizeof(FortItemWidget_IsSchematic) == 0x000001, "Wrong size on FortItemWidget_IsSchematic");
static_assert(offsetof(FortItemWidget_IsSchematic, ReturnValue) == 0x000000, "Member 'FortItemWidget_IsSchematic::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortItemWidget.IsSlotted
// 0x0001 (0x0001 - 0x0000)
struct FortItemWidget_IsSlotted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemWidget_IsSlotted) == 0x000001, "Wrong alignment on FortItemWidget_IsSlotted");
static_assert(sizeof(FortItemWidget_IsSlotted) == 0x000001, "Wrong size on FortItemWidget_IsSlotted");
static_assert(offsetof(FortItemWidget_IsSlotted, ReturnValue) == 0x000000, "Member 'FortItemWidget_IsSlotted::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortJoinablePartyListEntry.OnInviteStatusUpdated
// 0x0001 (0x0001 - 0x0000)
struct FortJoinablePartyListEntry_OnInviteStatusUpdated final
{
public:
	bool                                          bIsInvited;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJoinablePartyListEntry_OnInviteStatusUpdated) == 0x000001, "Wrong alignment on FortJoinablePartyListEntry_OnInviteStatusUpdated");
static_assert(sizeof(FortJoinablePartyListEntry_OnInviteStatusUpdated) == 0x000001, "Wrong size on FortJoinablePartyListEntry_OnInviteStatusUpdated");
static_assert(offsetof(FortJoinablePartyListEntry_OnInviteStatusUpdated, bIsInvited) == 0x000000, "Member 'FortJoinablePartyListEntry_OnInviteStatusUpdated::bIsInvited' has a wrong offset!");

// Function FortniteUI.FortJournalQuestDetails.CanGotoQuest
// 0x0001 (0x0001 - 0x0000)
struct FortJournalQuestDetails_CanGotoQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_CanGotoQuest) == 0x000001, "Wrong alignment on FortJournalQuestDetails_CanGotoQuest");
static_assert(sizeof(FortJournalQuestDetails_CanGotoQuest) == 0x000001, "Wrong size on FortJournalQuestDetails_CanGotoQuest");
static_assert(offsetof(FortJournalQuestDetails_CanGotoQuest, ReturnValue) == 0x000000, "Member 'FortJournalQuestDetails_CanGotoQuest::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortJournalQuestDetails.CanPartyLeaderPlayQuest
// 0x0001 (0x0001 - 0x0000)
struct FortJournalQuestDetails_CanPartyLeaderPlayQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_CanPartyLeaderPlayQuest) == 0x000001, "Wrong alignment on FortJournalQuestDetails_CanPartyLeaderPlayQuest");
static_assert(sizeof(FortJournalQuestDetails_CanPartyLeaderPlayQuest) == 0x000001, "Wrong size on FortJournalQuestDetails_CanPartyLeaderPlayQuest");
static_assert(offsetof(FortJournalQuestDetails_CanPartyLeaderPlayQuest, ReturnValue) == 0x000000, "Member 'FortJournalQuestDetails_CanPartyLeaderPlayQuest::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortJournalQuestDetails.CanPlayQuest
// 0x0001 (0x0001 - 0x0000)
struct FortJournalQuestDetails_CanPlayQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_CanPlayQuest) == 0x000001, "Wrong alignment on FortJournalQuestDetails_CanPlayQuest");
static_assert(sizeof(FortJournalQuestDetails_CanPlayQuest) == 0x000001, "Wrong size on FortJournalQuestDetails_CanPlayQuest");
static_assert(offsetof(FortJournalQuestDetails_CanPlayQuest, ReturnValue) == 0x000000, "Member 'FortJournalQuestDetails_CanPlayQuest::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortJournalQuestDetails.GetActiveMissionTileType
// 0x0001 (0x0001 - 0x0000)
struct FortJournalQuestDetails_GetActiveMissionTileType final
{
public:
	EFortTheaterMapTileType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_GetActiveMissionTileType) == 0x000001, "Wrong alignment on FortJournalQuestDetails_GetActiveMissionTileType");
static_assert(sizeof(FortJournalQuestDetails_GetActiveMissionTileType) == 0x000001, "Wrong size on FortJournalQuestDetails_GetActiveMissionTileType");
static_assert(offsetof(FortJournalQuestDetails_GetActiveMissionTileType, ReturnValue) == 0x000000, "Member 'FortJournalQuestDetails_GetActiveMissionTileType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortJournalQuestDetails.GetFutureObjectives
// 0x0010 (0x0010 - 0x0000)
struct FortJournalQuestDetails_GetFutureObjectives final
{
public:
	TArray<class UFortQuestObjectiveInfo*>        FutureObjectives;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_GetFutureObjectives) == 0x000008, "Wrong alignment on FortJournalQuestDetails_GetFutureObjectives");
static_assert(sizeof(FortJournalQuestDetails_GetFutureObjectives) == 0x000010, "Wrong size on FortJournalQuestDetails_GetFutureObjectives");
static_assert(offsetof(FortJournalQuestDetails_GetFutureObjectives, FutureObjectives) == 0x000000, "Member 'FortJournalQuestDetails_GetFutureObjectives::FutureObjectives' has a wrong offset!");

// Function FortniteUI.FortJournalQuestDetails.GetRewards
// 0x0020 (0x0020 - 0x0000)
struct FortJournalQuestDetails_GetRewards final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  OutRewards;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemInstanceQuantityPair>  OutSelectableRewards;                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_GetRewards) == 0x000008, "Wrong alignment on FortJournalQuestDetails_GetRewards");
static_assert(sizeof(FortJournalQuestDetails_GetRewards) == 0x000020, "Wrong size on FortJournalQuestDetails_GetRewards");
static_assert(offsetof(FortJournalQuestDetails_GetRewards, OutRewards) == 0x000000, "Member 'FortJournalQuestDetails_GetRewards::OutRewards' has a wrong offset!");
static_assert(offsetof(FortJournalQuestDetails_GetRewards, OutSelectableRewards) == 0x000010, "Member 'FortJournalQuestDetails_GetRewards::OutSelectableRewards' has a wrong offset!");

// Function FortniteUI.FortJournalQuestDetails.GetVisibleObjectives
// 0x0010 (0x0010 - 0x0000)
struct FortJournalQuestDetails_GetVisibleObjectives final
{
public:
	TArray<class UFortQuestObjectiveInfo*>        VisibleObjectives;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_GetVisibleObjectives) == 0x000008, "Wrong alignment on FortJournalQuestDetails_GetVisibleObjectives");
static_assert(sizeof(FortJournalQuestDetails_GetVisibleObjectives) == 0x000010, "Wrong size on FortJournalQuestDetails_GetVisibleObjectives");
static_assert(offsetof(FortJournalQuestDetails_GetVisibleObjectives, VisibleObjectives) == 0x000000, "Member 'FortJournalQuestDetails_GetVisibleObjectives::VisibleObjectives' has a wrong offset!");

// Function FortniteUI.FortJournalQuestDetails.SetCurrentQuest
// 0x0008 (0x0008 - 0x0000)
struct FortJournalQuestDetails_SetCurrentQuest final
{
public:
	class UFortQuestItem*                         InCurrentQuest;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortJournalQuestDetails_SetCurrentQuest) == 0x000008, "Wrong alignment on FortJournalQuestDetails_SetCurrentQuest");
static_assert(sizeof(FortJournalQuestDetails_SetCurrentQuest) == 0x000008, "Wrong size on FortJournalQuestDetails_SetCurrentQuest");
static_assert(offsetof(FortJournalQuestDetails_SetCurrentQuest, InCurrentQuest) == 0x000000, "Member 'FortJournalQuestDetails_SetCurrentQuest::InCurrentQuest' has a wrong offset!");

// Function FortniteUI.FortJournalQuestProgressBar.GetProgressDetails
// 0x0038 (0x0038 - 0x0000)
struct FortJournalQuestProgressBar_GetProgressDetails final
{
public:
	class FText                                   OutNumerator;                                      // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   OutDenominator;                                    // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	float                                         OutFraction;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortJournalQuestProgressBar_GetProgressDetails) == 0x000008, "Wrong alignment on FortJournalQuestProgressBar_GetProgressDetails");
static_assert(sizeof(FortJournalQuestProgressBar_GetProgressDetails) == 0x000038, "Wrong size on FortJournalQuestProgressBar_GetProgressDetails");
static_assert(offsetof(FortJournalQuestProgressBar_GetProgressDetails, OutNumerator) == 0x000000, "Member 'FortJournalQuestProgressBar_GetProgressDetails::OutNumerator' has a wrong offset!");
static_assert(offsetof(FortJournalQuestProgressBar_GetProgressDetails, OutDenominator) == 0x000018, "Member 'FortJournalQuestProgressBar_GetProgressDetails::OutDenominator' has a wrong offset!");
static_assert(offsetof(FortJournalQuestProgressBar_GetProgressDetails, OutFraction) == 0x000030, "Member 'FortJournalQuestProgressBar_GetProgressDetails::OutFraction' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.SetAxisScale
// 0x0004 (0x0004 - 0x0000)
struct FortKeybindWidget_SetAxisScale final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_SetAxisScale) == 0x000004, "Wrong alignment on FortKeybindWidget_SetAxisScale");
static_assert(sizeof(FortKeybindWidget_SetAxisScale) == 0x000004, "Wrong size on FortKeybindWidget_SetAxisScale");
static_assert(offsetof(FortKeybindWidget_SetAxisScale, NewValue) == 0x000000, "Member 'FortKeybindWidget_SetAxisScale::NewValue' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.SetBoundAction
// 0x0008 (0x0008 - 0x0000)
struct FortKeybindWidget_SetBoundAction final
{
public:
	class FName                                   NewBoundAction;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_SetBoundAction) == 0x000004, "Wrong alignment on FortKeybindWidget_SetBoundAction");
static_assert(sizeof(FortKeybindWidget_SetBoundAction) == 0x000008, "Wrong size on FortKeybindWidget_SetBoundAction");
static_assert(offsetof(FortKeybindWidget_SetBoundAction, NewBoundAction) == 0x000000, "Member 'FortKeybindWidget_SetBoundAction::NewBoundAction' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.SetBoundKey
// 0x0018 (0x0018 - 0x0000)
struct FortKeybindWidget_SetBoundKey final
{
public:
	struct FKey                                   NewBoundAction;                                    // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_SetBoundKey) == 0x000008, "Wrong alignment on FortKeybindWidget_SetBoundKey");
static_assert(sizeof(FortKeybindWidget_SetBoundKey) == 0x000018, "Wrong size on FortKeybindWidget_SetBoundKey");
static_assert(offsetof(FortKeybindWidget_SetBoundKey, NewBoundAction) == 0x000000, "Member 'FortKeybindWidget_SetBoundKey::NewBoundAction' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.SetBrushSize
// 0x0001 (0x0001 - 0x0000)
struct FortKeybindWidget_SetBrushSize final
{
public:
	EFortBrushSize                                InBrushSize;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_SetBrushSize) == 0x000001, "Wrong alignment on FortKeybindWidget_SetBrushSize");
static_assert(sizeof(FortKeybindWidget_SetBrushSize) == 0x000001, "Wrong size on FortKeybindWidget_SetBrushSize");
static_assert(offsetof(FortKeybindWidget_SetBrushSize, InBrushSize) == 0x000000, "Member 'FortKeybindWidget_SetBrushSize::InBrushSize' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.SetForcedHoldKeybind
// 0x0001 (0x0001 - 0x0000)
struct FortKeybindWidget_SetForcedHoldKeybind final
{
public:
	bool                                          InForcedHoldKeybind;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_SetForcedHoldKeybind) == 0x000001, "Wrong alignment on FortKeybindWidget_SetForcedHoldKeybind");
static_assert(sizeof(FortKeybindWidget_SetForcedHoldKeybind) == 0x000001, "Wrong size on FortKeybindWidget_SetForcedHoldKeybind");
static_assert(offsetof(FortKeybindWidget_SetForcedHoldKeybind, InForcedHoldKeybind) == 0x000000, "Member 'FortKeybindWidget_SetForcedHoldKeybind::InForcedHoldKeybind' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.SetForcedHoldKeybindStatus
// 0x0001 (0x0001 - 0x0000)
struct FortKeybindWidget_SetForcedHoldKeybindStatus final
{
public:
	EFortKeybindForcedHoldStatus                  InForcedHoldKeybindStatus;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_SetForcedHoldKeybindStatus) == 0x000001, "Wrong alignment on FortKeybindWidget_SetForcedHoldKeybindStatus");
static_assert(sizeof(FortKeybindWidget_SetForcedHoldKeybindStatus) == 0x000001, "Wrong size on FortKeybindWidget_SetForcedHoldKeybindStatus");
static_assert(offsetof(FortKeybindWidget_SetForcedHoldKeybindStatus, InForcedHoldKeybindStatus) == 0x000000, "Member 'FortKeybindWidget_SetForcedHoldKeybindStatus::InForcedHoldKeybindStatus' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.SetPresetNameOverride
// 0x0008 (0x0008 - 0x0000)
struct FortKeybindWidget_SetPresetNameOverride final
{
public:
	class FName                                   NewValue;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_SetPresetNameOverride) == 0x000004, "Wrong alignment on FortKeybindWidget_SetPresetNameOverride");
static_assert(sizeof(FortKeybindWidget_SetPresetNameOverride) == 0x000008, "Wrong size on FortKeybindWidget_SetPresetNameOverride");
static_assert(offsetof(FortKeybindWidget_SetPresetNameOverride, NewValue) == 0x000000, "Member 'FortKeybindWidget_SetPresetNameOverride::NewValue' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.SetShowProgressCountDown
// 0x0001 (0x0001 - 0x0000)
struct FortKeybindWidget_SetShowProgressCountDown final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_SetShowProgressCountDown) == 0x000001, "Wrong alignment on FortKeybindWidget_SetShowProgressCountDown");
static_assert(sizeof(FortKeybindWidget_SetShowProgressCountDown) == 0x000001, "Wrong size on FortKeybindWidget_SetShowProgressCountDown");
static_assert(offsetof(FortKeybindWidget_SetShowProgressCountDown, bShow) == 0x000000, "Member 'FortKeybindWidget_SetShowProgressCountDown::bShow' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.StartHoldProgress
// 0x000C (0x000C - 0x0000)
struct FortKeybindWidget_StartHoldProgress final
{
public:
	class FName                                   HoldActionName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldDuration;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_StartHoldProgress) == 0x000004, "Wrong alignment on FortKeybindWidget_StartHoldProgress");
static_assert(sizeof(FortKeybindWidget_StartHoldProgress) == 0x00000C, "Wrong size on FortKeybindWidget_StartHoldProgress");
static_assert(offsetof(FortKeybindWidget_StartHoldProgress, HoldActionName) == 0x000000, "Member 'FortKeybindWidget_StartHoldProgress::HoldActionName' has a wrong offset!");
static_assert(offsetof(FortKeybindWidget_StartHoldProgress, HoldDuration) == 0x000008, "Member 'FortKeybindWidget_StartHoldProgress::HoldDuration' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.StopHoldProgress
// 0x000C (0x000C - 0x0000)
struct FortKeybindWidget_StopHoldProgress final
{
public:
	class FName                                   HoldActionName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompletedSuccessfully;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKeybindWidget_StopHoldProgress) == 0x000004, "Wrong alignment on FortKeybindWidget_StopHoldProgress");
static_assert(sizeof(FortKeybindWidget_StopHoldProgress) == 0x00000C, "Wrong size on FortKeybindWidget_StopHoldProgress");
static_assert(offsetof(FortKeybindWidget_StopHoldProgress, HoldActionName) == 0x000000, "Member 'FortKeybindWidget_StopHoldProgress::HoldActionName' has a wrong offset!");
static_assert(offsetof(FortKeybindWidget_StopHoldProgress, bCompletedSuccessfully) == 0x000008, "Member 'FortKeybindWidget_StopHoldProgress::bCompletedSuccessfully' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.GetBrushForKey
// 0x0098 (0x0098 - 0x0000)
struct FortKeybindWidget_GetBrushForKey final
{
public:
	EFortBrushSize                                InBrushSize;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0008(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKeybindWidget_GetBrushForKey) == 0x000008, "Wrong alignment on FortKeybindWidget_GetBrushForKey");
static_assert(sizeof(FortKeybindWidget_GetBrushForKey) == 0x000098, "Wrong size on FortKeybindWidget_GetBrushForKey");
static_assert(offsetof(FortKeybindWidget_GetBrushForKey, InBrushSize) == 0x000000, "Member 'FortKeybindWidget_GetBrushForKey::InBrushSize' has a wrong offset!");
static_assert(offsetof(FortKeybindWidget_GetBrushForKey, Brush) == 0x000008, "Member 'FortKeybindWidget_GetBrushForKey::Brush' has a wrong offset!");
static_assert(offsetof(FortKeybindWidget_GetBrushForKey, ReturnValue) == 0x000090, "Member 'FortKeybindWidget_GetBrushForKey::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.GetBrushSize
// 0x0001 (0x0001 - 0x0000)
struct FortKeybindWidget_GetBrushSize final
{
public:
	EFortBrushSize                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_GetBrushSize) == 0x000001, "Wrong alignment on FortKeybindWidget_GetBrushSize");
static_assert(sizeof(FortKeybindWidget_GetBrushSize) == 0x000001, "Wrong size on FortKeybindWidget_GetBrushSize");
static_assert(offsetof(FortKeybindWidget_GetBrushSize, ReturnValue) == 0x000000, "Member 'FortKeybindWidget_GetBrushSize::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.IsBoundKeyValid
// 0x0001 (0x0001 - 0x0000)
struct FortKeybindWidget_IsBoundKeyValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_IsBoundKeyValid) == 0x000001, "Wrong alignment on FortKeybindWidget_IsBoundKeyValid");
static_assert(sizeof(FortKeybindWidget_IsBoundKeyValid) == 0x000001, "Wrong size on FortKeybindWidget_IsBoundKeyValid");
static_assert(offsetof(FortKeybindWidget_IsBoundKeyValid, ReturnValue) == 0x000000, "Member 'FortKeybindWidget_IsBoundKeyValid::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortKeybindWidget.IsHoldKeybind
// 0x0001 (0x0001 - 0x0000)
struct FortKeybindWidget_IsHoldKeybind final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeybindWidget_IsHoldKeybind) == 0x000001, "Wrong alignment on FortKeybindWidget_IsHoldKeybind");
static_assert(sizeof(FortKeybindWidget_IsHoldKeybind) == 0x000001, "Wrong size on FortKeybindWidget_IsHoldKeybind");
static_assert(offsetof(FortKeybindWidget_IsHoldKeybind, ReturnValue) == 0x000000, "Member 'FortKeybindWidget_IsHoldKeybind::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLeaderboardContext.CanShowGlobalLeaderboards
// 0x0001 (0x0001 - 0x0000)
struct FortLeaderboardContext_CanShowGlobalLeaderboards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLeaderboardContext_CanShowGlobalLeaderboards) == 0x000001, "Wrong alignment on FortLeaderboardContext_CanShowGlobalLeaderboards");
static_assert(sizeof(FortLeaderboardContext_CanShowGlobalLeaderboards) == 0x000001, "Wrong size on FortLeaderboardContext_CanShowGlobalLeaderboards");
static_assert(offsetof(FortLeaderboardContext_CanShowGlobalLeaderboards, ReturnValue) == 0x000000, "Member 'FortLeaderboardContext_CanShowGlobalLeaderboards::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLeaderboardContext.CanShowLeaderboards
// 0x0001 (0x0001 - 0x0000)
struct FortLeaderboardContext_CanShowLeaderboards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLeaderboardContext_CanShowLeaderboards) == 0x000001, "Wrong alignment on FortLeaderboardContext_CanShowLeaderboards");
static_assert(sizeof(FortLeaderboardContext_CanShowLeaderboards) == 0x000001, "Wrong size on FortLeaderboardContext_CanShowLeaderboards");
static_assert(offsetof(FortLeaderboardContext_CanShowLeaderboards, ReturnValue) == 0x000000, "Member 'FortLeaderboardContext_CanShowLeaderboards::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLeaderboardContext.CanShowStats
// 0x0001 (0x0001 - 0x0000)
struct FortLeaderboardContext_CanShowStats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLeaderboardContext_CanShowStats) == 0x000001, "Wrong alignment on FortLeaderboardContext_CanShowStats");
static_assert(sizeof(FortLeaderboardContext_CanShowStats) == 0x000001, "Wrong size on FortLeaderboardContext_CanShowStats");
static_assert(offsetof(FortLeaderboardContext_CanShowStats, ReturnValue) == 0x000000, "Member 'FortLeaderboardContext_CanShowStats::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLeaderboardEntryDetails.WatchLiveMatch
// 0x0010 (0x0010 - 0x0000)
struct FortLeaderboardEntryDetails_WatchLiveMatch final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLeaderboardEntryDetails_WatchLiveMatch) == 0x000008, "Wrong alignment on FortLeaderboardEntryDetails_WatchLiveMatch");
static_assert(sizeof(FortLeaderboardEntryDetails_WatchLiveMatch) == 0x000010, "Wrong size on FortLeaderboardEntryDetails_WatchLiveMatch");
static_assert(offsetof(FortLeaderboardEntryDetails_WatchLiveMatch, SessionId) == 0x000000, "Member 'FortLeaderboardEntryDetails_WatchLiveMatch::SessionId' has a wrong offset!");

// Function FortniteUI.FortLeaveDialog.SetupLeaveDialog
// 0x0038 (0x0038 - 0x0000)
struct FortLeaveDialog_SetupLeaveDialog final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InDescription;                                     // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInShowPartyOptions;                               // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortLeaveDialog_SetupLeaveDialog) == 0x000008, "Wrong alignment on FortLeaveDialog_SetupLeaveDialog");
static_assert(sizeof(FortLeaveDialog_SetupLeaveDialog) == 0x000038, "Wrong size on FortLeaveDialog_SetupLeaveDialog");
static_assert(offsetof(FortLeaveDialog_SetupLeaveDialog, InTitle) == 0x000000, "Member 'FortLeaveDialog_SetupLeaveDialog::InTitle' has a wrong offset!");
static_assert(offsetof(FortLeaveDialog_SetupLeaveDialog, InDescription) == 0x000018, "Member 'FortLeaveDialog_SetupLeaveDialog::InDescription' has a wrong offset!");
static_assert(offsetof(FortLeaveDialog_SetupLeaveDialog, bInShowPartyOptions) == 0x000030, "Member 'FortLeaveDialog_SetupLeaveDialog::bInShowPartyOptions' has a wrong offset!");

// Function FortniteUI.FortLegacySlateBridgeWidget.SetOnCloseHandler
// 0x0010 (0x0010 - 0x0000)
struct FortLegacySlateBridgeWidget_SetOnCloseHandler final
{
public:
	TDelegate<void()>                             OnCloseHandler;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLegacySlateBridgeWidget_SetOnCloseHandler) == 0x000004, "Wrong alignment on FortLegacySlateBridgeWidget_SetOnCloseHandler");
static_assert(sizeof(FortLegacySlateBridgeWidget_SetOnCloseHandler) == 0x000010, "Wrong size on FortLegacySlateBridgeWidget_SetOnCloseHandler");
static_assert(offsetof(FortLegacySlateBridgeWidget_SetOnCloseHandler, OnCloseHandler) == 0x000000, "Member 'FortLegacySlateBridgeWidget_SetOnCloseHandler::OnCloseHandler' has a wrong offset!");

// Function FortniteUI.FortLegacySlateBridgeWidget.UpdateSlateWidget
// 0x0001 (0x0001 - 0x0000)
struct FortLegacySlateBridgeWidget_UpdateSlateWidget final
{
public:
	EFortLegacySlateWidget                        SlateWidgetType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLegacySlateBridgeWidget_UpdateSlateWidget) == 0x000001, "Wrong alignment on FortLegacySlateBridgeWidget_UpdateSlateWidget");
static_assert(sizeof(FortLegacySlateBridgeWidget_UpdateSlateWidget) == 0x000001, "Wrong size on FortLegacySlateBridgeWidget_UpdateSlateWidget");
static_assert(offsetof(FortLegacySlateBridgeWidget_UpdateSlateWidget, SlateWidgetType) == 0x000000, "Member 'FortLegacySlateBridgeWidget_UpdateSlateWidget::SlateWidgetType' has a wrong offset!");

// Function FortniteUI.FortLevelIndicator.HandleItemForComparisonChanged
// 0x0003 (0x0003 - 0x0000)
struct FortLevelIndicator_HandleItemForComparisonChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLevelIndicator_HandleItemForComparisonChanged) == 0x000001, "Wrong alignment on FortLevelIndicator_HandleItemForComparisonChanged");
static_assert(sizeof(FortLevelIndicator_HandleItemForComparisonChanged) == 0x000003, "Wrong size on FortLevelIndicator_HandleItemForComparisonChanged");
static_assert(offsetof(FortLevelIndicator_HandleItemForComparisonChanged, bItemChanged) == 0x000000, "Member 'FortLevelIndicator_HandleItemForComparisonChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortLevelIndicator_HandleItemForComparisonChanged, bAmmoChanged) == 0x000001, "Member 'FortLevelIndicator_HandleItemForComparisonChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortLevelIndicator_HandleItemForComparisonChanged, bIngredientsChanged) == 0x000002, "Member 'FortLevelIndicator_HandleItemForComparisonChanged::bIngredientsChanged' has a wrong offset!");

// Function FortniteUI.FortLevelIndicator.HandleItemToRepresentChanged
// 0x0003 (0x0003 - 0x0000)
struct FortLevelIndicator_HandleItemToRepresentChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLevelIndicator_HandleItemToRepresentChanged) == 0x000001, "Wrong alignment on FortLevelIndicator_HandleItemToRepresentChanged");
static_assert(sizeof(FortLevelIndicator_HandleItemToRepresentChanged) == 0x000003, "Wrong size on FortLevelIndicator_HandleItemToRepresentChanged");
static_assert(offsetof(FortLevelIndicator_HandleItemToRepresentChanged, bItemChanged) == 0x000000, "Member 'FortLevelIndicator_HandleItemToRepresentChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortLevelIndicator_HandleItemToRepresentChanged, bAmmoChanged) == 0x000001, "Member 'FortLevelIndicator_HandleItemToRepresentChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortLevelIndicator_HandleItemToRepresentChanged, bIngredientsChanged) == 0x000002, "Member 'FortLevelIndicator_HandleItemToRepresentChanged::bIngredientsChanged' has a wrong offset!");

// Function FortniteUI.FortLevelIndicator.SetItemForComparison
// 0x0008 (0x0008 - 0x0000)
struct FortLevelIndicator_SetItemForComparison final
{
public:
	class UFortItem*                              Param_ItemForComparison;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLevelIndicator_SetItemForComparison) == 0x000008, "Wrong alignment on FortLevelIndicator_SetItemForComparison");
static_assert(sizeof(FortLevelIndicator_SetItemForComparison) == 0x000008, "Wrong size on FortLevelIndicator_SetItemForComparison");
static_assert(offsetof(FortLevelIndicator_SetItemForComparison, Param_ItemForComparison) == 0x000000, "Member 'FortLevelIndicator_SetItemForComparison::Param_ItemForComparison' has a wrong offset!");

// Function FortniteUI.FortLevelIndicator.SetItemToRepresent
// 0x0008 (0x0008 - 0x0000)
struct FortLevelIndicator_SetItemToRepresent final
{
public:
	class UFortItem*                              Param_ItemToRepresent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLevelIndicator_SetItemToRepresent) == 0x000008, "Wrong alignment on FortLevelIndicator_SetItemToRepresent");
static_assert(sizeof(FortLevelIndicator_SetItemToRepresent) == 0x000008, "Wrong size on FortLevelIndicator_SetItemToRepresent");
static_assert(offsetof(FortLevelIndicator_SetItemToRepresent, Param_ItemToRepresent) == 0x000000, "Member 'FortLevelIndicator_SetItemToRepresent::Param_ItemToRepresent' has a wrong offset!");

// Function FortniteUI.FortLevelIndicator.SetShouldShowMaximumLevel
// 0x0001 (0x0001 - 0x0000)
struct FortLevelIndicator_SetShouldShowMaximumLevel final
{
public:
	bool                                          InShouldShowMaximumLevel;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLevelIndicator_SetShouldShowMaximumLevel) == 0x000001, "Wrong alignment on FortLevelIndicator_SetShouldShowMaximumLevel");
static_assert(sizeof(FortLevelIndicator_SetShouldShowMaximumLevel) == 0x000001, "Wrong size on FortLevelIndicator_SetShouldShowMaximumLevel");
static_assert(offsetof(FortLevelIndicator_SetShouldShowMaximumLevel, InShouldShowMaximumLevel) == 0x000000, "Member 'FortLevelIndicator_SetShouldShowMaximumLevel::InShouldShowMaximumLevel' has a wrong offset!");

// Function FortniteUI.FortTimelineBase.AddReplayEventToTimeline
// 0x0008 (0x0008 - 0x0000)
struct FortTimelineBase_AddReplayEventToTimeline final
{
public:
	EFortReplayEventType                          EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RelativeTime;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimelineBase_AddReplayEventToTimeline) == 0x000004, "Wrong alignment on FortTimelineBase_AddReplayEventToTimeline");
static_assert(sizeof(FortTimelineBase_AddReplayEventToTimeline) == 0x000008, "Wrong size on FortTimelineBase_AddReplayEventToTimeline");
static_assert(offsetof(FortTimelineBase_AddReplayEventToTimeline, EventType) == 0x000000, "Member 'FortTimelineBase_AddReplayEventToTimeline::EventType' has a wrong offset!");
static_assert(offsetof(FortTimelineBase_AddReplayEventToTimeline, RelativeTime) == 0x000004, "Member 'FortTimelineBase_AddReplayEventToTimeline::RelativeTime' has a wrong offset!");

// Function FortniteUI.FortTimelineBase.GetProgressBarOverlay
// 0x0008 (0x0008 - 0x0000)
struct FortTimelineBase_GetProgressBarOverlay final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimelineBase_GetProgressBarOverlay) == 0x000008, "Wrong alignment on FortTimelineBase_GetProgressBarOverlay");
static_assert(sizeof(FortTimelineBase_GetProgressBarOverlay) == 0x000008, "Wrong size on FortTimelineBase_GetProgressBarOverlay");
static_assert(offsetof(FortTimelineBase_GetProgressBarOverlay, ReturnValue) == 0x000000, "Member 'FortTimelineBase_GetProgressBarOverlay::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTimelineBase.GetProgressBarWidget
// 0x0008 (0x0008 - 0x0000)
struct FortTimelineBase_GetProgressBarWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimelineBase_GetProgressBarWidget) == 0x000008, "Wrong alignment on FortTimelineBase_GetProgressBarWidget");
static_assert(sizeof(FortTimelineBase_GetProgressBarWidget) == 0x000008, "Wrong size on FortTimelineBase_GetProgressBarWidget");
static_assert(offsetof(FortTimelineBase_GetProgressBarWidget, ReturnValue) == 0x000000, "Member 'FortTimelineBase_GetProgressBarWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreBase.OnStoreStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortLlamaStoreBase_OnStoreStateChanged final
{
public:
	EFortStoreState                               NewStoreState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreBase_OnStoreStateChanged) == 0x000001, "Wrong alignment on FortLlamaStoreBase_OnStoreStateChanged");
static_assert(sizeof(FortLlamaStoreBase_OnStoreStateChanged) == 0x000001, "Wrong size on FortLlamaStoreBase_OnStoreStateChanged");
static_assert(offsetof(FortLlamaStoreBase_OnStoreStateChanged, NewStoreState) == 0x000000, "Member 'FortLlamaStoreBase_OnStoreStateChanged::NewStoreState' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreBase.ShouldShowXRayTickets
// 0x0010 (0x0010 - 0x0000)
struct FortLlamaStoreBase_ShouldShowXRayTickets final
{
public:
	const class UFortAccountItemDefinition*       XRayCurrencyDefinition;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortLlamaStoreBase_ShouldShowXRayTickets) == 0x000008, "Wrong alignment on FortLlamaStoreBase_ShouldShowXRayTickets");
static_assert(sizeof(FortLlamaStoreBase_ShouldShowXRayTickets) == 0x000010, "Wrong size on FortLlamaStoreBase_ShouldShowXRayTickets");
static_assert(offsetof(FortLlamaStoreBase_ShouldShowXRayTickets, XRayCurrencyDefinition) == 0x000000, "Member 'FortLlamaStoreBase_ShouldShowXRayTickets::XRayCurrencyDefinition' has a wrong offset!");
static_assert(offsetof(FortLlamaStoreBase_ShouldShowXRayTickets, ReturnValue) == 0x000008, "Member 'FortLlamaStoreBase_ShouldShowXRayTickets::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreDetailsBase.OnOfferInfoChanged
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreDetailsBase_OnOfferInfoChanged final
{
public:
	int32                                         CurrentOfferRarity;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreDetailsBase_OnOfferInfoChanged) == 0x000004, "Wrong alignment on FortLlamaStoreDetailsBase_OnOfferInfoChanged");
static_assert(sizeof(FortLlamaStoreDetailsBase_OnOfferInfoChanged) == 0x000004, "Wrong size on FortLlamaStoreDetailsBase_OnOfferInfoChanged");
static_assert(offsetof(FortLlamaStoreDetailsBase_OnOfferInfoChanged, CurrentOfferRarity) == 0x000000, "Member 'FortLlamaStoreDetailsBase_OnOfferInfoChanged::CurrentOfferRarity' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreDetailsBase.GetChoiceItemCount
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreDetailsBase_GetChoiceItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreDetailsBase_GetChoiceItemCount) == 0x000004, "Wrong alignment on FortLlamaStoreDetailsBase_GetChoiceItemCount");
static_assert(sizeof(FortLlamaStoreDetailsBase_GetChoiceItemCount) == 0x000004, "Wrong size on FortLlamaStoreDetailsBase_GetChoiceItemCount");
static_assert(offsetof(FortLlamaStoreDetailsBase_GetChoiceItemCount, ReturnValue) == 0x000000, "Member 'FortLlamaStoreDetailsBase_GetChoiceItemCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreDetailsBase.GetNewItemCount
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreDetailsBase_GetNewItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreDetailsBase_GetNewItemCount) == 0x000004, "Wrong alignment on FortLlamaStoreDetailsBase_GetNewItemCount");
static_assert(sizeof(FortLlamaStoreDetailsBase_GetNewItemCount) == 0x000004, "Wrong size on FortLlamaStoreDetailsBase_GetNewItemCount");
static_assert(offsetof(FortLlamaStoreDetailsBase_GetNewItemCount, ReturnValue) == 0x000000, "Member 'FortLlamaStoreDetailsBase_GetNewItemCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreDetailsBase.GetNotInCollectionBookCount
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreDetailsBase_GetNotInCollectionBookCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreDetailsBase_GetNotInCollectionBookCount) == 0x000004, "Wrong alignment on FortLlamaStoreDetailsBase_GetNotInCollectionBookCount");
static_assert(sizeof(FortLlamaStoreDetailsBase_GetNotInCollectionBookCount) == 0x000004, "Wrong size on FortLlamaStoreDetailsBase_GetNotInCollectionBookCount");
static_assert(offsetof(FortLlamaStoreDetailsBase_GetNotInCollectionBookCount, ReturnValue) == 0x000000, "Member 'FortLlamaStoreDetailsBase_GetNotInCollectionBookCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.CanAutoEquip
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_CanAutoEquip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_CanAutoEquip) == 0x000001, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_CanAutoEquip");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_CanAutoEquip) == 0x000001, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_CanAutoEquip");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_CanAutoEquip, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_CanAutoEquip::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.GetOfferInfoById
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_GetOfferInfoById final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortStoreFrontOfferInfo*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_GetOfferInfoById) == 0x000008, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_GetOfferInfoById");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_GetOfferInfoById) == 0x000018, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_GetOfferInfoById");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_GetOfferInfoById, OfferId) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_GetOfferInfoById::OfferId' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_GetOfferInfoById, ReturnValue) == 0x000010, "Member 'FortStoreFrontOfferDetailsWidgetBase_GetOfferInfoById::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.GetPriceIndexToShow
// 0x0004 (0x0004 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_GetPriceIndexToShow final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_GetPriceIndexToShow) == 0x000004, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_GetPriceIndexToShow");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_GetPriceIndexToShow) == 0x000004, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_GetPriceIndexToShow");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_GetPriceIndexToShow, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_GetPriceIndexToShow::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.HandleCurrentlyViewedAccountInfoChanged
// 0x0034 (0x0034 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged final
{
public:
	struct FFortPublicAccountInfo                 NewInfo;                                           // 0x0000(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged) == 0x000004, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged) == 0x000034, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged, NewInfo) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_HandleCurrentlyViewedAccountInfoChanged::NewInfo' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.OnEnterViewModeActionCommitted
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_OnEnterViewModeActionCommitted final
{
public:
	bool                                          PassThrough;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_OnEnterViewModeActionCommitted) == 0x000001, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_OnEnterViewModeActionCommitted");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_OnEnterViewModeActionCommitted) == 0x000001, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_OnEnterViewModeActionCommitted");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_OnEnterViewModeActionCommitted, PassThrough) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_OnEnterViewModeActionCommitted::PassThrough' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.PurchaseOffer
// 0x0014 (0x0014 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_PurchaseOffer final
{
public:
	TDelegate<void(bool bSuccess, TArray<struct FPurchasedItemInfo>& PurchasedItems, const class FString& OfferId)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_PurchaseOffer) == 0x000004, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_PurchaseOffer");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_PurchaseOffer) == 0x000014, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_PurchaseOffer");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_PurchaseOffer, Callback) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_PurchaseOffer::Callback' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_PurchaseOffer, Quantity) == 0x000010, "Member 'FortStoreFrontOfferDetailsWidgetBase_PurchaseOffer::Quantity' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.RequestExternalPurchase
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_RequestExternalPurchase final
{
public:
	int32                                         PriceIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_RequestExternalPurchase) == 0x000004, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_RequestExternalPurchase");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_RequestExternalPurchase) == 0x000008, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_RequestExternalPurchase");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_RequestExternalPurchase, PriceIndex) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_RequestExternalPurchase::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_RequestExternalPurchase, Quantity) == 0x000004, "Member 'FortStoreFrontOfferDetailsWidgetBase_RequestExternalPurchase::Quantity' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.SetIsInItemViewMode
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_SetIsInItemViewMode final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_SetIsInItemViewMode) == 0x000001, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_SetIsInItemViewMode");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_SetIsInItemViewMode) == 0x000001, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_SetIsInItemViewMode");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SetIsInItemViewMode, Value) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_SetIsInItemViewMode::Value' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.SetPagedItems
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_SetPagedItems final
{
public:
	TArray<class UFortStoreFrontOfferInfo*>       InPagedItems;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_SetPagedItems) == 0x000008, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_SetPagedItems");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_SetPagedItems) == 0x000010, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_SetPagedItems");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SetPagedItems, InPagedItems) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_SetPagedItems::InPagedItems' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.SetShouldAllowItemViewModeAction
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction) == 0x000001, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction) == 0x000001, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction, Value) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_SetShouldAllowItemViewModeAction::Value' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.SetupOffer
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_SetupOffer final
{
public:
	class UFortStoreFrontOfferInfo*               InOfferData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_SetupOffer) == 0x000008, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_SetupOffer");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_SetupOffer) == 0x000008, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_SetupOffer");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SetupOffer, InOfferData) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_SetupOffer::InOfferData' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.GetOfferInfo
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_GetOfferInfo final
{
public:
	class UFortStoreFrontOfferInfo*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_GetOfferInfo) == 0x000008, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_GetOfferInfo");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_GetOfferInfo) == 0x000008, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_GetOfferInfo");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_GetOfferInfo, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_GetOfferInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.SendRealMoneyStoreInteractionAnalytic
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_SendRealMoneyStoreInteractionAnalytic final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_SendRealMoneyStoreInteractionAnalytic) == 0x000008, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_SendRealMoneyStoreInteractionAnalytic");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_SendRealMoneyStoreInteractionAnalytic) == 0x000010, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_SendRealMoneyStoreInteractionAnalytic");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SendRealMoneyStoreInteractionAnalytic, Interaction) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_SendRealMoneyStoreInteractionAnalytic::Interaction' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.SendSeasonPassInteractionAnalytic
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_SendSeasonPassInteractionAnalytic final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_SendSeasonPassInteractionAnalytic) == 0x000008, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_SendSeasonPassInteractionAnalytic");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_SendSeasonPassInteractionAnalytic) == 0x000010, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_SendSeasonPassInteractionAnalytic");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SendSeasonPassInteractionAnalytic, Interaction) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_SendSeasonPassInteractionAnalytic::Interaction' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.SendShopInteractionAnalytic
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_SendShopInteractionAnalytic final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_SendShopInteractionAnalytic) == 0x000008, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_SendShopInteractionAnalytic");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_SendShopInteractionAnalytic) == 0x000010, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_SendShopInteractionAnalytic");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SendShopInteractionAnalytic, Interaction) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_SendShopInteractionAnalytic::Interaction' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.SendShopPageViewsInteractionAnalytic
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_SendShopPageViewsInteractionAnalytic final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortStoreFrontOfferInfo*         OfferInfo;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_SendShopPageViewsInteractionAnalytic) == 0x000008, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_SendShopPageViewsInteractionAnalytic");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_SendShopPageViewsInteractionAnalytic) == 0x000018, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_SendShopPageViewsInteractionAnalytic");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SendShopPageViewsInteractionAnalytic, Interaction) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_SendShopPageViewsInteractionAnalytic::Interaction' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SendShopPageViewsInteractionAnalytic, OfferInfo) == 0x000010, "Member 'FortStoreFrontOfferDetailsWidgetBase_SendShopPageViewsInteractionAnalytic::OfferInfo' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.SendUndoMtxReturnedAnalytic
// 0x0028 (0x0028 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_SendUndoMtxReturnedAnalytic final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PurchaseId;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MtxReturned;                                       // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_SendUndoMtxReturnedAnalytic) == 0x000008, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_SendUndoMtxReturnedAnalytic");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_SendUndoMtxReturnedAnalytic) == 0x000028, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_SendUndoMtxReturnedAnalytic");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SendUndoMtxReturnedAnalytic, Interaction) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_SendUndoMtxReturnedAnalytic::Interaction' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SendUndoMtxReturnedAnalytic, PurchaseId) == 0x000010, "Member 'FortStoreFrontOfferDetailsWidgetBase_SendUndoMtxReturnedAnalytic::PurchaseId' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_SendUndoMtxReturnedAnalytic, MtxReturned) == 0x000020, "Member 'FortStoreFrontOfferDetailsWidgetBase_SendUndoMtxReturnedAnalytic::MtxReturned' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferDetailsWidgetBase.ShouldHavePurchaseConfirmation
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation) == 0x000001, "Wrong alignment on FortStoreFrontOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation");
static_assert(sizeof(FortStoreFrontOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation) == 0x000001, "Wrong size on FortStoreFrontOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation");
static_assert(offsetof(FortStoreFrontOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferDetailsWidgetBase_ShouldHavePurchaseConfirmation::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreInspectionScreen.GetInspectChoiceInputState
// 0x0001 (0x0001 - 0x0000)
struct FortLlamaStoreInspectionScreen_GetInspectChoiceInputState final
{
public:
	EInputActionState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreInspectionScreen_GetInspectChoiceInputState) == 0x000001, "Wrong alignment on FortLlamaStoreInspectionScreen_GetInspectChoiceInputState");
static_assert(sizeof(FortLlamaStoreInspectionScreen_GetInspectChoiceInputState) == 0x000001, "Wrong size on FortLlamaStoreInspectionScreen_GetInspectChoiceInputState");
static_assert(offsetof(FortLlamaStoreInspectionScreen_GetInspectChoiceInputState, ReturnValue) == 0x000000, "Member 'FortLlamaStoreInspectionScreen_GetInspectChoiceInputState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreInspectionScreen.GetSelectedCardPack
// 0x0008 (0x0008 - 0x0000)
struct FortLlamaStoreInspectionScreen_GetSelectedCardPack final
{
public:
	class UFortCardPackItem*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreInspectionScreen_GetSelectedCardPack) == 0x000008, "Wrong alignment on FortLlamaStoreInspectionScreen_GetSelectedCardPack");
static_assert(sizeof(FortLlamaStoreInspectionScreen_GetSelectedCardPack) == 0x000008, "Wrong size on FortLlamaStoreInspectionScreen_GetSelectedCardPack");
static_assert(offsetof(FortLlamaStoreInspectionScreen_GetSelectedCardPack, ReturnValue) == 0x000000, "Member 'FortLlamaStoreInspectionScreen_GetSelectedCardPack::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreInspectionScreen.IsItemChoicePack
// 0x0010 (0x0010 - 0x0000)
struct FortLlamaStoreInspectionScreen_IsItemChoicePack final
{
public:
	class UObject*                                ItemToCheck;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortLlamaStoreInspectionScreen_IsItemChoicePack) == 0x000008, "Wrong alignment on FortLlamaStoreInspectionScreen_IsItemChoicePack");
static_assert(sizeof(FortLlamaStoreInspectionScreen_IsItemChoicePack) == 0x000010, "Wrong size on FortLlamaStoreInspectionScreen_IsItemChoicePack");
static_assert(offsetof(FortLlamaStoreInspectionScreen_IsItemChoicePack, ItemToCheck) == 0x000000, "Member 'FortLlamaStoreInspectionScreen_IsItemChoicePack::ItemToCheck' has a wrong offset!");
static_assert(offsetof(FortLlamaStoreInspectionScreen_IsItemChoicePack, ReturnValue) == 0x000008, "Member 'FortLlamaStoreInspectionScreen_IsItemChoicePack::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.CreatePreviewItem
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_CreatePreviewItem final
{
public:
	class UFortAccountItem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_CreatePreviewItem) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_CreatePreviewItem");
static_assert(sizeof(FortStoreFrontOfferInfo_CreatePreviewItem) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_CreatePreviewItem");
static_assert(offsetof(FortStoreFrontOfferInfo_CreatePreviewItem, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_CreatePreviewItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetBackground
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetBackground final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetBackground) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetBackground");
static_assert(sizeof(FortStoreFrontOfferInfo_GetBackground) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetBackground");
static_assert(offsetof(FortStoreFrontOfferInfo_GetBackground, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetBackground::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetBannerOverrideTag
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetBannerOverrideTag final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetBannerOverrideTag) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetBannerOverrideTag");
static_assert(sizeof(FortStoreFrontOfferInfo_GetBannerOverrideTag) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetBannerOverrideTag");
static_assert(offsetof(FortStoreFrontOfferInfo_GetBannerOverrideTag, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetBannerOverrideTag::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetBaseQuantity
// 0x0004 (0x0004 - 0x0000)
struct FortStoreFrontOfferInfo_GetBaseQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetBaseQuantity) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetBaseQuantity");
static_assert(sizeof(FortStoreFrontOfferInfo_GetBaseQuantity) == 0x000004, "Wrong size on FortStoreFrontOfferInfo_GetBaseQuantity");
static_assert(offsetof(FortStoreFrontOfferInfo_GetBaseQuantity, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetBaseQuantity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetBonusQuantity
// 0x0004 (0x0004 - 0x0000)
struct FortStoreFrontOfferInfo_GetBonusQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetBonusQuantity) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetBonusQuantity");
static_assert(sizeof(FortStoreFrontOfferInfo_GetBonusQuantity) == 0x000004, "Wrong size on FortStoreFrontOfferInfo_GetBonusQuantity");
static_assert(offsetof(FortStoreFrontOfferInfo_GetBonusQuantity, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetBonusQuantity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetCategoryText
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_GetCategoryText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetCategoryText) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetCategoryText");
static_assert(sizeof(FortStoreFrontOfferInfo_GetCategoryText) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_GetCategoryText");
static_assert(offsetof(FortStoreFrontOfferInfo_GetCategoryText, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetCategoryText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetCurrencyItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_GetCurrencyItemDefinition final
{
public:
	class UFortAccountItemDefinition*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetCurrencyItemDefinition) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetCurrencyItemDefinition");
static_assert(sizeof(FortStoreFrontOfferInfo_GetCurrencyItemDefinition) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_GetCurrencyItemDefinition");
static_assert(offsetof(FortStoreFrontOfferInfo_GetCurrencyItemDefinition, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetCurrencyItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetDescription) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetDescription");
static_assert(sizeof(FortStoreFrontOfferInfo_GetDescription) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_GetDescription");
static_assert(offsetof(FortStoreFrontOfferInfo_GetDescription, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetDetailsAttributes
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetDetailsAttributes final
{
public:
	TArray<struct FFortMtxDetailsAttribute>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetDetailsAttributes) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetDetailsAttributes");
static_assert(sizeof(FortStoreFrontOfferInfo_GetDetailsAttributes) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetDetailsAttributes");
static_assert(offsetof(FortStoreFrontOfferInfo_GetDetailsAttributes, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetDetailsAttributes::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetDetailsImage
// 0x0088 (0x0088 - 0x0000)
struct FortStoreFrontOfferInfo_GetDetailsImage final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetDetailsImage) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetDetailsImage");
static_assert(sizeof(FortStoreFrontOfferInfo_GetDetailsImage) == 0x000088, "Wrong size on FortStoreFrontOfferInfo_GetDetailsImage");
static_assert(offsetof(FortStoreFrontOfferInfo_GetDetailsImage, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetDetailsImage::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetDisplayAssetPath
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetDisplayAssetPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetDisplayAssetPath) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetDisplayAssetPath");
static_assert(sizeof(FortStoreFrontOfferInfo_GetDisplayAssetPath) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetDisplayAssetPath");
static_assert(offsetof(FortStoreFrontOfferInfo_GetDisplayAssetPath, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetDisplayAssetPath::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetDynamicBundleItems
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetDynamicBundleItems final
{
public:
	TArray<struct FBundledItemInfo>               Items;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetDynamicBundleItems) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetDynamicBundleItems");
static_assert(sizeof(FortStoreFrontOfferInfo_GetDynamicBundleItems) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetDynamicBundleItems");
static_assert(offsetof(FortStoreFrontOfferInfo_GetDynamicBundleItems, Items) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetDynamicBundleItems::Items' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetFirstGrantItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_GetFirstGrantItemDefinition final
{
public:
	class UFortAccountItemDefinition*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetFirstGrantItemDefinition) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetFirstGrantItemDefinition");
static_assert(sizeof(FortStoreFrontOfferInfo_GetFirstGrantItemDefinition) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_GetFirstGrantItemDefinition");
static_assert(offsetof(FortStoreFrontOfferInfo_GetFirstGrantItemDefinition, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetFirstGrantItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetFirstGrantQuantity
// 0x0004 (0x0004 - 0x0000)
struct FortStoreFrontOfferInfo_GetFirstGrantQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetFirstGrantQuantity) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetFirstGrantQuantity");
static_assert(sizeof(FortStoreFrontOfferInfo_GetFirstGrantQuantity) == 0x000004, "Wrong size on FortStoreFrontOfferInfo_GetFirstGrantQuantity");
static_assert(offsetof(FortStoreFrontOfferInfo_GetFirstGrantQuantity, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetFirstGrantQuantity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetForcedGiftBoxTemplateId
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetForcedGiftBoxTemplateId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetForcedGiftBoxTemplateId) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetForcedGiftBoxTemplateId");
static_assert(sizeof(FortStoreFrontOfferInfo_GetForcedGiftBoxTemplateId) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetForcedGiftBoxTemplateId");
static_assert(offsetof(FortStoreFrontOfferInfo_GetForcedGiftBoxTemplateId, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetForcedGiftBoxTemplateId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetFortStoreOfferCategory
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetFortStoreOfferCategory final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetFortStoreOfferCategory) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetFortStoreOfferCategory");
static_assert(sizeof(FortStoreFrontOfferInfo_GetFortStoreOfferCategory) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetFortStoreOfferCategory");
static_assert(offsetof(FortStoreFrontOfferInfo_GetFortStoreOfferCategory, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetFortStoreOfferCategory::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetFortStoreOfferType
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_GetFortStoreOfferType final
{
public:
	EFortMtxStoreOfferType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetFortStoreOfferType) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_GetFortStoreOfferType");
static_assert(sizeof(FortStoreFrontOfferInfo_GetFortStoreOfferType) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_GetFortStoreOfferType");
static_assert(offsetof(FortStoreFrontOfferInfo_GetFortStoreOfferType, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetFortStoreOfferType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetGradient
// 0x0020 (0x0020 - 0x0000)
struct FortStoreFrontOfferInfo_GetGradient final
{
public:
	struct FFortMtxGradient                       ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetGradient) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetGradient");
static_assert(sizeof(FortStoreFrontOfferInfo_GetGradient) == 0x000020, "Wrong size on FortStoreFrontOfferInfo_GetGradient");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGradient, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetGradient::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetGrantedItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetGrantedItemDefinition final
{
public:
	int32                                         GrantedItemIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAccountItemDefinition*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetGrantedItemDefinition) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetGrantedItemDefinition");
static_assert(sizeof(FortStoreFrontOfferInfo_GetGrantedItemDefinition) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetGrantedItemDefinition");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGrantedItemDefinition, GrantedItemIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetGrantedItemDefinition::GrantedItemIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGrantedItemDefinition, ReturnValue) == 0x000008, "Member 'FortStoreFrontOfferInfo_GetGrantedItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetGrantedItemDefinitions
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetGrantedItemDefinitions final
{
public:
	TArray<class UFortAccountItemDefinition*>     GrantedItems;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetGrantedItemDefinitions) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetGrantedItemDefinitions");
static_assert(sizeof(FortStoreFrontOfferInfo_GetGrantedItemDefinitions) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetGrantedItemDefinitions");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGrantedItemDefinitions, GrantedItems) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetGrantedItemDefinitions::GrantedItems' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetGrantedItemQuantity
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_GetGrantedItemQuantity final
{
public:
	int32                                         GrantedItemIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetGrantedItemQuantity) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetGrantedItemQuantity");
static_assert(sizeof(FortStoreFrontOfferInfo_GetGrantedItemQuantity) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_GetGrantedItemQuantity");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGrantedItemQuantity, GrantedItemIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetGrantedItemQuantity::GrantedItemIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGrantedItemQuantity, ReturnValue) == 0x000004, "Member 'FortStoreFrontOfferInfo_GetGrantedItemQuantity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetGrantedItemQuantityPair
// 0x0050 (0x0050 - 0x0000)
struct FortStoreFrontOfferInfo_GetGrantedItemQuantityPair final
{
public:
	int32                                         GrantedItemIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortItemQuantityPair                  ItemQuantity;                                      // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_GetGrantedItemQuantityPair) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetGrantedItemQuantityPair");
static_assert(sizeof(FortStoreFrontOfferInfo_GetGrantedItemQuantityPair) == 0x000050, "Wrong size on FortStoreFrontOfferInfo_GetGrantedItemQuantityPair");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGrantedItemQuantityPair, GrantedItemIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetGrantedItemQuantityPair::GrantedItemIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGrantedItemQuantityPair, ItemQuantity) == 0x000008, "Member 'FortStoreFrontOfferInfo_GetGrantedItemQuantityPair::ItemQuantity' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGrantedItemQuantityPair, ReturnValue) == 0x000048, "Member 'FortStoreFrontOfferInfo_GetGrantedItemQuantityPair::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetGrantedItemQuantityPairs
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_GetGrantedItemQuantityPairs final
{
public:
	bool                                          bPrioritizeUnowned;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemQuantityPair>          ItemQuantityPairs;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetGrantedItemQuantityPairs) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetGrantedItemQuantityPairs");
static_assert(sizeof(FortStoreFrontOfferInfo_GetGrantedItemQuantityPairs) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_GetGrantedItemQuantityPairs");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGrantedItemQuantityPairs, bPrioritizeUnowned) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetGrantedItemQuantityPairs::bPrioritizeUnowned' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGrantedItemQuantityPairs, ItemQuantityPairs) == 0x000008, "Member 'FortStoreFrontOfferInfo_GetGrantedItemQuantityPairs::ItemQuantityPairs' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetGrantedItems
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetGrantedItems final
{
public:
	TArray<class UFortItem*>                      Items;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetGrantedItems) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetGrantedItems");
static_assert(sizeof(FortStoreFrontOfferInfo_GetGrantedItems) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetGrantedItems");
static_assert(offsetof(FortStoreFrontOfferInfo_GetGrantedItems, Items) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetGrantedItems::Items' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetItemOfferCount
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_GetItemOfferCount final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_GetItemOfferCount) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetItemOfferCount");
static_assert(sizeof(FortStoreFrontOfferInfo_GetItemOfferCount) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_GetItemOfferCount");
static_assert(offsetof(FortStoreFrontOfferInfo_GetItemOfferCount, TemplateId) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetItemOfferCount::TemplateId' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetItemOfferCount, ReturnValue) == 0x000010, "Member 'FortStoreFrontOfferInfo_GetItemOfferCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetItemQuantity
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_GetItemQuantity final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_GetItemQuantity) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetItemQuantity");
static_assert(sizeof(FortStoreFrontOfferInfo_GetItemQuantity) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_GetItemQuantity");
static_assert(offsetof(FortStoreFrontOfferInfo_GetItemQuantity, TemplateId) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetItemQuantity::TemplateId' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetItemQuantity, ReturnValue) == 0x000010, "Member 'FortStoreFrontOfferInfo_GetItemQuantity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetItemTypeText
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_GetItemTypeText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetItemTypeText) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetItemTypeText");
static_assert(sizeof(FortStoreFrontOfferInfo_GetItemTypeText) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_GetItemTypeText");
static_assert(offsetof(FortStoreFrontOfferInfo_GetItemTypeText, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetItemTypeText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetMaxConcurrentPurchases
// 0x0004 (0x0004 - 0x0000)
struct FortStoreFrontOfferInfo_GetMaxConcurrentPurchases final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetMaxConcurrentPurchases) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetMaxConcurrentPurchases");
static_assert(sizeof(FortStoreFrontOfferInfo_GetMaxConcurrentPurchases) == 0x000004, "Wrong size on FortStoreFrontOfferInfo_GetMaxConcurrentPurchases");
static_assert(offsetof(FortStoreFrontOfferInfo_GetMaxConcurrentPurchases, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetMaxConcurrentPurchases::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetMetaAsBool
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_GetMetaAsBool final
{
public:
	class FString                                 MetaTag;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_GetMetaAsBool) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetMetaAsBool");
static_assert(sizeof(FortStoreFrontOfferInfo_GetMetaAsBool) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_GetMetaAsBool");
static_assert(offsetof(FortStoreFrontOfferInfo_GetMetaAsBool, MetaTag) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetMetaAsBool::MetaTag' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetMetaAsBool, ReturnValue) == 0x000010, "Member 'FortStoreFrontOfferInfo_GetMetaAsBool::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetName
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_GetName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetName) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetName");
static_assert(sizeof(FortStoreFrontOfferInfo_GetName) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_GetName");
static_assert(offsetof(FortStoreFrontOfferInfo_GetName, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetNormalPrice
// 0x0020 (0x0020 - 0x0000)
struct FortStoreFrontOfferInfo_GetNormalPrice final
{
public:
	int32                                         PriceIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemQuantity;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetNormalPrice) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetNormalPrice");
static_assert(sizeof(FortStoreFrontOfferInfo_GetNormalPrice) == 0x000020, "Wrong size on FortStoreFrontOfferInfo_GetNormalPrice");
static_assert(offsetof(FortStoreFrontOfferInfo_GetNormalPrice, PriceIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetNormalPrice::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetNormalPrice, ItemQuantity) == 0x000004, "Member 'FortStoreFrontOfferInfo_GetNormalPrice::ItemQuantity' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetNormalPrice, ReturnValue) == 0x000008, "Member 'FortStoreFrontOfferInfo_GetNormalPrice::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetNumGrantedItems
// 0x0004 (0x0004 - 0x0000)
struct FortStoreFrontOfferInfo_GetNumGrantedItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetNumGrantedItems) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetNumGrantedItems");
static_assert(sizeof(FortStoreFrontOfferInfo_GetNumGrantedItems) == 0x000004, "Wrong size on FortStoreFrontOfferInfo_GetNumGrantedItems");
static_assert(offsetof(FortStoreFrontOfferInfo_GetNumGrantedItems, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetNumGrantedItems::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetNumRequirements
// 0x0004 (0x0004 - 0x0000)
struct FortStoreFrontOfferInfo_GetNumRequirements final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetNumRequirements) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetNumRequirements");
static_assert(sizeof(FortStoreFrontOfferInfo_GetNumRequirements) == 0x000004, "Wrong size on FortStoreFrontOfferInfo_GetNumRequirements");
static_assert(offsetof(FortStoreFrontOfferInfo_GetNumRequirements, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetNumRequirements::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetOffer
// 0x0238 (0x0238 - 0x0000)
struct FortStoreFrontOfferInfo_GetOffer final
{
public:
	struct FCatalogOffer                          ReturnValue;                                       // 0x0000(0x0238)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetOffer) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetOffer");
static_assert(sizeof(FortStoreFrontOfferInfo_GetOffer) == 0x000238, "Wrong size on FortStoreFrontOfferInfo_GetOffer");
static_assert(offsetof(FortStoreFrontOfferInfo_GetOffer, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetOffer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetOfferDisplayAsset
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_GetOfferDisplayAsset final
{
public:
	class UFortMtxOfferData*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetOfferDisplayAsset) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetOfferDisplayAsset");
static_assert(sizeof(FortStoreFrontOfferInfo_GetOfferDisplayAsset) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_GetOfferDisplayAsset");
static_assert(offsetof(FortStoreFrontOfferInfo_GetOfferDisplayAsset, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetOfferDisplayAsset::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetOfferId
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetOfferId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetOfferId) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetOfferId");
static_assert(sizeof(FortStoreFrontOfferInfo_GetOfferId) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetOfferId");
static_assert(offsetof(FortStoreFrontOfferInfo_GetOfferId, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetOfferId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetOfferType
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_GetOfferType final
{
public:
	ECatalogOfferType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetOfferType) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_GetOfferType");
static_assert(sizeof(FortStoreFrontOfferInfo_GetOfferType) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_GetOfferType");
static_assert(offsetof(FortStoreFrontOfferInfo_GetOfferType, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetOfferType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetPrerollOfferItem
// 0x0048 (0x0048 - 0x0000)
struct FortStoreFrontOfferInfo_GetPrerollOfferItem final
{
public:
	struct FFortItemQuantityPair                  ItemQuantityPair;                                  // 0x0000(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_GetPrerollOfferItem) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetPrerollOfferItem");
static_assert(sizeof(FortStoreFrontOfferInfo_GetPrerollOfferItem) == 0x000048, "Wrong size on FortStoreFrontOfferInfo_GetPrerollOfferItem");
static_assert(offsetof(FortStoreFrontOfferInfo_GetPrerollOfferItem, ItemQuantityPair) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetPrerollOfferItem::ItemQuantityPair' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetPrerollOfferItem, ReturnValue) == 0x000040, "Member 'FortStoreFrontOfferInfo_GetPrerollOfferItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetPrerollRarity
// 0x0004 (0x0004 - 0x0000)
struct FortStoreFrontOfferInfo_GetPrerollRarity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetPrerollRarity) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetPrerollRarity");
static_assert(sizeof(FortStoreFrontOfferInfo_GetPrerollRarity) == 0x000004, "Wrong size on FortStoreFrontOfferInfo_GetPrerollRarity");
static_assert(offsetof(FortStoreFrontOfferInfo_GetPrerollRarity, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetPrerollRarity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetPriceItem
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_GetPriceItem final
{
public:
	int32                                         PriceIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredItemCount;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAccountItemDefinition*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetPriceItem) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetPriceItem");
static_assert(sizeof(FortStoreFrontOfferInfo_GetPriceItem) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_GetPriceItem");
static_assert(offsetof(FortStoreFrontOfferInfo_GetPriceItem, PriceIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetPriceItem::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetPriceItem, RequiredItemCount) == 0x000004, "Member 'FortStoreFrontOfferInfo_GetPriceItem::RequiredItemCount' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetPriceItem, ReturnValue) == 0x000008, "Member 'FortStoreFrontOfferInfo_GetPriceItem::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetQuantityRemaining
// 0x0004 (0x0004 - 0x0000)
struct FortStoreFrontOfferInfo_GetQuantityRemaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetQuantityRemaining) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetQuantityRemaining");
static_assert(sizeof(FortStoreFrontOfferInfo_GetQuantityRemaining) == 0x000004, "Wrong size on FortStoreFrontOfferInfo_GetQuantityRemaining");
static_assert(offsetof(FortStoreFrontOfferInfo_GetQuantityRemaining, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetQuantityRemaining::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetRequirementIdAtIndex
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_GetRequirementIdAtIndex final
{
public:
	int32                                         RequirementIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetRequirementIdAtIndex) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetRequirementIdAtIndex");
static_assert(sizeof(FortStoreFrontOfferInfo_GetRequirementIdAtIndex) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_GetRequirementIdAtIndex");
static_assert(offsetof(FortStoreFrontOfferInfo_GetRequirementIdAtIndex, RequirementIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetRequirementIdAtIndex::RequirementIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetRequirementIdAtIndex, ReturnValue) == 0x000008, "Member 'FortStoreFrontOfferInfo_GetRequirementIdAtIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetRequirementMinQuantityAtIndex
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_GetRequirementMinQuantityAtIndex final
{
public:
	int32                                         RequirementIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetRequirementMinQuantityAtIndex) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetRequirementMinQuantityAtIndex");
static_assert(sizeof(FortStoreFrontOfferInfo_GetRequirementMinQuantityAtIndex) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_GetRequirementMinQuantityAtIndex");
static_assert(offsetof(FortStoreFrontOfferInfo_GetRequirementMinQuantityAtIndex, RequirementIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetRequirementMinQuantityAtIndex::RequirementIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetRequirementMinQuantityAtIndex, ReturnValue) == 0x000004, "Member 'FortStoreFrontOfferInfo_GetRequirementMinQuantityAtIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetRequirementTypeAtIndex
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_GetRequirementTypeAtIndex final
{
public:
	int32                                         RequirementIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECatalogRequirementType                       ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_GetRequirementTypeAtIndex) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetRequirementTypeAtIndex");
static_assert(sizeof(FortStoreFrontOfferInfo_GetRequirementTypeAtIndex) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_GetRequirementTypeAtIndex");
static_assert(offsetof(FortStoreFrontOfferInfo_GetRequirementTypeAtIndex, RequirementIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetRequirementTypeAtIndex::RequirementIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetRequirementTypeAtIndex, ReturnValue) == 0x000004, "Member 'FortStoreFrontOfferInfo_GetRequirementTypeAtIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetSalePrice
// 0x0028 (0x0028 - 0x0000)
struct FortStoreFrontOfferInfo_GetSalePrice final
{
public:
	int32                                         PriceIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SalePrice;                                         // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         ItemQuantity;                                      // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_GetSalePrice) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetSalePrice");
static_assert(sizeof(FortStoreFrontOfferInfo_GetSalePrice) == 0x000028, "Wrong size on FortStoreFrontOfferInfo_GetSalePrice");
static_assert(offsetof(FortStoreFrontOfferInfo_GetSalePrice, PriceIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetSalePrice::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetSalePrice, SalePrice) == 0x000008, "Member 'FortStoreFrontOfferInfo_GetSalePrice::SalePrice' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetSalePrice, ItemQuantity) == 0x000020, "Member 'FortStoreFrontOfferInfo_GetSalePrice::ItemQuantity' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetSalePrice, ReturnValue) == 0x000024, "Member 'FortStoreFrontOfferInfo_GetSalePrice::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetSaleText
// 0x0020 (0x0020 - 0x0000)
struct FortStoreFrontOfferInfo_GetSaleText final
{
public:
	int32                                         PriceIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemQuantity;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetSaleText) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetSaleText");
static_assert(sizeof(FortStoreFrontOfferInfo_GetSaleText) == 0x000020, "Wrong size on FortStoreFrontOfferInfo_GetSaleText");
static_assert(offsetof(FortStoreFrontOfferInfo_GetSaleText, PriceIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetSaleText::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetSaleText, ItemQuantity) == 0x000004, "Member 'FortStoreFrontOfferInfo_GetSaleText::ItemQuantity' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetSaleText, ReturnValue) == 0x000008, "Member 'FortStoreFrontOfferInfo_GetSaleText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetSaleType
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_GetSaleType final
{
public:
	int32                                         PriceIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECatalogSaleType                              ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_GetSaleType) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetSaleType");
static_assert(sizeof(FortStoreFrontOfferInfo_GetSaleType) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_GetSaleType");
static_assert(offsetof(FortStoreFrontOfferInfo_GetSaleType, PriceIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetSaleType::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_GetSaleType, ReturnValue) == 0x000004, "Member 'FortStoreFrontOfferInfo_GetSaleType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetShortDescription
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_GetShortDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetShortDescription) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetShortDescription");
static_assert(sizeof(FortStoreFrontOfferInfo_GetShortDescription) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_GetShortDescription");
static_assert(offsetof(FortStoreFrontOfferInfo_GetShortDescription, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetShortDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetShortName
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_GetShortName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetShortName) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetShortName");
static_assert(sizeof(FortStoreFrontOfferInfo_GetShortName) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_GetShortName");
static_assert(offsetof(FortStoreFrontOfferInfo_GetShortName, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetShortName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetSortPriority
// 0x0004 (0x0004 - 0x0000)
struct FortStoreFrontOfferInfo_GetSortPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetSortPriority) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetSortPriority");
static_assert(sizeof(FortStoreFrontOfferInfo_GetSortPriority) == 0x000004, "Wrong size on FortStoreFrontOfferInfo_GetSortPriority");
static_assert(offsetof(FortStoreFrontOfferInfo_GetSortPriority, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetSortPriority::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetStorefrontName
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_GetStorefrontName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetStorefrontName) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetStorefrontName");
static_assert(sizeof(FortStoreFrontOfferInfo_GetStorefrontName) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_GetStorefrontName");
static_assert(offsetof(FortStoreFrontOfferInfo_GetStorefrontName, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetStorefrontName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetTileImage
// 0x0088 (0x0088 - 0x0000)
struct FortStoreFrontOfferInfo_GetTileImage final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetTileImage) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_GetTileImage");
static_assert(sizeof(FortStoreFrontOfferInfo_GetTileImage) == 0x000088, "Wrong size on FortStoreFrontOfferInfo_GetTileImage");
static_assert(offsetof(FortStoreFrontOfferInfo_GetTileImage, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetTileImage::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.GetTotalQuantity
// 0x0004 (0x0004 - 0x0000)
struct FortStoreFrontOfferInfo_GetTotalQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_GetTotalQuantity) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_GetTotalQuantity");
static_assert(sizeof(FortStoreFrontOfferInfo_GetTotalQuantity) == 0x000004, "Wrong size on FortStoreFrontOfferInfo_GetTotalQuantity");
static_assert(offsetof(FortStoreFrontOfferInfo_GetTotalQuantity, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_GetTotalQuantity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.HasCatalogOfferName
// 0x0020 (0x0020 - 0x0000)
struct FortStoreFrontOfferInfo_HasCatalogOfferName final
{
public:
	class FText                                   CatalogOfferName;                                  // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_HasCatalogOfferName) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_HasCatalogOfferName");
static_assert(sizeof(FortStoreFrontOfferInfo_HasCatalogOfferName) == 0x000020, "Wrong size on FortStoreFrontOfferInfo_HasCatalogOfferName");
static_assert(offsetof(FortStoreFrontOfferInfo_HasCatalogOfferName, CatalogOfferName) == 0x000000, "Member 'FortStoreFrontOfferInfo_HasCatalogOfferName::CatalogOfferName' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_HasCatalogOfferName, ReturnValue) == 0x000018, "Member 'FortStoreFrontOfferInfo_HasCatalogOfferName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.HasDisplayAsset
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_HasDisplayAsset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_HasDisplayAsset) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_HasDisplayAsset");
static_assert(sizeof(FortStoreFrontOfferInfo_HasDisplayAsset) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_HasDisplayAsset");
static_assert(offsetof(FortStoreFrontOfferInfo_HasDisplayAsset, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_HasDisplayAsset::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.HasMaxLevel
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_HasMaxLevel final
{
public:
	int32                                         MaxLevel;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_HasMaxLevel) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_HasMaxLevel");
static_assert(sizeof(FortStoreFrontOfferInfo_HasMaxLevel) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_HasMaxLevel");
static_assert(offsetof(FortStoreFrontOfferInfo_HasMaxLevel, MaxLevel) == 0x000000, "Member 'FortStoreFrontOfferInfo_HasMaxLevel::MaxLevel' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_HasMaxLevel, ReturnValue) == 0x000004, "Member 'FortStoreFrontOfferInfo_HasMaxLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.HasRequirement
// 0x0020 (0x0020 - 0x0000)
struct FortStoreFrontOfferInfo_HasRequirement final
{
public:
	class FText                                   RequirementText;                                   // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_HasRequirement) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_HasRequirement");
static_assert(sizeof(FortStoreFrontOfferInfo_HasRequirement) == 0x000020, "Wrong size on FortStoreFrontOfferInfo_HasRequirement");
static_assert(offsetof(FortStoreFrontOfferInfo_HasRequirement, RequirementText) == 0x000000, "Member 'FortStoreFrontOfferInfo_HasRequirement::RequirementText' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_HasRequirement, ReturnValue) == 0x000018, "Member 'FortStoreFrontOfferInfo_HasRequirement::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsCardpack
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_IsCardpack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_IsCardpack) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_IsCardpack");
static_assert(sizeof(FortStoreFrontOfferInfo_IsCardpack) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_IsCardpack");
static_assert(offsetof(FortStoreFrontOfferInfo_IsCardpack, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsCardpack::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsCurrencyVoucher
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_IsCurrencyVoucher final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_IsCurrencyVoucher) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_IsCurrencyVoucher");
static_assert(sizeof(FortStoreFrontOfferInfo_IsCurrencyVoucher) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_IsCurrencyVoucher");
static_assert(offsetof(FortStoreFrontOfferInfo_IsCurrencyVoucher, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsCurrencyVoucher::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsExclusive
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_IsExclusive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_IsExclusive) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_IsExclusive");
static_assert(sizeof(FortStoreFrontOfferInfo_IsExclusive) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_IsExclusive");
static_assert(offsetof(FortStoreFrontOfferInfo_IsExclusive, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsExclusive::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsGiftable
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_IsGiftable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_IsGiftable) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_IsGiftable");
static_assert(sizeof(FortStoreFrontOfferInfo_IsGiftable) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_IsGiftable");
static_assert(offsetof(FortStoreFrontOfferInfo_IsGiftable, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsGiftable::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsGiftOnly
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_IsGiftOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_IsGiftOnly) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_IsGiftOnly");
static_assert(sizeof(FortStoreFrontOfferInfo_IsGiftOnly) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_IsGiftOnly");
static_assert(offsetof(FortStoreFrontOfferInfo_IsGiftOnly, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsGiftOnly::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsItemDefOwned
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_IsItemDefOwned final
{
public:
	const class UFortItemDefinition*              ItemDef;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_IsItemDefOwned) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_IsItemDefOwned");
static_assert(sizeof(FortStoreFrontOfferInfo_IsItemDefOwned) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_IsItemDefOwned");
static_assert(offsetof(FortStoreFrontOfferInfo_IsItemDefOwned, ItemDef) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsItemDefOwned::ItemDef' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_IsItemDefOwned, ReturnValue) == 0x000008, "Member 'FortStoreFrontOfferInfo_IsItemDefOwned::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.isItemGrantUnique
// 0x0018 (0x0018 - 0x0000)
struct FortStoreFrontOfferInfo_IsItemGrantUnique final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_IsItemGrantUnique) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_IsItemGrantUnique");
static_assert(sizeof(FortStoreFrontOfferInfo_IsItemGrantUnique) == 0x000018, "Wrong size on FortStoreFrontOfferInfo_IsItemGrantUnique");
static_assert(offsetof(FortStoreFrontOfferInfo_IsItemGrantUnique, TemplateId) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsItemGrantUnique::TemplateId' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_IsItemGrantUnique, ReturnValue) == 0x000010, "Member 'FortStoreFrontOfferInfo_IsItemGrantUnique::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsItemMissingFromCollectionBook
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_IsItemMissingFromCollectionBook final
{
public:
	const class UFortItem*                        ItemToCheck;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_IsItemMissingFromCollectionBook) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_IsItemMissingFromCollectionBook");
static_assert(sizeof(FortStoreFrontOfferInfo_IsItemMissingFromCollectionBook) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_IsItemMissingFromCollectionBook");
static_assert(offsetof(FortStoreFrontOfferInfo_IsItemMissingFromCollectionBook, ItemToCheck) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsItemMissingFromCollectionBook::ItemToCheck' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_IsItemMissingFromCollectionBook, ReturnValue) == 0x000008, "Member 'FortStoreFrontOfferInfo_IsItemMissingFromCollectionBook::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsItemMissingFromInventory
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferInfo_IsItemMissingFromInventory final
{
public:
	const class UFortItem*                        ItemToCheck;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_IsItemMissingFromInventory) == 0x000008, "Wrong alignment on FortStoreFrontOfferInfo_IsItemMissingFromInventory");
static_assert(sizeof(FortStoreFrontOfferInfo_IsItemMissingFromInventory) == 0x000010, "Wrong size on FortStoreFrontOfferInfo_IsItemMissingFromInventory");
static_assert(offsetof(FortStoreFrontOfferInfo_IsItemMissingFromInventory, ItemToCheck) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsItemMissingFromInventory::ItemToCheck' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_IsItemMissingFromInventory, ReturnValue) == 0x000008, "Member 'FortStoreFrontOfferInfo_IsItemMissingFromInventory::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsLockedByRequirement
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_IsLockedByRequirement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_IsLockedByRequirement) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_IsLockedByRequirement");
static_assert(sizeof(FortStoreFrontOfferInfo_IsLockedByRequirement) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_IsLockedByRequirement");
static_assert(offsetof(FortStoreFrontOfferInfo_IsLockedByRequirement, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsLockedByRequirement::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsPrerollOffer
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_IsPrerollOffer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_IsPrerollOffer) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_IsPrerollOffer");
static_assert(sizeof(FortStoreFrontOfferInfo_IsPrerollOffer) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_IsPrerollOffer");
static_assert(offsetof(FortStoreFrontOfferInfo_IsPrerollOffer, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsPrerollOffer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsPriceInGameItems
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_IsPriceInGameItems final
{
public:
	int32                                         PriceIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_IsPriceInGameItems) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_IsPriceInGameItems");
static_assert(sizeof(FortStoreFrontOfferInfo_IsPriceInGameItems) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_IsPriceInGameItems");
static_assert(offsetof(FortStoreFrontOfferInfo_IsPriceInGameItems, PriceIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsPriceInGameItems::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_IsPriceInGameItems, ReturnValue) == 0x000004, "Member 'FortStoreFrontOfferInfo_IsPriceInGameItems::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsPriceInMTX
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_IsPriceInMTX final
{
public:
	int32                                         PriceIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_IsPriceInMTX) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_IsPriceInMTX");
static_assert(sizeof(FortStoreFrontOfferInfo_IsPriceInMTX) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_IsPriceInMTX");
static_assert(offsetof(FortStoreFrontOfferInfo_IsPriceInMTX, PriceIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsPriceInMTX::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_IsPriceInMTX, ReturnValue) == 0x000004, "Member 'FortStoreFrontOfferInfo_IsPriceInMTX::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsPriceInRealMoney
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferInfo_IsPriceInRealMoney final
{
public:
	int32                                         PriceIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreFrontOfferInfo_IsPriceInRealMoney) == 0x000004, "Wrong alignment on FortStoreFrontOfferInfo_IsPriceInRealMoney");
static_assert(sizeof(FortStoreFrontOfferInfo_IsPriceInRealMoney) == 0x000008, "Wrong size on FortStoreFrontOfferInfo_IsPriceInRealMoney");
static_assert(offsetof(FortStoreFrontOfferInfo_IsPriceInRealMoney, PriceIndex) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsPriceInRealMoney::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortStoreFrontOfferInfo_IsPriceInRealMoney, ReturnValue) == 0x000004, "Member 'FortStoreFrontOfferInfo_IsPriceInRealMoney::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsRefundable
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_IsRefundable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_IsRefundable) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_IsRefundable");
static_assert(sizeof(FortStoreFrontOfferInfo_IsRefundable) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_IsRefundable");
static_assert(offsetof(FortStoreFrontOfferInfo_IsRefundable, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsRefundable::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsUnique
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_IsUnique final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_IsUnique) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_IsUnique");
static_assert(sizeof(FortStoreFrontOfferInfo_IsUnique) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_IsUnique");
static_assert(offsetof(FortStoreFrontOfferInfo_IsUnique, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsUnique::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.IsValidOffer
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_IsValidOffer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_IsValidOffer) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_IsValidOffer");
static_assert(sizeof(FortStoreFrontOfferInfo_IsValidOffer) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_IsValidOffer");
static_assert(offsetof(FortStoreFrontOfferInfo_IsValidOffer, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_IsValidOffer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.OfferHasDenyRequirements
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_OfferHasDenyRequirements final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_OfferHasDenyRequirements) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_OfferHasDenyRequirements");
static_assert(sizeof(FortStoreFrontOfferInfo_OfferHasDenyRequirements) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_OfferHasDenyRequirements");
static_assert(offsetof(FortStoreFrontOfferInfo_OfferHasDenyRequirements, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_OfferHasDenyRequirements::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferInfo.WasPrerollItemSeen
// 0x0001 (0x0001 - 0x0000)
struct FortStoreFrontOfferInfo_WasPrerollItemSeen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferInfo_WasPrerollItemSeen) == 0x000001, "Wrong alignment on FortStoreFrontOfferInfo_WasPrerollItemSeen");
static_assert(sizeof(FortStoreFrontOfferInfo_WasPrerollItemSeen) == 0x000001, "Wrong size on FortStoreFrontOfferInfo_WasPrerollItemSeen");
static_assert(offsetof(FortStoreFrontOfferInfo_WasPrerollItemSeen, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferInfo_WasPrerollItemSeen::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreOfferInfo.GetDisplayAssetIcon
// 0x0008 (0x0008 - 0x0000)
struct FortLlamaStoreOfferInfo_GetDisplayAssetIcon final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreOfferInfo_GetDisplayAssetIcon) == 0x000008, "Wrong alignment on FortLlamaStoreOfferInfo_GetDisplayAssetIcon");
static_assert(sizeof(FortLlamaStoreOfferInfo_GetDisplayAssetIcon) == 0x000008, "Wrong size on FortLlamaStoreOfferInfo_GetDisplayAssetIcon");
static_assert(offsetof(FortLlamaStoreOfferInfo_GetDisplayAssetIcon, ReturnValue) == 0x000000, "Member 'FortLlamaStoreOfferInfo_GetDisplayAssetIcon::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreOfferInfo.GetDisplayAssetImage
// 0x0028 (0x0028 - 0x0000)
struct FortLlamaStoreOfferInfo_GetDisplayAssetImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreOfferInfo_GetDisplayAssetImage) == 0x000008, "Wrong alignment on FortLlamaStoreOfferInfo_GetDisplayAssetImage");
static_assert(sizeof(FortLlamaStoreOfferInfo_GetDisplayAssetImage) == 0x000028, "Wrong size on FortLlamaStoreOfferInfo_GetDisplayAssetImage");
static_assert(offsetof(FortLlamaStoreOfferInfo_GetDisplayAssetImage, ReturnValue) == 0x000000, "Member 'FortLlamaStoreOfferInfo_GetDisplayAssetImage::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreOfferInfo.GetDisplayAssetPersonality
// 0x0008 (0x0008 - 0x0000)
struct FortLlamaStoreOfferInfo_GetDisplayAssetPersonality final
{
public:
	class UFortPackPersonality*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreOfferInfo_GetDisplayAssetPersonality) == 0x000008, "Wrong alignment on FortLlamaStoreOfferInfo_GetDisplayAssetPersonality");
static_assert(sizeof(FortLlamaStoreOfferInfo_GetDisplayAssetPersonality) == 0x000008, "Wrong size on FortLlamaStoreOfferInfo_GetDisplayAssetPersonality");
static_assert(offsetof(FortLlamaStoreOfferInfo_GetDisplayAssetPersonality, ReturnValue) == 0x000000, "Member 'FortLlamaStoreOfferInfo_GetDisplayAssetPersonality::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreOfferInfo.GetDisplayAssetXrayImage
// 0x0028 (0x0028 - 0x0000)
struct FortLlamaStoreOfferInfo_GetDisplayAssetXrayImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreOfferInfo_GetDisplayAssetXrayImage) == 0x000008, "Wrong alignment on FortLlamaStoreOfferInfo_GetDisplayAssetXrayImage");
static_assert(sizeof(FortLlamaStoreOfferInfo_GetDisplayAssetXrayImage) == 0x000028, "Wrong size on FortLlamaStoreOfferInfo_GetDisplayAssetXrayImage");
static_assert(offsetof(FortLlamaStoreOfferInfo_GetDisplayAssetXrayImage, ReturnValue) == 0x000000, "Member 'FortLlamaStoreOfferInfo_GetDisplayAssetXrayImage::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreOfferInfo.GetLlamaOfferDisplayAsset
// 0x0008 (0x0008 - 0x0000)
struct FortLlamaStoreOfferInfo_GetLlamaOfferDisplayAsset final
{
public:
	class UFortCardPackItemDefinition*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreOfferInfo_GetLlamaOfferDisplayAsset) == 0x000008, "Wrong alignment on FortLlamaStoreOfferInfo_GetLlamaOfferDisplayAsset");
static_assert(sizeof(FortLlamaStoreOfferInfo_GetLlamaOfferDisplayAsset) == 0x000008, "Wrong size on FortLlamaStoreOfferInfo_GetLlamaOfferDisplayAsset");
static_assert(offsetof(FortLlamaStoreOfferInfo_GetLlamaOfferDisplayAsset, ReturnValue) == 0x000000, "Member 'FortLlamaStoreOfferInfo_GetLlamaOfferDisplayAsset::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferWidgetBase.AddOffer
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferWidgetBase_AddOffer final
{
public:
	class UFortStoreFrontOfferInfo*               InOfferData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferWidgetBase_AddOffer) == 0x000008, "Wrong alignment on FortStoreFrontOfferWidgetBase_AddOffer");
static_assert(sizeof(FortStoreFrontOfferWidgetBase_AddOffer) == 0x000008, "Wrong size on FortStoreFrontOfferWidgetBase_AddOffer");
static_assert(offsetof(FortStoreFrontOfferWidgetBase_AddOffer, InOfferData) == 0x000000, "Member 'FortStoreFrontOfferWidgetBase_AddOffer::InOfferData' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferWidgetBase.HandleCurrentlyViewedAccountInfoChanged
// 0x0034 (0x0034 - 0x0000)
struct FortStoreFrontOfferWidgetBase_HandleCurrentlyViewedAccountInfoChanged final
{
public:
	struct FFortPublicAccountInfo                 NewInfo;                                           // 0x0000(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferWidgetBase_HandleCurrentlyViewedAccountInfoChanged) == 0x000004, "Wrong alignment on FortStoreFrontOfferWidgetBase_HandleCurrentlyViewedAccountInfoChanged");
static_assert(sizeof(FortStoreFrontOfferWidgetBase_HandleCurrentlyViewedAccountInfoChanged) == 0x000034, "Wrong size on FortStoreFrontOfferWidgetBase_HandleCurrentlyViewedAccountInfoChanged");
static_assert(offsetof(FortStoreFrontOfferWidgetBase_HandleCurrentlyViewedAccountInfoChanged, NewInfo) == 0x000000, "Member 'FortStoreFrontOfferWidgetBase_HandleCurrentlyViewedAccountInfoChanged::NewInfo' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferWidgetBase.OnOfferTileBrushLoaded
// 0x0088 (0x0088 - 0x0000)
struct FortStoreFrontOfferWidgetBase_OnOfferTileBrushLoaded final
{
public:
	struct FSlateBrush                            OfferBrush;                                        // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferWidgetBase_OnOfferTileBrushLoaded) == 0x000008, "Wrong alignment on FortStoreFrontOfferWidgetBase_OnOfferTileBrushLoaded");
static_assert(sizeof(FortStoreFrontOfferWidgetBase_OnOfferTileBrushLoaded) == 0x000088, "Wrong size on FortStoreFrontOfferWidgetBase_OnOfferTileBrushLoaded");
static_assert(offsetof(FortStoreFrontOfferWidgetBase_OnOfferTileBrushLoaded, OfferBrush) == 0x000000, "Member 'FortStoreFrontOfferWidgetBase_OnOfferTileBrushLoaded::OfferBrush' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferWidgetBase.SetupOffer
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferWidgetBase_SetupOffer final
{
public:
	class UFortStoreFrontOfferInfo*               InOfferData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferWidgetBase_SetupOffer) == 0x000008, "Wrong alignment on FortStoreFrontOfferWidgetBase_SetupOffer");
static_assert(sizeof(FortStoreFrontOfferWidgetBase_SetupOffer) == 0x000008, "Wrong size on FortStoreFrontOfferWidgetBase_SetupOffer");
static_assert(offsetof(FortStoreFrontOfferWidgetBase_SetupOffer, InOfferData) == 0x000000, "Member 'FortStoreFrontOfferWidgetBase_SetupOffer::InOfferData' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferWidgetBase.SetupThumbnailRenderer
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferWidgetBase_SetupThumbnailRenderer final
{
public:
	class UFortItemThumbnailRenderer*             InThumbnailRenderer;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferWidgetBase_SetupThumbnailRenderer) == 0x000008, "Wrong alignment on FortStoreFrontOfferWidgetBase_SetupThumbnailRenderer");
static_assert(sizeof(FortStoreFrontOfferWidgetBase_SetupThumbnailRenderer) == 0x000008, "Wrong size on FortStoreFrontOfferWidgetBase_SetupThumbnailRenderer");
static_assert(offsetof(FortStoreFrontOfferWidgetBase_SetupThumbnailRenderer, InThumbnailRenderer) == 0x000000, "Member 'FortStoreFrontOfferWidgetBase_SetupThumbnailRenderer::InThumbnailRenderer' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferWidgetBase.GetOfferInfo
// 0x0008 (0x0008 - 0x0000)
struct FortStoreFrontOfferWidgetBase_GetOfferInfo final
{
public:
	class UFortStoreFrontOfferInfo*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferWidgetBase_GetOfferInfo) == 0x000008, "Wrong alignment on FortStoreFrontOfferWidgetBase_GetOfferInfo");
static_assert(sizeof(FortStoreFrontOfferWidgetBase_GetOfferInfo) == 0x000008, "Wrong size on FortStoreFrontOfferWidgetBase_GetOfferInfo");
static_assert(offsetof(FortStoreFrontOfferWidgetBase_GetOfferInfo, ReturnValue) == 0x000000, "Member 'FortStoreFrontOfferWidgetBase_GetOfferInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferWidgetBase.SendRealMoneyStoreInteractionAnalytic
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferWidgetBase_SendRealMoneyStoreInteractionAnalytic final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferWidgetBase_SendRealMoneyStoreInteractionAnalytic) == 0x000008, "Wrong alignment on FortStoreFrontOfferWidgetBase_SendRealMoneyStoreInteractionAnalytic");
static_assert(sizeof(FortStoreFrontOfferWidgetBase_SendRealMoneyStoreInteractionAnalytic) == 0x000010, "Wrong size on FortStoreFrontOfferWidgetBase_SendRealMoneyStoreInteractionAnalytic");
static_assert(offsetof(FortStoreFrontOfferWidgetBase_SendRealMoneyStoreInteractionAnalytic, Interaction) == 0x000000, "Member 'FortStoreFrontOfferWidgetBase_SendRealMoneyStoreInteractionAnalytic::Interaction' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferWidgetBase.SendSeasonPassInteractionAnalytic
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferWidgetBase_SendSeasonPassInteractionAnalytic final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferWidgetBase_SendSeasonPassInteractionAnalytic) == 0x000008, "Wrong alignment on FortStoreFrontOfferWidgetBase_SendSeasonPassInteractionAnalytic");
static_assert(sizeof(FortStoreFrontOfferWidgetBase_SendSeasonPassInteractionAnalytic) == 0x000010, "Wrong size on FortStoreFrontOfferWidgetBase_SendSeasonPassInteractionAnalytic");
static_assert(offsetof(FortStoreFrontOfferWidgetBase_SendSeasonPassInteractionAnalytic, Interaction) == 0x000000, "Member 'FortStoreFrontOfferWidgetBase_SendSeasonPassInteractionAnalytic::Interaction' has a wrong offset!");

// Function FortniteUI.FortStoreFrontOfferWidgetBase.SendShopInteractionAnalytic
// 0x0010 (0x0010 - 0x0000)
struct FortStoreFrontOfferWidgetBase_SendShopInteractionAnalytic final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreFrontOfferWidgetBase_SendShopInteractionAnalytic) == 0x000008, "Wrong alignment on FortStoreFrontOfferWidgetBase_SendShopInteractionAnalytic");
static_assert(sizeof(FortStoreFrontOfferWidgetBase_SendShopInteractionAnalytic) == 0x000010, "Wrong size on FortStoreFrontOfferWidgetBase_SendShopInteractionAnalytic");
static_assert(offsetof(FortStoreFrontOfferWidgetBase_SendShopInteractionAnalytic, Interaction) == 0x000000, "Member 'FortStoreFrontOfferWidgetBase_SendShopInteractionAnalytic::Interaction' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreOfferWidgetBase.GetCurrentRarity
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreOfferWidgetBase_GetCurrentRarity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreOfferWidgetBase_GetCurrentRarity) == 0x000004, "Wrong alignment on FortLlamaStoreOfferWidgetBase_GetCurrentRarity");
static_assert(sizeof(FortLlamaStoreOfferWidgetBase_GetCurrentRarity) == 0x000004, "Wrong size on FortLlamaStoreOfferWidgetBase_GetCurrentRarity");
static_assert(offsetof(FortLlamaStoreOfferWidgetBase_GetCurrentRarity, ReturnValue) == 0x000000, "Member 'FortLlamaStoreOfferWidgetBase_GetCurrentRarity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreOfferWidgetBase.GetPriceIndexToShow
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreOfferWidgetBase_GetPriceIndexToShow final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreOfferWidgetBase_GetPriceIndexToShow) == 0x000004, "Wrong alignment on FortLlamaStoreOfferWidgetBase_GetPriceIndexToShow");
static_assert(sizeof(FortLlamaStoreOfferWidgetBase_GetPriceIndexToShow) == 0x000004, "Wrong size on FortLlamaStoreOfferWidgetBase_GetPriceIndexToShow");
static_assert(offsetof(FortLlamaStoreOfferWidgetBase_GetPriceIndexToShow, ReturnValue) == 0x000000, "Member 'FortLlamaStoreOfferWidgetBase_GetPriceIndexToShow::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreOfferWidgetBase.IsParentActivatablePanelActive
// 0x0001 (0x0001 - 0x0000)
struct FortLlamaStoreOfferWidgetBase_IsParentActivatablePanelActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreOfferWidgetBase_IsParentActivatablePanelActive) == 0x000001, "Wrong alignment on FortLlamaStoreOfferWidgetBase_IsParentActivatablePanelActive");
static_assert(sizeof(FortLlamaStoreOfferWidgetBase_IsParentActivatablePanelActive) == 0x000001, "Wrong size on FortLlamaStoreOfferWidgetBase_IsParentActivatablePanelActive");
static_assert(offsetof(FortLlamaStoreOfferWidgetBase_IsParentActivatablePanelActive, ReturnValue) == 0x000000, "Member 'FortLlamaStoreOfferWidgetBase_IsParentActivatablePanelActive::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreOfferWidgetBase.RequestPurchase
// 0x0008 (0x0008 - 0x0000)
struct FortLlamaStoreOfferWidgetBase_RequestPurchase final
{
public:
	int32                                         PriceIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreOfferWidgetBase_RequestPurchase) == 0x000004, "Wrong alignment on FortLlamaStoreOfferWidgetBase_RequestPurchase");
static_assert(sizeof(FortLlamaStoreOfferWidgetBase_RequestPurchase) == 0x000008, "Wrong size on FortLlamaStoreOfferWidgetBase_RequestPurchase");
static_assert(offsetof(FortLlamaStoreOfferWidgetBase_RequestPurchase, PriceIndex) == 0x000000, "Member 'FortLlamaStoreOfferWidgetBase_RequestPurchase::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortLlamaStoreOfferWidgetBase_RequestPurchase, Quantity) == 0x000004, "Member 'FortLlamaStoreOfferWidgetBase_RequestPurchase::Quantity' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreOfferWidgetBase.ShowRarity
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreOfferWidgetBase_ShowRarity final
{
public:
	int32                                         Rarity;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreOfferWidgetBase_ShowRarity) == 0x000004, "Wrong alignment on FortLlamaStoreOfferWidgetBase_ShowRarity");
static_assert(sizeof(FortLlamaStoreOfferWidgetBase_ShowRarity) == 0x000004, "Wrong size on FortLlamaStoreOfferWidgetBase_ShowRarity");
static_assert(offsetof(FortLlamaStoreOfferWidgetBase_ShowRarity, Rarity) == 0x000000, "Member 'FortLlamaStoreOfferWidgetBase_ShowRarity::Rarity' has a wrong offset!");

// Function FortniteUI.FortLlamaStoreOfferWidgetBase.UpgradeRarity
// 0x0004 (0x0004 - 0x0000)
struct FortLlamaStoreOfferWidgetBase_UpgradeRarity final
{
public:
	int32                                         RarityToUpgradeTo;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLlamaStoreOfferWidgetBase_UpgradeRarity) == 0x000004, "Wrong alignment on FortLlamaStoreOfferWidgetBase_UpgradeRarity");
static_assert(sizeof(FortLlamaStoreOfferWidgetBase_UpgradeRarity) == 0x000004, "Wrong size on FortLlamaStoreOfferWidgetBase_UpgradeRarity");
static_assert(offsetof(FortLlamaStoreOfferWidgetBase_UpgradeRarity, RarityToUpgradeTo) == 0x000000, "Member 'FortLlamaStoreOfferWidgetBase_UpgradeRarity::RarityToUpgradeTo' has a wrong offset!");

// Function FortniteUI.FortVideoPlayerWidget.DynamicHandleOnMediaOpened
// 0x0010 (0x0010 - 0x0000)
struct FortVideoPlayerWidget_DynamicHandleOnMediaOpened final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVideoPlayerWidget_DynamicHandleOnMediaOpened) == 0x000008, "Wrong alignment on FortVideoPlayerWidget_DynamicHandleOnMediaOpened");
static_assert(sizeof(FortVideoPlayerWidget_DynamicHandleOnMediaOpened) == 0x000010, "Wrong size on FortVideoPlayerWidget_DynamicHandleOnMediaOpened");
static_assert(offsetof(FortVideoPlayerWidget_DynamicHandleOnMediaOpened, OpenedUrl) == 0x000000, "Member 'FortVideoPlayerWidget_DynamicHandleOnMediaOpened::OpenedUrl' has a wrong offset!");

// Function FortniteUI.FortVideoPlayerWidget.DynamicHandleOnOpenMediaFailed
// 0x0010 (0x0010 - 0x0000)
struct FortVideoPlayerWidget_DynamicHandleOnOpenMediaFailed final
{
public:
	class FString                                 FailedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVideoPlayerWidget_DynamicHandleOnOpenMediaFailed) == 0x000008, "Wrong alignment on FortVideoPlayerWidget_DynamicHandleOnOpenMediaFailed");
static_assert(sizeof(FortVideoPlayerWidget_DynamicHandleOnOpenMediaFailed) == 0x000010, "Wrong size on FortVideoPlayerWidget_DynamicHandleOnOpenMediaFailed");
static_assert(offsetof(FortVideoPlayerWidget_DynamicHandleOnOpenMediaFailed, FailedUrl) == 0x000000, "Member 'FortVideoPlayerWidget_DynamicHandleOnOpenMediaFailed::FailedUrl' has a wrong offset!");

// Function FortniteUI.FortLocalPlayerParticipation.OnLocalPlayerParticipationChanged
// 0x0001 (0x0001 - 0x0000)
struct FortLocalPlayerParticipation_OnLocalPlayerParticipationChanged final
{
public:
	bool                                          bIsParticipating;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLocalPlayerParticipation_OnLocalPlayerParticipationChanged) == 0x000001, "Wrong alignment on FortLocalPlayerParticipation_OnLocalPlayerParticipationChanged");
static_assert(sizeof(FortLocalPlayerParticipation_OnLocalPlayerParticipationChanged) == 0x000001, "Wrong size on FortLocalPlayerParticipation_OnLocalPlayerParticipationChanged");
static_assert(offsetof(FortLocalPlayerParticipation_OnLocalPlayerParticipationChanged, bIsParticipating) == 0x000000, "Member 'FortLocalPlayerParticipation_OnLocalPlayerParticipationChanged::bIsParticipating' has a wrong offset!");

// Function FortniteUI.FortLocalUserEntry.HandleGetMenuContent
// 0x0008 (0x0008 - 0x0000)
struct FortLocalUserEntry_HandleGetMenuContent final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLocalUserEntry_HandleGetMenuContent) == 0x000008, "Wrong alignment on FortLocalUserEntry_HandleGetMenuContent");
static_assert(sizeof(FortLocalUserEntry_HandleGetMenuContent) == 0x000008, "Wrong size on FortLocalUserEntry_HandleGetMenuContent");
static_assert(offsetof(FortLocalUserEntry_HandleGetMenuContent, ReturnValue) == 0x000000, "Member 'FortLocalUserEntry_HandleGetMenuContent::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLocalUserEntry.HandleMenuOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct FortLocalUserEntry_HandleMenuOpenChanged final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLocalUserEntry_HandleMenuOpenChanged) == 0x000001, "Wrong alignment on FortLocalUserEntry_HandleMenuOpenChanged");
static_assert(sizeof(FortLocalUserEntry_HandleMenuOpenChanged) == 0x000001, "Wrong size on FortLocalUserEntry_HandleMenuOpenChanged");
static_assert(offsetof(FortLocalUserEntry_HandleMenuOpenChanged, bIsOpen) == 0x000000, "Member 'FortLocalUserEntry_HandleMenuOpenChanged::bIsOpen' has a wrong offset!");

// Function FortniteUI.FortLocalUserEntry.OnOnlineStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortLocalUserEntry_OnOnlineStatusChanged final
{
public:
	ELocalUserOnlineStatus                        OnlineStatus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLocalUserEntry_OnOnlineStatusChanged) == 0x000001, "Wrong alignment on FortLocalUserEntry_OnOnlineStatusChanged");
static_assert(sizeof(FortLocalUserEntry_OnOnlineStatusChanged) == 0x000001, "Wrong size on FortLocalUserEntry_OnOnlineStatusChanged");
static_assert(offsetof(FortLocalUserEntry_OnOnlineStatusChanged, OnlineStatus) == 0x000000, "Member 'FortLocalUserEntry_OnOnlineStatusChanged::OnlineStatus' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.AttemptToOpenBattlePassTabForNewSeason
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_Frontend_AttemptToOpenBattlePassTabForNewSeason final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_AttemptToOpenBattlePassTabForNewSeason) == 0x000001, "Wrong alignment on FortUIStateWidget_Frontend_AttemptToOpenBattlePassTabForNewSeason");
static_assert(sizeof(FortUIStateWidget_Frontend_AttemptToOpenBattlePassTabForNewSeason) == 0x000001, "Wrong size on FortUIStateWidget_Frontend_AttemptToOpenBattlePassTabForNewSeason");
static_assert(offsetof(FortUIStateWidget_Frontend_AttemptToOpenBattlePassTabForNewSeason, ReturnValue) == 0x000000, "Member 'FortUIStateWidget_Frontend_AttemptToOpenBattlePassTabForNewSeason::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.CheckBanStatus
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_Frontend_CheckBanStatus final
{
public:
	bool                                          bBanned;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_CheckBanStatus) == 0x000001, "Wrong alignment on FortUIStateWidget_Frontend_CheckBanStatus");
static_assert(sizeof(FortUIStateWidget_Frontend_CheckBanStatus) == 0x000001, "Wrong size on FortUIStateWidget_Frontend_CheckBanStatus");
static_assert(offsetof(FortUIStateWidget_Frontend_CheckBanStatus, bBanned) == 0x000000, "Member 'FortUIStateWidget_Frontend_CheckBanStatus::bBanned' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.CheckForGifts
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_Frontend_CheckForGifts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_CheckForGifts) == 0x000001, "Wrong alignment on FortUIStateWidget_Frontend_CheckForGifts");
static_assert(sizeof(FortUIStateWidget_Frontend_CheckForGifts) == 0x000001, "Wrong size on FortUIStateWidget_Frontend_CheckForGifts");
static_assert(offsetof(FortUIStateWidget_Frontend_CheckForGifts, ReturnValue) == 0x000000, "Member 'FortUIStateWidget_Frontend_CheckForGifts::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.HandleContentWidgetChanged
// 0x0010 (0x0010 - 0x0000)
struct FortUIStateWidget_Frontend_HandleContentWidgetChanged final
{
public:
	class UWidget*                                ActiveWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveWidgetIndex;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIStateWidget_Frontend_HandleContentWidgetChanged) == 0x000008, "Wrong alignment on FortUIStateWidget_Frontend_HandleContentWidgetChanged");
static_assert(sizeof(FortUIStateWidget_Frontend_HandleContentWidgetChanged) == 0x000010, "Wrong size on FortUIStateWidget_Frontend_HandleContentWidgetChanged");
static_assert(offsetof(FortUIStateWidget_Frontend_HandleContentWidgetChanged, ActiveWidget) == 0x000000, "Member 'FortUIStateWidget_Frontend_HandleContentWidgetChanged::ActiveWidget' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_Frontend_HandleContentWidgetChanged, ActiveWidgetIndex) == 0x000008, "Member 'FortUIStateWidget_Frontend_HandleContentWidgetChanged::ActiveWidgetIndex' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.HandleDualBladeMenuActivated
// 0x0008 (0x0008 - 0x0000)
struct FortUIStateWidget_Frontend_HandleDualBladeMenuActivated final
{
public:
	class UCommonActivatablePanel*                Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_HandleDualBladeMenuActivated) == 0x000008, "Wrong alignment on FortUIStateWidget_Frontend_HandleDualBladeMenuActivated");
static_assert(sizeof(FortUIStateWidget_Frontend_HandleDualBladeMenuActivated) == 0x000008, "Wrong size on FortUIStateWidget_Frontend_HandleDualBladeMenuActivated");
static_assert(offsetof(FortUIStateWidget_Frontend_HandleDualBladeMenuActivated, Panel) == 0x000000, "Member 'FortUIStateWidget_Frontend_HandleDualBladeMenuActivated::Panel' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.HandleDualBladeMenuDeactivated
// 0x0008 (0x0008 - 0x0000)
struct FortUIStateWidget_Frontend_HandleDualBladeMenuDeactivated final
{
public:
	class UCommonActivatablePanel*                Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_HandleDualBladeMenuDeactivated) == 0x000008, "Wrong alignment on FortUIStateWidget_Frontend_HandleDualBladeMenuDeactivated");
static_assert(sizeof(FortUIStateWidget_Frontend_HandleDualBladeMenuDeactivated) == 0x000008, "Wrong size on FortUIStateWidget_Frontend_HandleDualBladeMenuDeactivated");
static_assert(offsetof(FortUIStateWidget_Frontend_HandleDualBladeMenuDeactivated, Panel) == 0x000000, "Member 'FortUIStateWidget_Frontend_HandleDualBladeMenuDeactivated::Panel' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.HandleGiftBoxRemoved
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_Frontend_HandleGiftBoxRemoved final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_HandleGiftBoxRemoved) == 0x000001, "Wrong alignment on FortUIStateWidget_Frontend_HandleGiftBoxRemoved");
static_assert(sizeof(FortUIStateWidget_Frontend_HandleGiftBoxRemoved) == 0x000001, "Wrong size on FortUIStateWidget_Frontend_HandleGiftBoxRemoved");
static_assert(offsetof(FortUIStateWidget_Frontend_HandleGiftBoxRemoved, bSuccess) == 0x000000, "Member 'FortUIStateWidget_Frontend_HandleGiftBoxRemoved::bSuccess' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.IsOkToCheckForGifts
// 0x0002 (0x0002 - 0x0000)
struct FortUIStateWidget_Frontend_IsOkToCheckForGifts final
{
public:
	bool                                          bTemporary;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_IsOkToCheckForGifts) == 0x000001, "Wrong alignment on FortUIStateWidget_Frontend_IsOkToCheckForGifts");
static_assert(sizeof(FortUIStateWidget_Frontend_IsOkToCheckForGifts) == 0x000002, "Wrong size on FortUIStateWidget_Frontend_IsOkToCheckForGifts");
static_assert(offsetof(FortUIStateWidget_Frontend_IsOkToCheckForGifts, bTemporary) == 0x000000, "Member 'FortUIStateWidget_Frontend_IsOkToCheckForGifts::bTemporary' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_Frontend_IsOkToCheckForGifts, ReturnValue) == 0x000001, "Member 'FortUIStateWidget_Frontend_IsOkToCheckForGifts::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.OnMatchmakingV2Changed
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_Frontend_OnMatchmakingV2Changed final
{
public:
	bool                                          MatchmakingActive;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_OnMatchmakingV2Changed) == 0x000001, "Wrong alignment on FortUIStateWidget_Frontend_OnMatchmakingV2Changed");
static_assert(sizeof(FortUIStateWidget_Frontend_OnMatchmakingV2Changed) == 0x000001, "Wrong size on FortUIStateWidget_Frontend_OnMatchmakingV2Changed");
static_assert(offsetof(FortUIStateWidget_Frontend_OnMatchmakingV2Changed, MatchmakingActive) == 0x000000, "Member 'FortUIStateWidget_Frontend_OnMatchmakingV2Changed::MatchmakingActive' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.SetVideoActive
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_Frontend_SetVideoActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_SetVideoActive) == 0x000001, "Wrong alignment on FortUIStateWidget_Frontend_SetVideoActive");
static_assert(sizeof(FortUIStateWidget_Frontend_SetVideoActive) == 0x000001, "Wrong size on FortUIStateWidget_Frontend_SetVideoActive");
static_assert(offsetof(FortUIStateWidget_Frontend_SetVideoActive, bActive) == 0x000000, "Member 'FortUIStateWidget_Frontend_SetVideoActive::bActive' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.ShowInitialCrossplayDialog
// 0x0001 (0x0001 - 0x0000)
struct FortUIStateWidget_Frontend_ShowInitialCrossplayDialog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_ShowInitialCrossplayDialog) == 0x000001, "Wrong alignment on FortUIStateWidget_Frontend_ShowInitialCrossplayDialog");
static_assert(sizeof(FortUIStateWidget_Frontend_ShowInitialCrossplayDialog) == 0x000001, "Wrong size on FortUIStateWidget_Frontend_ShowInitialCrossplayDialog");
static_assert(offsetof(FortUIStateWidget_Frontend_ShowInitialCrossplayDialog, ReturnValue) == 0x000000, "Member 'FortUIStateWidget_Frontend_ShowInitialCrossplayDialog::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.TryMFAModal
// 0x0008 (0x0008 - 0x0000)
struct FortUIStateWidget_Frontend_TryMFAModal final
{
public:
	TSubclassOf<class UEnableMultiFactorModal>    BPClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_TryMFAModal) == 0x000008, "Wrong alignment on FortUIStateWidget_Frontend_TryMFAModal");
static_assert(sizeof(FortUIStateWidget_Frontend_TryMFAModal) == 0x000008, "Wrong size on FortUIStateWidget_Frontend_TryMFAModal");
static_assert(offsetof(FortUIStateWidget_Frontend_TryMFAModal, BPClass) == 0x000000, "Member 'FortUIStateWidget_Frontend_TryMFAModal::BPClass' has a wrong offset!");

// Function FortniteUI.FortUIStateWidget_Frontend.NeedSeeTrailerMovie
// 0x0002 (0x0002 - 0x0000)
struct FortUIStateWidget_Frontend_NeedSeeTrailerMovie final
{
public:
	bool                                          bAllowUpdate;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIStateWidget_Frontend_NeedSeeTrailerMovie) == 0x000001, "Wrong alignment on FortUIStateWidget_Frontend_NeedSeeTrailerMovie");
static_assert(sizeof(FortUIStateWidget_Frontend_NeedSeeTrailerMovie) == 0x000002, "Wrong size on FortUIStateWidget_Frontend_NeedSeeTrailerMovie");
static_assert(offsetof(FortUIStateWidget_Frontend_NeedSeeTrailerMovie, bAllowUpdate) == 0x000000, "Member 'FortUIStateWidget_Frontend_NeedSeeTrailerMovie::bAllowUpdate' has a wrong offset!");
static_assert(offsetof(FortUIStateWidget_Frontend_NeedSeeTrailerMovie, ReturnValue) == 0x000001, "Member 'FortUIStateWidget_Frontend_NeedSeeTrailerMovie::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortLocalUserSettingTitleButton.OnExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct FortLocalUserSettingTitleButton_OnExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLocalUserSettingTitleButton_OnExpansionChanged) == 0x000001, "Wrong alignment on FortLocalUserSettingTitleButton_OnExpansionChanged");
static_assert(sizeof(FortLocalUserSettingTitleButton_OnExpansionChanged) == 0x000001, "Wrong size on FortLocalUserSettingTitleButton_OnExpansionChanged");
static_assert(offsetof(FortLocalUserSettingTitleButton_OnExpansionChanged, bIsExpanded) == 0x000000, "Member 'FortLocalUserSettingTitleButton_OnExpansionChanged::bIsExpanded' has a wrong offset!");

// Function FortniteUI.FortLocalUserSettingsMenu.HandleMenuAnchorOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct FortLocalUserSettingsMenu_HandleMenuAnchorOpenChanged final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLocalUserSettingsMenu_HandleMenuAnchorOpenChanged) == 0x000001, "Wrong alignment on FortLocalUserSettingsMenu_HandleMenuAnchorOpenChanged");
static_assert(sizeof(FortLocalUserSettingsMenu_HandleMenuAnchorOpenChanged) == 0x000001, "Wrong size on FortLocalUserSettingsMenu_HandleMenuAnchorOpenChanged");
static_assert(offsetof(FortLocalUserSettingsMenu_HandleMenuAnchorOpenChanged, bIsOpen) == 0x000000, "Member 'FortLocalUserSettingsMenu_HandleMenuAnchorOpenChanged::bIsOpen' has a wrong offset!");

// Function FortniteUI.FortLoginInteractions.HandleDisplayWebAccountCreation
// 0x0008 (0x0008 - 0x0000)
struct FortLoginInteractions_HandleDisplayWebAccountCreation final
{
public:
	class UWidget*                                WebWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLoginInteractions_HandleDisplayWebAccountCreation) == 0x000008, "Wrong alignment on FortLoginInteractions_HandleDisplayWebAccountCreation");
static_assert(sizeof(FortLoginInteractions_HandleDisplayWebAccountCreation) == 0x000008, "Wrong size on FortLoginInteractions_HandleDisplayWebAccountCreation");
static_assert(offsetof(FortLoginInteractions_HandleDisplayWebAccountCreation, WebWidget) == 0x000000, "Member 'FortLoginInteractions_HandleDisplayWebAccountCreation::WebWidget' has a wrong offset!");

// Function FortniteUI.FortLoginInteractions.HandleDisplayWebLogin
// 0x0008 (0x0008 - 0x0000)
struct FortLoginInteractions_HandleDisplayWebLogin final
{
public:
	class UWidget*                                WebWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLoginInteractions_HandleDisplayWebLogin) == 0x000008, "Wrong alignment on FortLoginInteractions_HandleDisplayWebLogin");
static_assert(sizeof(FortLoginInteractions_HandleDisplayWebLogin) == 0x000008, "Wrong size on FortLoginInteractions_HandleDisplayWebLogin");
static_assert(offsetof(FortLoginInteractions_HandleDisplayWebLogin, WebWidget) == 0x000000, "Member 'FortLoginInteractions_HandleDisplayWebLogin::WebWidget' has a wrong offset!");

// Function FortniteUI.FortLoginUnavailable.OnMessageSet
// 0x0001 (0x0001 - 0x0000)
struct FortLoginUnavailable_OnMessageSet final
{
public:
	bool                                          bDisableMessage;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLoginUnavailable_OnMessageSet) == 0x000001, "Wrong alignment on FortLoginUnavailable_OnMessageSet");
static_assert(sizeof(FortLoginUnavailable_OnMessageSet) == 0x000001, "Wrong size on FortLoginUnavailable_OnMessageSet");
static_assert(offsetof(FortLoginUnavailable_OnMessageSet, bDisableMessage) == 0x000000, "Member 'FortLoginUnavailable_OnMessageSet::bDisableMessage' has a wrong offset!");

// Function FortniteUI.FortUpgradeTileBase.OnDataRefresh
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeTileBase_OnDataRefresh final
{
public:
	bool                                          bUpgrade;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeTileBase_OnDataRefresh) == 0x000001, "Wrong alignment on FortUpgradeTileBase_OnDataRefresh");
static_assert(sizeof(FortUpgradeTileBase_OnDataRefresh) == 0x000001, "Wrong size on FortUpgradeTileBase_OnDataRefresh");
static_assert(offsetof(FortUpgradeTileBase_OnDataRefresh, bUpgrade) == 0x000000, "Member 'FortUpgradeTileBase_OnDataRefresh::bUpgrade' has a wrong offset!");

// Function FortniteUI.FortMainMenu.GetOutpostPermissionsWidgetClass
// 0x0028 (0x0028 - 0x0000)
struct FortMainMenu_GetOutpostPermissionsWidgetClass final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMainMenu_GetOutpostPermissionsWidgetClass) == 0x000008, "Wrong alignment on FortMainMenu_GetOutpostPermissionsWidgetClass");
static_assert(sizeof(FortMainMenu_GetOutpostPermissionsWidgetClass) == 0x000028, "Wrong size on FortMainMenu_GetOutpostPermissionsWidgetClass");
static_assert(offsetof(FortMainMenu_GetOutpostPermissionsWidgetClass, ReturnValue) == 0x000000, "Member 'FortMainMenu_GetOutpostPermissionsWidgetClass::ReturnValue' has a wrong offset!");

// Function FortniteUI.TagTeamCountWidget.SetBlueTeamSize
// 0x0008 (0x0008 - 0x0000)
struct TagTeamCountWidget_SetBlueTeamSize final
{
public:
	int32                                         TeamSize;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSize;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagTeamCountWidget_SetBlueTeamSize) == 0x000004, "Wrong alignment on TagTeamCountWidget_SetBlueTeamSize");
static_assert(sizeof(TagTeamCountWidget_SetBlueTeamSize) == 0x000008, "Wrong size on TagTeamCountWidget_SetBlueTeamSize");
static_assert(offsetof(TagTeamCountWidget_SetBlueTeamSize, TeamSize) == 0x000000, "Member 'TagTeamCountWidget_SetBlueTeamSize::TeamSize' has a wrong offset!");
static_assert(offsetof(TagTeamCountWidget_SetBlueTeamSize, TotalSize) == 0x000004, "Member 'TagTeamCountWidget_SetBlueTeamSize::TotalSize' has a wrong offset!");

// Function FortniteUI.TagTeamCountWidget.SetCurrentTeam
// 0x0001 (0x0001 - 0x0000)
struct TagTeamCountWidget_SetCurrentTeam final
{
public:
	uint8                                         CurrentTeam;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagTeamCountWidget_SetCurrentTeam) == 0x000001, "Wrong alignment on TagTeamCountWidget_SetCurrentTeam");
static_assert(sizeof(TagTeamCountWidget_SetCurrentTeam) == 0x000001, "Wrong size on TagTeamCountWidget_SetCurrentTeam");
static_assert(offsetof(TagTeamCountWidget_SetCurrentTeam, CurrentTeam) == 0x000000, "Member 'TagTeamCountWidget_SetCurrentTeam::CurrentTeam' has a wrong offset!");

// Function FortniteUI.TagTeamCountWidget.SetRedTeamSize
// 0x0008 (0x0008 - 0x0000)
struct TagTeamCountWidget_SetRedTeamSize final
{
public:
	int32                                         TeamSize;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSize;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagTeamCountWidget_SetRedTeamSize) == 0x000004, "Wrong alignment on TagTeamCountWidget_SetRedTeamSize");
static_assert(sizeof(TagTeamCountWidget_SetRedTeamSize) == 0x000008, "Wrong size on TagTeamCountWidget_SetRedTeamSize");
static_assert(offsetof(TagTeamCountWidget_SetRedTeamSize, TeamSize) == 0x000000, "Member 'TagTeamCountWidget_SetRedTeamSize::TeamSize' has a wrong offset!");
static_assert(offsetof(TagTeamCountWidget_SetRedTeamSize, TotalSize) == 0x000004, "Member 'TagTeamCountWidget_SetRedTeamSize::TotalSize' has a wrong offset!");

// Function FortniteUI.FortMatchmakingKnobsSpinnerButton.OnLoadingStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingKnobsSpinnerButton_OnLoadingStateChanged final
{
public:
	bool                                          bCurrentlyLoading;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingKnobsSpinnerButton_OnLoadingStateChanged) == 0x000001, "Wrong alignment on FortMatchmakingKnobsSpinnerButton_OnLoadingStateChanged");
static_assert(sizeof(FortMatchmakingKnobsSpinnerButton_OnLoadingStateChanged) == 0x000001, "Wrong size on FortMatchmakingKnobsSpinnerButton_OnLoadingStateChanged");
static_assert(offsetof(FortMatchmakingKnobsSpinnerButton_OnLoadingStateChanged, bCurrentlyLoading) == 0x000000, "Member 'FortMatchmakingKnobsSpinnerButton_OnLoadingStateChanged::bCurrentlyLoading' has a wrong offset!");

// Function FortniteUI.FortMatchmakingKnobsSpinnerButton.OnSelectionRotated
// 0x0004 (0x0004 - 0x0000)
struct FortMatchmakingKnobsSpinnerButton_OnSelectionRotated final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingKnobsSpinnerButton_OnSelectionRotated) == 0x000004, "Wrong alignment on FortMatchmakingKnobsSpinnerButton_OnSelectionRotated");
static_assert(sizeof(FortMatchmakingKnobsSpinnerButton_OnSelectionRotated) == 0x000004, "Wrong size on FortMatchmakingKnobsSpinnerButton_OnSelectionRotated");
static_assert(offsetof(FortMatchmakingKnobsSpinnerButton_OnSelectionRotated, Value) == 0x000000, "Member 'FortMatchmakingKnobsSpinnerButton_OnSelectionRotated::Value' has a wrong offset!");

// Function FortniteUI.FortMatchmakingKnobsSpinnerButton.SetSpinnerOptionsVisiblity
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingKnobsSpinnerButton_SetSpinnerOptionsVisiblity final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingKnobsSpinnerButton_SetSpinnerOptionsVisiblity) == 0x000001, "Wrong alignment on FortMatchmakingKnobsSpinnerButton_SetSpinnerOptionsVisiblity");
static_assert(sizeof(FortMatchmakingKnobsSpinnerButton_SetSpinnerOptionsVisiblity) == 0x000001, "Wrong size on FortMatchmakingKnobsSpinnerButton_SetSpinnerOptionsVisiblity");
static_assert(offsetof(FortMatchmakingKnobsSpinnerButton_SetSpinnerOptionsVisiblity, bVisible) == 0x000000, "Member 'FortMatchmakingKnobsSpinnerButton_SetSpinnerOptionsVisiblity::bVisible' has a wrong offset!");

// Function FortniteUI.FortMicIndicatorWidget.OnPlayerMicAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortMicIndicatorWidget_OnPlayerMicAvailable final
{
public:
	bool                                          bIsTalking;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMicIndicatorWidget_OnPlayerMicAvailable) == 0x000001, "Wrong alignment on FortMicIndicatorWidget_OnPlayerMicAvailable");
static_assert(sizeof(FortMicIndicatorWidget_OnPlayerMicAvailable) == 0x000001, "Wrong size on FortMicIndicatorWidget_OnPlayerMicAvailable");
static_assert(offsetof(FortMicIndicatorWidget_OnPlayerMicAvailable, bIsTalking) == 0x000000, "Member 'FortMicIndicatorWidget_OnPlayerMicAvailable::bIsTalking' has a wrong offset!");

// Function FortniteUI.FortMicIndicatorWidget.OnPlayerMuted
// 0x0001 (0x0001 - 0x0000)
struct FortMicIndicatorWidget_OnPlayerMuted final
{
public:
	bool                                          bIsMuted;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMicIndicatorWidget_OnPlayerMuted) == 0x000001, "Wrong alignment on FortMicIndicatorWidget_OnPlayerMuted");
static_assert(sizeof(FortMicIndicatorWidget_OnPlayerMuted) == 0x000001, "Wrong size on FortMicIndicatorWidget_OnPlayerMuted");
static_assert(offsetof(FortMicIndicatorWidget_OnPlayerMuted, bIsMuted) == 0x000000, "Member 'FortMicIndicatorWidget_OnPlayerMuted::bIsMuted' has a wrong offset!");

// Function FortniteUI.FortMicIndicatorWidget.OnPlayerTalkingChanged
// 0x0001 (0x0001 - 0x0000)
struct FortMicIndicatorWidget_OnPlayerTalkingChanged final
{
public:
	bool                                          bIsTalking;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMicIndicatorWidget_OnPlayerTalkingChanged) == 0x000001, "Wrong alignment on FortMicIndicatorWidget_OnPlayerTalkingChanged");
static_assert(sizeof(FortMicIndicatorWidget_OnPlayerTalkingChanged) == 0x000001, "Wrong size on FortMicIndicatorWidget_OnPlayerTalkingChanged");
static_assert(offsetof(FortMicIndicatorWidget_OnPlayerTalkingChanged, bIsTalking) == 0x000000, "Member 'FortMicIndicatorWidget_OnPlayerTalkingChanged::bIsTalking' has a wrong offset!");

// Function FortniteUI.FortMicIndicatorWidget.SetPlayerUniqueId
// 0x0028 (0x0028 - 0x0000)
struct FortMicIndicatorWidget_SetPlayerUniqueId final
{
public:
	struct FUniqueNetIdRepl                       InPlayerUniqueId;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMicIndicatorWidget_SetPlayerUniqueId) == 0x000008, "Wrong alignment on FortMicIndicatorWidget_SetPlayerUniqueId");
static_assert(sizeof(FortMicIndicatorWidget_SetPlayerUniqueId) == 0x000028, "Wrong size on FortMicIndicatorWidget_SetPlayerUniqueId");
static_assert(offsetof(FortMicIndicatorWidget_SetPlayerUniqueId, InPlayerUniqueId) == 0x000000, "Member 'FortMicIndicatorWidget_SetPlayerUniqueId::InPlayerUniqueId' has a wrong offset!");

// Function FortniteUI.FortMissedInvitesListEntry.HandleMenuAnchorOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct FortMissedInvitesListEntry_HandleMenuAnchorOpenChanged final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissedInvitesListEntry_HandleMenuAnchorOpenChanged) == 0x000001, "Wrong alignment on FortMissedInvitesListEntry_HandleMenuAnchorOpenChanged");
static_assert(sizeof(FortMissedInvitesListEntry_HandleMenuAnchorOpenChanged) == 0x000001, "Wrong size on FortMissedInvitesListEntry_HandleMenuAnchorOpenChanged");
static_assert(offsetof(FortMissedInvitesListEntry_HandleMenuAnchorOpenChanged, bIsOpen) == 0x000000, "Member 'FortMissedInvitesListEntry_HandleMenuAnchorOpenChanged::bIsOpen' has a wrong offset!");

// Function FortniteUI.FortMissionActivationWidgetPanel.OnActiveVoteChangedBP
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationWidgetPanel_OnActiveVoteChangedBP final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVoteActive;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoteResult;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetPanel_OnActiveVoteChangedBP) == 0x000004, "Wrong alignment on FortMissionActivationWidgetPanel_OnActiveVoteChangedBP");
static_assert(sizeof(FortMissionActivationWidgetPanel_OnActiveVoteChangedBP) == 0x000008, "Wrong size on FortMissionActivationWidgetPanel_OnActiveVoteChangedBP");
static_assert(offsetof(FortMissionActivationWidgetPanel_OnActiveVoteChangedBP, VoteType) == 0x000000, "Member 'FortMissionActivationWidgetPanel_OnActiveVoteChangedBP::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidgetPanel_OnActiveVoteChangedBP, bIsVoteActive) == 0x000001, "Member 'FortMissionActivationWidgetPanel_OnActiveVoteChangedBP::bIsVoteActive' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidgetPanel_OnActiveVoteChangedBP, VoteResult) == 0x000004, "Member 'FortMissionActivationWidgetPanel_OnActiveVoteChangedBP::VoteResult' has a wrong offset!");

// Function FortniteUI.FortMissionActivationWidgetPanel.OnMultiplayerChangedBP
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationWidgetPanel_OnMultiplayerChangedBP final
{
public:
	bool                                          bIsMultiplayer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetPanel_OnMultiplayerChangedBP) == 0x000001, "Wrong alignment on FortMissionActivationWidgetPanel_OnMultiplayerChangedBP");
static_assert(sizeof(FortMissionActivationWidgetPanel_OnMultiplayerChangedBP) == 0x000001, "Wrong size on FortMissionActivationWidgetPanel_OnMultiplayerChangedBP");
static_assert(offsetof(FortMissionActivationWidgetPanel_OnMultiplayerChangedBP, bIsMultiplayer) == 0x000000, "Member 'FortMissionActivationWidgetPanel_OnMultiplayerChangedBP::bIsMultiplayer' has a wrong offset!");

// Function FortniteUI.FortMissionActivationWidgetPanel.OnVoteLockoutChangedBP
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationWidgetPanel_OnVoteLockoutChangedBP final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocked;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetPanel_OnVoteLockoutChangedBP) == 0x000001, "Wrong alignment on FortMissionActivationWidgetPanel_OnVoteLockoutChangedBP");
static_assert(sizeof(FortMissionActivationWidgetPanel_OnVoteLockoutChangedBP) == 0x000002, "Wrong size on FortMissionActivationWidgetPanel_OnVoteLockoutChangedBP");
static_assert(offsetof(FortMissionActivationWidgetPanel_OnVoteLockoutChangedBP, VoteType) == 0x000000, "Member 'FortMissionActivationWidgetPanel_OnVoteLockoutChangedBP::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidgetPanel_OnVoteLockoutChangedBP, bIsLocked) == 0x000001, "Member 'FortMissionActivationWidgetPanel_OnVoteLockoutChangedBP::bIsLocked' has a wrong offset!");

// Function FortniteUI.FortMissionActivationWidgetPanel.OnVoteUpdatedBP
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationWidgetPanel_OnVoteUpdatedBP final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetPanel_OnVoteUpdatedBP) == 0x000001, "Wrong alignment on FortMissionActivationWidgetPanel_OnVoteUpdatedBP");
static_assert(sizeof(FortMissionActivationWidgetPanel_OnVoteUpdatedBP) == 0x000001, "Wrong size on FortMissionActivationWidgetPanel_OnVoteUpdatedBP");
static_assert(offsetof(FortMissionActivationWidgetPanel_OnVoteUpdatedBP, VoteType) == 0x000000, "Member 'FortMissionActivationWidgetPanel_OnVoteUpdatedBP::VoteType' has a wrong offset!");

// Function FortniteUI.FortMissionActivationWidgetPanel.SetInfoObject
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationWidgetPanel_SetInfoObject final
{
public:
	class UFortMissionActivationInfo*             NewInfoObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidgetPanel_SetInfoObject) == 0x000008, "Wrong alignment on FortMissionActivationWidgetPanel_SetInfoObject");
static_assert(sizeof(FortMissionActivationWidgetPanel_SetInfoObject) == 0x000008, "Wrong size on FortMissionActivationWidgetPanel_SetInfoObject");
static_assert(offsetof(FortMissionActivationWidgetPanel_SetInfoObject, NewInfoObject) == 0x000000, "Member 'FortMissionActivationWidgetPanel_SetInfoObject::NewInfoObject' has a wrong offset!");

// Function FortniteUI.WaxSquadInfoWidget.SetPlacement
// 0x0004 (0x0004 - 0x0000)
struct WaxSquadInfoWidget_SetPlacement final
{
public:
	int32                                         Placement;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxSquadInfoWidget_SetPlacement) == 0x000004, "Wrong alignment on WaxSquadInfoWidget_SetPlacement");
static_assert(sizeof(WaxSquadInfoWidget_SetPlacement) == 0x000004, "Wrong size on WaxSquadInfoWidget_SetPlacement");
static_assert(offsetof(WaxSquadInfoWidget_SetPlacement, Placement) == 0x000000, "Member 'WaxSquadInfoWidget_SetPlacement::Placement' has a wrong offset!");

// Function FortniteUI.WaxSquadInfoWidget.SetScore
// 0x0004 (0x0004 - 0x0000)
struct WaxSquadInfoWidget_SetScore final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxSquadInfoWidget_SetScore) == 0x000004, "Wrong alignment on WaxSquadInfoWidget_SetScore");
static_assert(sizeof(WaxSquadInfoWidget_SetScore) == 0x000004, "Wrong size on WaxSquadInfoWidget_SetScore");
static_assert(offsetof(WaxSquadInfoWidget_SetScore, Score) == 0x000000, "Member 'WaxSquadInfoWidget_SetScore::Score' has a wrong offset!");

// Function FortniteUI.FortMissionActivationWidget.OnActiveVoteChangedBP
// 0x0008 (0x0008 - 0x0000)
struct FortMissionActivationWidget_OnActiveVoteChangedBP final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVoteActive;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoteResult;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidget_OnActiveVoteChangedBP) == 0x000004, "Wrong alignment on FortMissionActivationWidget_OnActiveVoteChangedBP");
static_assert(sizeof(FortMissionActivationWidget_OnActiveVoteChangedBP) == 0x000008, "Wrong size on FortMissionActivationWidget_OnActiveVoteChangedBP");
static_assert(offsetof(FortMissionActivationWidget_OnActiveVoteChangedBP, VoteType) == 0x000000, "Member 'FortMissionActivationWidget_OnActiveVoteChangedBP::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidget_OnActiveVoteChangedBP, bIsVoteActive) == 0x000001, "Member 'FortMissionActivationWidget_OnActiveVoteChangedBP::bIsVoteActive' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidget_OnActiveVoteChangedBP, VoteResult) == 0x000004, "Member 'FortMissionActivationWidget_OnActiveVoteChangedBP::VoteResult' has a wrong offset!");

// Function FortniteUI.FortMissionActivationWidget.OnMultiplayerChangedBP
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationWidget_OnMultiplayerChangedBP final
{
public:
	bool                                          bIsMultiplayer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidget_OnMultiplayerChangedBP) == 0x000001, "Wrong alignment on FortMissionActivationWidget_OnMultiplayerChangedBP");
static_assert(sizeof(FortMissionActivationWidget_OnMultiplayerChangedBP) == 0x000001, "Wrong size on FortMissionActivationWidget_OnMultiplayerChangedBP");
static_assert(offsetof(FortMissionActivationWidget_OnMultiplayerChangedBP, bIsMultiplayer) == 0x000000, "Member 'FortMissionActivationWidget_OnMultiplayerChangedBP::bIsMultiplayer' has a wrong offset!");

// Function FortniteUI.FortMissionActivationWidget.OnStateUpdated
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationWidget_OnStateUpdated final
{
public:
	EFortMissionActivationWidgetState             ActiveState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMissionActivationWidgetState             PreviousState;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidget_OnStateUpdated) == 0x000001, "Wrong alignment on FortMissionActivationWidget_OnStateUpdated");
static_assert(sizeof(FortMissionActivationWidget_OnStateUpdated) == 0x000002, "Wrong size on FortMissionActivationWidget_OnStateUpdated");
static_assert(offsetof(FortMissionActivationWidget_OnStateUpdated, ActiveState) == 0x000000, "Member 'FortMissionActivationWidget_OnStateUpdated::ActiveState' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidget_OnStateUpdated, PreviousState) == 0x000001, "Member 'FortMissionActivationWidget_OnStateUpdated::PreviousState' has a wrong offset!");

// Function FortniteUI.FortMissionActivationWidget.OnVoteLockoutChangedBP
// 0x0002 (0x0002 - 0x0000)
struct FortMissionActivationWidget_OnVoteLockoutChangedBP final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocked;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidget_OnVoteLockoutChangedBP) == 0x000001, "Wrong alignment on FortMissionActivationWidget_OnVoteLockoutChangedBP");
static_assert(sizeof(FortMissionActivationWidget_OnVoteLockoutChangedBP) == 0x000002, "Wrong size on FortMissionActivationWidget_OnVoteLockoutChangedBP");
static_assert(offsetof(FortMissionActivationWidget_OnVoteLockoutChangedBP, VoteType) == 0x000000, "Member 'FortMissionActivationWidget_OnVoteLockoutChangedBP::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionActivationWidget_OnVoteLockoutChangedBP, bIsLocked) == 0x000001, "Member 'FortMissionActivationWidget_OnVoteLockoutChangedBP::bIsLocked' has a wrong offset!");

// Function FortniteUI.FortMissionActivationWidget.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct FortMissionActivationWidget_GetCurrentState final
{
public:
	EFortMissionActivationWidgetState             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionActivationWidget_GetCurrentState) == 0x000001, "Wrong alignment on FortMissionActivationWidget_GetCurrentState");
static_assert(sizeof(FortMissionActivationWidget_GetCurrentState) == 0x000001, "Wrong size on FortMissionActivationWidget_GetCurrentState");
static_assert(offsetof(FortMissionActivationWidget_GetCurrentState, ReturnValue) == 0x000000, "Member 'FortMissionActivationWidget_GetCurrentState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionSelect.CanCaptureAcceptInput
// 0x0001 (0x0001 - 0x0000)
struct FortMissionSelect_CanCaptureAcceptInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionSelect_CanCaptureAcceptInput) == 0x000001, "Wrong alignment on FortMissionSelect_CanCaptureAcceptInput");
static_assert(sizeof(FortMissionSelect_CanCaptureAcceptInput) == 0x000001, "Wrong size on FortMissionSelect_CanCaptureAcceptInput");
static_assert(offsetof(FortMissionSelect_CanCaptureAcceptInput, ReturnValue) == 0x000000, "Member 'FortMissionSelect_CanCaptureAcceptInput::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionSelect.NavigateMissionTiles
// 0x0002 (0x0002 - 0x0000)
struct FortMissionSelect_NavigateMissionTiles final
{
public:
	EUINavigation                                 Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionSelect_NavigateMissionTiles) == 0x000001, "Wrong alignment on FortMissionSelect_NavigateMissionTiles");
static_assert(sizeof(FortMissionSelect_NavigateMissionTiles) == 0x000002, "Wrong size on FortMissionSelect_NavigateMissionTiles");
static_assert(offsetof(FortMissionSelect_NavigateMissionTiles, Direction) == 0x000000, "Member 'FortMissionSelect_NavigateMissionTiles::Direction' has a wrong offset!");
static_assert(offsetof(FortMissionSelect_NavigateMissionTiles, ReturnValue) == 0x000001, "Member 'FortMissionSelect_NavigateMissionTiles::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionTrackerList.HandleSizeEstimateChanged
// 0x0008 (0x0008 - 0x0000)
struct FortMissionTrackerList_HandleSizeEstimateChanged final
{
public:
	class UObject*                                ChangedElement;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTrackerList_HandleSizeEstimateChanged) == 0x000008, "Wrong alignment on FortMissionTrackerList_HandleSizeEstimateChanged");
static_assert(sizeof(FortMissionTrackerList_HandleSizeEstimateChanged) == 0x000008, "Wrong size on FortMissionTrackerList_HandleSizeEstimateChanged");
static_assert(offsetof(FortMissionTrackerList_HandleSizeEstimateChanged, ChangedElement) == 0x000000, "Member 'FortMissionTrackerList_HandleSizeEstimateChanged::ChangedElement' has a wrong offset!");

// Function FortniteUI.FortMissionVoteHUDElementWidget.GetVoteTimeRemaining
// 0x0008 (0x0008 - 0x0000)
struct FortMissionVoteHUDElementWidget_GetVoteTimeRemaining final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionVoteHUDElementWidget_GetVoteTimeRemaining) == 0x000004, "Wrong alignment on FortMissionVoteHUDElementWidget_GetVoteTimeRemaining");
static_assert(sizeof(FortMissionVoteHUDElementWidget_GetVoteTimeRemaining) == 0x000008, "Wrong size on FortMissionVoteHUDElementWidget_GetVoteTimeRemaining");
static_assert(offsetof(FortMissionVoteHUDElementWidget_GetVoteTimeRemaining, VoteType) == 0x000000, "Member 'FortMissionVoteHUDElementWidget_GetVoteTimeRemaining::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_GetVoteTimeRemaining, ReturnValue) == 0x000004, "Member 'FortMissionVoteHUDElementWidget_GetVoteTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionVoteHUDElementWidget.HandleDifficultyIncreaseVoteUpdate
// 0x0018 (0x0018 - 0x0000)
struct FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteStatus                               VoteStatus;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoteResult;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoter>                         Voters;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate) == 0x000008, "Wrong alignment on FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate");
static_assert(sizeof(FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate) == 0x000018, "Wrong size on FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate");
static_assert(offsetof(FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate, VoteType) == 0x000000, "Member 'FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate, VoteStatus) == 0x000001, "Member 'FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate::VoteStatus' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate, VoteResult) == 0x000004, "Member 'FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate::VoteResult' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate, Voters) == 0x000008, "Member 'FortMissionVoteHUDElementWidget_HandleDifficultyIncreaseVoteUpdate::Voters' has a wrong offset!");

// Function FortniteUI.FortMissionVoteHUDElementWidget.HandleMissionActivationVoteUpdate
// 0x0018 (0x0018 - 0x0000)
struct FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteStatus                               VoteStatus;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoteResult;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoter>                         Voters;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate) == 0x000008, "Wrong alignment on FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate");
static_assert(sizeof(FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate) == 0x000018, "Wrong size on FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate");
static_assert(offsetof(FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate, VoteType) == 0x000000, "Member 'FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate, VoteStatus) == 0x000001, "Member 'FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate::VoteStatus' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate, VoteResult) == 0x000004, "Member 'FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate::VoteResult' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate, Voters) == 0x000008, "Member 'FortMissionVoteHUDElementWidget_HandleMissionActivationVoteUpdate::Voters' has a wrong offset!");

// Function FortniteUI.FortMissionVoteHUDElementWidget.HasLocalPlayerVoted
// 0x0002 (0x0002 - 0x0000)
struct FortMissionVoteHUDElementWidget_HasLocalPlayerVoted final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionVoteHUDElementWidget_HasLocalPlayerVoted) == 0x000001, "Wrong alignment on FortMissionVoteHUDElementWidget_HasLocalPlayerVoted");
static_assert(sizeof(FortMissionVoteHUDElementWidget_HasLocalPlayerVoted) == 0x000002, "Wrong size on FortMissionVoteHUDElementWidget_HasLocalPlayerVoted");
static_assert(offsetof(FortMissionVoteHUDElementWidget_HasLocalPlayerVoted, VoteType) == 0x000000, "Member 'FortMissionVoteHUDElementWidget_HasLocalPlayerVoted::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_HasLocalPlayerVoted, ReturnValue) == 0x000001, "Member 'FortMissionVoteHUDElementWidget_HasLocalPlayerVoted::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionVoteHUDElementWidget.IsMultiplayerVote
// 0x0002 (0x0002 - 0x0000)
struct FortMissionVoteHUDElementWidget_IsMultiplayerVote final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionVoteHUDElementWidget_IsMultiplayerVote) == 0x000001, "Wrong alignment on FortMissionVoteHUDElementWidget_IsMultiplayerVote");
static_assert(sizeof(FortMissionVoteHUDElementWidget_IsMultiplayerVote) == 0x000002, "Wrong size on FortMissionVoteHUDElementWidget_IsMultiplayerVote");
static_assert(offsetof(FortMissionVoteHUDElementWidget_IsMultiplayerVote, VoteType) == 0x000000, "Member 'FortMissionVoteHUDElementWidget_IsMultiplayerVote::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_IsMultiplayerVote, ReturnValue) == 0x000001, "Member 'FortMissionVoteHUDElementWidget_IsMultiplayerVote::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMissionVoteHUDElementWidget.OnVoteEnded
// 0x0003 (0x0003 - 0x0000)
struct FortMissionVoteHUDElementWidget_OnVoteEnded final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteArbitratorType                       ArbitratorType;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VoteSucceeded;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionVoteHUDElementWidget_OnVoteEnded) == 0x000001, "Wrong alignment on FortMissionVoteHUDElementWidget_OnVoteEnded");
static_assert(sizeof(FortMissionVoteHUDElementWidget_OnVoteEnded) == 0x000003, "Wrong size on FortMissionVoteHUDElementWidget_OnVoteEnded");
static_assert(offsetof(FortMissionVoteHUDElementWidget_OnVoteEnded, VoteType) == 0x000000, "Member 'FortMissionVoteHUDElementWidget_OnVoteEnded::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_OnVoteEnded, ArbitratorType) == 0x000001, "Member 'FortMissionVoteHUDElementWidget_OnVoteEnded::ArbitratorType' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_OnVoteEnded, VoteSucceeded) == 0x000002, "Member 'FortMissionVoteHUDElementWidget_OnVoteEnded::VoteSucceeded' has a wrong offset!");

// Function FortniteUI.FortMissionVoteHUDElementWidget.OnVoteStarted
// 0x000C (0x000C - 0x0000)
struct FortMissionVoteHUDElementWidget_OnVoteStarted final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteArbitratorType                       ArbitratorType;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         YesVoteCount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoVoteCount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionVoteHUDElementWidget_OnVoteStarted) == 0x000004, "Wrong alignment on FortMissionVoteHUDElementWidget_OnVoteStarted");
static_assert(sizeof(FortMissionVoteHUDElementWidget_OnVoteStarted) == 0x00000C, "Wrong size on FortMissionVoteHUDElementWidget_OnVoteStarted");
static_assert(offsetof(FortMissionVoteHUDElementWidget_OnVoteStarted, VoteType) == 0x000000, "Member 'FortMissionVoteHUDElementWidget_OnVoteStarted::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_OnVoteStarted, ArbitratorType) == 0x000001, "Member 'FortMissionVoteHUDElementWidget_OnVoteStarted::ArbitratorType' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_OnVoteStarted, YesVoteCount) == 0x000004, "Member 'FortMissionVoteHUDElementWidget_OnVoteStarted::YesVoteCount' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_OnVoteStarted, NoVoteCount) == 0x000008, "Member 'FortMissionVoteHUDElementWidget_OnVoteStarted::NoVoteCount' has a wrong offset!");

// Function FortniteUI.FortMissionVoteHUDElementWidget.OnVoteUpdated
// 0x000C (0x000C - 0x0000)
struct FortMissionVoteHUDElementWidget_OnVoteUpdated final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         YesVoteCount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoVoteCount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionVoteHUDElementWidget_OnVoteUpdated) == 0x000004, "Wrong alignment on FortMissionVoteHUDElementWidget_OnVoteUpdated");
static_assert(sizeof(FortMissionVoteHUDElementWidget_OnVoteUpdated) == 0x00000C, "Wrong size on FortMissionVoteHUDElementWidget_OnVoteUpdated");
static_assert(offsetof(FortMissionVoteHUDElementWidget_OnVoteUpdated, VoteType) == 0x000000, "Member 'FortMissionVoteHUDElementWidget_OnVoteUpdated::VoteType' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_OnVoteUpdated, YesVoteCount) == 0x000004, "Member 'FortMissionVoteHUDElementWidget_OnVoteUpdated::YesVoteCount' has a wrong offset!");
static_assert(offsetof(FortMissionVoteHUDElementWidget_OnVoteUpdated, NoVoteCount) == 0x000008, "Member 'FortMissionVoteHUDElementWidget_OnVoteUpdated::NoVoteCount' has a wrong offset!");

// Function FortniteUI.FortMissionVoteHUDElementWidget.RegisterFailsafeForVoteType
// 0x0001 (0x0001 - 0x0000)
struct FortMissionVoteHUDElementWidget_RegisterFailsafeForVoteType final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionVoteHUDElementWidget_RegisterFailsafeForVoteType) == 0x000001, "Wrong alignment on FortMissionVoteHUDElementWidget_RegisterFailsafeForVoteType");
static_assert(sizeof(FortMissionVoteHUDElementWidget_RegisterFailsafeForVoteType) == 0x000001, "Wrong size on FortMissionVoteHUDElementWidget_RegisterFailsafeForVoteType");
static_assert(offsetof(FortMissionVoteHUDElementWidget_RegisterFailsafeForVoteType, VoteType) == 0x000000, "Member 'FortMissionVoteHUDElementWidget_RegisterFailsafeForVoteType::VoteType' has a wrong offset!");

// Function FortniteUI.FortUIDataConfiguration.GetDefenderSubtypeIconMultiSizeBrushByTag
// 0x0010 (0x0010 - 0x0000)
struct FortUIDataConfiguration_GetDefenderSubtypeIconMultiSizeBrushByTag final
{
public:
	struct FGameplayTag                           DefenderSubtypeTag;                                // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMultiSizeBrushAsset*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIDataConfiguration_GetDefenderSubtypeIconMultiSizeBrushByTag) == 0x000008, "Wrong alignment on FortUIDataConfiguration_GetDefenderSubtypeIconMultiSizeBrushByTag");
static_assert(sizeof(FortUIDataConfiguration_GetDefenderSubtypeIconMultiSizeBrushByTag) == 0x000010, "Wrong size on FortUIDataConfiguration_GetDefenderSubtypeIconMultiSizeBrushByTag");
static_assert(offsetof(FortUIDataConfiguration_GetDefenderSubtypeIconMultiSizeBrushByTag, DefenderSubtypeTag) == 0x000000, "Member 'FortUIDataConfiguration_GetDefenderSubtypeIconMultiSizeBrushByTag::DefenderSubtypeTag' has a wrong offset!");
static_assert(offsetof(FortUIDataConfiguration_GetDefenderSubtypeIconMultiSizeBrushByTag, ReturnValue) == 0x000008, "Member 'FortUIDataConfiguration_GetDefenderSubtypeIconMultiSizeBrushByTag::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadLandingPageDefenderSummary.HandleAddDefenderSquadDetailsBP
// 0x0030 (0x0030 - 0x0000)
struct FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP final
{
public:
	struct FFortLandingPageDefenderSummaryInfo    DefenderSummaryInfo;                               // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP) == 0x000008, "Wrong alignment on FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP");
static_assert(sizeof(FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP) == 0x000030, "Wrong size on FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP");
static_assert(offsetof(FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP, DefenderSummaryInfo) == 0x000000, "Member 'FortSquadLandingPageDefenderSummary_HandleAddDefenderSquadDetailsBP::DefenderSummaryInfo' has a wrong offset!");

// Function FortniteUI.FortSquadLandingPageDefenderSummary.HandleAddLockedDefenderSquadDetailsBP
// 0x0030 (0x0030 - 0x0000)
struct FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP final
{
public:
	struct FFortLandingPageDefenderSummaryInfo    DefenderSummaryInfo;                               // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP) == 0x000008, "Wrong alignment on FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP");
static_assert(sizeof(FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP) == 0x000030, "Wrong size on FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP");
static_assert(offsetof(FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP, DefenderSummaryInfo) == 0x000000, "Member 'FortSquadLandingPageDefenderSummary_HandleAddLockedDefenderSquadDetailsBP::DefenderSummaryInfo' has a wrong offset!");

// Function FortniteUI.FortMovieWidget.MediaDimensionsUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortMovieWidget_MediaDimensionsUpdated final
{
public:
	float                                         NewWidth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewHeight;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovieWidget_MediaDimensionsUpdated) == 0x000004, "Wrong alignment on FortMovieWidget_MediaDimensionsUpdated");
static_assert(sizeof(FortMovieWidget_MediaDimensionsUpdated) == 0x000008, "Wrong size on FortMovieWidget_MediaDimensionsUpdated");
static_assert(offsetof(FortMovieWidget_MediaDimensionsUpdated, NewWidth) == 0x000000, "Member 'FortMovieWidget_MediaDimensionsUpdated::NewWidth' has a wrong offset!");
static_assert(offsetof(FortMovieWidget_MediaDimensionsUpdated, NewHeight) == 0x000004, "Member 'FortMovieWidget_MediaDimensionsUpdated::NewHeight' has a wrong offset!");

// Function FortniteUI.FortMovieWidget.RequestPlayMovie
// 0x0001 (0x0001 - 0x0000)
struct FortMovieWidget_RequestPlayMovie final
{
public:
	bool                                          bShouldRewind;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovieWidget_RequestPlayMovie) == 0x000001, "Wrong alignment on FortMovieWidget_RequestPlayMovie");
static_assert(sizeof(FortMovieWidget_RequestPlayMovie) == 0x000001, "Wrong size on FortMovieWidget_RequestPlayMovie");
static_assert(offsetof(FortMovieWidget_RequestPlayMovie, bShouldRewind) == 0x000000, "Member 'FortMovieWidget_RequestPlayMovie::bShouldRewind' has a wrong offset!");

// Function FortniteUI.FortMovieWidget.SetMediaSource
// 0x0048 (0x0048 - 0x0000)
struct FortMovieWidget_SetMediaSource final
{
public:
	class UMediaPlayer*                           InMediaPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSource*                           InMediaSource;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMediaPlayerOptions                    PlayerOptions;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPlayOnOpen;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0042(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMovieWidget_SetMediaSource) == 0x000008, "Wrong alignment on FortMovieWidget_SetMediaSource");
static_assert(sizeof(FortMovieWidget_SetMediaSource) == 0x000048, "Wrong size on FortMovieWidget_SetMediaSource");
static_assert(offsetof(FortMovieWidget_SetMediaSource, InMediaPlayer) == 0x000000, "Member 'FortMovieWidget_SetMediaSource::InMediaPlayer' has a wrong offset!");
static_assert(offsetof(FortMovieWidget_SetMediaSource, InMediaSource) == 0x000008, "Member 'FortMovieWidget_SetMediaSource::InMediaSource' has a wrong offset!");
static_assert(offsetof(FortMovieWidget_SetMediaSource, PlayerOptions) == 0x000010, "Member 'FortMovieWidget_SetMediaSource::PlayerOptions' has a wrong offset!");
static_assert(offsetof(FortMovieWidget_SetMediaSource, bPlayOnOpen) == 0x000040, "Member 'FortMovieWidget_SetMediaSource::bPlayOnOpen' has a wrong offset!");
static_assert(offsetof(FortMovieWidget_SetMediaSource, bLooping) == 0x000041, "Member 'FortMovieWidget_SetMediaSource::bLooping' has a wrong offset!");
static_assert(offsetof(FortMovieWidget_SetMediaSource, ReturnValue) == 0x000042, "Member 'FortMovieWidget_SetMediaSource::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMovieWidget.GetMediaPlayer
// 0x0008 (0x0008 - 0x0000)
struct FortMovieWidget_GetMediaPlayer final
{
public:
	class UMediaPlayer*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovieWidget_GetMediaPlayer) == 0x000008, "Wrong alignment on FortMovieWidget_GetMediaPlayer");
static_assert(sizeof(FortMovieWidget_GetMediaPlayer) == 0x000008, "Wrong size on FortMovieWidget_GetMediaPlayer");
static_assert(offsetof(FortMovieWidget_GetMediaPlayer, ReturnValue) == 0x000000, "Member 'FortMovieWidget_GetMediaPlayer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMovieWidget.GetMediaSoundComponent
// 0x0008 (0x0008 - 0x0000)
struct FortMovieWidget_GetMediaSoundComponent final
{
public:
	class UMediaSoundComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovieWidget_GetMediaSoundComponent) == 0x000008, "Wrong alignment on FortMovieWidget_GetMediaSoundComponent");
static_assert(sizeof(FortMovieWidget_GetMediaSoundComponent) == 0x000008, "Wrong size on FortMovieWidget_GetMediaSoundComponent");
static_assert(offsetof(FortMovieWidget_GetMediaSoundComponent, ReturnValue) == 0x000000, "Member 'FortMovieWidget_GetMediaSoundComponent::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMovieWidget.GetMediaTexture
// 0x0008 (0x0008 - 0x0000)
struct FortMovieWidget_GetMediaTexture final
{
public:
	class UMediaTexture*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovieWidget_GetMediaTexture) == 0x000008, "Wrong alignment on FortMovieWidget_GetMediaTexture");
static_assert(sizeof(FortMovieWidget_GetMediaTexture) == 0x000008, "Wrong size on FortMovieWidget_GetMediaTexture");
static_assert(offsetof(FortMovieWidget_GetMediaTexture, ReturnValue) == 0x000000, "Member 'FortMovieWidget_GetMediaTexture::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMovieWidget.HasPlayerForSource
// 0x0010 (0x0010 - 0x0000)
struct FortMovieWidget_HasPlayerForSource final
{
public:
	class UMediaSource*                           InMediaSource;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMovieWidget_HasPlayerForSource) == 0x000008, "Wrong alignment on FortMovieWidget_HasPlayerForSource");
static_assert(sizeof(FortMovieWidget_HasPlayerForSource) == 0x000010, "Wrong size on FortMovieWidget_HasPlayerForSource");
static_assert(offsetof(FortMovieWidget_HasPlayerForSource, InMediaSource) == 0x000000, "Member 'FortMovieWidget_HasPlayerForSource::InMediaSource' has a wrong offset!");
static_assert(offsetof(FortMovieWidget_HasPlayerForSource, ReturnValue) == 0x000008, "Member 'FortMovieWidget_HasPlayerForSource::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMovieWidget.ReportVideoStreamingError
// 0x0018 (0x0018 - 0x0000)
struct FortMovieWidget_ReportVideoStreamingError final
{
public:
	bool                                          bLocalContentFallback;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastError;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovieWidget_ReportVideoStreamingError) == 0x000008, "Wrong alignment on FortMovieWidget_ReportVideoStreamingError");
static_assert(sizeof(FortMovieWidget_ReportVideoStreamingError) == 0x000018, "Wrong size on FortMovieWidget_ReportVideoStreamingError");
static_assert(offsetof(FortMovieWidget_ReportVideoStreamingError, bLocalContentFallback) == 0x000000, "Member 'FortMovieWidget_ReportVideoStreamingError::bLocalContentFallback' has a wrong offset!");
static_assert(offsetof(FortMovieWidget_ReportVideoStreamingError, LastError) == 0x000008, "Member 'FortMovieWidget_ReportVideoStreamingError::LastError' has a wrong offset!");

// Function FortniteUI.FortMTXButton.HandleLocalAcountInfoChanged
// 0x0038 (0x0038 - 0x0000)
struct FortMTXButton_HandleLocalAcountInfoChanged final
{
public:
	struct FFortPrivateAccountInfo                NewInfo;                                           // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMTXButton_HandleLocalAcountInfoChanged) == 0x000004, "Wrong alignment on FortMTXButton_HandleLocalAcountInfoChanged");
static_assert(sizeof(FortMTXButton_HandleLocalAcountInfoChanged) == 0x000038, "Wrong size on FortMTXButton_HandleLocalAcountInfoChanged");
static_assert(offsetof(FortMTXButton_HandleLocalAcountInfoChanged, NewInfo) == 0x000000, "Member 'FortMTXButton_HandleLocalAcountInfoChanged::NewInfo' has a wrong offset!");

// Function FortniteUI.FortSquadSlotDetailsPanel.SetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP, SquadSlotIndex) == 0x000008, "Member 'FortSquadSlotDetailsPanel_SetIdOfSquadSlotToManageBP::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotDetailsPanel.GetIdOfSquadSlotToManageBP
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP final
{
public:
	class FName                                   OutSquadId;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP");
static_assert(sizeof(FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP) == 0x00000C, "Wrong size on FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP");
static_assert(offsetof(FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP, OutSquadId) == 0x000000, "Member 'FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP, OutSquadSlotIndex) == 0x000008, "Member 'FortSquadSlotDetailsPanel_GetIdOfSquadSlotToManageBP::OutSquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotDetailsPanel.GetItemInSquadSlotBP
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotDetailsPanel_GetItemInSquadSlotBP final
{
public:
	const class ULocalPlayer*                     LocalPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotDetailsPanel_GetItemInSquadSlotBP) == 0x000008, "Wrong alignment on FortSquadSlotDetailsPanel_GetItemInSquadSlotBP");
static_assert(sizeof(FortSquadSlotDetailsPanel_GetItemInSquadSlotBP) == 0x000010, "Wrong size on FortSquadSlotDetailsPanel_GetItemInSquadSlotBP");
static_assert(offsetof(FortSquadSlotDetailsPanel_GetItemInSquadSlotBP, LocalPlayer) == 0x000000, "Member 'FortSquadSlotDetailsPanel_GetItemInSquadSlotBP::LocalPlayer' has a wrong offset!");
static_assert(offsetof(FortSquadSlotDetailsPanel_GetItemInSquadSlotBP, ReturnValue) == 0x000008, "Member 'FortSquadSlotDetailsPanel_GetItemInSquadSlotBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotDetailsPanel.GetSlottingRestrictionReasons
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons final
{
public:
	TArray<EFortSquadSlottingRestrictionReason>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons) == 0x000008, "Wrong alignment on FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons");
static_assert(sizeof(FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons) == 0x000010, "Wrong size on FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons");
static_assert(offsetof(FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons, ReturnValue) == 0x000000, "Member 'FortSquadSlotDetailsPanel_GetSlottingRestrictionReasons::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotDetailsPanel.IsSquadSlotLockedBP
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotDetailsPanel_IsSquadSlotLockedBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotDetailsPanel_IsSquadSlotLockedBP) == 0x000001, "Wrong alignment on FortSquadSlotDetailsPanel_IsSquadSlotLockedBP");
static_assert(sizeof(FortSquadSlotDetailsPanel_IsSquadSlotLockedBP) == 0x000001, "Wrong size on FortSquadSlotDetailsPanel_IsSquadSlotLockedBP");
static_assert(offsetof(FortSquadSlotDetailsPanel_IsSquadSlotLockedBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotDetailsPanel_IsSquadSlotLockedBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotDetailsPanel.TryGetItemToPreviewInSlot
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot final
{
public:
	class UFortItem*                              OutItemToPreviewInSlot;                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot) == 0x000008, "Wrong alignment on FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot");
static_assert(sizeof(FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot) == 0x000010, "Wrong size on FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot");
static_assert(offsetof(FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot, OutItemToPreviewInSlot) == 0x000000, "Member 'FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot::OutItemToPreviewInSlot' has a wrong offset!");
static_assert(offsetof(FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot, ReturnValue) == 0x000008, "Member 'FortSquadSlotDetailsPanel_TryGetItemToPreviewInSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.IconTextButtonSpectatorBase.SetText
// 0x0018 (0x0018 - 0x0000)
struct IconTextButtonSpectatorBase_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IconTextButtonSpectatorBase_SetText) == 0x000008, "Wrong alignment on IconTextButtonSpectatorBase_SetText");
static_assert(sizeof(IconTextButtonSpectatorBase_SetText) == 0x000018, "Wrong size on IconTextButtonSpectatorBase_SetText");
static_assert(offsetof(IconTextButtonSpectatorBase_SetText, Text) == 0x000000, "Member 'IconTextButtonSpectatorBase_SetText::Text' has a wrong offset!");

// Function FortniteUI.FortMulchItemTileButton.HandleItemChanged_BP
// 0x0008 (0x0008 - 0x0000)
struct FortMulchItemTileButton_HandleItemChanged_BP final
{
public:
	class UFortItem*                              NewItem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMulchItemTileButton_HandleItemChanged_BP) == 0x000008, "Wrong alignment on FortMulchItemTileButton_HandleItemChanged_BP");
static_assert(sizeof(FortMulchItemTileButton_HandleItemChanged_BP) == 0x000008, "Wrong size on FortMulchItemTileButton_HandleItemChanged_BP");
static_assert(offsetof(FortMulchItemTileButton_HandleItemChanged_BP, NewItem) == 0x000000, "Member 'FortMulchItemTileButton_HandleItemChanged_BP::NewItem' has a wrong offset!");

// Function FortniteUI.FortMulchConfirmationModalWidget.GetMulchWarnings
// 0x0050 (0x0050 - 0x0000)
struct FortMulchConfirmationModalWidget_GetMulchWarnings final
{
public:
	TMap<EItemRecyclingWarning, int32>            ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMulchConfirmationModalWidget_GetMulchWarnings) == 0x000008, "Wrong alignment on FortMulchConfirmationModalWidget_GetMulchWarnings");
static_assert(sizeof(FortMulchConfirmationModalWidget_GetMulchWarnings) == 0x000050, "Wrong size on FortMulchConfirmationModalWidget_GetMulchWarnings");
static_assert(offsetof(FortMulchConfirmationModalWidget_GetMulchWarnings, ReturnValue) == 0x000000, "Member 'FortMulchConfirmationModalWidget_GetMulchWarnings::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMultiFactorAuthWidget.HandleTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortMultiFactorAuthWidget_HandleTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMultiFactorAuthWidget_HandleTextCommitted) == 0x000008, "Wrong alignment on FortMultiFactorAuthWidget_HandleTextCommitted");
static_assert(sizeof(FortMultiFactorAuthWidget_HandleTextCommitted) == 0x000020, "Wrong size on FortMultiFactorAuthWidget_HandleTextCommitted");
static_assert(offsetof(FortMultiFactorAuthWidget_HandleTextCommitted, Text) == 0x000000, "Member 'FortMultiFactorAuthWidget_HandleTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(FortMultiFactorAuthWidget_HandleTextCommitted, CommitMethod) == 0x000018, "Member 'FortMultiFactorAuthWidget_HandleTextCommitted::CommitMethod' has a wrong offset!");

// Function FortniteUI.FortMultiSizeItemCard.ShouldUseNewItemCards
// 0x0001 (0x0001 - 0x0000)
struct FortMultiSizeItemCard_ShouldUseNewItemCards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeItemCard_ShouldUseNewItemCards) == 0x000001, "Wrong alignment on FortMultiSizeItemCard_ShouldUseNewItemCards");
static_assert(sizeof(FortMultiSizeItemCard_ShouldUseNewItemCards) == 0x000001, "Wrong size on FortMultiSizeItemCard_ShouldUseNewItemCards");
static_assert(offsetof(FortMultiSizeItemCard_ShouldUseNewItemCards, ReturnValue) == 0x000000, "Member 'FortMultiSizeItemCard_ShouldUseNewItemCards::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortMultiSizeItemCard.SetCardSize
// 0x0001 (0x0001 - 0x0000)
struct FortMultiSizeItemCard_SetCardSize final
{
public:
	EFortItemCardSize                             CardSize;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeItemCard_SetCardSize) == 0x000001, "Wrong alignment on FortMultiSizeItemCard_SetCardSize");
static_assert(sizeof(FortMultiSizeItemCard_SetCardSize) == 0x000001, "Wrong size on FortMultiSizeItemCard_SetCardSize");
static_assert(offsetof(FortMultiSizeItemCard_SetCardSize, CardSize) == 0x000000, "Member 'FortMultiSizeItemCard_SetCardSize::CardSize' has a wrong offset!");

// Function FortniteUI.FortMultiSizeItemCard.SetEmptyItemType
// 0x0001 (0x0001 - 0x0000)
struct FortMultiSizeItemCard_SetEmptyItemType final
{
public:
	EFortItemType                                 NewEmptyItemType;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeItemCard_SetEmptyItemType) == 0x000001, "Wrong alignment on FortMultiSizeItemCard_SetEmptyItemType");
static_assert(sizeof(FortMultiSizeItemCard_SetEmptyItemType) == 0x000001, "Wrong size on FortMultiSizeItemCard_SetEmptyItemType");
static_assert(offsetof(FortMultiSizeItemCard_SetEmptyItemType, NewEmptyItemType) == 0x000000, "Member 'FortMultiSizeItemCard_SetEmptyItemType::NewEmptyItemType' has a wrong offset!");

// Function FortniteUI.FortMultiSizeItemCard.SetQuantityOverride
// 0x0004 (0x0004 - 0x0000)
struct FortMultiSizeItemCard_SetQuantityOverride final
{
public:
	int32                                         Param_QuantityOverride;                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeItemCard_SetQuantityOverride) == 0x000004, "Wrong alignment on FortMultiSizeItemCard_SetQuantityOverride");
static_assert(sizeof(FortMultiSizeItemCard_SetQuantityOverride) == 0x000004, "Wrong size on FortMultiSizeItemCard_SetQuantityOverride");
static_assert(offsetof(FortMultiSizeItemCard_SetQuantityOverride, Param_QuantityOverride) == 0x000000, "Member 'FortMultiSizeItemCard_SetQuantityOverride::Param_QuantityOverride' has a wrong offset!");

// Function FortniteUI.FortMultiSizeItemCard.SetRarityOverride
// 0x0001 (0x0001 - 0x0000)
struct FortMultiSizeItemCard_SetRarityOverride final
{
public:
	EFortRarity                                   Param_RarityOverride;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeItemCard_SetRarityOverride) == 0x000001, "Wrong alignment on FortMultiSizeItemCard_SetRarityOverride");
static_assert(sizeof(FortMultiSizeItemCard_SetRarityOverride) == 0x000001, "Wrong size on FortMultiSizeItemCard_SetRarityOverride");
static_assert(offsetof(FortMultiSizeItemCard_SetRarityOverride, Param_RarityOverride) == 0x000000, "Member 'FortMultiSizeItemCard_SetRarityOverride::Param_RarityOverride' has a wrong offset!");

// Function FortniteUI.FortMultiSizeItemCard.SetShouldCollapseBorderPadding
// 0x0001 (0x0001 - 0x0000)
struct FortMultiSizeItemCard_SetShouldCollapseBorderPadding final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeItemCard_SetShouldCollapseBorderPadding) == 0x000001, "Wrong alignment on FortMultiSizeItemCard_SetShouldCollapseBorderPadding");
static_assert(sizeof(FortMultiSizeItemCard_SetShouldCollapseBorderPadding) == 0x000001, "Wrong size on FortMultiSizeItemCard_SetShouldCollapseBorderPadding");
static_assert(offsetof(FortMultiSizeItemCard_SetShouldCollapseBorderPadding, Value) == 0x000000, "Member 'FortMultiSizeItemCard_SetShouldCollapseBorderPadding::Value' has a wrong offset!");

// Function FortniteUI.FortMultiSizeItemCard.SetShouldCollapseItem
// 0x0001 (0x0001 - 0x0000)
struct FortMultiSizeItemCard_SetShouldCollapseItem final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeItemCard_SetShouldCollapseItem) == 0x000001, "Wrong alignment on FortMultiSizeItemCard_SetShouldCollapseItem");
static_assert(sizeof(FortMultiSizeItemCard_SetShouldCollapseItem) == 0x000001, "Wrong size on FortMultiSizeItemCard_SetShouldCollapseItem");
static_assert(offsetof(FortMultiSizeItemCard_SetShouldCollapseItem, Value) == 0x000000, "Member 'FortMultiSizeItemCard_SetShouldCollapseItem::Value' has a wrong offset!");

// Function FortniteUI.FortMultiSizeItemCard.SetShouldDisplayItemAsReward
// 0x0001 (0x0001 - 0x0000)
struct FortMultiSizeItemCard_SetShouldDisplayItemAsReward final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeItemCard_SetShouldDisplayItemAsReward) == 0x000001, "Wrong alignment on FortMultiSizeItemCard_SetShouldDisplayItemAsReward");
static_assert(sizeof(FortMultiSizeItemCard_SetShouldDisplayItemAsReward) == 0x000001, "Wrong size on FortMultiSizeItemCard_SetShouldDisplayItemAsReward");
static_assert(offsetof(FortMultiSizeItemCard_SetShouldDisplayItemAsReward, Value) == 0x000000, "Member 'FortMultiSizeItemCard_SetShouldDisplayItemAsReward::Value' has a wrong offset!");

// Function FortniteUI.FortMultiSizeItemCard.SetShouldSuppressItemTypeIcon
// 0x0001 (0x0001 - 0x0000)
struct FortMultiSizeItemCard_SetShouldSuppressItemTypeIcon final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeItemCard_SetShouldSuppressItemTypeIcon) == 0x000001, "Wrong alignment on FortMultiSizeItemCard_SetShouldSuppressItemTypeIcon");
static_assert(sizeof(FortMultiSizeItemCard_SetShouldSuppressItemTypeIcon) == 0x000001, "Wrong size on FortMultiSizeItemCard_SetShouldSuppressItemTypeIcon");
static_assert(offsetof(FortMultiSizeItemCard_SetShouldSuppressItemTypeIcon, Value) == 0x000000, "Member 'FortMultiSizeItemCard_SetShouldSuppressItemTypeIcon::Value' has a wrong offset!");

// Function FortniteUI.FortMultiSizeItemCard.GetCardSize
// 0x0001 (0x0001 - 0x0000)
struct FortMultiSizeItemCard_GetCardSize final
{
public:
	EFortItemCardSize                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMultiSizeItemCard_GetCardSize) == 0x000001, "Wrong alignment on FortMultiSizeItemCard_GetCardSize");
static_assert(sizeof(FortMultiSizeItemCard_GetCardSize) == 0x000001, "Wrong size on FortMultiSizeItemCard_GetCardSize");
static_assert(offsetof(FortMultiSizeItemCard_GetCardSize, ReturnValue) == 0x000000, "Member 'FortMultiSizeItemCard_GetCardSize::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortNumericTextBlock.DirectlySet
// 0x0004 (0x0004 - 0x0000)
struct FortNumericTextBlock_DirectlySet final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNumericTextBlock_DirectlySet) == 0x000004, "Wrong alignment on FortNumericTextBlock_DirectlySet");
static_assert(sizeof(FortNumericTextBlock_DirectlySet) == 0x000004, "Wrong size on FortNumericTextBlock_DirectlySet");
static_assert(offsetof(FortNumericTextBlock_DirectlySet, InValue) == 0x000000, "Member 'FortNumericTextBlock_DirectlySet::InValue' has a wrong offset!");

// Function FortniteUI.FortNumericTextBlock.InterpolateSet
// 0x000C (0x000C - 0x0000)
struct FortNumericTextBlock_InterpolateSet final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InUpdateLength;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InReportEndEarly;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNumericTextBlock_InterpolateSet) == 0x000004, "Wrong alignment on FortNumericTextBlock_InterpolateSet");
static_assert(sizeof(FortNumericTextBlock_InterpolateSet) == 0x00000C, "Wrong size on FortNumericTextBlock_InterpolateSet");
static_assert(offsetof(FortNumericTextBlock_InterpolateSet, InValue) == 0x000000, "Member 'FortNumericTextBlock_InterpolateSet::InValue' has a wrong offset!");
static_assert(offsetof(FortNumericTextBlock_InterpolateSet, InUpdateLength) == 0x000004, "Member 'FortNumericTextBlock_InterpolateSet::InUpdateLength' has a wrong offset!");
static_assert(offsetof(FortNumericTextBlock_InterpolateSet, InReportEndEarly) == 0x000008, "Member 'FortNumericTextBlock_InterpolateSet::InReportEndEarly' has a wrong offset!");

// Function FortniteUI.FortNumericTextBlock.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct FortNumericTextBlock_GetCurrentValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNumericTextBlock_GetCurrentValue) == 0x000004, "Wrong alignment on FortNumericTextBlock_GetCurrentValue");
static_assert(sizeof(FortNumericTextBlock_GetCurrentValue) == 0x000004, "Wrong size on FortNumericTextBlock_GetCurrentValue");
static_assert(offsetof(FortNumericTextBlock_GetCurrentValue, ReturnValue) == 0x000000, "Member 'FortNumericTextBlock_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortNumericTextBlock.IsInterpolatingNumber
// 0x0001 (0x0001 - 0x0000)
struct FortNumericTextBlock_IsInterpolatingNumber final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNumericTextBlock_IsInterpolatingNumber) == 0x000001, "Wrong alignment on FortNumericTextBlock_IsInterpolatingNumber");
static_assert(sizeof(FortNumericTextBlock_IsInterpolatingNumber) == 0x000001, "Wrong size on FortNumericTextBlock_IsInterpolatingNumber");
static_assert(offsetof(FortNumericTextBlock_IsInterpolatingNumber, ReturnValue) == 0x000000, "Member 'FortNumericTextBlock_IsInterpolatingNumber::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeDetailsBase.OnShowIcon
// 0x0008 (0x0008 - 0x0000)
struct FortUpgradeDetailsBase_OnShowIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeDetailsBase_OnShowIcon) == 0x000008, "Wrong alignment on FortUpgradeDetailsBase_OnShowIcon");
static_assert(sizeof(FortUpgradeDetailsBase_OnShowIcon) == 0x000008, "Wrong size on FortUpgradeDetailsBase_OnShowIcon");
static_assert(offsetof(FortUpgradeDetailsBase_OnShowIcon, Icon) == 0x000000, "Member 'FortUpgradeDetailsBase_OnShowIcon::Icon' has a wrong offset!");

// Function FortniteUI.FortOptionsMenu.NeedsLanguageChangeConfirmation
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsMenu_NeedsLanguageChangeConfirmation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenu_NeedsLanguageChangeConfirmation) == 0x000001, "Wrong alignment on FortOptionsMenu_NeedsLanguageChangeConfirmation");
static_assert(sizeof(FortOptionsMenu_NeedsLanguageChangeConfirmation) == 0x000001, "Wrong size on FortOptionsMenu_NeedsLanguageChangeConfirmation");
static_assert(offsetof(FortOptionsMenu_NeedsLanguageChangeConfirmation, ReturnValue) == 0x000000, "Member 'FortOptionsMenu_NeedsLanguageChangeConfirmation::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsMenu.NeedsVideoChangeConfirmation
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsMenu_NeedsVideoChangeConfirmation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenu_NeedsVideoChangeConfirmation) == 0x000001, "Wrong alignment on FortOptionsMenu_NeedsVideoChangeConfirmation");
static_assert(sizeof(FortOptionsMenu_NeedsVideoChangeConfirmation) == 0x000001, "Wrong size on FortOptionsMenu_NeedsVideoChangeConfirmation");
static_assert(offsetof(FortOptionsMenu_NeedsVideoChangeConfirmation, ReturnValue) == 0x000000, "Member 'FortOptionsMenu_NeedsVideoChangeConfirmation::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsMenu.OnResetToDefaults
// 0x0004 (0x0004 - 0x0000)
struct FortOptionsMenu_OnResetToDefaults final
{
public:
	int32                                         PresetToSet;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenu_OnResetToDefaults) == 0x000004, "Wrong alignment on FortOptionsMenu_OnResetToDefaults");
static_assert(sizeof(FortOptionsMenu_OnResetToDefaults) == 0x000004, "Wrong size on FortOptionsMenu_OnResetToDefaults");
static_assert(offsetof(FortOptionsMenu_OnResetToDefaults, PresetToSet) == 0x000000, "Member 'FortOptionsMenu_OnResetToDefaults::PresetToSet' has a wrong offset!");

// Function FortniteUI.FortOptionsMenu.ShowAccessibilityOptions
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsMenu_ShowAccessibilityOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenu_ShowAccessibilityOptions) == 0x000001, "Wrong alignment on FortOptionsMenu_ShowAccessibilityOptions");
static_assert(sizeof(FortOptionsMenu_ShowAccessibilityOptions) == 0x000001, "Wrong size on FortOptionsMenu_ShowAccessibilityOptions");
static_assert(offsetof(FortOptionsMenu_ShowAccessibilityOptions, ReturnValue) == 0x000000, "Member 'FortOptionsMenu_ShowAccessibilityOptions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsMenu.ShowAccountOptions
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsMenu_ShowAccountOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenu_ShowAccountOptions) == 0x000001, "Wrong alignment on FortOptionsMenu_ShowAccountOptions");
static_assert(sizeof(FortOptionsMenu_ShowAccountOptions) == 0x000001, "Wrong size on FortOptionsMenu_ShowAccountOptions");
static_assert(offsetof(FortOptionsMenu_ShowAccountOptions, ReturnValue) == 0x000000, "Member 'FortOptionsMenu_ShowAccountOptions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsMenu.ShowBrightnessOptions
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsMenu_ShowBrightnessOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenu_ShowBrightnessOptions) == 0x000001, "Wrong alignment on FortOptionsMenu_ShowBrightnessOptions");
static_assert(sizeof(FortOptionsMenu_ShowBrightnessOptions) == 0x000001, "Wrong size on FortOptionsMenu_ShowBrightnessOptions");
static_assert(offsetof(FortOptionsMenu_ShowBrightnessOptions, ReturnValue) == 0x000000, "Member 'FortOptionsMenu_ShowBrightnessOptions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsMenu.ShowControllerOptions
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsMenu_ShowControllerOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenu_ShowControllerOptions) == 0x000001, "Wrong alignment on FortOptionsMenu_ShowControllerOptions");
static_assert(sizeof(FortOptionsMenu_ShowControllerOptions) == 0x000001, "Wrong size on FortOptionsMenu_ShowControllerOptions");
static_assert(offsetof(FortOptionsMenu_ShowControllerOptions, ReturnValue) == 0x000000, "Member 'FortOptionsMenu_ShowControllerOptions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsMenu.ShowInputOptions
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsMenu_ShowInputOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenu_ShowInputOptions) == 0x000001, "Wrong alignment on FortOptionsMenu_ShowInputOptions");
static_assert(sizeof(FortOptionsMenu_ShowInputOptions) == 0x000001, "Wrong size on FortOptionsMenu_ShowInputOptions");
static_assert(offsetof(FortOptionsMenu_ShowInputOptions, ReturnValue) == 0x000000, "Member 'FortOptionsMenu_ShowInputOptions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsMenu.ShowNewControllerSenseOptions
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsMenu_ShowNewControllerSenseOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenu_ShowNewControllerSenseOptions) == 0x000001, "Wrong alignment on FortOptionsMenu_ShowNewControllerSenseOptions");
static_assert(sizeof(FortOptionsMenu_ShowNewControllerSenseOptions) == 0x000001, "Wrong size on FortOptionsMenu_ShowNewControllerSenseOptions");
static_assert(offsetof(FortOptionsMenu_ShowNewControllerSenseOptions, ReturnValue) == 0x000000, "Member 'FortOptionsMenu_ShowNewControllerSenseOptions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsMenu.ShowVideoOptions
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsMenu_ShowVideoOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenu_ShowVideoOptions) == 0x000001, "Wrong alignment on FortOptionsMenu_ShowVideoOptions");
static_assert(sizeof(FortOptionsMenu_ShowVideoOptions) == 0x000001, "Wrong size on FortOptionsMenu_ShowVideoOptions");
static_assert(offsetof(FortOptionsMenu_ShowVideoOptions, ReturnValue) == 0x000000, "Member 'FortOptionsMenu_ShowVideoOptions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsMenuInputData.GetInputActionGroup
// 0x0001 (0x0001 - 0x0000)
struct FortOptionsMenuInputData_GetInputActionGroup final
{
public:
	EFortInputActionGroup                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenuInputData_GetInputActionGroup) == 0x000001, "Wrong alignment on FortOptionsMenuInputData_GetInputActionGroup");
static_assert(sizeof(FortOptionsMenuInputData_GetInputActionGroup) == 0x000001, "Wrong size on FortOptionsMenuInputData_GetInputActionGroup");
static_assert(offsetof(FortOptionsMenuInputData_GetInputActionGroup, ReturnValue) == 0x000000, "Member 'FortOptionsMenuInputData_GetInputActionGroup::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsMenuInputData.GetInputScale
// 0x0004 (0x0004 - 0x0000)
struct FortOptionsMenuInputData_GetInputScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenuInputData_GetInputScale) == 0x000004, "Wrong alignment on FortOptionsMenuInputData_GetInputScale");
static_assert(sizeof(FortOptionsMenuInputData_GetInputScale) == 0x000004, "Wrong size on FortOptionsMenuInputData_GetInputScale");
static_assert(offsetof(FortOptionsMenuInputData_GetInputScale, ReturnValue) == 0x000000, "Member 'FortOptionsMenuInputData_GetInputScale::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortOptionsMenuSetting.SetControlsEnabled
// 0x0020 (0x0020 - 0x0000)
struct FortOptionsMenuSetting_SetControlsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisabledReason;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenuSetting_SetControlsEnabled) == 0x000008, "Wrong alignment on FortOptionsMenuSetting_SetControlsEnabled");
static_assert(sizeof(FortOptionsMenuSetting_SetControlsEnabled) == 0x000020, "Wrong size on FortOptionsMenuSetting_SetControlsEnabled");
static_assert(offsetof(FortOptionsMenuSetting_SetControlsEnabled, bEnabled) == 0x000000, "Member 'FortOptionsMenuSetting_SetControlsEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(FortOptionsMenuSetting_SetControlsEnabled, DisabledReason) == 0x000008, "Member 'FortOptionsMenuSetting_SetControlsEnabled::DisabledReason' has a wrong offset!");

// Function FortniteUI.FortOptionsMenuSetting.UpdateSetting
// 0x0008 (0x0008 - 0x0000)
struct FortOptionsMenuSetting_UpdateSetting final
{
public:
	class UCommonTextBlock*                       TooltipTextBlock;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOptionsMenuSetting_UpdateSetting) == 0x000008, "Wrong alignment on FortOptionsMenuSetting_UpdateSetting");
static_assert(sizeof(FortOptionsMenuSetting_UpdateSetting) == 0x000008, "Wrong size on FortOptionsMenuSetting_UpdateSetting");
static_assert(offsetof(FortOptionsMenuSetting_UpdateSetting, TooltipTextBlock) == 0x000000, "Member 'FortOptionsMenuSetting_UpdateSetting::TooltipTextBlock' has a wrong offset!");

// Function FortniteUI.FortOutpostStorageItemPicker.UseFilter
// 0x0001 (0x0001 - 0x0000)
struct FortOutpostStorageItemPicker_UseFilter final
{
public:
	EFortItemType                                 ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostStorageItemPicker_UseFilter) == 0x000001, "Wrong alignment on FortOutpostStorageItemPicker_UseFilter");
static_assert(sizeof(FortOutpostStorageItemPicker_UseFilter) == 0x000001, "Wrong size on FortOutpostStorageItemPicker_UseFilter");
static_assert(offsetof(FortOutpostStorageItemPicker_UseFilter, ItemType) == 0x000000, "Member 'FortOutpostStorageItemPicker_UseFilter::ItemType' has a wrong offset!");

// Function FortniteUI.FortOutpostStorageItemPicker.UseFilters
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostStorageItemPicker_UseFilters final
{
public:
	TArray<EFortItemType>                         ItemTypes;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostStorageItemPicker_UseFilters) == 0x000008, "Wrong alignment on FortOutpostStorageItemPicker_UseFilters");
static_assert(sizeof(FortOutpostStorageItemPicker_UseFilters) == 0x000010, "Wrong size on FortOutpostStorageItemPicker_UseFilters");
static_assert(offsetof(FortOutpostStorageItemPicker_UseFilters, ItemTypes) == 0x000000, "Member 'FortOutpostStorageItemPicker_UseFilters::ItemTypes' has a wrong offset!");

// Function FortniteUI.FortPartySuggestionButton.HandleSuggestionAccepted
// 0x0004 (0x0004 - 0x0000)
struct FortPartySuggestionButton_HandleSuggestionAccepted final
{
public:
	int32                                         PlayerID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartySuggestionButton_HandleSuggestionAccepted) == 0x000004, "Wrong alignment on FortPartySuggestionButton_HandleSuggestionAccepted");
static_assert(sizeof(FortPartySuggestionButton_HandleSuggestionAccepted) == 0x000004, "Wrong size on FortPartySuggestionButton_HandleSuggestionAccepted");
static_assert(offsetof(FortPartySuggestionButton_HandleSuggestionAccepted, PlayerID) == 0x000000, "Member 'FortPartySuggestionButton_HandleSuggestionAccepted::PlayerID' has a wrong offset!");

// Function FortniteUI.FortPartySuggestionButton.OnDisplayInfoUpdated
// 0x0010 (0x0010 - 0x0000)
struct FortPartySuggestionButton_OnDisplayInfoUpdated final
{
public:
	struct FDateTime                              LFGTime;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInvited;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlaying;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartySuggestionButton_OnDisplayInfoUpdated) == 0x000008, "Wrong alignment on FortPartySuggestionButton_OnDisplayInfoUpdated");
static_assert(sizeof(FortPartySuggestionButton_OnDisplayInfoUpdated) == 0x000010, "Wrong size on FortPartySuggestionButton_OnDisplayInfoUpdated");
static_assert(offsetof(FortPartySuggestionButton_OnDisplayInfoUpdated, LFGTime) == 0x000000, "Member 'FortPartySuggestionButton_OnDisplayInfoUpdated::LFGTime' has a wrong offset!");
static_assert(offsetof(FortPartySuggestionButton_OnDisplayInfoUpdated, bIsInvited) == 0x000008, "Member 'FortPartySuggestionButton_OnDisplayInfoUpdated::bIsInvited' has a wrong offset!");
static_assert(offsetof(FortPartySuggestionButton_OnDisplayInfoUpdated, bIsPlaying) == 0x000009, "Member 'FortPartySuggestionButton_OnDisplayInfoUpdated::bIsPlaying' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyPanel.OnMenuStateChange
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolPropertyPanel_OnMenuStateChange final
{
public:
	bool                                          bNewlyOpen;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyPanel_OnMenuStateChange) == 0x000001, "Wrong alignment on HUDLayoutToolPropertyPanel_OnMenuStateChange");
static_assert(sizeof(HUDLayoutToolPropertyPanel_OnMenuStateChange) == 0x000001, "Wrong size on HUDLayoutToolPropertyPanel_OnMenuStateChange");
static_assert(offsetof(HUDLayoutToolPropertyPanel_OnMenuStateChange, bNewlyOpen) == 0x000000, "Member 'HUDLayoutToolPropertyPanel_OnMenuStateChange::bNewlyOpen' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyPanel.OnWidgetSelected
// 0x0008 (0x0008 - 0x0000)
struct HUDLayoutToolPropertyPanel_OnWidgetSelected final
{
public:
	class UHUDLayoutToolPlacementWidget*          NewlySelectedWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyPanel_OnWidgetSelected) == 0x000008, "Wrong alignment on HUDLayoutToolPropertyPanel_OnWidgetSelected");
static_assert(sizeof(HUDLayoutToolPropertyPanel_OnWidgetSelected) == 0x000008, "Wrong size on HUDLayoutToolPropertyPanel_OnWidgetSelected");
static_assert(offsetof(HUDLayoutToolPropertyPanel_OnWidgetSelected, NewlySelectedWidget) == 0x000000, "Member 'HUDLayoutToolPropertyPanel_OnWidgetSelected::NewlySelectedWidget' has a wrong offset!");

// Function FortniteUI.HUDLayoutToolPropertyPanel.GetIsOpen
// 0x0001 (0x0001 - 0x0000)
struct HUDLayoutToolPropertyPanel_GetIsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLayoutToolPropertyPanel_GetIsOpen) == 0x000001, "Wrong alignment on HUDLayoutToolPropertyPanel_GetIsOpen");
static_assert(sizeof(HUDLayoutToolPropertyPanel_GetIsOpen) == 0x000001, "Wrong size on HUDLayoutToolPropertyPanel_GetIsOpen");
static_assert(offsetof(HUDLayoutToolPropertyPanel_GetIsOpen, ReturnValue) == 0x000000, "Member 'HUDLayoutToolPropertyPanel_GetIsOpen::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPCBInfoPanel.GetPCBDescription
// 0x0018 (0x0018 - 0x0000)
struct FortPCBInfoPanel_GetPCBDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPCBInfoPanel_GetPCBDescription) == 0x000008, "Wrong alignment on FortPCBInfoPanel_GetPCBDescription");
static_assert(sizeof(FortPCBInfoPanel_GetPCBDescription) == 0x000018, "Wrong size on FortPCBInfoPanel_GetPCBDescription");
static_assert(offsetof(FortPCBInfoPanel_GetPCBDescription, ReturnValue) == 0x000000, "Member 'FortPCBInfoPanel_GetPCBDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPCBInfoPanel.GetPCBHeader
// 0x0018 (0x0018 - 0x0000)
struct FortPCBInfoPanel_GetPCBHeader final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPCBInfoPanel_GetPCBHeader) == 0x000008, "Wrong alignment on FortPCBInfoPanel_GetPCBHeader");
static_assert(sizeof(FortPCBInfoPanel_GetPCBHeader) == 0x000018, "Wrong size on FortPCBInfoPanel_GetPCBHeader");
static_assert(offsetof(FortPCBInfoPanel_GetPCBHeader, ReturnValue) == 0x000000, "Member 'FortPCBInfoPanel_GetPCBHeader::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPCBInfoPanel.ShouldDisplayPCBData
// 0x0001 (0x0001 - 0x0000)
struct FortPCBInfoPanel_ShouldDisplayPCBData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPCBInfoPanel_ShouldDisplayPCBData) == 0x000001, "Wrong alignment on FortPCBInfoPanel_ShouldDisplayPCBData");
static_assert(sizeof(FortPCBInfoPanel_ShouldDisplayPCBData) == 0x000001, "Wrong size on FortPCBInfoPanel_ShouldDisplayPCBData");
static_assert(offsetof(FortPCBInfoPanel_ShouldDisplayPCBData, ReturnValue) == 0x000000, "Member 'FortPCBInfoPanel_ShouldDisplayPCBData::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPerksWidget_NUI.OnGeneratePerk
// 0x00A0 (0x00A0 - 0x0000)
struct FortPerksWidget_NUI_OnGeneratePerk final
{
public:
	struct FFortUIPerk                            FortPerk;                                          // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
	class UFortPerkWidget_NUI*                    PerkWidget;                                        // 0x0098(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerksWidget_NUI_OnGeneratePerk) == 0x000008, "Wrong alignment on FortPerksWidget_NUI_OnGeneratePerk");
static_assert(sizeof(FortPerksWidget_NUI_OnGeneratePerk) == 0x0000A0, "Wrong size on FortPerksWidget_NUI_OnGeneratePerk");
static_assert(offsetof(FortPerksWidget_NUI_OnGeneratePerk, FortPerk) == 0x000000, "Member 'FortPerksWidget_NUI_OnGeneratePerk::FortPerk' has a wrong offset!");
static_assert(offsetof(FortPerksWidget_NUI_OnGeneratePerk, PerkWidget) == 0x000098, "Member 'FortPerksWidget_NUI_OnGeneratePerk::PerkWidget' has a wrong offset!");

// Function FortniteUI.FortPerksWidget_NUI.OnGeneratePerkTier
// 0x0028 (0x0028 - 0x0000)
struct FortPerksWidget_NUI_OnGeneratePerkTier final
{
public:
	struct FFortUIPerkTier                        FortPerkTier;                                      // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UFortPerkTierWidget_NUI*                PerkTierWidget;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerksWidget_NUI_OnGeneratePerkTier) == 0x000008, "Wrong alignment on FortPerksWidget_NUI_OnGeneratePerkTier");
static_assert(sizeof(FortPerksWidget_NUI_OnGeneratePerkTier) == 0x000028, "Wrong size on FortPerksWidget_NUI_OnGeneratePerkTier");
static_assert(offsetof(FortPerksWidget_NUI_OnGeneratePerkTier, FortPerkTier) == 0x000000, "Member 'FortPerksWidget_NUI_OnGeneratePerkTier::FortPerkTier' has a wrong offset!");
static_assert(offsetof(FortPerksWidget_NUI_OnGeneratePerkTier, PerkTierWidget) == 0x000020, "Member 'FortPerksWidget_NUI_OnGeneratePerkTier::PerkTierWidget' has a wrong offset!");

// Function FortniteUI.FortPerksWidget_NUI.SetHero
// 0x0008 (0x0008 - 0x0000)
struct FortPerksWidget_NUI_SetHero final
{
public:
	class UFortHero*                              InHero;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerksWidget_NUI_SetHero) == 0x000008, "Wrong alignment on FortPerksWidget_NUI_SetHero");
static_assert(sizeof(FortPerksWidget_NUI_SetHero) == 0x000008, "Wrong size on FortPerksWidget_NUI_SetHero");
static_assert(offsetof(FortPerksWidget_NUI_SetHero, InHero) == 0x000000, "Member 'FortPerksWidget_NUI_SetHero::InHero' has a wrong offset!");

// Function FortniteUI.FortPerksWidget_NUI.SetState
// 0x0010 (0x0010 - 0x0000)
struct FortPerksWidget_NUI_SetState final
{
public:
	EFortPerksWidgetState                         InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHero*                              InEvolutionOption;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerksWidget_NUI_SetState) == 0x000008, "Wrong alignment on FortPerksWidget_NUI_SetState");
static_assert(sizeof(FortPerksWidget_NUI_SetState) == 0x000010, "Wrong size on FortPerksWidget_NUI_SetState");
static_assert(offsetof(FortPerksWidget_NUI_SetState, InState) == 0x000000, "Member 'FortPerksWidget_NUI_SetState::InState' has a wrong offset!");
static_assert(offsetof(FortPerksWidget_NUI_SetState, InEvolutionOption) == 0x000008, "Member 'FortPerksWidget_NUI_SetState::InEvolutionOption' has a wrong offset!");

// Function FortniteUI.FortPerkTierWidget_NUI.OnGeneratePerk
// 0x00A0 (0x00A0 - 0x0000)
struct FortPerkTierWidget_NUI_OnGeneratePerk final
{
public:
	struct FFortUIPerk                            Perk;                                              // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
	class UFortPerkWidget_NUI*                    PerkWidget;                                        // 0x0098(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkTierWidget_NUI_OnGeneratePerk) == 0x000008, "Wrong alignment on FortPerkTierWidget_NUI_OnGeneratePerk");
static_assert(sizeof(FortPerkTierWidget_NUI_OnGeneratePerk) == 0x0000A0, "Wrong size on FortPerkTierWidget_NUI_OnGeneratePerk");
static_assert(offsetof(FortPerkTierWidget_NUI_OnGeneratePerk, Perk) == 0x000000, "Member 'FortPerkTierWidget_NUI_OnGeneratePerk::Perk' has a wrong offset!");
static_assert(offsetof(FortPerkTierWidget_NUI_OnGeneratePerk, PerkWidget) == 0x000098, "Member 'FortPerkTierWidget_NUI_OnGeneratePerk::PerkWidget' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.GetTooltipContext
// 0x0008 (0x0008 - 0x0000)
struct FortPerkWidget_NUI_GetTooltipContext final
{
public:
	class UFortTooltipContext*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_GetTooltipContext) == 0x000008, "Wrong alignment on FortPerkWidget_NUI_GetTooltipContext");
static_assert(sizeof(FortPerkWidget_NUI_GetTooltipContext) == 0x000008, "Wrong size on FortPerkWidget_NUI_GetTooltipContext");
static_assert(offsetof(FortPerkWidget_NUI_GetTooltipContext, ReturnValue) == 0x000000, "Member 'FortPerkWidget_NUI_GetTooltipContext::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.OnCombinedTooltipDescriptionReady
// 0x0018 (0x0018 - 0x0000)
struct FortPerkWidget_NUI_OnCombinedTooltipDescriptionReady final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_OnCombinedTooltipDescriptionReady) == 0x000008, "Wrong alignment on FortPerkWidget_NUI_OnCombinedTooltipDescriptionReady");
static_assert(sizeof(FortPerkWidget_NUI_OnCombinedTooltipDescriptionReady) == 0x000018, "Wrong size on FortPerkWidget_NUI_OnCombinedTooltipDescriptionReady");
static_assert(offsetof(FortPerkWidget_NUI_OnCombinedTooltipDescriptionReady, Description) == 0x000000, "Member 'FortPerkWidget_NUI_OnCombinedTooltipDescriptionReady::Description' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.OnTooltipDescriptionReady
// 0x0010 (0x0010 - 0x0000)
struct FortPerkWidget_NUI_OnTooltipDescriptionReady final
{
public:
	TArray<class FText>                           DescriptionList;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_OnTooltipDescriptionReady) == 0x000008, "Wrong alignment on FortPerkWidget_NUI_OnTooltipDescriptionReady");
static_assert(sizeof(FortPerkWidget_NUI_OnTooltipDescriptionReady) == 0x000010, "Wrong size on FortPerkWidget_NUI_OnTooltipDescriptionReady");
static_assert(offsetof(FortPerkWidget_NUI_OnTooltipDescriptionReady, DescriptionList) == 0x000000, "Member 'FortPerkWidget_NUI_OnTooltipDescriptionReady::DescriptionList' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.SetTooltipContext
// 0x0008 (0x0008 - 0x0000)
struct FortPerkWidget_NUI_SetTooltipContext final
{
public:
	const class UFortTooltipContext*              InTooltipContext;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_SetTooltipContext) == 0x000008, "Wrong alignment on FortPerkWidget_NUI_SetTooltipContext");
static_assert(sizeof(FortPerkWidget_NUI_SetTooltipContext) == 0x000008, "Wrong size on FortPerkWidget_NUI_SetTooltipContext");
static_assert(offsetof(FortPerkWidget_NUI_SetTooltipContext, InTooltipContext) == 0x000000, "Member 'FortPerkWidget_NUI_SetTooltipContext::InTooltipContext' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.GetIcon
// 0x0090 (0x0090 - 0x0000)
struct FortPerkWidget_NUI_GetIcon final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPerkWidget_NUI_GetIcon) == 0x000008, "Wrong alignment on FortPerkWidget_NUI_GetIcon");
static_assert(sizeof(FortPerkWidget_NUI_GetIcon) == 0x000090, "Wrong size on FortPerkWidget_NUI_GetIcon");
static_assert(offsetof(FortPerkWidget_NUI_GetIcon, Brush) == 0x000000, "Member 'FortPerkWidget_NUI_GetIcon::Brush' has a wrong offset!");
static_assert(offsetof(FortPerkWidget_NUI_GetIcon, ReturnValue) == 0x000088, "Member 'FortPerkWidget_NUI_GetIcon::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.GetPerkTier
// 0x0001 (0x0001 - 0x0000)
struct FortPerkWidget_NUI_GetPerkTier final
{
public:
	EFortItemTier                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_GetPerkTier) == 0x000001, "Wrong alignment on FortPerkWidget_NUI_GetPerkTier");
static_assert(sizeof(FortPerkWidget_NUI_GetPerkTier) == 0x000001, "Wrong size on FortPerkWidget_NUI_GetPerkTier");
static_assert(offsetof(FortPerkWidget_NUI_GetPerkTier, ReturnValue) == 0x000000, "Member 'FortPerkWidget_NUI_GetPerkTier::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.GetRequiredLevel
// 0x0004 (0x0004 - 0x0000)
struct FortPerkWidget_NUI_GetRequiredLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_GetRequiredLevel) == 0x000004, "Wrong alignment on FortPerkWidget_NUI_GetRequiredLevel");
static_assert(sizeof(FortPerkWidget_NUI_GetRequiredLevel) == 0x000004, "Wrong size on FortPerkWidget_NUI_GetRequiredLevel");
static_assert(offsetof(FortPerkWidget_NUI_GetRequiredLevel, ReturnValue) == 0x000000, "Member 'FortPerkWidget_NUI_GetRequiredLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.GetSupportBonusType
// 0x0001 (0x0001 - 0x0000)
struct FortPerkWidget_NUI_GetSupportBonusType final
{
public:
	EFortSupportBonusType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_GetSupportBonusType) == 0x000001, "Wrong alignment on FortPerkWidget_NUI_GetSupportBonusType");
static_assert(sizeof(FortPerkWidget_NUI_GetSupportBonusType) == 0x000001, "Wrong size on FortPerkWidget_NUI_GetSupportBonusType");
static_assert(offsetof(FortPerkWidget_NUI_GetSupportBonusType, ReturnValue) == 0x000000, "Member 'FortPerkWidget_NUI_GetSupportBonusType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.GetTooltipTitle
// 0x0018 (0x0018 - 0x0000)
struct FortPerkWidget_NUI_GetTooltipTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_GetTooltipTitle) == 0x000008, "Wrong alignment on FortPerkWidget_NUI_GetTooltipTitle");
static_assert(sizeof(FortPerkWidget_NUI_GetTooltipTitle) == 0x000018, "Wrong size on FortPerkWidget_NUI_GetTooltipTitle");
static_assert(offsetof(FortPerkWidget_NUI_GetTooltipTitle, ReturnValue) == 0x000000, "Member 'FortPerkWidget_NUI_GetTooltipTitle::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.HasAbility
// 0x0001 (0x0001 - 0x0000)
struct FortPerkWidget_NUI_HasAbility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_HasAbility) == 0x000001, "Wrong alignment on FortPerkWidget_NUI_HasAbility");
static_assert(sizeof(FortPerkWidget_NUI_HasAbility) == 0x000001, "Wrong size on FortPerkWidget_NUI_HasAbility");
static_assert(offsetof(FortPerkWidget_NUI_HasAbility, ReturnValue) == 0x000000, "Member 'FortPerkWidget_NUI_HasAbility::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.IsPerkEmpty
// 0x0001 (0x0001 - 0x0000)
struct FortPerkWidget_NUI_IsPerkEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_IsPerkEmpty) == 0x000001, "Wrong alignment on FortPerkWidget_NUI_IsPerkEmpty");
static_assert(sizeof(FortPerkWidget_NUI_IsPerkEmpty) == 0x000001, "Wrong size on FortPerkWidget_NUI_IsPerkEmpty");
static_assert(offsetof(FortPerkWidget_NUI_IsPerkEmpty, ReturnValue) == 0x000000, "Member 'FortPerkWidget_NUI_IsPerkEmpty::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.IsPerkHighlighted
// 0x0001 (0x0001 - 0x0000)
struct FortPerkWidget_NUI_IsPerkHighlighted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_IsPerkHighlighted) == 0x000001, "Wrong alignment on FortPerkWidget_NUI_IsPerkHighlighted");
static_assert(sizeof(FortPerkWidget_NUI_IsPerkHighlighted) == 0x000001, "Wrong size on FortPerkWidget_NUI_IsPerkHighlighted");
static_assert(offsetof(FortPerkWidget_NUI_IsPerkHighlighted, ReturnValue) == 0x000000, "Member 'FortPerkWidget_NUI_IsPerkHighlighted::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.IsPerkUnlocked
// 0x0001 (0x0001 - 0x0000)
struct FortPerkWidget_NUI_IsPerkUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_IsPerkUnlocked) == 0x000001, "Wrong alignment on FortPerkWidget_NUI_IsPerkUnlocked");
static_assert(sizeof(FortPerkWidget_NUI_IsPerkUnlocked) == 0x000001, "Wrong size on FortPerkWidget_NUI_IsPerkUnlocked");
static_assert(offsetof(FortPerkWidget_NUI_IsPerkUnlocked, ReturnValue) == 0x000000, "Member 'FortPerkWidget_NUI_IsPerkUnlocked::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPerkWidget_NUI.IsTierPerk
// 0x0001 (0x0001 - 0x0000)
struct FortPerkWidget_NUI_IsTierPerk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPerkWidget_NUI_IsTierPerk) == 0x000001, "Wrong alignment on FortPerkWidget_NUI_IsTierPerk");
static_assert(sizeof(FortPerkWidget_NUI_IsTierPerk) == 0x000001, "Wrong size on FortPerkWidget_NUI_IsTierPerk");
static_assert(offsetof(FortPerkWidget_NUI_IsTierPerk, ReturnValue) == 0x000000, "Member 'FortPerkWidget_NUI_IsTierPerk::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPickerContext.GetAdjacentPickerWheelInformation
// 0x0028 (0x0028 - 0x0000)
struct FortPickerContext_GetAdjacentPickerWheelInformation final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AdjacentTitle;                                     // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bCanPageThisDirection;                             // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPickerContext_GetAdjacentPickerWheelInformation) == 0x000008, "Wrong alignment on FortPickerContext_GetAdjacentPickerWheelInformation");
static_assert(sizeof(FortPickerContext_GetAdjacentPickerWheelInformation) == 0x000028, "Wrong size on FortPickerContext_GetAdjacentPickerWheelInformation");
static_assert(offsetof(FortPickerContext_GetAdjacentPickerWheelInformation, Direction) == 0x000000, "Member 'FortPickerContext_GetAdjacentPickerWheelInformation::Direction' has a wrong offset!");
static_assert(offsetof(FortPickerContext_GetAdjacentPickerWheelInformation, AdjacentTitle) == 0x000008, "Member 'FortPickerContext_GetAdjacentPickerWheelInformation::AdjacentTitle' has a wrong offset!");
static_assert(offsetof(FortPickerContext_GetAdjacentPickerWheelInformation, bCanPageThisDirection) == 0x000020, "Member 'FortPickerContext_GetAdjacentPickerWheelInformation::bCanPageThisDirection' has a wrong offset!");

// Function FortniteUI.FortPickerContext.GetCurrentPickerDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortPickerContext_GetCurrentPickerDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickerContext_GetCurrentPickerDisplayName) == 0x000008, "Wrong alignment on FortPickerContext_GetCurrentPickerDisplayName");
static_assert(sizeof(FortPickerContext_GetCurrentPickerDisplayName) == 0x000018, "Wrong size on FortPickerContext_GetCurrentPickerDisplayName");
static_assert(offsetof(FortPickerContext_GetCurrentPickerDisplayName, ReturnValue) == 0x000000, "Member 'FortPickerContext_GetCurrentPickerDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPickerContext.GetPickerWheelAdjacency
// 0x0002 (0x0002 - 0x0000)
struct FortPickerContext_GetPickerWheelAdjacency final
{
public:
	bool                                          bCanPageLeft;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPageRight;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickerContext_GetPickerWheelAdjacency) == 0x000001, "Wrong alignment on FortPickerContext_GetPickerWheelAdjacency");
static_assert(sizeof(FortPickerContext_GetPickerWheelAdjacency) == 0x000002, "Wrong size on FortPickerContext_GetPickerWheelAdjacency");
static_assert(offsetof(FortPickerContext_GetPickerWheelAdjacency, bCanPageLeft) == 0x000000, "Member 'FortPickerContext_GetPickerWheelAdjacency::bCanPageLeft' has a wrong offset!");
static_assert(offsetof(FortPickerContext_GetPickerWheelAdjacency, bCanPageRight) == 0x000001, "Member 'FortPickerContext_GetPickerWheelAdjacency::bCanPageRight' has a wrong offset!");

// Function FortniteUI.FortPickerContext.PickerOptionAccepted
// 0x0004 (0x0004 - 0x0000)
struct FortPickerContext_PickerOptionAccepted final
{
public:
	int32                                         Option;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickerContext_PickerOptionAccepted) == 0x000004, "Wrong alignment on FortPickerContext_PickerOptionAccepted");
static_assert(sizeof(FortPickerContext_PickerOptionAccepted) == 0x000004, "Wrong size on FortPickerContext_PickerOptionAccepted");
static_assert(offsetof(FortPickerContext_PickerOptionAccepted, Option) == 0x000000, "Member 'FortPickerContext_PickerOptionAccepted::Option' has a wrong offset!");

// Function FortniteUI.FortPickerContext.SetFortPickerData
// 0x0008 (0x0008 - 0x0000)
struct FortPickerContext_SetFortPickerData final
{
public:
	class UFortPickerData*                        Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickerContext_SetFortPickerData) == 0x000008, "Wrong alignment on FortPickerContext_SetFortPickerData");
static_assert(sizeof(FortPickerContext_SetFortPickerData) == 0x000008, "Wrong size on FortPickerContext_SetFortPickerData");
static_assert(offsetof(FortPickerContext_SetFortPickerData, Data) == 0x000000, "Member 'FortPickerContext_SetFortPickerData::Data' has a wrong offset!");

// Function FortniteUI.FortPickerContext.ShowRadialPickerMenu
// 0x0010 (0x0010 - 0x0000)
struct FortPickerContext_ShowRadialPickerMenu final
{
public:
	EFortPickerToDisplay                          PickerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WheelIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickerContext_ShowRadialPickerMenu) == 0x000008, "Wrong alignment on FortPickerContext_ShowRadialPickerMenu");
static_assert(sizeof(FortPickerContext_ShowRadialPickerMenu) == 0x000010, "Wrong size on FortPickerContext_ShowRadialPickerMenu");
static_assert(offsetof(FortPickerContext_ShowRadialPickerMenu, PickerType) == 0x000000, "Member 'FortPickerContext_ShowRadialPickerMenu::PickerType' has a wrong offset!");
static_assert(offsetof(FortPickerContext_ShowRadialPickerMenu, WheelIndex) == 0x000004, "Member 'FortPickerContext_ShowRadialPickerMenu::WheelIndex' has a wrong offset!");
static_assert(offsetof(FortPickerContext_ShowRadialPickerMenu, ContextObject) == 0x000008, "Member 'FortPickerContext_ShowRadialPickerMenu::ContextObject' has a wrong offset!");

// Function FortniteUI.FortPickerContext.SwitchToAdjacentWheel
// 0x0004 (0x0004 - 0x0000)
struct FortPickerContext_SwitchToAdjacentWheel final
{
public:
	int32                                         SelectionDirection;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickerContext_SwitchToAdjacentWheel) == 0x000004, "Wrong alignment on FortPickerContext_SwitchToAdjacentWheel");
static_assert(sizeof(FortPickerContext_SwitchToAdjacentWheel) == 0x000004, "Wrong size on FortPickerContext_SwitchToAdjacentWheel");
static_assert(offsetof(FortPickerContext_SwitchToAdjacentWheel, SelectionDirection) == 0x000000, "Member 'FortPickerContext_SwitchToAdjacentWheel::SelectionDirection' has a wrong offset!");

// Function FortniteUI.FortPickerContext.DoesRadialCloseOnRelease
// 0x0001 (0x0001 - 0x0000)
struct FortPickerContext_DoesRadialCloseOnRelease final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickerContext_DoesRadialCloseOnRelease) == 0x000001, "Wrong alignment on FortPickerContext_DoesRadialCloseOnRelease");
static_assert(sizeof(FortPickerContext_DoesRadialCloseOnRelease) == 0x000001, "Wrong size on FortPickerContext_DoesRadialCloseOnRelease");
static_assert(offsetof(FortPickerContext_DoesRadialCloseOnRelease, ReturnValue) == 0x000000, "Member 'FortPickerContext_DoesRadialCloseOnRelease::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPickerContext.GetCurrentWheelIndex
// 0x0004 (0x0004 - 0x0000)
struct FortPickerContext_GetCurrentWheelIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickerContext_GetCurrentWheelIndex) == 0x000004, "Wrong alignment on FortPickerContext_GetCurrentWheelIndex");
static_assert(sizeof(FortPickerContext_GetCurrentWheelIndex) == 0x000004, "Wrong size on FortPickerContext_GetCurrentWheelIndex");
static_assert(offsetof(FortPickerContext_GetCurrentWheelIndex, ReturnValue) == 0x000000, "Member 'FortPickerContext_GetCurrentWheelIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPickerContext.GetListPickerOption
// 0x0010 (0x0010 - 0x0000)
struct FortPickerContext_GetListPickerOption final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickerContext_GetListPickerOption) == 0x000008, "Wrong alignment on FortPickerContext_GetListPickerOption");
static_assert(sizeof(FortPickerContext_GetListPickerOption) == 0x000010, "Wrong size on FortPickerContext_GetListPickerOption");
static_assert(offsetof(FortPickerContext_GetListPickerOption, Param_Index) == 0x000000, "Member 'FortPickerContext_GetListPickerOption::Param_Index' has a wrong offset!");
static_assert(offsetof(FortPickerContext_GetListPickerOption, ReturnValue) == 0x000008, "Member 'FortPickerContext_GetListPickerOption::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPickerContext.GetNumPickerOptions
// 0x0004 (0x0004 - 0x0000)
struct FortPickerContext_GetNumPickerOptions final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickerContext_GetNumPickerOptions) == 0x000004, "Wrong alignment on FortPickerContext_GetNumPickerOptions");
static_assert(sizeof(FortPickerContext_GetNumPickerOptions) == 0x000004, "Wrong size on FortPickerContext_GetNumPickerOptions");
static_assert(offsetof(FortPickerContext_GetNumPickerOptions, ReturnValue) == 0x000000, "Member 'FortPickerContext_GetNumPickerOptions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPickerContext.GetRadialPickerOptionImageAndLabel
// 0x00D8 (0x00D8 - 0x0000)
struct FortPickerContext_GetRadialPickerOptionImageAndLabel final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Label;                                             // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0020(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x00A8(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptionEnabled;                                    // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPickerContext_GetRadialPickerOptionImageAndLabel) == 0x000008, "Wrong alignment on FortPickerContext_GetRadialPickerOptionImageAndLabel");
static_assert(sizeof(FortPickerContext_GetRadialPickerOptionImageAndLabel) == 0x0000D8, "Wrong size on FortPickerContext_GetRadialPickerOptionImageAndLabel");
static_assert(offsetof(FortPickerContext_GetRadialPickerOptionImageAndLabel, Param_Index) == 0x000000, "Member 'FortPickerContext_GetRadialPickerOptionImageAndLabel::Param_Index' has a wrong offset!");
static_assert(offsetof(FortPickerContext_GetRadialPickerOptionImageAndLabel, Label) == 0x000008, "Member 'FortPickerContext_GetRadialPickerOptionImageAndLabel::Label' has a wrong offset!");
static_assert(offsetof(FortPickerContext_GetRadialPickerOptionImageAndLabel, Brush) == 0x000020, "Member 'FortPickerContext_GetRadialPickerOptionImageAndLabel::Brush' has a wrong offset!");
static_assert(offsetof(FortPickerContext_GetRadialPickerOptionImageAndLabel, Icon) == 0x0000A8, "Member 'FortPickerContext_GetRadialPickerOptionImageAndLabel::Icon' has a wrong offset!");
static_assert(offsetof(FortPickerContext_GetRadialPickerOptionImageAndLabel, bOptionEnabled) == 0x0000D0, "Member 'FortPickerContext_GetRadialPickerOptionImageAndLabel::bOptionEnabled' has a wrong offset!");

// Function FortniteUI.FortPickerContext.GetRadialPickerOptionItem
// 0x0018 (0x0018 - 0x0000)
struct FortPickerContext_GetRadialPickerOptionItem final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              Item;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptionEnabled;                                    // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPickerContext_GetRadialPickerOptionItem) == 0x000008, "Wrong alignment on FortPickerContext_GetRadialPickerOptionItem");
static_assert(sizeof(FortPickerContext_GetRadialPickerOptionItem) == 0x000018, "Wrong size on FortPickerContext_GetRadialPickerOptionItem");
static_assert(offsetof(FortPickerContext_GetRadialPickerOptionItem, Param_Index) == 0x000000, "Member 'FortPickerContext_GetRadialPickerOptionItem::Param_Index' has a wrong offset!");
static_assert(offsetof(FortPickerContext_GetRadialPickerOptionItem, Item) == 0x000008, "Member 'FortPickerContext_GetRadialPickerOptionItem::Item' has a wrong offset!");
static_assert(offsetof(FortPickerContext_GetRadialPickerOptionItem, bOptionEnabled) == 0x000010, "Member 'FortPickerContext_GetRadialPickerOptionItem::bOptionEnabled' has a wrong offset!");

// Function FortniteUI.FortPickerContext.UseLeftThumbstick
// 0x0001 (0x0001 - 0x0000)
struct FortPickerContext_UseLeftThumbstick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickerContext_UseLeftThumbstick) == 0x000001, "Wrong alignment on FortPickerContext_UseLeftThumbstick");
static_assert(sizeof(FortPickerContext_UseLeftThumbstick) == 0x000001, "Wrong size on FortPickerContext_UseLeftThumbstick");
static_assert(offsetof(FortPickerContext_UseLeftThumbstick, ReturnValue) == 0x000000, "Member 'FortPickerContext_UseLeftThumbstick::ReturnValue' has a wrong offset!");

// Function FortniteUI.PowTimerWidgetBase.NewRespawnTime
// 0x0004 (0x0004 - 0x0000)
struct PowTimerWidgetBase_NewRespawnTime final
{
public:
	int32                                         NewTimeRemaining;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowTimerWidgetBase_NewRespawnTime) == 0x000004, "Wrong alignment on PowTimerWidgetBase_NewRespawnTime");
static_assert(sizeof(PowTimerWidgetBase_NewRespawnTime) == 0x000004, "Wrong size on PowTimerWidgetBase_NewRespawnTime");
static_assert(offsetof(PowTimerWidgetBase_NewRespawnTime, NewTimeRemaining) == 0x000000, "Member 'PowTimerWidgetBase_NewRespawnTime::NewTimeRemaining' has a wrong offset!");

// Function FortniteUI.PowTimerWidgetBase.OnUpdatedRespawnTime
// 0x0008 (0x0008 - 0x0000)
struct PowTimerWidgetBase_OnUpdatedRespawnTime final
{
public:
	int32                                         Minutes;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowTimerWidgetBase_OnUpdatedRespawnTime) == 0x000004, "Wrong alignment on PowTimerWidgetBase_OnUpdatedRespawnTime");
static_assert(sizeof(PowTimerWidgetBase_OnUpdatedRespawnTime) == 0x000008, "Wrong size on PowTimerWidgetBase_OnUpdatedRespawnTime");
static_assert(offsetof(PowTimerWidgetBase_OnUpdatedRespawnTime, Minutes) == 0x000000, "Member 'PowTimerWidgetBase_OnUpdatedRespawnTime::Minutes' has a wrong offset!");
static_assert(offsetof(PowTimerWidgetBase_OnUpdatedRespawnTime, Seconds) == 0x000004, "Member 'PowTimerWidgetBase_OnUpdatedRespawnTime::Seconds' has a wrong offset!");

// Function FortniteUI.FortPlayerPowerRatingToast.SetToast
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPowerRatingToast_SetToast final
{
public:
	class UFortUINotification*                    Notification;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPowerRatingToast_SetToast) == 0x000008, "Wrong alignment on FortPlayerPowerRatingToast_SetToast");
static_assert(sizeof(FortPlayerPowerRatingToast_SetToast) == 0x000008, "Wrong size on FortPlayerPowerRatingToast_SetToast");
static_assert(offsetof(FortPlayerPowerRatingToast_SetToast, Notification) == 0x000000, "Member 'FortPlayerPowerRatingToast_SetToast::Notification' has a wrong offset!");

// Function FortniteUI.SeasonPassLevelWidget.OnAttemptClaimFinished
// 0x0002 (0x0002 - 0x0000)
struct SeasonPassLevelWidget_OnAttemptClaimFinished final
{
public:
	bool                                          FreeClaimed;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PaidClaimed;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLevelWidget_OnAttemptClaimFinished) == 0x000001, "Wrong alignment on SeasonPassLevelWidget_OnAttemptClaimFinished");
static_assert(sizeof(SeasonPassLevelWidget_OnAttemptClaimFinished) == 0x000002, "Wrong size on SeasonPassLevelWidget_OnAttemptClaimFinished");
static_assert(offsetof(SeasonPassLevelWidget_OnAttemptClaimFinished, FreeClaimed) == 0x000000, "Member 'SeasonPassLevelWidget_OnAttemptClaimFinished::FreeClaimed' has a wrong offset!");
static_assert(offsetof(SeasonPassLevelWidget_OnAttemptClaimFinished, PaidClaimed) == 0x000001, "Member 'SeasonPassLevelWidget_OnAttemptClaimFinished::PaidClaimed' has a wrong offset!");

// Function FortniteUI.SeasonPassLevelWidget.OnLockedStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct SeasonPassLevelWidget_OnLockedStatusChanged final
{
public:
	bool                                          FreeUnlocked;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PaidUnlocked;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLevelWidget_OnLockedStatusChanged) == 0x000001, "Wrong alignment on SeasonPassLevelWidget_OnLockedStatusChanged");
static_assert(sizeof(SeasonPassLevelWidget_OnLockedStatusChanged) == 0x000002, "Wrong size on SeasonPassLevelWidget_OnLockedStatusChanged");
static_assert(offsetof(SeasonPassLevelWidget_OnLockedStatusChanged, FreeUnlocked) == 0x000000, "Member 'SeasonPassLevelWidget_OnLockedStatusChanged::FreeUnlocked' has a wrong offset!");
static_assert(offsetof(SeasonPassLevelWidget_OnLockedStatusChanged, PaidUnlocked) == 0x000001, "Member 'SeasonPassLevelWidget_OnLockedStatusChanged::PaidUnlocked' has a wrong offset!");

// Function FortniteUI.SeasonPassLevelWidget.GetLevelInfo
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassLevelWidget_GetLevelInfo final
{
public:
	class UFortSeasonPassLevelInfo*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLevelWidget_GetLevelInfo) == 0x000008, "Wrong alignment on SeasonPassLevelWidget_GetLevelInfo");
static_assert(sizeof(SeasonPassLevelWidget_GetLevelInfo) == 0x000008, "Wrong size on SeasonPassLevelWidget_GetLevelInfo");
static_assert(offsetof(SeasonPassLevelWidget_GetLevelInfo, ReturnValue) == 0x000000, "Member 'SeasonPassLevelWidget_GetLevelInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerProfileBannerEditor.SetBannerColor
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerProfileBannerEditor_SetBannerColor final
{
public:
	class FName                                   Color;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerProfileBannerEditor_SetBannerColor) == 0x000004, "Wrong alignment on FortPlayerProfileBannerEditor_SetBannerColor");
static_assert(sizeof(FortPlayerProfileBannerEditor_SetBannerColor) == 0x000008, "Wrong size on FortPlayerProfileBannerEditor_SetBannerColor");
static_assert(offsetof(FortPlayerProfileBannerEditor_SetBannerColor, Color) == 0x000000, "Member 'FortPlayerProfileBannerEditor_SetBannerColor::Color' has a wrong offset!");

// Function FortniteUI.FortPlayerProfileBannerEditor.SetBannerIcon
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerProfileBannerEditor_SetBannerIcon final
{
public:
	class FName                                   Icon;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerProfileBannerEditor_SetBannerIcon) == 0x000004, "Wrong alignment on FortPlayerProfileBannerEditor_SetBannerIcon");
static_assert(sizeof(FortPlayerProfileBannerEditor_SetBannerIcon) == 0x000008, "Wrong size on FortPlayerProfileBannerEditor_SetBannerIcon");
static_assert(offsetof(FortPlayerProfileBannerEditor_SetBannerIcon, Icon) == 0x000000, "Member 'FortPlayerProfileBannerEditor_SetBannerIcon::Icon' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetBase.HandleAnswerChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerSurveyAnswerWidgetBase_HandleAnswerChanged final
{
public:
	struct FFortPlayerSurveyAnswerContainerChangeEventInfo EventInfo;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetBase_HandleAnswerChanged) == 0x000001, "Wrong alignment on FortPlayerSurveyAnswerWidgetBase_HandleAnswerChanged");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetBase_HandleAnswerChanged) == 0x000001, "Wrong size on FortPlayerSurveyAnswerWidgetBase_HandleAnswerChanged");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_HandleAnswerChanged, EventInfo) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetBase_HandleAnswerChanged::EventInfo' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetBase.NativeHandleAnswerChanged
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyAnswerWidgetBase_NativeHandleAnswerChanged final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortPlayerSurveyAnswerContainerChangeEventInfo EventInfo;                                         // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetBase_NativeHandleAnswerChanged) == 0x000008, "Wrong alignment on FortPlayerSurveyAnswerWidgetBase_NativeHandleAnswerChanged");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetBase_NativeHandleAnswerChanged) == 0x000010, "Wrong size on FortPlayerSurveyAnswerWidgetBase_NativeHandleAnswerChanged");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_NativeHandleAnswerChanged, Source) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetBase_NativeHandleAnswerChanged::Source' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_NativeHandleAnswerChanged, EventInfo) == 0x000008, "Member 'FortPlayerSurveyAnswerWidgetBase_NativeHandleAnswerChanged::EventInfo' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetBase.RestartStopwatch
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyAnswerWidgetBase_RestartStopwatch final
{
public:
	struct FTimespan                              StartTime;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetBase_RestartStopwatch) == 0x000008, "Wrong alignment on FortPlayerSurveyAnswerWidgetBase_RestartStopwatch");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetBase_RestartStopwatch) == 0x000008, "Wrong size on FortPlayerSurveyAnswerWidgetBase_RestartStopwatch");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_RestartStopwatch, StartTime) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetBase_RestartStopwatch::StartTime' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetBase.SetAnswerContainer
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyAnswerWidgetBase_SetAnswerContainer final
{
public:
	TScriptInterface<class IFortPlayerSurveyAnswerContainer> Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetBase_SetAnswerContainer) == 0x000008, "Wrong alignment on FortPlayerSurveyAnswerWidgetBase_SetAnswerContainer");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetBase_SetAnswerContainer) == 0x000010, "Wrong size on FortPlayerSurveyAnswerWidgetBase_SetAnswerContainer");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_SetAnswerContainer, Value) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetBase_SetAnswerContainer::Value' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetBase.SetQuestion
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyAnswerWidgetBase_SetQuestion final
{
public:
	class UFortPlayerSurveyQuestion*              Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetBase_SetQuestion) == 0x000008, "Wrong alignment on FortPlayerSurveyAnswerWidgetBase_SetQuestion");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetBase_SetQuestion) == 0x000008, "Wrong size on FortPlayerSurveyAnswerWidgetBase_SetQuestion");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_SetQuestion, Value) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetBase_SetQuestion::Value' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetBase.GetAnswerContainer
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyAnswerWidgetBase_GetAnswerContainer final
{
public:
	TScriptInterface<class IFortPlayerSurveyAnswerContainer> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetBase_GetAnswerContainer) == 0x000008, "Wrong alignment on FortPlayerSurveyAnswerWidgetBase_GetAnswerContainer");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetBase_GetAnswerContainer) == 0x000010, "Wrong size on FortPlayerSurveyAnswerWidgetBase_GetAnswerContainer");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_GetAnswerContainer, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetBase_GetAnswerContainer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetBase.GetDefaultFocusedWidget
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyAnswerWidgetBase_GetDefaultFocusedWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetBase_GetDefaultFocusedWidget) == 0x000008, "Wrong alignment on FortPlayerSurveyAnswerWidgetBase_GetDefaultFocusedWidget");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetBase_GetDefaultFocusedWidget) == 0x000008, "Wrong size on FortPlayerSurveyAnswerWidgetBase_GetDefaultFocusedWidget");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_GetDefaultFocusedWidget, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetBase_GetDefaultFocusedWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetBase.GetQuestion
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyAnswerWidgetBase_GetQuestion final
{
public:
	class UFortPlayerSurveyQuestion*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetBase_GetQuestion) == 0x000008, "Wrong alignment on FortPlayerSurveyAnswerWidgetBase_GetQuestion");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetBase_GetQuestion) == 0x000008, "Wrong size on FortPlayerSurveyAnswerWidgetBase_GetQuestion");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_GetQuestion, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetBase_GetQuestion::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetBase.GetStopwatchTime
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyAnswerWidgetBase_GetStopwatchTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetBase_GetStopwatchTime) == 0x000008, "Wrong alignment on FortPlayerSurveyAnswerWidgetBase_GetStopwatchTime");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetBase_GetStopwatchTime) == 0x000008, "Wrong size on FortPlayerSurveyAnswerWidgetBase_GetStopwatchTime");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_GetStopwatchTime, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetBase_GetStopwatchTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetBase.GetSubtitleText
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerSurveyAnswerWidgetBase_GetSubtitleText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetBase_GetSubtitleText) == 0x000008, "Wrong alignment on FortPlayerSurveyAnswerWidgetBase_GetSubtitleText");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetBase_GetSubtitleText) == 0x000018, "Wrong size on FortPlayerSurveyAnswerWidgetBase_GetSubtitleText");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_GetSubtitleText, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetBase_GetSubtitleText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetBase.IsCurrentAnswerValid
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerSurveyAnswerWidgetBase_IsCurrentAnswerValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetBase_IsCurrentAnswerValid) == 0x000001, "Wrong alignment on FortPlayerSurveyAnswerWidgetBase_IsCurrentAnswerValid");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetBase_IsCurrentAnswerValid) == 0x000001, "Wrong size on FortPlayerSurveyAnswerWidgetBase_IsCurrentAnswerValid");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetBase_IsCurrentAnswerValid, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetBase_IsCurrentAnswerValid::ReturnValue' has a wrong offset!");

// Function FortniteUI.MashScoreEventWidgetBase.OnScoreEvent
// 0x0028 (0x0028 - 0x0000)
struct MashScoreEventWidgetBase_OnScoreEvent final
{
public:
	int32                                         ScoreValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ScoreText;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMashScoreEvent                               ScoreEventType;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MashScoreEventWidgetBase_OnScoreEvent) == 0x000008, "Wrong alignment on MashScoreEventWidgetBase_OnScoreEvent");
static_assert(sizeof(MashScoreEventWidgetBase_OnScoreEvent) == 0x000028, "Wrong size on MashScoreEventWidgetBase_OnScoreEvent");
static_assert(offsetof(MashScoreEventWidgetBase_OnScoreEvent, ScoreValue) == 0x000000, "Member 'MashScoreEventWidgetBase_OnScoreEvent::ScoreValue' has a wrong offset!");
static_assert(offsetof(MashScoreEventWidgetBase_OnScoreEvent, ScoreText) == 0x000008, "Member 'MashScoreEventWidgetBase_OnScoreEvent::ScoreText' has a wrong offset!");
static_assert(offsetof(MashScoreEventWidgetBase_OnScoreEvent, ScoreEventType) == 0x000020, "Member 'MashScoreEventWidgetBase_OnScoreEvent::ScoreEventType' has a wrong offset!");

// Function FortniteUI.MashScoreEventWidgetBase.OnStreakScoreMultiplierCountdownUpdated
// 0x0004 (0x0004 - 0x0000)
struct MashScoreEventWidgetBase_OnStreakScoreMultiplierCountdownUpdated final
{
public:
	float                                         RemainingTimeBeforeReset;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashScoreEventWidgetBase_OnStreakScoreMultiplierCountdownUpdated) == 0x000004, "Wrong alignment on MashScoreEventWidgetBase_OnStreakScoreMultiplierCountdownUpdated");
static_assert(sizeof(MashScoreEventWidgetBase_OnStreakScoreMultiplierCountdownUpdated) == 0x000004, "Wrong size on MashScoreEventWidgetBase_OnStreakScoreMultiplierCountdownUpdated");
static_assert(offsetof(MashScoreEventWidgetBase_OnStreakScoreMultiplierCountdownUpdated, RemainingTimeBeforeReset) == 0x000000, "Member 'MashScoreEventWidgetBase_OnStreakScoreMultiplierCountdownUpdated::RemainingTimeBeforeReset' has a wrong offset!");

// Function FortniteUI.MashScoreEventWidgetBase.OnStreakScoreMultiplierKillCountUpdated
// 0x0008 (0x0008 - 0x0000)
struct MashScoreEventWidgetBase_OnStreakScoreMultiplierKillCountUpdated final
{
public:
	int32                                         TotalStreakKillCount;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StreakLevelProgressRatio;                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashScoreEventWidgetBase_OnStreakScoreMultiplierKillCountUpdated) == 0x000004, "Wrong alignment on MashScoreEventWidgetBase_OnStreakScoreMultiplierKillCountUpdated");
static_assert(sizeof(MashScoreEventWidgetBase_OnStreakScoreMultiplierKillCountUpdated) == 0x000008, "Wrong size on MashScoreEventWidgetBase_OnStreakScoreMultiplierKillCountUpdated");
static_assert(offsetof(MashScoreEventWidgetBase_OnStreakScoreMultiplierKillCountUpdated, TotalStreakKillCount) == 0x000000, "Member 'MashScoreEventWidgetBase_OnStreakScoreMultiplierKillCountUpdated::TotalStreakKillCount' has a wrong offset!");
static_assert(offsetof(MashScoreEventWidgetBase_OnStreakScoreMultiplierKillCountUpdated, StreakLevelProgressRatio) == 0x000004, "Member 'MashScoreEventWidgetBase_OnStreakScoreMultiplierKillCountUpdated::StreakLevelProgressRatio' has a wrong offset!");

// Function FortniteUI.MashScoreEventWidgetBase.OnStreakScoreMultiplierUpdated
// 0x0008 (0x0008 - 0x0000)
struct MashScoreEventWidgetBase_OnStreakScoreMultiplierUpdated final
{
public:
	uint8                                         StreakScoreLevel;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxStreakScoreLevel;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScoreMultiplier;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashScoreEventWidgetBase_OnStreakScoreMultiplierUpdated) == 0x000004, "Wrong alignment on MashScoreEventWidgetBase_OnStreakScoreMultiplierUpdated");
static_assert(sizeof(MashScoreEventWidgetBase_OnStreakScoreMultiplierUpdated) == 0x000008, "Wrong size on MashScoreEventWidgetBase_OnStreakScoreMultiplierUpdated");
static_assert(offsetof(MashScoreEventWidgetBase_OnStreakScoreMultiplierUpdated, StreakScoreLevel) == 0x000000, "Member 'MashScoreEventWidgetBase_OnStreakScoreMultiplierUpdated::StreakScoreLevel' has a wrong offset!");
static_assert(offsetof(MashScoreEventWidgetBase_OnStreakScoreMultiplierUpdated, MaxStreakScoreLevel) == 0x000001, "Member 'MashScoreEventWidgetBase_OnStreakScoreMultiplierUpdated::MaxStreakScoreLevel' has a wrong offset!");
static_assert(offsetof(MashScoreEventWidgetBase_OnStreakScoreMultiplierUpdated, ScoreMultiplier) == 0x000004, "Member 'MashScoreEventWidgetBase_OnStreakScoreMultiplierUpdated::ScoreMultiplier' has a wrong offset!");

// DelegateFunction FortniteUI.FortPlayerSurveyAnswerWidgetDataTable.ForEachDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyAnswerWidgetDataTable_ForEachDelegate__DelegateSignature final
{
public:
	EFortPlayerSurveyQuestionType                 QuestionType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPlayerSurveyQuestionPresentationStyle    PresentationStyle;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortPlayerSurveyAnswerWidgetBase> WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetDataTable_ForEachDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortPlayerSurveyAnswerWidgetDataTable_ForEachDelegate__DelegateSignature");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetDataTable_ForEachDelegate__DelegateSignature) == 0x000010, "Wrong size on FortPlayerSurveyAnswerWidgetDataTable_ForEachDelegate__DelegateSignature");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetDataTable_ForEachDelegate__DelegateSignature, QuestionType) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetDataTable_ForEachDelegate__DelegateSignature::QuestionType' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetDataTable_ForEachDelegate__DelegateSignature, PresentationStyle) == 0x000001, "Member 'FortPlayerSurveyAnswerWidgetDataTable_ForEachDelegate__DelegateSignature::PresentationStyle' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetDataTable_ForEachDelegate__DelegateSignature, WidgetClass) == 0x000008, "Member 'FortPlayerSurveyAnswerWidgetDataTable_ForEachDelegate__DelegateSignature::WidgetClass' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetDataTable.ForEach
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyAnswerWidgetDataTable_ForEach final
{
public:
	TDelegate<void(EFortPlayerSurveyQuestionType QuestionType, EFortPlayerSurveyQuestionPresentationStyle PresentationStyle, TSubclassOf<class UFortPlayerSurveyAnswerWidgetBase> WidgetClass)> Delegate;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetDataTable_ForEach) == 0x000004, "Wrong alignment on FortPlayerSurveyAnswerWidgetDataTable_ForEach");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetDataTable_ForEach) == 0x000010, "Wrong size on FortPlayerSurveyAnswerWidgetDataTable_ForEach");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetDataTable_ForEach, Delegate) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetDataTable_ForEach::Delegate' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyAnswerWidgetDataTable.GetClassForSurvey
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyAnswerWidgetDataTable_GetClassForSurvey final
{
public:
	EFortPlayerSurveyQuestionType                 QuestionType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPlayerSurveyQuestionPresentationStyle    PresentationStyle;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortPlayerSurveyAnswerWidgetBase> ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyAnswerWidgetDataTable_GetClassForSurvey) == 0x000008, "Wrong alignment on FortPlayerSurveyAnswerWidgetDataTable_GetClassForSurvey");
static_assert(sizeof(FortPlayerSurveyAnswerWidgetDataTable_GetClassForSurvey) == 0x000010, "Wrong size on FortPlayerSurveyAnswerWidgetDataTable_GetClassForSurvey");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetDataTable_GetClassForSurvey, QuestionType) == 0x000000, "Member 'FortPlayerSurveyAnswerWidgetDataTable_GetClassForSurvey::QuestionType' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetDataTable_GetClassForSurvey, PresentationStyle) == 0x000001, "Member 'FortPlayerSurveyAnswerWidgetDataTable_GetClassForSurvey::PresentationStyle' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyAnswerWidgetDataTable_GetClassForSurvey, ReturnValue) == 0x000008, "Member 'FortPlayerSurveyAnswerWidgetDataTable_GetClassForSurvey::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyMultipleChoiceAnswerWidgetBase.SetCurrentAnswer
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyMultipleChoiceAnswerWidgetBase_SetCurrentAnswer final
{
public:
	struct FFortPlayerSurveyAnswerMultipleChoice  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyMultipleChoiceAnswerWidgetBase_SetCurrentAnswer) == 0x000008, "Wrong alignment on FortPlayerSurveyMultipleChoiceAnswerWidgetBase_SetCurrentAnswer");
static_assert(sizeof(FortPlayerSurveyMultipleChoiceAnswerWidgetBase_SetCurrentAnswer) == 0x000010, "Wrong size on FortPlayerSurveyMultipleChoiceAnswerWidgetBase_SetCurrentAnswer");
static_assert(offsetof(FortPlayerSurveyMultipleChoiceAnswerWidgetBase_SetCurrentAnswer, Value) == 0x000000, "Member 'FortPlayerSurveyMultipleChoiceAnswerWidgetBase_SetCurrentAnswer::Value' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyMultipleChoiceAnswerWidgetBase.GetCurrentAnswer
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentAnswer final
{
public:
	bool                                          bOutIsSet;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortPlayerSurveyAnswerMultipleChoice  OutAnswer;                                         // 0x0008(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentAnswer) == 0x000008, "Wrong alignment on FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentAnswer");
static_assert(sizeof(FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentAnswer) == 0x000018, "Wrong size on FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentAnswer");
static_assert(offsetof(FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentAnswer, bOutIsSet) == 0x000000, "Member 'FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentAnswer::bOutIsSet' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentAnswer, OutAnswer) == 0x000008, "Member 'FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentAnswer::OutAnswer' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyMultipleChoiceAnswerWidgetBase.GetCurrentQuestion
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentQuestion final
{
public:
	class UFortPlayerSurveyQuestionMultipleChoice* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentQuestion) == 0x000008, "Wrong alignment on FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentQuestion");
static_assert(sizeof(FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentQuestion) == 0x000008, "Wrong size on FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentQuestion");
static_assert(offsetof(FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentQuestion, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyMultipleChoiceAnswerWidgetBase_GetCurrentQuestion::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase.HandleButtonClicked
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonClicked final
{
public:
	int32                                         ButtonIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonClicked) == 0x000004, "Wrong alignment on FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonClicked");
static_assert(sizeof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonClicked) == 0x000004, "Wrong size on FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonClicked");
static_assert(offsetof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonClicked, ButtonIndex) == 0x000000, "Member 'FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonClicked::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase.HandleButtonFocused
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonFocused final
{
public:
	int32                                         ButtonIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonFocused) == 0x000004, "Wrong alignment on FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonFocused");
static_assert(sizeof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonFocused) == 0x000004, "Wrong size on FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonFocused");
static_assert(offsetof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonFocused, ButtonIndex) == 0x000000, "Member 'FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_HandleButtonFocused::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase.NativeHandleButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_NativeHandleButtonClicked final
{
public:
	class UCommonButton*                          AssociatedButton;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_NativeHandleButtonClicked) == 0x000008, "Wrong alignment on FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_NativeHandleButtonClicked");
static_assert(sizeof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_NativeHandleButtonClicked) == 0x000010, "Wrong size on FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_NativeHandleButtonClicked");
static_assert(offsetof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_NativeHandleButtonClicked, AssociatedButton) == 0x000000, "Member 'FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_NativeHandleButtonClicked::AssociatedButton' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_NativeHandleButtonClicked, ButtonIndex) == 0x000008, "Member 'FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_NativeHandleButtonClicked::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase.SetChoiceButtons
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetChoiceButtons final
{
public:
	TArray<class UWidget*>                        InButtonContainerWidgets;                          // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UCommonButton*>                  InButtonWidgets;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetChoiceButtons) == 0x000008, "Wrong alignment on FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetChoiceButtons");
static_assert(sizeof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetChoiceButtons) == 0x000020, "Wrong size on FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetChoiceButtons");
static_assert(offsetof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetChoiceButtons, InButtonContainerWidgets) == 0x000000, "Member 'FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetChoiceButtons::InButtonContainerWidgets' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetChoiceButtons, InButtonWidgets) == 0x000010, "Member 'FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetChoiceButtons::InButtonWidgets' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase.SetNumDisplayedChoiceButtons
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetNumDisplayedChoiceButtons final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetNumDisplayedChoiceButtons) == 0x000004, "Wrong alignment on FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetNumDisplayedChoiceButtons");
static_assert(sizeof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetNumDisplayedChoiceButtons) == 0x000004, "Wrong size on FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetNumDisplayedChoiceButtons");
static_assert(offsetof(FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetNumDisplayedChoiceButtons, Value) == 0x000000, "Member 'FortPlayerSurveyButtonGroupMultipleChoiceAnswerWidgetBase_SetNumDisplayedChoiceButtons::Value' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyMultipleSelectionAnswerWidgetBase.SetChoiceSelected
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetChoiceSelected final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetChoiceSelected) == 0x000004, "Wrong alignment on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetChoiceSelected");
static_assert(sizeof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetChoiceSelected) == 0x000008, "Wrong size on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetChoiceSelected");
static_assert(offsetof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetChoiceSelected, Param_Index) == 0x000000, "Member 'FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetChoiceSelected::Param_Index' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetChoiceSelected, Value) == 0x000004, "Member 'FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetChoiceSelected::Value' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyMultipleSelectionAnswerWidgetBase.SetCurrentAnswer
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetCurrentAnswer final
{
public:
	struct FFortPlayerSurveyAnswerMultipleSelection Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetCurrentAnswer) == 0x000008, "Wrong alignment on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetCurrentAnswer");
static_assert(sizeof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetCurrentAnswer) == 0x000018, "Wrong size on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetCurrentAnswer");
static_assert(offsetof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetCurrentAnswer, Value) == 0x000000, "Member 'FortPlayerSurveyMultipleSelectionAnswerWidgetBase_SetCurrentAnswer::Value' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyMultipleSelectionAnswerWidgetBase.CanToggleChoice
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyMultipleSelectionAnswerWidgetBase_CanToggleChoice final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_CanToggleChoice) == 0x000004, "Wrong alignment on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_CanToggleChoice");
static_assert(sizeof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_CanToggleChoice) == 0x000008, "Wrong size on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_CanToggleChoice");
static_assert(offsetof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_CanToggleChoice, Param_Index) == 0x000000, "Member 'FortPlayerSurveyMultipleSelectionAnswerWidgetBase_CanToggleChoice::Param_Index' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_CanToggleChoice, ReturnValue) == 0x000004, "Member 'FortPlayerSurveyMultipleSelectionAnswerWidgetBase_CanToggleChoice::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyMultipleSelectionAnswerWidgetBase.GetCurrentAnswer
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentAnswer final
{
public:
	bool                                          bOutIsSet;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortPlayerSurveyAnswerMultipleSelection OutAnswer;                                         // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentAnswer) == 0x000008, "Wrong alignment on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentAnswer");
static_assert(sizeof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentAnswer) == 0x000020, "Wrong size on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentAnswer");
static_assert(offsetof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentAnswer, bOutIsSet) == 0x000000, "Member 'FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentAnswer::bOutIsSet' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentAnswer, OutAnswer) == 0x000008, "Member 'FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentAnswer::OutAnswer' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyMultipleSelectionAnswerWidgetBase.GetCurrentQuestion
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentQuestion final
{
public:
	class UFortPlayerSurveyQuestionMultipleSelection* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentQuestion) == 0x000008, "Wrong alignment on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentQuestion");
static_assert(sizeof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentQuestion) == 0x000008, "Wrong size on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentQuestion");
static_assert(offsetof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentQuestion, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetCurrentQuestion::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyMultipleSelectionAnswerWidgetBase.GetNumChoicesSelected
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetNumChoicesSelected final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetNumChoicesSelected) == 0x000004, "Wrong alignment on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetNumChoicesSelected");
static_assert(sizeof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetNumChoicesSelected) == 0x000004, "Wrong size on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetNumChoicesSelected");
static_assert(offsetof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetNumChoicesSelected, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyMultipleSelectionAnswerWidgetBase_GetNumChoicesSelected::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyMultipleSelectionAnswerWidgetBase.IsChoiceSelected
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyMultipleSelectionAnswerWidgetBase_IsChoiceSelected final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_IsChoiceSelected) == 0x000004, "Wrong alignment on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_IsChoiceSelected");
static_assert(sizeof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_IsChoiceSelected) == 0x000008, "Wrong size on FortPlayerSurveyMultipleSelectionAnswerWidgetBase_IsChoiceSelected");
static_assert(offsetof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_IsChoiceSelected, Param_Index) == 0x000000, "Member 'FortPlayerSurveyMultipleSelectionAnswerWidgetBase_IsChoiceSelected::Param_Index' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyMultipleSelectionAnswerWidgetBase_IsChoiceSelected, ReturnValue) == 0x000004, "Member 'FortPlayerSurveyMultipleSelectionAnswerWidgetBase_IsChoiceSelected::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase.HandleButtonClicked
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_HandleButtonClicked final
{
public:
	int32                                         ButtonIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_HandleButtonClicked) == 0x000004, "Wrong alignment on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_HandleButtonClicked");
static_assert(sizeof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_HandleButtonClicked) == 0x000004, "Wrong size on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_HandleButtonClicked");
static_assert(offsetof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_HandleButtonClicked, ButtonIndex) == 0x000000, "Member 'FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_HandleButtonClicked::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase.NativeHandleButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_NativeHandleButtonClicked final
{
public:
	class UCommonButton*                          AssociatedButton;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_NativeHandleButtonClicked) == 0x000008, "Wrong alignment on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_NativeHandleButtonClicked");
static_assert(sizeof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_NativeHandleButtonClicked) == 0x000008, "Wrong size on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_NativeHandleButtonClicked");
static_assert(offsetof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_NativeHandleButtonClicked, AssociatedButton) == 0x000000, "Member 'FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_NativeHandleButtonClicked::AssociatedButton' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase.SetChoiceButtons
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_SetChoiceButtons final
{
public:
	TArray<class UCommonButton*>                  InButtonWidgets;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_SetChoiceButtons) == 0x000008, "Wrong alignment on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_SetChoiceButtons");
static_assert(sizeof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_SetChoiceButtons) == 0x000010, "Wrong size on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_SetChoiceButtons");
static_assert(offsetof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_SetChoiceButtons, InButtonWidgets) == 0x000000, "Member 'FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_SetChoiceButtons::InButtonWidgets' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase.FindButtonIndex
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_FindButtonIndex final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_FindButtonIndex) == 0x000008, "Wrong alignment on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_FindButtonIndex");
static_assert(sizeof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_FindButtonIndex) == 0x000010, "Wrong size on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_FindButtonIndex");
static_assert(offsetof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_FindButtonIndex, Button) == 0x000000, "Member 'FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_FindButtonIndex::Button' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_FindButtonIndex, ReturnValue) == 0x000008, "Member 'FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_FindButtonIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase.GetButtonAtIndex
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetButtonAtIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetButtonAtIndex) == 0x000008, "Wrong alignment on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetButtonAtIndex");
static_assert(sizeof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetButtonAtIndex) == 0x000010, "Wrong size on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetButtonAtIndex");
static_assert(offsetof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetButtonAtIndex, Param_Index) == 0x000000, "Member 'FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetButtonAtIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetButtonAtIndex, ReturnValue) == 0x000008, "Member 'FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetButtonAtIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase.GetFocusInfo
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetFocusInfo final
{
public:
	struct FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusInfo ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetFocusInfo) == 0x000004, "Wrong alignment on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetFocusInfo");
static_assert(sizeof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetFocusInfo) == 0x000008, "Wrong size on FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetFocusInfo");
static_assert(offsetof(FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetFocusInfo, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBase_GetFocusInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyCheatManager.EnableCMSPlayerSurvey
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyCheatManager_EnableCMSPlayerSurvey final
{
public:
	class FString                                 SurveyID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyCheatManager_EnableCMSPlayerSurvey) == 0x000008, "Wrong alignment on FortPlayerSurveyCheatManager_EnableCMSPlayerSurvey");
static_assert(sizeof(FortPlayerSurveyCheatManager_EnableCMSPlayerSurvey) == 0x000010, "Wrong size on FortPlayerSurveyCheatManager_EnableCMSPlayerSurvey");
static_assert(offsetof(FortPlayerSurveyCheatManager_EnableCMSPlayerSurvey, SurveyID) == 0x000000, "Member 'FortPlayerSurveyCheatManager_EnableCMSPlayerSurvey::SurveyID' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyCheatManager.HandleSurveyAnswerChanged
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyCheatManager_HandleSurveyAnswerChanged final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerSurveyCheatManager_HandleSurveyAnswerChanged) == 0x000008, "Wrong alignment on FortPlayerSurveyCheatManager_HandleSurveyAnswerChanged");
static_assert(sizeof(FortPlayerSurveyCheatManager_HandleSurveyAnswerChanged) == 0x000010, "Wrong size on FortPlayerSurveyCheatManager_HandleSurveyAnswerChanged");
static_assert(offsetof(FortPlayerSurveyCheatManager_HandleSurveyAnswerChanged, Source) == 0x000000, "Member 'FortPlayerSurveyCheatManager_HandleSurveyAnswerChanged::Source' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyCheatManager_HandleSurveyAnswerChanged, Param_Index) == 0x000008, "Member 'FortPlayerSurveyCheatManager_HandleSurveyAnswerChanged::Param_Index' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyCheatManager.HandleTestSurveyFinished
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyCheatManager_HandleTestSurveyFinished final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPlayerSurveyFinishReason                 Reason;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerSurveyCheatManager_HandleTestSurveyFinished) == 0x000008, "Wrong alignment on FortPlayerSurveyCheatManager_HandleTestSurveyFinished");
static_assert(sizeof(FortPlayerSurveyCheatManager_HandleTestSurveyFinished) == 0x000010, "Wrong size on FortPlayerSurveyCheatManager_HandleTestSurveyFinished");
static_assert(offsetof(FortPlayerSurveyCheatManager_HandleTestSurveyFinished, Source) == 0x000000, "Member 'FortPlayerSurveyCheatManager_HandleTestSurveyFinished::Source' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyCheatManager_HandleTestSurveyFinished, Reason) == 0x000008, "Member 'FortPlayerSurveyCheatManager_HandleTestSurveyFinished::Reason' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyCheatManager.ScheduleCMSPlayerSurvey
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerSurveyCheatManager_ScheduleCMSPlayerSurvey final
{
public:
	class FString                                 SurveyID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunSurveyNow;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerSurveyCheatManager_ScheduleCMSPlayerSurvey) == 0x000008, "Wrong alignment on FortPlayerSurveyCheatManager_ScheduleCMSPlayerSurvey");
static_assert(sizeof(FortPlayerSurveyCheatManager_ScheduleCMSPlayerSurvey) == 0x000018, "Wrong size on FortPlayerSurveyCheatManager_ScheduleCMSPlayerSurvey");
static_assert(offsetof(FortPlayerSurveyCheatManager_ScheduleCMSPlayerSurvey, SurveyID) == 0x000000, "Member 'FortPlayerSurveyCheatManager_ScheduleCMSPlayerSurvey::SurveyID' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyCheatManager_ScheduleCMSPlayerSurvey, bRunSurveyNow) == 0x000010, "Member 'FortPlayerSurveyCheatManager_ScheduleCMSPlayerSurvey::bRunSurveyNow' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyCheatManager.TestCMSPlayerSurvey
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyCheatManager_TestCMSPlayerSurvey final
{
public:
	class FString                                 SurveyID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyCheatManager_TestCMSPlayerSurvey) == 0x000008, "Wrong alignment on FortPlayerSurveyCheatManager_TestCMSPlayerSurvey");
static_assert(sizeof(FortPlayerSurveyCheatManager_TestCMSPlayerSurvey) == 0x000010, "Wrong size on FortPlayerSurveyCheatManager_TestCMSPlayerSurvey");
static_assert(offsetof(FortPlayerSurveyCheatManager_TestCMSPlayerSurvey, SurveyID) == 0x000000, "Member 'FortPlayerSurveyCheatManager_TestCMSPlayerSurvey::SurveyID' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyCheatManager.TestLocalPlayerSurvey
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerSurveyCheatManager_TestLocalPlayerSurvey final
{
public:
	TSoftObjectPtr<class UFortPlayerSurveyLocalSurveyAsset> Asset;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyCheatManager_TestLocalPlayerSurvey) == 0x000008, "Wrong alignment on FortPlayerSurveyCheatManager_TestLocalPlayerSurvey");
static_assert(sizeof(FortPlayerSurveyCheatManager_TestLocalPlayerSurvey) == 0x000028, "Wrong size on FortPlayerSurveyCheatManager_TestLocalPlayerSurvey");
static_assert(offsetof(FortPlayerSurveyCheatManager_TestLocalPlayerSurvey, Asset) == 0x000000, "Member 'FortPlayerSurveyCheatManager_TestLocalPlayerSurvey::Asset' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyCheatManager.TestPlayerSurvey
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyCheatManager_TestPlayerSurvey final
{
public:
	class UFortPlayerSurveyBase*                  Survey;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyCheatManager_TestPlayerSurvey) == 0x000008, "Wrong alignment on FortPlayerSurveyCheatManager_TestPlayerSurvey");
static_assert(sizeof(FortPlayerSurveyCheatManager_TestPlayerSurvey) == 0x000008, "Wrong size on FortPlayerSurveyCheatManager_TestPlayerSurvey");
static_assert(offsetof(FortPlayerSurveyCheatManager_TestPlayerSurvey, Survey) == 0x000000, "Member 'FortPlayerSurveyCheatManager_TestPlayerSurvey::Survey' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyCheatManager.TriggerCMSPlayerSurveys
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerSurveyCheatManager_TriggerCMSPlayerSurveys final
{
public:
	EFortPlayerSurveyTrigger                      Trigger;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunSurveyNow;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyCheatManager_TriggerCMSPlayerSurveys) == 0x000001, "Wrong alignment on FortPlayerSurveyCheatManager_TriggerCMSPlayerSurveys");
static_assert(sizeof(FortPlayerSurveyCheatManager_TriggerCMSPlayerSurveys) == 0x000002, "Wrong size on FortPlayerSurveyCheatManager_TriggerCMSPlayerSurveys");
static_assert(offsetof(FortPlayerSurveyCheatManager_TriggerCMSPlayerSurveys, Trigger) == 0x000000, "Member 'FortPlayerSurveyCheatManager_TriggerCMSPlayerSurveys::Trigger' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyCheatManager_TriggerCMSPlayerSurveys, bRunSurveyNow) == 0x000001, "Member 'FortPlayerSurveyCheatManager_TriggerCMSPlayerSurveys::bRunSurveyNow' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyCMSScheduler.HandleSurveyFinished
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyCMSScheduler_HandleSurveyFinished final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPlayerSurveyFinishReason                 Reason;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerSurveyCMSScheduler_HandleSurveyFinished) == 0x000008, "Wrong alignment on FortPlayerSurveyCMSScheduler_HandleSurveyFinished");
static_assert(sizeof(FortPlayerSurveyCMSScheduler_HandleSurveyFinished) == 0x000010, "Wrong size on FortPlayerSurveyCMSScheduler_HandleSurveyFinished");
static_assert(offsetof(FortPlayerSurveyCMSScheduler_HandleSurveyFinished, Source) == 0x000000, "Member 'FortPlayerSurveyCMSScheduler_HandleSurveyFinished::Source' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyCMSScheduler_HandleSurveyFinished, Reason) == 0x000008, "Member 'FortPlayerSurveyCMSScheduler_HandleSurveyFinished::Reason' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemPickerTileButton.HandleItemSlottedToDifferentSquad
// 0x000C (0x000C - 0x0000)
struct FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad final
{
public:
	struct FHomebaseSquadSlotId                   SquadSlotId;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad) == 0x000004, "Wrong alignment on FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad");
static_assert(sizeof(FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad) == 0x00000C, "Wrong size on FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad");
static_assert(offsetof(FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad, SquadSlotId) == 0x000000, "Member 'FortSquadSlotItemPickerTileButton_HandleItemSlottedToDifferentSquad::SquadSlotId' has a wrong offset!");

// Function FortniteUI.FortSquadSlotItemPickerTileButton.GetSlottingRestrictionReasons
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons final
{
public:
	TArray<EFortSquadSlottingRestrictionReason>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons) == 0x000008, "Wrong alignment on FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons");
static_assert(sizeof(FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons) == 0x000010, "Wrong size on FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons");
static_assert(offsetof(FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons, ReturnValue) == 0x000000, "Member 'FortSquadSlotItemPickerTileButton_GetSlottingRestrictionReasons::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyContext.IsPlayerSurveySystemEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerSurveyContext_IsPlayerSurveySystemEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyContext_IsPlayerSurveySystemEnabled) == 0x000001, "Wrong alignment on FortPlayerSurveyContext_IsPlayerSurveySystemEnabled");
static_assert(sizeof(FortPlayerSurveyContext_IsPlayerSurveySystemEnabled) == 0x000001, "Wrong size on FortPlayerSurveyContext_IsPlayerSurveySystemEnabled");
static_assert(offsetof(FortPlayerSurveyContext_IsPlayerSurveySystemEnabled, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyContext_IsPlayerSurveySystemEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyContext.GetPlayerSurveyManager
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyContext_GetPlayerSurveyManager final
{
public:
	class UFortPlayerSurveyManager*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyContext_GetPlayerSurveyManager) == 0x000008, "Wrong alignment on FortPlayerSurveyContext_GetPlayerSurveyManager");
static_assert(sizeof(FortPlayerSurveyContext_GetPlayerSurveyManager) == 0x000008, "Wrong size on FortPlayerSurveyContext_GetPlayerSurveyManager");
static_assert(offsetof(FortPlayerSurveyContext_GetPlayerSurveyManager, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyContext_GetPlayerSurveyManager::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteUI.FortPlayerSurveyDispatcher.AllSurveysFinished__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyDispatcher_AllSurveysFinished__DelegateSignature final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyDispatcher_AllSurveysFinished__DelegateSignature) == 0x000008, "Wrong alignment on FortPlayerSurveyDispatcher_AllSurveysFinished__DelegateSignature");
static_assert(sizeof(FortPlayerSurveyDispatcher_AllSurveysFinished__DelegateSignature) == 0x000008, "Wrong size on FortPlayerSurveyDispatcher_AllSurveysFinished__DelegateSignature");
static_assert(offsetof(FortPlayerSurveyDispatcher_AllSurveysFinished__DelegateSignature, Source) == 0x000000, "Member 'FortPlayerSurveyDispatcher_AllSurveysFinished__DelegateSignature::Source' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyDispatcher.DisplaySurveys
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerSurveyDispatcher_DisplaySurveys final
{
public:
	int32                                         SurveyCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyDispatcher_DisplaySurveys) == 0x000004, "Wrong alignment on FortPlayerSurveyDispatcher_DisplaySurveys");
static_assert(sizeof(FortPlayerSurveyDispatcher_DisplaySurveys) == 0x000004, "Wrong size on FortPlayerSurveyDispatcher_DisplaySurveys");
static_assert(offsetof(FortPlayerSurveyDispatcher_DisplaySurveys, SurveyCount) == 0x000000, "Member 'FortPlayerSurveyDispatcher_DisplaySurveys::SurveyCount' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyDispatcher.DisplaySurveyWidget
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyDispatcher_DisplaySurveyWidget final
{
public:
	class UFortPlayerSurveyPanelBase*             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyDispatcher_DisplaySurveyWidget) == 0x000008, "Wrong alignment on FortPlayerSurveyDispatcher_DisplaySurveyWidget");
static_assert(sizeof(FortPlayerSurveyDispatcher_DisplaySurveyWidget) == 0x000008, "Wrong size on FortPlayerSurveyDispatcher_DisplaySurveyWidget");
static_assert(offsetof(FortPlayerSurveyDispatcher_DisplaySurveyWidget, Widget) == 0x000000, "Member 'FortPlayerSurveyDispatcher_DisplaySurveyWidget::Widget' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyDispatcher.HandleSurveyDismissed
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyDispatcher_HandleSurveyDismissed final
{
public:
	class UFortPlayerSurveyPanelBase*             Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyDispatcher_HandleSurveyDismissed) == 0x000008, "Wrong alignment on FortPlayerSurveyDispatcher_HandleSurveyDismissed");
static_assert(sizeof(FortPlayerSurveyDispatcher_HandleSurveyDismissed) == 0x000008, "Wrong size on FortPlayerSurveyDispatcher_HandleSurveyDismissed");
static_assert(offsetof(FortPlayerSurveyDispatcher_HandleSurveyDismissed, Source) == 0x000000, "Member 'FortPlayerSurveyDispatcher_HandleSurveyDismissed::Source' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyDispatcher.RemoveSurveyWidget
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyDispatcher_RemoveSurveyWidget final
{
public:
	class UFortPlayerSurveyPanelBase*             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyDispatcher_RemoveSurveyWidget) == 0x000008, "Wrong alignment on FortPlayerSurveyDispatcher_RemoveSurveyWidget");
static_assert(sizeof(FortPlayerSurveyDispatcher_RemoveSurveyWidget) == 0x000008, "Wrong size on FortPlayerSurveyDispatcher_RemoveSurveyWidget");
static_assert(offsetof(FortPlayerSurveyDispatcher_RemoveSurveyWidget, Widget) == 0x000000, "Member 'FortPlayerSurveyDispatcher_RemoveSurveyWidget::Widget' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyDispatcher.SetOwningPlayer
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyDispatcher_SetOwningPlayer final
{
public:
	class APlayerController*                      Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyDispatcher_SetOwningPlayer) == 0x000008, "Wrong alignment on FortPlayerSurveyDispatcher_SetOwningPlayer");
static_assert(sizeof(FortPlayerSurveyDispatcher_SetOwningPlayer) == 0x000008, "Wrong size on FortPlayerSurveyDispatcher_SetOwningPlayer");
static_assert(offsetof(FortPlayerSurveyDispatcher_SetOwningPlayer, Value) == 0x000000, "Member 'FortPlayerSurveyDispatcher_SetOwningPlayer::Value' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyDispatcher.StartSurveyIntro
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyDispatcher_StartSurveyIntro final
{
public:
	class UFortPlayerSurveyPanelBase*             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyDispatcher_StartSurveyIntro) == 0x000008, "Wrong alignment on FortPlayerSurveyDispatcher_StartSurveyIntro");
static_assert(sizeof(FortPlayerSurveyDispatcher_StartSurveyIntro) == 0x000008, "Wrong size on FortPlayerSurveyDispatcher_StartSurveyIntro");
static_assert(offsetof(FortPlayerSurveyDispatcher_StartSurveyIntro, Widget) == 0x000000, "Member 'FortPlayerSurveyDispatcher_StartSurveyIntro::Widget' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyFreeFormTextAnswerWidgetBase.SetCurrentAnswer
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerSurveyFreeFormTextAnswerWidgetBase_SetCurrentAnswer final
{
public:
	struct FFortPlayerSurveyAnswerFreeFormText    Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyFreeFormTextAnswerWidgetBase_SetCurrentAnswer) == 0x000008, "Wrong alignment on FortPlayerSurveyFreeFormTextAnswerWidgetBase_SetCurrentAnswer");
static_assert(sizeof(FortPlayerSurveyFreeFormTextAnswerWidgetBase_SetCurrentAnswer) == 0x000018, "Wrong size on FortPlayerSurveyFreeFormTextAnswerWidgetBase_SetCurrentAnswer");
static_assert(offsetof(FortPlayerSurveyFreeFormTextAnswerWidgetBase_SetCurrentAnswer, Value) == 0x000000, "Member 'FortPlayerSurveyFreeFormTextAnswerWidgetBase_SetCurrentAnswer::Value' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyFreeFormTextAnswerWidgetBase.GetCurrentAnswer
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentAnswer final
{
public:
	bool                                          bOutIsSet;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortPlayerSurveyAnswerFreeFormText    OutAnswer;                                         // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentAnswer) == 0x000008, "Wrong alignment on FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentAnswer");
static_assert(sizeof(FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentAnswer) == 0x000020, "Wrong size on FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentAnswer");
static_assert(offsetof(FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentAnswer, bOutIsSet) == 0x000000, "Member 'FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentAnswer::bOutIsSet' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentAnswer, OutAnswer) == 0x000008, "Member 'FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentAnswer::OutAnswer' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyFreeFormTextAnswerWidgetBase.GetCurrentQuestion
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentQuestion final
{
public:
	class UFortPlayerSurveyQuestionFreeFormText*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentQuestion) == 0x000008, "Wrong alignment on FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentQuestion");
static_assert(sizeof(FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentQuestion) == 0x000008, "Wrong size on FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentQuestion");
static_assert(offsetof(FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentQuestion, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyFreeFormTextAnswerWidgetBase_GetCurrentQuestion::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteUI.FortPlayerSurveyPanelBase.OnPanelDismissed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyPanelBase_OnPanelDismissed__DelegateSignature final
{
public:
	class UFortPlayerSurveyPanelBase*             Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyPanelBase_OnPanelDismissed__DelegateSignature) == 0x000008, "Wrong alignment on FortPlayerSurveyPanelBase_OnPanelDismissed__DelegateSignature");
static_assert(sizeof(FortPlayerSurveyPanelBase_OnPanelDismissed__DelegateSignature) == 0x000008, "Wrong size on FortPlayerSurveyPanelBase_OnPanelDismissed__DelegateSignature");
static_assert(offsetof(FortPlayerSurveyPanelBase_OnPanelDismissed__DelegateSignature, Source) == 0x000000, "Member 'FortPlayerSurveyPanelBase_OnPanelDismissed__DelegateSignature::Source' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyPanelBase.SetSurvey
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyPanelBase_SetSurvey final
{
public:
	TScriptInterface<class IFortPlayerSurvey>     Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyPanelBase_SetSurvey) == 0x000008, "Wrong alignment on FortPlayerSurveyPanelBase_SetSurvey");
static_assert(sizeof(FortPlayerSurveyPanelBase_SetSurvey) == 0x000010, "Wrong size on FortPlayerSurveyPanelBase_SetSurvey");
static_assert(offsetof(FortPlayerSurveyPanelBase_SetSurvey, Value) == 0x000000, "Member 'FortPlayerSurveyPanelBase_SetSurvey::Value' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyPanelBase.GetSurvey
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyPanelBase_GetSurvey final
{
public:
	TScriptInterface<class IFortPlayerSurvey>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyPanelBase_GetSurvey) == 0x000008, "Wrong alignment on FortPlayerSurveyPanelBase_GetSurvey");
static_assert(sizeof(FortPlayerSurveyPanelBase_GetSurvey) == 0x000010, "Wrong size on FortPlayerSurveyPanelBase_GetSurvey");
static_assert(offsetof(FortPlayerSurveyPanelBase_GetSurvey, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyPanelBase_GetSurvey::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadTypeLandingPageBase.CreateAndAddSquadButton
// 0x0010 (0x0010 - 0x0000)
struct FortSquadTypeLandingPageBase_CreateAndAddSquadButton final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSquadSelectorButton*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadTypeLandingPageBase_CreateAndAddSquadButton) == 0x000008, "Wrong alignment on FortSquadTypeLandingPageBase_CreateAndAddSquadButton");
static_assert(sizeof(FortSquadTypeLandingPageBase_CreateAndAddSquadButton) == 0x000010, "Wrong size on FortSquadTypeLandingPageBase_CreateAndAddSquadButton");
static_assert(offsetof(FortSquadTypeLandingPageBase_CreateAndAddSquadButton, SquadId) == 0x000000, "Member 'FortSquadTypeLandingPageBase_CreateAndAddSquadButton::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadTypeLandingPageBase_CreateAndAddSquadButton, ReturnValue) == 0x000008, "Member 'FortSquadTypeLandingPageBase_CreateAndAddSquadButton::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadTypeLandingPageBase.HandleBackInputAction
// 0x0001 (0x0001 - 0x0000)
struct FortSquadTypeLandingPageBase_HandleBackInputAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadTypeLandingPageBase_HandleBackInputAction) == 0x000001, "Wrong alignment on FortSquadTypeLandingPageBase_HandleBackInputAction");
static_assert(sizeof(FortSquadTypeLandingPageBase_HandleBackInputAction) == 0x000001, "Wrong size on FortSquadTypeLandingPageBase_HandleBackInputAction");
static_assert(offsetof(FortSquadTypeLandingPageBase_HandleBackInputAction, bPassThrough) == 0x000000, "Member 'FortSquadTypeLandingPageBase_HandleBackInputAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyQuestionDisplayWidgetBase.NativeHandleQuestionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyQuestionDisplayWidgetBase_NativeHandleQuestionChanged final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyQuestionDisplayWidgetBase_NativeHandleQuestionChanged) == 0x000008, "Wrong alignment on FortPlayerSurveyQuestionDisplayWidgetBase_NativeHandleQuestionChanged");
static_assert(sizeof(FortPlayerSurveyQuestionDisplayWidgetBase_NativeHandleQuestionChanged) == 0x000008, "Wrong size on FortPlayerSurveyQuestionDisplayWidgetBase_NativeHandleQuestionChanged");
static_assert(offsetof(FortPlayerSurveyQuestionDisplayWidgetBase_NativeHandleQuestionChanged, Source) == 0x000000, "Member 'FortPlayerSurveyQuestionDisplayWidgetBase_NativeHandleQuestionChanged::Source' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyQuestionDisplayWidgetBase.SetQA
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyQuestionDisplayWidgetBase_SetQA final
{
public:
	TScriptInterface<class IFortPlayerSurveyAnswerableQuestion> Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyQuestionDisplayWidgetBase_SetQA) == 0x000008, "Wrong alignment on FortPlayerSurveyQuestionDisplayWidgetBase_SetQA");
static_assert(sizeof(FortPlayerSurveyQuestionDisplayWidgetBase_SetQA) == 0x000010, "Wrong size on FortPlayerSurveyQuestionDisplayWidgetBase_SetQA");
static_assert(offsetof(FortPlayerSurveyQuestionDisplayWidgetBase_SetQA, Value) == 0x000000, "Member 'FortPlayerSurveyQuestionDisplayWidgetBase_SetQA::Value' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyQuestionDisplayWidgetBase.GetQA
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyQuestionDisplayWidgetBase_GetQA final
{
public:
	TScriptInterface<class IFortPlayerSurveyAnswerableQuestion> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyQuestionDisplayWidgetBase_GetQA) == 0x000008, "Wrong alignment on FortPlayerSurveyQuestionDisplayWidgetBase_GetQA");
static_assert(sizeof(FortPlayerSurveyQuestionDisplayWidgetBase_GetQA) == 0x000010, "Wrong size on FortPlayerSurveyQuestionDisplayWidgetBase_GetQA");
static_assert(offsetof(FortPlayerSurveyQuestionDisplayWidgetBase_GetQA, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyQuestionDisplayWidgetBase_GetQA::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyStatsPrecacher.HandleGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerSurveyStatsPrecacher_HandleGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyStatsPrecacher_HandleGamePhaseChanged) == 0x000001, "Wrong alignment on FortPlayerSurveyStatsPrecacher_HandleGamePhaseChanged");
static_assert(sizeof(FortPlayerSurveyStatsPrecacher_HandleGamePhaseChanged) == 0x000001, "Wrong size on FortPlayerSurveyStatsPrecacher_HandleGamePhaseChanged");
static_assert(offsetof(FortPlayerSurveyStatsPrecacher_HandleGamePhaseChanged, GamePhase) == 0x000000, "Member 'FortPlayerSurveyStatsPrecacher_HandleGamePhaseChanged::GamePhase' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyWidgetBase.HandleQuestionsChanged
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerSurveyWidgetBase_HandleQuestionsChanged final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyWidgetBase_HandleQuestionsChanged) == 0x000004, "Wrong alignment on FortPlayerSurveyWidgetBase_HandleQuestionsChanged");
static_assert(sizeof(FortPlayerSurveyWidgetBase_HandleQuestionsChanged) == 0x000004, "Wrong size on FortPlayerSurveyWidgetBase_HandleQuestionsChanged");
static_assert(offsetof(FortPlayerSurveyWidgetBase_HandleQuestionsChanged, Param_Index) == 0x000000, "Member 'FortPlayerSurveyWidgetBase_HandleQuestionsChanged::Param_Index' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyWidgetBase.NativeHandleDescriptionChanged
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSurveyWidgetBase_NativeHandleDescriptionChanged final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyWidgetBase_NativeHandleDescriptionChanged) == 0x000008, "Wrong alignment on FortPlayerSurveyWidgetBase_NativeHandleDescriptionChanged");
static_assert(sizeof(FortPlayerSurveyWidgetBase_NativeHandleDescriptionChanged) == 0x000008, "Wrong size on FortPlayerSurveyWidgetBase_NativeHandleDescriptionChanged");
static_assert(offsetof(FortPlayerSurveyWidgetBase_NativeHandleDescriptionChanged, Source) == 0x000000, "Member 'FortPlayerSurveyWidgetBase_NativeHandleDescriptionChanged::Source' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyWidgetBase.NativeHandleQuestionsChanged
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyWidgetBase_NativeHandleQuestionsChanged final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerSurveyWidgetBase_NativeHandleQuestionsChanged) == 0x000008, "Wrong alignment on FortPlayerSurveyWidgetBase_NativeHandleQuestionsChanged");
static_assert(sizeof(FortPlayerSurveyWidgetBase_NativeHandleQuestionsChanged) == 0x000010, "Wrong size on FortPlayerSurveyWidgetBase_NativeHandleQuestionsChanged");
static_assert(offsetof(FortPlayerSurveyWidgetBase_NativeHandleQuestionsChanged, Source) == 0x000000, "Member 'FortPlayerSurveyWidgetBase_NativeHandleQuestionsChanged::Source' has a wrong offset!");
static_assert(offsetof(FortPlayerSurveyWidgetBase_NativeHandleQuestionsChanged, Param_Index) == 0x000008, "Member 'FortPlayerSurveyWidgetBase_NativeHandleQuestionsChanged::Param_Index' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyWidgetBase.SetSurvey
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyWidgetBase_SetSurvey final
{
public:
	TScriptInterface<class IFortPlayerSurvey>     Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyWidgetBase_SetSurvey) == 0x000008, "Wrong alignment on FortPlayerSurveyWidgetBase_SetSurvey");
static_assert(sizeof(FortPlayerSurveyWidgetBase_SetSurvey) == 0x000010, "Wrong size on FortPlayerSurveyWidgetBase_SetSurvey");
static_assert(offsetof(FortPlayerSurveyWidgetBase_SetSurvey, Value) == 0x000000, "Member 'FortPlayerSurveyWidgetBase_SetSurvey::Value' has a wrong offset!");

// Function FortniteUI.FortPlayerSurveyWidgetBase.GetSurvey
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSurveyWidgetBase_GetSurvey final
{
public:
	TScriptInterface<class IFortPlayerSurvey>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSurveyWidgetBase_GetSurvey) == 0x000008, "Wrong alignment on FortPlayerSurveyWidgetBase_GetSurvey");
static_assert(sizeof(FortPlayerSurveyWidgetBase_GetSurvey) == 0x000010, "Wrong size on FortPlayerSurveyWidgetBase_GetSurvey");
static_assert(offsetof(FortPlayerSurveyWidgetBase_GetSurvey, ReturnValue) == 0x000000, "Member 'FortPlayerSurveyWidgetBase_GetSurvey::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPortalHUDDetails.GetActiveContextInfo
// 0x0008 (0x0008 - 0x0000)
struct FortPortalHUDDetails_GetActiveContextInfo final
{
public:
	class UFortInteractContextInfo*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPortalHUDDetails_GetActiveContextInfo) == 0x000008, "Wrong alignment on FortPortalHUDDetails_GetActiveContextInfo");
static_assert(sizeof(FortPortalHUDDetails_GetActiveContextInfo) == 0x000008, "Wrong size on FortPortalHUDDetails_GetActiveContextInfo");
static_assert(offsetof(FortPortalHUDDetails_GetActiveContextInfo, ReturnValue) == 0x000000, "Member 'FortPortalHUDDetails_GetActiveContextInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortPortalHUDDetails.SetActiveContextInfo
// 0x0008 (0x0008 - 0x0000)
struct FortPortalHUDDetails_SetActiveContextInfo final
{
public:
	class UFortInteractContextInfo*               ActiveContextInfo;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPortalHUDDetails_SetActiveContextInfo) == 0x000008, "Wrong alignment on FortPortalHUDDetails_SetActiveContextInfo");
static_assert(sizeof(FortPortalHUDDetails_SetActiveContextInfo) == 0x000008, "Wrong size on FortPortalHUDDetails_SetActiveContextInfo");
static_assert(offsetof(FortPortalHUDDetails_SetActiveContextInfo, ActiveContextInfo) == 0x000000, "Member 'FortPortalHUDDetails_SetActiveContextInfo::ActiveContextInfo' has a wrong offset!");

// Function FortniteUI.FortPrivacyBase.AddPrivacyButton
// 0x0010 (0x0010 - 0x0000)
struct FortPrivacyBase_AddPrivacyButton final
{
public:
	class UCommonButton*                          PrivacyButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyType                                    PartyType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPrivacyBase_AddPrivacyButton) == 0x000008, "Wrong alignment on FortPrivacyBase_AddPrivacyButton");
static_assert(sizeof(FortPrivacyBase_AddPrivacyButton) == 0x000010, "Wrong size on FortPrivacyBase_AddPrivacyButton");
static_assert(offsetof(FortPrivacyBase_AddPrivacyButton, PrivacyButton) == 0x000000, "Member 'FortPrivacyBase_AddPrivacyButton::PrivacyButton' has a wrong offset!");
static_assert(offsetof(FortPrivacyBase_AddPrivacyButton, PartyType) == 0x000008, "Member 'FortPrivacyBase_AddPrivacyButton::PartyType' has a wrong offset!");

// Function FortniteUI.FortPrivacyBase.HandlePrivacyButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct FortPrivacyBase_HandlePrivacyButtonSelected final
{
public:
	class UCommonButton*                          SelectedPrivacyButton;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPrivacyBase_HandlePrivacyButtonSelected) == 0x000008, "Wrong alignment on FortPrivacyBase_HandlePrivacyButtonSelected");
static_assert(sizeof(FortPrivacyBase_HandlePrivacyButtonSelected) == 0x000010, "Wrong size on FortPrivacyBase_HandlePrivacyButtonSelected");
static_assert(offsetof(FortPrivacyBase_HandlePrivacyButtonSelected, SelectedPrivacyButton) == 0x000000, "Member 'FortPrivacyBase_HandlePrivacyButtonSelected::SelectedPrivacyButton' has a wrong offset!");
static_assert(offsetof(FortPrivacyBase_HandlePrivacyButtonSelected, ButtonIndex) == 0x000008, "Member 'FortPrivacyBase_HandlePrivacyButtonSelected::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortStoreSummary.HandleContextMenuOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_HandleContextMenuOpenChanged final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_HandleContextMenuOpenChanged) == 0x000001, "Wrong alignment on FortStoreSummary_HandleContextMenuOpenChanged");
static_assert(sizeof(FortStoreSummary_HandleContextMenuOpenChanged) == 0x000001, "Wrong size on FortStoreSummary_HandleContextMenuOpenChanged");
static_assert(offsetof(FortStoreSummary_HandleContextMenuOpenChanged, bIsOpen) == 0x000000, "Member 'FortStoreSummary_HandleContextMenuOpenChanged::bIsOpen' has a wrong offset!");

// Function FortniteUI.FortStoreSummary.HandleContextMenuOpenChangedBP
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_HandleContextMenuOpenChangedBP final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_HandleContextMenuOpenChangedBP) == 0x000001, "Wrong alignment on FortStoreSummary_HandleContextMenuOpenChangedBP");
static_assert(sizeof(FortStoreSummary_HandleContextMenuOpenChangedBP) == 0x000001, "Wrong size on FortStoreSummary_HandleContextMenuOpenChangedBP");
static_assert(offsetof(FortStoreSummary_HandleContextMenuOpenChangedBP, bIsOpen) == 0x000000, "Member 'FortStoreSummary_HandleContextMenuOpenChangedBP::bIsOpen' has a wrong offset!");

// Function FortniteUI.FortStoreSummary.SetCards
// 0x0010 (0x0010 - 0x0000)
struct FortStoreSummary_SetCards final
{
public:
	TArray<struct FCard>                          Cards;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_SetCards) == 0x000008, "Wrong alignment on FortStoreSummary_SetCards");
static_assert(sizeof(FortStoreSummary_SetCards) == 0x000010, "Wrong size on FortStoreSummary_SetCards");
static_assert(offsetof(FortStoreSummary_SetCards, Cards) == 0x000000, "Member 'FortStoreSummary_SetCards::Cards' has a wrong offset!");

// Function FortniteUI.FortStoreSummary.SetIsInChoiceSelectionMode
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_SetIsInChoiceSelectionMode final
{
public:
	bool                                          InIsInChoiceSelectionMode;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_SetIsInChoiceSelectionMode) == 0x000001, "Wrong alignment on FortStoreSummary_SetIsInChoiceSelectionMode");
static_assert(sizeof(FortStoreSummary_SetIsInChoiceSelectionMode) == 0x000001, "Wrong size on FortStoreSummary_SetIsInChoiceSelectionMode");
static_assert(offsetof(FortStoreSummary_SetIsInChoiceSelectionMode, InIsInChoiceSelectionMode) == 0x000000, "Member 'FortStoreSummary_SetIsInChoiceSelectionMode::InIsInChoiceSelectionMode' has a wrong offset!");

// Function FortniteUI.FortStoreSummary.GetIsInChoiceSelectionMode
// 0x0001 (0x0001 - 0x0000)
struct FortStoreSummary_GetIsInChoiceSelectionMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummary_GetIsInChoiceSelectionMode) == 0x000001, "Wrong alignment on FortStoreSummary_GetIsInChoiceSelectionMode");
static_assert(sizeof(FortStoreSummary_GetIsInChoiceSelectionMode) == 0x000001, "Wrong size on FortStoreSummary_GetIsInChoiceSelectionMode");
static_assert(offsetof(FortStoreSummary_GetIsInChoiceSelectionMode, ReturnValue) == 0x000000, "Member 'FortStoreSummary_GetIsInChoiceSelectionMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortProgressModal.SetDescription
// 0x0018 (0x0018 - 0x0000)
struct FortProgressModal_SetDescription final
{
public:
	class FText                                   InDescription;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressModal_SetDescription) == 0x000008, "Wrong alignment on FortProgressModal_SetDescription");
static_assert(sizeof(FortProgressModal_SetDescription) == 0x000018, "Wrong size on FortProgressModal_SetDescription");
static_assert(offsetof(FortProgressModal_SetDescription, InDescription) == 0x000000, "Member 'FortProgressModal_SetDescription::InDescription' has a wrong offset!");

// Function FortniteUI.FortProgressModal.SetIcon
// 0x0088 (0x0088 - 0x0000)
struct FortProgressModal_SetIcon final
{
public:
	struct FSlateBrush                            InIcon;                                            // 0x0000(0x0088)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressModal_SetIcon) == 0x000008, "Wrong alignment on FortProgressModal_SetIcon");
static_assert(sizeof(FortProgressModal_SetIcon) == 0x000088, "Wrong size on FortProgressModal_SetIcon");
static_assert(offsetof(FortProgressModal_SetIcon, InIcon) == 0x000000, "Member 'FortProgressModal_SetIcon::InIcon' has a wrong offset!");

// Function FortniteUI.FortProgressModal.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct FortProgressModal_SetTitle final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressModal_SetTitle) == 0x000008, "Wrong alignment on FortProgressModal_SetTitle");
static_assert(sizeof(FortProgressModal_SetTitle) == 0x000018, "Wrong size on FortProgressModal_SetTitle");
static_assert(offsetof(FortProgressModal_SetTitle, InTitle) == 0x000000, "Member 'FortProgressModal_SetTitle::InTitle' has a wrong offset!");

// Function FortniteUI.FortPurchaseHistoryEntry.SetPurchaseText
// 0x0020 (0x0020 - 0x0000)
struct FortPurchaseHistoryEntry_SetPurchaseText final
{
public:
	class FText                                   PurchaseText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bHasBeenRefunded;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPurchaseHistoryEntry_SetPurchaseText) == 0x000008, "Wrong alignment on FortPurchaseHistoryEntry_SetPurchaseText");
static_assert(sizeof(FortPurchaseHistoryEntry_SetPurchaseText) == 0x000020, "Wrong size on FortPurchaseHistoryEntry_SetPurchaseText");
static_assert(offsetof(FortPurchaseHistoryEntry_SetPurchaseText, PurchaseText) == 0x000000, "Member 'FortPurchaseHistoryEntry_SetPurchaseText::PurchaseText' has a wrong offset!");
static_assert(offsetof(FortPurchaseHistoryEntry_SetPurchaseText, bHasBeenRefunded) == 0x000018, "Member 'FortPurchaseHistoryEntry_SetPurchaseText::bHasBeenRefunded' has a wrong offset!");

// Function FortniteUI.FortPurchaseHistoryEntry.SetRefundState
// 0x0020 (0x0020 - 0x0000)
struct FortPurchaseHistoryEntry_SetRefundState final
{
public:
	class FText                                   PurchaseText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EItemRefundability                            Refundability;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPurchaseHistoryEntry_SetRefundState) == 0x000008, "Wrong alignment on FortPurchaseHistoryEntry_SetRefundState");
static_assert(sizeof(FortPurchaseHistoryEntry_SetRefundState) == 0x000020, "Wrong size on FortPurchaseHistoryEntry_SetRefundState");
static_assert(offsetof(FortPurchaseHistoryEntry_SetRefundState, PurchaseText) == 0x000000, "Member 'FortPurchaseHistoryEntry_SetRefundState::PurchaseText' has a wrong offset!");
static_assert(offsetof(FortPurchaseHistoryEntry_SetRefundState, Refundability) == 0x000018, "Member 'FortPurchaseHistoryEntry_SetRefundState::Refundability' has a wrong offset!");

// Function FortniteUI.FortPurchaseHistoryEntry.UpdateItemList
// 0x0010 (0x0010 - 0x0000)
struct FortPurchaseHistoryEntry_UpdateItemList final
{
public:
	TArray<class UFortMultiSizeItemCard*>         ItemCards;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryEntry_UpdateItemList) == 0x000008, "Wrong alignment on FortPurchaseHistoryEntry_UpdateItemList");
static_assert(sizeof(FortPurchaseHistoryEntry_UpdateItemList) == 0x000010, "Wrong size on FortPurchaseHistoryEntry_UpdateItemList");
static_assert(offsetof(FortPurchaseHistoryEntry_UpdateItemList, ItemCards) == 0x000000, "Member 'FortPurchaseHistoryEntry_UpdateItemList::ItemCards' has a wrong offset!");

// Function FortniteUI.FortPurchaseHistoryScreen.HandlePreviousStepAction
// 0x0001 (0x0001 - 0x0000)
struct FortPurchaseHistoryScreen_HandlePreviousStepAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_HandlePreviousStepAction) == 0x000001, "Wrong alignment on FortPurchaseHistoryScreen_HandlePreviousStepAction");
static_assert(sizeof(FortPurchaseHistoryScreen_HandlePreviousStepAction) == 0x000001, "Wrong size on FortPurchaseHistoryScreen_HandlePreviousStepAction");
static_assert(offsetof(FortPurchaseHistoryScreen_HandlePreviousStepAction, bPassThrough) == 0x000000, "Member 'FortPurchaseHistoryScreen_HandlePreviousStepAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortPurchaseHistoryScreen.HandleTabButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct FortPurchaseHistoryScreen_HandleTabButtonClicked final
{
public:
	EPurchaseReturnStep                           ClickedStep;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_HandleTabButtonClicked) == 0x000001, "Wrong alignment on FortPurchaseHistoryScreen_HandleTabButtonClicked");
static_assert(sizeof(FortPurchaseHistoryScreen_HandleTabButtonClicked) == 0x000001, "Wrong size on FortPurchaseHistoryScreen_HandleTabButtonClicked");
static_assert(offsetof(FortPurchaseHistoryScreen_HandleTabButtonClicked, ClickedStep) == 0x000000, "Member 'FortPurchaseHistoryScreen_HandleTabButtonClicked::ClickedStep' has a wrong offset!");

// Function FortniteUI.FortPurchaseHistoryScreen.InitializeTickets
// 0x0004 (0x0004 - 0x0000)
struct FortPurchaseHistoryScreen_InitializeTickets final
{
public:
	int32                                         NumTicketsAvailableToUse;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_InitializeTickets) == 0x000004, "Wrong alignment on FortPurchaseHistoryScreen_InitializeTickets");
static_assert(sizeof(FortPurchaseHistoryScreen_InitializeTickets) == 0x000004, "Wrong size on FortPurchaseHistoryScreen_InitializeTickets");
static_assert(offsetof(FortPurchaseHistoryScreen_InitializeTickets, NumTicketsAvailableToUse) == 0x000000, "Member 'FortPurchaseHistoryScreen_InitializeTickets::NumTicketsAvailableToUse' has a wrong offset!");

// Function FortniteUI.FortPurchaseHistoryScreen.OnEndRefundSubmission
// 0x0018 (0x0018 - 0x0000)
struct FortPurchaseHistoryScreen_OnEndRefundSubmission final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MtxRefunded;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ReturnedItem;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPurchaseHistoryScreen_OnEndRefundSubmission) == 0x000008, "Wrong alignment on FortPurchaseHistoryScreen_OnEndRefundSubmission");
static_assert(sizeof(FortPurchaseHistoryScreen_OnEndRefundSubmission) == 0x000018, "Wrong size on FortPurchaseHistoryScreen_OnEndRefundSubmission");
static_assert(offsetof(FortPurchaseHistoryScreen_OnEndRefundSubmission, bSuccess) == 0x000000, "Member 'FortPurchaseHistoryScreen_OnEndRefundSubmission::bSuccess' has a wrong offset!");
static_assert(offsetof(FortPurchaseHistoryScreen_OnEndRefundSubmission, MtxRefunded) == 0x000004, "Member 'FortPurchaseHistoryScreen_OnEndRefundSubmission::MtxRefunded' has a wrong offset!");
static_assert(offsetof(FortPurchaseHistoryScreen_OnEndRefundSubmission, ReturnedItem) == 0x000008, "Member 'FortPurchaseHistoryScreen_OnEndRefundSubmission::ReturnedItem' has a wrong offset!");
static_assert(offsetof(FortPurchaseHistoryScreen_OnEndRefundSubmission, TicketIndex) == 0x000010, "Member 'FortPurchaseHistoryScreen_OnEndRefundSubmission::TicketIndex' has a wrong offset!");

// Function FortniteUI.FortPurchaseHistoryScreen.OnItemRefresh
// 0x0018 (0x0018 - 0x0000)
struct FortPurchaseHistoryScreen_OnItemRefresh final
{
public:
	struct FMtxPurchaseHistory                    PurchaseHistory;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_OnItemRefresh) == 0x000008, "Wrong alignment on FortPurchaseHistoryScreen_OnItemRefresh");
static_assert(sizeof(FortPurchaseHistoryScreen_OnItemRefresh) == 0x000018, "Wrong size on FortPurchaseHistoryScreen_OnItemRefresh");
static_assert(offsetof(FortPurchaseHistoryScreen_OnItemRefresh, PurchaseHistory) == 0x000000, "Member 'FortPurchaseHistoryScreen_OnItemRefresh::PurchaseHistory' has a wrong offset!");

// Function FortniteUI.FortPurchaseHistoryScreen.OnPopulateView
// 0x0001 (0x0001 - 0x0000)
struct FortPurchaseHistoryScreen_OnPopulateView final
{
public:
	EPurchaseReturnStep                           CurrentStep;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_OnPopulateView) == 0x000001, "Wrong alignment on FortPurchaseHistoryScreen_OnPopulateView");
static_assert(sizeof(FortPurchaseHistoryScreen_OnPopulateView) == 0x000001, "Wrong size on FortPurchaseHistoryScreen_OnPopulateView");
static_assert(offsetof(FortPurchaseHistoryScreen_OnPopulateView, CurrentStep) == 0x000000, "Member 'FortPurchaseHistoryScreen_OnPopulateView::CurrentStep' has a wrong offset!");

// Function FortniteUI.FortPurchaseHistoryScreen.UpdateItemList
// 0x0010 (0x0010 - 0x0000)
struct FortPurchaseHistoryScreen_UpdateItemList final
{
public:
	TArray<class UCommonTextBlock*>               ItemsToReturn;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_UpdateItemList) == 0x000008, "Wrong alignment on FortPurchaseHistoryScreen_UpdateItemList");
static_assert(sizeof(FortPurchaseHistoryScreen_UpdateItemList) == 0x000010, "Wrong size on FortPurchaseHistoryScreen_UpdateItemList");
static_assert(offsetof(FortPurchaseHistoryScreen_UpdateItemList, ItemsToReturn) == 0x000000, "Member 'FortPurchaseHistoryScreen_UpdateItemList::ItemsToReturn' has a wrong offset!");

// Function FortniteUI.FortPurchaseHistoryScreen.GetCurrentStep
// 0x0001 (0x0001 - 0x0000)
struct FortPurchaseHistoryScreen_GetCurrentStep final
{
public:
	EPurchaseReturnStep                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_GetCurrentStep) == 0x000001, "Wrong alignment on FortPurchaseHistoryScreen_GetCurrentStep");
static_assert(sizeof(FortPurchaseHistoryScreen_GetCurrentStep) == 0x000001, "Wrong size on FortPurchaseHistoryScreen_GetCurrentStep");
static_assert(offsetof(FortPurchaseHistoryScreen_GetCurrentStep, ReturnValue) == 0x000000, "Member 'FortPurchaseHistoryScreen_GetCurrentStep::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTournamentPayoutModal.SetEventWindowId
// 0x0020 (0x0020 - 0x0000)
struct FortTournamentPayoutModal_SetEventWindowId final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventWindowId;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTournamentPayoutModal_SetEventWindowId) == 0x000008, "Wrong alignment on FortTournamentPayoutModal_SetEventWindowId");
static_assert(sizeof(FortTournamentPayoutModal_SetEventWindowId) == 0x000020, "Wrong size on FortTournamentPayoutModal_SetEventWindowId");
static_assert(offsetof(FortTournamentPayoutModal_SetEventWindowId, EventId) == 0x000000, "Member 'FortTournamentPayoutModal_SetEventWindowId::EventId' has a wrong offset!");
static_assert(offsetof(FortTournamentPayoutModal_SetEventWindowId, EventWindowId) == 0x000010, "Member 'FortTournamentPayoutModal_SetEventWindowId::EventWindowId' has a wrong offset!");

// Function FortniteUI.FortQuestExpiresWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct FortQuestExpiresWidget_SetData final
{
public:
	class UFortQuestItem*                         InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestExpiresWidget_SetData) == 0x000008, "Wrong alignment on FortQuestExpiresWidget_SetData");
static_assert(sizeof(FortQuestExpiresWidget_SetData) == 0x000008, "Wrong size on FortQuestExpiresWidget_SetData");
static_assert(offsetof(FortQuestExpiresWidget_SetData, InItem) == 0x000000, "Member 'FortQuestExpiresWidget_SetData::InItem' has a wrong offset!");

// Function FortniteUI.FortQuestMapCosmeticListWidget.GetDisplayItemDefs
// 0x0010 (0x0010 - 0x0000)
struct FortQuestMapCosmeticListWidget_GetDisplayItemDefs final
{
public:
	TArray<class UFortItemDefinition*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapCosmeticListWidget_GetDisplayItemDefs) == 0x000008, "Wrong alignment on FortQuestMapCosmeticListWidget_GetDisplayItemDefs");
static_assert(sizeof(FortQuestMapCosmeticListWidget_GetDisplayItemDefs) == 0x000010, "Wrong size on FortQuestMapCosmeticListWidget_GetDisplayItemDefs");
static_assert(offsetof(FortQuestMapCosmeticListWidget_GetDisplayItemDefs, ReturnValue) == 0x000000, "Member 'FortQuestMapCosmeticListWidget_GetDisplayItemDefs::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSignInWidget.HandleTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortSignInWidget_HandleTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSignInWidget_HandleTextCommitted) == 0x000008, "Wrong alignment on FortSignInWidget_HandleTextCommitted");
static_assert(sizeof(FortSignInWidget_HandleTextCommitted) == 0x000020, "Wrong size on FortSignInWidget_HandleTextCommitted");
static_assert(offsetof(FortSignInWidget_HandleTextCommitted, Text) == 0x000000, "Member 'FortSignInWidget_HandleTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(FortSignInWidget_HandleTextCommitted, CommitMethod) == 0x000018, "Member 'FortSignInWidget_HandleTextCommitted::CommitMethod' has a wrong offset!");

// Function FortniteUI.FortSignInWidget.UpdateSignInButton
// 0x0018 (0x0018 - 0x0000)
struct FortSignInWidget_UpdateSignInButton final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSignInWidget_UpdateSignInButton) == 0x000008, "Wrong alignment on FortSignInWidget_UpdateSignInButton");
static_assert(sizeof(FortSignInWidget_UpdateSignInButton) == 0x000018, "Wrong size on FortSignInWidget_UpdateSignInButton");
static_assert(offsetof(FortSignInWidget_UpdateSignInButton, Text) == 0x000000, "Member 'FortSignInWidget_UpdateSignInButton::Text' has a wrong offset!");

// Function FortniteUI.FortQuestMapDetailsPanel.DisplayActiveQuest
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapDetailsPanel_DisplayActiveQuest final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapDetailsPanel_DisplayActiveQuest) == 0x000008, "Wrong alignment on FortQuestMapDetailsPanel_DisplayActiveQuest");
static_assert(sizeof(FortQuestMapDetailsPanel_DisplayActiveQuest) == 0x000008, "Wrong size on FortQuestMapDetailsPanel_DisplayActiveQuest");
static_assert(offsetof(FortQuestMapDetailsPanel_DisplayActiveQuest, QuestItem) == 0x000000, "Member 'FortQuestMapDetailsPanel_DisplayActiveQuest::QuestItem' has a wrong offset!");

// Function FortniteUI.FortQuestMapDetailsPanel.DisplayInactiveQuest
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapDetailsPanel_DisplayInactiveQuest final
{
public:
	class UFortQuestItemDefinition*               QuestDef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapDetailsPanel_DisplayInactiveQuest) == 0x000008, "Wrong alignment on FortQuestMapDetailsPanel_DisplayInactiveQuest");
static_assert(sizeof(FortQuestMapDetailsPanel_DisplayInactiveQuest) == 0x000008, "Wrong size on FortQuestMapDetailsPanel_DisplayInactiveQuest");
static_assert(offsetof(FortQuestMapDetailsPanel_DisplayInactiveQuest, QuestDef) == 0x000000, "Member 'FortQuestMapDetailsPanel_DisplayInactiveQuest::QuestDef' has a wrong offset!");

// Function FortniteUI.FortQuestMapEventCallout.HandleCalloutNavigation
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_HandleCalloutNavigation final
{
public:
	ECalloutNavigationDirection                   Direction;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_HandleCalloutNavigation) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_HandleCalloutNavigation");
static_assert(sizeof(FortQuestMapEventCallout_HandleCalloutNavigation) == 0x000001, "Wrong size on FortQuestMapEventCallout_HandleCalloutNavigation");
static_assert(offsetof(FortQuestMapEventCallout_HandleCalloutNavigation, Direction) == 0x000000, "Member 'FortQuestMapEventCallout_HandleCalloutNavigation::Direction' has a wrong offset!");

// Function FortniteUI.FortQuestMapEventCallout.GetBangEnabledForDirection
// 0x0002 (0x0002 - 0x0000)
struct FortQuestMapEventCallout_GetBangEnabledForDirection final
{
public:
	ECalloutNavigationDirection                   Direction;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_GetBangEnabledForDirection) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_GetBangEnabledForDirection");
static_assert(sizeof(FortQuestMapEventCallout_GetBangEnabledForDirection) == 0x000002, "Wrong size on FortQuestMapEventCallout_GetBangEnabledForDirection");
static_assert(offsetof(FortQuestMapEventCallout_GetBangEnabledForDirection, Direction) == 0x000000, "Member 'FortQuestMapEventCallout_GetBangEnabledForDirection::Direction' has a wrong offset!");
static_assert(offsetof(FortQuestMapEventCallout_GetBangEnabledForDirection, ReturnValue) == 0x000001, "Member 'FortQuestMapEventCallout_GetBangEnabledForDirection::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapEventCallout.GetCurrentEventDataEntry
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapEventCallout_GetCurrentEventDataEntry final
{
public:
	class UFortEventQuestMapDataAsset*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_GetCurrentEventDataEntry) == 0x000008, "Wrong alignment on FortQuestMapEventCallout_GetCurrentEventDataEntry");
static_assert(sizeof(FortQuestMapEventCallout_GetCurrentEventDataEntry) == 0x000008, "Wrong size on FortQuestMapEventCallout_GetCurrentEventDataEntry");
static_assert(offsetof(FortQuestMapEventCallout_GetCurrentEventDataEntry, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_GetCurrentEventDataEntry::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapEventCallout.GetEventCount
// 0x0004 (0x0004 - 0x0000)
struct FortQuestMapEventCallout_GetEventCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_GetEventCount) == 0x000004, "Wrong alignment on FortQuestMapEventCallout_GetEventCount");
static_assert(sizeof(FortQuestMapEventCallout_GetEventCount) == 0x000004, "Wrong size on FortQuestMapEventCallout_GetEventCount");
static_assert(offsetof(FortQuestMapEventCallout_GetEventCount, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_GetEventCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapEventCallout.GetEventDataIndex
// 0x0004 (0x0004 - 0x0000)
struct FortQuestMapEventCallout_GetEventDataIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_GetEventDataIndex) == 0x000004, "Wrong alignment on FortQuestMapEventCallout_GetEventDataIndex");
static_assert(sizeof(FortQuestMapEventCallout_GetEventDataIndex) == 0x000004, "Wrong size on FortQuestMapEventCallout_GetEventDataIndex");
static_assert(offsetof(FortQuestMapEventCallout_GetEventDataIndex, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_GetEventDataIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapEventCallout.IsArrowNewBangEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_IsArrowNewBangEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_IsArrowNewBangEnabled) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_IsArrowNewBangEnabled");
static_assert(sizeof(FortQuestMapEventCallout_IsArrowNewBangEnabled) == 0x000001, "Wrong size on FortQuestMapEventCallout_IsArrowNewBangEnabled");
static_assert(offsetof(FortQuestMapEventCallout_IsArrowNewBangEnabled, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_IsArrowNewBangEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapEventCallout.IsCurrentEventNew
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapEventCallout_IsCurrentEventNew final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_IsCurrentEventNew) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_IsCurrentEventNew");
static_assert(sizeof(FortQuestMapEventCallout_IsCurrentEventNew) == 0x000001, "Wrong size on FortQuestMapEventCallout_IsCurrentEventNew");
static_assert(offsetof(FortQuestMapEventCallout_IsCurrentEventNew, ReturnValue) == 0x000000, "Member 'FortQuestMapEventCallout_IsCurrentEventNew::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapEventCallout.IsNavigationPossible
// 0x0002 (0x0002 - 0x0000)
struct FortQuestMapEventCallout_IsNavigationPossible final
{
public:
	ECalloutNavigationDirection                   Direction;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_IsNavigationPossible) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_IsNavigationPossible");
static_assert(sizeof(FortQuestMapEventCallout_IsNavigationPossible) == 0x000002, "Wrong size on FortQuestMapEventCallout_IsNavigationPossible");
static_assert(offsetof(FortQuestMapEventCallout_IsNavigationPossible, Direction) == 0x000000, "Member 'FortQuestMapEventCallout_IsNavigationPossible::Direction' has a wrong offset!");
static_assert(offsetof(FortQuestMapEventCallout_IsNavigationPossible, ReturnValue) == 0x000001, "Member 'FortQuestMapEventCallout_IsNavigationPossible::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapEventCallout.IsQuestClaimPending
// 0x0002 (0x0002 - 0x0000)
struct FortQuestMapEventCallout_IsQuestClaimPending final
{
public:
	bool                                          bActiveEvent;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapEventCallout_IsQuestClaimPending) == 0x000001, "Wrong alignment on FortQuestMapEventCallout_IsQuestClaimPending");
static_assert(sizeof(FortQuestMapEventCallout_IsQuestClaimPending) == 0x000002, "Wrong size on FortQuestMapEventCallout_IsQuestClaimPending");
static_assert(offsetof(FortQuestMapEventCallout_IsQuestClaimPending, bActiveEvent) == 0x000000, "Member 'FortQuestMapEventCallout_IsQuestClaimPending::bActiveEvent' has a wrong offset!");
static_assert(offsetof(FortQuestMapEventCallout_IsQuestClaimPending, ReturnValue) == 0x000001, "Member 'FortQuestMapEventCallout_IsQuestClaimPending::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapNodeLayout.HandleQuestButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct FortQuestMapNodeLayout_HandleQuestButtonSelected final
{
public:
	class UCommonButton*                          SelectedQuestButton;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestMapNodeLayout_HandleQuestButtonSelected) == 0x000008, "Wrong alignment on FortQuestMapNodeLayout_HandleQuestButtonSelected");
static_assert(sizeof(FortQuestMapNodeLayout_HandleQuestButtonSelected) == 0x000010, "Wrong size on FortQuestMapNodeLayout_HandleQuestButtonSelected");
static_assert(offsetof(FortQuestMapNodeLayout_HandleQuestButtonSelected, SelectedQuestButton) == 0x000000, "Member 'FortQuestMapNodeLayout_HandleQuestButtonSelected::SelectedQuestButton' has a wrong offset!");
static_assert(offsetof(FortQuestMapNodeLayout_HandleQuestButtonSelected, ButtonIndex) == 0x000008, "Member 'FortQuestMapNodeLayout_HandleQuestButtonSelected::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortQuestMapNodeLayout.SetLayoutPanel
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapNodeLayout_SetLayoutPanel final
{
public:
	class UPanelWidget*                           Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapNodeLayout_SetLayoutPanel) == 0x000008, "Wrong alignment on FortQuestMapNodeLayout_SetLayoutPanel");
static_assert(sizeof(FortQuestMapNodeLayout_SetLayoutPanel) == 0x000008, "Wrong size on FortQuestMapNodeLayout_SetLayoutPanel");
static_assert(offsetof(FortQuestMapNodeLayout_SetLayoutPanel, Value) == 0x000000, "Member 'FortQuestMapNodeLayout_SetLayoutPanel::Value' has a wrong offset!");

// Function FortniteUI.FortQuestMapNodeLayout.SetParentScreen
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapNodeLayout_SetParentScreen final
{
public:
	class UFortQuestMapScreen*                    Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapNodeLayout_SetParentScreen) == 0x000008, "Wrong alignment on FortQuestMapNodeLayout_SetParentScreen");
static_assert(sizeof(FortQuestMapNodeLayout_SetParentScreen) == 0x000008, "Wrong size on FortQuestMapNodeLayout_SetParentScreen");
static_assert(offsetof(FortQuestMapNodeLayout_SetParentScreen, Parent) == 0x000000, "Member 'FortQuestMapNodeLayout_SetParentScreen::Parent' has a wrong offset!");

// Function FortniteUI.FortQuestMapNodeLayout.GetQuestPageData
// 0x0058 (0x0058 - 0x0000)
struct FortQuestMapNodeLayout_GetQuestPageData final
{
public:
	struct FFortQuestMapPage                      ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapNodeLayout_GetQuestPageData) == 0x000008, "Wrong alignment on FortQuestMapNodeLayout_GetQuestPageData");
static_assert(sizeof(FortQuestMapNodeLayout_GetQuestPageData) == 0x000058, "Wrong size on FortQuestMapNodeLayout_GetQuestPageData");
static_assert(offsetof(FortQuestMapNodeLayout_GetQuestPageData, ReturnValue) == 0x000000, "Member 'FortQuestMapNodeLayout_GetQuestPageData::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapQuestTile.HandleSelectedChange
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapQuestTile_HandleSelectedChange final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapQuestTile_HandleSelectedChange) == 0x000001, "Wrong alignment on FortQuestMapQuestTile_HandleSelectedChange");
static_assert(sizeof(FortQuestMapQuestTile_HandleSelectedChange) == 0x000001, "Wrong size on FortQuestMapQuestTile_HandleSelectedChange");
static_assert(offsetof(FortQuestMapQuestTile_HandleSelectedChange, Selected) == 0x000000, "Member 'FortQuestMapQuestTile_HandleSelectedChange::Selected' has a wrong offset!");

// Function FortniteUI.FortQuestMapQuestTile.GetQuestNodeData
// 0x0028 (0x0028 - 0x0000)
struct FortQuestMapQuestTile_GetQuestNodeData final
{
public:
	class UFortQuestItemDefinition*               QuestItemDefinition;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortQuestMapNode                      NodeData;                                          // 0x0008(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapQuestTile_GetQuestNodeData) == 0x000008, "Wrong alignment on FortQuestMapQuestTile_GetQuestNodeData");
static_assert(sizeof(FortQuestMapQuestTile_GetQuestNodeData) == 0x000028, "Wrong size on FortQuestMapQuestTile_GetQuestNodeData");
static_assert(offsetof(FortQuestMapQuestTile_GetQuestNodeData, QuestItemDefinition) == 0x000000, "Member 'FortQuestMapQuestTile_GetQuestNodeData::QuestItemDefinition' has a wrong offset!");
static_assert(offsetof(FortQuestMapQuestTile_GetQuestNodeData, NodeData) == 0x000008, "Member 'FortQuestMapQuestTile_GetQuestNodeData::NodeData' has a wrong offset!");

// Function FortniteUI.FortQuestMapScreen.HandleMapViewerNavigationRequest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_HandleMapViewerNavigationRequest final
{
public:
	EViewerNavigationDirection                    Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_HandleMapViewerNavigationRequest) == 0x000001, "Wrong alignment on FortQuestMapScreen_HandleMapViewerNavigationRequest");
static_assert(sizeof(FortQuestMapScreen_HandleMapViewerNavigationRequest) == 0x000001, "Wrong size on FortQuestMapScreen_HandleMapViewerNavigationRequest");
static_assert(offsetof(FortQuestMapScreen_HandleMapViewerNavigationRequest, Direction) == 0x000000, "Member 'FortQuestMapScreen_HandleMapViewerNavigationRequest::Direction' has a wrong offset!");

// Function FortniteUI.FortQuestMapScreen.HandleQuestDetailsUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapScreen_HandleQuestDetailsUpdated final
{
public:
	class UFortQuestItem*                         QuestDefinition;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_HandleQuestDetailsUpdated) == 0x000008, "Wrong alignment on FortQuestMapScreen_HandleQuestDetailsUpdated");
static_assert(sizeof(FortQuestMapScreen_HandleQuestDetailsUpdated) == 0x000008, "Wrong size on FortQuestMapScreen_HandleQuestDetailsUpdated");
static_assert(offsetof(FortQuestMapScreen_HandleQuestDetailsUpdated, QuestDefinition) == 0x000000, "Member 'FortQuestMapScreen_HandleQuestDetailsUpdated::QuestDefinition' has a wrong offset!");

// Function FortniteUI.FortQuestMapScreen.IsBeyondCutoffQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_IsBeyondCutoffQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_IsBeyondCutoffQuest) == 0x000001, "Wrong alignment on FortQuestMapScreen_IsBeyondCutoffQuest");
static_assert(sizeof(FortQuestMapScreen_IsBeyondCutoffQuest) == 0x000001, "Wrong size on FortQuestMapScreen_IsBeyondCutoffQuest");
static_assert(offsetof(FortQuestMapScreen_IsBeyondCutoffQuest, ReturnValue) == 0x000000, "Member 'FortQuestMapScreen_IsBeyondCutoffQuest::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapScreen.IsEventFlagActive
// 0x0018 (0x0018 - 0x0000)
struct FortQuestMapScreen_IsEventFlagActive final
{
public:
	class FString                                 EventFlag;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestMapScreen_IsEventFlagActive) == 0x000008, "Wrong alignment on FortQuestMapScreen_IsEventFlagActive");
static_assert(sizeof(FortQuestMapScreen_IsEventFlagActive) == 0x000018, "Wrong size on FortQuestMapScreen_IsEventFlagActive");
static_assert(offsetof(FortQuestMapScreen_IsEventFlagActive, EventFlag) == 0x000000, "Member 'FortQuestMapScreen_IsEventFlagActive::EventFlag' has a wrong offset!");
static_assert(offsetof(FortQuestMapScreen_IsEventFlagActive, ReturnValue) == 0x000010, "Member 'FortQuestMapScreen_IsEventFlagActive::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapScreen.SetBeyondCutoffQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_SetBeyondCutoffQuest final
{
public:
	bool                                          bBeyondCutoff;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_SetBeyondCutoffQuest) == 0x000001, "Wrong alignment on FortQuestMapScreen_SetBeyondCutoffQuest");
static_assert(sizeof(FortQuestMapScreen_SetBeyondCutoffQuest) == 0x000001, "Wrong size on FortQuestMapScreen_SetBeyondCutoffQuest");
static_assert(offsetof(FortQuestMapScreen_SetBeyondCutoffQuest, bBeyondCutoff) == 0x000000, "Member 'FortQuestMapScreen_SetBeyondCutoffQuest::bBeyondCutoff' has a wrong offset!");

// Function FortniteUI.FortQuestMapScreen.SetFindCurrentActionVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_SetFindCurrentActionVisibility final
{
public:
	EInputActionState                             ActionVisibility;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_SetFindCurrentActionVisibility) == 0x000001, "Wrong alignment on FortQuestMapScreen_SetFindCurrentActionVisibility");
static_assert(sizeof(FortQuestMapScreen_SetFindCurrentActionVisibility) == 0x000001, "Wrong size on FortQuestMapScreen_SetFindCurrentActionVisibility");
static_assert(offsetof(FortQuestMapScreen_SetFindCurrentActionVisibility, ActionVisibility) == 0x000000, "Member 'FortQuestMapScreen_SetFindCurrentActionVisibility::ActionVisibility' has a wrong offset!");

// Function FortniteUI.FortQuestMapScreen.SetIgnorePageNavigation
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_SetIgnorePageNavigation final
{
public:
	bool                                          bIgnoreNavigation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_SetIgnorePageNavigation) == 0x000001, "Wrong alignment on FortQuestMapScreen_SetIgnorePageNavigation");
static_assert(sizeof(FortQuestMapScreen_SetIgnorePageNavigation) == 0x000001, "Wrong size on FortQuestMapScreen_SetIgnorePageNavigation");
static_assert(offsetof(FortQuestMapScreen_SetIgnorePageNavigation, bIgnoreNavigation) == 0x000000, "Member 'FortQuestMapScreen_SetIgnorePageNavigation::bIgnoreNavigation' has a wrong offset!");

// Function FortniteUI.FortQuestMapScreen.SetQuestMapViewer
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapScreen_SetQuestMapViewer final
{
public:
	class UFortQuestMapViewer*                    Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_SetQuestMapViewer) == 0x000008, "Wrong alignment on FortQuestMapScreen_SetQuestMapViewer");
static_assert(sizeof(FortQuestMapScreen_SetQuestMapViewer) == 0x000008, "Wrong size on FortQuestMapScreen_SetQuestMapViewer");
static_assert(offsetof(FortQuestMapScreen_SetQuestMapViewer, Value) == 0x000000, "Member 'FortQuestMapScreen_SetQuestMapViewer::Value' has a wrong offset!");

// Function FortniteUI.FortQuestMapScreen.UpdateQuestMapMode
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_UpdateQuestMapMode final
{
public:
	EQuestMapScreenMode                           QuestMapMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_UpdateQuestMapMode) == 0x000001, "Wrong alignment on FortQuestMapScreen_UpdateQuestMapMode");
static_assert(sizeof(FortQuestMapScreen_UpdateQuestMapMode) == 0x000001, "Wrong size on FortQuestMapScreen_UpdateQuestMapMode");
static_assert(offsetof(FortQuestMapScreen_UpdateQuestMapMode, QuestMapMode) == 0x000000, "Member 'FortQuestMapScreen_UpdateQuestMapMode::QuestMapMode' has a wrong offset!");

// Function FortniteUI.FortQuestMapScreen.GetBeyondCutoffQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_GetBeyondCutoffQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_GetBeyondCutoffQuest) == 0x000001, "Wrong alignment on FortQuestMapScreen_GetBeyondCutoffQuest");
static_assert(sizeof(FortQuestMapScreen_GetBeyondCutoffQuest) == 0x000001, "Wrong size on FortQuestMapScreen_GetBeyondCutoffQuest");
static_assert(offsetof(FortQuestMapScreen_GetBeyondCutoffQuest, ReturnValue) == 0x000000, "Member 'FortQuestMapScreen_GetBeyondCutoffQuest::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapScreen.GetCurrentPageCameraMode
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapScreen_GetCurrentPageCameraMode final
{
public:
	EFrontEndCamera                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapScreen_GetCurrentPageCameraMode) == 0x000001, "Wrong alignment on FortQuestMapScreen_GetCurrentPageCameraMode");
static_assert(sizeof(FortQuestMapScreen_GetCurrentPageCameraMode) == 0x000001, "Wrong size on FortQuestMapScreen_GetCurrentPageCameraMode");
static_assert(offsetof(FortQuestMapScreen_GetCurrentPageCameraMode, ReturnValue) == 0x000000, "Member 'FortQuestMapScreen_GetCurrentPageCameraMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.CreateAndAddSquadSlotButton
// 0x0080 (0x0080 - 0x0000)
struct FortSquadSlotsView_CreateAndAddSquadSlotButton final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHomebaseSquadSlot                     SquadSlotDefinition;                               // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UWidget*                                OutSquadSlotButtonHost;                            // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSquadSlotSelectorButton*           ReturnValue;                                       // 0x0078(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_CreateAndAddSquadSlotButton) == 0x000008, "Wrong alignment on FortSquadSlotsView_CreateAndAddSquadSlotButton");
static_assert(sizeof(FortSquadSlotsView_CreateAndAddSquadSlotButton) == 0x000080, "Wrong size on FortSquadSlotsView_CreateAndAddSquadSlotButton");
static_assert(offsetof(FortSquadSlotsView_CreateAndAddSquadSlotButton, SquadSlotIndex) == 0x000000, "Member 'FortSquadSlotsView_CreateAndAddSquadSlotButton::SquadSlotIndex' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_CreateAndAddSquadSlotButton, SquadSlotDefinition) == 0x000008, "Member 'FortSquadSlotsView_CreateAndAddSquadSlotButton::SquadSlotDefinition' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_CreateAndAddSquadSlotButton, OutSquadSlotButtonHost) == 0x000070, "Member 'FortSquadSlotsView_CreateAndAddSquadSlotButton::OutSquadSlotButtonHost' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_CreateAndAddSquadSlotButton, ReturnValue) == 0x000078, "Member 'FortSquadSlotsView_CreateAndAddSquadSlotButton::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.HandleButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotsView_HandleButtonClicked final
{
public:
	class UCommonButton*                          CommittedButton;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_HandleButtonClicked) == 0x000008, "Wrong alignment on FortSquadSlotsView_HandleButtonClicked");
static_assert(sizeof(FortSquadSlotsView_HandleButtonClicked) == 0x000010, "Wrong size on FortSquadSlotsView_HandleButtonClicked");
static_assert(offsetof(FortSquadSlotsView_HandleButtonClicked, CommittedButton) == 0x000000, "Member 'FortSquadSlotsView_HandleButtonClicked::CommittedButton' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_HandleButtonClicked, ButtonIndex) == 0x000008, "Member 'FortSquadSlotsView_HandleButtonClicked::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.HandleButtonDoubleClicked
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotsView_HandleButtonDoubleClicked final
{
public:
	class UCommonButton*                          CommittedButton;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_HandleButtonDoubleClicked) == 0x000008, "Wrong alignment on FortSquadSlotsView_HandleButtonDoubleClicked");
static_assert(sizeof(FortSquadSlotsView_HandleButtonDoubleClicked) == 0x000010, "Wrong size on FortSquadSlotsView_HandleButtonDoubleClicked");
static_assert(offsetof(FortSquadSlotsView_HandleButtonDoubleClicked, CommittedButton) == 0x000000, "Member 'FortSquadSlotsView_HandleButtonDoubleClicked::CommittedButton' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_HandleButtonDoubleClicked, ButtonIndex) == 0x000008, "Member 'FortSquadSlotsView_HandleButtonDoubleClicked::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.HandleHoveredButtonChanged
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotsView_HandleHoveredButtonChanged final
{
public:
	class UCommonButton*                          HoveredButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_HandleHoveredButtonChanged) == 0x000008, "Wrong alignment on FortSquadSlotsView_HandleHoveredButtonChanged");
static_assert(sizeof(FortSquadSlotsView_HandleHoveredButtonChanged) == 0x000010, "Wrong size on FortSquadSlotsView_HandleHoveredButtonChanged");
static_assert(offsetof(FortSquadSlotsView_HandleHoveredButtonChanged, HoveredButton) == 0x000000, "Member 'FortSquadSlotsView_HandleHoveredButtonChanged::HoveredButton' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_HandleHoveredButtonChanged, ButtonIndex) == 0x000008, "Member 'FortSquadSlotsView_HandleHoveredButtonChanged::ButtonIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.HandleRequestOpenSquadSlot
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSlotsView_HandleRequestOpenSquadSlot final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_HandleRequestOpenSquadSlot) == 0x000004, "Wrong alignment on FortSquadSlotsView_HandleRequestOpenSquadSlot");
static_assert(sizeof(FortSquadSlotsView_HandleRequestOpenSquadSlot) == 0x000004, "Wrong size on FortSquadSlotsView_HandleRequestOpenSquadSlot");
static_assert(offsetof(FortSquadSlotsView_HandleRequestOpenSquadSlot, SquadSlotIndex) == 0x000000, "Member 'FortSquadSlotsView_HandleRequestOpenSquadSlot::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.HandleRequestViewInAll
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSlotsView_HandleRequestViewInAll final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_HandleRequestViewInAll) == 0x000004, "Wrong alignment on FortSquadSlotsView_HandleRequestViewInAll");
static_assert(sizeof(FortSquadSlotsView_HandleRequestViewInAll) == 0x000004, "Wrong size on FortSquadSlotsView_HandleRequestViewInAll");
static_assert(offsetof(FortSquadSlotsView_HandleRequestViewInAll, SquadSlotIndex) == 0x000000, "Member 'FortSquadSlotsView_HandleRequestViewInAll::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.HandleSelectedButtonChanged
// 0x0010 (0x0010 - 0x0000)
struct FortSquadSlotsView_HandleSelectedButtonChanged final
{
public:
	class UCommonButton*                          SelectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_HandleSelectedButtonChanged) == 0x000008, "Wrong alignment on FortSquadSlotsView_HandleSelectedButtonChanged");
static_assert(sizeof(FortSquadSlotsView_HandleSelectedButtonChanged) == 0x000010, "Wrong size on FortSquadSlotsView_HandleSelectedButtonChanged");
static_assert(offsetof(FortSquadSlotsView_HandleSelectedButtonChanged, SelectedButton) == 0x000000, "Member 'FortSquadSlotsView_HandleSelectedButtonChanged::SelectedButton' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_HandleSelectedButtonChanged, ButtonIndex) == 0x000008, "Member 'FortSquadSlotsView_HandleSelectedButtonChanged::ButtonIndex' has a wrong offset!");

// DelegateFunction FortniteUI.FortSquadSlotsView.OnDifferentSquadSlotSelected__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSlotsView_OnDifferentSquadSlotSelected__DelegateSignature final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_OnDifferentSquadSlotSelected__DelegateSignature) == 0x000004, "Wrong alignment on FortSquadSlotsView_OnDifferentSquadSlotSelected__DelegateSignature");
static_assert(sizeof(FortSquadSlotsView_OnDifferentSquadSlotSelected__DelegateSignature) == 0x000004, "Wrong size on FortSquadSlotsView_OnDifferentSquadSlotSelected__DelegateSignature");
static_assert(offsetof(FortSquadSlotsView_OnDifferentSquadSlotSelected__DelegateSignature, SquadSlotIndex) == 0x000000, "Member 'FortSquadSlotsView_OnDifferentSquadSlotSelected__DelegateSignature::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.SelectSlot
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSlotsView_SelectSlot final
{
public:
	int32                                         SquadSlotIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_SelectSlot) == 0x000004, "Wrong alignment on FortSquadSlotsView_SelectSlot");
static_assert(sizeof(FortSquadSlotsView_SelectSlot) == 0x000004, "Wrong size on FortSquadSlotsView_SelectSlot");
static_assert(offsetof(FortSquadSlotsView_SelectSlot, SquadSlotIndex) == 0x000000, "Member 'FortSquadSlotsView_SelectSlot::SquadSlotIndex' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.SetIdOfSquadToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotsView_SetIdOfSquadToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_SetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotsView_SetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadSlotsView_SetIdOfSquadToManageBP) == 0x000008, "Wrong size on FortSquadSlotsView_SetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadSlotsView_SetIdOfSquadToManageBP, SquadId) == 0x000000, "Member 'FortSquadSlotsView_SetIdOfSquadToManageBP::SquadId' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.SetInPreviewMode
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotsView_SetInPreviewMode final
{
public:
	bool                                          bPreview;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_SetInPreviewMode) == 0x000001, "Wrong alignment on FortSquadSlotsView_SetInPreviewMode");
static_assert(sizeof(FortSquadSlotsView_SetInPreviewMode) == 0x000001, "Wrong size on FortSquadSlotsView_SetInPreviewMode");
static_assert(offsetof(FortSquadSlotsView_SetInPreviewMode, bPreview) == 0x000000, "Member 'FortSquadSlotsView_SetInPreviewMode::bPreview' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.SetIsSelectionLocked
// 0x0001 (0x0001 - 0x0000)
struct FortSquadSlotsView_SetIsSelectionLocked final
{
public:
	bool                                          ShouldSelectionBeLocked;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_SetIsSelectionLocked) == 0x000001, "Wrong alignment on FortSquadSlotsView_SetIsSelectionLocked");
static_assert(sizeof(FortSquadSlotsView_SetIsSelectionLocked) == 0x000001, "Wrong size on FortSquadSlotsView_SetIsSelectionLocked");
static_assert(offsetof(FortSquadSlotsView_SetIsSelectionLocked, ShouldSelectionBeLocked) == 0x000000, "Member 'FortSquadSlotsView_SetIsSelectionLocked::ShouldSelectionBeLocked' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.TryGetSelectedSquadSlotSortTypes
// 0x0018 (0x0018 - 0x0000)
struct FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes final
{
public:
	struct FSquadSlotSortTypes                    OutSlotSortTypes;                                  // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes) == 0x000008, "Wrong alignment on FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes");
static_assert(sizeof(FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes) == 0x000018, "Wrong size on FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes");
static_assert(offsetof(FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes, OutSlotSortTypes) == 0x000000, "Member 'FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes::OutSlotSortTypes' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes, ReturnValue) == 0x000010, "Member 'FortSquadSlotsView_TryGetSelectedSquadSlotSortTypes::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.GetIdOfSquadToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSquadSlotsView_GetIdOfSquadToManageBP final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_GetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSquadSlotsView_GetIdOfSquadToManageBP");
static_assert(sizeof(FortSquadSlotsView_GetIdOfSquadToManageBP) == 0x000008, "Wrong size on FortSquadSlotsView_GetIdOfSquadToManageBP");
static_assert(offsetof(FortSquadSlotsView_GetIdOfSquadToManageBP, ReturnValue) == 0x000000, "Member 'FortSquadSlotsView_GetIdOfSquadToManageBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.GetIndexOfSelectedSquadSlot
// 0x0004 (0x0004 - 0x0000)
struct FortSquadSlotsView_GetIndexOfSelectedSquadSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadSlotsView_GetIndexOfSelectedSquadSlot) == 0x000004, "Wrong alignment on FortSquadSlotsView_GetIndexOfSelectedSquadSlot");
static_assert(sizeof(FortSquadSlotsView_GetIndexOfSelectedSquadSlot) == 0x000004, "Wrong size on FortSquadSlotsView_GetIndexOfSelectedSquadSlot");
static_assert(offsetof(FortSquadSlotsView_GetIndexOfSelectedSquadSlot, ReturnValue) == 0x000000, "Member 'FortSquadSlotsView_GetIndexOfSelectedSquadSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadSlotsView.TryGetStaticSquadDataBP
// 0x0090 (0x0090 - 0x0000)
struct FortSquadSlotsView_TryGetStaticSquadDataBP final
{
public:
	struct FHomebaseSquad                         OutSquadData;                                      // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSquadSlotsView_TryGetStaticSquadDataBP) == 0x000008, "Wrong alignment on FortSquadSlotsView_TryGetStaticSquadDataBP");
static_assert(sizeof(FortSquadSlotsView_TryGetStaticSquadDataBP) == 0x000090, "Wrong size on FortSquadSlotsView_TryGetStaticSquadDataBP");
static_assert(offsetof(FortSquadSlotsView_TryGetStaticSquadDataBP, OutSquadData) == 0x000000, "Member 'FortSquadSlotsView_TryGetStaticSquadDataBP::OutSquadData' has a wrong offset!");
static_assert(offsetof(FortSquadSlotsView_TryGetStaticSquadDataBP, ReturnValue) == 0x000088, "Member 'FortSquadSlotsView_TryGetStaticSquadDataBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapViewer.NavigateToPage
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapViewer_NavigateToPage final
{
public:
	EViewerNavigationDirection                    Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapViewer_NavigateToPage) == 0x000001, "Wrong alignment on FortQuestMapViewer_NavigateToPage");
static_assert(sizeof(FortQuestMapViewer_NavigateToPage) == 0x000001, "Wrong size on FortQuestMapViewer_NavigateToPage");
static_assert(offsetof(FortQuestMapViewer_NavigateToPage, Direction) == 0x000000, "Member 'FortQuestMapViewer_NavigateToPage::Direction' has a wrong offset!");

// Function FortniteUI.FortQuestMapViewer.PlayLayoutOutroAnimation
// 0x0001 (0x0001 - 0x0000)
struct FortQuestMapViewer_PlayLayoutOutroAnimation final
{
public:
	EViewerNavigationDirection                    TravelDirection;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapViewer_PlayLayoutOutroAnimation) == 0x000001, "Wrong alignment on FortQuestMapViewer_PlayLayoutOutroAnimation");
static_assert(sizeof(FortQuestMapViewer_PlayLayoutOutroAnimation) == 0x000001, "Wrong size on FortQuestMapViewer_PlayLayoutOutroAnimation");
static_assert(offsetof(FortQuestMapViewer_PlayLayoutOutroAnimation, TravelDirection) == 0x000000, "Member 'FortQuestMapViewer_PlayLayoutOutroAnimation::TravelDirection' has a wrong offset!");

// Function FortniteUI.FortQuestMapViewer.SetQuestMapNodeLayout
// 0x0008 (0x0008 - 0x0000)
struct FortQuestMapViewer_SetQuestMapNodeLayout final
{
public:
	class UFortQuestMapNodeLayout*                Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapViewer_SetQuestMapNodeLayout) == 0x000008, "Wrong alignment on FortQuestMapViewer_SetQuestMapNodeLayout");
static_assert(sizeof(FortQuestMapViewer_SetQuestMapNodeLayout) == 0x000008, "Wrong size on FortQuestMapViewer_SetQuestMapNodeLayout");
static_assert(offsetof(FortQuestMapViewer_SetQuestMapNodeLayout, Value) == 0x000000, "Member 'FortQuestMapViewer_SetQuestMapNodeLayout::Value' has a wrong offset!");

// Function FortniteUI.FortQuestMapViewer.GetQuestMapCosmeticData
// 0x0050 (0x0050 - 0x0000)
struct FortQuestMapViewer_GetQuestMapCosmeticData final
{
public:
	struct FFortQuestMapPageCosmetics             ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapViewer_GetQuestMapCosmeticData) == 0x000008, "Wrong alignment on FortQuestMapViewer_GetQuestMapCosmeticData");
static_assert(sizeof(FortQuestMapViewer_GetQuestMapCosmeticData) == 0x000050, "Wrong size on FortQuestMapViewer_GetQuestMapCosmeticData");
static_assert(offsetof(FortQuestMapViewer_GetQuestMapCosmeticData, ReturnValue) == 0x000000, "Member 'FortQuestMapViewer_GetQuestMapCosmeticData::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestMapViewer.GetQuestMapData
// 0x0058 (0x0058 - 0x0000)
struct FortQuestMapViewer_GetQuestMapData final
{
public:
	struct FFortQuestMapPage                      ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestMapViewer_GetQuestMapData) == 0x000008, "Wrong alignment on FortQuestMapViewer_GetQuestMapData");
static_assert(sizeof(FortQuestMapViewer_GetQuestMapData) == 0x000058, "Wrong size on FortQuestMapViewer_GetQuestMapData");
static_assert(offsetof(FortQuestMapViewer_GetQuestMapData, ReturnValue) == 0x000000, "Member 'FortQuestMapViewer_GetQuestMapData::ReturnValue' has a wrong offset!");

// Function FortniteUI.LiveStreamStandalonePlayer.OnRetrieveVideoUrlResult
// 0x0010 (0x0010 - 0x0000)
struct LiveStreamStandalonePlayer_OnRetrieveVideoUrlResult final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiveStreamStandalonePlayer_OnRetrieveVideoUrlResult) == 0x000008, "Wrong alignment on LiveStreamStandalonePlayer_OnRetrieveVideoUrlResult");
static_assert(sizeof(LiveStreamStandalonePlayer_OnRetrieveVideoUrlResult) == 0x000010, "Wrong size on LiveStreamStandalonePlayer_OnRetrieveVideoUrlResult");
static_assert(offsetof(LiveStreamStandalonePlayer_OnRetrieveVideoUrlResult, URL) == 0x000000, "Member 'LiveStreamStandalonePlayer_OnRetrieveVideoUrlResult::URL' has a wrong offset!");

// Function FortniteUI.FortQuestObjectiveEntry.ObjectiveInfoSet
// 0x0010 (0x0010 - 0x0000)
struct FortQuestObjectiveEntry_ObjectiveInfoSet final
{
public:
	const class UFortQuestObjectiveInfo*          ObjectiveInfo;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAnnouncement;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestObjectiveEntry_ObjectiveInfoSet) == 0x000008, "Wrong alignment on FortQuestObjectiveEntry_ObjectiveInfoSet");
static_assert(sizeof(FortQuestObjectiveEntry_ObjectiveInfoSet) == 0x000010, "Wrong size on FortQuestObjectiveEntry_ObjectiveInfoSet");
static_assert(offsetof(FortQuestObjectiveEntry_ObjectiveInfoSet, ObjectiveInfo) == 0x000000, "Member 'FortQuestObjectiveEntry_ObjectiveInfoSet::ObjectiveInfo' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveEntry_ObjectiveInfoSet, IsAnnouncement) == 0x000008, "Member 'FortQuestObjectiveEntry_ObjectiveInfoSet::IsAnnouncement' has a wrong offset!");

// Function FortniteUI.FortQuestPlayButton.HandleMatchmakingComplete
// 0x0001 (0x0001 - 0x0000)
struct FortQuestPlayButton_HandleMatchmakingComplete final
{
public:
	EMatchmakingCompleteResult                    Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestPlayButton_HandleMatchmakingComplete) == 0x000001, "Wrong alignment on FortQuestPlayButton_HandleMatchmakingComplete");
static_assert(sizeof(FortQuestPlayButton_HandleMatchmakingComplete) == 0x000001, "Wrong size on FortQuestPlayButton_HandleMatchmakingComplete");
static_assert(offsetof(FortQuestPlayButton_HandleMatchmakingComplete, Result) == 0x000000, "Member 'FortQuestPlayButton_HandleMatchmakingComplete::Result' has a wrong offset!");

// Function FortniteUI.FortQuestPlayButton.CanNavigateToQuestObjective
// 0x0001 (0x0001 - 0x0000)
struct FortQuestPlayButton_CanNavigateToQuestObjective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestPlayButton_CanNavigateToQuestObjective) == 0x000001, "Wrong alignment on FortQuestPlayButton_CanNavigateToQuestObjective");
static_assert(sizeof(FortQuestPlayButton_CanNavigateToQuestObjective) == 0x000001, "Wrong size on FortQuestPlayButton_CanNavigateToQuestObjective");
static_assert(offsetof(FortQuestPlayButton_CanNavigateToQuestObjective, ReturnValue) == 0x000000, "Member 'FortQuestPlayButton_CanNavigateToQuestObjective::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestPlayButton.CanPlayQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestPlayButton_CanPlayQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestPlayButton_CanPlayQuest) == 0x000001, "Wrong alignment on FortQuestPlayButton_CanPlayQuest");
static_assert(sizeof(FortQuestPlayButton_CanPlayQuest) == 0x000001, "Wrong size on FortQuestPlayButton_CanPlayQuest");
static_assert(offsetof(FortQuestPlayButton_CanPlayQuest, ReturnValue) == 0x000000, "Member 'FortQuestPlayButton_CanPlayQuest::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestTrackerEntry.HandleHUDObjectiveCompletion
// 0x0008 (0x0008 - 0x0000)
struct FortQuestTrackerEntry_HandleHUDObjectiveCompletion final
{
public:
	class UFortQuestObjectiveInfo*                QuestObjective;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestTrackerEntry_HandleHUDObjectiveCompletion) == 0x000008, "Wrong alignment on FortQuestTrackerEntry_HandleHUDObjectiveCompletion");
static_assert(sizeof(FortQuestTrackerEntry_HandleHUDObjectiveCompletion) == 0x000008, "Wrong size on FortQuestTrackerEntry_HandleHUDObjectiveCompletion");
static_assert(offsetof(FortQuestTrackerEntry_HandleHUDObjectiveCompletion, QuestObjective) == 0x000000, "Member 'FortQuestTrackerEntry_HandleHUDObjectiveCompletion::QuestObjective' has a wrong offset!");

// Function FortniteUI.FortQuestTrackerList.GetQuestsToDisplay
// 0x0010 (0x0010 - 0x0000)
struct FortQuestTrackerList_GetQuestsToDisplay final
{
public:
	TArray<class UFortQuestItem*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestTrackerList_GetQuestsToDisplay) == 0x000008, "Wrong alignment on FortQuestTrackerList_GetQuestsToDisplay");
static_assert(sizeof(FortQuestTrackerList_GetQuestsToDisplay) == 0x000010, "Wrong size on FortQuestTrackerList_GetQuestsToDisplay");
static_assert(offsetof(FortQuestTrackerList_GetQuestsToDisplay, ReturnValue) == 0x000000, "Member 'FortQuestTrackerList_GetQuestsToDisplay::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestTrackerList.HandleHUDFinalObjectiveHidden
// 0x0008 (0x0008 - 0x0000)
struct FortQuestTrackerList_HandleHUDFinalObjectiveHidden final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestTrackerList_HandleHUDFinalObjectiveHidden) == 0x000008, "Wrong alignment on FortQuestTrackerList_HandleHUDFinalObjectiveHidden");
static_assert(sizeof(FortQuestTrackerList_HandleHUDFinalObjectiveHidden) == 0x000008, "Wrong size on FortQuestTrackerList_HandleHUDFinalObjectiveHidden");
static_assert(offsetof(FortQuestTrackerList_HandleHUDFinalObjectiveHidden, QuestItem) == 0x000000, "Member 'FortQuestTrackerList_HandleHUDFinalObjectiveHidden::QuestItem' has a wrong offset!");

// Function FortniteUI.FortQuestTrackerList.HandleSizeEstimateChanged
// 0x0008 (0x0008 - 0x0000)
struct FortQuestTrackerList_HandleSizeEstimateChanged final
{
public:
	class UObject*                                ChangedElement;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestTrackerList_HandleSizeEstimateChanged) == 0x000008, "Wrong alignment on FortQuestTrackerList_HandleSizeEstimateChanged");
static_assert(sizeof(FortQuestTrackerList_HandleSizeEstimateChanged) == 0x000008, "Wrong size on FortQuestTrackerList_HandleSizeEstimateChanged");
static_assert(offsetof(FortQuestTrackerList_HandleSizeEstimateChanged, ChangedElement) == 0x000000, "Member 'FortQuestTrackerList_HandleSizeEstimateChanged::ChangedElement' has a wrong offset!");

// Function FortniteUI.FortQuestTreeItemWidget.SetupAsCategory
// 0x0008 (0x0008 - 0x0000)
struct FortQuestTreeItemWidget_SetupAsCategory final
{
public:
	class UFortQuestCategory*                     Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestTreeItemWidget_SetupAsCategory) == 0x000008, "Wrong alignment on FortQuestTreeItemWidget_SetupAsCategory");
static_assert(sizeof(FortQuestTreeItemWidget_SetupAsCategory) == 0x000008, "Wrong size on FortQuestTreeItemWidget_SetupAsCategory");
static_assert(offsetof(FortQuestTreeItemWidget_SetupAsCategory, Category) == 0x000000, "Member 'FortQuestTreeItemWidget_SetupAsCategory::Category' has a wrong offset!");

// Function FortniteUI.FortQuestTreeItemWidget.SetupAsQuest
// 0x0008 (0x0008 - 0x0000)
struct FortQuestTreeItemWidget_SetupAsQuest final
{
public:
	class UFortQuestItem*                         Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestTreeItemWidget_SetupAsQuest) == 0x000008, "Wrong alignment on FortQuestTreeItemWidget_SetupAsQuest");
static_assert(sizeof(FortQuestTreeItemWidget_SetupAsQuest) == 0x000008, "Wrong size on FortQuestTreeItemWidget_SetupAsQuest");
static_assert(offsetof(FortQuestTreeItemWidget_SetupAsQuest, Category) == 0x000000, "Member 'FortQuestTreeItemWidget_SetupAsQuest::Category' has a wrong offset!");

// Function FortniteUI.FortStoreContext.AttemptOpenPackByIndex
// 0x0004 (0x0004 - 0x0000)
struct FortStoreContext_AttemptOpenPackByIndex final
{
public:
	int32                                         CardPackIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_AttemptOpenPackByIndex) == 0x000004, "Wrong alignment on FortStoreContext_AttemptOpenPackByIndex");
static_assert(sizeof(FortStoreContext_AttemptOpenPackByIndex) == 0x000004, "Wrong size on FortStoreContext_AttemptOpenPackByIndex");
static_assert(offsetof(FortStoreContext_AttemptOpenPackByIndex, CardPackIndex) == 0x000000, "Member 'FortStoreContext_AttemptOpenPackByIndex::CardPackIndex' has a wrong offset!");

// Function FortniteUI.FortStoreContext.CardAddedToSummaryComplete
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_CardAddedToSummaryComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_CardAddedToSummaryComplete) == 0x000001, "Wrong alignment on FortStoreContext_CardAddedToSummaryComplete");
static_assert(sizeof(FortStoreContext_CardAddedToSummaryComplete) == 0x000001, "Wrong size on FortStoreContext_CardAddedToSummaryComplete");
static_assert(offsetof(FortStoreContext_CardAddedToSummaryComplete, ReturnValue) == 0x000000, "Member 'FortStoreContext_CardAddedToSummaryComplete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.CardBackRevealComplete
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_CardBackRevealComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_CardBackRevealComplete) == 0x000001, "Wrong alignment on FortStoreContext_CardBackRevealComplete");
static_assert(sizeof(FortStoreContext_CardBackRevealComplete) == 0x000001, "Wrong size on FortStoreContext_CardBackRevealComplete");
static_assert(offsetof(FortStoreContext_CardBackRevealComplete, ReturnValue) == 0x000000, "Member 'FortStoreContext_CardBackRevealComplete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.CardEntryComplete
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_CardEntryComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_CardEntryComplete) == 0x000001, "Wrong alignment on FortStoreContext_CardEntryComplete");
static_assert(sizeof(FortStoreContext_CardEntryComplete) == 0x000001, "Wrong size on FortStoreContext_CardEntryComplete");
static_assert(offsetof(FortStoreContext_CardEntryComplete, ReturnValue) == 0x000000, "Member 'FortStoreContext_CardEntryComplete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.CardExitComplete
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_CardExitComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_CardExitComplete) == 0x000001, "Wrong alignment on FortStoreContext_CardExitComplete");
static_assert(sizeof(FortStoreContext_CardExitComplete) == 0x000001, "Wrong size on FortStoreContext_CardExitComplete");
static_assert(offsetof(FortStoreContext_CardExitComplete, ReturnValue) == 0x000000, "Member 'FortStoreContext_CardExitComplete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.CardFlipComplete
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_CardFlipComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_CardFlipComplete) == 0x000001, "Wrong alignment on FortStoreContext_CardFlipComplete");
static_assert(sizeof(FortStoreContext_CardFlipComplete) == 0x000001, "Wrong size on FortStoreContext_CardFlipComplete");
static_assert(offsetof(FortStoreContext_CardFlipComplete, ReturnValue) == 0x000000, "Member 'FortStoreContext_CardFlipComplete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.CardFrontRevealComplete
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_CardFrontRevealComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_CardFrontRevealComplete) == 0x000001, "Wrong alignment on FortStoreContext_CardFrontRevealComplete");
static_assert(sizeof(FortStoreContext_CardFrontRevealComplete) == 0x000001, "Wrong size on FortStoreContext_CardFrontRevealComplete");
static_assert(offsetof(FortStoreContext_CardFrontRevealComplete, ReturnValue) == 0x000000, "Member 'FortStoreContext_CardFrontRevealComplete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.CardPackDestroyComplete
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_CardPackDestroyComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_CardPackDestroyComplete) == 0x000001, "Wrong alignment on FortStoreContext_CardPackDestroyComplete");
static_assert(sizeof(FortStoreContext_CardPackDestroyComplete) == 0x000001, "Wrong size on FortStoreContext_CardPackDestroyComplete");
static_assert(offsetof(FortStoreContext_CardPackDestroyComplete, ReturnValue) == 0x000000, "Member 'FortStoreContext_CardPackDestroyComplete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.CardPackOpeningComplete
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_CardPackOpeningComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_CardPackOpeningComplete) == 0x000001, "Wrong alignment on FortStoreContext_CardPackOpeningComplete");
static_assert(sizeof(FortStoreContext_CardPackOpeningComplete) == 0x000001, "Wrong size on FortStoreContext_CardPackOpeningComplete");
static_assert(offsetof(FortStoreContext_CardPackOpeningComplete, ReturnValue) == 0x000000, "Member 'FortStoreContext_CardPackOpeningComplete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.ChoiceResultComplete
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_ChoiceResultComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_ChoiceResultComplete) == 0x000001, "Wrong alignment on FortStoreContext_ChoiceResultComplete");
static_assert(sizeof(FortStoreContext_ChoiceResultComplete) == 0x000001, "Wrong size on FortStoreContext_ChoiceResultComplete");
static_assert(offsetof(FortStoreContext_ChoiceResultComplete, ReturnValue) == 0x000000, "Member 'FortStoreContext_ChoiceResultComplete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.EnterCardPackStore
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_EnterCardPackStore final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_EnterCardPackStore) == 0x000001, "Wrong alignment on FortStoreContext_EnterCardPackStore");
static_assert(sizeof(FortStoreContext_EnterCardPackStore) == 0x000001, "Wrong size on FortStoreContext_EnterCardPackStore");
static_assert(offsetof(FortStoreContext_EnterCardPackStore, ReturnValue) == 0x000000, "Member 'FortStoreContext_EnterCardPackStore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.EnterCurrencyStore
// 0x0018 (0x0018 - 0x0000)
struct FortStoreContext_EnterCurrencyStore final
{
public:
	class FString                                 AttemptedPurchaseCardPackId;                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreContext_EnterCurrencyStore) == 0x000008, "Wrong alignment on FortStoreContext_EnterCurrencyStore");
static_assert(sizeof(FortStoreContext_EnterCurrencyStore) == 0x000018, "Wrong size on FortStoreContext_EnterCurrencyStore");
static_assert(offsetof(FortStoreContext_EnterCurrencyStore, AttemptedPurchaseCardPackId) == 0x000000, "Member 'FortStoreContext_EnterCurrencyStore::AttemptedPurchaseCardPackId' has a wrong offset!");
static_assert(offsetof(FortStoreContext_EnterCurrencyStore, ReturnValue) == 0x000010, "Member 'FortStoreContext_EnterCurrencyStore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.ErrorOccurred
// 0x0018 (0x0018 - 0x0000)
struct FortStoreContext_ErrorOccurred final
{
public:
	class FString                                 ErrorAnalytics;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreContext_ErrorOccurred) == 0x000008, "Wrong alignment on FortStoreContext_ErrorOccurred");
static_assert(sizeof(FortStoreContext_ErrorOccurred) == 0x000018, "Wrong size on FortStoreContext_ErrorOccurred");
static_assert(offsetof(FortStoreContext_ErrorOccurred, ErrorAnalytics) == 0x000000, "Member 'FortStoreContext_ErrorOccurred::ErrorAnalytics' has a wrong offset!");
static_assert(offsetof(FortStoreContext_ErrorOccurred, ReturnValue) == 0x000010, "Member 'FortStoreContext_ErrorOccurred::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.ExitCardPackStore
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_ExitCardPackStore final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_ExitCardPackStore) == 0x000001, "Wrong alignment on FortStoreContext_ExitCardPackStore");
static_assert(sizeof(FortStoreContext_ExitCardPackStore) == 0x000001, "Wrong size on FortStoreContext_ExitCardPackStore");
static_assert(offsetof(FortStoreContext_ExitCardPackStore, ReturnValue) == 0x000000, "Member 'FortStoreContext_ExitCardPackStore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.ExitCurrencyStore
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_ExitCurrencyStore final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_ExitCurrencyStore) == 0x000001, "Wrong alignment on FortStoreContext_ExitCurrencyStore");
static_assert(sizeof(FortStoreContext_ExitCurrencyStore) == 0x000001, "Wrong size on FortStoreContext_ExitCurrencyStore");
static_assert(offsetof(FortStoreContext_ExitCurrencyStore, ReturnValue) == 0x000000, "Member 'FortStoreContext_ExitCurrencyStore::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.ExitSummary
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_ExitSummary final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_ExitSummary) == 0x000001, "Wrong alignment on FortStoreContext_ExitSummary");
static_assert(sizeof(FortStoreContext_ExitSummary) == 0x000001, "Wrong size on FortStoreContext_ExitSummary");
static_assert(offsetof(FortStoreContext_ExitSummary, ReturnValue) == 0x000000, "Member 'FortStoreContext_ExitSummary::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.ExitWebPayment
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_ExitWebPayment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_ExitWebPayment) == 0x000001, "Wrong alignment on FortStoreContext_ExitWebPayment");
static_assert(sizeof(FortStoreContext_ExitWebPayment) == 0x000001, "Wrong size on FortStoreContext_ExitWebPayment");
static_assert(offsetof(FortStoreContext_ExitWebPayment, ReturnValue) == 0x000000, "Member 'FortStoreContext_ExitWebPayment::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.GetAccountItems
// 0x0020 (0x0020 - 0x0000)
struct FortStoreContext_GetAccountItems final
{
public:
	TArray<class UFortAccountItemDefinition*>     AccountItemDefinitions;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UFortAccountItem*>               AccountItems;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_GetAccountItems) == 0x000008, "Wrong alignment on FortStoreContext_GetAccountItems");
static_assert(sizeof(FortStoreContext_GetAccountItems) == 0x000020, "Wrong size on FortStoreContext_GetAccountItems");
static_assert(offsetof(FortStoreContext_GetAccountItems, AccountItemDefinitions) == 0x000000, "Member 'FortStoreContext_GetAccountItems::AccountItemDefinitions' has a wrong offset!");
static_assert(offsetof(FortStoreContext_GetAccountItems, AccountItems) == 0x000010, "Member 'FortStoreContext_GetAccountItems::AccountItems' has a wrong offset!");

// Function FortniteUI.FortStoreContext.GetRarityColor
// 0x0014 (0x0014 - 0x0000)
struct FortStoreContext_GetRarityColor final
{
public:
	EFortRarity                                   Rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_GetRarityColor) == 0x000004, "Wrong alignment on FortStoreContext_GetRarityColor");
static_assert(sizeof(FortStoreContext_GetRarityColor) == 0x000014, "Wrong size on FortStoreContext_GetRarityColor");
static_assert(offsetof(FortStoreContext_GetRarityColor, Rarity) == 0x000000, "Member 'FortStoreContext_GetRarityColor::Rarity' has a wrong offset!");
static_assert(offsetof(FortStoreContext_GetRarityColor, ReturnValue) == 0x000004, "Member 'FortStoreContext_GetRarityColor::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.GetTimeUntilDailyLimitReset
// 0x0008 (0x0008 - 0x0000)
struct FortStoreContext_GetTimeUntilDailyLimitReset final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_GetTimeUntilDailyLimitReset) == 0x000008, "Wrong alignment on FortStoreContext_GetTimeUntilDailyLimitReset");
static_assert(sizeof(FortStoreContext_GetTimeUntilDailyLimitReset) == 0x000008, "Wrong size on FortStoreContext_GetTimeUntilDailyLimitReset");
static_assert(offsetof(FortStoreContext_GetTimeUntilDailyLimitReset, ReturnValue) == 0x000000, "Member 'FortStoreContext_GetTimeUntilDailyLimitReset::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.GetTimeUntilMarketplaceRefresh
// 0x0008 (0x0008 - 0x0000)
struct FortStoreContext_GetTimeUntilMarketplaceRefresh final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_GetTimeUntilMarketplaceRefresh) == 0x000008, "Wrong alignment on FortStoreContext_GetTimeUntilMarketplaceRefresh");
static_assert(sizeof(FortStoreContext_GetTimeUntilMarketplaceRefresh) == 0x000008, "Wrong size on FortStoreContext_GetTimeUntilMarketplaceRefresh");
static_assert(offsetof(FortStoreContext_GetTimeUntilMarketplaceRefresh, ReturnValue) == 0x000000, "Member 'FortStoreContext_GetTimeUntilMarketplaceRefresh::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.MakeChoice
// 0x0008 (0x0008 - 0x0000)
struct FortStoreContext_MakeChoice final
{
public:
	int32                                         ChoiceIdx;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreContext_MakeChoice) == 0x000004, "Wrong alignment on FortStoreContext_MakeChoice");
static_assert(sizeof(FortStoreContext_MakeChoice) == 0x000008, "Wrong size on FortStoreContext_MakeChoice");
static_assert(offsetof(FortStoreContext_MakeChoice, ChoiceIdx) == 0x000000, "Member 'FortStoreContext_MakeChoice::ChoiceIdx' has a wrong offset!");
static_assert(offsetof(FortStoreContext_MakeChoice, ReturnValue) == 0x000004, "Member 'FortStoreContext_MakeChoice::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.MakePurchase
// 0x0088 (0x0088 - 0x0000)
struct FortStoreContext_MakePurchase final
{
public:
	struct FCardPackOffer                         Offer;                                             // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortCardPackItemDefinition*            CardPackDefinition;                                // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECardPackPurchaseError                        ReturnValue;                                       // 0x0084(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreContext_MakePurchase) == 0x000008, "Wrong alignment on FortStoreContext_MakePurchase");
static_assert(sizeof(FortStoreContext_MakePurchase) == 0x000088, "Wrong size on FortStoreContext_MakePurchase");
static_assert(offsetof(FortStoreContext_MakePurchase, Offer) == 0x000000, "Member 'FortStoreContext_MakePurchase::Offer' has a wrong offset!");
static_assert(offsetof(FortStoreContext_MakePurchase, CardPackDefinition) == 0x000078, "Member 'FortStoreContext_MakePurchase::CardPackDefinition' has a wrong offset!");
static_assert(offsetof(FortStoreContext_MakePurchase, Quantity) == 0x000080, "Member 'FortStoreContext_MakePurchase::Quantity' has a wrong offset!");
static_assert(offsetof(FortStoreContext_MakePurchase, ReturnValue) == 0x000084, "Member 'FortStoreContext_MakePurchase::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.OpenWebPayment
// 0x0018 (0x0018 - 0x0000)
struct FortStoreContext_OpenWebPayment final
{
public:
	class FString                                 AttemptedMTXOfferId;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreContext_OpenWebPayment) == 0x000008, "Wrong alignment on FortStoreContext_OpenWebPayment");
static_assert(sizeof(FortStoreContext_OpenWebPayment) == 0x000018, "Wrong size on FortStoreContext_OpenWebPayment");
static_assert(offsetof(FortStoreContext_OpenWebPayment, AttemptedMTXOfferId) == 0x000000, "Member 'FortStoreContext_OpenWebPayment::AttemptedMTXOfferId' has a wrong offset!");
static_assert(offsetof(FortStoreContext_OpenWebPayment, ReturnValue) == 0x000010, "Member 'FortStoreContext_OpenWebPayment::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.PurchaseOpeningComplete
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_PurchaseOpeningComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_PurchaseOpeningComplete) == 0x000001, "Wrong alignment on FortStoreContext_PurchaseOpeningComplete");
static_assert(sizeof(FortStoreContext_PurchaseOpeningComplete) == 0x000001, "Wrong size on FortStoreContext_PurchaseOpeningComplete");
static_assert(offsetof(FortStoreContext_PurchaseOpeningComplete, ReturnValue) == 0x000000, "Member 'FortStoreContext_PurchaseOpeningComplete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.ShouldShowNewMtxStoreUi
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_ShouldShowNewMtxStoreUi final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_ShouldShowNewMtxStoreUi) == 0x000001, "Wrong alignment on FortStoreContext_ShouldShowNewMtxStoreUi");
static_assert(sizeof(FortStoreContext_ShouldShowNewMtxStoreUi) == 0x000001, "Wrong size on FortStoreContext_ShouldShowNewMtxStoreUi");
static_assert(offsetof(FortStoreContext_ShouldShowNewMtxStoreUi, ReturnValue) == 0x000000, "Member 'FortStoreContext_ShouldShowNewMtxStoreUi::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.StoreHasStarsForSale
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_StoreHasStarsForSale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_StoreHasStarsForSale) == 0x000001, "Wrong alignment on FortStoreContext_StoreHasStarsForSale");
static_assert(sizeof(FortStoreContext_StoreHasStarsForSale) == 0x000001, "Wrong size on FortStoreContext_StoreHasStarsForSale");
static_assert(offsetof(FortStoreContext_StoreHasStarsForSale, ReturnValue) == 0x000000, "Member 'FortStoreContext_StoreHasStarsForSale::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.FireInteractionAnalyticsEvent
// 0x0020 (0x0020 - 0x0000)
struct FortStoreContext_FireInteractionAnalyticsEvent final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Details;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_FireInteractionAnalyticsEvent) == 0x000008, "Wrong alignment on FortStoreContext_FireInteractionAnalyticsEvent");
static_assert(sizeof(FortStoreContext_FireInteractionAnalyticsEvent) == 0x000020, "Wrong size on FortStoreContext_FireInteractionAnalyticsEvent");
static_assert(offsetof(FortStoreContext_FireInteractionAnalyticsEvent, Interaction) == 0x000000, "Member 'FortStoreContext_FireInteractionAnalyticsEvent::Interaction' has a wrong offset!");
static_assert(offsetof(FortStoreContext_FireInteractionAnalyticsEvent, Details) == 0x000010, "Member 'FortStoreContext_FireInteractionAnalyticsEvent::Details' has a wrong offset!");

// Function FortniteUI.FortStoreContext.GetCard
// 0x0028 (0x0028 - 0x0000)
struct FortStoreContext_GetCard final
{
public:
	int32                                         CardIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCard                                  ResultOut;                                         // 0x0008(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreContext_GetCard) == 0x000008, "Wrong alignment on FortStoreContext_GetCard");
static_assert(sizeof(FortStoreContext_GetCard) == 0x000028, "Wrong size on FortStoreContext_GetCard");
static_assert(offsetof(FortStoreContext_GetCard, CardIdx) == 0x000000, "Member 'FortStoreContext_GetCard::CardIdx' has a wrong offset!");
static_assert(offsetof(FortStoreContext_GetCard, ResultOut) == 0x000008, "Member 'FortStoreContext_GetCard::ResultOut' has a wrong offset!");
static_assert(offsetof(FortStoreContext_GetCard, ReturnValue) == 0x000020, "Member 'FortStoreContext_GetCard::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.GetChoiceCards
// 0x0018 (0x0018 - 0x0000)
struct FortStoreContext_GetChoiceCards final
{
public:
	int32                                         CardIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCard>                          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_GetChoiceCards) == 0x000008, "Wrong alignment on FortStoreContext_GetChoiceCards");
static_assert(sizeof(FortStoreContext_GetChoiceCards) == 0x000018, "Wrong size on FortStoreContext_GetChoiceCards");
static_assert(offsetof(FortStoreContext_GetChoiceCards, CardIdx) == 0x000000, "Member 'FortStoreContext_GetChoiceCards::CardIdx' has a wrong offset!");
static_assert(offsetof(FortStoreContext_GetChoiceCards, ReturnValue) == 0x000008, "Member 'FortStoreContext_GetChoiceCards::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.GetNumUnopenedCardPacksRemaining
// 0x0010 (0x0010 - 0x0000)
struct FortStoreContext_GetNumUnopenedCardPacksRemaining final
{
public:
	const class UFortCardPackItemDefinition*      PackType;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCountChoicePacks;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_GetNumUnopenedCardPacksRemaining) == 0x000008, "Wrong alignment on FortStoreContext_GetNumUnopenedCardPacksRemaining");
static_assert(sizeof(FortStoreContext_GetNumUnopenedCardPacksRemaining) == 0x000010, "Wrong size on FortStoreContext_GetNumUnopenedCardPacksRemaining");
static_assert(offsetof(FortStoreContext_GetNumUnopenedCardPacksRemaining, PackType) == 0x000000, "Member 'FortStoreContext_GetNumUnopenedCardPacksRemaining::PackType' has a wrong offset!");
static_assert(offsetof(FortStoreContext_GetNumUnopenedCardPacksRemaining, bCountChoicePacks) == 0x000008, "Member 'FortStoreContext_GetNumUnopenedCardPacksRemaining::bCountChoicePacks' has a wrong offset!");
static_assert(offsetof(FortStoreContext_GetNumUnopenedCardPacksRemaining, ReturnValue) == 0x00000C, "Member 'FortStoreContext_GetNumUnopenedCardPacksRemaining::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.GetOwnedItemCount
// 0x0010 (0x0010 - 0x0000)
struct FortStoreContext_GetOwnedItemCount final
{
public:
	const class UFortItemDefinition*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortStoreContext_GetOwnedItemCount) == 0x000008, "Wrong alignment on FortStoreContext_GetOwnedItemCount");
static_assert(sizeof(FortStoreContext_GetOwnedItemCount) == 0x000010, "Wrong size on FortStoreContext_GetOwnedItemCount");
static_assert(offsetof(FortStoreContext_GetOwnedItemCount, ItemDefinition) == 0x000000, "Member 'FortStoreContext_GetOwnedItemCount::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortStoreContext_GetOwnedItemCount, ReturnValue) == 0x000008, "Member 'FortStoreContext_GetOwnedItemCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.GetPreviousState
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_GetPreviousState final
{
public:
	EFortStoreState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_GetPreviousState) == 0x000001, "Wrong alignment on FortStoreContext_GetPreviousState");
static_assert(sizeof(FortStoreContext_GetPreviousState) == 0x000001, "Wrong size on FortStoreContext_GetPreviousState");
static_assert(offsetof(FortStoreContext_GetPreviousState, ReturnValue) == 0x000000, "Member 'FortStoreContext_GetPreviousState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.GetStoreState
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_GetStoreState final
{
public:
	EFortStoreState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_GetStoreState) == 0x000001, "Wrong alignment on FortStoreContext_GetStoreState");
static_assert(sizeof(FortStoreContext_GetStoreState) == 0x000001, "Wrong size on FortStoreContext_GetStoreState");
static_assert(offsetof(FortStoreContext_GetStoreState, ReturnValue) == 0x000000, "Member 'FortStoreContext_GetStoreState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.IsOpeningDirectPack
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_IsOpeningDirectPack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_IsOpeningDirectPack) == 0x000001, "Wrong alignment on FortStoreContext_IsOpeningDirectPack");
static_assert(sizeof(FortStoreContext_IsOpeningDirectPack) == 0x000001, "Wrong size on FortStoreContext_IsOpeningDirectPack");
static_assert(offsetof(FortStoreContext_IsOpeningDirectPack, ReturnValue) == 0x000000, "Member 'FortStoreContext_IsOpeningDirectPack::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.IsOpeningOnePack
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_IsOpeningOnePack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_IsOpeningOnePack) == 0x000001, "Wrong alignment on FortStoreContext_IsOpeningOnePack");
static_assert(sizeof(FortStoreContext_IsOpeningOnePack) == 0x000001, "Wrong size on FortStoreContext_IsOpeningOnePack");
static_assert(offsetof(FortStoreContext_IsOpeningOnePack, ReturnValue) == 0x000000, "Member 'FortStoreContext_IsOpeningOnePack::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortStoreContext.IsWaitingForMcp
// 0x0001 (0x0001 - 0x0000)
struct FortStoreContext_IsWaitingForMcp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreContext_IsWaitingForMcp) == 0x000001, "Wrong alignment on FortStoreContext_IsWaitingForMcp");
static_assert(sizeof(FortStoreContext_IsWaitingForMcp) == 0x000001, "Wrong size on FortStoreContext_IsWaitingForMcp");
static_assert(offsetof(FortStoreContext_IsWaitingForMcp, ReturnValue) == 0x000000, "Member 'FortStoreContext_IsWaitingForMcp::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestUpdateEntry.CanAddObjective
// 0x0010 (0x0010 - 0x0000)
struct FortQuestUpdateEntry_CanAddObjective final
{
public:
	class UFortQuestItem*                         QuestItemToCheck;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestUpdateEntry_CanAddObjective) == 0x000008, "Wrong alignment on FortQuestUpdateEntry_CanAddObjective");
static_assert(sizeof(FortQuestUpdateEntry_CanAddObjective) == 0x000010, "Wrong size on FortQuestUpdateEntry_CanAddObjective");
static_assert(offsetof(FortQuestUpdateEntry_CanAddObjective, QuestItemToCheck) == 0x000000, "Member 'FortQuestUpdateEntry_CanAddObjective::QuestItemToCheck' has a wrong offset!");
static_assert(offsetof(FortQuestUpdateEntry_CanAddObjective, ReturnValue) == 0x000008, "Member 'FortQuestUpdateEntry_CanAddObjective::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestUpdateEntry.CurrentlyDisplayedObjectiveFinished
// 0x0008 (0x0008 - 0x0000)
struct FortQuestUpdateEntry_CurrentlyDisplayedObjectiveFinished final
{
public:
	class UFortQuestObjectiveEntry*               QuestObjective;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestUpdateEntry_CurrentlyDisplayedObjectiveFinished) == 0x000008, "Wrong alignment on FortQuestUpdateEntry_CurrentlyDisplayedObjectiveFinished");
static_assert(sizeof(FortQuestUpdateEntry_CurrentlyDisplayedObjectiveFinished) == 0x000008, "Wrong size on FortQuestUpdateEntry_CurrentlyDisplayedObjectiveFinished");
static_assert(offsetof(FortQuestUpdateEntry_CurrentlyDisplayedObjectiveFinished, QuestObjective) == 0x000000, "Member 'FortQuestUpdateEntry_CurrentlyDisplayedObjectiveFinished::QuestObjective' has a wrong offset!");

// Function FortniteUI.FortQuestUpdateEntry.GetNumDisplayedObjectives
// 0x0004 (0x0004 - 0x0000)
struct FortQuestUpdateEntry_GetNumDisplayedObjectives final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestUpdateEntry_GetNumDisplayedObjectives) == 0x000004, "Wrong alignment on FortQuestUpdateEntry_GetNumDisplayedObjectives");
static_assert(sizeof(FortQuestUpdateEntry_GetNumDisplayedObjectives) == 0x000004, "Wrong size on FortQuestUpdateEntry_GetNumDisplayedObjectives");
static_assert(offsetof(FortQuestUpdateEntry_GetNumDisplayedObjectives, ReturnValue) == 0x000000, "Member 'FortQuestUpdateEntry_GetNumDisplayedObjectives::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuestUpdateEntry.QuestItemSet
// 0x0008 (0x0008 - 0x0000)
struct FortQuestUpdateEntry_QuestItemSet final
{
public:
	class UFortQuestItem*                         QuestItemToCheck;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestUpdateEntry_QuestItemSet) == 0x000008, "Wrong alignment on FortQuestUpdateEntry_QuestItemSet");
static_assert(sizeof(FortQuestUpdateEntry_QuestItemSet) == 0x000008, "Wrong size on FortQuestUpdateEntry_QuestItemSet");
static_assert(offsetof(FortQuestUpdateEntry_QuestItemSet, QuestItemToCheck) == 0x000000, "Member 'FortQuestUpdateEntry_QuestItemSet::QuestItemToCheck' has a wrong offset!");

// Function FortniteUI.FortQuestUpdateEntry.SetQuestItem
// 0x0010 (0x0010 - 0x0000)
struct FortQuestUpdateEntry_SetQuestItem final
{
public:
	const class UFortQuestObjectiveInfo*          ObjectiveInfo;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAnnouncement;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestUpdateEntry_SetQuestItem) == 0x000008, "Wrong alignment on FortQuestUpdateEntry_SetQuestItem");
static_assert(sizeof(FortQuestUpdateEntry_SetQuestItem) == 0x000010, "Wrong size on FortQuestUpdateEntry_SetQuestItem");
static_assert(offsetof(FortQuestUpdateEntry_SetQuestItem, ObjectiveInfo) == 0x000000, "Member 'FortQuestUpdateEntry_SetQuestItem::ObjectiveInfo' has a wrong offset!");
static_assert(offsetof(FortQuestUpdateEntry_SetQuestItem, IsAnnouncement) == 0x000008, "Member 'FortQuestUpdateEntry_SetQuestItem::IsAnnouncement' has a wrong offset!");

// Function FortniteUI.FortQuestUpdatesLog.CreateAnnouncementUpdate
// 0x0008 (0x0008 - 0x0000)
struct FortQuestUpdatesLog_CreateAnnouncementUpdate final
{
public:
	const class UFortQuestObjectiveInfo*          QuestItemToCheck;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestUpdatesLog_CreateAnnouncementUpdate) == 0x000008, "Wrong alignment on FortQuestUpdatesLog_CreateAnnouncementUpdate");
static_assert(sizeof(FortQuestUpdatesLog_CreateAnnouncementUpdate) == 0x000008, "Wrong size on FortQuestUpdatesLog_CreateAnnouncementUpdate");
static_assert(offsetof(FortQuestUpdatesLog_CreateAnnouncementUpdate, QuestItemToCheck) == 0x000000, "Member 'FortQuestUpdatesLog_CreateAnnouncementUpdate::QuestItemToCheck' has a wrong offset!");

// Function FortniteUI.FortQuestUpdatesLog.HandleDisplayDynamicQuestUpdate
// 0x0010 (0x0010 - 0x0000)
struct FortQuestUpdatesLog_HandleDisplayDynamicQuestUpdate final
{
public:
	const class UFortQuestObjectiveInfo*          QuestObjective;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayStatusUpdate;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayAnnouncementUpdate;                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestUpdatesLog_HandleDisplayDynamicQuestUpdate) == 0x000008, "Wrong alignment on FortQuestUpdatesLog_HandleDisplayDynamicQuestUpdate");
static_assert(sizeof(FortQuestUpdatesLog_HandleDisplayDynamicQuestUpdate) == 0x000010, "Wrong size on FortQuestUpdatesLog_HandleDisplayDynamicQuestUpdate");
static_assert(offsetof(FortQuestUpdatesLog_HandleDisplayDynamicQuestUpdate, QuestObjective) == 0x000000, "Member 'FortQuestUpdatesLog_HandleDisplayDynamicQuestUpdate::QuestObjective' has a wrong offset!");
static_assert(offsetof(FortQuestUpdatesLog_HandleDisplayDynamicQuestUpdate, DisplayStatusUpdate) == 0x000008, "Member 'FortQuestUpdatesLog_HandleDisplayDynamicQuestUpdate::DisplayStatusUpdate' has a wrong offset!");
static_assert(offsetof(FortQuestUpdatesLog_HandleDisplayDynamicQuestUpdate, DisplayAnnouncementUpdate) == 0x000009, "Member 'FortQuestUpdatesLog_HandleDisplayDynamicQuestUpdate::DisplayAnnouncementUpdate' has a wrong offset!");

// Function FortniteUI.FortQuestUpdatesLog.HandleQuestUpdateFinished
// 0x0008 (0x0008 - 0x0000)
struct FortQuestUpdatesLog_HandleQuestUpdateFinished final
{
public:
	class UFortQuestUpdateEntry*                  QuestEntryFinished;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestUpdatesLog_HandleQuestUpdateFinished) == 0x000008, "Wrong alignment on FortQuestUpdatesLog_HandleQuestUpdateFinished");
static_assert(sizeof(FortQuestUpdatesLog_HandleQuestUpdateFinished) == 0x000008, "Wrong size on FortQuestUpdatesLog_HandleQuestUpdateFinished");
static_assert(offsetof(FortQuestUpdatesLog_HandleQuestUpdateFinished, QuestEntryFinished) == 0x000000, "Member 'FortQuestUpdatesLog_HandleQuestUpdateFinished::QuestEntryFinished' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.GetKeyBindingAction
// 0x0008 (0x0008 - 0x0000)
struct FortQuickBarSlotBase_GetKeyBindingAction final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBarSlotBase_GetKeyBindingAction) == 0x000004, "Wrong alignment on FortQuickBarSlotBase_GetKeyBindingAction");
static_assert(sizeof(FortQuickBarSlotBase_GetKeyBindingAction) == 0x000008, "Wrong size on FortQuickBarSlotBase_GetKeyBindingAction");
static_assert(offsetof(FortQuickBarSlotBase_GetKeyBindingAction, ReturnValue) == 0x000000, "Member 'FortQuickBarSlotBase_GetKeyBindingAction::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.GetKeyBindingActionGamepad
// 0x0008 (0x0008 - 0x0000)
struct FortQuickBarSlotBase_GetKeyBindingActionGamepad final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBarSlotBase_GetKeyBindingActionGamepad) == 0x000004, "Wrong alignment on FortQuickBarSlotBase_GetKeyBindingActionGamepad");
static_assert(sizeof(FortQuickBarSlotBase_GetKeyBindingActionGamepad) == 0x000008, "Wrong size on FortQuickBarSlotBase_GetKeyBindingActionGamepad");
static_assert(offsetof(FortQuickBarSlotBase_GetKeyBindingActionGamepad, ReturnValue) == 0x000000, "Member 'FortQuickBarSlotBase_GetKeyBindingActionGamepad::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.GetKeyBindingActionKeyboard
// 0x0008 (0x0008 - 0x0000)
struct FortQuickBarSlotBase_GetKeyBindingActionKeyboard final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBarSlotBase_GetKeyBindingActionKeyboard) == 0x000004, "Wrong alignment on FortQuickBarSlotBase_GetKeyBindingActionKeyboard");
static_assert(sizeof(FortQuickBarSlotBase_GetKeyBindingActionKeyboard) == 0x000008, "Wrong size on FortQuickBarSlotBase_GetKeyBindingActionKeyboard");
static_assert(offsetof(FortQuickBarSlotBase_GetKeyBindingActionKeyboard, ReturnValue) == 0x000000, "Member 'FortQuickBarSlotBase_GetKeyBindingActionKeyboard::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.MaximizeSlot
// 0x0001 (0x0001 - 0x0000)
struct FortQuickBarSlotBase_MaximizeSlot final
{
public:
	bool                                          bShouldSkipAnimation;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBarSlotBase_MaximizeSlot) == 0x000001, "Wrong alignment on FortQuickBarSlotBase_MaximizeSlot");
static_assert(sizeof(FortQuickBarSlotBase_MaximizeSlot) == 0x000001, "Wrong size on FortQuickBarSlotBase_MaximizeSlot");
static_assert(offsetof(FortQuickBarSlotBase_MaximizeSlot, bShouldSkipAnimation) == 0x000000, "Member 'FortQuickBarSlotBase_MaximizeSlot::bShouldSkipAnimation' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.MinimizeSlot
// 0x0001 (0x0001 - 0x0000)
struct FortQuickBarSlotBase_MinimizeSlot final
{
public:
	bool                                          bShouldSkipAnimation;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBarSlotBase_MinimizeSlot) == 0x000001, "Wrong alignment on FortQuickBarSlotBase_MinimizeSlot");
static_assert(sizeof(FortQuickBarSlotBase_MinimizeSlot) == 0x000001, "Wrong size on FortQuickBarSlotBase_MinimizeSlot");
static_assert(offsetof(FortQuickBarSlotBase_MinimizeSlot, bShouldSkipAnimation) == 0x000000, "Member 'FortQuickBarSlotBase_MinimizeSlot::bShouldSkipAnimation' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.RefreshItemIfSlotChanged
// 0x0018 (0x0018 - 0x0000)
struct FortQuickBarSlotBase_RefreshItemIfSlotChanged final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InSlot;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBarSlotBase_RefreshItemIfSlotChanged) == 0x000008, "Wrong alignment on FortQuickBarSlotBase_RefreshItemIfSlotChanged");
static_assert(sizeof(FortQuickBarSlotBase_RefreshItemIfSlotChanged) == 0x000018, "Wrong size on FortQuickBarSlotBase_RefreshItemIfSlotChanged");
static_assert(offsetof(FortQuickBarSlotBase_RefreshItemIfSlotChanged, InQuickBar) == 0x000000, "Member 'FortQuickBarSlotBase_RefreshItemIfSlotChanged::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortQuickBarSlotBase_RefreshItemIfSlotChanged, InSlot) == 0x000008, "Member 'FortQuickBarSlotBase_RefreshItemIfSlotChanged::InSlot' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.Resize
// 0x0001 (0x0001 - 0x0000)
struct FortQuickBarSlotBase_Resize final
{
public:
	EFortItemCardSize                             CardSize;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBarSlotBase_Resize) == 0x000001, "Wrong alignment on FortQuickBarSlotBase_Resize");
static_assert(sizeof(FortQuickBarSlotBase_Resize) == 0x000001, "Wrong size on FortQuickBarSlotBase_Resize");
static_assert(offsetof(FortQuickBarSlotBase_Resize, CardSize) == 0x000000, "Member 'FortQuickBarSlotBase_Resize::CardSize' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.SetBottomComboSwitcherVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortQuickBarSlotBase_SetBottomComboSwitcherVisibility final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBarSlotBase_SetBottomComboSwitcherVisibility) == 0x000001, "Wrong alignment on FortQuickBarSlotBase_SetBottomComboSwitcherVisibility");
static_assert(sizeof(FortQuickBarSlotBase_SetBottomComboSwitcherVisibility) == 0x000001, "Wrong size on FortQuickBarSlotBase_SetBottomComboSwitcherVisibility");
static_assert(offsetof(FortQuickBarSlotBase_SetBottomComboSwitcherVisibility, InVisibility) == 0x000000, "Member 'FortQuickBarSlotBase_SetBottomComboSwitcherVisibility::InVisibility' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.SetQuickbarIndexRuntime
// 0x0008 (0x0008 - 0x0000)
struct FortQuickBarSlotBase_SetQuickbarIndexRuntime final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefresh;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuickBarSlotBase_SetQuickbarIndexRuntime) == 0x000004, "Wrong alignment on FortQuickBarSlotBase_SetQuickbarIndexRuntime");
static_assert(sizeof(FortQuickBarSlotBase_SetQuickbarIndexRuntime) == 0x000008, "Wrong size on FortQuickBarSlotBase_SetQuickbarIndexRuntime");
static_assert(offsetof(FortQuickBarSlotBase_SetQuickbarIndexRuntime, Param_Index) == 0x000000, "Member 'FortQuickBarSlotBase_SetQuickbarIndexRuntime::Param_Index' has a wrong offset!");
static_assert(offsetof(FortQuickBarSlotBase_SetQuickbarIndexRuntime, bRefresh) == 0x000004, "Member 'FortQuickBarSlotBase_SetQuickbarIndexRuntime::bRefresh' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.SetQuickbarTypeRuntime
// 0x0002 (0x0002 - 0x0000)
struct FortQuickBarSlotBase_SetQuickbarTypeRuntime final
{
public:
	EFortQuickBars                                NewQuickBarType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefresh;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBarSlotBase_SetQuickbarTypeRuntime) == 0x000001, "Wrong alignment on FortQuickBarSlotBase_SetQuickbarTypeRuntime");
static_assert(sizeof(FortQuickBarSlotBase_SetQuickbarTypeRuntime) == 0x000002, "Wrong size on FortQuickBarSlotBase_SetQuickbarTypeRuntime");
static_assert(offsetof(FortQuickBarSlotBase_SetQuickbarTypeRuntime, NewQuickBarType) == 0x000000, "Member 'FortQuickBarSlotBase_SetQuickbarTypeRuntime::NewQuickBarType' has a wrong offset!");
static_assert(offsetof(FortQuickBarSlotBase_SetQuickbarTypeRuntime, bRefresh) == 0x000001, "Member 'FortQuickBarSlotBase_SetQuickbarTypeRuntime::bRefresh' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.SetSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct FortQuickBarSlotBase_SetSlotSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBarSlotBase_SetSlotSelected) == 0x000001, "Wrong alignment on FortQuickBarSlotBase_SetSlotSelected");
static_assert(sizeof(FortQuickBarSlotBase_SetSlotSelected) == 0x000001, "Wrong size on FortQuickBarSlotBase_SetSlotSelected");
static_assert(offsetof(FortQuickBarSlotBase_SetSlotSelected, bSelected) == 0x000000, "Member 'FortQuickBarSlotBase_SetSlotSelected::bSelected' has a wrong offset!");

// Function FortniteUI.FortQuickBarSlotBase.SetTopComboSwitcherVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortQuickBarSlotBase_SetTopComboSwitcherVisibility final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBarSlotBase_SetTopComboSwitcherVisibility) == 0x000001, "Wrong alignment on FortQuickBarSlotBase_SetTopComboSwitcherVisibility");
static_assert(sizeof(FortQuickBarSlotBase_SetTopComboSwitcherVisibility) == 0x000001, "Wrong size on FortQuickBarSlotBase_SetTopComboSwitcherVisibility");
static_assert(offsetof(FortQuickBarSlotBase_SetTopComboSwitcherVisibility, InVisibility) == 0x000000, "Member 'FortQuickBarSlotBase_SetTopComboSwitcherVisibility::InVisibility' has a wrong offset!");

// Function FortniteUI.FortRedeemCodeBase.OnRedeemFriendCodeComplete
// 0x0002 (0x0002 - 0x0000)
struct FortRedeemCodeBase_OnRedeemFriendCodeComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERedeemCodeFailureReason                      FailureReason;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRedeemCodeBase_OnRedeemFriendCodeComplete) == 0x000001, "Wrong alignment on FortRedeemCodeBase_OnRedeemFriendCodeComplete");
static_assert(sizeof(FortRedeemCodeBase_OnRedeemFriendCodeComplete) == 0x000002, "Wrong size on FortRedeemCodeBase_OnRedeemFriendCodeComplete");
static_assert(offsetof(FortRedeemCodeBase_OnRedeemFriendCodeComplete, bSuccess) == 0x000000, "Member 'FortRedeemCodeBase_OnRedeemFriendCodeComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(FortRedeemCodeBase_OnRedeemFriendCodeComplete, FailureReason) == 0x000001, "Member 'FortRedeemCodeBase_OnRedeemFriendCodeComplete::FailureReason' has a wrong offset!");

// Function FortniteUI.FortRedeemCodeBase.RedeemFriendCode
// 0x0010 (0x0010 - 0x0000)
struct FortRedeemCodeBase_RedeemFriendCode final
{
public:
	class FString                                 FriendCode;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRedeemCodeBase_RedeemFriendCode) == 0x000008, "Wrong alignment on FortRedeemCodeBase_RedeemFriendCode");
static_assert(sizeof(FortRedeemCodeBase_RedeemFriendCode) == 0x000010, "Wrong size on FortRedeemCodeBase_RedeemFriendCode");
static_assert(offsetof(FortRedeemCodeBase_RedeemFriendCode, FriendCode) == 0x000000, "Member 'FortRedeemCodeBase_RedeemFriendCode::FriendCode' has a wrong offset!");

// Function FortniteUI.FortRedirectToEpicAccountWidget.SetLoginType
// 0x0001 (0x0001 - 0x0000)
struct FortRedirectToEpicAccountWidget_SetLoginType final
{
public:
	EFortLoginAccountType                         LoginType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRedirectToEpicAccountWidget_SetLoginType) == 0x000001, "Wrong alignment on FortRedirectToEpicAccountWidget_SetLoginType");
static_assert(sizeof(FortRedirectToEpicAccountWidget_SetLoginType) == 0x000001, "Wrong size on FortRedirectToEpicAccountWidget_SetLoginType");
static_assert(offsetof(FortRedirectToEpicAccountWidget_SetLoginType, LoginType) == 0x000000, "Member 'FortRedirectToEpicAccountWidget_SetLoginType::LoginType' has a wrong offset!");

// Function FortniteUI.FortRefundConfirmation.SetRefundsRemainingText
// 0x0008 (0x0008 - 0x0000)
struct FortRefundConfirmation_SetRefundsRemainingText final
{
public:
	int32                                         RefundsRemaining;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRefunds;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRefundConfirmation_SetRefundsRemainingText) == 0x000004, "Wrong alignment on FortRefundConfirmation_SetRefundsRemainingText");
static_assert(sizeof(FortRefundConfirmation_SetRefundsRemainingText) == 0x000008, "Wrong size on FortRefundConfirmation_SetRefundsRemainingText");
static_assert(offsetof(FortRefundConfirmation_SetRefundsRemainingText, RefundsRemaining) == 0x000000, "Member 'FortRefundConfirmation_SetRefundsRemainingText::RefundsRemaining' has a wrong offset!");
static_assert(offsetof(FortRefundConfirmation_SetRefundsRemainingText, TotalRefunds) == 0x000004, "Member 'FortRefundConfirmation_SetRefundsRemainingText::TotalRefunds' has a wrong offset!");

// Function FortniteUI.FortShowdownPin.GetScoreToDisplay
// 0x0008 (0x0008 - 0x0000)
struct FortShowdownPin_GetScoreToDisplay final
{
public:
	bool                                          bUseBestPin;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownPin_GetScoreToDisplay) == 0x000004, "Wrong alignment on FortShowdownPin_GetScoreToDisplay");
static_assert(sizeof(FortShowdownPin_GetScoreToDisplay) == 0x000008, "Wrong size on FortShowdownPin_GetScoreToDisplay");
static_assert(offsetof(FortShowdownPin_GetScoreToDisplay, bUseBestPin) == 0x000000, "Member 'FortShowdownPin_GetScoreToDisplay::bUseBestPin' has a wrong offset!");
static_assert(offsetof(FortShowdownPin_GetScoreToDisplay, ReturnValue) == 0x000004, "Member 'FortShowdownPin_GetScoreToDisplay::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortRejoinWindowBase.StartTimeout
// 0x0004 (0x0004 - 0x0000)
struct FortRejoinWindowBase_StartTimeout final
{
public:
	float                                         TimeoutTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRejoinWindowBase_StartTimeout) == 0x000004, "Wrong alignment on FortRejoinWindowBase_StartTimeout");
static_assert(sizeof(FortRejoinWindowBase_StartTimeout) == 0x000004, "Wrong size on FortRejoinWindowBase_StartTimeout");
static_assert(offsetof(FortRejoinWindowBase_StartTimeout, TimeoutTime) == 0x000000, "Member 'FortRejoinWindowBase_StartTimeout::TimeoutTime' has a wrong offset!");

// Function FortniteUI.FortRelativeAnchorCanvasSlot.SetAnchorWidget
// 0x0008 (0x0008 - 0x0000)
struct FortRelativeAnchorCanvasSlot_SetAnchorWidget final
{
public:
	const class UWidget*                          NewAnchorWidget;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRelativeAnchorCanvasSlot_SetAnchorWidget) == 0x000008, "Wrong alignment on FortRelativeAnchorCanvasSlot_SetAnchorWidget");
static_assert(sizeof(FortRelativeAnchorCanvasSlot_SetAnchorWidget) == 0x000008, "Wrong size on FortRelativeAnchorCanvasSlot_SetAnchorWidget");
static_assert(offsetof(FortRelativeAnchorCanvasSlot_SetAnchorWidget, NewAnchorWidget) == 0x000000, "Member 'FortRelativeAnchorCanvasSlot_SetAnchorWidget::NewAnchorWidget' has a wrong offset!");

// Function FortniteUI.FortRelativeAnchorCanvas.AddSlot
// 0x0018 (0x0018 - 0x0000)
struct FortRelativeAnchorCanvas_AddSlot final
{
public:
	const class UWidget*                          ContentWidget;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UWidget*                          AnchorWidget;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortRelativeAnchorCanvasSlot*          ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRelativeAnchorCanvas_AddSlot) == 0x000008, "Wrong alignment on FortRelativeAnchorCanvas_AddSlot");
static_assert(sizeof(FortRelativeAnchorCanvas_AddSlot) == 0x000018, "Wrong size on FortRelativeAnchorCanvas_AddSlot");
static_assert(offsetof(FortRelativeAnchorCanvas_AddSlot, ContentWidget) == 0x000000, "Member 'FortRelativeAnchorCanvas_AddSlot::ContentWidget' has a wrong offset!");
static_assert(offsetof(FortRelativeAnchorCanvas_AddSlot, AnchorWidget) == 0x000008, "Member 'FortRelativeAnchorCanvas_AddSlot::AnchorWidget' has a wrong offset!");
static_assert(offsetof(FortRelativeAnchorCanvas_AddSlot, ReturnValue) == 0x000010, "Member 'FortRelativeAnchorCanvas_AddSlot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortRelativeAnchorCanvas.SetZLayerOffset
// 0x0004 (0x0004 - 0x0000)
struct FortRelativeAnchorCanvas_SetZLayerOffset final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRelativeAnchorCanvas_SetZLayerOffset) == 0x000004, "Wrong alignment on FortRelativeAnchorCanvas_SetZLayerOffset");
static_assert(sizeof(FortRelativeAnchorCanvas_SetZLayerOffset) == 0x000004, "Wrong size on FortRelativeAnchorCanvas_SetZLayerOffset");
static_assert(offsetof(FortRelativeAnchorCanvas_SetZLayerOffset, Value) == 0x000000, "Member 'FortRelativeAnchorCanvas_SetZLayerOffset::Value' has a wrong offset!");

// Function FortniteUI.FortReplayBase.OnPlaybackTimeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortReplayBase_OnPlaybackTimeChanged final
{
public:
	float                                         NowTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortReplayBase_OnPlaybackTimeChanged) == 0x000004, "Wrong alignment on FortReplayBase_OnPlaybackTimeChanged");
static_assert(sizeof(FortReplayBase_OnPlaybackTimeChanged) == 0x000004, "Wrong size on FortReplayBase_OnPlaybackTimeChanged");
static_assert(offsetof(FortReplayBase_OnPlaybackTimeChanged, NowTime) == 0x000000, "Member 'FortReplayBase_OnPlaybackTimeChanged::NowTime' has a wrong offset!");

// Function FortniteUI.FortReplayBase.OnReplayPausedChanged
// 0x0001 (0x0001 - 0x0000)
struct FortReplayBase_OnReplayPausedChanged final
{
public:
	bool                                          bIsPaused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortReplayBase_OnReplayPausedChanged) == 0x000001, "Wrong alignment on FortReplayBase_OnReplayPausedChanged");
static_assert(sizeof(FortReplayBase_OnReplayPausedChanged) == 0x000001, "Wrong size on FortReplayBase_OnReplayPausedChanged");
static_assert(offsetof(FortReplayBase_OnReplayPausedChanged, bIsPaused) == 0x000000, "Member 'FortReplayBase_OnReplayPausedChanged::bIsPaused' has a wrong offset!");

// Function FortniteUI.FortReplayBase.OnTimelineRangeChanged
// 0x0008 (0x0008 - 0x0000)
struct FortReplayBase_OnTimelineRangeChanged final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortReplayBase_OnTimelineRangeChanged) == 0x000004, "Wrong alignment on FortReplayBase_OnTimelineRangeChanged");
static_assert(sizeof(FortReplayBase_OnTimelineRangeChanged) == 0x000008, "Wrong size on FortReplayBase_OnTimelineRangeChanged");
static_assert(offsetof(FortReplayBase_OnTimelineRangeChanged, StartTime) == 0x000000, "Member 'FortReplayBase_OnTimelineRangeChanged::StartTime' has a wrong offset!");
static_assert(offsetof(FortReplayBase_OnTimelineRangeChanged, EndTime) == 0x000004, "Member 'FortReplayBase_OnTimelineRangeChanged::EndTime' has a wrong offset!");

// Function FortniteUI.FortReplayBase.SetReplayContext
// 0x0008 (0x0008 - 0x0000)
struct FortReplayBase_SetReplayContext final
{
public:
	class UFortReplayContext*                     InReplayContext;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortReplayBase_SetReplayContext) == 0x000008, "Wrong alignment on FortReplayBase_SetReplayContext");
static_assert(sizeof(FortReplayBase_SetReplayContext) == 0x000008, "Wrong size on FortReplayBase_SetReplayContext");
static_assert(offsetof(FortReplayBase_SetReplayContext, InReplayContext) == 0x000000, "Member 'FortReplayBase_SetReplayContext::InReplayContext' has a wrong offset!");

// Function FortniteUI.FortReplayHighlightsWindow.HandleHighlightItemPlayEvent
// 0x0008 (0x0008 - 0x0000)
struct FortReplayHighlightsWindow_HandleHighlightItemPlayEvent final
{
public:
	class UFortReplayHighlightItemBase*           Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortReplayHighlightsWindow_HandleHighlightItemPlayEvent) == 0x000008, "Wrong alignment on FortReplayHighlightsWindow_HandleHighlightItemPlayEvent");
static_assert(sizeof(FortReplayHighlightsWindow_HandleHighlightItemPlayEvent) == 0x000008, "Wrong size on FortReplayHighlightsWindow_HandleHighlightItemPlayEvent");
static_assert(offsetof(FortReplayHighlightsWindow_HandleHighlightItemPlayEvent, Sender) == 0x000000, "Member 'FortReplayHighlightsWindow_HandleHighlightItemPlayEvent::Sender' has a wrong offset!");

// Function FortniteUI.FortReplayHighlightsWindow.HandleReplayHighlightsAvailable
// 0x0010 (0x0010 - 0x0000)
struct FortReplayHighlightsWindow_HandleReplayHighlightsAvailable final
{
public:
	class AFortReplaySpectator*                   Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAvailable;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortReplayHighlightsWindow_HandleReplayHighlightsAvailable) == 0x000008, "Wrong alignment on FortReplayHighlightsWindow_HandleReplayHighlightsAvailable");
static_assert(sizeof(FortReplayHighlightsWindow_HandleReplayHighlightsAvailable) == 0x000010, "Wrong size on FortReplayHighlightsWindow_HandleReplayHighlightsAvailable");
static_assert(offsetof(FortReplayHighlightsWindow_HandleReplayHighlightsAvailable, Sender) == 0x000000, "Member 'FortReplayHighlightsWindow_HandleReplayHighlightsAvailable::Sender' has a wrong offset!");
static_assert(offsetof(FortReplayHighlightsWindow_HandleReplayHighlightsAvailable, bIsAvailable) == 0x000008, "Member 'FortReplayHighlightsWindow_HandleReplayHighlightsAvailable::bIsAvailable' has a wrong offset!");

// Function FortniteUI.FortReplayViewSettingsTabBase.OnCameraTypeChanged
// 0x0010 (0x0010 - 0x0000)
struct FortReplayViewSettingsTabBase_OnCameraTypeChanged final
{
public:
	class AFortPlayerControllerSpectating*        FortPlayerControllerSpectating;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpectatorCameraType                          CameraType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortReplayViewSettingsTabBase_OnCameraTypeChanged) == 0x000008, "Wrong alignment on FortReplayViewSettingsTabBase_OnCameraTypeChanged");
static_assert(sizeof(FortReplayViewSettingsTabBase_OnCameraTypeChanged) == 0x000010, "Wrong size on FortReplayViewSettingsTabBase_OnCameraTypeChanged");
static_assert(offsetof(FortReplayViewSettingsTabBase_OnCameraTypeChanged, FortPlayerControllerSpectating) == 0x000000, "Member 'FortReplayViewSettingsTabBase_OnCameraTypeChanged::FortPlayerControllerSpectating' has a wrong offset!");
static_assert(offsetof(FortReplayViewSettingsTabBase_OnCameraTypeChanged, CameraType) == 0x000008, "Member 'FortReplayViewSettingsTabBase_OnCameraTypeChanged::CameraType' has a wrong offset!");

// Function FortniteUI.FortSocialDisplayLibrary.SetPlatformPrefixIcon
// 0x0018 (0x0018 - 0x0000)
struct FortSocialDisplayLibrary_SetPlatformPrefixIcon final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OtherPlayerPlatform;                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialDisplayLibrary_SetPlatformPrefixIcon) == 0x000008, "Wrong alignment on FortSocialDisplayLibrary_SetPlatformPrefixIcon");
static_assert(sizeof(FortSocialDisplayLibrary_SetPlatformPrefixIcon) == 0x000018, "Wrong size on FortSocialDisplayLibrary_SetPlatformPrefixIcon");
static_assert(offsetof(FortSocialDisplayLibrary_SetPlatformPrefixIcon, Image) == 0x000000, "Member 'FortSocialDisplayLibrary_SetPlatformPrefixIcon::Image' has a wrong offset!");
static_assert(offsetof(FortSocialDisplayLibrary_SetPlatformPrefixIcon, OtherPlayerPlatform) == 0x000008, "Member 'FortSocialDisplayLibrary_SetPlatformPrefixIcon::OtherPlayerPlatform' has a wrong offset!");

// Function FortniteUI.FortResearchMenuBase.GetClaimableResearchPointEstimate
// 0x0004 (0x0004 - 0x0000)
struct FortResearchMenuBase_GetClaimableResearchPointEstimate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchMenuBase_GetClaimableResearchPointEstimate) == 0x000004, "Wrong alignment on FortResearchMenuBase_GetClaimableResearchPointEstimate");
static_assert(sizeof(FortResearchMenuBase_GetClaimableResearchPointEstimate) == 0x000004, "Wrong size on FortResearchMenuBase_GetClaimableResearchPointEstimate");
static_assert(offsetof(FortResearchMenuBase_GetClaimableResearchPointEstimate, ReturnValue) == 0x000000, "Member 'FortResearchMenuBase_GetClaimableResearchPointEstimate::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchMenuBase.RequestPurchaseResearchLevel
// 0x0010 (0x0010 - 0x0000)
struct FortResearchMenuBase_RequestPurchaseResearchLevel final
{
public:
	class FString                                 StatId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchMenuBase_RequestPurchaseResearchLevel) == 0x000008, "Wrong alignment on FortResearchMenuBase_RequestPurchaseResearchLevel");
static_assert(sizeof(FortResearchMenuBase_RequestPurchaseResearchLevel) == 0x000010, "Wrong size on FortResearchMenuBase_RequestPurchaseResearchLevel");
static_assert(offsetof(FortResearchMenuBase_RequestPurchaseResearchLevel, StatId) == 0x000000, "Member 'FortResearchMenuBase_RequestPurchaseResearchLevel::StatId' has a wrong offset!");

// Function FortniteUI.FortResearchMenuBase.AreResearchRespecTokensAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortResearchMenuBase_AreResearchRespecTokensAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchMenuBase_AreResearchRespecTokensAvailable) == 0x000001, "Wrong alignment on FortResearchMenuBase_AreResearchRespecTokensAvailable");
static_assert(sizeof(FortResearchMenuBase_AreResearchRespecTokensAvailable) == 0x000001, "Wrong size on FortResearchMenuBase_AreResearchRespecTokensAvailable");
static_assert(offsetof(FortResearchMenuBase_AreResearchRespecTokensAvailable, ReturnValue) == 0x000000, "Member 'FortResearchMenuBase_AreResearchRespecTokensAvailable::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchMenuBase.GetResearchRespecTokenCount
// 0x0004 (0x0004 - 0x0000)
struct FortResearchMenuBase_GetResearchRespecTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchMenuBase_GetResearchRespecTokenCount) == 0x000004, "Wrong alignment on FortResearchMenuBase_GetResearchRespecTokenCount");
static_assert(sizeof(FortResearchMenuBase_GetResearchRespecTokenCount) == 0x000004, "Wrong size on FortResearchMenuBase_GetResearchRespecTokenCount");
static_assert(offsetof(FortResearchMenuBase_GetResearchRespecTokenCount, ReturnValue) == 0x000000, "Member 'FortResearchMenuBase_GetResearchRespecTokenCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchStatTileWidget.GetCostToIncreaseStat
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetCostToIncreaseStat final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetCostToIncreaseStat) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetCostToIncreaseStat");
static_assert(sizeof(FortResearchStatTileWidget_GetCostToIncreaseStat) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetCostToIncreaseStat");
static_assert(offsetof(FortResearchStatTileWidget_GetCostToIncreaseStat, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetCostToIncreaseStat::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchStatTileWidget.GetCurrentCombinedStatValue
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetCurrentCombinedStatValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetCurrentCombinedStatValue) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetCurrentCombinedStatValue");
static_assert(sizeof(FortResearchStatTileWidget_GetCurrentCombinedStatValue) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetCurrentCombinedStatValue");
static_assert(offsetof(FortResearchStatTileWidget_GetCurrentCombinedStatValue, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetCurrentCombinedStatValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchStatTileWidget.GetCurrentPersonalStatValue
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetCurrentPersonalStatValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetCurrentPersonalStatValue) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetCurrentPersonalStatValue");
static_assert(sizeof(FortResearchStatTileWidget_GetCurrentPersonalStatValue) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetCurrentPersonalStatValue");
static_assert(offsetof(FortResearchStatTileWidget_GetCurrentPersonalStatValue, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetCurrentPersonalStatValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchStatTileWidget.GetCurrentResearchLevel
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetCurrentResearchLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetCurrentResearchLevel) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetCurrentResearchLevel");
static_assert(sizeof(FortResearchStatTileWidget_GetCurrentResearchLevel) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetCurrentResearchLevel");
static_assert(offsetof(FortResearchStatTileWidget_GetCurrentResearchLevel, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetCurrentResearchLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchStatTileWidget.GetCurrentTeamStatValue
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetCurrentTeamStatValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetCurrentTeamStatValue) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetCurrentTeamStatValue");
static_assert(sizeof(FortResearchStatTileWidget_GetCurrentTeamStatValue) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetCurrentTeamStatValue");
static_assert(offsetof(FortResearchStatTileWidget_GetCurrentTeamStatValue, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetCurrentTeamStatValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchStatTileWidget.GetNextCombinedStatValueDelta
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetNextCombinedStatValueDelta final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetNextCombinedStatValueDelta) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetNextCombinedStatValueDelta");
static_assert(sizeof(FortResearchStatTileWidget_GetNextCombinedStatValueDelta) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetNextCombinedStatValueDelta");
static_assert(offsetof(FortResearchStatTileWidget_GetNextCombinedStatValueDelta, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetNextCombinedStatValueDelta::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchStatTileWidget.GetNextPersonalStatValueDelta
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetNextPersonalStatValueDelta final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetNextPersonalStatValueDelta) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetNextPersonalStatValueDelta");
static_assert(sizeof(FortResearchStatTileWidget_GetNextPersonalStatValueDelta) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetNextPersonalStatValueDelta");
static_assert(offsetof(FortResearchStatTileWidget_GetNextPersonalStatValueDelta, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetNextPersonalStatValueDelta::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchStatTileWidget.GetNextTeamStatValueDelta
// 0x0004 (0x0004 - 0x0000)
struct FortResearchStatTileWidget_GetNextTeamStatValueDelta final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetNextTeamStatValueDelta) == 0x000004, "Wrong alignment on FortResearchStatTileWidget_GetNextTeamStatValueDelta");
static_assert(sizeof(FortResearchStatTileWidget_GetNextTeamStatValueDelta) == 0x000004, "Wrong size on FortResearchStatTileWidget_GetNextTeamStatValueDelta");
static_assert(offsetof(FortResearchStatTileWidget_GetNextTeamStatValueDelta, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetNextTeamStatValueDelta::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchStatTileWidget.GetPersonalStatType
// 0x0001 (0x0001 - 0x0000)
struct FortResearchStatTileWidget_GetPersonalStatType final
{
public:
	EFortStatType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetPersonalStatType) == 0x000001, "Wrong alignment on FortResearchStatTileWidget_GetPersonalStatType");
static_assert(sizeof(FortResearchStatTileWidget_GetPersonalStatType) == 0x000001, "Wrong size on FortResearchStatTileWidget_GetPersonalStatType");
static_assert(offsetof(FortResearchStatTileWidget_GetPersonalStatType, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetPersonalStatType::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchStatTileWidget.GetStatIdName
// 0x0010 (0x0010 - 0x0000)
struct FortResearchStatTileWidget_GetStatIdName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_GetStatIdName) == 0x000008, "Wrong alignment on FortResearchStatTileWidget_GetStatIdName");
static_assert(sizeof(FortResearchStatTileWidget_GetStatIdName) == 0x000010, "Wrong size on FortResearchStatTileWidget_GetStatIdName");
static_assert(offsetof(FortResearchStatTileWidget_GetStatIdName, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_GetStatIdName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResearchStatTileWidget.IsAtMaxResearchLevel
// 0x0001 (0x0001 - 0x0000)
struct FortResearchStatTileWidget_IsAtMaxResearchLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResearchStatTileWidget_IsAtMaxResearchLevel) == 0x000001, "Wrong alignment on FortResearchStatTileWidget_IsAtMaxResearchLevel");
static_assert(sizeof(FortResearchStatTileWidget_IsAtMaxResearchLevel) == 0x000001, "Wrong size on FortResearchStatTileWidget_IsAtMaxResearchLevel");
static_assert(offsetof(FortResearchStatTileWidget_IsAtMaxResearchLevel, ReturnValue) == 0x000000, "Member 'FortResearchStatTileWidget_IsAtMaxResearchLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResultsSummaryScreenWidget.GetTotalScoreSortedScoreIndices
// 0x0018 (0x0018 - 0x0000)
struct FortResultsSummaryScreenWidget_GetTotalScoreSortedScoreIndices final
{
public:
	const class UFortUIScoreReport*               ScoreReport;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutSortedScoreIndices;                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsSummaryScreenWidget_GetTotalScoreSortedScoreIndices) == 0x000008, "Wrong alignment on FortResultsSummaryScreenWidget_GetTotalScoreSortedScoreIndices");
static_assert(sizeof(FortResultsSummaryScreenWidget_GetTotalScoreSortedScoreIndices) == 0x000018, "Wrong size on FortResultsSummaryScreenWidget_GetTotalScoreSortedScoreIndices");
static_assert(offsetof(FortResultsSummaryScreenWidget_GetTotalScoreSortedScoreIndices, ScoreReport) == 0x000000, "Member 'FortResultsSummaryScreenWidget_GetTotalScoreSortedScoreIndices::ScoreReport' has a wrong offset!");
static_assert(offsetof(FortResultsSummaryScreenWidget_GetTotalScoreSortedScoreIndices, OutSortedScoreIndices) == 0x000008, "Member 'FortResultsSummaryScreenWidget_GetTotalScoreSortedScoreIndices::OutSortedScoreIndices' has a wrong offset!");

// Function FortniteUI.FortResultsTeleportScreenWidget.OnExitTimePercentagePassedUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortResultsTeleportScreenWidget_OnExitTimePercentagePassedUpdated final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsTeleportScreenWidget_OnExitTimePercentagePassedUpdated) == 0x000004, "Wrong alignment on FortResultsTeleportScreenWidget_OnExitTimePercentagePassedUpdated");
static_assert(sizeof(FortResultsTeleportScreenWidget_OnExitTimePercentagePassedUpdated) == 0x000004, "Wrong size on FortResultsTeleportScreenWidget_OnExitTimePercentagePassedUpdated");
static_assert(offsetof(FortResultsTeleportScreenWidget_OnExitTimePercentagePassedUpdated, Percent) == 0x000000, "Member 'FortResultsTeleportScreenWidget_OnExitTimePercentagePassedUpdated::Percent' has a wrong offset!");

// Function FortniteUI.FortResultsTeleportScreenWidget.OnExitTimeRemainingUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortResultsTeleportScreenWidget_OnExitTimeRemainingUpdated final
{
public:
	int32                                         TimeRemainingSeconds;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsTeleportScreenWidget_OnExitTimeRemainingUpdated) == 0x000004, "Wrong alignment on FortResultsTeleportScreenWidget_OnExitTimeRemainingUpdated");
static_assert(sizeof(FortResultsTeleportScreenWidget_OnExitTimeRemainingUpdated) == 0x000004, "Wrong size on FortResultsTeleportScreenWidget_OnExitTimeRemainingUpdated");
static_assert(offsetof(FortResultsTeleportScreenWidget_OnExitTimeRemainingUpdated, TimeRemainingSeconds) == 0x000000, "Member 'FortResultsTeleportScreenWidget_OnExitTimeRemainingUpdated::TimeRemainingSeconds' has a wrong offset!");

// Function FortniteUI.FortResultsWidget.GetRewardsByType
// 0x0018 (0x0018 - 0x0000)
struct FortResultsWidget_GetRewardsByType final
{
public:
	EFortRewardItemType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItem*>                      OutRewards;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidget_GetRewardsByType) == 0x000008, "Wrong alignment on FortResultsWidget_GetRewardsByType");
static_assert(sizeof(FortResultsWidget_GetRewardsByType) == 0x000018, "Wrong size on FortResultsWidget_GetRewardsByType");
static_assert(offsetof(FortResultsWidget_GetRewardsByType, Type) == 0x000000, "Member 'FortResultsWidget_GetRewardsByType::Type' has a wrong offset!");
static_assert(offsetof(FortResultsWidget_GetRewardsByType, OutRewards) == 0x000008, "Member 'FortResultsWidget_GetRewardsByType::OutRewards' has a wrong offset!");

// Function FortniteUI.FortResultsWidget.GetTotalMissionPointsEarned
// 0x0004 (0x0004 - 0x0000)
struct FortResultsWidget_GetTotalMissionPointsEarned final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidget_GetTotalMissionPointsEarned) == 0x000004, "Wrong alignment on FortResultsWidget_GetTotalMissionPointsEarned");
static_assert(sizeof(FortResultsWidget_GetTotalMissionPointsEarned) == 0x000004, "Wrong size on FortResultsWidget_GetTotalMissionPointsEarned");
static_assert(offsetof(FortResultsWidget_GetTotalMissionPointsEarned, ReturnValue) == 0x000000, "Member 'FortResultsWidget_GetTotalMissionPointsEarned::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResultsWidget.SendEndOfRoundFriendInviteAnalytic
// 0x0038 (0x0038 - 0x0000)
struct FortResultsWidget_SendEndOfRoundFriendInviteAnalytic final
{
public:
	struct FUniqueNetIdRepl                       TargetId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetPlayerName;                                  // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidget_SendEndOfRoundFriendInviteAnalytic) == 0x000008, "Wrong alignment on FortResultsWidget_SendEndOfRoundFriendInviteAnalytic");
static_assert(sizeof(FortResultsWidget_SendEndOfRoundFriendInviteAnalytic) == 0x000038, "Wrong size on FortResultsWidget_SendEndOfRoundFriendInviteAnalytic");
static_assert(offsetof(FortResultsWidget_SendEndOfRoundFriendInviteAnalytic, TargetId) == 0x000000, "Member 'FortResultsWidget_SendEndOfRoundFriendInviteAnalytic::TargetId' has a wrong offset!");
static_assert(offsetof(FortResultsWidget_SendEndOfRoundFriendInviteAnalytic, TargetPlayerName) == 0x000028, "Member 'FortResultsWidget_SendEndOfRoundFriendInviteAnalytic::TargetPlayerName' has a wrong offset!");

// Function FortniteUI.FortResultsWidget.SendEndOfRoundScreenAnalytic
// 0x0018 (0x0018 - 0x0000)
struct FortResultsWidget_SendEndOfRoundScreenAnalytic final
{
public:
	class FString                                 ScreenName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Skipped;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeSpent;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidget_SendEndOfRoundScreenAnalytic) == 0x000008, "Wrong alignment on FortResultsWidget_SendEndOfRoundScreenAnalytic");
static_assert(sizeof(FortResultsWidget_SendEndOfRoundScreenAnalytic) == 0x000018, "Wrong size on FortResultsWidget_SendEndOfRoundScreenAnalytic");
static_assert(offsetof(FortResultsWidget_SendEndOfRoundScreenAnalytic, ScreenName) == 0x000000, "Member 'FortResultsWidget_SendEndOfRoundScreenAnalytic::ScreenName' has a wrong offset!");
static_assert(offsetof(FortResultsWidget_SendEndOfRoundScreenAnalytic, Skipped) == 0x000010, "Member 'FortResultsWidget_SendEndOfRoundScreenAnalytic::Skipped' has a wrong offset!");
static_assert(offsetof(FortResultsWidget_SendEndOfRoundScreenAnalytic, TimeSpent) == 0x000014, "Member 'FortResultsWidget_SendEndOfRoundScreenAnalytic::TimeSpent' has a wrong offset!");

// Function FortniteUI.FortResultsWidget.SendEndOfRoundUpVoteAnalytic
// 0x0038 (0x0038 - 0x0000)
struct FortResultsWidget_SendEndOfRoundUpVoteAnalytic final
{
public:
	struct FUniqueNetIdRepl                       TargetId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetPlayerName;                                  // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidget_SendEndOfRoundUpVoteAnalytic) == 0x000008, "Wrong alignment on FortResultsWidget_SendEndOfRoundUpVoteAnalytic");
static_assert(sizeof(FortResultsWidget_SendEndOfRoundUpVoteAnalytic) == 0x000038, "Wrong size on FortResultsWidget_SendEndOfRoundUpVoteAnalytic");
static_assert(offsetof(FortResultsWidget_SendEndOfRoundUpVoteAnalytic, TargetId) == 0x000000, "Member 'FortResultsWidget_SendEndOfRoundUpVoteAnalytic::TargetId' has a wrong offset!");
static_assert(offsetof(FortResultsWidget_SendEndOfRoundUpVoteAnalytic, TargetPlayerName) == 0x000028, "Member 'FortResultsWidget_SendEndOfRoundUpVoteAnalytic::TargetPlayerName' has a wrong offset!");

// Function FortniteUI.FortResultsWidget.GetZoneCompletionResult
// 0x0001 (0x0001 - 0x0000)
struct FortResultsWidget_GetZoneCompletionResult final
{
public:
	EFortCompletionResult                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidget_GetZoneCompletionResult) == 0x000001, "Wrong alignment on FortResultsWidget_GetZoneCompletionResult");
static_assert(sizeof(FortResultsWidget_GetZoneCompletionResult) == 0x000001, "Wrong size on FortResultsWidget_GetZoneCompletionResult");
static_assert(offsetof(FortResultsWidget_GetZoneCompletionResult, ReturnValue) == 0x000000, "Member 'FortResultsWidget_GetZoneCompletionResult::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResultsWidget.GetZoneCompletionResultText
// 0x0018 (0x0018 - 0x0000)
struct FortResultsWidget_GetZoneCompletionResultText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidget_GetZoneCompletionResultText) == 0x000008, "Wrong alignment on FortResultsWidget_GetZoneCompletionResultText");
static_assert(sizeof(FortResultsWidget_GetZoneCompletionResultText) == 0x000018, "Wrong size on FortResultsWidget_GetZoneCompletionResultText");
static_assert(offsetof(FortResultsWidget_GetZoneCompletionResultText, ReturnValue) == 0x000000, "Member 'FortResultsWidget_GetZoneCompletionResultText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortResultsWidget.IsDataFinalized
// 0x0001 (0x0001 - 0x0000)
struct FortResultsWidget_IsDataFinalized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortResultsWidget_IsDataFinalized) == 0x000001, "Wrong alignment on FortResultsWidget_IsDataFinalized");
static_assert(sizeof(FortResultsWidget_IsDataFinalized) == 0x000001, "Wrong size on FortResultsWidget_IsDataFinalized");
static_assert(offsetof(FortResultsWidget_IsDataFinalized, ReturnValue) == 0x000000, "Member 'FortResultsWidget_IsDataFinalized::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortReticle.OnWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct FortReticle_OnWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortReticle_OnWeaponEquipped) == 0x000008, "Wrong alignment on FortReticle_OnWeaponEquipped");
static_assert(sizeof(FortReticle_OnWeaponEquipped) == 0x000010, "Wrong size on FortReticle_OnWeaponEquipped");
static_assert(offsetof(FortReticle_OnWeaponEquipped, NewWeapon) == 0x000000, "Member 'FortReticle_OnWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(FortReticle_OnWeaponEquipped, PrevWeapon) == 0x000008, "Member 'FortReticle_OnWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationData.GetIconBrush
// 0x0090 (0x0090 - 0x0000)
struct FortRewardNotificationData_GetIconBrush final
{
public:
	struct FSlateBrush                            IconBrush;                                         // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0089(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardNotificationData_GetIconBrush) == 0x000008, "Wrong alignment on FortRewardNotificationData_GetIconBrush");
static_assert(sizeof(FortRewardNotificationData_GetIconBrush) == 0x000090, "Wrong size on FortRewardNotificationData_GetIconBrush");
static_assert(offsetof(FortRewardNotificationData_GetIconBrush, IconBrush) == 0x000000, "Member 'FortRewardNotificationData_GetIconBrush::IconBrush' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationData_GetIconBrush, BrushSize) == 0x000088, "Member 'FortRewardNotificationData_GetIconBrush::BrushSize' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationData_GetIconBrush, ReturnValue) == 0x000089, "Member 'FortRewardNotificationData_GetIconBrush::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationSubWidget.AddInputActionHandler
// 0x0020 (0x0020 - 0x0000)
struct FortRewardNotificationSubWidget_AddInputActionHandler final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool* bPassThrough)>           CommittedEvent;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_AddInputActionHandler) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_AddInputActionHandler");
static_assert(sizeof(FortRewardNotificationSubWidget_AddInputActionHandler) == 0x000020, "Wrong size on FortRewardNotificationSubWidget_AddInputActionHandler");
static_assert(offsetof(FortRewardNotificationSubWidget_AddInputActionHandler, DataTable) == 0x000000, "Member 'FortRewardNotificationSubWidget_AddInputActionHandler::DataTable' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationSubWidget_AddInputActionHandler, RowName) == 0x000008, "Member 'FortRewardNotificationSubWidget_AddInputActionHandler::RowName' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationSubWidget_AddInputActionHandler, CommittedEvent) == 0x000010, "Member 'FortRewardNotificationSubWidget_AddInputActionHandler::CommittedEvent' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationSubWidget.Init
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationSubWidget_Init final
{
public:
	class UFortRewardNotificationWidget*          MainWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_Init) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_Init");
static_assert(sizeof(FortRewardNotificationSubWidget_Init) == 0x000008, "Wrong size on FortRewardNotificationSubWidget_Init");
static_assert(offsetof(FortRewardNotificationSubWidget_Init, MainWidget) == 0x000000, "Member 'FortRewardNotificationSubWidget_Init::MainWidget' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationSubWidget.InspectItem
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationSubWidget_InspectItem final
{
public:
	class UFortItem*                              ItemToInspect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityOverride;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardNotificationSubWidget_InspectItem) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_InspectItem");
static_assert(sizeof(FortRewardNotificationSubWidget_InspectItem) == 0x000010, "Wrong size on FortRewardNotificationSubWidget_InspectItem");
static_assert(offsetof(FortRewardNotificationSubWidget_InspectItem, ItemToInspect) == 0x000000, "Member 'FortRewardNotificationSubWidget_InspectItem::ItemToInspect' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationSubWidget_InspectItem, QuantityOverride) == 0x000008, "Member 'FortRewardNotificationSubWidget_InspectItem::QuantityOverride' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationSubWidget.IsPrimaryActionEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationSubWidget_IsPrimaryActionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_IsPrimaryActionEnabled) == 0x000001, "Wrong alignment on FortRewardNotificationSubWidget_IsPrimaryActionEnabled");
static_assert(sizeof(FortRewardNotificationSubWidget_IsPrimaryActionEnabled) == 0x000001, "Wrong size on FortRewardNotificationSubWidget_IsPrimaryActionEnabled");
static_assert(offsetof(FortRewardNotificationSubWidget_IsPrimaryActionEnabled, bEnabled) == 0x000000, "Member 'FortRewardNotificationSubWidget_IsPrimaryActionEnabled::bEnabled' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationSubWidget.IsPrimaryActionHidden
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationSubWidget_IsPrimaryActionHidden final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_IsPrimaryActionHidden) == 0x000001, "Wrong alignment on FortRewardNotificationSubWidget_IsPrimaryActionHidden");
static_assert(sizeof(FortRewardNotificationSubWidget_IsPrimaryActionHidden) == 0x000001, "Wrong size on FortRewardNotificationSubWidget_IsPrimaryActionHidden");
static_assert(offsetof(FortRewardNotificationSubWidget_IsPrimaryActionHidden, bHidden) == 0x000000, "Member 'FortRewardNotificationSubWidget_IsPrimaryActionHidden::bHidden' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationSubWidget.RemoveInputActionHandler
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationSubWidget_RemoveInputActionHandler final
{
public:
	struct FDataTableRowHandle                    InputActionRow;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_RemoveInputActionHandler) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_RemoveInputActionHandler");
static_assert(sizeof(FortRewardNotificationSubWidget_RemoveInputActionHandler) == 0x000010, "Wrong size on FortRewardNotificationSubWidget_RemoveInputActionHandler");
static_assert(offsetof(FortRewardNotificationSubWidget_RemoveInputActionHandler, InputActionRow) == 0x000000, "Member 'FortRewardNotificationSubWidget_RemoveInputActionHandler::InputActionRow' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationSubWidget.SetInputActionHandlerState
// 0x0018 (0x0018 - 0x0000)
struct FortRewardNotificationSubWidget_SetInputActionHandlerState final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionState                             State;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardNotificationSubWidget_SetInputActionHandlerState) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_SetInputActionHandlerState");
static_assert(sizeof(FortRewardNotificationSubWidget_SetInputActionHandlerState) == 0x000018, "Wrong size on FortRewardNotificationSubWidget_SetInputActionHandlerState");
static_assert(offsetof(FortRewardNotificationSubWidget_SetInputActionHandlerState, DataTable) == 0x000000, "Member 'FortRewardNotificationSubWidget_SetInputActionHandlerState::DataTable' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationSubWidget_SetInputActionHandlerState, RowName) == 0x000008, "Member 'FortRewardNotificationSubWidget_SetInputActionHandlerState::RowName' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationSubWidget_SetInputActionHandlerState, State) == 0x000010, "Member 'FortRewardNotificationSubWidget_SetInputActionHandlerState::State' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationSubWidget.SetPrimaryActionEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationSubWidget_SetPrimaryActionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_SetPrimaryActionEnabled) == 0x000001, "Wrong alignment on FortRewardNotificationSubWidget_SetPrimaryActionEnabled");
static_assert(sizeof(FortRewardNotificationSubWidget_SetPrimaryActionEnabled) == 0x000001, "Wrong size on FortRewardNotificationSubWidget_SetPrimaryActionEnabled");
static_assert(offsetof(FortRewardNotificationSubWidget_SetPrimaryActionEnabled, bEnabled) == 0x000000, "Member 'FortRewardNotificationSubWidget_SetPrimaryActionEnabled::bEnabled' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationSubWidget.SetPrimaryActionText
// 0x0018 (0x0018 - 0x0000)
struct FortRewardNotificationSubWidget_SetPrimaryActionText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationSubWidget_SetPrimaryActionText) == 0x000008, "Wrong alignment on FortRewardNotificationSubWidget_SetPrimaryActionText");
static_assert(sizeof(FortRewardNotificationSubWidget_SetPrimaryActionText) == 0x000018, "Wrong size on FortRewardNotificationSubWidget_SetPrimaryActionText");
static_assert(offsetof(FortRewardNotificationSubWidget_SetPrimaryActionText, Text) == 0x000000, "Member 'FortRewardNotificationSubWidget_SetPrimaryActionText::Text' has a wrong offset!");

// Function FortniteUI.FortRewardConversationWidget.GetDataFromSentence
// 0x00E8 (0x00E8 - 0x0000)
struct FortRewardConversationWidget_GetDataFromSentence final
{
public:
	struct FFortConversationSentence              Sentence;                                          // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x00C8(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UTexture2D*                             TalkingHeadTexture;                                // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardConversationWidget_GetDataFromSentence) == 0x000008, "Wrong alignment on FortRewardConversationWidget_GetDataFromSentence");
static_assert(sizeof(FortRewardConversationWidget_GetDataFromSentence) == 0x0000E8, "Wrong size on FortRewardConversationWidget_GetDataFromSentence");
static_assert(offsetof(FortRewardConversationWidget_GetDataFromSentence, Sentence) == 0x000000, "Member 'FortRewardConversationWidget_GetDataFromSentence::Sentence' has a wrong offset!");
static_assert(offsetof(FortRewardConversationWidget_GetDataFromSentence, Text) == 0x0000C8, "Member 'FortRewardConversationWidget_GetDataFromSentence::Text' has a wrong offset!");
static_assert(offsetof(FortRewardConversationWidget_GetDataFromSentence, TalkingHeadTexture) == 0x0000E0, "Member 'FortRewardConversationWidget_GetDataFromSentence::TalkingHeadTexture' has a wrong offset!");

// Function FortniteUI.FortRewardConversationWidget.IsValidConversation
// 0x0010 (0x0010 - 0x0000)
struct FortRewardConversationWidget_IsValidConversation final
{
public:
	const class UFortConversation*                Conversation;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardConversationWidget_IsValidConversation) == 0x000008, "Wrong alignment on FortRewardConversationWidget_IsValidConversation");
static_assert(sizeof(FortRewardConversationWidget_IsValidConversation) == 0x000010, "Wrong size on FortRewardConversationWidget_IsValidConversation");
static_assert(offsetof(FortRewardConversationWidget_IsValidConversation, Conversation) == 0x000000, "Member 'FortRewardConversationWidget_IsValidConversation::Conversation' has a wrong offset!");
static_assert(offsetof(FortRewardConversationWidget_IsValidConversation, ReturnValue) == 0x000008, "Member 'FortRewardConversationWidget_IsValidConversation::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortRewardExpeditionWidget.CollectExpedition
// 0x0008 (0x0008 - 0x0000)
struct FortRewardExpeditionWidget_CollectExpedition final
{
public:
	class UFortExpeditionItem*                    Expedition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardExpeditionWidget_CollectExpedition) == 0x000008, "Wrong alignment on FortRewardExpeditionWidget_CollectExpedition");
static_assert(sizeof(FortRewardExpeditionWidget_CollectExpedition) == 0x000008, "Wrong size on FortRewardExpeditionWidget_CollectExpedition");
static_assert(offsetof(FortRewardExpeditionWidget_CollectExpedition, Expedition) == 0x000000, "Member 'FortRewardExpeditionWidget_CollectExpedition::Expedition' has a wrong offset!");

// Function FortniteUI.FortRewardExpeditionWidget.OnCollectExpeditionCompleted
// 0x0020 (0x0020 - 0x0000)
struct FortRewardExpeditionWidget_OnCollectExpeditionCompleted final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemInstanceQuantityPair>  Rewards;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardExpeditionWidget_OnCollectExpeditionCompleted) == 0x000008, "Wrong alignment on FortRewardExpeditionWidget_OnCollectExpeditionCompleted");
static_assert(sizeof(FortRewardExpeditionWidget_OnCollectExpeditionCompleted) == 0x000020, "Wrong size on FortRewardExpeditionWidget_OnCollectExpeditionCompleted");
static_assert(offsetof(FortRewardExpeditionWidget_OnCollectExpeditionCompleted, Expedition) == 0x000000, "Member 'FortRewardExpeditionWidget_OnCollectExpeditionCompleted::Expedition' has a wrong offset!");
static_assert(offsetof(FortRewardExpeditionWidget_OnCollectExpeditionCompleted, bSucceeded) == 0x000008, "Member 'FortRewardExpeditionWidget_OnCollectExpeditionCompleted::bSucceeded' has a wrong offset!");
static_assert(offsetof(FortRewardExpeditionWidget_OnCollectExpeditionCompleted, Rewards) == 0x000010, "Member 'FortRewardExpeditionWidget_OnCollectExpeditionCompleted::Rewards' has a wrong offset!");

// DelegateFunction FortniteUI.FortTimerTimespanDataSource.FortTimespanDataSourceOnChangeInternalDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortTimerTimespanDataSource_FortTimespanDataSourceOnChangeInternalDelegate__DelegateSignature final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimerTimespanDataSource_FortTimespanDataSourceOnChangeInternalDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortTimerTimespanDataSource_FortTimespanDataSourceOnChangeInternalDelegate__DelegateSignature");
static_assert(sizeof(FortTimerTimespanDataSource_FortTimespanDataSourceOnChangeInternalDelegate__DelegateSignature) == 0x000008, "Wrong size on FortTimerTimespanDataSource_FortTimespanDataSourceOnChangeInternalDelegate__DelegateSignature");
static_assert(offsetof(FortTimerTimespanDataSource_FortTimespanDataSourceOnChangeInternalDelegate__DelegateSignature, Source) == 0x000000, "Member 'FortTimerTimespanDataSource_FortTimespanDataSourceOnChangeInternalDelegate__DelegateSignature::Source' has a wrong offset!");

// Function FortniteUI.FortTimerTimespanDataSource.SetTimespanSource
// 0x0010 (0x0010 - 0x0000)
struct FortTimerTimespanDataSource_SetTimespanSource final
{
public:
	TDelegate<void(struct FTimespan* Result)>     Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimerTimespanDataSource_SetTimespanSource) == 0x000004, "Wrong alignment on FortTimerTimespanDataSource_SetTimespanSource");
static_assert(sizeof(FortTimerTimespanDataSource_SetTimespanSource) == 0x000010, "Wrong size on FortTimerTimespanDataSource_SetTimespanSource");
static_assert(offsetof(FortTimerTimespanDataSource_SetTimespanSource, Value) == 0x000000, "Member 'FortTimerTimespanDataSource_SetTimespanSource::Value' has a wrong offset!");

// DelegateFunction FortniteUI.FortTimerTimespanDataSource.TimespanSourceDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FortTimerTimespanDataSource_TimespanSourceDelegate__DelegateSignature final
{
public:
	struct FTimespan                              Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimerTimespanDataSource_TimespanSourceDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortTimerTimespanDataSource_TimespanSourceDelegate__DelegateSignature");
static_assert(sizeof(FortTimerTimespanDataSource_TimespanSourceDelegate__DelegateSignature) == 0x000008, "Wrong size on FortTimerTimespanDataSource_TimespanSourceDelegate__DelegateSignature");
static_assert(offsetof(FortTimerTimespanDataSource_TimespanSourceDelegate__DelegateSignature, Result) == 0x000000, "Member 'FortTimerTimespanDataSource_TimespanSourceDelegate__DelegateSignature::Result' has a wrong offset!");

// Function FortniteUI.FortTimerTimespanDataSource.StartTimer
// 0x0008 (0x0008 - 0x0000)
struct FortTimerTimespanDataSource_StartTimer final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickImmediately;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTimerTimespanDataSource_StartTimer) == 0x000004, "Wrong alignment on FortTimerTimespanDataSource_StartTimer");
static_assert(sizeof(FortTimerTimespanDataSource_StartTimer) == 0x000008, "Wrong size on FortTimerTimespanDataSource_StartTimer");
static_assert(offsetof(FortTimerTimespanDataSource_StartTimer, Delay) == 0x000000, "Member 'FortTimerTimespanDataSource_StartTimer::Delay' has a wrong offset!");
static_assert(offsetof(FortTimerTimespanDataSource_StartTimer, bTickImmediately) == 0x000004, "Member 'FortTimerTimespanDataSource_StartTimer::bTickImmediately' has a wrong offset!");

// Function FortniteUI.FortRewardInfoButton.SetItemInstanceQuantityPair
// 0x0010 (0x0010 - 0x0000)
struct FortRewardInfoButton_SetItemInstanceQuantityPair final
{
public:
	struct FFortItemInstanceQuantityPair          ItemQuantityPair;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardInfoButton_SetItemInstanceQuantityPair) == 0x000008, "Wrong alignment on FortRewardInfoButton_SetItemInstanceQuantityPair");
static_assert(sizeof(FortRewardInfoButton_SetItemInstanceQuantityPair) == 0x000010, "Wrong size on FortRewardInfoButton_SetItemInstanceQuantityPair");
static_assert(offsetof(FortRewardInfoButton_SetItemInstanceQuantityPair, ItemQuantityPair) == 0x000000, "Member 'FortRewardInfoButton_SetItemInstanceQuantityPair::ItemQuantityPair' has a wrong offset!");

// Function FortniteUI.FortRewardInfoButton.SetShowDescription
// 0x0001 (0x0001 - 0x0000)
struct FortRewardInfoButton_SetShowDescription final
{
public:
	bool                                          bInShowDescription;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardInfoButton_SetShowDescription) == 0x000001, "Wrong alignment on FortRewardInfoButton_SetShowDescription");
static_assert(sizeof(FortRewardInfoButton_SetShowDescription) == 0x000001, "Wrong size on FortRewardInfoButton_SetShowDescription");
static_assert(offsetof(FortRewardInfoButton_SetShowDescription, bInShowDescription) == 0x000000, "Member 'FortRewardInfoButton_SetShowDescription::bInShowDescription' has a wrong offset!");

// Function FortniteUI.FortRewardInfoButton.SetShowDescriptionBP
// 0x0001 (0x0001 - 0x0000)
struct FortRewardInfoButton_SetShowDescriptionBP final
{
public:
	bool                                          bInShowDescription;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardInfoButton_SetShowDescriptionBP) == 0x000001, "Wrong alignment on FortRewardInfoButton_SetShowDescriptionBP");
static_assert(sizeof(FortRewardInfoButton_SetShowDescriptionBP) == 0x000001, "Wrong size on FortRewardInfoButton_SetShowDescriptionBP");
static_assert(offsetof(FortRewardInfoButton_SetShowDescriptionBP, bInShowDescription) == 0x000000, "Member 'FortRewardInfoButton_SetShowDescriptionBP::bInShowDescription' has a wrong offset!");

// Function FortniteUI.FortRewardInfoButton.GetItemInstance
// 0x0008 (0x0008 - 0x0000)
struct FortRewardInfoButton_GetItemInstance final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardInfoButton_GetItemInstance) == 0x000008, "Wrong alignment on FortRewardInfoButton_GetItemInstance");
static_assert(sizeof(FortRewardInfoButton_GetItemInstance) == 0x000008, "Wrong size on FortRewardInfoButton_GetItemInstance");
static_assert(offsetof(FortRewardInfoButton_GetItemInstance, ReturnValue) == 0x000000, "Member 'FortRewardInfoButton_GetItemInstance::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortRewardInfoButton.GetQuantity
// 0x0004 (0x0004 - 0x0000)
struct FortRewardInfoButton_GetQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardInfoButton_GetQuantity) == 0x000004, "Wrong alignment on FortRewardInfoButton_GetQuantity");
static_assert(sizeof(FortRewardInfoButton_GetQuantity) == 0x000004, "Wrong size on FortRewardInfoButton_GetQuantity");
static_assert(offsetof(FortRewardInfoButton_GetQuantity, ReturnValue) == 0x000000, "Member 'FortRewardInfoButton_GetQuantity::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortRewardInfoWidget.ContainsReward
// 0x0018 (0x0018 - 0x0000)
struct FortRewardInfoWidget_ContainsReward final
{
public:
	class FString                                 TemplateIdToCheck;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardInfoWidget_ContainsReward) == 0x000008, "Wrong alignment on FortRewardInfoWidget_ContainsReward");
static_assert(sizeof(FortRewardInfoWidget_ContainsReward) == 0x000018, "Wrong size on FortRewardInfoWidget_ContainsReward");
static_assert(offsetof(FortRewardInfoWidget_ContainsReward, TemplateIdToCheck) == 0x000000, "Member 'FortRewardInfoWidget_ContainsReward::TemplateIdToCheck' has a wrong offset!");
static_assert(offsetof(FortRewardInfoWidget_ContainsReward, ReturnValue) == 0x000010, "Member 'FortRewardInfoWidget_ContainsReward::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortRewardInfoWidget.SetButtonGroup
// 0x0008 (0x0008 - 0x0000)
struct FortRewardInfoWidget_SetButtonGroup final
{
public:
	class UCommonButtonGroup*                     InButtonGroup;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardInfoWidget_SetButtonGroup) == 0x000008, "Wrong alignment on FortRewardInfoWidget_SetButtonGroup");
static_assert(sizeof(FortRewardInfoWidget_SetButtonGroup) == 0x000008, "Wrong size on FortRewardInfoWidget_SetButtonGroup");
static_assert(offsetof(FortRewardInfoWidget_SetButtonGroup, InButtonGroup) == 0x000000, "Member 'FortRewardInfoWidget_SetButtonGroup::InButtonGroup' has a wrong offset!");

// Function FortniteUI.FortRewardInfoWidget.SetReward
// 0x0040 (0x0040 - 0x0000)
struct FortRewardInfoWidget_SetReward final
{
public:
	struct FFortItemQuantityPair                  RewardIn;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardInfoWidget_SetReward) == 0x000008, "Wrong alignment on FortRewardInfoWidget_SetReward");
static_assert(sizeof(FortRewardInfoWidget_SetReward) == 0x000040, "Wrong size on FortRewardInfoWidget_SetReward");
static_assert(offsetof(FortRewardInfoWidget_SetReward, RewardIn) == 0x000000, "Member 'FortRewardInfoWidget_SetReward::RewardIn' has a wrong offset!");

// Function FortniteUI.FortRewardInfoWidget.SetRewards
// 0x0030 (0x0030 - 0x0000)
struct FortRewardInfoWidget_SetRewards final
{
public:
	struct FFortRewardInfo                        RewardsIn;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardInfoWidget_SetRewards) == 0x000008, "Wrong alignment on FortRewardInfoWidget_SetRewards");
static_assert(sizeof(FortRewardInfoWidget_SetRewards) == 0x000030, "Wrong size on FortRewardInfoWidget_SetRewards");
static_assert(offsetof(FortRewardInfoWidget_SetRewards, RewardsIn) == 0x000000, "Member 'FortRewardInfoWidget_SetRewards::RewardsIn' has a wrong offset!");

// Function FortniteUI.FortTwitchLogin.GetAccountName
// 0x0010 (0x0010 - 0x0000)
struct FortTwitchLogin_GetAccountName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTwitchLogin_GetAccountName) == 0x000008, "Wrong alignment on FortTwitchLogin_GetAccountName");
static_assert(sizeof(FortTwitchLogin_GetAccountName) == 0x000010, "Wrong size on FortTwitchLogin_GetAccountName");
static_assert(offsetof(FortTwitchLogin_GetAccountName, ReturnValue) == 0x000000, "Member 'FortTwitchLogin_GetAccountName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTwitchLogin.GetLinkedTwitchAccountName
// 0x0010 (0x0010 - 0x0000)
struct FortTwitchLogin_GetLinkedTwitchAccountName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTwitchLogin_GetLinkedTwitchAccountName) == 0x000008, "Wrong alignment on FortTwitchLogin_GetLinkedTwitchAccountName");
static_assert(sizeof(FortTwitchLogin_GetLinkedTwitchAccountName) == 0x000010, "Wrong size on FortTwitchLogin_GetLinkedTwitchAccountName");
static_assert(offsetof(FortTwitchLogin_GetLinkedTwitchAccountName, ReturnValue) == 0x000000, "Member 'FortTwitchLogin_GetLinkedTwitchAccountName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTwitchLogin.IsLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct FortTwitchLogin_IsLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTwitchLogin_IsLoggedIn) == 0x000001, "Wrong alignment on FortTwitchLogin_IsLoggedIn");
static_assert(sizeof(FortTwitchLogin_IsLoggedIn) == 0x000001, "Wrong size on FortTwitchLogin_IsLoggedIn");
static_assert(offsetof(FortTwitchLogin_IsLoggedIn, ReturnValue) == 0x000000, "Member 'FortTwitchLogin_IsLoggedIn::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTwitchLogin.OnLinkedTwitchAccountChanged
// 0x0010 (0x0010 - 0x0000)
struct FortTwitchLogin_OnLinkedTwitchAccountChanged final
{
public:
	class FString                                 AccountName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTwitchLogin_OnLinkedTwitchAccountChanged) == 0x000008, "Wrong alignment on FortTwitchLogin_OnLinkedTwitchAccountChanged");
static_assert(sizeof(FortTwitchLogin_OnLinkedTwitchAccountChanged) == 0x000010, "Wrong size on FortTwitchLogin_OnLinkedTwitchAccountChanged");
static_assert(offsetof(FortTwitchLogin_OnLinkedTwitchAccountChanged, AccountName) == 0x000000, "Member 'FortTwitchLogin_OnLinkedTwitchAccountChanged::AccountName' has a wrong offset!");

// Function FortniteUI.FortTwitchLogin.OnLoginFlowModalCreated
// 0x0008 (0x0008 - 0x0000)
struct FortTwitchLogin_OnLoginFlowModalCreated final
{
public:
	class UFortTwitchLoginModalWidget*            Modal;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTwitchLogin_OnLoginFlowModalCreated) == 0x000008, "Wrong alignment on FortTwitchLogin_OnLoginFlowModalCreated");
static_assert(sizeof(FortTwitchLogin_OnLoginFlowModalCreated) == 0x000008, "Wrong size on FortTwitchLogin_OnLoginFlowModalCreated");
static_assert(offsetof(FortTwitchLogin_OnLoginFlowModalCreated, Modal) == 0x000000, "Member 'FortTwitchLogin_OnLoginFlowModalCreated::Modal' has a wrong offset!");

// Function FortniteUI.FortTwitchLogin.OnLoginFlowModalDismissed
// 0x0008 (0x0008 - 0x0000)
struct FortTwitchLogin_OnLoginFlowModalDismissed final
{
public:
	class UFortTwitchLoginModalWidget*            Modal;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTwitchLogin_OnLoginFlowModalDismissed) == 0x000008, "Wrong alignment on FortTwitchLogin_OnLoginFlowModalDismissed");
static_assert(sizeof(FortTwitchLogin_OnLoginFlowModalDismissed) == 0x000008, "Wrong size on FortTwitchLogin_OnLoginFlowModalDismissed");
static_assert(offsetof(FortTwitchLogin_OnLoginFlowModalDismissed, Modal) == 0x000000, "Member 'FortTwitchLogin_OnLoginFlowModalDismissed::Modal' has a wrong offset!");

// Function FortniteUI.FortTwitchLogin.OnLoginStatusChanged
// 0x0018 (0x0018 - 0x0000)
struct FortTwitchLogin_OnLoginStatusChanged final
{
public:
	bool                                          bLoggedIn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AccountName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTwitchLogin_OnLoginStatusChanged) == 0x000008, "Wrong alignment on FortTwitchLogin_OnLoginStatusChanged");
static_assert(sizeof(FortTwitchLogin_OnLoginStatusChanged) == 0x000018, "Wrong size on FortTwitchLogin_OnLoginStatusChanged");
static_assert(offsetof(FortTwitchLogin_OnLoginStatusChanged, bLoggedIn) == 0x000000, "Member 'FortTwitchLogin_OnLoginStatusChanged::bLoggedIn' has a wrong offset!");
static_assert(offsetof(FortTwitchLogin_OnLoginStatusChanged, AccountName) == 0x000008, "Member 'FortTwitchLogin_OnLoginStatusChanged::AccountName' has a wrong offset!");

// Function FortniteUI.FortTwitchLogin.OnShowLoginError
// 0x0030 (0x0030 - 0x0000)
struct FortTwitchLogin_OnShowLoginError final
{
public:
	class FText                                   ErrorTitle;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ErrorMessage;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTwitchLogin_OnShowLoginError) == 0x000008, "Wrong alignment on FortTwitchLogin_OnShowLoginError");
static_assert(sizeof(FortTwitchLogin_OnShowLoginError) == 0x000030, "Wrong size on FortTwitchLogin_OnShowLoginError");
static_assert(offsetof(FortTwitchLogin_OnShowLoginError, ErrorTitle) == 0x000000, "Member 'FortTwitchLogin_OnShowLoginError::ErrorTitle' has a wrong offset!");
static_assert(offsetof(FortTwitchLogin_OnShowLoginError, ErrorMessage) == 0x000018, "Member 'FortTwitchLogin_OnShowLoginError::ErrorMessage' has a wrong offset!");

// Function FortniteUI.FortRewardNewQuestWidget.GetDataFromSentence
// 0x00E8 (0x00E8 - 0x0000)
struct FortRewardNewQuestWidget_GetDataFromSentence final
{
public:
	struct FFortConversationSentence              Sentence;                                          // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x00C8(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class UTexture2D*                             TalkingHeadTexture;                                // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNewQuestWidget_GetDataFromSentence) == 0x000008, "Wrong alignment on FortRewardNewQuestWidget_GetDataFromSentence");
static_assert(sizeof(FortRewardNewQuestWidget_GetDataFromSentence) == 0x0000E8, "Wrong size on FortRewardNewQuestWidget_GetDataFromSentence");
static_assert(offsetof(FortRewardNewQuestWidget_GetDataFromSentence, Sentence) == 0x000000, "Member 'FortRewardNewQuestWidget_GetDataFromSentence::Sentence' has a wrong offset!");
static_assert(offsetof(FortRewardNewQuestWidget_GetDataFromSentence, Text) == 0x0000C8, "Member 'FortRewardNewQuestWidget_GetDataFromSentence::Text' has a wrong offset!");
static_assert(offsetof(FortRewardNewQuestWidget_GetDataFromSentence, TalkingHeadTexture) == 0x0000E0, "Member 'FortRewardNewQuestWidget_GetDataFromSentence::TalkingHeadTexture' has a wrong offset!");

// Function FortniteUI.FortRewardNewQuestWidget.IsValidConversation
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNewQuestWidget_IsValidConversation final
{
public:
	const class UFortConversation*                Conversation;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardNewQuestWidget_IsValidConversation) == 0x000008, "Wrong alignment on FortRewardNewQuestWidget_IsValidConversation");
static_assert(sizeof(FortRewardNewQuestWidget_IsValidConversation) == 0x000010, "Wrong size on FortRewardNewQuestWidget_IsValidConversation");
static_assert(offsetof(FortRewardNewQuestWidget_IsValidConversation, Conversation) == 0x000000, "Member 'FortRewardNewQuestWidget_IsValidConversation::Conversation' has a wrong offset!");
static_assert(offsetof(FortRewardNewQuestWidget_IsValidConversation, ReturnValue) == 0x000008, "Member 'FortRewardNewQuestWidget_IsValidConversation::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationWidget.AddCollectionBookData
// 0x0068 (0x0068 - 0x0000)
struct FortRewardNotificationWidget_AddCollectionBookData final
{
public:
	struct FFortCollectionBookRewards             CollectionBookRewards;                             // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_AddCollectionBookData) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_AddCollectionBookData");
static_assert(sizeof(FortRewardNotificationWidget_AddCollectionBookData) == 0x000068, "Wrong size on FortRewardNotificationWidget_AddCollectionBookData");
static_assert(offsetof(FortRewardNotificationWidget_AddCollectionBookData, CollectionBookRewards) == 0x000000, "Member 'FortRewardNotificationWidget_AddCollectionBookData::CollectionBookRewards' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationWidget.AddEpicQuestData
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_AddEpicQuestData final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_AddEpicQuestData) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_AddEpicQuestData");
static_assert(sizeof(FortRewardNotificationWidget_AddEpicQuestData) == 0x000008, "Wrong size on FortRewardNotificationWidget_AddEpicQuestData");
static_assert(offsetof(FortRewardNotificationWidget_AddEpicQuestData, Quest) == 0x000000, "Member 'FortRewardNotificationWidget_AddEpicQuestData::Quest' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationWidget.AddExpeditionData
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_AddExpeditionData final
{
public:
	class UFortExpeditionItem*                    ExpeditionItem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_AddExpeditionData) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_AddExpeditionData");
static_assert(sizeof(FortRewardNotificationWidget_AddExpeditionData) == 0x000008, "Wrong size on FortRewardNotificationWidget_AddExpeditionData");
static_assert(offsetof(FortRewardNotificationWidget_AddExpeditionData, ExpeditionItem) == 0x000000, "Member 'FortRewardNotificationWidget_AddExpeditionData::ExpeditionItem' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationWidget.AddItemCacheRewardData
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_AddItemCacheRewardData final
{
public:
	class UFortItem*                              ItemCache;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_AddItemCacheRewardData) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_AddItemCacheRewardData");
static_assert(sizeof(FortRewardNotificationWidget_AddItemCacheRewardData) == 0x000008, "Wrong size on FortRewardNotificationWidget_AddItemCacheRewardData");
static_assert(offsetof(FortRewardNotificationWidget_AddItemCacheRewardData, ItemCache) == 0x000000, "Member 'FortRewardNotificationWidget_AddItemCacheRewardData::ItemCache' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationWidget.AddQuestData
// 0x0008 (0x0008 - 0x0000)
struct FortRewardNotificationWidget_AddQuestData final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_AddQuestData) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_AddQuestData");
static_assert(sizeof(FortRewardNotificationWidget_AddQuestData) == 0x000008, "Wrong size on FortRewardNotificationWidget_AddQuestData");
static_assert(offsetof(FortRewardNotificationWidget_AddQuestData, Quest) == 0x000000, "Member 'FortRewardNotificationWidget_AddQuestData::Quest' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationWidget.InspectItem
// 0x0010 (0x0010 - 0x0000)
struct FortRewardNotificationWidget_InspectItem final
{
public:
	class UFortItem*                              ItemToInspect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityOverride;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRewardNotificationWidget_InspectItem) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_InspectItem");
static_assert(sizeof(FortRewardNotificationWidget_InspectItem) == 0x000010, "Wrong size on FortRewardNotificationWidget_InspectItem");
static_assert(offsetof(FortRewardNotificationWidget_InspectItem, ItemToInspect) == 0x000000, "Member 'FortRewardNotificationWidget_InspectItem::ItemToInspect' has a wrong offset!");
static_assert(offsetof(FortRewardNotificationWidget_InspectItem, QuantityOverride) == 0x000008, "Member 'FortRewardNotificationWidget_InspectItem::QuantityOverride' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationWidget.IsPrimaryActionEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationWidget_IsPrimaryActionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_IsPrimaryActionEnabled) == 0x000001, "Wrong alignment on FortRewardNotificationWidget_IsPrimaryActionEnabled");
static_assert(sizeof(FortRewardNotificationWidget_IsPrimaryActionEnabled) == 0x000001, "Wrong size on FortRewardNotificationWidget_IsPrimaryActionEnabled");
static_assert(offsetof(FortRewardNotificationWidget_IsPrimaryActionEnabled, bEnabled) == 0x000000, "Member 'FortRewardNotificationWidget_IsPrimaryActionEnabled::bEnabled' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationWidget.IsPrimaryActionHidden
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationWidget_IsPrimaryActionHidden final
{
public:
	bool                                          bHidden;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_IsPrimaryActionHidden) == 0x000001, "Wrong alignment on FortRewardNotificationWidget_IsPrimaryActionHidden");
static_assert(sizeof(FortRewardNotificationWidget_IsPrimaryActionHidden) == 0x000001, "Wrong size on FortRewardNotificationWidget_IsPrimaryActionHidden");
static_assert(offsetof(FortRewardNotificationWidget_IsPrimaryActionHidden, bHidden) == 0x000000, "Member 'FortRewardNotificationWidget_IsPrimaryActionHidden::bHidden' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationWidget.OnPrimaryActionTextChanged
// 0x0018 (0x0018 - 0x0000)
struct FortRewardNotificationWidget_OnPrimaryActionTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_OnPrimaryActionTextChanged) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_OnPrimaryActionTextChanged");
static_assert(sizeof(FortRewardNotificationWidget_OnPrimaryActionTextChanged) == 0x000018, "Wrong size on FortRewardNotificationWidget_OnPrimaryActionTextChanged");
static_assert(offsetof(FortRewardNotificationWidget_OnPrimaryActionTextChanged, Text) == 0x000000, "Member 'FortRewardNotificationWidget_OnPrimaryActionTextChanged::Text' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationWidget.SetPrimaryActionEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortRewardNotificationWidget_SetPrimaryActionEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_SetPrimaryActionEnabled) == 0x000001, "Wrong alignment on FortRewardNotificationWidget_SetPrimaryActionEnabled");
static_assert(sizeof(FortRewardNotificationWidget_SetPrimaryActionEnabled) == 0x000001, "Wrong size on FortRewardNotificationWidget_SetPrimaryActionEnabled");
static_assert(offsetof(FortRewardNotificationWidget_SetPrimaryActionEnabled, bEnabled) == 0x000000, "Member 'FortRewardNotificationWidget_SetPrimaryActionEnabled::bEnabled' has a wrong offset!");

// Function FortniteUI.FortRewardNotificationWidget.SetPrimaryActionText
// 0x0018 (0x0018 - 0x0000)
struct FortRewardNotificationWidget_SetPrimaryActionText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRewardNotificationWidget_SetPrimaryActionText) == 0x000008, "Wrong alignment on FortRewardNotificationWidget_SetPrimaryActionText");
static_assert(sizeof(FortRewardNotificationWidget_SetPrimaryActionText) == 0x000018, "Wrong size on FortRewardNotificationWidget_SetPrimaryActionText");
static_assert(offsetof(FortRewardNotificationWidget_SetPrimaryActionText, Text) == 0x000000, "Member 'FortRewardNotificationWidget_SetPrimaryActionText::Text' has a wrong offset!");

// Function FortniteUI.FortRichTextBlock.EscapeStringForRichText
// 0x0020 (0x0020 - 0x0000)
struct FortRichTextBlock_EscapeStringForRichText final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRichTextBlock_EscapeStringForRichText) == 0x000008, "Wrong alignment on FortRichTextBlock_EscapeStringForRichText");
static_assert(sizeof(FortRichTextBlock_EscapeStringForRichText) == 0x000020, "Wrong size on FortRichTextBlock_EscapeStringForRichText");
static_assert(offsetof(FortRichTextBlock_EscapeStringForRichText, InString) == 0x000000, "Member 'FortRichTextBlock_EscapeStringForRichText::InString' has a wrong offset!");
static_assert(offsetof(FortRichTextBlock_EscapeStringForRichText, ReturnValue) == 0x000010, "Member 'FortRichTextBlock_EscapeStringForRichText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortRichTextBlock.SetText
// 0x0018 (0x0018 - 0x0000)
struct FortRichTextBlock_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRichTextBlock_SetText) == 0x000008, "Wrong alignment on FortRichTextBlock_SetText");
static_assert(sizeof(FortRichTextBlock_SetText) == 0x000018, "Wrong size on FortRichTextBlock_SetText");
static_assert(offsetof(FortRichTextBlock_SetText, InText) == 0x000000, "Member 'FortRichTextBlock_SetText::InText' has a wrong offset!");

// Function FortniteUI.FortRotatingItemTileButton.SetNeedsItemRotateAnimation
// 0x0001 (0x0001 - 0x0000)
struct FortRotatingItemTileButton_SetNeedsItemRotateAnimation final
{
public:
	bool                                          InNeedsItemRotationAnimation;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRotatingItemTileButton_SetNeedsItemRotateAnimation) == 0x000001, "Wrong alignment on FortRotatingItemTileButton_SetNeedsItemRotateAnimation");
static_assert(sizeof(FortRotatingItemTileButton_SetNeedsItemRotateAnimation) == 0x000001, "Wrong size on FortRotatingItemTileButton_SetNeedsItemRotateAnimation");
static_assert(offsetof(FortRotatingItemTileButton_SetNeedsItemRotateAnimation, InNeedsItemRotationAnimation) == 0x000000, "Member 'FortRotatingItemTileButton_SetNeedsItemRotateAnimation::InNeedsItemRotationAnimation' has a wrong offset!");

// Function FortniteUI.FortRotatingItemTileButton.SetTimeBeweenRotations
// 0x0004 (0x0004 - 0x0000)
struct FortRotatingItemTileButton_SetTimeBeweenRotations final
{
public:
	float                                         InTimeBetweenRotations;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRotatingItemTileButton_SetTimeBeweenRotations) == 0x000004, "Wrong alignment on FortRotatingItemTileButton_SetTimeBeweenRotations");
static_assert(sizeof(FortRotatingItemTileButton_SetTimeBeweenRotations) == 0x000004, "Wrong size on FortRotatingItemTileButton_SetTimeBeweenRotations");
static_assert(offsetof(FortRotatingItemTileButton_SetTimeBeweenRotations, InTimeBetweenRotations) == 0x000000, "Member 'FortRotatingItemTileButton_SetTimeBeweenRotations::InTimeBetweenRotations' has a wrong offset!");

// Function FortniteUI.FortEditableFilteredCountedTextBox.HandleTextChanged
// 0x0018 (0x0018 - 0x0000)
struct FortEditableFilteredCountedTextBox_HandleTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEditableFilteredCountedTextBox_HandleTextChanged) == 0x000008, "Wrong alignment on FortEditableFilteredCountedTextBox_HandleTextChanged");
static_assert(sizeof(FortEditableFilteredCountedTextBox_HandleTextChanged) == 0x000018, "Wrong size on FortEditableFilteredCountedTextBox_HandleTextChanged");
static_assert(offsetof(FortEditableFilteredCountedTextBox_HandleTextChanged, Text) == 0x000000, "Member 'FortEditableFilteredCountedTextBox_HandleTextChanged::Text' has a wrong offset!");

// Function FortniteUI.FortEditableFilteredCountedTextBox.HandleTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct FortEditableFilteredCountedTextBox_HandleTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommittMethod;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEditableFilteredCountedTextBox_HandleTextCommitted) == 0x000008, "Wrong alignment on FortEditableFilteredCountedTextBox_HandleTextCommitted");
static_assert(sizeof(FortEditableFilteredCountedTextBox_HandleTextCommitted) == 0x000020, "Wrong size on FortEditableFilteredCountedTextBox_HandleTextCommitted");
static_assert(offsetof(FortEditableFilteredCountedTextBox_HandleTextCommitted, Text) == 0x000000, "Member 'FortEditableFilteredCountedTextBox_HandleTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(FortEditableFilteredCountedTextBox_HandleTextCommitted, CommittMethod) == 0x000018, "Member 'FortEditableFilteredCountedTextBox_HandleTextCommitted::CommittMethod' has a wrong offset!");

// Function FortniteUI.FortEditableFilteredCountedTextBox.OnDirtyTextAttempted
// 0x0001 (0x0001 - 0x0000)
struct FortEditableFilteredCountedTextBox_OnDirtyTextAttempted final
{
public:
	bool                                          bIsBadText;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEditableFilteredCountedTextBox_OnDirtyTextAttempted) == 0x000001, "Wrong alignment on FortEditableFilteredCountedTextBox_OnDirtyTextAttempted");
static_assert(sizeof(FortEditableFilteredCountedTextBox_OnDirtyTextAttempted) == 0x000001, "Wrong size on FortEditableFilteredCountedTextBox_OnDirtyTextAttempted");
static_assert(offsetof(FortEditableFilteredCountedTextBox_OnDirtyTextAttempted, bIsBadText) == 0x000000, "Member 'FortEditableFilteredCountedTextBox_OnDirtyTextAttempted::bIsBadText' has a wrong offset!");

// Function FortniteUI.FortEditableFilteredCountedTextBox.SetEntryCharLimit
// 0x0004 (0x0004 - 0x0000)
struct FortEditableFilteredCountedTextBox_SetEntryCharLimit final
{
public:
	int32                                         InCharLimit;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEditableFilteredCountedTextBox_SetEntryCharLimit) == 0x000004, "Wrong alignment on FortEditableFilteredCountedTextBox_SetEntryCharLimit");
static_assert(sizeof(FortEditableFilteredCountedTextBox_SetEntryCharLimit) == 0x000004, "Wrong size on FortEditableFilteredCountedTextBox_SetEntryCharLimit");
static_assert(offsetof(FortEditableFilteredCountedTextBox_SetEntryCharLimit, InCharLimit) == 0x000000, "Member 'FortEditableFilteredCountedTextBox_SetEntryCharLimit::InCharLimit' has a wrong offset!");

// Function FortniteUI.FortUIMessagesPageBase.OnNotificationCleared
// 0x0008 (0x0008 - 0x0000)
struct FortUIMessagesPageBase_OnNotificationCleared final
{
public:
	class UFortUINotification*                    ClearedMessage;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIMessagesPageBase_OnNotificationCleared) == 0x000008, "Wrong alignment on FortUIMessagesPageBase_OnNotificationCleared");
static_assert(sizeof(FortUIMessagesPageBase_OnNotificationCleared) == 0x000008, "Wrong size on FortUIMessagesPageBase_OnNotificationCleared");
static_assert(offsetof(FortUIMessagesPageBase_OnNotificationCleared, ClearedMessage) == 0x000000, "Member 'FortUIMessagesPageBase_OnNotificationCleared::ClearedMessage' has a wrong offset!");

// Function FortniteUI.FortSetting.GetDescriptionRichText
// 0x0018 (0x0018 - 0x0000)
struct FortSetting_GetDescriptionRichText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSetting_GetDescriptionRichText) == 0x000008, "Wrong alignment on FortSetting_GetDescriptionRichText");
static_assert(sizeof(FortSetting_GetDescriptionRichText) == 0x000018, "Wrong size on FortSetting_GetDescriptionRichText");
static_assert(offsetof(FortSetting_GetDescriptionRichText, ReturnValue) == 0x000000, "Member 'FortSetting_GetDescriptionRichText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSetting.GetDevName
// 0x0010 (0x0010 - 0x0000)
struct FortSetting_GetDevName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSetting_GetDevName) == 0x000008, "Wrong alignment on FortSetting_GetDevName");
static_assert(sizeof(FortSetting_GetDevName) == 0x000010, "Wrong size on FortSetting_GetDevName");
static_assert(offsetof(FortSetting_GetDevName, ReturnValue) == 0x000000, "Member 'FortSetting_GetDevName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSetting.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortSetting_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSetting_GetDisplayName) == 0x000008, "Wrong alignment on FortSetting_GetDisplayName");
static_assert(sizeof(FortSetting_GetDisplayName) == 0x000018, "Wrong size on FortSetting_GetDisplayName");
static_assert(offsetof(FortSetting_GetDisplayName, ReturnValue) == 0x000000, "Member 'FortSetting_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSetting.GetDynamicDetails
// 0x0018 (0x0018 - 0x0000)
struct FortSetting_GetDynamicDetails final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSetting_GetDynamicDetails) == 0x000008, "Wrong alignment on FortSetting_GetDynamicDetails");
static_assert(sizeof(FortSetting_GetDynamicDetails) == 0x000018, "Wrong size on FortSetting_GetDynamicDetails");
static_assert(offsetof(FortSetting_GetDynamicDetails, ReturnValue) == 0x000000, "Member 'FortSetting_GetDynamicDetails::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortWeaponBoardBase.OnDisplaySlotItemChanged
// 0x0060 (0x0060 - 0x0000)
struct FortWeaponBoardBase_OnDisplaySlotItemChanged final
{
public:
	struct FFortWeaponBoardDisplaySlot            DisplaySlot;                                       // 0x0000(0x0050)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UFortAccountItem*                       Item;                                              // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponBoardBase_OnDisplaySlotItemChanged) == 0x000010, "Wrong alignment on FortWeaponBoardBase_OnDisplaySlotItemChanged");
static_assert(sizeof(FortWeaponBoardBase_OnDisplaySlotItemChanged) == 0x000060, "Wrong size on FortWeaponBoardBase_OnDisplaySlotItemChanged");
static_assert(offsetof(FortWeaponBoardBase_OnDisplaySlotItemChanged, DisplaySlot) == 0x000000, "Member 'FortWeaponBoardBase_OnDisplaySlotItemChanged::DisplaySlot' has a wrong offset!");
static_assert(offsetof(FortWeaponBoardBase_OnDisplaySlotItemChanged, Item) == 0x000050, "Member 'FortWeaponBoardBase_OnDisplaySlotItemChanged::Item' has a wrong offset!");

// Function FortniteUI.FortSettingControllerInput.GetKeyIndex
// 0x0004 (0x0004 - 0x0000)
struct FortSettingControllerInput_GetKeyIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingControllerInput_GetKeyIndex) == 0x000004, "Wrong alignment on FortSettingControllerInput_GetKeyIndex");
static_assert(sizeof(FortSettingControllerInput_GetKeyIndex) == 0x000004, "Wrong size on FortSettingControllerInput_GetKeyIndex");
static_assert(offsetof(FortSettingControllerInput_GetKeyIndex, ReturnValue) == 0x000000, "Member 'FortSettingControllerInput_GetKeyIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingDetailExtension.OnSettingAssigned
// 0x0008 (0x0008 - 0x0000)
struct FortSettingDetailExtension_OnSettingAssigned final
{
public:
	class UFortSetting*                           InSetting;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingDetailExtension_OnSettingAssigned) == 0x000008, "Wrong alignment on FortSettingDetailExtension_OnSettingAssigned");
static_assert(sizeof(FortSettingDetailExtension_OnSettingAssigned) == 0x000008, "Wrong size on FortSettingDetailExtension_OnSettingAssigned");
static_assert(offsetof(FortSettingDetailExtension_OnSettingAssigned, InSetting) == 0x000000, "Member 'FortSettingDetailExtension_OnSettingAssigned::InSetting' has a wrong offset!");

// Function FortniteUI.FortSettingDetailExtension.OnSettingValueChanged
// 0x0008 (0x0008 - 0x0000)
struct FortSettingDetailExtension_OnSettingValueChanged final
{
public:
	class UFortSetting*                           InSetting;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingDetailExtension_OnSettingValueChanged) == 0x000008, "Wrong alignment on FortSettingDetailExtension_OnSettingValueChanged");
static_assert(sizeof(FortSettingDetailExtension_OnSettingValueChanged) == 0x000008, "Wrong size on FortSettingDetailExtension_OnSettingValueChanged");
static_assert(offsetof(FortSettingDetailExtension_OnSettingValueChanged, InSetting) == 0x000000, "Member 'FortSettingDetailExtension_OnSettingValueChanged::InSetting' has a wrong offset!");

// Function FortniteUI.FortSettingDetailView.GatherDetailExtensions
// 0x0018 (0x0018 - 0x0000)
struct FortSettingDetailView_GatherDetailExtensions final
{
public:
	class UFortSetting*                           InSetting;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingDetailView_GatherDetailExtensions) == 0x000008, "Wrong alignment on FortSettingDetailView_GatherDetailExtensions");
static_assert(sizeof(FortSettingDetailView_GatherDetailExtensions) == 0x000018, "Wrong size on FortSettingDetailView_GatherDetailExtensions");
static_assert(offsetof(FortSettingDetailView_GatherDetailExtensions, InSetting) == 0x000000, "Member 'FortSettingDetailView_GatherDetailExtensions::InSetting' has a wrong offset!");
static_assert(offsetof(FortSettingDetailView_GatherDetailExtensions, ReturnValue) == 0x000008, "Member 'FortSettingDetailView_GatherDetailExtensions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSurvivorSquadStatMatchBase.OnStatMatchUpdated
// 0x0370 (0x0370 - 0x0000)
struct FortSurvivorSquadStatMatchBase_OnStatMatchUpdated final
{
public:
	struct FFortUISurvivorSquadStatMatch          UpdatedMatch;                                      // 0x0000(0x0370)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadStatMatchBase_OnStatMatchUpdated) == 0x000008, "Wrong alignment on FortSurvivorSquadStatMatchBase_OnStatMatchUpdated");
static_assert(sizeof(FortSurvivorSquadStatMatchBase_OnStatMatchUpdated) == 0x000370, "Wrong size on FortSurvivorSquadStatMatchBase_OnStatMatchUpdated");
static_assert(offsetof(FortSurvivorSquadStatMatchBase_OnStatMatchUpdated, UpdatedMatch) == 0x000000, "Member 'FortSurvivorSquadStatMatchBase_OnStatMatchUpdated::UpdatedMatch' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.AllowDynamicResolutionChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_AllowDynamicResolutionChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_AllowDynamicResolutionChanged) == 0x000001, "Wrong alignment on FortSettingsContext_AllowDynamicResolutionChanged");
static_assert(sizeof(FortSettingsContext_AllowDynamicResolutionChanged) == 0x000001, "Wrong size on FortSettingsContext_AllowDynamicResolutionChanged");
static_assert(offsetof(FortSettingsContext_AllowDynamicResolutionChanged, IsChecked) == 0x000000, "Member 'FortSettingsContext_AllowDynamicResolutionChanged::IsChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.AllowLowPowerChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_AllowLowPowerChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_AllowLowPowerChanged) == 0x000001, "Wrong alignment on FortSettingsContext_AllowLowPowerChanged");
static_assert(sizeof(FortSettingsContext_AllowLowPowerChanged) == 0x000001, "Wrong size on FortSettingsContext_AllowLowPowerChanged");
static_assert(offsetof(FortSettingsContext_AllowLowPowerChanged, IsChecked) == 0x000000, "Member 'FortSettingsContext_AllowLowPowerChanged::IsChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.AllowMultithreadedRenderingChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_AllowMultithreadedRenderingChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_AllowMultithreadedRenderingChanged) == 0x000001, "Wrong alignment on FortSettingsContext_AllowMultithreadedRenderingChanged");
static_assert(sizeof(FortSettingsContext_AllowMultithreadedRenderingChanged) == 0x000001, "Wrong size on FortSettingsContext_AllowMultithreadedRenderingChanged");
static_assert(offsetof(FortSettingsContext_AllowMultithreadedRenderingChanged, IsChecked) == 0x000000, "Member 'FortSettingsContext_AllowMultithreadedRenderingChanged::IsChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.AllowVideoPlaybackChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_AllowVideoPlaybackChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_AllowVideoPlaybackChanged) == 0x000001, "Wrong alignment on FortSettingsContext_AllowVideoPlaybackChanged");
static_assert(sizeof(FortSettingsContext_AllowVideoPlaybackChanged) == 0x000001, "Wrong size on FortSettingsContext_AllowVideoPlaybackChanged");
static_assert(offsetof(FortSettingsContext_AllowVideoPlaybackChanged, IsChecked) == 0x000000, "Member 'FortSettingsContext_AllowVideoPlaybackChanged::IsChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.AnonymousCharacterModeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_AnonymousCharacterModeChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_AnonymousCharacterModeChanged) == 0x000001, "Wrong alignment on FortSettingsContext_AnonymousCharacterModeChanged");
static_assert(sizeof(FortSettingsContext_AnonymousCharacterModeChanged) == 0x000001, "Wrong size on FortSettingsContext_AnonymousCharacterModeChanged");
static_assert(offsetof(FortSettingsContext_AnonymousCharacterModeChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_AnonymousCharacterModeChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.AnonymousModeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_AnonymousModeChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_AnonymousModeChanged) == 0x000001, "Wrong alignment on FortSettingsContext_AnonymousModeChanged");
static_assert(sizeof(FortSettingsContext_AnonymousModeChanged) == 0x000001, "Wrong size on FortSettingsContext_AnonymousModeChanged");
static_assert(offsetof(FortSettingsContext_AnonymousModeChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_AnonymousModeChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.AntiAliasingQualityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_AntiAliasingQualityChanged final
{
public:
	int32                                         ButtonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_AntiAliasingQualityChanged) == 0x000004, "Wrong alignment on FortSettingsContext_AntiAliasingQualityChanged");
static_assert(sizeof(FortSettingsContext_AntiAliasingQualityChanged) == 0x000004, "Wrong size on FortSettingsContext_AntiAliasingQualityChanged");
static_assert(offsetof(FortSettingsContext_AntiAliasingQualityChanged, ButtonId) == 0x000000, "Member 'FortSettingsContext_AntiAliasingQualityChanged::ButtonId' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.AutoEquipChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_AutoEquipChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_AutoEquipChanged) == 0x000001, "Wrong alignment on FortSettingsContext_AutoEquipChanged");
static_assert(sizeof(FortSettingsContext_AutoEquipChanged) == 0x000001, "Wrong size on FortSettingsContext_AutoEquipChanged");
static_assert(offsetof(FortSettingsContext_AutoEquipChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_AutoEquipChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.ChatVolumeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_ChatVolumeChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_ChatVolumeChanged) == 0x000004, "Wrong alignment on FortSettingsContext_ChatVolumeChanged");
static_assert(sizeof(FortSettingsContext_ChatVolumeChanged) == 0x000004, "Wrong size on FortSettingsContext_ChatVolumeChanged");
static_assert(offsetof(FortSettingsContext_ChatVolumeChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_ChatVolumeChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.CinematicsVolumeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_CinematicsVolumeChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_CinematicsVolumeChanged) == 0x000004, "Wrong alignment on FortSettingsContext_CinematicsVolumeChanged");
static_assert(sizeof(FortSettingsContext_CinematicsVolumeChanged) == 0x000004, "Wrong size on FortSettingsContext_CinematicsVolumeChanged");
static_assert(offsetof(FortSettingsContext_CinematicsVolumeChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_CinematicsVolumeChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.ConsoleUnlockedFPSChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_ConsoleUnlockedFPSChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_ConsoleUnlockedFPSChanged) == 0x000001, "Wrong alignment on FortSettingsContext_ConsoleUnlockedFPSChanged");
static_assert(sizeof(FortSettingsContext_ConsoleUnlockedFPSChanged) == 0x000001, "Wrong size on FortSettingsContext_ConsoleUnlockedFPSChanged");
static_assert(offsetof(FortSettingsContext_ConsoleUnlockedFPSChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_ConsoleUnlockedFPSChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.DialogVolumeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_DialogVolumeChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_DialogVolumeChanged) == 0x000004, "Wrong alignment on FortSettingsContext_DialogVolumeChanged");
static_assert(sizeof(FortSettingsContext_DialogVolumeChanged) == 0x000004, "Wrong size on FortSettingsContext_DialogVolumeChanged");
static_assert(offsetof(FortSettingsContext_DialogVolumeChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_DialogVolumeChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.EffectsQualityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_EffectsQualityChanged final
{
public:
	int32                                         ButtonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_EffectsQualityChanged) == 0x000004, "Wrong alignment on FortSettingsContext_EffectsQualityChanged");
static_assert(sizeof(FortSettingsContext_EffectsQualityChanged) == 0x000004, "Wrong size on FortSettingsContext_EffectsQualityChanged");
static_assert(offsetof(FortSettingsContext_EffectsQualityChanged, ButtonId) == 0x000000, "Member 'FortSettingsContext_EffectsQualityChanged::ButtonId' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.FirstPersonCameraChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_FirstPersonCameraChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_FirstPersonCameraChanged) == 0x000001, "Wrong alignment on FortSettingsContext_FirstPersonCameraChanged");
static_assert(sizeof(FortSettingsContext_FirstPersonCameraChanged) == 0x000001, "Wrong size on FortSettingsContext_FirstPersonCameraChanged");
static_assert(offsetof(FortSettingsContext_FirstPersonCameraChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_FirstPersonCameraChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.FrameRateLimitChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_FrameRateLimitChanged final
{
public:
	int32                                         FrameRateLimit;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_FrameRateLimitChanged) == 0x000004, "Wrong alignment on FortSettingsContext_FrameRateLimitChanged");
static_assert(sizeof(FortSettingsContext_FrameRateLimitChanged) == 0x000004, "Wrong size on FortSettingsContext_FrameRateLimitChanged");
static_assert(offsetof(FortSettingsContext_FrameRateLimitChanged, FrameRateLimit) == 0x000000, "Member 'FortSettingsContext_FrameRateLimitChanged::FrameRateLimit' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GamepadBuildingMultiplierValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GamepadBuildingMultiplierValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GamepadBuildingMultiplierValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_GamepadBuildingMultiplierValueChanged");
static_assert(sizeof(FortSettingsContext_GamepadBuildingMultiplierValueChanged) == 0x000004, "Wrong size on FortSettingsContext_GamepadBuildingMultiplierValueChanged");
static_assert(offsetof(FortSettingsContext_GamepadBuildingMultiplierValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_GamepadBuildingMultiplierValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GamepadEditModeMultiplierValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GamepadEditModeMultiplierValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GamepadEditModeMultiplierValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_GamepadEditModeMultiplierValueChanged");
static_assert(sizeof(FortSettingsContext_GamepadEditModeMultiplierValueChanged) == 0x000004, "Wrong size on FortSettingsContext_GamepadEditModeMultiplierValueChanged");
static_assert(offsetof(FortSettingsContext_GamepadEditModeMultiplierValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_GamepadEditModeMultiplierValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GamepadLookSensitivityXChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GamepadLookSensitivityXChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GamepadLookSensitivityXChanged) == 0x000004, "Wrong alignment on FortSettingsContext_GamepadLookSensitivityXChanged");
static_assert(sizeof(FortSettingsContext_GamepadLookSensitivityXChanged) == 0x000004, "Wrong size on FortSettingsContext_GamepadLookSensitivityXChanged");
static_assert(offsetof(FortSettingsContext_GamepadLookSensitivityXChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_GamepadLookSensitivityXChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GamepadLookSensitivityYChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GamepadLookSensitivityYChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GamepadLookSensitivityYChanged) == 0x000004, "Wrong alignment on FortSettingsContext_GamepadLookSensitivityYChanged");
static_assert(sizeof(FortSettingsContext_GamepadLookSensitivityYChanged) == 0x000004, "Wrong size on FortSettingsContext_GamepadLookSensitivityYChanged");
static_assert(offsetof(FortSettingsContext_GamepadLookSensitivityYChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_GamepadLookSensitivityYChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GamepadScopedMultiplierValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GamepadScopedMultiplierValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GamepadScopedMultiplierValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_GamepadScopedMultiplierValueChanged");
static_assert(sizeof(FortSettingsContext_GamepadScopedMultiplierValueChanged) == 0x000004, "Wrong size on FortSettingsContext_GamepadScopedMultiplierValueChanged");
static_assert(offsetof(FortSettingsContext_GamepadScopedMultiplierValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_GamepadScopedMultiplierValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GamepadTargetingMultiplierValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GamepadTargetingMultiplierValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GamepadTargetingMultiplierValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_GamepadTargetingMultiplierValueChanged");
static_assert(sizeof(FortSettingsContext_GamepadTargetingMultiplierValueChanged) == 0x000004, "Wrong size on FortSettingsContext_GamepadTargetingMultiplierValueChanged");
static_assert(offsetof(FortSettingsContext_GamepadTargetingMultiplierValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_GamepadTargetingMultiplierValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAimAssistStrength
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetAimAssistStrength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAimAssistStrength) == 0x000004, "Wrong alignment on FortSettingsContext_GetAimAssistStrength");
static_assert(sizeof(FortSettingsContext_GetAimAssistStrength) == 0x000004, "Wrong size on FortSettingsContext_GetAimAssistStrength");
static_assert(offsetof(FortSettingsContext_GetAimAssistStrength, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAimAssistStrength::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAllowDynamicResolution
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAllowDynamicResolution final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAllowDynamicResolution) == 0x000001, "Wrong alignment on FortSettingsContext_GetAllowDynamicResolution");
static_assert(sizeof(FortSettingsContext_GetAllowDynamicResolution) == 0x000001, "Wrong size on FortSettingsContext_GetAllowDynamicResolution");
static_assert(offsetof(FortSettingsContext_GetAllowDynamicResolution, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAllowDynamicResolution::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAllowLowPower
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAllowLowPower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAllowLowPower) == 0x000001, "Wrong alignment on FortSettingsContext_GetAllowLowPower");
static_assert(sizeof(FortSettingsContext_GetAllowLowPower) == 0x000001, "Wrong size on FortSettingsContext_GetAllowLowPower");
static_assert(offsetof(FortSettingsContext_GetAllowLowPower, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAllowLowPower::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAllowMultithreadedRendering
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAllowMultithreadedRendering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAllowMultithreadedRendering) == 0x000001, "Wrong alignment on FortSettingsContext_GetAllowMultithreadedRendering");
static_assert(sizeof(FortSettingsContext_GetAllowMultithreadedRendering) == 0x000001, "Wrong size on FortSettingsContext_GetAllowMultithreadedRendering");
static_assert(offsetof(FortSettingsContext_GetAllowMultithreadedRendering, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAllowMultithreadedRendering::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAllowVideoPlayback
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAllowVideoPlayback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAllowVideoPlayback) == 0x000001, "Wrong alignment on FortSettingsContext_GetAllowVideoPlayback");
static_assert(sizeof(FortSettingsContext_GetAllowVideoPlayback) == 0x000001, "Wrong size on FortSettingsContext_GetAllowVideoPlayback");
static_assert(offsetof(FortSettingsContext_GetAllowVideoPlayback, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAllowVideoPlayback::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAntiAliasingQuality
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetAntiAliasingQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAntiAliasingQuality) == 0x000004, "Wrong alignment on FortSettingsContext_GetAntiAliasingQuality");
static_assert(sizeof(FortSettingsContext_GetAntiAliasingQuality) == 0x000004, "Wrong size on FortSettingsContext_GetAntiAliasingQuality");
static_assert(offsetof(FortSettingsContext_GetAntiAliasingQuality, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAntiAliasingQuality::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetCurrentDisplayResolution
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetCurrentDisplayResolution final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetCurrentDisplayResolution) == 0x000004, "Wrong alignment on FortSettingsContext_GetCurrentDisplayResolution");
static_assert(sizeof(FortSettingsContext_GetCurrentDisplayResolution) == 0x000004, "Wrong size on FortSettingsContext_GetCurrentDisplayResolution");
static_assert(offsetof(FortSettingsContext_GetCurrentDisplayResolution, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetCurrentDisplayResolution::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetCurrentFPS
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetCurrentFPS final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetCurrentFPS) == 0x000004, "Wrong alignment on FortSettingsContext_GetCurrentFPS");
static_assert(sizeof(FortSettingsContext_GetCurrentFPS) == 0x000004, "Wrong size on FortSettingsContext_GetCurrentFPS");
static_assert(offsetof(FortSettingsContext_GetCurrentFPS, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetCurrentFPS::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetCurrentLanguage
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetCurrentLanguage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetCurrentLanguage) == 0x000004, "Wrong alignment on FortSettingsContext_GetCurrentLanguage");
static_assert(sizeof(FortSettingsContext_GetCurrentLanguage) == 0x000004, "Wrong size on FortSettingsContext_GetCurrentLanguage");
static_assert(offsetof(FortSettingsContext_GetCurrentLanguage, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetCurrentLanguage::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetCurrentRegion
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetCurrentRegion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetCurrentRegion) == 0x000004, "Wrong alignment on FortSettingsContext_GetCurrentRegion");
static_assert(sizeof(FortSettingsContext_GetCurrentRegion) == 0x000004, "Wrong size on FortSettingsContext_GetCurrentRegion");
static_assert(offsetof(FortSettingsContext_GetCurrentRegion, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetCurrentRegion::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetDisplayResolutionNames
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetDisplayResolutionNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetDisplayResolutionNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetDisplayResolutionNames");
static_assert(sizeof(FortSettingsContext_GetDisplayResolutionNames) == 0x000010, "Wrong size on FortSettingsContext_GetDisplayResolutionNames");
static_assert(offsetof(FortSettingsContext_GetDisplayResolutionNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetDisplayResolutionNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetEffectsQuality
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetEffectsQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetEffectsQuality) == 0x000004, "Wrong alignment on FortSettingsContext_GetEffectsQuality");
static_assert(sizeof(FortSettingsContext_GetEffectsQuality) == 0x000004, "Wrong size on FortSettingsContext_GetEffectsQuality");
static_assert(offsetof(FortSettingsContext_GetEffectsQuality, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetEffectsQuality::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetFPSNames
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetFPSNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetFPSNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetFPSNames");
static_assert(sizeof(FortSettingsContext_GetFPSNames) == 0x000010, "Wrong size on FortSettingsContext_GetFPSNames");
static_assert(offsetof(FortSettingsContext_GetFPSNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetFPSNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookBoostAccelerationTime
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetLookBoostAccelerationTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookBoostAccelerationTime) == 0x000004, "Wrong alignment on FortSettingsContext_GetLookBoostAccelerationTime");
static_assert(sizeof(FortSettingsContext_GetLookBoostAccelerationTime) == 0x000004, "Wrong size on FortSettingsContext_GetLookBoostAccelerationTime");
static_assert(offsetof(FortSettingsContext_GetLookBoostAccelerationTime, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookBoostAccelerationTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookBoostAccelerationTimeAds
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetLookBoostAccelerationTimeAds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookBoostAccelerationTimeAds) == 0x000004, "Wrong alignment on FortSettingsContext_GetLookBoostAccelerationTimeAds");
static_assert(sizeof(FortSettingsContext_GetLookBoostAccelerationTimeAds) == 0x000004, "Wrong size on FortSettingsContext_GetLookBoostAccelerationTimeAds");
static_assert(offsetof(FortSettingsContext_GetLookBoostAccelerationTimeAds, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookBoostAccelerationTimeAds::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookEaseTime
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetLookEaseTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookEaseTime) == 0x000004, "Wrong alignment on FortSettingsContext_GetLookEaseTime");
static_assert(sizeof(FortSettingsContext_GetLookEaseTime) == 0x000004, "Wrong size on FortSettingsContext_GetLookEaseTime");
static_assert(offsetof(FortSettingsContext_GetLookEaseTime, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookEaseTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookHorizontalBoostSpeed
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetLookHorizontalBoostSpeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookHorizontalBoostSpeed) == 0x000004, "Wrong alignment on FortSettingsContext_GetLookHorizontalBoostSpeed");
static_assert(sizeof(FortSettingsContext_GetLookHorizontalBoostSpeed) == 0x000004, "Wrong size on FortSettingsContext_GetLookHorizontalBoostSpeed");
static_assert(offsetof(FortSettingsContext_GetLookHorizontalBoostSpeed, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookHorizontalBoostSpeed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookHorizontalBoostSpeedAds
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetLookHorizontalBoostSpeedAds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookHorizontalBoostSpeedAds) == 0x000004, "Wrong alignment on FortSettingsContext_GetLookHorizontalBoostSpeedAds");
static_assert(sizeof(FortSettingsContext_GetLookHorizontalBoostSpeedAds) == 0x000004, "Wrong size on FortSettingsContext_GetLookHorizontalBoostSpeedAds");
static_assert(offsetof(FortSettingsContext_GetLookHorizontalBoostSpeedAds, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookHorizontalBoostSpeedAds::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookHorizontalSpeed
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetLookHorizontalSpeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookHorizontalSpeed) == 0x000004, "Wrong alignment on FortSettingsContext_GetLookHorizontalSpeed");
static_assert(sizeof(FortSettingsContext_GetLookHorizontalSpeed) == 0x000004, "Wrong size on FortSettingsContext_GetLookHorizontalSpeed");
static_assert(offsetof(FortSettingsContext_GetLookHorizontalSpeed, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookHorizontalSpeed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookHorizontalSpeedAds
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetLookHorizontalSpeedAds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookHorizontalSpeedAds) == 0x000004, "Wrong alignment on FortSettingsContext_GetLookHorizontalSpeedAds");
static_assert(sizeof(FortSettingsContext_GetLookHorizontalSpeedAds) == 0x000004, "Wrong size on FortSettingsContext_GetLookHorizontalSpeedAds");
static_assert(offsetof(FortSettingsContext_GetLookHorizontalSpeedAds, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookHorizontalSpeedAds::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookSensitivityPreset
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetLookSensitivityPreset final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookSensitivityPreset) == 0x000001, "Wrong alignment on FortSettingsContext_GetLookSensitivityPreset");
static_assert(sizeof(FortSettingsContext_GetLookSensitivityPreset) == 0x000001, "Wrong size on FortSettingsContext_GetLookSensitivityPreset");
static_assert(offsetof(FortSettingsContext_GetLookSensitivityPreset, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookSensitivityPreset::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookSensitivityPresetAds
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetLookSensitivityPresetAds final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookSensitivityPresetAds) == 0x000001, "Wrong alignment on FortSettingsContext_GetLookSensitivityPresetAds");
static_assert(sizeof(FortSettingsContext_GetLookSensitivityPresetAds) == 0x000001, "Wrong size on FortSettingsContext_GetLookSensitivityPresetAds");
static_assert(offsetof(FortSettingsContext_GetLookSensitivityPresetAds, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookSensitivityPresetAds::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookVerticalBoostSpeed
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetLookVerticalBoostSpeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookVerticalBoostSpeed) == 0x000004, "Wrong alignment on FortSettingsContext_GetLookVerticalBoostSpeed");
static_assert(sizeof(FortSettingsContext_GetLookVerticalBoostSpeed) == 0x000004, "Wrong size on FortSettingsContext_GetLookVerticalBoostSpeed");
static_assert(offsetof(FortSettingsContext_GetLookVerticalBoostSpeed, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookVerticalBoostSpeed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookVerticalBoostSpeedAds
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetLookVerticalBoostSpeedAds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookVerticalBoostSpeedAds) == 0x000004, "Wrong alignment on FortSettingsContext_GetLookVerticalBoostSpeedAds");
static_assert(sizeof(FortSettingsContext_GetLookVerticalBoostSpeedAds) == 0x000004, "Wrong size on FortSettingsContext_GetLookVerticalBoostSpeedAds");
static_assert(offsetof(FortSettingsContext_GetLookVerticalBoostSpeedAds, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookVerticalBoostSpeedAds::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookVerticalSpeed
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetLookVerticalSpeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookVerticalSpeed) == 0x000004, "Wrong alignment on FortSettingsContext_GetLookVerticalSpeed");
static_assert(sizeof(FortSettingsContext_GetLookVerticalSpeed) == 0x000004, "Wrong size on FortSettingsContext_GetLookVerticalSpeed");
static_assert(offsetof(FortSettingsContext_GetLookVerticalSpeed, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookVerticalSpeed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLookVerticalSpeedAds
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetLookVerticalSpeedAds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLookVerticalSpeedAds) == 0x000004, "Wrong alignment on FortSettingsContext_GetLookVerticalSpeedAds");
static_assert(sizeof(FortSettingsContext_GetLookVerticalSpeedAds) == 0x000004, "Wrong size on FortSettingsContext_GetLookVerticalSpeedAds");
static_assert(offsetof(FortSettingsContext_GetLookVerticalSpeedAds, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLookVerticalSpeedAds::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMobileFPSMode
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetMobileFPSMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMobileFPSMode) == 0x000004, "Wrong alignment on FortSettingsContext_GetMobileFPSMode");
static_assert(sizeof(FortSettingsContext_GetMobileFPSMode) == 0x000004, "Wrong size on FortSettingsContext_GetMobileFPSMode");
static_assert(offsetof(FortSettingsContext_GetMobileFPSMode, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMobileFPSMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMobileFPSTypeNames
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetMobileFPSTypeNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMobileFPSTypeNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetMobileFPSTypeNames");
static_assert(sizeof(FortSettingsContext_GetMobileFPSTypeNames) == 0x000010, "Wrong size on FortSettingsContext_GetMobileFPSTypeNames");
static_assert(offsetof(FortSettingsContext_GetMobileFPSTypeNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMobileFPSTypeNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMotionAxisNames
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetMotionAxisNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMotionAxisNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetMotionAxisNames");
static_assert(sizeof(FortSettingsContext_GetMotionAxisNames) == 0x000010, "Wrong size on FortSettingsContext_GetMotionAxisNames");
static_assert(offsetof(FortSettingsContext_GetMotionAxisNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMotionAxisNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMotionBlur
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetMotionBlur final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMotionBlur) == 0x000001, "Wrong alignment on FortSettingsContext_GetMotionBlur");
static_assert(sizeof(FortSettingsContext_GetMotionBlur) == 0x000001, "Wrong size on FortSettingsContext_GetMotionBlur");
static_assert(offsetof(FortSettingsContext_GetMotionBlur, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMotionBlur::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetOverallQualityLevel
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetOverallQualityLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetOverallQualityLevel) == 0x000004, "Wrong alignment on FortSettingsContext_GetOverallQualityLevel");
static_assert(sizeof(FortSettingsContext_GetOverallQualityLevel) == 0x000004, "Wrong size on FortSettingsContext_GetOverallQualityLevel");
static_assert(offsetof(FortSettingsContext_GetOverallQualityLevel, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetOverallQualityLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetPossibleLanguages
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetPossibleLanguages final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetPossibleLanguages) == 0x000008, "Wrong alignment on FortSettingsContext_GetPossibleLanguages");
static_assert(sizeof(FortSettingsContext_GetPossibleLanguages) == 0x000010, "Wrong size on FortSettingsContext_GetPossibleLanguages");
static_assert(offsetof(FortSettingsContext_GetPossibleLanguages, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetPossibleLanguages::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetPostProcessQuality
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetPostProcessQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetPostProcessQuality) == 0x000004, "Wrong alignment on FortSettingsContext_GetPostProcessQuality");
static_assert(sizeof(FortSettingsContext_GetPostProcessQuality) == 0x000004, "Wrong size on FortSettingsContext_GetPostProcessQuality");
static_assert(offsetof(FortSettingsContext_GetPostProcessQuality, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetPostProcessQuality::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetQualityLowNames
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetQualityLowNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetQualityLowNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetQualityLowNames");
static_assert(sizeof(FortSettingsContext_GetQualityLowNames) == 0x000010, "Wrong size on FortSettingsContext_GetQualityLowNames");
static_assert(offsetof(FortSettingsContext_GetQualityLowNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetQualityLowNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetQualityNames
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetQualityNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetQualityNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetQualityNames");
static_assert(sizeof(FortSettingsContext_GetQualityNames) == 0x000010, "Wrong size on FortSettingsContext_GetQualityNames");
static_assert(offsetof(FortSettingsContext_GetQualityNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetQualityNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetQualityOffNames
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetQualityOffNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetQualityOffNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetQualityOffNames");
static_assert(sizeof(FortSettingsContext_GetQualityOffNames) == 0x000010, "Wrong size on FortSettingsContext_GetQualityOffNames");
static_assert(offsetof(FortSettingsContext_GetQualityOffNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetQualityOffNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetRegionDisplayNames
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetRegionDisplayNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetRegionDisplayNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetRegionDisplayNames");
static_assert(sizeof(FortSettingsContext_GetRegionDisplayNames) == 0x000010, "Wrong size on FortSettingsContext_GetRegionDisplayNames");
static_assert(offsetof(FortSettingsContext_GetRegionDisplayNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetRegionDisplayNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetRotatorSettingValue
// 0x0008 (0x0008 - 0x0000)
struct FortSettingsContext_GetRotatorSettingValue final
{
public:
	ESettingType                                  InSettingType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetRotatorSettingValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetRotatorSettingValue");
static_assert(sizeof(FortSettingsContext_GetRotatorSettingValue) == 0x000008, "Wrong size on FortSettingsContext_GetRotatorSettingValue");
static_assert(offsetof(FortSettingsContext_GetRotatorSettingValue, InSettingType) == 0x000000, "Member 'FortSettingsContext_GetRotatorSettingValue::InSettingType' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_GetRotatorSettingValue, ReturnValue) == 0x000004, "Member 'FortSettingsContext_GetRotatorSettingValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetSafeZoneValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetSafeZoneValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetSafeZoneValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetSafeZoneValue");
static_assert(sizeof(FortSettingsContext_GetSafeZoneValue) == 0x000004, "Wrong size on FortSettingsContext_GetSafeZoneValue");
static_assert(offsetof(FortSettingsContext_GetSafeZoneValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetSafeZoneValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetSettingDisplayNames
// 0x0018 (0x0018 - 0x0000)
struct FortSettingsContext_GetSettingDisplayNames final
{
public:
	ESettingType                                  InSettingType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetSettingDisplayNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetSettingDisplayNames");
static_assert(sizeof(FortSettingsContext_GetSettingDisplayNames) == 0x000018, "Wrong size on FortSettingsContext_GetSettingDisplayNames");
static_assert(offsetof(FortSettingsContext_GetSettingDisplayNames, InSettingType) == 0x000000, "Member 'FortSettingsContext_GetSettingDisplayNames::InSettingType' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_GetSettingDisplayNames, ReturnValue) == 0x000008, "Member 'FortSettingsContext_GetSettingDisplayNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetSettingValueInRange
// 0x000C (0x000C - 0x0000)
struct FortSettingsContext_GetSettingValueInRange final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingType                                  InSettingType;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingTab                                   InSettingTab;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetSettingValueInRange) == 0x000004, "Wrong alignment on FortSettingsContext_GetSettingValueInRange");
static_assert(sizeof(FortSettingsContext_GetSettingValueInRange) == 0x00000C, "Wrong size on FortSettingsContext_GetSettingValueInRange");
static_assert(offsetof(FortSettingsContext_GetSettingValueInRange, Value) == 0x000000, "Member 'FortSettingsContext_GetSettingValueInRange::Value' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_GetSettingValueInRange, InSettingType) == 0x000004, "Member 'FortSettingsContext_GetSettingValueInRange::InSettingType' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_GetSettingValueInRange, InSettingTab) == 0x000005, "Member 'FortSettingsContext_GetSettingValueInRange::InSettingTab' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_GetSettingValueInRange, ReturnValue) == 0x000008, "Member 'FortSettingsContext_GetSettingValueInRange::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetShadowQuality
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetShadowQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetShadowQuality) == 0x000004, "Wrong alignment on FortSettingsContext_GetShadowQuality");
static_assert(sizeof(FortSettingsContext_GetShadowQuality) == 0x000004, "Wrong size on FortSettingsContext_GetShadowQuality");
static_assert(offsetof(FortSettingsContext_GetShadowQuality, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetShadowQuality::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetShowFPS
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetShowFPS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetShowFPS) == 0x000001, "Wrong alignment on FortSettingsContext_GetShowFPS");
static_assert(sizeof(FortSettingsContext_GetShowFPS) == 0x000001, "Wrong size on FortSettingsContext_GetShowFPS");
static_assert(offsetof(FortSettingsContext_GetShowFPS, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetShowFPS::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetShowGrass
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetShowGrass final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetShowGrass) == 0x000001, "Wrong alignment on FortSettingsContext_GetShowGrass");
static_assert(sizeof(FortSettingsContext_GetShowGrass) == 0x000001, "Wrong size on FortSettingsContext_GetShowGrass");
static_assert(offsetof(FortSettingsContext_GetShowGrass, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetShowGrass::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetShowTemperature
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetShowTemperature final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetShowTemperature) == 0x000001, "Wrong alignment on FortSettingsContext_GetShowTemperature");
static_assert(sizeof(FortSettingsContext_GetShowTemperature) == 0x000001, "Wrong size on FortSettingsContext_GetShowTemperature");
static_assert(offsetof(FortSettingsContext_GetShowTemperature, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetShowTemperature::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetSliderSettingValue
// 0x0008 (0x0008 - 0x0000)
struct FortSettingsContext_GetSliderSettingValue final
{
public:
	ESettingType                                  InSettingType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetSliderSettingValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetSliderSettingValue");
static_assert(sizeof(FortSettingsContext_GetSliderSettingValue) == 0x000008, "Wrong size on FortSettingsContext_GetSliderSettingValue");
static_assert(offsetof(FortSettingsContext_GetSliderSettingValue, InSettingType) == 0x000000, "Member 'FortSettingsContext_GetSliderSettingValue::InSettingType' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_GetSliderSettingValue, ReturnValue) == 0x000004, "Member 'FortSettingsContext_GetSliderSettingValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetStabilizeLookInput
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetStabilizeLookInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetStabilizeLookInput) == 0x000001, "Wrong alignment on FortSettingsContext_GetStabilizeLookInput");
static_assert(sizeof(FortSettingsContext_GetStabilizeLookInput) == 0x000001, "Wrong size on FortSettingsContext_GetStabilizeLookInput");
static_assert(offsetof(FortSettingsContext_GetStabilizeLookInput, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetStabilizeLookInput::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetTextureQuality
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetTextureQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetTextureQuality) == 0x000004, "Wrong alignment on FortSettingsContext_GetTextureQuality");
static_assert(sizeof(FortSettingsContext_GetTextureQuality) == 0x000004, "Wrong size on FortSettingsContext_GetTextureQuality");
static_assert(offsetof(FortSettingsContext_GetTextureQuality, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetTextureQuality::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetThreeDResolution
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetThreeDResolution final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetThreeDResolution) == 0x000004, "Wrong alignment on FortSettingsContext_GetThreeDResolution");
static_assert(sizeof(FortSettingsContext_GetThreeDResolution) == 0x000004, "Wrong size on FortSettingsContext_GetThreeDResolution");
static_assert(offsetof(FortSettingsContext_GetThreeDResolution, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetThreeDResolution::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetUseAdvanceOptions
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetUseAdvanceOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetUseAdvanceOptions) == 0x000001, "Wrong alignment on FortSettingsContext_GetUseAdvanceOptions");
static_assert(sizeof(FortSettingsContext_GetUseAdvanceOptions) == 0x000001, "Wrong size on FortSettingsContext_GetUseAdvanceOptions");
static_assert(offsetof(FortSettingsContext_GetUseAdvanceOptions, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetUseAdvanceOptions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetUseLegacyControls
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetUseLegacyControls final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetUseLegacyControls) == 0x000001, "Wrong alignment on FortSettingsContext_GetUseLegacyControls");
static_assert(sizeof(FortSettingsContext_GetUseLegacyControls) == 0x000001, "Wrong size on FortSettingsContext_GetUseLegacyControls");
static_assert(offsetof(FortSettingsContext_GetUseLegacyControls, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetUseLegacyControls::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetUseRadialLookRates
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetUseRadialLookRates final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetUseRadialLookRates) == 0x000001, "Wrong alignment on FortSettingsContext_GetUseRadialLookRates");
static_assert(sizeof(FortSettingsContext_GetUseRadialLookRates) == 0x000001, "Wrong size on FortSettingsContext_GetUseRadialLookRates");
static_assert(offsetof(FortSettingsContext_GetUseRadialLookRates, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetUseRadialLookRates::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetUseVsync
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetUseVsync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetUseVsync) == 0x000001, "Wrong alignment on FortSettingsContext_GetUseVsync");
static_assert(sizeof(FortSettingsContext_GetUseVsync) == 0x000001, "Wrong size on FortSettingsContext_GetUseVsync");
static_assert(offsetof(FortSettingsContext_GetUseVsync, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetUseVsync::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetViewDistanceNames
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetViewDistanceNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetViewDistanceNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetViewDistanceNames");
static_assert(sizeof(FortSettingsContext_GetViewDistanceNames) == 0x000010, "Wrong size on FortSettingsContext_GetViewDistanceNames");
static_assert(offsetof(FortSettingsContext_GetViewDistanceNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetViewDistanceNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetViewDistanceQuality
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetViewDistanceQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetViewDistanceQuality) == 0x000004, "Wrong alignment on FortSettingsContext_GetViewDistanceQuality");
static_assert(sizeof(FortSettingsContext_GetViewDistanceQuality) == 0x000004, "Wrong size on FortSettingsContext_GetViewDistanceQuality");
static_assert(offsetof(FortSettingsContext_GetViewDistanceQuality, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetViewDistanceQuality::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetVoiceChatInputDevice
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetVoiceChatInputDevice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetVoiceChatInputDevice) == 0x000004, "Wrong alignment on FortSettingsContext_GetVoiceChatInputDevice");
static_assert(sizeof(FortSettingsContext_GetVoiceChatInputDevice) == 0x000004, "Wrong size on FortSettingsContext_GetVoiceChatInputDevice");
static_assert(offsetof(FortSettingsContext_GetVoiceChatInputDevice, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetVoiceChatInputDevice::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetVoiceChatOutputDevice
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetVoiceChatOutputDevice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetVoiceChatOutputDevice) == 0x000004, "Wrong alignment on FortSettingsContext_GetVoiceChatOutputDevice");
static_assert(sizeof(FortSettingsContext_GetVoiceChatOutputDevice) == 0x000004, "Wrong size on FortSettingsContext_GetVoiceChatOutputDevice");
static_assert(offsetof(FortSettingsContext_GetVoiceChatOutputDevice, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetVoiceChatOutputDevice::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetWindowModeNames
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetWindowModeNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetWindowModeNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetWindowModeNames");
static_assert(sizeof(FortSettingsContext_GetWindowModeNames) == 0x000010, "Wrong size on FortSettingsContext_GetWindowModeNames");
static_assert(offsetof(FortSettingsContext_GetWindowModeNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetWindowModeNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GyroSensitivityValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GyroSensitivityValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GyroSensitivityValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_GyroSensitivityValueChanged");
static_assert(sizeof(FortSettingsContext_GyroSensitivityValueChanged) == 0x000004, "Wrong size on FortSettingsContext_GyroSensitivityValueChanged");
static_assert(offsetof(FortSettingsContext_GyroSensitivityValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_GyroSensitivityValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.HiddenMatchmakingDelayMaxChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_HiddenMatchmakingDelayMaxChanged final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_HiddenMatchmakingDelayMaxChanged) == 0x000004, "Wrong alignment on FortSettingsContext_HiddenMatchmakingDelayMaxChanged");
static_assert(sizeof(FortSettingsContext_HiddenMatchmakingDelayMaxChanged) == 0x000004, "Wrong size on FortSettingsContext_HiddenMatchmakingDelayMaxChanged");
static_assert(offsetof(FortSettingsContext_HiddenMatchmakingDelayMaxChanged, InValue) == 0x000000, "Member 'FortSettingsContext_HiddenMatchmakingDelayMaxChanged::InValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.HideOtherPlayerNamesChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_HideOtherPlayerNamesChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_HideOtherPlayerNamesChanged) == 0x000001, "Wrong alignment on FortSettingsContext_HideOtherPlayerNamesChanged");
static_assert(sizeof(FortSettingsContext_HideOtherPlayerNamesChanged) == 0x000001, "Wrong size on FortSettingsContext_HideOtherPlayerNamesChanged");
static_assert(offsetof(FortSettingsContext_HideOtherPlayerNamesChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_HideOtherPlayerNamesChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.HoldToSwapPickupChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_HoldToSwapPickupChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_HoldToSwapPickupChanged) == 0x000001, "Wrong alignment on FortSettingsContext_HoldToSwapPickupChanged");
static_assert(sizeof(FortSettingsContext_HoldToSwapPickupChanged) == 0x000001, "Wrong size on FortSettingsContext_HoldToSwapPickupChanged");
static_assert(offsetof(FortSettingsContext_HoldToSwapPickupChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_HoldToSwapPickupChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.LanguageChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_LanguageChanged final
{
public:
	int32                                         NewMode;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_LanguageChanged) == 0x000004, "Wrong alignment on FortSettingsContext_LanguageChanged");
static_assert(sizeof(FortSettingsContext_LanguageChanged) == 0x000004, "Wrong size on FortSettingsContext_LanguageChanged");
static_assert(offsetof(FortSettingsContext_LanguageChanged, NewMode) == 0x000000, "Member 'FortSettingsContext_LanguageChanged::NewMode' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.MobileFPSModeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_MobileFPSModeChanged final
{
public:
	int32                                         FPSMode;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_MobileFPSModeChanged) == 0x000004, "Wrong alignment on FortSettingsContext_MobileFPSModeChanged");
static_assert(sizeof(FortSettingsContext_MobileFPSModeChanged) == 0x000004, "Wrong size on FortSettingsContext_MobileFPSModeChanged");
static_assert(offsetof(FortSettingsContext_MobileFPSModeChanged, FPSMode) == 0x000000, "Member 'FortSettingsContext_MobileFPSModeChanged::FPSMode' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.MotionAxisValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_MotionAxisValueChanged final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_MotionAxisValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_MotionAxisValueChanged");
static_assert(sizeof(FortSettingsContext_MotionAxisValueChanged) == 0x000004, "Wrong size on FortSettingsContext_MotionAxisValueChanged");
static_assert(offsetof(FortSettingsContext_MotionAxisValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_MotionAxisValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.MotionBlurChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_MotionBlurChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_MotionBlurChanged) == 0x000001, "Wrong alignment on FortSettingsContext_MotionBlurChanged");
static_assert(sizeof(FortSettingsContext_MotionBlurChanged) == 0x000001, "Wrong size on FortSettingsContext_MotionBlurChanged");
static_assert(offsetof(FortSettingsContext_MotionBlurChanged, IsChecked) == 0x000000, "Member 'FortSettingsContext_MotionBlurChanged::IsChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.MotionControlEnabledValueChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_MotionControlEnabledValueChanged final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_MotionControlEnabledValueChanged) == 0x000001, "Wrong alignment on FortSettingsContext_MotionControlEnabledValueChanged");
static_assert(sizeof(FortSettingsContext_MotionControlEnabledValueChanged) == 0x000001, "Wrong size on FortSettingsContext_MotionControlEnabledValueChanged");
static_assert(offsetof(FortSettingsContext_MotionControlEnabledValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_MotionControlEnabledValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.MotionHarvestingToolMultiplierValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_MotionHarvestingToolMultiplierValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_MotionHarvestingToolMultiplierValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_MotionHarvestingToolMultiplierValueChanged");
static_assert(sizeof(FortSettingsContext_MotionHarvestingToolMultiplierValueChanged) == 0x000004, "Wrong size on FortSettingsContext_MotionHarvestingToolMultiplierValueChanged");
static_assert(offsetof(FortSettingsContext_MotionHarvestingToolMultiplierValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_MotionHarvestingToolMultiplierValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.MotionScopedMultiplierValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_MotionScopedMultiplierValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_MotionScopedMultiplierValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_MotionScopedMultiplierValueChanged");
static_assert(sizeof(FortSettingsContext_MotionScopedMultiplierValueChanged) == 0x000004, "Wrong size on FortSettingsContext_MotionScopedMultiplierValueChanged");
static_assert(offsetof(FortSettingsContext_MotionScopedMultiplierValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_MotionScopedMultiplierValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.MotionTargetingMultiplierValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_MotionTargetingMultiplierValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_MotionTargetingMultiplierValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_MotionTargetingMultiplierValueChanged");
static_assert(sizeof(FortSettingsContext_MotionTargetingMultiplierValueChanged) == 0x000004, "Wrong size on FortSettingsContext_MotionTargetingMultiplierValueChanged");
static_assert(offsetof(FortSettingsContext_MotionTargetingMultiplierValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_MotionTargetingMultiplierValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.MouseSensitivityMultiplierForAircraftChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_MouseSensitivityMultiplierForAircraftChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_MouseSensitivityMultiplierForAircraftChanged) == 0x000004, "Wrong alignment on FortSettingsContext_MouseSensitivityMultiplierForAircraftChanged");
static_assert(sizeof(FortSettingsContext_MouseSensitivityMultiplierForAircraftChanged) == 0x000004, "Wrong size on FortSettingsContext_MouseSensitivityMultiplierForAircraftChanged");
static_assert(offsetof(FortSettingsContext_MouseSensitivityMultiplierForAircraftChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_MouseSensitivityMultiplierForAircraftChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.MouseSensitivityXChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_MouseSensitivityXChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_MouseSensitivityXChanged) == 0x000004, "Wrong alignment on FortSettingsContext_MouseSensitivityXChanged");
static_assert(sizeof(FortSettingsContext_MouseSensitivityXChanged) == 0x000004, "Wrong size on FortSettingsContext_MouseSensitivityXChanged");
static_assert(offsetof(FortSettingsContext_MouseSensitivityXChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_MouseSensitivityXChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.MouseSensitivityYChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_MouseSensitivityYChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_MouseSensitivityYChanged) == 0x000004, "Wrong alignment on FortSettingsContext_MouseSensitivityYChanged");
static_assert(sizeof(FortSettingsContext_MouseSensitivityYChanged) == 0x000004, "Wrong size on FortSettingsContext_MouseSensitivityYChanged");
static_assert(offsetof(FortSettingsContext_MouseSensitivityYChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_MouseSensitivityYChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.MusicVolumeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_MusicVolumeChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_MusicVolumeChanged) == 0x000004, "Wrong alignment on FortSettingsContext_MusicVolumeChanged");
static_assert(sizeof(FortSettingsContext_MusicVolumeChanged) == 0x000004, "Wrong size on FortSettingsContext_MusicVolumeChanged");
static_assert(offsetof(FortSettingsContext_MusicVolumeChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_MusicVolumeChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.NotifyUsersWhenPlayingChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_NotifyUsersWhenPlayingChanged final
{
public:
	bool                                          bNotify;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_NotifyUsersWhenPlayingChanged) == 0x000001, "Wrong alignment on FortSettingsContext_NotifyUsersWhenPlayingChanged");
static_assert(sizeof(FortSettingsContext_NotifyUsersWhenPlayingChanged) == 0x000001, "Wrong size on FortSettingsContext_NotifyUsersWhenPlayingChanged");
static_assert(offsetof(FortSettingsContext_NotifyUsersWhenPlayingChanged, bNotify) == 0x000000, "Member 'FortSettingsContext_NotifyUsersWhenPlayingChanged::bNotify' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnAimAssistChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnAimAssistChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnAimAssistChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnAimAssistChanged");
static_assert(sizeof(FortSettingsContext_OnAimAssistChanged) == 0x000001, "Wrong size on FortSettingsContext_OnAimAssistChanged");
static_assert(offsetof(FortSettingsContext_OnAimAssistChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnAimAssistChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnAimAssistReset
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnAimAssistReset final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnAimAssistReset) == 0x000001, "Wrong alignment on FortSettingsContext_OnAimAssistReset");
static_assert(sizeof(FortSettingsContext_OnAimAssistReset) == 0x000001, "Wrong size on FortSettingsContext_OnAimAssistReset");
static_assert(offsetof(FortSettingsContext_OnAimAssistReset, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnAimAssistReset::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnAutoChangeMaterialChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnAutoChangeMaterialChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnAutoChangeMaterialChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnAutoChangeMaterialChanged");
static_assert(sizeof(FortSettingsContext_OnAutoChangeMaterialChanged) == 0x000001, "Wrong size on FortSettingsContext_OnAutoChangeMaterialChanged");
static_assert(offsetof(FortSettingsContext_OnAutoChangeMaterialChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnAutoChangeMaterialChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnAutoChangeMaterialReset
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnAutoChangeMaterialReset final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnAutoChangeMaterialReset) == 0x000001, "Wrong alignment on FortSettingsContext_OnAutoChangeMaterialReset");
static_assert(sizeof(FortSettingsContext_OnAutoChangeMaterialReset) == 0x000001, "Wrong size on FortSettingsContext_OnAutoChangeMaterialReset");
static_assert(offsetof(FortSettingsContext_OnAutoChangeMaterialReset, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnAutoChangeMaterialReset::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnAutoOpenDoorsChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnAutoOpenDoorsChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnAutoOpenDoorsChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnAutoOpenDoorsChanged");
static_assert(sizeof(FortSettingsContext_OnAutoOpenDoorsChanged) == 0x000001, "Wrong size on FortSettingsContext_OnAutoOpenDoorsChanged");
static_assert(offsetof(FortSettingsContext_OnAutoOpenDoorsChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnAutoOpenDoorsChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnAutoPickupWeaponsChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnAutoPickupWeaponsChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnAutoPickupWeaponsChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnAutoPickupWeaponsChanged");
static_assert(sizeof(FortSettingsContext_OnAutoPickupWeaponsChanged) == 0x000001, "Wrong size on FortSettingsContext_OnAutoPickupWeaponsChanged");
static_assert(offsetof(FortSettingsContext_OnAutoPickupWeaponsChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnAutoPickupWeaponsChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnAutoPickupWeaponsConsolePCChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnAutoPickupWeaponsConsolePCChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnAutoPickupWeaponsConsolePCChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnAutoPickupWeaponsConsolePCChanged");
static_assert(sizeof(FortSettingsContext_OnAutoPickupWeaponsConsolePCChanged) == 0x000001, "Wrong size on FortSettingsContext_OnAutoPickupWeaponsConsolePCChanged");
static_assert(offsetof(FortSettingsContext_OnAutoPickupWeaponsConsolePCChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnAutoPickupWeaponsConsolePCChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnAutoSortConsumablesToRightChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnAutoSortConsumablesToRightChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnAutoSortConsumablesToRightChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnAutoSortConsumablesToRightChanged");
static_assert(sizeof(FortSettingsContext_OnAutoSortConsumablesToRightChanged) == 0x000001, "Wrong size on FortSettingsContext_OnAutoSortConsumablesToRightChanged");
static_assert(offsetof(FortSettingsContext_OnAutoSortConsumablesToRightChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnAutoSortConsumablesToRightChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnCreativeModeReplayRecordingPreferenceChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnCreativeModeReplayRecordingPreferenceChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnCreativeModeReplayRecordingPreferenceChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnCreativeModeReplayRecordingPreferenceChanged");
static_assert(sizeof(FortSettingsContext_OnCreativeModeReplayRecordingPreferenceChanged) == 0x000001, "Wrong size on FortSettingsContext_OnCreativeModeReplayRecordingPreferenceChanged");
static_assert(offsetof(FortSettingsContext_OnCreativeModeReplayRecordingPreferenceChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnCreativeModeReplayRecordingPreferenceChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnCreativeTurboDeleteChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnCreativeTurboDeleteChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnCreativeTurboDeleteChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnCreativeTurboDeleteChanged");
static_assert(sizeof(FortSettingsContext_OnCreativeTurboDeleteChanged) == 0x000001, "Wrong size on FortSettingsContext_OnCreativeTurboDeleteChanged");
static_assert(offsetof(FortSettingsContext_OnCreativeTurboDeleteChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnCreativeTurboDeleteChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnCreativeTurboDeleteReset
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnCreativeTurboDeleteReset final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnCreativeTurboDeleteReset) == 0x000001, "Wrong alignment on FortSettingsContext_OnCreativeTurboDeleteReset");
static_assert(sizeof(FortSettingsContext_OnCreativeTurboDeleteReset) == 0x000001, "Wrong size on FortSettingsContext_OnCreativeTurboDeleteReset");
static_assert(offsetof(FortSettingsContext_OnCreativeTurboDeleteReset, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnCreativeTurboDeleteReset::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnCrossplayPreferenceChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnCrossplayPreferenceChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnCrossplayPreferenceChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnCrossplayPreferenceChanged");
static_assert(sizeof(FortSettingsContext_OnCrossplayPreferenceChanged) == 0x000001, "Wrong size on FortSettingsContext_OnCrossplayPreferenceChanged");
static_assert(offsetof(FortSettingsContext_OnCrossplayPreferenceChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnCrossplayPreferenceChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnEditButtonHoldTimeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_OnEditButtonHoldTimeChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnEditButtonHoldTimeChanged) == 0x000004, "Wrong alignment on FortSettingsContext_OnEditButtonHoldTimeChanged");
static_assert(sizeof(FortSettingsContext_OnEditButtonHoldTimeChanged) == 0x000004, "Wrong size on FortSettingsContext_OnEditButtonHoldTimeChanged");
static_assert(offsetof(FortSettingsContext_OnEditButtonHoldTimeChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_OnEditButtonHoldTimeChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnEditModeAimAssistChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnEditModeAimAssistChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnEditModeAimAssistChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnEditModeAimAssistChanged");
static_assert(sizeof(FortSettingsContext_OnEditModeAimAssistChanged) == 0x000001, "Wrong size on FortSettingsContext_OnEditModeAimAssistChanged");
static_assert(offsetof(FortSettingsContext_OnEditModeAimAssistChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnEditModeAimAssistChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnEnableTryBuildOnFocusChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnEnableTryBuildOnFocusChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnEnableTryBuildOnFocusChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnEnableTryBuildOnFocusChanged");
static_assert(sizeof(FortSettingsContext_OnEnableTryBuildOnFocusChanged) == 0x000001, "Wrong size on FortSettingsContext_OnEnableTryBuildOnFocusChanged");
static_assert(offsetof(FortSettingsContext_OnEnableTryBuildOnFocusChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnEnableTryBuildOnFocusChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChanged");
static_assert(sizeof(FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChanged) == 0x000001, "Wrong size on FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChanged");
static_assert(offsetof(FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChangedAthena
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChangedAthena final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChangedAthena) == 0x000001, "Wrong alignment on FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChangedAthena");
static_assert(sizeof(FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChangedAthena) == 0x000001, "Wrong size on FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChangedAthena");
static_assert(offsetof(FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChangedAthena, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChangedAthena::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnForceFeedbackChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnForceFeedbackChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnForceFeedbackChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnForceFeedbackChanged");
static_assert(sizeof(FortSettingsContext_OnForceFeedbackChanged) == 0x000001, "Wrong size on FortSettingsContext_OnForceFeedbackChanged");
static_assert(offsetof(FortSettingsContext_OnForceFeedbackChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnForceFeedbackChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnGamepadAutoRunChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnGamepadAutoRunChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnGamepadAutoRunChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnGamepadAutoRunChanged");
static_assert(sizeof(FortSettingsContext_OnGamepadAutoRunChanged) == 0x000001, "Wrong size on FortSettingsContext_OnGamepadAutoRunChanged");
static_assert(offsetof(FortSettingsContext_OnGamepadAutoRunChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnGamepadAutoRunChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnHUDScaleChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_OnHUDScaleChanged final
{
public:
	float                                         bInHUDScale;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnHUDScaleChanged) == 0x000004, "Wrong alignment on FortSettingsContext_OnHUDScaleChanged");
static_assert(sizeof(FortSettingsContext_OnHUDScaleChanged) == 0x000004, "Wrong size on FortSettingsContext_OnHUDScaleChanged");
static_assert(offsetof(FortSettingsContext_OnHUDScaleChanged, bInHUDScale) == 0x000000, "Member 'FortSettingsContext_OnHUDScaleChanged::bInHUDScale' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnLargeTeamsReplayRecordingPreferenceChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnLargeTeamsReplayRecordingPreferenceChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnLargeTeamsReplayRecordingPreferenceChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnLargeTeamsReplayRecordingPreferenceChanged");
static_assert(sizeof(FortSettingsContext_OnLargeTeamsReplayRecordingPreferenceChanged) == 0x000001, "Wrong size on FortSettingsContext_OnLargeTeamsReplayRecordingPreferenceChanged");
static_assert(offsetof(FortSettingsContext_OnLargeTeamsReplayRecordingPreferenceChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnLargeTeamsReplayRecordingPreferenceChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnPlaceDangerMarkerWhenTargetingChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnPlaceDangerMarkerWhenTargetingChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnPlaceDangerMarkerWhenTargetingChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnPlaceDangerMarkerWhenTargetingChanged");
static_assert(sizeof(FortSettingsContext_OnPlaceDangerMarkerWhenTargetingChanged) == 0x000001, "Wrong size on FortSettingsContext_OnPlaceDangerMarkerWhenTargetingChanged");
static_assert(offsetof(FortSettingsContext_OnPlaceDangerMarkerWhenTargetingChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnPlaceDangerMarkerWhenTargetingChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnPlayerSurveysAllowedChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnPlayerSurveysAllowedChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnPlayerSurveysAllowedChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnPlayerSurveysAllowedChanged");
static_assert(sizeof(FortSettingsContext_OnPlayerSurveysAllowedChanged) == 0x000001, "Wrong size on FortSettingsContext_OnPlayerSurveysAllowedChanged");
static_assert(offsetof(FortSettingsContext_OnPlayerSurveysAllowedChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnPlayerSurveysAllowedChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnQualitySelectorChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_OnQualitySelectorChanged final
{
public:
	int32                                         ValueRef;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnQualitySelectorChanged) == 0x000004, "Wrong alignment on FortSettingsContext_OnQualitySelectorChanged");
static_assert(sizeof(FortSettingsContext_OnQualitySelectorChanged) == 0x000004, "Wrong size on FortSettingsContext_OnQualitySelectorChanged");
static_assert(offsetof(FortSettingsContext_OnQualitySelectorChanged, ValueRef) == 0x000000, "Member 'FortSettingsContext_OnQualitySelectorChanged::ValueRef' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnReplayRecordingPreferenceChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnReplayRecordingPreferenceChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnReplayRecordingPreferenceChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnReplayRecordingPreferenceChanged");
static_assert(sizeof(FortSettingsContext_OnReplayRecordingPreferenceChanged) == 0x000001, "Wrong size on FortSettingsContext_OnReplayRecordingPreferenceChanged");
static_assert(offsetof(FortSettingsContext_OnReplayRecordingPreferenceChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnReplayRecordingPreferenceChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnShadowPlayHighlightsChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnShadowPlayHighlightsChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnShadowPlayHighlightsChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnShadowPlayHighlightsChanged");
static_assert(sizeof(FortSettingsContext_OnShadowPlayHighlightsChanged) == 0x000001, "Wrong size on FortSettingsContext_OnShadowPlayHighlightsChanged");
static_assert(offsetof(FortSettingsContext_OnShadowPlayHighlightsChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnShadowPlayHighlightsChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnShowGlobalChatEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnShowGlobalChatEnabledChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnShowGlobalChatEnabledChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnShowGlobalChatEnabledChanged");
static_assert(sizeof(FortSettingsContext_OnShowGlobalChatEnabledChanged) == 0x000001, "Wrong size on FortSettingsContext_OnShowGlobalChatEnabledChanged");
static_assert(offsetof(FortSettingsContext_OnShowGlobalChatEnabledChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnShowGlobalChatEnabledChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnTouchEditChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnTouchEditChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnTouchEditChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnTouchEditChanged");
static_assert(sizeof(FortSettingsContext_OnTouchEditChanged) == 0x000001, "Wrong size on FortSettingsContext_OnTouchEditChanged");
static_assert(offsetof(FortSettingsContext_OnTouchEditChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnTouchEditChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnTurboBuildChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnTurboBuildChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnTurboBuildChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnTurboBuildChanged");
static_assert(sizeof(FortSettingsContext_OnTurboBuildChanged) == 0x000001, "Wrong size on FortSettingsContext_OnTurboBuildChanged");
static_assert(offsetof(FortSettingsContext_OnTurboBuildChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnTurboBuildChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnTurboBuildReset
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnTurboBuildReset final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnTurboBuildReset) == 0x000001, "Wrong alignment on FortSettingsContext_OnTurboBuildReset");
static_assert(sizeof(FortSettingsContext_OnTurboBuildReset) == 0x000001, "Wrong size on FortSettingsContext_OnTurboBuildReset");
static_assert(offsetof(FortSettingsContext_OnTurboBuildReset, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnTurboBuildReset::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.OnUseTapToShootChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_OnUseTapToShootChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_OnUseTapToShootChanged) == 0x000001, "Wrong alignment on FortSettingsContext_OnUseTapToShootChanged");
static_assert(sizeof(FortSettingsContext_OnUseTapToShootChanged) == 0x000001, "Wrong size on FortSettingsContext_OnUseTapToShootChanged");
static_assert(offsetof(FortSettingsContext_OnUseTapToShootChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_OnUseTapToShootChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.PeripheralLightingChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_PeripheralLightingChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_PeripheralLightingChanged) == 0x000001, "Wrong alignment on FortSettingsContext_PeripheralLightingChanged");
static_assert(sizeof(FortSettingsContext_PeripheralLightingChanged) == 0x000001, "Wrong size on FortSettingsContext_PeripheralLightingChanged");
static_assert(offsetof(FortSettingsContext_PeripheralLightingChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_PeripheralLightingChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.PitchForAircraftPrimaryInversionChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_PitchForAircraftPrimaryInversionChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_PitchForAircraftPrimaryInversionChanged) == 0x000001, "Wrong alignment on FortSettingsContext_PitchForAircraftPrimaryInversionChanged");
static_assert(sizeof(FortSettingsContext_PitchForAircraftPrimaryInversionChanged) == 0x000001, "Wrong size on FortSettingsContext_PitchForAircraftPrimaryInversionChanged");
static_assert(offsetof(FortSettingsContext_PitchForAircraftPrimaryInversionChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_PitchForAircraftPrimaryInversionChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.PitchForAircraftPrimaryInversionReset
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_PitchForAircraftPrimaryInversionReset final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_PitchForAircraftPrimaryInversionReset) == 0x000001, "Wrong alignment on FortSettingsContext_PitchForAircraftPrimaryInversionReset");
static_assert(sizeof(FortSettingsContext_PitchForAircraftPrimaryInversionReset) == 0x000001, "Wrong size on FortSettingsContext_PitchForAircraftPrimaryInversionReset");
static_assert(offsetof(FortSettingsContext_PitchForAircraftPrimaryInversionReset, bInChecked) == 0x000000, "Member 'FortSettingsContext_PitchForAircraftPrimaryInversionReset::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.PitchForAircraftSecondaryInversionChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_PitchForAircraftSecondaryInversionChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_PitchForAircraftSecondaryInversionChanged) == 0x000001, "Wrong alignment on FortSettingsContext_PitchForAircraftSecondaryInversionChanged");
static_assert(sizeof(FortSettingsContext_PitchForAircraftSecondaryInversionChanged) == 0x000001, "Wrong size on FortSettingsContext_PitchForAircraftSecondaryInversionChanged");
static_assert(offsetof(FortSettingsContext_PitchForAircraftSecondaryInversionChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_PitchForAircraftSecondaryInversionChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.PitchForAircraftSecondaryInversionReset
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_PitchForAircraftSecondaryInversionReset final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_PitchForAircraftSecondaryInversionReset) == 0x000001, "Wrong alignment on FortSettingsContext_PitchForAircraftSecondaryInversionReset");
static_assert(sizeof(FortSettingsContext_PitchForAircraftSecondaryInversionReset) == 0x000001, "Wrong size on FortSettingsContext_PitchForAircraftSecondaryInversionReset");
static_assert(offsetof(FortSettingsContext_PitchForAircraftSecondaryInversionReset, bInChecked) == 0x000000, "Member 'FortSettingsContext_PitchForAircraftSecondaryInversionReset::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.PitchForMotionInversionChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_PitchForMotionInversionChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_PitchForMotionInversionChanged) == 0x000001, "Wrong alignment on FortSettingsContext_PitchForMotionInversionChanged");
static_assert(sizeof(FortSettingsContext_PitchForMotionInversionChanged) == 0x000001, "Wrong size on FortSettingsContext_PitchForMotionInversionChanged");
static_assert(offsetof(FortSettingsContext_PitchForMotionInversionChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_PitchForMotionInversionChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.PitchForMotionInversionReset
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_PitchForMotionInversionReset final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_PitchForMotionInversionReset) == 0x000001, "Wrong alignment on FortSettingsContext_PitchForMotionInversionReset");
static_assert(sizeof(FortSettingsContext_PitchForMotionInversionReset) == 0x000001, "Wrong size on FortSettingsContext_PitchForMotionInversionReset");
static_assert(offsetof(FortSettingsContext_PitchForMotionInversionReset, bInChecked) == 0x000000, "Member 'FortSettingsContext_PitchForMotionInversionReset::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.PitchInversionChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_PitchInversionChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_PitchInversionChanged) == 0x000001, "Wrong alignment on FortSettingsContext_PitchInversionChanged");
static_assert(sizeof(FortSettingsContext_PitchInversionChanged) == 0x000001, "Wrong size on FortSettingsContext_PitchInversionChanged");
static_assert(offsetof(FortSettingsContext_PitchInversionChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_PitchInversionChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.PitchInversionReset
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_PitchInversionReset final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_PitchInversionReset) == 0x000001, "Wrong alignment on FortSettingsContext_PitchInversionReset");
static_assert(sizeof(FortSettingsContext_PitchInversionReset) == 0x000001, "Wrong size on FortSettingsContext_PitchInversionReset");
static_assert(offsetof(FortSettingsContext_PitchInversionReset, bInChecked) == 0x000000, "Member 'FortSettingsContext_PitchInversionReset::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.PostProcessQualityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_PostProcessQualityChanged final
{
public:
	int32                                         ButtonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_PostProcessQualityChanged) == 0x000004, "Wrong alignment on FortSettingsContext_PostProcessQualityChanged");
static_assert(sizeof(FortSettingsContext_PostProcessQualityChanged) == 0x000004, "Wrong size on FortSettingsContext_PostProcessQualityChanged");
static_assert(offsetof(FortSettingsContext_PostProcessQualityChanged, ButtonId) == 0x000000, "Member 'FortSettingsContext_PostProcessQualityChanged::ButtonId' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.PowerSaverModeChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_PowerSaverModeChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_PowerSaverModeChanged) == 0x000001, "Wrong alignment on FortSettingsContext_PowerSaverModeChanged");
static_assert(sizeof(FortSettingsContext_PowerSaverModeChanged) == 0x000001, "Wrong size on FortSettingsContext_PowerSaverModeChanged");
static_assert(offsetof(FortSettingsContext_PowerSaverModeChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_PowerSaverModeChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.RegionChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_RegionChanged final
{
public:
	int32                                         NewRegion;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_RegionChanged) == 0x000004, "Wrong alignment on FortSettingsContext_RegionChanged");
static_assert(sizeof(FortSettingsContext_RegionChanged) == 0x000004, "Wrong size on FortSettingsContext_RegionChanged");
static_assert(offsetof(FortSettingsContext_RegionChanged, NewRegion) == 0x000000, "Member 'FortSettingsContext_RegionChanged::NewRegion' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.ResolutionChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_ResolutionChanged final
{
public:
	int32                                         NewResolution;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_ResolutionChanged) == 0x000004, "Wrong alignment on FortSettingsContext_ResolutionChanged");
static_assert(sizeof(FortSettingsContext_ResolutionChanged) == 0x000004, "Wrong size on FortSettingsContext_ResolutionChanged");
static_assert(offsetof(FortSettingsContext_ResolutionChanged, NewResolution) == 0x000000, "Member 'FortSettingsContext_ResolutionChanged::NewResolution' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.RotatorSettingChanged
// 0x0028 (0x0028 - 0x0000)
struct FortSettingsContext_RotatorSettingChanged final
{
public:
	ESettingType                                  InSettingType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NameText;                                          // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         PreviousValue;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_RotatorSettingChanged) == 0x000008, "Wrong alignment on FortSettingsContext_RotatorSettingChanged");
static_assert(sizeof(FortSettingsContext_RotatorSettingChanged) == 0x000028, "Wrong size on FortSettingsContext_RotatorSettingChanged");
static_assert(offsetof(FortSettingsContext_RotatorSettingChanged, InSettingType) == 0x000000, "Member 'FortSettingsContext_RotatorSettingChanged::InSettingType' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_RotatorSettingChanged, NameText) == 0x000008, "Member 'FortSettingsContext_RotatorSettingChanged::NameText' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_RotatorSettingChanged, PreviousValue) == 0x000020, "Member 'FortSettingsContext_RotatorSettingChanged::PreviousValue' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_RotatorSettingChanged, NewValue) == 0x000024, "Member 'FortSettingsContext_RotatorSettingChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.RotatorSettingReset
// 0x0028 (0x0028 - 0x0000)
struct FortSettingsContext_RotatorSettingReset final
{
public:
	ESettingType                                  InSettingType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NameText;                                          // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         PreviousValue;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_RotatorSettingReset) == 0x000008, "Wrong alignment on FortSettingsContext_RotatorSettingReset");
static_assert(sizeof(FortSettingsContext_RotatorSettingReset) == 0x000028, "Wrong size on FortSettingsContext_RotatorSettingReset");
static_assert(offsetof(FortSettingsContext_RotatorSettingReset, InSettingType) == 0x000000, "Member 'FortSettingsContext_RotatorSettingReset::InSettingType' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_RotatorSettingReset, NameText) == 0x000008, "Member 'FortSettingsContext_RotatorSettingReset::NameText' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_RotatorSettingReset, PreviousValue) == 0x000020, "Member 'FortSettingsContext_RotatorSettingReset::PreviousValue' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_RotatorSettingReset, NewValue) == 0x000024, "Member 'FortSettingsContext_RotatorSettingReset::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.RudderDeadZoneChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_RudderDeadZoneChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_RudderDeadZoneChanged) == 0x000004, "Wrong alignment on FortSettingsContext_RudderDeadZoneChanged");
static_assert(sizeof(FortSettingsContext_RudderDeadZoneChanged) == 0x000004, "Wrong size on FortSettingsContext_RudderDeadZoneChanged");
static_assert(offsetof(FortSettingsContext_RudderDeadZoneChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_RudderDeadZoneChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.RudderMaxThrottleChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_RudderMaxThrottleChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_RudderMaxThrottleChanged) == 0x000004, "Wrong alignment on FortSettingsContext_RudderMaxThrottleChanged");
static_assert(sizeof(FortSettingsContext_RudderMaxThrottleChanged) == 0x000004, "Wrong size on FortSettingsContext_RudderMaxThrottleChanged");
static_assert(offsetof(FortSettingsContext_RudderMaxThrottleChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_RudderMaxThrottleChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SafeZoneChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_SafeZoneChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SafeZoneChanged) == 0x000004, "Wrong alignment on FortSettingsContext_SafeZoneChanged");
static_assert(sizeof(FortSettingsContext_SafeZoneChanged) == 0x000004, "Wrong size on FortSettingsContext_SafeZoneChanged");
static_assert(offsetof(FortSettingsContext_SafeZoneChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_SafeZoneChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.ScopedMultiplierValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_ScopedMultiplierValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_ScopedMultiplierValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_ScopedMultiplierValueChanged");
static_assert(sizeof(FortSettingsContext_ScopedMultiplierValueChanged) == 0x000004, "Wrong size on FortSettingsContext_ScopedMultiplierValueChanged");
static_assert(offsetof(FortSettingsContext_ScopedMultiplierValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_ScopedMultiplierValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetAllowGameVolumeWhenMinimized
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SetAllowGameVolumeWhenMinimized final
{
public:
	EFortAllowBackgroundAudioSetting              NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetAllowGameVolumeWhenMinimized) == 0x000001, "Wrong alignment on FortSettingsContext_SetAllowGameVolumeWhenMinimized");
static_assert(sizeof(FortSettingsContext_SetAllowGameVolumeWhenMinimized) == 0x000001, "Wrong size on FortSettingsContext_SetAllowGameVolumeWhenMinimized");
static_assert(offsetof(FortSettingsContext_SetAllowGameVolumeWhenMinimized, NewValue) == 0x000000, "Member 'FortSettingsContext_SetAllowGameVolumeWhenMinimized::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetAutoJoinGameVoiceChannel
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SetAutoJoinGameVoiceChannel final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetAutoJoinGameVoiceChannel) == 0x000001, "Wrong alignment on FortSettingsContext_SetAutoJoinGameVoiceChannel");
static_assert(sizeof(FortSettingsContext_SetAutoJoinGameVoiceChannel) == 0x000001, "Wrong size on FortSettingsContext_SetAutoJoinGameVoiceChannel");
static_assert(offsetof(FortSettingsContext_SetAutoJoinGameVoiceChannel, bInChecked) == 0x000000, "Member 'FortSettingsContext_SetAutoJoinGameVoiceChannel::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetColorBlindMode
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_SetColorBlindMode final
{
public:
	int32                                         InMode;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetColorBlindMode) == 0x000004, "Wrong alignment on FortSettingsContext_SetColorBlindMode");
static_assert(sizeof(FortSettingsContext_SetColorBlindMode) == 0x000004, "Wrong size on FortSettingsContext_SetColorBlindMode");
static_assert(offsetof(FortSettingsContext_SetColorBlindMode, InMode) == 0x000000, "Member 'FortSettingsContext_SetColorBlindMode::InMode' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetColorBlindStrength
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_SetColorBlindStrength final
{
public:
	int32                                         InColorBlindStrength;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetColorBlindStrength) == 0x000004, "Wrong alignment on FortSettingsContext_SetColorBlindStrength");
static_assert(sizeof(FortSettingsContext_SetColorBlindStrength) == 0x000004, "Wrong size on FortSettingsContext_SetColorBlindStrength");
static_assert(offsetof(FortSettingsContext_SetColorBlindStrength, InColorBlindStrength) == 0x000000, "Member 'FortSettingsContext_SetColorBlindStrength::InColorBlindStrength' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetEnableRudderControl
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SetEnableRudderControl final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetEnableRudderControl) == 0x000001, "Wrong alignment on FortSettingsContext_SetEnableRudderControl");
static_assert(sizeof(FortSettingsContext_SetEnableRudderControl) == 0x000001, "Wrong size on FortSettingsContext_SetEnableRudderControl");
static_assert(offsetof(FortSettingsContext_SetEnableRudderControl, bEnable) == 0x000000, "Member 'FortSettingsContext_SetEnableRudderControl::bEnable' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetIgnoreGamepadInput
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SetIgnoreGamepadInput final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetIgnoreGamepadInput) == 0x000001, "Wrong alignment on FortSettingsContext_SetIgnoreGamepadInput");
static_assert(sizeof(FortSettingsContext_SetIgnoreGamepadInput) == 0x000001, "Wrong size on FortSettingsContext_SetIgnoreGamepadInput");
static_assert(offsetof(FortSettingsContext_SetIgnoreGamepadInput, bIgnore) == 0x000000, "Member 'FortSettingsContext_SetIgnoreGamepadInput::bIgnore' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetLockPrimaryInputMethodToMouse
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SetLockPrimaryInputMethodToMouse final
{
public:
	bool                                          bLock;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetLockPrimaryInputMethodToMouse) == 0x000001, "Wrong alignment on FortSettingsContext_SetLockPrimaryInputMethodToMouse");
static_assert(sizeof(FortSettingsContext_SetLockPrimaryInputMethodToMouse) == 0x000001, "Wrong size on FortSettingsContext_SetLockPrimaryInputMethodToMouse");
static_assert(offsetof(FortSettingsContext_SetLockPrimaryInputMethodToMouse, bLock) == 0x000000, "Member 'FortSettingsContext_SetLockPrimaryInputMethodToMouse::bLock' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetQuality
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_SetQuality final
{
public:
	int32                                         NewQuality;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetQuality) == 0x000004, "Wrong alignment on FortSettingsContext_SetQuality");
static_assert(sizeof(FortSettingsContext_SetQuality) == 0x000004, "Wrong size on FortSettingsContext_SetQuality");
static_assert(offsetof(FortSettingsContext_SetQuality, NewQuality) == 0x000000, "Member 'FortSettingsContext_SetQuality::NewQuality' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetShowVoiceIndicators
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SetShowVoiceIndicators final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetShowVoiceIndicators) == 0x000001, "Wrong alignment on FortSettingsContext_SetShowVoiceIndicators");
static_assert(sizeof(FortSettingsContext_SetShowVoiceIndicators) == 0x000001, "Wrong size on FortSettingsContext_SetShowVoiceIndicators");
static_assert(offsetof(FortSettingsContext_SetShowVoiceIndicators, bInChecked) == 0x000000, "Member 'FortSettingsContext_SetShowVoiceIndicators::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetSubtitlesEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SetSubtitlesEnabled final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetSubtitlesEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_SetSubtitlesEnabled");
static_assert(sizeof(FortSettingsContext_SetSubtitlesEnabled) == 0x000001, "Wrong size on FortSettingsContext_SetSubtitlesEnabled");
static_assert(offsetof(FortSettingsContext_SetSubtitlesEnabled, bNewValue) == 0x000000, "Member 'FortSettingsContext_SetSubtitlesEnabled::bNewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetVisualizeAudioSources
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SetVisualizeAudioSources final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetVisualizeAudioSources) == 0x000001, "Wrong alignment on FortSettingsContext_SetVisualizeAudioSources");
static_assert(sizeof(FortSettingsContext_SetVisualizeAudioSources) == 0x000001, "Wrong size on FortSettingsContext_SetVisualizeAudioSources");
static_assert(offsetof(FortSettingsContext_SetVisualizeAudioSources, bEnable) == 0x000000, "Member 'FortSettingsContext_SetVisualizeAudioSources::bEnable' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetVoiceChat3DEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SetVoiceChat3DEnabled final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetVoiceChat3DEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_SetVoiceChat3DEnabled");
static_assert(sizeof(FortSettingsContext_SetVoiceChat3DEnabled) == 0x000001, "Wrong size on FortSettingsContext_SetVoiceChat3DEnabled");
static_assert(offsetof(FortSettingsContext_SetVoiceChat3DEnabled, bNewValue) == 0x000000, "Member 'FortSettingsContext_SetVoiceChat3DEnabled::bNewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetVoiceChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SetVoiceChatEnabled final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetVoiceChatEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_SetVoiceChatEnabled");
static_assert(sizeof(FortSettingsContext_SetVoiceChatEnabled) == 0x000001, "Wrong size on FortSettingsContext_SetVoiceChatEnabled");
static_assert(offsetof(FortSettingsContext_SetVoiceChatEnabled, bNewValue) == 0x000000, "Member 'FortSettingsContext_SetVoiceChatEnabled::bNewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetVoiceChatInputDevice
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_SetVoiceChatInputDevice final
{
public:
	int32                                         NewDevice;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetVoiceChatInputDevice) == 0x000004, "Wrong alignment on FortSettingsContext_SetVoiceChatInputDevice");
static_assert(sizeof(FortSettingsContext_SetVoiceChatInputDevice) == 0x000004, "Wrong size on FortSettingsContext_SetVoiceChatInputDevice");
static_assert(offsetof(FortSettingsContext_SetVoiceChatInputDevice, NewDevice) == 0x000000, "Member 'FortSettingsContext_SetVoiceChatInputDevice::NewDevice' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetVoiceChatOutputDevice
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_SetVoiceChatOutputDevice final
{
public:
	int32                                         NewDevice;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetVoiceChatOutputDevice) == 0x000004, "Wrong alignment on FortSettingsContext_SetVoiceChatOutputDevice");
static_assert(sizeof(FortSettingsContext_SetVoiceChatOutputDevice) == 0x000004, "Wrong size on FortSettingsContext_SetVoiceChatOutputDevice");
static_assert(offsetof(FortSettingsContext_SetVoiceChatOutputDevice, NewDevice) == 0x000000, "Member 'FortSettingsContext_SetVoiceChatOutputDevice::NewDevice' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SetVoiceChatPTTEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SetVoiceChatPTTEnabled final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SetVoiceChatPTTEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_SetVoiceChatPTTEnabled");
static_assert(sizeof(FortSettingsContext_SetVoiceChatPTTEnabled) == 0x000001, "Wrong size on FortSettingsContext_SetVoiceChatPTTEnabled");
static_assert(offsetof(FortSettingsContext_SetVoiceChatPTTEnabled, bNewValue) == 0x000000, "Member 'FortSettingsContext_SetVoiceChatPTTEnabled::bNewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.ShadowQualityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_ShadowQualityChanged final
{
public:
	int32                                         ButtonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_ShadowQualityChanged) == 0x000004, "Wrong alignment on FortSettingsContext_ShadowQualityChanged");
static_assert(sizeof(FortSettingsContext_ShadowQualityChanged) == 0x000004, "Wrong size on FortSettingsContext_ShadowQualityChanged");
static_assert(offsetof(FortSettingsContext_ShadowQualityChanged, ButtonId) == 0x000000, "Member 'FortSettingsContext_ShadowQualityChanged::ButtonId' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.ShowFPSChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_ShowFPSChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_ShowFPSChanged) == 0x000001, "Wrong alignment on FortSettingsContext_ShowFPSChanged");
static_assert(sizeof(FortSettingsContext_ShowFPSChanged) == 0x000001, "Wrong size on FortSettingsContext_ShowFPSChanged");
static_assert(offsetof(FortSettingsContext_ShowFPSChanged, IsChecked) == 0x000000, "Member 'FortSettingsContext_ShowFPSChanged::IsChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.ShowGrassChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_ShowGrassChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_ShowGrassChanged) == 0x000001, "Wrong alignment on FortSettingsContext_ShowGrassChanged");
static_assert(sizeof(FortSettingsContext_ShowGrassChanged) == 0x000001, "Wrong size on FortSettingsContext_ShowGrassChanged");
static_assert(offsetof(FortSettingsContext_ShowGrassChanged, IsChecked) == 0x000000, "Member 'FortSettingsContext_ShowGrassChanged::IsChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.ShowTemperatureChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_ShowTemperatureChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_ShowTemperatureChanged) == 0x000001, "Wrong alignment on FortSettingsContext_ShowTemperatureChanged");
static_assert(sizeof(FortSettingsContext_ShowTemperatureChanged) == 0x000001, "Wrong size on FortSettingsContext_ShowTemperatureChanged");
static_assert(offsetof(FortSettingsContext_ShowTemperatureChanged, IsChecked) == 0x000000, "Member 'FortSettingsContext_ShowTemperatureChanged::IsChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.ShowViewerCountChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_ShowViewerCountChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_ShowViewerCountChanged) == 0x000001, "Wrong alignment on FortSettingsContext_ShowViewerCountChanged");
static_assert(sizeof(FortSettingsContext_ShowViewerCountChanged) == 0x000001, "Wrong size on FortSettingsContext_ShowViewerCountChanged");
static_assert(offsetof(FortSettingsContext_ShowViewerCountChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_ShowViewerCountChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SliderSettingChanged
// 0x0028 (0x0028 - 0x0000)
struct FortSettingsContext_SliderSettingChanged final
{
public:
	ESettingType                                  InSettingType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NameText;                                          // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         PreviousValue;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SliderSettingChanged) == 0x000008, "Wrong alignment on FortSettingsContext_SliderSettingChanged");
static_assert(sizeof(FortSettingsContext_SliderSettingChanged) == 0x000028, "Wrong size on FortSettingsContext_SliderSettingChanged");
static_assert(offsetof(FortSettingsContext_SliderSettingChanged, InSettingType) == 0x000000, "Member 'FortSettingsContext_SliderSettingChanged::InSettingType' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_SliderSettingChanged, NameText) == 0x000008, "Member 'FortSettingsContext_SliderSettingChanged::NameText' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_SliderSettingChanged, PreviousValue) == 0x000020, "Member 'FortSettingsContext_SliderSettingChanged::PreviousValue' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_SliderSettingChanged, NewValue) == 0x000024, "Member 'FortSettingsContext_SliderSettingChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SliderSettingReset
// 0x0028 (0x0028 - 0x0000)
struct FortSettingsContext_SliderSettingReset final
{
public:
	ESettingType                                  InSettingType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NameText;                                          // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         PreviousValue;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SliderSettingReset) == 0x000008, "Wrong alignment on FortSettingsContext_SliderSettingReset");
static_assert(sizeof(FortSettingsContext_SliderSettingReset) == 0x000028, "Wrong size on FortSettingsContext_SliderSettingReset");
static_assert(offsetof(FortSettingsContext_SliderSettingReset, InSettingType) == 0x000000, "Member 'FortSettingsContext_SliderSettingReset::InSettingType' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_SliderSettingReset, NameText) == 0x000008, "Member 'FortSettingsContext_SliderSettingReset::NameText' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_SliderSettingReset, PreviousValue) == 0x000020, "Member 'FortSettingsContext_SliderSettingReset::PreviousValue' has a wrong offset!");
static_assert(offsetof(FortSettingsContext_SliderSettingReset, NewValue) == 0x000024, "Member 'FortSettingsContext_SliderSettingReset::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SoundFXVolumeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_SoundFXVolumeChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SoundFXVolumeChanged) == 0x000004, "Wrong alignment on FortSettingsContext_SoundFXVolumeChanged");
static_assert(sizeof(FortSettingsContext_SoundFXVolumeChanged) == 0x000004, "Wrong size on FortSettingsContext_SoundFXVolumeChanged");
static_assert(offsetof(FortSettingsContext_SoundFXVolumeChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_SoundFXVolumeChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SprintByDefaultChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SprintByDefaultChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SprintByDefaultChanged) == 0x000001, "Wrong alignment on FortSettingsContext_SprintByDefaultChanged");
static_assert(sizeof(FortSettingsContext_SprintByDefaultChanged) == 0x000001, "Wrong size on FortSettingsContext_SprintByDefaultChanged");
static_assert(offsetof(FortSettingsContext_SprintByDefaultChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_SprintByDefaultChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SprintCancelsReloadChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SprintCancelsReloadChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SprintCancelsReloadChanged) == 0x000001, "Wrong alignment on FortSettingsContext_SprintCancelsReloadChanged");
static_assert(sizeof(FortSettingsContext_SprintCancelsReloadChanged) == 0x000001, "Wrong size on FortSettingsContext_SprintCancelsReloadChanged");
static_assert(offsetof(FortSettingsContext_SprintCancelsReloadChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_SprintCancelsReloadChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.SprintToggleChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_SprintToggleChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_SprintToggleChanged) == 0x000001, "Wrong alignment on FortSettingsContext_SprintToggleChanged");
static_assert(sizeof(FortSettingsContext_SprintToggleChanged) == 0x000001, "Wrong size on FortSettingsContext_SprintToggleChanged");
static_assert(offsetof(FortSettingsContext_SprintToggleChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_SprintToggleChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.TapInteractChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_TapInteractChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_TapInteractChanged) == 0x000001, "Wrong alignment on FortSettingsContext_TapInteractChanged");
static_assert(sizeof(FortSettingsContext_TapInteractChanged) == 0x000001, "Wrong size on FortSettingsContext_TapInteractChanged");
static_assert(offsetof(FortSettingsContext_TapInteractChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_TapInteractChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.TargetingMultiplierValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_TargetingMultiplierValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_TargetingMultiplierValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_TargetingMultiplierValueChanged");
static_assert(sizeof(FortSettingsContext_TargetingMultiplierValueChanged) == 0x000004, "Wrong size on FortSettingsContext_TargetingMultiplierValueChanged");
static_assert(offsetof(FortSettingsContext_TargetingMultiplierValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_TargetingMultiplierValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.TargetingToggleChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_TargetingToggleChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_TargetingToggleChanged) == 0x000001, "Wrong alignment on FortSettingsContext_TargetingToggleChanged");
static_assert(sizeof(FortSettingsContext_TargetingToggleChanged) == 0x000001, "Wrong size on FortSettingsContext_TargetingToggleChanged");
static_assert(offsetof(FortSettingsContext_TargetingToggleChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_TargetingToggleChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.TextureQualityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_TextureQualityChanged final
{
public:
	int32                                         ButtonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_TextureQualityChanged) == 0x000004, "Wrong alignment on FortSettingsContext_TextureQualityChanged");
static_assert(sizeof(FortSettingsContext_TextureQualityChanged) == 0x000004, "Wrong size on FortSettingsContext_TextureQualityChanged");
static_assert(offsetof(FortSettingsContext_TextureQualityChanged, ButtonId) == 0x000000, "Member 'FortSettingsContext_TextureQualityChanged::ButtonId' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.ThreeDResolutionChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_ThreeDResolutionChanged final
{
public:
	float                                         Resolution;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_ThreeDResolutionChanged) == 0x000004, "Wrong alignment on FortSettingsContext_ThreeDResolutionChanged");
static_assert(sizeof(FortSettingsContext_ThreeDResolutionChanged) == 0x000004, "Wrong size on FortSettingsContext_ThreeDResolutionChanged");
static_assert(offsetof(FortSettingsContext_ThreeDResolutionChanged, Resolution) == 0x000000, "Member 'FortSettingsContext_ThreeDResolutionChanged::Resolution' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.TouchDragScopedSensitivityValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_TouchDragScopedSensitivityValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_TouchDragScopedSensitivityValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_TouchDragScopedSensitivityValueChanged");
static_assert(sizeof(FortSettingsContext_TouchDragScopedSensitivityValueChanged) == 0x000004, "Wrong size on FortSettingsContext_TouchDragScopedSensitivityValueChanged");
static_assert(offsetof(FortSettingsContext_TouchDragScopedSensitivityValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_TouchDragScopedSensitivityValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.TouchLookSensitivityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_TouchLookSensitivityChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_TouchLookSensitivityChanged) == 0x000004, "Wrong alignment on FortSettingsContext_TouchLookSensitivityChanged");
static_assert(sizeof(FortSettingsContext_TouchLookSensitivityChanged) == 0x000004, "Wrong size on FortSettingsContext_TouchLookSensitivityChanged");
static_assert(offsetof(FortSettingsContext_TouchLookSensitivityChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_TouchLookSensitivityChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.TouchTargetingMultiplierValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_TouchTargetingMultiplierValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_TouchTargetingMultiplierValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_TouchTargetingMultiplierValueChanged");
static_assert(sizeof(FortSettingsContext_TouchTargetingMultiplierValueChanged) == 0x000004, "Wrong size on FortSettingsContext_TouchTargetingMultiplierValueChanged");
static_assert(offsetof(FortSettingsContext_TouchTargetingMultiplierValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_TouchTargetingMultiplierValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.TouchVerticalSensitivityValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_TouchVerticalSensitivityValueChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_TouchVerticalSensitivityValueChanged) == 0x000004, "Wrong alignment on FortSettingsContext_TouchVerticalSensitivityValueChanged");
static_assert(sizeof(FortSettingsContext_TouchVerticalSensitivityValueChanged) == 0x000004, "Wrong size on FortSettingsContext_TouchVerticalSensitivityValueChanged");
static_assert(offsetof(FortSettingsContext_TouchVerticalSensitivityValueChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_TouchVerticalSensitivityValueChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.UseVsyncChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_UseVsyncChanged final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_UseVsyncChanged) == 0x000001, "Wrong alignment on FortSettingsContext_UseVsyncChanged");
static_assert(sizeof(FortSettingsContext_UseVsyncChanged) == 0x000001, "Wrong size on FortSettingsContext_UseVsyncChanged");
static_assert(offsetof(FortSettingsContext_UseVsyncChanged, IsChecked) == 0x000000, "Member 'FortSettingsContext_UseVsyncChanged::IsChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.ViewDistanceQualityChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_ViewDistanceQualityChanged final
{
public:
	int32                                         ButtonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_ViewDistanceQualityChanged) == 0x000004, "Wrong alignment on FortSettingsContext_ViewDistanceQualityChanged");
static_assert(sizeof(FortSettingsContext_ViewDistanceQualityChanged) == 0x000004, "Wrong size on FortSettingsContext_ViewDistanceQualityChanged");
static_assert(offsetof(FortSettingsContext_ViewDistanceQualityChanged, ButtonId) == 0x000000, "Member 'FortSettingsContext_ViewDistanceQualityChanged::ButtonId' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.WindowModeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_WindowModeChanged final
{
public:
	int32                                         NewMode;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_WindowModeChanged) == 0x000004, "Wrong alignment on FortSettingsContext_WindowModeChanged");
static_assert(sizeof(FortSettingsContext_WindowModeChanged) == 0x000004, "Wrong size on FortSettingsContext_WindowModeChanged");
static_assert(offsetof(FortSettingsContext_WindowModeChanged, NewMode) == 0x000000, "Member 'FortSettingsContext_WindowModeChanged::NewMode' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.YawForMotionInversionChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_YawForMotionInversionChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_YawForMotionInversionChanged) == 0x000001, "Wrong alignment on FortSettingsContext_YawForMotionInversionChanged");
static_assert(sizeof(FortSettingsContext_YawForMotionInversionChanged) == 0x000001, "Wrong size on FortSettingsContext_YawForMotionInversionChanged");
static_assert(offsetof(FortSettingsContext_YawForMotionInversionChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_YawForMotionInversionChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.YawForMotionInversionReset
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_YawForMotionInversionReset final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_YawForMotionInversionReset) == 0x000001, "Wrong alignment on FortSettingsContext_YawForMotionInversionReset");
static_assert(sizeof(FortSettingsContext_YawForMotionInversionReset) == 0x000001, "Wrong size on FortSettingsContext_YawForMotionInversionReset");
static_assert(offsetof(FortSettingsContext_YawForMotionInversionReset, bInChecked) == 0x000000, "Member 'FortSettingsContext_YawForMotionInversionReset::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.YawInversionChanged
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_YawInversionChanged final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_YawInversionChanged) == 0x000001, "Wrong alignment on FortSettingsContext_YawInversionChanged");
static_assert(sizeof(FortSettingsContext_YawInversionChanged) == 0x000001, "Wrong size on FortSettingsContext_YawInversionChanged");
static_assert(offsetof(FortSettingsContext_YawInversionChanged, bInChecked) == 0x000000, "Member 'FortSettingsContext_YawInversionChanged::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.YawInversionReset
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_YawInversionReset final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_YawInversionReset) == 0x000001, "Wrong alignment on FortSettingsContext_YawInversionReset");
static_assert(sizeof(FortSettingsContext_YawInversionReset) == 0x000001, "Wrong size on FortSettingsContext_YawInversionReset");
static_assert(offsetof(FortSettingsContext_YawInversionReset, bInChecked) == 0x000000, "Member 'FortSettingsContext_YawInversionReset::bInChecked' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GamepadLookStickDeadZoneChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GamepadLookStickDeadZoneChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GamepadLookStickDeadZoneChanged) == 0x000004, "Wrong alignment on FortSettingsContext_GamepadLookStickDeadZoneChanged");
static_assert(sizeof(FortSettingsContext_GamepadLookStickDeadZoneChanged) == 0x000004, "Wrong size on FortSettingsContext_GamepadLookStickDeadZoneChanged");
static_assert(offsetof(FortSettingsContext_GamepadLookStickDeadZoneChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_GamepadLookStickDeadZoneChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GamepadMoveStickDeadZoneChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GamepadMoveStickDeadZoneChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GamepadMoveStickDeadZoneChanged) == 0x000004, "Wrong alignment on FortSettingsContext_GamepadMoveStickDeadZoneChanged");
static_assert(sizeof(FortSettingsContext_GamepadMoveStickDeadZoneChanged) == 0x000004, "Wrong size on FortSettingsContext_GamepadMoveStickDeadZoneChanged");
static_assert(offsetof(FortSettingsContext_GamepadMoveStickDeadZoneChanged, NewValue) == 0x000000, "Member 'FortSettingsContext_GamepadMoveStickDeadZoneChanged::NewValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAimAssistState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAimAssistState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAimAssistState) == 0x000001, "Wrong alignment on FortSettingsContext_GetAimAssistState");
static_assert(sizeof(FortSettingsContext_GetAimAssistState) == 0x000001, "Wrong size on FortSettingsContext_GetAimAssistState");
static_assert(offsetof(FortSettingsContext_GetAimAssistState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAimAssistState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAllowGameVolumeWhenMinimized
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAllowGameVolumeWhenMinimized final
{
public:
	EFortAllowBackgroundAudioSetting              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAllowGameVolumeWhenMinimized) == 0x000001, "Wrong alignment on FortSettingsContext_GetAllowGameVolumeWhenMinimized");
static_assert(sizeof(FortSettingsContext_GetAllowGameVolumeWhenMinimized) == 0x000001, "Wrong size on FortSettingsContext_GetAllowGameVolumeWhenMinimized");
static_assert(offsetof(FortSettingsContext_GetAllowGameVolumeWhenMinimized, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAllowGameVolumeWhenMinimized::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAnonymousCharacterModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAnonymousCharacterModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAnonymousCharacterModeEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetAnonymousCharacterModeEnabled");
static_assert(sizeof(FortSettingsContext_GetAnonymousCharacterModeEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetAnonymousCharacterModeEnabled");
static_assert(offsetof(FortSettingsContext_GetAnonymousCharacterModeEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAnonymousCharacterModeEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAnonymousModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAnonymousModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAnonymousModeEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetAnonymousModeEnabled");
static_assert(sizeof(FortSettingsContext_GetAnonymousModeEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetAnonymousModeEnabled");
static_assert(offsetof(FortSettingsContext_GetAnonymousModeEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAnonymousModeEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAutoChangeMaterial
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAutoChangeMaterial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAutoChangeMaterial) == 0x000001, "Wrong alignment on FortSettingsContext_GetAutoChangeMaterial");
static_assert(sizeof(FortSettingsContext_GetAutoChangeMaterial) == 0x000001, "Wrong size on FortSettingsContext_GetAutoChangeMaterial");
static_assert(offsetof(FortSettingsContext_GetAutoChangeMaterial, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAutoChangeMaterial::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAutoEquipState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAutoEquipState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAutoEquipState) == 0x000001, "Wrong alignment on FortSettingsContext_GetAutoEquipState");
static_assert(sizeof(FortSettingsContext_GetAutoEquipState) == 0x000001, "Wrong size on FortSettingsContext_GetAutoEquipState");
static_assert(offsetof(FortSettingsContext_GetAutoEquipState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAutoEquipState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAutoJoinGameVoiceChannel
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAutoJoinGameVoiceChannel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAutoJoinGameVoiceChannel) == 0x000001, "Wrong alignment on FortSettingsContext_GetAutoJoinGameVoiceChannel");
static_assert(sizeof(FortSettingsContext_GetAutoJoinGameVoiceChannel) == 0x000001, "Wrong size on FortSettingsContext_GetAutoJoinGameVoiceChannel");
static_assert(offsetof(FortSettingsContext_GetAutoJoinGameVoiceChannel, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAutoJoinGameVoiceChannel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAutoOpenDoors
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAutoOpenDoors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAutoOpenDoors) == 0x000001, "Wrong alignment on FortSettingsContext_GetAutoOpenDoors");
static_assert(sizeof(FortSettingsContext_GetAutoOpenDoors) == 0x000001, "Wrong size on FortSettingsContext_GetAutoOpenDoors");
static_assert(offsetof(FortSettingsContext_GetAutoOpenDoors, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAutoOpenDoors::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAutoPickupWeapons
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAutoPickupWeapons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAutoPickupWeapons) == 0x000001, "Wrong alignment on FortSettingsContext_GetAutoPickupWeapons");
static_assert(sizeof(FortSettingsContext_GetAutoPickupWeapons) == 0x000001, "Wrong size on FortSettingsContext_GetAutoPickupWeapons");
static_assert(offsetof(FortSettingsContext_GetAutoPickupWeapons, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAutoPickupWeapons::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAutoPickupWeaponsConsolePC
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAutoPickupWeaponsConsolePC final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAutoPickupWeaponsConsolePC) == 0x000001, "Wrong alignment on FortSettingsContext_GetAutoPickupWeaponsConsolePC");
static_assert(sizeof(FortSettingsContext_GetAutoPickupWeaponsConsolePC) == 0x000001, "Wrong size on FortSettingsContext_GetAutoPickupWeaponsConsolePC");
static_assert(offsetof(FortSettingsContext_GetAutoPickupWeaponsConsolePC, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAutoPickupWeaponsConsolePC::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetAutoSortConsumablesToRight
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetAutoSortConsumablesToRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetAutoSortConsumablesToRight) == 0x000001, "Wrong alignment on FortSettingsContext_GetAutoSortConsumablesToRight");
static_assert(sizeof(FortSettingsContext_GetAutoSortConsumablesToRight) == 0x000001, "Wrong size on FortSettingsContext_GetAutoSortConsumablesToRight");
static_assert(offsetof(FortSettingsContext_GetAutoSortConsumablesToRight, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetAutoSortConsumablesToRight::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetChatVolumeValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetChatVolumeValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetChatVolumeValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetChatVolumeValue");
static_assert(sizeof(FortSettingsContext_GetChatVolumeValue) == 0x000004, "Wrong size on FortSettingsContext_GetChatVolumeValue");
static_assert(offsetof(FortSettingsContext_GetChatVolumeValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetChatVolumeValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetCinematicsVolume
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetCinematicsVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetCinematicsVolume) == 0x000004, "Wrong alignment on FortSettingsContext_GetCinematicsVolume");
static_assert(sizeof(FortSettingsContext_GetCinematicsVolume) == 0x000004, "Wrong size on FortSettingsContext_GetCinematicsVolume");
static_assert(offsetof(FortSettingsContext_GetCinematicsVolume, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetCinematicsVolume::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetColorBlindMode
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetColorBlindMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetColorBlindMode) == 0x000004, "Wrong alignment on FortSettingsContext_GetColorBlindMode");
static_assert(sizeof(FortSettingsContext_GetColorBlindMode) == 0x000004, "Wrong size on FortSettingsContext_GetColorBlindMode");
static_assert(offsetof(FortSettingsContext_GetColorBlindMode, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetColorBlindMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetColorBlindModeNames
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsContext_GetColorBlindModeNames final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetColorBlindModeNames) == 0x000008, "Wrong alignment on FortSettingsContext_GetColorBlindModeNames");
static_assert(sizeof(FortSettingsContext_GetColorBlindModeNames) == 0x000010, "Wrong size on FortSettingsContext_GetColorBlindModeNames");
static_assert(offsetof(FortSettingsContext_GetColorBlindModeNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetColorBlindModeNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetColorBlindStrength
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetColorBlindStrength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetColorBlindStrength) == 0x000004, "Wrong alignment on FortSettingsContext_GetColorBlindStrength");
static_assert(sizeof(FortSettingsContext_GetColorBlindStrength) == 0x000004, "Wrong size on FortSettingsContext_GetColorBlindStrength");
static_assert(offsetof(FortSettingsContext_GetColorBlindStrength, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetColorBlindStrength::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetConsoleUnlockedFPSState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetConsoleUnlockedFPSState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetConsoleUnlockedFPSState) == 0x000001, "Wrong alignment on FortSettingsContext_GetConsoleUnlockedFPSState");
static_assert(sizeof(FortSettingsContext_GetConsoleUnlockedFPSState) == 0x000001, "Wrong size on FortSettingsContext_GetConsoleUnlockedFPSState");
static_assert(offsetof(FortSettingsContext_GetConsoleUnlockedFPSState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetConsoleUnlockedFPSState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetCreativeModeReplayRecordingEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetCreativeModeReplayRecordingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetCreativeModeReplayRecordingEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetCreativeModeReplayRecordingEnabled");
static_assert(sizeof(FortSettingsContext_GetCreativeModeReplayRecordingEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetCreativeModeReplayRecordingEnabled");
static_assert(offsetof(FortSettingsContext_GetCreativeModeReplayRecordingEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetCreativeModeReplayRecordingEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetCreativeTurboDelete
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetCreativeTurboDelete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetCreativeTurboDelete) == 0x000001, "Wrong alignment on FortSettingsContext_GetCreativeTurboDelete");
static_assert(sizeof(FortSettingsContext_GetCreativeTurboDelete) == 0x000001, "Wrong size on FortSettingsContext_GetCreativeTurboDelete");
static_assert(offsetof(FortSettingsContext_GetCreativeTurboDelete, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetCreativeTurboDelete::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetCrossplayPreference
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetCrossplayPreference final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetCrossplayPreference) == 0x000001, "Wrong alignment on FortSettingsContext_GetCrossplayPreference");
static_assert(sizeof(FortSettingsContext_GetCrossplayPreference) == 0x000001, "Wrong size on FortSettingsContext_GetCrossplayPreference");
static_assert(offsetof(FortSettingsContext_GetCrossplayPreference, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetCrossplayPreference::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetDialogVolumeValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetDialogVolumeValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetDialogVolumeValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetDialogVolumeValue");
static_assert(sizeof(FortSettingsContext_GetDialogVolumeValue) == 0x000004, "Wrong size on FortSettingsContext_GetDialogVolumeValue");
static_assert(offsetof(FortSettingsContext_GetDialogVolumeValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetDialogVolumeValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetEditButtonHoldTimeValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetEditButtonHoldTimeValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetEditButtonHoldTimeValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetEditButtonHoldTimeValue");
static_assert(sizeof(FortSettingsContext_GetEditButtonHoldTimeValue) == 0x000004, "Wrong size on FortSettingsContext_GetEditButtonHoldTimeValue");
static_assert(offsetof(FortSettingsContext_GetEditButtonHoldTimeValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetEditButtonHoldTimeValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetEditModeAimAssistState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetEditModeAimAssistState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetEditModeAimAssistState) == 0x000001, "Wrong alignment on FortSettingsContext_GetEditModeAimAssistState");
static_assert(sizeof(FortSettingsContext_GetEditModeAimAssistState) == 0x000001, "Wrong size on FortSettingsContext_GetEditModeAimAssistState");
static_assert(offsetof(FortSettingsContext_GetEditModeAimAssistState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetEditModeAimAssistState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetEnableRudderControl
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetEnableRudderControl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetEnableRudderControl) == 0x000001, "Wrong alignment on FortSettingsContext_GetEnableRudderControl");
static_assert(sizeof(FortSettingsContext_GetEnableRudderControl) == 0x000001, "Wrong size on FortSettingsContext_GetEnableRudderControl");
static_assert(offsetof(FortSettingsContext_GetEnableRudderControl, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetEnableRudderControl::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetEnableTryBuildOnFocus
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetEnableTryBuildOnFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetEnableTryBuildOnFocus) == 0x000001, "Wrong alignment on FortSettingsContext_GetEnableTryBuildOnFocus");
static_assert(sizeof(FortSettingsContext_GetEnableTryBuildOnFocus) == 0x000001, "Wrong size on FortSettingsContext_GetEnableTryBuildOnFocus");
static_assert(offsetof(FortSettingsContext_GetEnableTryBuildOnFocus, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetEnableTryBuildOnFocus::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetFirstPersonCameraState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetFirstPersonCameraState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetFirstPersonCameraState) == 0x000001, "Wrong alignment on FortSettingsContext_GetFirstPersonCameraState");
static_assert(sizeof(FortSettingsContext_GetFirstPersonCameraState) == 0x000001, "Wrong size on FortSettingsContext_GetFirstPersonCameraState");
static_assert(offsetof(FortSettingsContext_GetFirstPersonCameraState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetFirstPersonCameraState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetFocusOnFirstBuildingPieceWhenQuickbarSwappedState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedState) == 0x000001, "Wrong alignment on FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedState");
static_assert(sizeof(FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedState) == 0x000001, "Wrong size on FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedState");
static_assert(offsetof(FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetFocusOnFirstBuildingPieceWhenQuickbarSwappedStateAthena
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedStateAthena final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedStateAthena) == 0x000001, "Wrong alignment on FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedStateAthena");
static_assert(sizeof(FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedStateAthena) == 0x000001, "Wrong size on FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedStateAthena");
static_assert(offsetof(FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedStateAthena, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetFocusOnFirstBuildingPieceWhenQuickbarSwappedStateAthena::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetForceFeedbackState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetForceFeedbackState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetForceFeedbackState) == 0x000001, "Wrong alignment on FortSettingsContext_GetForceFeedbackState");
static_assert(sizeof(FortSettingsContext_GetForceFeedbackState) == 0x000001, "Wrong size on FortSettingsContext_GetForceFeedbackState");
static_assert(offsetof(FortSettingsContext_GetForceFeedbackState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetForceFeedbackState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetGamepadAutoRunState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetGamepadAutoRunState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetGamepadAutoRunState) == 0x000001, "Wrong alignment on FortSettingsContext_GetGamepadAutoRunState");
static_assert(sizeof(FortSettingsContext_GetGamepadAutoRunState) == 0x000001, "Wrong size on FortSettingsContext_GetGamepadAutoRunState");
static_assert(offsetof(FortSettingsContext_GetGamepadAutoRunState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetGamepadAutoRunState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetGamepadBuildingMultiplierValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetGamepadBuildingMultiplierValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetGamepadBuildingMultiplierValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetGamepadBuildingMultiplierValue");
static_assert(sizeof(FortSettingsContext_GetGamepadBuildingMultiplierValue) == 0x000004, "Wrong size on FortSettingsContext_GetGamepadBuildingMultiplierValue");
static_assert(offsetof(FortSettingsContext_GetGamepadBuildingMultiplierValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetGamepadBuildingMultiplierValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetGamepadEditModeMultiplierValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetGamepadEditModeMultiplierValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetGamepadEditModeMultiplierValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetGamepadEditModeMultiplierValue");
static_assert(sizeof(FortSettingsContext_GetGamepadEditModeMultiplierValue) == 0x000004, "Wrong size on FortSettingsContext_GetGamepadEditModeMultiplierValue");
static_assert(offsetof(FortSettingsContext_GetGamepadEditModeMultiplierValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetGamepadEditModeMultiplierValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetGamepadLookSensitivityValue
// 0x0008 (0x0008 - 0x0000)
struct FortSettingsContext_GetGamepadLookSensitivityValue final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetGamepadLookSensitivityValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetGamepadLookSensitivityValue");
static_assert(sizeof(FortSettingsContext_GetGamepadLookSensitivityValue) == 0x000008, "Wrong size on FortSettingsContext_GetGamepadLookSensitivityValue");
static_assert(offsetof(FortSettingsContext_GetGamepadLookSensitivityValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetGamepadLookSensitivityValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetGamepadLookStickDeadZone
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetGamepadLookStickDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetGamepadLookStickDeadZone) == 0x000004, "Wrong alignment on FortSettingsContext_GetGamepadLookStickDeadZone");
static_assert(sizeof(FortSettingsContext_GetGamepadLookStickDeadZone) == 0x000004, "Wrong size on FortSettingsContext_GetGamepadLookStickDeadZone");
static_assert(offsetof(FortSettingsContext_GetGamepadLookStickDeadZone, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetGamepadLookStickDeadZone::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetGamepadMoveStickDeadZone
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetGamepadMoveStickDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetGamepadMoveStickDeadZone) == 0x000004, "Wrong alignment on FortSettingsContext_GetGamepadMoveStickDeadZone");
static_assert(sizeof(FortSettingsContext_GetGamepadMoveStickDeadZone) == 0x000004, "Wrong size on FortSettingsContext_GetGamepadMoveStickDeadZone");
static_assert(offsetof(FortSettingsContext_GetGamepadMoveStickDeadZone, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetGamepadMoveStickDeadZone::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetGamepadScopedMultiplierValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetGamepadScopedMultiplierValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetGamepadScopedMultiplierValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetGamepadScopedMultiplierValue");
static_assert(sizeof(FortSettingsContext_GetGamepadScopedMultiplierValue) == 0x000004, "Wrong size on FortSettingsContext_GetGamepadScopedMultiplierValue");
static_assert(offsetof(FortSettingsContext_GetGamepadScopedMultiplierValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetGamepadScopedMultiplierValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetGamepadTargetingMultiplierValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetGamepadTargetingMultiplierValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetGamepadTargetingMultiplierValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetGamepadTargetingMultiplierValue");
static_assert(sizeof(FortSettingsContext_GetGamepadTargetingMultiplierValue) == 0x000004, "Wrong size on FortSettingsContext_GetGamepadTargetingMultiplierValue");
static_assert(offsetof(FortSettingsContext_GetGamepadTargetingMultiplierValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetGamepadTargetingMultiplierValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetGammaSettings
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetGammaSettings final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetGammaSettings) == 0x000004, "Wrong alignment on FortSettingsContext_GetGammaSettings");
static_assert(sizeof(FortSettingsContext_GetGammaSettings) == 0x000004, "Wrong size on FortSettingsContext_GetGammaSettings");
static_assert(offsetof(FortSettingsContext_GetGammaSettings, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetGammaSettings::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetGyroSensitivityValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetGyroSensitivityValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetGyroSensitivityValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetGyroSensitivityValue");
static_assert(sizeof(FortSettingsContext_GetGyroSensitivityValue) == 0x000004, "Wrong size on FortSettingsContext_GetGyroSensitivityValue");
static_assert(offsetof(FortSettingsContext_GetGyroSensitivityValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetGyroSensitivityValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetHiddenMatchmakingDelayMax
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetHiddenMatchmakingDelayMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetHiddenMatchmakingDelayMax) == 0x000004, "Wrong alignment on FortSettingsContext_GetHiddenMatchmakingDelayMax");
static_assert(sizeof(FortSettingsContext_GetHiddenMatchmakingDelayMax) == 0x000004, "Wrong size on FortSettingsContext_GetHiddenMatchmakingDelayMax");
static_assert(offsetof(FortSettingsContext_GetHiddenMatchmakingDelayMax, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetHiddenMatchmakingDelayMax::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetHideOtherPlayerNames
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetHideOtherPlayerNames final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetHideOtherPlayerNames) == 0x000001, "Wrong alignment on FortSettingsContext_GetHideOtherPlayerNames");
static_assert(sizeof(FortSettingsContext_GetHideOtherPlayerNames) == 0x000001, "Wrong size on FortSettingsContext_GetHideOtherPlayerNames");
static_assert(offsetof(FortSettingsContext_GetHideOtherPlayerNames, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetHideOtherPlayerNames::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetHoldToSwapPickupState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetHoldToSwapPickupState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetHoldToSwapPickupState) == 0x000001, "Wrong alignment on FortSettingsContext_GetHoldToSwapPickupState");
static_assert(sizeof(FortSettingsContext_GetHoldToSwapPickupState) == 0x000001, "Wrong size on FortSettingsContext_GetHoldToSwapPickupState");
static_assert(offsetof(FortSettingsContext_GetHoldToSwapPickupState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetHoldToSwapPickupState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetHUDScale
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetHUDScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetHUDScale) == 0x000004, "Wrong alignment on FortSettingsContext_GetHUDScale");
static_assert(sizeof(FortSettingsContext_GetHUDScale) == 0x000004, "Wrong size on FortSettingsContext_GetHUDScale");
static_assert(offsetof(FortSettingsContext_GetHUDScale, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetHUDScale::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetIgnoreGamepadInput
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetIgnoreGamepadInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetIgnoreGamepadInput) == 0x000001, "Wrong alignment on FortSettingsContext_GetIgnoreGamepadInput");
static_assert(sizeof(FortSettingsContext_GetIgnoreGamepadInput) == 0x000001, "Wrong size on FortSettingsContext_GetIgnoreGamepadInput");
static_assert(offsetof(FortSettingsContext_GetIgnoreGamepadInput, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetIgnoreGamepadInput::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLargeTeamsReplayRecordingEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetLargeTeamsReplayRecordingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLargeTeamsReplayRecordingEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetLargeTeamsReplayRecordingEnabled");
static_assert(sizeof(FortSettingsContext_GetLargeTeamsReplayRecordingEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetLargeTeamsReplayRecordingEnabled");
static_assert(offsetof(FortSettingsContext_GetLargeTeamsReplayRecordingEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLargeTeamsReplayRecordingEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetLockPrimaryInputMethodToMouse
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetLockPrimaryInputMethodToMouse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetLockPrimaryInputMethodToMouse) == 0x000001, "Wrong alignment on FortSettingsContext_GetLockPrimaryInputMethodToMouse");
static_assert(sizeof(FortSettingsContext_GetLockPrimaryInputMethodToMouse) == 0x000001, "Wrong size on FortSettingsContext_GetLockPrimaryInputMethodToMouse");
static_assert(offsetof(FortSettingsContext_GetLockPrimaryInputMethodToMouse, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetLockPrimaryInputMethodToMouse::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMaxQualityLevel
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetMaxQualityLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMaxQualityLevel) == 0x000004, "Wrong alignment on FortSettingsContext_GetMaxQualityLevel");
static_assert(sizeof(FortSettingsContext_GetMaxQualityLevel) == 0x000004, "Wrong size on FortSettingsContext_GetMaxQualityLevel");
static_assert(offsetof(FortSettingsContext_GetMaxQualityLevel, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMaxQualityLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMotionAxisValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetMotionAxisValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMotionAxisValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetMotionAxisValue");
static_assert(sizeof(FortSettingsContext_GetMotionAxisValue) == 0x000004, "Wrong size on FortSettingsContext_GetMotionAxisValue");
static_assert(offsetof(FortSettingsContext_GetMotionAxisValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMotionAxisValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMotionControlsEnabledValue
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetMotionControlsEnabledValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMotionControlsEnabledValue) == 0x000001, "Wrong alignment on FortSettingsContext_GetMotionControlsEnabledValue");
static_assert(sizeof(FortSettingsContext_GetMotionControlsEnabledValue) == 0x000001, "Wrong size on FortSettingsContext_GetMotionControlsEnabledValue");
static_assert(offsetof(FortSettingsContext_GetMotionControlsEnabledValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMotionControlsEnabledValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMotionHarvestingToolMultiplierValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetMotionHarvestingToolMultiplierValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMotionHarvestingToolMultiplierValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetMotionHarvestingToolMultiplierValue");
static_assert(sizeof(FortSettingsContext_GetMotionHarvestingToolMultiplierValue) == 0x000004, "Wrong size on FortSettingsContext_GetMotionHarvestingToolMultiplierValue");
static_assert(offsetof(FortSettingsContext_GetMotionHarvestingToolMultiplierValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMotionHarvestingToolMultiplierValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMotionScopedMultiplierValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetMotionScopedMultiplierValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMotionScopedMultiplierValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetMotionScopedMultiplierValue");
static_assert(sizeof(FortSettingsContext_GetMotionScopedMultiplierValue) == 0x000004, "Wrong size on FortSettingsContext_GetMotionScopedMultiplierValue");
static_assert(offsetof(FortSettingsContext_GetMotionScopedMultiplierValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMotionScopedMultiplierValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMotionTargetingMultiplierValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetMotionTargetingMultiplierValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMotionTargetingMultiplierValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetMotionTargetingMultiplierValue");
static_assert(sizeof(FortSettingsContext_GetMotionTargetingMultiplierValue) == 0x000004, "Wrong size on FortSettingsContext_GetMotionTargetingMultiplierValue");
static_assert(offsetof(FortSettingsContext_GetMotionTargetingMultiplierValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMotionTargetingMultiplierValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMouseSensitivityMultiplierForAircraft
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetMouseSensitivityMultiplierForAircraft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMouseSensitivityMultiplierForAircraft) == 0x000004, "Wrong alignment on FortSettingsContext_GetMouseSensitivityMultiplierForAircraft");
static_assert(sizeof(FortSettingsContext_GetMouseSensitivityMultiplierForAircraft) == 0x000004, "Wrong size on FortSettingsContext_GetMouseSensitivityMultiplierForAircraft");
static_assert(offsetof(FortSettingsContext_GetMouseSensitivityMultiplierForAircraft, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMouseSensitivityMultiplierForAircraft::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMouseSensitivityValue
// 0x0008 (0x0008 - 0x0000)
struct FortSettingsContext_GetMouseSensitivityValue final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMouseSensitivityValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetMouseSensitivityValue");
static_assert(sizeof(FortSettingsContext_GetMouseSensitivityValue) == 0x000008, "Wrong size on FortSettingsContext_GetMouseSensitivityValue");
static_assert(offsetof(FortSettingsContext_GetMouseSensitivityValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMouseSensitivityValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetMusicVolumeValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetMusicVolumeValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetMusicVolumeValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetMusicVolumeValue");
static_assert(sizeof(FortSettingsContext_GetMusicVolumeValue) == 0x000004, "Wrong size on FortSettingsContext_GetMusicVolumeValue");
static_assert(offsetof(FortSettingsContext_GetMusicVolumeValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetMusicVolumeValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetNotifyUsersWhenPlaying
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetNotifyUsersWhenPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetNotifyUsersWhenPlaying) == 0x000001, "Wrong alignment on FortSettingsContext_GetNotifyUsersWhenPlaying");
static_assert(sizeof(FortSettingsContext_GetNotifyUsersWhenPlaying) == 0x000001, "Wrong size on FortSettingsContext_GetNotifyUsersWhenPlaying");
static_assert(offsetof(FortSettingsContext_GetNotifyUsersWhenPlaying, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetNotifyUsersWhenPlaying::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetPeripheralLightingEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetPeripheralLightingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetPeripheralLightingEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetPeripheralLightingEnabled");
static_assert(sizeof(FortSettingsContext_GetPeripheralLightingEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetPeripheralLightingEnabled");
static_assert(offsetof(FortSettingsContext_GetPeripheralLightingEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetPeripheralLightingEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetPitchForAircraftPrimaryInversionState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetPitchForAircraftPrimaryInversionState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetPitchForAircraftPrimaryInversionState) == 0x000001, "Wrong alignment on FortSettingsContext_GetPitchForAircraftPrimaryInversionState");
static_assert(sizeof(FortSettingsContext_GetPitchForAircraftPrimaryInversionState) == 0x000001, "Wrong size on FortSettingsContext_GetPitchForAircraftPrimaryInversionState");
static_assert(offsetof(FortSettingsContext_GetPitchForAircraftPrimaryInversionState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetPitchForAircraftPrimaryInversionState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetPitchForAircraftSecondaryInversionState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetPitchForAircraftSecondaryInversionState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetPitchForAircraftSecondaryInversionState) == 0x000001, "Wrong alignment on FortSettingsContext_GetPitchForAircraftSecondaryInversionState");
static_assert(sizeof(FortSettingsContext_GetPitchForAircraftSecondaryInversionState) == 0x000001, "Wrong size on FortSettingsContext_GetPitchForAircraftSecondaryInversionState");
static_assert(offsetof(FortSettingsContext_GetPitchForAircraftSecondaryInversionState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetPitchForAircraftSecondaryInversionState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetPitchForMotionInversionState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetPitchForMotionInversionState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetPitchForMotionInversionState) == 0x000001, "Wrong alignment on FortSettingsContext_GetPitchForMotionInversionState");
static_assert(sizeof(FortSettingsContext_GetPitchForMotionInversionState) == 0x000001, "Wrong size on FortSettingsContext_GetPitchForMotionInversionState");
static_assert(offsetof(FortSettingsContext_GetPitchForMotionInversionState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetPitchForMotionInversionState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetPitchInversionState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetPitchInversionState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetPitchInversionState) == 0x000001, "Wrong alignment on FortSettingsContext_GetPitchInversionState");
static_assert(sizeof(FortSettingsContext_GetPitchInversionState) == 0x000001, "Wrong size on FortSettingsContext_GetPitchInversionState");
static_assert(offsetof(FortSettingsContext_GetPitchInversionState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetPitchInversionState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetPlaceDangerMarkerWhenTargeting
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetPlaceDangerMarkerWhenTargeting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetPlaceDangerMarkerWhenTargeting) == 0x000001, "Wrong alignment on FortSettingsContext_GetPlaceDangerMarkerWhenTargeting");
static_assert(sizeof(FortSettingsContext_GetPlaceDangerMarkerWhenTargeting) == 0x000001, "Wrong size on FortSettingsContext_GetPlaceDangerMarkerWhenTargeting");
static_assert(offsetof(FortSettingsContext_GetPlaceDangerMarkerWhenTargeting, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetPlaceDangerMarkerWhenTargeting::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetPlayerSurveysAllowed
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetPlayerSurveysAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetPlayerSurveysAllowed) == 0x000001, "Wrong alignment on FortSettingsContext_GetPlayerSurveysAllowed");
static_assert(sizeof(FortSettingsContext_GetPlayerSurveysAllowed) == 0x000001, "Wrong size on FortSettingsContext_GetPlayerSurveysAllowed");
static_assert(offsetof(FortSettingsContext_GetPlayerSurveysAllowed, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetPlayerSurveysAllowed::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetPowerSaverMode
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetPowerSaverMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetPowerSaverMode) == 0x000001, "Wrong alignment on FortSettingsContext_GetPowerSaverMode");
static_assert(sizeof(FortSettingsContext_GetPowerSaverMode) == 0x000001, "Wrong size on FortSettingsContext_GetPowerSaverMode");
static_assert(offsetof(FortSettingsContext_GetPowerSaverMode, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetPowerSaverMode::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetQuality
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetQuality) == 0x000004, "Wrong alignment on FortSettingsContext_GetQuality");
static_assert(sizeof(FortSettingsContext_GetQuality) == 0x000004, "Wrong size on FortSettingsContext_GetQuality");
static_assert(offsetof(FortSettingsContext_GetQuality, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetQuality::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetReplayRecordingEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetReplayRecordingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetReplayRecordingEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetReplayRecordingEnabled");
static_assert(sizeof(FortSettingsContext_GetReplayRecordingEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetReplayRecordingEnabled");
static_assert(offsetof(FortSettingsContext_GetReplayRecordingEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetReplayRecordingEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetResolution
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetResolution final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetResolution) == 0x000004, "Wrong alignment on FortSettingsContext_GetResolution");
static_assert(sizeof(FortSettingsContext_GetResolution) == 0x000004, "Wrong size on FortSettingsContext_GetResolution");
static_assert(offsetof(FortSettingsContext_GetResolution, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetResolution::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetRudderDeadZone
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetRudderDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetRudderDeadZone) == 0x000004, "Wrong alignment on FortSettingsContext_GetRudderDeadZone");
static_assert(sizeof(FortSettingsContext_GetRudderDeadZone) == 0x000004, "Wrong size on FortSettingsContext_GetRudderDeadZone");
static_assert(offsetof(FortSettingsContext_GetRudderDeadZone, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetRudderDeadZone::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetRudderMaxThrottle
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetRudderMaxThrottle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetRudderMaxThrottle) == 0x000004, "Wrong alignment on FortSettingsContext_GetRudderMaxThrottle");
static_assert(sizeof(FortSettingsContext_GetRudderMaxThrottle) == 0x000004, "Wrong size on FortSettingsContext_GetRudderMaxThrottle");
static_assert(offsetof(FortSettingsContext_GetRudderMaxThrottle, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetRudderMaxThrottle::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetScopedMultiplierValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetScopedMultiplierValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetScopedMultiplierValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetScopedMultiplierValue");
static_assert(sizeof(FortSettingsContext_GetScopedMultiplierValue) == 0x000004, "Wrong size on FortSettingsContext_GetScopedMultiplierValue");
static_assert(offsetof(FortSettingsContext_GetScopedMultiplierValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetScopedMultiplierValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetShadowPlayHighlightsEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetShadowPlayHighlightsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetShadowPlayHighlightsEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetShadowPlayHighlightsEnabled");
static_assert(sizeof(FortSettingsContext_GetShadowPlayHighlightsEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetShadowPlayHighlightsEnabled");
static_assert(offsetof(FortSettingsContext_GetShadowPlayHighlightsEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetShadowPlayHighlightsEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetShowGlobalChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetShowGlobalChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetShowGlobalChatEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetShowGlobalChatEnabled");
static_assert(sizeof(FortSettingsContext_GetShowGlobalChatEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetShowGlobalChatEnabled");
static_assert(offsetof(FortSettingsContext_GetShowGlobalChatEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetShowGlobalChatEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetShowHeroBackpack
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetShowHeroBackpack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetShowHeroBackpack) == 0x000001, "Wrong alignment on FortSettingsContext_GetShowHeroBackpack");
static_assert(sizeof(FortSettingsContext_GetShowHeroBackpack) == 0x000001, "Wrong size on FortSettingsContext_GetShowHeroBackpack");
static_assert(offsetof(FortSettingsContext_GetShowHeroBackpack, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetShowHeroBackpack::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetShowHeroHeadAccessories
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetShowHeroHeadAccessories final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetShowHeroHeadAccessories) == 0x000001, "Wrong alignment on FortSettingsContext_GetShowHeroHeadAccessories");
static_assert(sizeof(FortSettingsContext_GetShowHeroHeadAccessories) == 0x000001, "Wrong size on FortSettingsContext_GetShowHeroHeadAccessories");
static_assert(offsetof(FortSettingsContext_GetShowHeroHeadAccessories, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetShowHeroHeadAccessories::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetShowViewerCountEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetShowViewerCountEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetShowViewerCountEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetShowViewerCountEnabled");
static_assert(sizeof(FortSettingsContext_GetShowViewerCountEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetShowViewerCountEnabled");
static_assert(offsetof(FortSettingsContext_GetShowViewerCountEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetShowViewerCountEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetShowVoiceIndicators
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetShowVoiceIndicators final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetShowVoiceIndicators) == 0x000001, "Wrong alignment on FortSettingsContext_GetShowVoiceIndicators");
static_assert(sizeof(FortSettingsContext_GetShowVoiceIndicators) == 0x000001, "Wrong size on FortSettingsContext_GetShowVoiceIndicators");
static_assert(offsetof(FortSettingsContext_GetShowVoiceIndicators, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetShowVoiceIndicators::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetSoundFXVolumeValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetSoundFXVolumeValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetSoundFXVolumeValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetSoundFXVolumeValue");
static_assert(sizeof(FortSettingsContext_GetSoundFXVolumeValue) == 0x000004, "Wrong size on FortSettingsContext_GetSoundFXVolumeValue");
static_assert(offsetof(FortSettingsContext_GetSoundFXVolumeValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetSoundFXVolumeValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetSprintByDefaultState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetSprintByDefaultState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetSprintByDefaultState) == 0x000001, "Wrong alignment on FortSettingsContext_GetSprintByDefaultState");
static_assert(sizeof(FortSettingsContext_GetSprintByDefaultState) == 0x000001, "Wrong size on FortSettingsContext_GetSprintByDefaultState");
static_assert(offsetof(FortSettingsContext_GetSprintByDefaultState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetSprintByDefaultState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetSprintCancelsReloadState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetSprintCancelsReloadState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetSprintCancelsReloadState) == 0x000001, "Wrong alignment on FortSettingsContext_GetSprintCancelsReloadState");
static_assert(sizeof(FortSettingsContext_GetSprintCancelsReloadState) == 0x000001, "Wrong size on FortSettingsContext_GetSprintCancelsReloadState");
static_assert(offsetof(FortSettingsContext_GetSprintCancelsReloadState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetSprintCancelsReloadState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetSprintToggleState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetSprintToggleState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetSprintToggleState) == 0x000001, "Wrong alignment on FortSettingsContext_GetSprintToggleState");
static_assert(sizeof(FortSettingsContext_GetSprintToggleState) == 0x000001, "Wrong size on FortSettingsContext_GetSprintToggleState");
static_assert(offsetof(FortSettingsContext_GetSprintToggleState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetSprintToggleState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetSubtitlesEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetSubtitlesEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetSubtitlesEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetSubtitlesEnabled");
static_assert(sizeof(FortSettingsContext_GetSubtitlesEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetSubtitlesEnabled");
static_assert(offsetof(FortSettingsContext_GetSubtitlesEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetSubtitlesEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetTapInteractState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetTapInteractState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetTapInteractState) == 0x000001, "Wrong alignment on FortSettingsContext_GetTapInteractState");
static_assert(sizeof(FortSettingsContext_GetTapInteractState) == 0x000001, "Wrong size on FortSettingsContext_GetTapInteractState");
static_assert(offsetof(FortSettingsContext_GetTapInteractState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetTapInteractState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetTargetingMultiplierValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetTargetingMultiplierValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetTargetingMultiplierValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetTargetingMultiplierValue");
static_assert(sizeof(FortSettingsContext_GetTargetingMultiplierValue) == 0x000004, "Wrong size on FortSettingsContext_GetTargetingMultiplierValue");
static_assert(offsetof(FortSettingsContext_GetTargetingMultiplierValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetTargetingMultiplierValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetTargetingToggleState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetTargetingToggleState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetTargetingToggleState) == 0x000001, "Wrong alignment on FortSettingsContext_GetTargetingToggleState");
static_assert(sizeof(FortSettingsContext_GetTargetingToggleState) == 0x000001, "Wrong size on FortSettingsContext_GetTargetingToggleState");
static_assert(offsetof(FortSettingsContext_GetTargetingToggleState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetTargetingToggleState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetTouchDragScopedSensitivityValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetTouchDragScopedSensitivityValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetTouchDragScopedSensitivityValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetTouchDragScopedSensitivityValue");
static_assert(sizeof(FortSettingsContext_GetTouchDragScopedSensitivityValue) == 0x000004, "Wrong size on FortSettingsContext_GetTouchDragScopedSensitivityValue");
static_assert(offsetof(FortSettingsContext_GetTouchDragScopedSensitivityValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetTouchDragScopedSensitivityValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetTouchEditState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetTouchEditState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetTouchEditState) == 0x000001, "Wrong alignment on FortSettingsContext_GetTouchEditState");
static_assert(sizeof(FortSettingsContext_GetTouchEditState) == 0x000001, "Wrong size on FortSettingsContext_GetTouchEditState");
static_assert(offsetof(FortSettingsContext_GetTouchEditState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetTouchEditState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetTouchLookSensitivityValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetTouchLookSensitivityValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetTouchLookSensitivityValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetTouchLookSensitivityValue");
static_assert(sizeof(FortSettingsContext_GetTouchLookSensitivityValue) == 0x000004, "Wrong size on FortSettingsContext_GetTouchLookSensitivityValue");
static_assert(offsetof(FortSettingsContext_GetTouchLookSensitivityValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetTouchLookSensitivityValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetTouchTargetingMultiplierValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetTouchTargetingMultiplierValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetTouchTargetingMultiplierValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetTouchTargetingMultiplierValue");
static_assert(sizeof(FortSettingsContext_GetTouchTargetingMultiplierValue) == 0x000004, "Wrong size on FortSettingsContext_GetTouchTargetingMultiplierValue");
static_assert(offsetof(FortSettingsContext_GetTouchTargetingMultiplierValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetTouchTargetingMultiplierValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetTouchVerticalSensitivityValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_GetTouchVerticalSensitivityValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetTouchVerticalSensitivityValue) == 0x000004, "Wrong alignment on FortSettingsContext_GetTouchVerticalSensitivityValue");
static_assert(sizeof(FortSettingsContext_GetTouchVerticalSensitivityValue) == 0x000004, "Wrong size on FortSettingsContext_GetTouchVerticalSensitivityValue");
static_assert(offsetof(FortSettingsContext_GetTouchVerticalSensitivityValue, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetTouchVerticalSensitivityValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetTurboBuild
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetTurboBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetTurboBuild) == 0x000001, "Wrong alignment on FortSettingsContext_GetTurboBuild");
static_assert(sizeof(FortSettingsContext_GetTurboBuild) == 0x000001, "Wrong size on FortSettingsContext_GetTurboBuild");
static_assert(offsetof(FortSettingsContext_GetTurboBuild, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetTurboBuild::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetUseTapToShoot
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetUseTapToShoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetUseTapToShoot) == 0x000001, "Wrong alignment on FortSettingsContext_GetUseTapToShoot");
static_assert(sizeof(FortSettingsContext_GetUseTapToShoot) == 0x000001, "Wrong size on FortSettingsContext_GetUseTapToShoot");
static_assert(offsetof(FortSettingsContext_GetUseTapToShoot, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetUseTapToShoot::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetVisualizeAudioSources
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetVisualizeAudioSources final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetVisualizeAudioSources) == 0x000001, "Wrong alignment on FortSettingsContext_GetVisualizeAudioSources");
static_assert(sizeof(FortSettingsContext_GetVisualizeAudioSources) == 0x000001, "Wrong size on FortSettingsContext_GetVisualizeAudioSources");
static_assert(offsetof(FortSettingsContext_GetVisualizeAudioSources, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetVisualizeAudioSources::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetVoiceChat3DEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetVoiceChat3DEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetVoiceChat3DEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetVoiceChat3DEnabled");
static_assert(sizeof(FortSettingsContext_GetVoiceChat3DEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetVoiceChat3DEnabled");
static_assert(offsetof(FortSettingsContext_GetVoiceChat3DEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetVoiceChat3DEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetVoiceChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetVoiceChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetVoiceChatEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetVoiceChatEnabled");
static_assert(sizeof(FortSettingsContext_GetVoiceChatEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetVoiceChatEnabled");
static_assert(offsetof(FortSettingsContext_GetVoiceChatEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetVoiceChatEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetVoiceChatPTTEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetVoiceChatPTTEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetVoiceChatPTTEnabled) == 0x000001, "Wrong alignment on FortSettingsContext_GetVoiceChatPTTEnabled");
static_assert(sizeof(FortSettingsContext_GetVoiceChatPTTEnabled) == 0x000001, "Wrong size on FortSettingsContext_GetVoiceChatPTTEnabled");
static_assert(offsetof(FortSettingsContext_GetVoiceChatPTTEnabled, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetVoiceChatPTTEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetYawForMotionInversionState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetYawForMotionInversionState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetYawForMotionInversionState) == 0x000001, "Wrong alignment on FortSettingsContext_GetYawForMotionInversionState");
static_assert(sizeof(FortSettingsContext_GetYawForMotionInversionState) == 0x000001, "Wrong size on FortSettingsContext_GetYawForMotionInversionState");
static_assert(offsetof(FortSettingsContext_GetYawForMotionInversionState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetYawForMotionInversionState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.GetYawInversionState
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_GetYawInversionState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_GetYawInversionState) == 0x000001, "Wrong alignment on FortSettingsContext_GetYawInversionState");
static_assert(sizeof(FortSettingsContext_GetYawInversionState) == 0x000001, "Wrong size on FortSettingsContext_GetYawInversionState");
static_assert(offsetof(FortSettingsContext_GetYawInversionState, ReturnValue) == 0x000000, "Member 'FortSettingsContext_GetYawInversionState::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.Is60FPSSupportedForCurrentScalability
// 0x0001 (0x0001 - 0x0000)
struct FortSettingsContext_Is60FPSSupportedForCurrentScalability final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_Is60FPSSupportedForCurrentScalability) == 0x000001, "Wrong alignment on FortSettingsContext_Is60FPSSupportedForCurrentScalability");
static_assert(sizeof(FortSettingsContext_Is60FPSSupportedForCurrentScalability) == 0x000001, "Wrong size on FortSettingsContext_Is60FPSSupportedForCurrentScalability");
static_assert(offsetof(FortSettingsContext_Is60FPSSupportedForCurrentScalability, ReturnValue) == 0x000000, "Member 'FortSettingsContext_Is60FPSSupportedForCurrentScalability::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsContext.UpdateGammaSettings
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsContext_UpdateGammaSettings final
{
public:
	float                                         GammaValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsContext_UpdateGammaSettings) == 0x000004, "Wrong alignment on FortSettingsContext_UpdateGammaSettings");
static_assert(sizeof(FortSettingsContext_UpdateGammaSettings) == 0x000004, "Wrong size on FortSettingsContext_UpdateGammaSettings");
static_assert(offsetof(FortSettingsContext_UpdateGammaSettings, GammaValue) == 0x000000, "Member 'FortSettingsContext_UpdateGammaSettings::GammaValue' has a wrong offset!");

// Function FortniteUI.FortSettingsDeadzoneExtension.GetDeadZoneAnalogValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsDeadzoneExtension_GetDeadZoneAnalogValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsDeadzoneExtension_GetDeadZoneAnalogValue) == 0x000004, "Wrong alignment on FortSettingsDeadzoneExtension_GetDeadZoneAnalogValue");
static_assert(sizeof(FortSettingsDeadzoneExtension_GetDeadZoneAnalogValue) == 0x000004, "Wrong size on FortSettingsDeadzoneExtension_GetDeadZoneAnalogValue");
static_assert(offsetof(FortSettingsDeadzoneExtension_GetDeadZoneAnalogValue, ReturnValue) == 0x000000, "Member 'FortSettingsDeadzoneExtension_GetDeadZoneAnalogValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsDeadzoneExtension.GetLiveAnalogValue
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsDeadzoneExtension_GetLiveAnalogValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsDeadzoneExtension_GetLiveAnalogValue) == 0x000004, "Wrong alignment on FortSettingsDeadzoneExtension_GetLiveAnalogValue");
static_assert(sizeof(FortSettingsDeadzoneExtension_GetLiveAnalogValue) == 0x000004, "Wrong size on FortSettingsDeadzoneExtension_GetLiveAnalogValue");
static_assert(offsetof(FortSettingsDeadzoneExtension_GetLiveAnalogValue, ReturnValue) == 0x000000, "Member 'FortSettingsDeadzoneExtension_GetLiveAnalogValue::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTrapDefenderItemPicker.HandleSelectionCommittedBP
// 0x0008 (0x0008 - 0x0000)
struct FortTrapDefenderItemPicker_HandleSelectionCommittedBP final
{
public:
	class UFortItem*                              CommittedItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrapDefenderItemPicker_HandleSelectionCommittedBP) == 0x000008, "Wrong alignment on FortTrapDefenderItemPicker_HandleSelectionCommittedBP");
static_assert(sizeof(FortTrapDefenderItemPicker_HandleSelectionCommittedBP) == 0x000008, "Wrong size on FortTrapDefenderItemPicker_HandleSelectionCommittedBP");
static_assert(offsetof(FortTrapDefenderItemPicker_HandleSelectionCommittedBP, CommittedItem) == 0x000000, "Member 'FortTrapDefenderItemPicker_HandleSelectionCommittedBP::CommittedItem' has a wrong offset!");

// Function FortniteUI.FortSettingsListEntrySetting_Scalar.HandleSliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsListEntrySetting_Scalar_HandleSliderValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsListEntrySetting_Scalar_HandleSliderValueChanged) == 0x000004, "Wrong alignment on FortSettingsListEntrySetting_Scalar_HandleSliderValueChanged");
static_assert(sizeof(FortSettingsListEntrySetting_Scalar_HandleSliderValueChanged) == 0x000004, "Wrong size on FortSettingsListEntrySetting_Scalar_HandleSliderValueChanged");
static_assert(offsetof(FortSettingsListEntrySetting_Scalar_HandleSliderValueChanged, Value) == 0x000000, "Member 'FortSettingsListEntrySetting_Scalar_HandleSliderValueChanged::Value' has a wrong offset!");

// Function FortniteUI.FortSettingsListEntrySetting_Scalar.OnValueChanged
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsListEntrySetting_Scalar_OnValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsListEntrySetting_Scalar_OnValueChanged) == 0x000004, "Wrong alignment on FortSettingsListEntrySetting_Scalar_OnValueChanged");
static_assert(sizeof(FortSettingsListEntrySetting_Scalar_OnValueChanged) == 0x000004, "Wrong size on FortSettingsListEntrySetting_Scalar_OnValueChanged");
static_assert(offsetof(FortSettingsListEntrySetting_Scalar_OnValueChanged, Value) == 0x000000, "Member 'FortSettingsListEntrySetting_Scalar_OnValueChanged::Value' has a wrong offset!");

// Function FortniteUI.FortSettingsListEntrySetting_KeyboardInput.OnUpdateKeyText
// 0x0030 (0x0030 - 0x0000)
struct FortSettingsListEntrySetting_KeyboardInput_OnUpdateKeyText final
{
public:
	class FText                                   PrimaryKeyText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   SecondaryKeyText;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsListEntrySetting_KeyboardInput_OnUpdateKeyText) == 0x000008, "Wrong alignment on FortSettingsListEntrySetting_KeyboardInput_OnUpdateKeyText");
static_assert(sizeof(FortSettingsListEntrySetting_KeyboardInput_OnUpdateKeyText) == 0x000030, "Wrong size on FortSettingsListEntrySetting_KeyboardInput_OnUpdateKeyText");
static_assert(offsetof(FortSettingsListEntrySetting_KeyboardInput_OnUpdateKeyText, PrimaryKeyText) == 0x000000, "Member 'FortSettingsListEntrySetting_KeyboardInput_OnUpdateKeyText::PrimaryKeyText' has a wrong offset!");
static_assert(offsetof(FortSettingsListEntrySetting_KeyboardInput_OnUpdateKeyText, SecondaryKeyText) == 0x000018, "Member 'FortSettingsListEntrySetting_KeyboardInput_OnUpdateKeyText::SecondaryKeyText' has a wrong offset!");

// Function FortniteUI.FortSettingsListEntrySetting_Action.OnSettingAssigned
// 0x0018 (0x0018 - 0x0000)
struct FortSettingsListEntrySetting_Action_OnSettingAssigned final
{
public:
	class FText                                   ActionText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsListEntrySetting_Action_OnSettingAssigned) == 0x000008, "Wrong alignment on FortSettingsListEntrySetting_Action_OnSettingAssigned");
static_assert(sizeof(FortSettingsListEntrySetting_Action_OnSettingAssigned) == 0x000018, "Wrong size on FortSettingsListEntrySetting_Action_OnSettingAssigned");
static_assert(offsetof(FortSettingsListEntrySetting_Action_OnSettingAssigned, ActionText) == 0x000000, "Member 'FortSettingsListEntrySetting_Action_OnSettingAssigned::ActionText' has a wrong offset!");

// Function FortniteUI.FortSettingsListEntrySetting_ControllerButton.GetPopupMenu
// 0x0008 (0x0008 - 0x0000)
struct FortSettingsListEntrySetting_ControllerButton_GetPopupMenu final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsListEntrySetting_ControllerButton_GetPopupMenu) == 0x000008, "Wrong alignment on FortSettingsListEntrySetting_ControllerButton_GetPopupMenu");
static_assert(sizeof(FortSettingsListEntrySetting_ControllerButton_GetPopupMenu) == 0x000008, "Wrong size on FortSettingsListEntrySetting_ControllerButton_GetPopupMenu");
static_assert(offsetof(FortSettingsListEntrySetting_ControllerButton_GetPopupMenu, ReturnValue) == 0x000000, "Member 'FortSettingsListEntrySetting_ControllerButton_GetPopupMenu::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingsListEntrySetting_ControllerButton.OnSettingAssigned
// 0x0018 (0x0018 - 0x0000)
struct FortSettingsListEntrySetting_ControllerButton_OnSettingAssigned final
{
public:
	class FText                                   ActionText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsListEntrySetting_ControllerButton_OnSettingAssigned) == 0x000008, "Wrong alignment on FortSettingsListEntrySetting_ControllerButton_OnSettingAssigned");
static_assert(sizeof(FortSettingsListEntrySetting_ControllerButton_OnSettingAssigned) == 0x000018, "Wrong size on FortSettingsListEntrySetting_ControllerButton_OnSettingAssigned");
static_assert(offsetof(FortSettingsListEntrySetting_ControllerButton_OnSettingAssigned, ActionText) == 0x000000, "Member 'FortSettingsListEntrySetting_ControllerButton_OnSettingAssigned::ActionText' has a wrong offset!");

// DelegateFunction FortniteUI.FortSettingsListView.OnExecuteNamedAction__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FortSettingsListView_OnExecuteNamedAction__DelegateSignature final
{
public:
	class UFortSetting*                           Setting;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsListView_OnExecuteNamedAction__DelegateSignature) == 0x000008, "Wrong alignment on FortSettingsListView_OnExecuteNamedAction__DelegateSignature");
static_assert(sizeof(FortSettingsListView_OnExecuteNamedAction__DelegateSignature) == 0x000010, "Wrong size on FortSettingsListView_OnExecuteNamedAction__DelegateSignature");
static_assert(offsetof(FortSettingsListView_OnExecuteNamedAction__DelegateSignature, Setting) == 0x000000, "Member 'FortSettingsListView_OnExecuteNamedAction__DelegateSignature::Setting' has a wrong offset!");
static_assert(offsetof(FortSettingsListView_OnExecuteNamedAction__DelegateSignature, Action) == 0x000008, "Member 'FortSettingsListView_OnExecuteNamedAction__DelegateSignature::Action' has a wrong offset!");

// Function FortniteUI.FortSettingsRotator.BP_OnDefaultOptionSpecified
// 0x0004 (0x0004 - 0x0000)
struct FortSettingsRotator_BP_OnDefaultOptionSpecified final
{
public:
	int32                                         DefaultOptionIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingsRotator_BP_OnDefaultOptionSpecified) == 0x000004, "Wrong alignment on FortSettingsRotator_BP_OnDefaultOptionSpecified");
static_assert(sizeof(FortSettingsRotator_BP_OnDefaultOptionSpecified) == 0x000004, "Wrong size on FortSettingsRotator_BP_OnDefaultOptionSpecified");
static_assert(offsetof(FortSettingsRotator_BP_OnDefaultOptionSpecified, DefaultOptionIndex) == 0x000000, "Member 'FortSettingsRotator_BP_OnDefaultOptionSpecified::DefaultOptionIndex' has a wrong offset!");

// Function FortniteUI.FortSettingValueDiscrete.GetDiscreteOptionDefaultIndex
// 0x0004 (0x0004 - 0x0000)
struct FortSettingValueDiscrete_GetDiscreteOptionDefaultIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingValueDiscrete_GetDiscreteOptionDefaultIndex) == 0x000004, "Wrong alignment on FortSettingValueDiscrete_GetDiscreteOptionDefaultIndex");
static_assert(sizeof(FortSettingValueDiscrete_GetDiscreteOptionDefaultIndex) == 0x000004, "Wrong size on FortSettingValueDiscrete_GetDiscreteOptionDefaultIndex");
static_assert(offsetof(FortSettingValueDiscrete_GetDiscreteOptionDefaultIndex, ReturnValue) == 0x000000, "Member 'FortSettingValueDiscrete_GetDiscreteOptionDefaultIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingValueDiscrete.GetDiscreteOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct FortSettingValueDiscrete_GetDiscreteOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingValueDiscrete_GetDiscreteOptionIndex) == 0x000004, "Wrong alignment on FortSettingValueDiscrete_GetDiscreteOptionIndex");
static_assert(sizeof(FortSettingValueDiscrete_GetDiscreteOptionIndex) == 0x000004, "Wrong size on FortSettingValueDiscrete_GetDiscreteOptionIndex");
static_assert(offsetof(FortSettingValueDiscrete_GetDiscreteOptionIndex, ReturnValue) == 0x000000, "Member 'FortSettingValueDiscrete_GetDiscreteOptionIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSettingValueDiscrete.GetDiscreteOptions
// 0x0010 (0x0010 - 0x0000)
struct FortSettingValueDiscrete_GetDiscreteOptions final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSettingValueDiscrete_GetDiscreteOptions) == 0x000008, "Wrong alignment on FortSettingValueDiscrete_GetDiscreteOptions");
static_assert(sizeof(FortSettingValueDiscrete_GetDiscreteOptions) == 0x000010, "Wrong size on FortSettingValueDiscrete_GetDiscreteOptions");
static_assert(offsetof(FortSettingValueDiscrete_GetDiscreteOptions, ReturnValue) == 0x000000, "Member 'FortSettingValueDiscrete_GetDiscreteOptions::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSocialPanelView_UserLists.HandleNextTabAction
// 0x0001 (0x0001 - 0x0000)
struct FortSocialPanelView_UserLists_HandleNextTabAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialPanelView_UserLists_HandleNextTabAction) == 0x000001, "Wrong alignment on FortSocialPanelView_UserLists_HandleNextTabAction");
static_assert(sizeof(FortSocialPanelView_UserLists_HandleNextTabAction) == 0x000001, "Wrong size on FortSocialPanelView_UserLists_HandleNextTabAction");
static_assert(offsetof(FortSocialPanelView_UserLists_HandleNextTabAction, bPassThrough) == 0x000000, "Member 'FortSocialPanelView_UserLists_HandleNextTabAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortSocialPanelView_UserLists.HandlePrevTabAction
// 0x0001 (0x0001 - 0x0000)
struct FortSocialPanelView_UserLists_HandlePrevTabAction final
{
public:
	bool                                          bPassThrough;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialPanelView_UserLists_HandlePrevTabAction) == 0x000001, "Wrong alignment on FortSocialPanelView_UserLists_HandlePrevTabAction");
static_assert(sizeof(FortSocialPanelView_UserLists_HandlePrevTabAction) == 0x000001, "Wrong size on FortSocialPanelView_UserLists_HandlePrevTabAction");
static_assert(offsetof(FortSocialPanelView_UserLists_HandlePrevTabAction, bPassThrough) == 0x000000, "Member 'FortSocialPanelView_UserLists_HandlePrevTabAction::bPassThrough' has a wrong offset!");

// Function FortniteUI.FortSocialPanelView_UserLists.OnSetVoiceChannelButtonText
// 0x0018 (0x0018 - 0x0000)
struct FortSocialPanelView_UserLists_OnSetVoiceChannelButtonText final
{
public:
	class FText                                   ButtonText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialPanelView_UserLists_OnSetVoiceChannelButtonText) == 0x000008, "Wrong alignment on FortSocialPanelView_UserLists_OnSetVoiceChannelButtonText");
static_assert(sizeof(FortSocialPanelView_UserLists_OnSetVoiceChannelButtonText) == 0x000018, "Wrong size on FortSocialPanelView_UserLists_OnSetVoiceChannelButtonText");
static_assert(offsetof(FortSocialPanelView_UserLists_OnSetVoiceChannelButtonText, ButtonText) == 0x000000, "Member 'FortSocialPanelView_UserLists_OnSetVoiceChannelButtonText::ButtonText' has a wrong offset!");

// Function FortniteUI.FortSubGameTile.RefreshSubGameDisplay
// 0x0098 (0x0098 - 0x0000)
struct FortSubGameTile_RefreshSubGameDisplay final
{
public:
	struct FSubgameDisplayData                    SubGame;                                           // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSubGameTile_RefreshSubGameDisplay) == 0x000008, "Wrong alignment on FortSubGameTile_RefreshSubGameDisplay");
static_assert(sizeof(FortSubGameTile_RefreshSubGameDisplay) == 0x000098, "Wrong size on FortSubGameTile_RefreshSubGameDisplay");
static_assert(offsetof(FortSubGameTile_RefreshSubGameDisplay, SubGame) == 0x000000, "Member 'FortSubGameTile_RefreshSubGameDisplay::SubGame' has a wrong offset!");

// Function FortniteUI.FortSubGameTile.SetSubGame
// 0x0098 (0x0098 - 0x0000)
struct FortSubGameTile_SetSubGame final
{
public:
	struct FSubgameDisplayData                    SubGame;                                           // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSubGameTile_SetSubGame) == 0x000008, "Wrong alignment on FortSubGameTile_SetSubGame");
static_assert(sizeof(FortSubGameTile_SetSubGame) == 0x000098, "Wrong size on FortSubGameTile_SetSubGame");
static_assert(offsetof(FortSubGameTile_SetSubGame, SubGame) == 0x000000, "Member 'FortSubGameTile_SetSubGame::SubGame' has a wrong offset!");

// Function FortniteUI.FortTournamentLiveGames.NotifyLoadingMoreGames
// 0x0001 (0x0001 - 0x0000)
struct FortTournamentLiveGames_NotifyLoadingMoreGames final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTournamentLiveGames_NotifyLoadingMoreGames) == 0x000001, "Wrong alignment on FortTournamentLiveGames_NotifyLoadingMoreGames");
static_assert(sizeof(FortTournamentLiveGames_NotifyLoadingMoreGames) == 0x000001, "Wrong size on FortTournamentLiveGames_NotifyLoadingMoreGames");
static_assert(offsetof(FortTournamentLiveGames_NotifyLoadingMoreGames, bIsLoading) == 0x000000, "Member 'FortTournamentLiveGames_NotifyLoadingMoreGames::bIsLoading' has a wrong offset!");

// Function FortniteUI.FortTournamentLiveGames.SetTournamentIds
// 0x0020 (0x0020 - 0x0000)
struct FortTournamentLiveGames_SetTournamentIds final
{
public:
	class FString                                 InTournamentId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InEventWindowId;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTournamentLiveGames_SetTournamentIds) == 0x000008, "Wrong alignment on FortTournamentLiveGames_SetTournamentIds");
static_assert(sizeof(FortTournamentLiveGames_SetTournamentIds) == 0x000020, "Wrong size on FortTournamentLiveGames_SetTournamentIds");
static_assert(offsetof(FortTournamentLiveGames_SetTournamentIds, InTournamentId) == 0x000000, "Member 'FortTournamentLiveGames_SetTournamentIds::InTournamentId' has a wrong offset!");
static_assert(offsetof(FortTournamentLiveGames_SetTournamentIds, InEventWindowId) == 0x000010, "Member 'FortTournamentLiveGames_SetTournamentIds::InEventWindowId' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionRankButton.OnRankButtonSelected
// 0x0001 (0x0001 - 0x0000)
struct FortShowdownDivisionRankButton_OnRankButtonSelected final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownDivisionRankButton_OnRankButtonSelected) == 0x000001, "Wrong alignment on FortShowdownDivisionRankButton_OnRankButtonSelected");
static_assert(sizeof(FortShowdownDivisionRankButton_OnRankButtonSelected) == 0x000001, "Wrong size on FortShowdownDivisionRankButton_OnRankButtonSelected");
static_assert(offsetof(FortShowdownDivisionRankButton_OnRankButtonSelected, bIsSelected) == 0x000000, "Member 'FortShowdownDivisionRankButton_OnRankButtonSelected::bIsSelected' has a wrong offset!");

// Function FortniteUI.FortShowdownDivisionRankProgressView.OnSetInProgress
// 0x0008 (0x0008 - 0x0000)
struct FortShowdownDivisionRankProgressView_OnSetInProgress final
{
public:
	float                                         NewPercent;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInProgress;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortShowdownDivisionRankProgressView_OnSetInProgress) == 0x000004, "Wrong alignment on FortShowdownDivisionRankProgressView_OnSetInProgress");
static_assert(sizeof(FortShowdownDivisionRankProgressView_OnSetInProgress) == 0x000008, "Wrong size on FortShowdownDivisionRankProgressView_OnSetInProgress");
static_assert(offsetof(FortShowdownDivisionRankProgressView_OnSetInProgress, NewPercent) == 0x000000, "Member 'FortShowdownDivisionRankProgressView_OnSetInProgress::NewPercent' has a wrong offset!");
static_assert(offsetof(FortShowdownDivisionRankProgressView_OnSetInProgress, bIsInProgress) == 0x000004, "Member 'FortShowdownDivisionRankProgressView_OnSetInProgress::bIsInProgress' has a wrong offset!");

// Function FortniteUI.FortDivisionPayoutInfo.OnDivisionChanged
// 0x0004 (0x0004 - 0x0000)
struct FortDivisionPayoutInfo_OnDivisionChanged final
{
public:
	int32                                         NewDivision;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDivisionPayoutInfo_OnDivisionChanged) == 0x000004, "Wrong alignment on FortDivisionPayoutInfo_OnDivisionChanged");
static_assert(sizeof(FortDivisionPayoutInfo_OnDivisionChanged) == 0x000004, "Wrong size on FortDivisionPayoutInfo_OnDivisionChanged");
static_assert(offsetof(FortDivisionPayoutInfo_OnDivisionChanged, NewDivision) == 0x000000, "Member 'FortDivisionPayoutInfo_OnDivisionChanged::NewDivision' has a wrong offset!");

// Function FortniteUI.FortShowdownTournamentTile.GetTileTournament
// 0x0010 (0x0010 - 0x0000)
struct FortShowdownTournamentTile_GetTileTournament final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortShowdownTournamentTile_GetTileTournament) == 0x000008, "Wrong alignment on FortShowdownTournamentTile_GetTileTournament");
static_assert(sizeof(FortShowdownTournamentTile_GetTileTournament) == 0x000010, "Wrong size on FortShowdownTournamentTile_GetTileTournament");
static_assert(offsetof(FortShowdownTournamentTile_GetTileTournament, ReturnValue) == 0x000000, "Member 'FortShowdownTournamentTile_GetTileTournament::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSocialImportPanel.OnIncentivizedSet
// 0x0001 (0x0001 - 0x0000)
struct FortSocialImportPanel_OnIncentivizedSet final
{
public:
	bool                                          bIncentivized;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialImportPanel_OnIncentivizedSet) == 0x000001, "Wrong alignment on FortSocialImportPanel_OnIncentivizedSet");
static_assert(sizeof(FortSocialImportPanel_OnIncentivizedSet) == 0x000001, "Wrong size on FortSocialImportPanel_OnIncentivizedSet");
static_assert(offsetof(FortSocialImportPanel_OnIncentivizedSet, bIncentivized) == 0x000000, "Member 'FortSocialImportPanel_OnIncentivizedSet::bIncentivized' has a wrong offset!");

// Function FortniteUI.FortSocialImportPanel.OnPanelTypeSet
// 0x0001 (0x0001 - 0x0000)
struct FortSocialImportPanel_OnPanelTypeSet final
{
public:
	ESocialImportPanelType                        NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialImportPanel_OnPanelTypeSet) == 0x000001, "Wrong alignment on FortSocialImportPanel_OnPanelTypeSet");
static_assert(sizeof(FortSocialImportPanel_OnPanelTypeSet) == 0x000001, "Wrong size on FortSocialImportPanel_OnPanelTypeSet");
static_assert(offsetof(FortSocialImportPanel_OnPanelTypeSet, NewType) == 0x000000, "Member 'FortSocialImportPanel_OnPanelTypeSet::NewType' has a wrong offset!");

// Function FortniteUI.FortSocialImportPanel.GetSocialPlatform
// 0x0002 (0x0002 - 0x0000)
struct FortSocialImportPanel_GetSocialPlatform final
{
public:
	ESocialImportPanelPlatform                    OutPlatform;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialImportPanel_GetSocialPlatform) == 0x000001, "Wrong alignment on FortSocialImportPanel_GetSocialPlatform");
static_assert(sizeof(FortSocialImportPanel_GetSocialPlatform) == 0x000002, "Wrong size on FortSocialImportPanel_GetSocialPlatform");
static_assert(offsetof(FortSocialImportPanel_GetSocialPlatform, OutPlatform) == 0x000000, "Member 'FortSocialImportPanel_GetSocialPlatform::OutPlatform' has a wrong offset!");
static_assert(offsetof(FortSocialImportPanel_GetSocialPlatform, ReturnValue) == 0x000001, "Member 'FortSocialImportPanel_GetSocialPlatform::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSocialPanelView_FriendLinkButton.OnShareButtonTypeSet
// 0x0001 (0x0001 - 0x0000)
struct FortSocialPanelView_FriendLinkButton_OnShareButtonTypeSet final
{
public:
	EFriendLinkShareButtonType                    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialPanelView_FriendLinkButton_OnShareButtonTypeSet) == 0x000001, "Wrong alignment on FortSocialPanelView_FriendLinkButton_OnShareButtonTypeSet");
static_assert(sizeof(FortSocialPanelView_FriendLinkButton_OnShareButtonTypeSet) == 0x000001, "Wrong size on FortSocialPanelView_FriendLinkButton_OnShareButtonTypeSet");
static_assert(offsetof(FortSocialPanelView_FriendLinkButton_OnShareButtonTypeSet, Type) == 0x000000, "Member 'FortSocialPanelView_FriendLinkButton_OnShareButtonTypeSet::Type' has a wrong offset!");

// Function FortniteUI.FortSocialSettingToggle.HandleRotated
// 0x0004 (0x0004 - 0x0000)
struct FortSocialSettingToggle_HandleRotated final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialSettingToggle_HandleRotated) == 0x000004, "Wrong alignment on FortSocialSettingToggle_HandleRotated");
static_assert(sizeof(FortSocialSettingToggle_HandleRotated) == 0x000004, "Wrong size on FortSocialSettingToggle_HandleRotated");
static_assert(offsetof(FortSocialSettingToggle_HandleRotated, SelectedIndex) == 0x000000, "Member 'FortSocialSettingToggle_HandleRotated::SelectedIndex' has a wrong offset!");

// Function FortniteUI.FortSpectatedPlayerSwitcher.ShouldBeVisible
// 0x0001 (0x0001 - 0x0000)
struct FortSpectatedPlayerSwitcher_ShouldBeVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpectatedPlayerSwitcher_ShouldBeVisible) == 0x000001, "Wrong alignment on FortSpectatedPlayerSwitcher_ShouldBeVisible");
static_assert(sizeof(FortSpectatedPlayerSwitcher_ShouldBeVisible) == 0x000001, "Wrong size on FortSpectatedPlayerSwitcher_ShouldBeVisible");
static_assert(offsetof(FortSpectatedPlayerSwitcher_ShouldBeVisible, ReturnValue) == 0x000000, "Member 'FortSpectatedPlayerSwitcher_ShouldBeVisible::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSquadLandingPageDefenderSquadDetails.HandleAddDefenderSquadMemberBP
// 0x000C (0x000C - 0x0000)
struct FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP) == 0x000004, "Wrong alignment on FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP");
static_assert(sizeof(FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP) == 0x00000C, "Wrong size on FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP");
static_assert(offsetof(FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP, SquadId) == 0x000000, "Member 'FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP::SquadId' has a wrong offset!");
static_assert(offsetof(FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP, Param_Index) == 0x000008, "Member 'FortSquadLandingPageDefenderSquadDetails_HandleAddDefenderSquadMemberBP::Param_Index' has a wrong offset!");

// Function FortniteUI.FortSquadLandingPageDefenderSquadDetails.HandleDefenderSquadInfoSetBP
// 0x0030 (0x0030 - 0x0000)
struct FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP final
{
public:
	struct FFortLandingPageDefenderSummaryInfo    DefenderSummaryInfo;                               // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP) == 0x000008, "Wrong alignment on FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP");
static_assert(sizeof(FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP) == 0x000030, "Wrong size on FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP");
static_assert(offsetof(FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP, DefenderSummaryInfo) == 0x000000, "Member 'FortSquadLandingPageDefenderSquadDetails_HandleDefenderSquadInfoSetBP::DefenderSummaryInfo' has a wrong offset!");

// Function FortniteUI.FortSquadLandingPageDefenderSquadDetails.SetDefenderSquadInfo
// 0x0030 (0x0030 - 0x0000)
struct FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo final
{
public:
	struct FFortLandingPageDefenderSummaryInfo    DefenderSummaryInfo;                               // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo) == 0x000008, "Wrong alignment on FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo");
static_assert(sizeof(FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo) == 0x000030, "Wrong size on FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo");
static_assert(offsetof(FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo, DefenderSummaryInfo) == 0x000000, "Member 'FortSquadLandingPageDefenderSquadDetails_SetDefenderSquadInfo::DefenderSummaryInfo' has a wrong offset!");

// Function FortniteUI.FortStatIcon.SetAttribute
// 0x0020 (0x0020 - 0x0000)
struct FortStatIcon_SetAttribute final
{
public:
	struct FGameplayAttribute                     InAttribute;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStatIcon_SetAttribute) == 0x000008, "Wrong alignment on FortStatIcon_SetAttribute");
static_assert(sizeof(FortStatIcon_SetAttribute) == 0x000020, "Wrong size on FortStatIcon_SetAttribute");
static_assert(offsetof(FortStatIcon_SetAttribute, InAttribute) == 0x000000, "Member 'FortStatIcon_SetAttribute::InAttribute' has a wrong offset!");

// Function FortniteUI.FortStoreSummaryItemPopupMenu.HandleItemChanged
// 0x0003 (0x0003 - 0x0000)
struct FortStoreSummaryItemPopupMenu_HandleItemChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemPopupMenu_HandleItemChanged) == 0x000001, "Wrong alignment on FortStoreSummaryItemPopupMenu_HandleItemChanged");
static_assert(sizeof(FortStoreSummaryItemPopupMenu_HandleItemChanged) == 0x000003, "Wrong size on FortStoreSummaryItemPopupMenu_HandleItemChanged");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_HandleItemChanged, bItemChanged) == 0x000000, "Member 'FortStoreSummaryItemPopupMenu_HandleItemChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_HandleItemChanged, bAmmoChanged) == 0x000001, "Member 'FortStoreSummaryItemPopupMenu_HandleItemChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_HandleItemChanged, bIngredientsChanged) == 0x000002, "Member 'FortStoreSummaryItemPopupMenu_HandleItemChanged::bIngredientsChanged' has a wrong offset!");

// Function FortniteUI.FortStoreSummaryItemPopupMenu.GetHostButton
// 0x0008 (0x0008 - 0x0000)
struct FortStoreSummaryItemPopupMenu_GetHostButton final
{
public:
	class UFortStoreSummaryItemButton*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStoreSummaryItemPopupMenu_GetHostButton) == 0x000008, "Wrong alignment on FortStoreSummaryItemPopupMenu_GetHostButton");
static_assert(sizeof(FortStoreSummaryItemPopupMenu_GetHostButton) == 0x000008, "Wrong size on FortStoreSummaryItemPopupMenu_GetHostButton");
static_assert(offsetof(FortStoreSummaryItemPopupMenu_GetHostButton, ReturnValue) == 0x000000, "Member 'FortStoreSummaryItemPopupMenu_GetHostButton::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSubGameSelectBase.OnSubGameImageLoadedFromCMS
// 0x0010 (0x0010 - 0x0000)
struct FortSubGameSelectBase_OnSubGameImageLoadedFromCMS final
{
public:
	EFortSubgameSelectOption                      SubGameOption;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Image;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSubGameSelectBase_OnSubGameImageLoadedFromCMS) == 0x000008, "Wrong alignment on FortSubGameSelectBase_OnSubGameImageLoadedFromCMS");
static_assert(sizeof(FortSubGameSelectBase_OnSubGameImageLoadedFromCMS) == 0x000010, "Wrong size on FortSubGameSelectBase_OnSubGameImageLoadedFromCMS");
static_assert(offsetof(FortSubGameSelectBase_OnSubGameImageLoadedFromCMS, SubGameOption) == 0x000000, "Member 'FortSubGameSelectBase_OnSubGameImageLoadedFromCMS::SubGameOption' has a wrong offset!");
static_assert(offsetof(FortSubGameSelectBase_OnSubGameImageLoadedFromCMS, Image) == 0x000008, "Member 'FortSubGameSelectBase_OnSubGameImageLoadedFromCMS::Image' has a wrong offset!");

// Function FortniteUI.FortSubGameSelectBase.ShowRedeemCodeScreen
// 0x0014 (0x0014 - 0x0000)
struct FortSubGameSelectBase_ShowRedeemCodeScreen final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             CompletionDelegate;                                // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSubGameSelectBase_ShowRedeemCodeScreen) == 0x000004, "Wrong alignment on FortSubGameSelectBase_ShowRedeemCodeScreen");
static_assert(sizeof(FortSubGameSelectBase_ShowRedeemCodeScreen) == 0x000014, "Wrong size on FortSubGameSelectBase_ShowRedeemCodeScreen");
static_assert(offsetof(FortSubGameSelectBase_ShowRedeemCodeScreen, SubGame) == 0x000000, "Member 'FortSubGameSelectBase_ShowRedeemCodeScreen::SubGame' has a wrong offset!");
static_assert(offsetof(FortSubGameSelectBase_ShowRedeemCodeScreen, CompletionDelegate) == 0x000004, "Member 'FortSubGameSelectBase_ShowRedeemCodeScreen::CompletionDelegate' has a wrong offset!");

// Function FortniteUI.FortSubGameSelectBase.CheckRewardRate
// 0x0001 (0x0001 - 0x0000)
struct FortSubGameSelectBase_CheckRewardRate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSubGameSelectBase_CheckRewardRate) == 0x000001, "Wrong alignment on FortSubGameSelectBase_CheckRewardRate");
static_assert(sizeof(FortSubGameSelectBase_CheckRewardRate) == 0x000001, "Wrong size on FortSubGameSelectBase_CheckRewardRate");
static_assert(offsetof(FortSubGameSelectBase_CheckRewardRate, ReturnValue) == 0x000000, "Member 'FortSubGameSelectBase_CheckRewardRate::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSubGameSelectBase.GetFullDescription
// 0x0028 (0x0028 - 0x0000)
struct FortSubGameSelectBase_GetFullDescription final
{
public:
	EFortSubgameSelectOption                      SubGameOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FullDescription;                                   // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSubGameSelectBase_GetFullDescription) == 0x000008, "Wrong alignment on FortSubGameSelectBase_GetFullDescription");
static_assert(sizeof(FortSubGameSelectBase_GetFullDescription) == 0x000028, "Wrong size on FortSubGameSelectBase_GetFullDescription");
static_assert(offsetof(FortSubGameSelectBase_GetFullDescription, SubGameOption) == 0x000000, "Member 'FortSubGameSelectBase_GetFullDescription::SubGameOption' has a wrong offset!");
static_assert(offsetof(FortSubGameSelectBase_GetFullDescription, FullDescription) == 0x000008, "Member 'FortSubGameSelectBase_GetFullDescription::FullDescription' has a wrong offset!");
static_assert(offsetof(FortSubGameSelectBase_GetFullDescription, ReturnValue) == 0x000020, "Member 'FortSubGameSelectBase_GetFullDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSubGameSelectBase.GetIsOnSale
// 0x0002 (0x0002 - 0x0000)
struct FortSubGameSelectBase_GetIsOnSale final
{
public:
	EFortSubgameSelectOption                      SubGameOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSubGameSelectBase_GetIsOnSale) == 0x000001, "Wrong alignment on FortSubGameSelectBase_GetIsOnSale");
static_assert(sizeof(FortSubGameSelectBase_GetIsOnSale) == 0x000002, "Wrong size on FortSubGameSelectBase_GetIsOnSale");
static_assert(offsetof(FortSubGameSelectBase_GetIsOnSale, SubGameOption) == 0x000000, "Member 'FortSubGameSelectBase_GetIsOnSale::SubGameOption' has a wrong offset!");
static_assert(offsetof(FortSubGameSelectBase_GetIsOnSale, ReturnValue) == 0x000001, "Member 'FortSubGameSelectBase_GetIsOnSale::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSubGameSelectBase.GetShortDescription
// 0x0028 (0x0028 - 0x0000)
struct FortSubGameSelectBase_GetShortDescription final
{
public:
	EFortSubgameSelectOption                      SubGameOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ShortDescription;                                  // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSubGameSelectBase_GetShortDescription) == 0x000008, "Wrong alignment on FortSubGameSelectBase_GetShortDescription");
static_assert(sizeof(FortSubGameSelectBase_GetShortDescription) == 0x000028, "Wrong size on FortSubGameSelectBase_GetShortDescription");
static_assert(offsetof(FortSubGameSelectBase_GetShortDescription, SubGameOption) == 0x000000, "Member 'FortSubGameSelectBase_GetShortDescription::SubGameOption' has a wrong offset!");
static_assert(offsetof(FortSubGameSelectBase_GetShortDescription, ShortDescription) == 0x000008, "Member 'FortSubGameSelectBase_GetShortDescription::ShortDescription' has a wrong offset!");
static_assert(offsetof(FortSubGameSelectBase_GetShortDescription, ReturnValue) == 0x000020, "Member 'FortSubGameSelectBase_GetShortDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSubGameSelectBase.GetSubGameBySubGameSelectOption
// 0x0002 (0x0002 - 0x0000)
struct FortSubGameSelectBase_GetSubGameBySubGameSelectOption final
{
public:
	EFortSubgameSelectOption                      SubGameOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubGame                                      ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSubGameSelectBase_GetSubGameBySubGameSelectOption) == 0x000001, "Wrong alignment on FortSubGameSelectBase_GetSubGameBySubGameSelectOption");
static_assert(sizeof(FortSubGameSelectBase_GetSubGameBySubGameSelectOption) == 0x000002, "Wrong size on FortSubGameSelectBase_GetSubGameBySubGameSelectOption");
static_assert(offsetof(FortSubGameSelectBase_GetSubGameBySubGameSelectOption, SubGameOption) == 0x000000, "Member 'FortSubGameSelectBase_GetSubGameBySubGameSelectOption::SubGameOption' has a wrong offset!");
static_assert(offsetof(FortSubGameSelectBase_GetSubGameBySubGameSelectOption, ReturnValue) == 0x000001, "Member 'FortSubGameSelectBase_GetSubGameBySubGameSelectOption::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSubGameSelectBase.GetUpsellStorefrontNames
// 0x0018 (0x0018 - 0x0000)
struct FortSubGameSelectBase_GetUpsellStorefrontNames final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OutStorefrontNames;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSubGameSelectBase_GetUpsellStorefrontNames) == 0x000008, "Wrong alignment on FortSubGameSelectBase_GetUpsellStorefrontNames");
static_assert(sizeof(FortSubGameSelectBase_GetUpsellStorefrontNames) == 0x000018, "Wrong size on FortSubGameSelectBase_GetUpsellStorefrontNames");
static_assert(offsetof(FortSubGameSelectBase_GetUpsellStorefrontNames, SubGame) == 0x000000, "Member 'FortSubGameSelectBase_GetUpsellStorefrontNames::SubGame' has a wrong offset!");
static_assert(offsetof(FortSubGameSelectBase_GetUpsellStorefrontNames, OutStorefrontNames) == 0x000008, "Member 'FortSubGameSelectBase_GetUpsellStorefrontNames::OutStorefrontNames' has a wrong offset!");

// Function FortniteUI.FortSubGameSelectBase.IsSubGameOptionVisible
// 0x0002 (0x0002 - 0x0000)
struct FortSubGameSelectBase_IsSubGameOptionVisible final
{
public:
	EFortSubgameSelectOption                      SubGameOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSubGameSelectBase_IsSubGameOptionVisible) == 0x000001, "Wrong alignment on FortSubGameSelectBase_IsSubGameOptionVisible");
static_assert(sizeof(FortSubGameSelectBase_IsSubGameOptionVisible) == 0x000002, "Wrong size on FortSubGameSelectBase_IsSubGameOptionVisible");
static_assert(offsetof(FortSubGameSelectBase_IsSubGameOptionVisible, SubGameOption) == 0x000000, "Member 'FortSubGameSelectBase_IsSubGameOptionVisible::SubGameOption' has a wrong offset!");
static_assert(offsetof(FortSubGameSelectBase_IsSubGameOptionVisible, ReturnValue) == 0x000001, "Member 'FortSubGameSelectBase_IsSubGameOptionVisible::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSurvivorSquadManagementScreen.PlayFeedbackForSlottingPerson
// 0x00C0 (0x00C0 - 0x0000)
struct FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson final
{
public:
	class UFortWorker*                            Worker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortSurvivorSquadSlottingFeedbackData FeedbackData;                                      // 0x0010(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson) == 0x000008, "Wrong alignment on FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson");
static_assert(sizeof(FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson) == 0x0000C0, "Wrong size on FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson");
static_assert(offsetof(FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson, Worker) == 0x000000, "Member 'FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson::Worker' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson, SlotIndex) == 0x000008, "Member 'FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson, FeedbackData) == 0x000010, "Member 'FortSurvivorSquadManagementScreen_PlayFeedbackForSlottingPerson::FeedbackData' has a wrong offset!");

// Function FortniteUI.FortSurvivorSquadStatMatchesBase.AddStatMatch
// 0x0008 (0x0008 - 0x0000)
struct FortSurvivorSquadStatMatchesBase_AddStatMatch final
{
public:
	class UFortSurvivorSquadStatMatchBase*        SetBonus;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadStatMatchesBase_AddStatMatch) == 0x000008, "Wrong alignment on FortSurvivorSquadStatMatchesBase_AddStatMatch");
static_assert(sizeof(FortSurvivorSquadStatMatchesBase_AddStatMatch) == 0x000008, "Wrong size on FortSurvivorSquadStatMatchesBase_AddStatMatch");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_AddStatMatch, SetBonus) == 0x000000, "Member 'FortSurvivorSquadStatMatchesBase_AddStatMatch::SetBonus' has a wrong offset!");

// Function FortniteUI.FortSurvivorSquadStatMatchesBase.SetIdOfSquadToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP");
static_assert(sizeof(FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP) == 0x000008, "Wrong size on FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP, SquadId) == 0x000000, "Member 'FortSurvivorSquadStatMatchesBase_SetIdOfSquadToManageBP::SquadId' has a wrong offset!");

// Function FortniteUI.FortSurvivorSquadStatMatchesBase.SetSummaryView
// 0x0001 (0x0001 - 0x0000)
struct FortSurvivorSquadStatMatchesBase_SetSummaryView final
{
public:
	bool                                          bInSummaryView;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadStatMatchesBase_SetSummaryView) == 0x000001, "Wrong alignment on FortSurvivorSquadStatMatchesBase_SetSummaryView");
static_assert(sizeof(FortSurvivorSquadStatMatchesBase_SetSummaryView) == 0x000001, "Wrong size on FortSurvivorSquadStatMatchesBase_SetSummaryView");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_SetSummaryView, bInSummaryView) == 0x000000, "Member 'FortSurvivorSquadStatMatchesBase_SetSummaryView::bInSummaryView' has a wrong offset!");

// Function FortniteUI.FortSurvivorSquadStatMatchesBase.GetIdOfSquadToManageBP
// 0x0008 (0x0008 - 0x0000)
struct FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP) == 0x000004, "Wrong alignment on FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP");
static_assert(sizeof(FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP) == 0x000008, "Wrong size on FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP, ReturnValue) == 0x000000, "Member 'FortSurvivorSquadStatMatchesBase_GetIdOfSquadToManageBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSurvivorSquadStatMatchesBase.TryGetStaticSquadDataBP
// 0x0090 (0x0090 - 0x0000)
struct FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP final
{
public:
	struct FHomebaseSquad                         OutSquadData;                                      // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP) == 0x000008, "Wrong alignment on FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP");
static_assert(sizeof(FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP) == 0x000090, "Wrong size on FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP, OutSquadData) == 0x000000, "Member 'FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP::OutSquadData' has a wrong offset!");
static_assert(offsetof(FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP, ReturnValue) == 0x000088, "Member 'FortSurvivorSquadStatMatchesBase_TryGetStaticSquadDataBP::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortSurvivorSquadSummaryStatItem.SetAttributeModifierAccumulation
// 0x0030 (0x0030 - 0x0000)
struct FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation final
{
public:
	struct FFortAttributeModifierAccumulation     Accumulation;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation) == 0x000008, "Wrong alignment on FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation");
static_assert(sizeof(FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation) == 0x000030, "Wrong size on FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation");
static_assert(offsetof(FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation, Accumulation) == 0x000000, "Member 'FortSurvivorSquadSummaryStatItem_SetAttributeModifierAccumulation::Accumulation' has a wrong offset!");

// Function FortniteUI.FortSwipePanel.GetSwipeInfo
// 0x000C (0x000C - 0x0000)
struct FortSwipePanel_GetSwipeInfo final
{
public:
	int32                                         OutIndex;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutSwipePercentage;                                // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSwipePanel_GetSwipeInfo) == 0x000004, "Wrong alignment on FortSwipePanel_GetSwipeInfo");
static_assert(sizeof(FortSwipePanel_GetSwipeInfo) == 0x00000C, "Wrong size on FortSwipePanel_GetSwipeInfo");
static_assert(offsetof(FortSwipePanel_GetSwipeInfo, OutIndex) == 0x000000, "Member 'FortSwipePanel_GetSwipeInfo::OutIndex' has a wrong offset!");
static_assert(offsetof(FortSwipePanel_GetSwipeInfo, OutSwipePercentage) == 0x000004, "Member 'FortSwipePanel_GetSwipeInfo::OutSwipePercentage' has a wrong offset!");

// Function FortniteUI.FortTabGamepadOptions.GetListWidget
// 0x0010 (0x0010 - 0x0000)
struct FortTabGamepadOptions_GetListWidget final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTabGamepadOptions_GetListWidget) == 0x000008, "Wrong alignment on FortTabGamepadOptions_GetListWidget");
static_assert(sizeof(FortTabGamepadOptions_GetListWidget) == 0x000010, "Wrong size on FortTabGamepadOptions_GetListWidget");
static_assert(offsetof(FortTabGamepadOptions_GetListWidget, Item) == 0x000000, "Member 'FortTabGamepadOptions_GetListWidget::Item' has a wrong offset!");
static_assert(offsetof(FortTabGamepadOptions_GetListWidget, ReturnValue) == 0x000008, "Member 'FortTabGamepadOptions_GetListWidget::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTabGamepadOptions.IsAdvancedSettingsEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortTabGamepadOptions_IsAdvancedSettingsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTabGamepadOptions_IsAdvancedSettingsEnabled) == 0x000001, "Wrong alignment on FortTabGamepadOptions_IsAdvancedSettingsEnabled");
static_assert(sizeof(FortTabGamepadOptions_IsAdvancedSettingsEnabled) == 0x000001, "Wrong size on FortTabGamepadOptions_IsAdvancedSettingsEnabled");
static_assert(offsetof(FortTabGamepadOptions_IsAdvancedSettingsEnabled, ReturnValue) == 0x000000, "Member 'FortTabGamepadOptions_IsAdvancedSettingsEnabled::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTabGamepadOptions.ToggleAdvancedSettingsDisplay
// 0x0001 (0x0001 - 0x0000)
struct FortTabGamepadOptions_ToggleAdvancedSettingsDisplay final
{
public:
	bool                                          bShowAdvancedSettings;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTabGamepadOptions_ToggleAdvancedSettingsDisplay) == 0x000001, "Wrong alignment on FortTabGamepadOptions_ToggleAdvancedSettingsDisplay");
static_assert(sizeof(FortTabGamepadOptions_ToggleAdvancedSettingsDisplay) == 0x000001, "Wrong size on FortTabGamepadOptions_ToggleAdvancedSettingsDisplay");
static_assert(offsetof(FortTabGamepadOptions_ToggleAdvancedSettingsDisplay, bShowAdvancedSettings) == 0x000000, "Member 'FortTabGamepadOptions_ToggleAdvancedSettingsDisplay::bShowAdvancedSettings' has a wrong offset!");

// Function FortniteUI.FortTabListWidgetBase.GetPreregisteredTabInfo
// 0x00D8 (0x00D8 - 0x0000)
struct FortTabListWidgetBase_GetPreregisteredTabInfo final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTabListRegistrationInfo           OutTabInfo;                                        // 0x0008(0x00C8)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTabListWidgetBase_GetPreregisteredTabInfo) == 0x000008, "Wrong alignment on FortTabListWidgetBase_GetPreregisteredTabInfo");
static_assert(sizeof(FortTabListWidgetBase_GetPreregisteredTabInfo) == 0x0000D8, "Wrong size on FortTabListWidgetBase_GetPreregisteredTabInfo");
static_assert(offsetof(FortTabListWidgetBase_GetPreregisteredTabInfo, TabNameID) == 0x000000, "Member 'FortTabListWidgetBase_GetPreregisteredTabInfo::TabNameID' has a wrong offset!");
static_assert(offsetof(FortTabListWidgetBase_GetPreregisteredTabInfo, OutTabInfo) == 0x000008, "Member 'FortTabListWidgetBase_GetPreregisteredTabInfo::OutTabInfo' has a wrong offset!");
static_assert(offsetof(FortTabListWidgetBase_GetPreregisteredTabInfo, ReturnValue) == 0x0000D0, "Member 'FortTabListWidgetBase_GetPreregisteredTabInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTabListWidgetBase.GetVisibleTabCount
// 0x0004 (0x0004 - 0x0000)
struct FortTabListWidgetBase_GetVisibleTabCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTabListWidgetBase_GetVisibleTabCount) == 0x000004, "Wrong alignment on FortTabListWidgetBase_GetVisibleTabCount");
static_assert(sizeof(FortTabListWidgetBase_GetVisibleTabCount) == 0x000004, "Wrong size on FortTabListWidgetBase_GetVisibleTabCount");
static_assert(offsetof(FortTabListWidgetBase_GetVisibleTabCount, ReturnValue) == 0x000000, "Member 'FortTabListWidgetBase_GetVisibleTabCount::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTabListWidgetBase.IsTabVisible
// 0x000C (0x000C - 0x0000)
struct FortTabListWidgetBase_IsTabVisible final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTabListWidgetBase_IsTabVisible) == 0x000004, "Wrong alignment on FortTabListWidgetBase_IsTabVisible");
static_assert(sizeof(FortTabListWidgetBase_IsTabVisible) == 0x00000C, "Wrong size on FortTabListWidgetBase_IsTabVisible");
static_assert(offsetof(FortTabListWidgetBase_IsTabVisible, TabId) == 0x000000, "Member 'FortTabListWidgetBase_IsTabVisible::TabId' has a wrong offset!");
static_assert(offsetof(FortTabListWidgetBase_IsTabVisible, ReturnValue) == 0x000008, "Member 'FortTabListWidgetBase_IsTabVisible::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteUI.FortTabListWidgetBase.OnTabContentCreated__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FortTabListWidgetBase_OnTabContentCreated__DelegateSignature final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonUserWidget*                      TabWidget;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTabListWidgetBase_OnTabContentCreated__DelegateSignature) == 0x000008, "Wrong alignment on FortTabListWidgetBase_OnTabContentCreated__DelegateSignature");
static_assert(sizeof(FortTabListWidgetBase_OnTabContentCreated__DelegateSignature) == 0x000010, "Wrong size on FortTabListWidgetBase_OnTabContentCreated__DelegateSignature");
static_assert(offsetof(FortTabListWidgetBase_OnTabContentCreated__DelegateSignature, TabId) == 0x000000, "Member 'FortTabListWidgetBase_OnTabContentCreated__DelegateSignature::TabId' has a wrong offset!");
static_assert(offsetof(FortTabListWidgetBase_OnTabContentCreated__DelegateSignature, TabWidget) == 0x000008, "Member 'FortTabListWidgetBase_OnTabContentCreated__DelegateSignature::TabWidget' has a wrong offset!");

// Function FortniteUI.FortTabListWidgetBase.RegisterFortTab
// 0x00C0 (0x00C0 - 0x0000)
struct FortTabListWidgetBase_RegisterFortTab final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonButton>              TabButtonType;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTabButtonLabelInfo                LabelInfo;                                         // 0x0010(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UWidget*                                ContentWidget;                                     // 0x00B0(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTabListWidgetBase_RegisterFortTab) == 0x000008, "Wrong alignment on FortTabListWidgetBase_RegisterFortTab");
static_assert(sizeof(FortTabListWidgetBase_RegisterFortTab) == 0x0000C0, "Wrong size on FortTabListWidgetBase_RegisterFortTab");
static_assert(offsetof(FortTabListWidgetBase_RegisterFortTab, TabNameID) == 0x000000, "Member 'FortTabListWidgetBase_RegisterFortTab::TabNameID' has a wrong offset!");
static_assert(offsetof(FortTabListWidgetBase_RegisterFortTab, TabButtonType) == 0x000008, "Member 'FortTabListWidgetBase_RegisterFortTab::TabButtonType' has a wrong offset!");
static_assert(offsetof(FortTabListWidgetBase_RegisterFortTab, LabelInfo) == 0x000010, "Member 'FortTabListWidgetBase_RegisterFortTab::LabelInfo' has a wrong offset!");
static_assert(offsetof(FortTabListWidgetBase_RegisterFortTab, ContentWidget) == 0x0000B0, "Member 'FortTabListWidgetBase_RegisterFortTab::ContentWidget' has a wrong offset!");
static_assert(offsetof(FortTabListWidgetBase_RegisterFortTab, ReturnValue) == 0x0000B8, "Member 'FortTabListWidgetBase_RegisterFortTab::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTabListWidgetBase.SetTabHiddenState
// 0x000C (0x000C - 0x0000)
struct FortTabListWidgetBase_SetTabHiddenState final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTabListWidgetBase_SetTabHiddenState) == 0x000004, "Wrong alignment on FortTabListWidgetBase_SetTabHiddenState");
static_assert(sizeof(FortTabListWidgetBase_SetTabHiddenState) == 0x00000C, "Wrong size on FortTabListWidgetBase_SetTabHiddenState");
static_assert(offsetof(FortTabListWidgetBase_SetTabHiddenState, TabNameID) == 0x000000, "Member 'FortTabListWidgetBase_SetTabHiddenState::TabNameID' has a wrong offset!");
static_assert(offsetof(FortTabListWidgetBase_SetTabHiddenState, bHidden) == 0x000008, "Member 'FortTabListWidgetBase_SetTabHiddenState::bHidden' has a wrong offset!");

// Function FortniteUI.FortTabListWidgetBase.IsFirstTabActive
// 0x0001 (0x0001 - 0x0000)
struct FortTabListWidgetBase_IsFirstTabActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTabListWidgetBase_IsFirstTabActive) == 0x000001, "Wrong alignment on FortTabListWidgetBase_IsFirstTabActive");
static_assert(sizeof(FortTabListWidgetBase_IsFirstTabActive) == 0x000001, "Wrong size on FortTabListWidgetBase_IsFirstTabActive");
static_assert(offsetof(FortTabListWidgetBase_IsFirstTabActive, ReturnValue) == 0x000000, "Member 'FortTabListWidgetBase_IsFirstTabActive::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTabListWidgetBase.IsLastTabActive
// 0x0001 (0x0001 - 0x0000)
struct FortTabListWidgetBase_IsLastTabActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTabListWidgetBase_IsLastTabActive) == 0x000001, "Wrong alignment on FortTabListWidgetBase_IsLastTabActive");
static_assert(sizeof(FortTabListWidgetBase_IsLastTabActive) == 0x000001, "Wrong size on FortTabListWidgetBase_IsLastTabActive");
static_assert(offsetof(FortTabListWidgetBase_IsLastTabActive, ReturnValue) == 0x000000, "Member 'FortTabListWidgetBase_IsLastTabActive::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.ApplyUniformOverrideMaterial
// 0x0008 (0x0008 - 0x0000)
struct FortTeamMemberPedestal_ApplyUniformOverrideMaterial final
{
public:
	class UMaterialInterface*                     OverrideMaterial;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_ApplyUniformOverrideMaterial) == 0x000008, "Wrong alignment on FortTeamMemberPedestal_ApplyUniformOverrideMaterial");
static_assert(sizeof(FortTeamMemberPedestal_ApplyUniformOverrideMaterial) == 0x000008, "Wrong size on FortTeamMemberPedestal_ApplyUniformOverrideMaterial");
static_assert(offsetof(FortTeamMemberPedestal_ApplyUniformOverrideMaterial, OverrideMaterial) == 0x000000, "Member 'FortTeamMemberPedestal_ApplyUniformOverrideMaterial::OverrideMaterial' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.OnAvatarChanged
// 0x0010 (0x0010 - 0x0000)
struct FortTeamMemberPedestal_OnAvatarChanged final
{
public:
	class UTexture2D*                             AvatarImage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 AvatarBackground;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HighlightColor;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_OnAvatarChanged) == 0x000008, "Wrong alignment on FortTeamMemberPedestal_OnAvatarChanged");
static_assert(sizeof(FortTeamMemberPedestal_OnAvatarChanged) == 0x000010, "Wrong size on FortTeamMemberPedestal_OnAvatarChanged");
static_assert(offsetof(FortTeamMemberPedestal_OnAvatarChanged, AvatarImage) == 0x000000, "Member 'FortTeamMemberPedestal_OnAvatarChanged::AvatarImage' has a wrong offset!");
static_assert(offsetof(FortTeamMemberPedestal_OnAvatarChanged, AvatarBackground) == 0x000008, "Member 'FortTeamMemberPedestal_OnAvatarChanged::AvatarBackground' has a wrong offset!");
static_assert(offsetof(FortTeamMemberPedestal_OnAvatarChanged, HighlightColor) == 0x00000C, "Member 'FortTeamMemberPedestal_OnAvatarChanged::HighlightColor' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.OnGameReadinessChanged
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberPedestal_OnGameReadinessChanged final
{
public:
	EGameReadiness                                GameReadiness;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_OnGameReadinessChanged) == 0x000001, "Wrong alignment on FortTeamMemberPedestal_OnGameReadinessChanged");
static_assert(sizeof(FortTeamMemberPedestal_OnGameReadinessChanged) == 0x000001, "Wrong size on FortTeamMemberPedestal_OnGameReadinessChanged");
static_assert(offsetof(FortTeamMemberPedestal_OnGameReadinessChanged, GameReadiness) == 0x000000, "Member 'FortTeamMemberPedestal_OnGameReadinessChanged::GameReadiness' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.OnIsCurrentlyInMatchChanged
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberPedestal_OnIsCurrentlyInMatchChanged final
{
public:
	bool                                          bIsInMatch;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_OnIsCurrentlyInMatchChanged) == 0x000001, "Wrong alignment on FortTeamMemberPedestal_OnIsCurrentlyInMatchChanged");
static_assert(sizeof(FortTeamMemberPedestal_OnIsCurrentlyInMatchChanged) == 0x000001, "Wrong size on FortTeamMemberPedestal_OnIsCurrentlyInMatchChanged");
static_assert(offsetof(FortTeamMemberPedestal_OnIsCurrentlyInMatchChanged, bIsInMatch) == 0x000000, "Member 'FortTeamMemberPedestal_OnIsCurrentlyInMatchChanged::bIsInMatch' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.OnNewSquadEstablished
// 0x0090 (0x0090 - 0x0000)
struct FortTeamMemberPedestal_OnNewSquadEstablished final
{
public:
	bool                                          bMultipleSquadsPopulated;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwningSquadContainsLocalPlayer;                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAthenaTeamDisplayInfo                 OwningSquadStyle;                                  // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_OnNewSquadEstablished) == 0x000008, "Wrong alignment on FortTeamMemberPedestal_OnNewSquadEstablished");
static_assert(sizeof(FortTeamMemberPedestal_OnNewSquadEstablished) == 0x000090, "Wrong size on FortTeamMemberPedestal_OnNewSquadEstablished");
static_assert(offsetof(FortTeamMemberPedestal_OnNewSquadEstablished, bMultipleSquadsPopulated) == 0x000000, "Member 'FortTeamMemberPedestal_OnNewSquadEstablished::bMultipleSquadsPopulated' has a wrong offset!");
static_assert(offsetof(FortTeamMemberPedestal_OnNewSquadEstablished, bOwningSquadContainsLocalPlayer) == 0x000001, "Member 'FortTeamMemberPedestal_OnNewSquadEstablished::bOwningSquadContainsLocalPlayer' has a wrong offset!");
static_assert(offsetof(FortTeamMemberPedestal_OnNewSquadEstablished, OwningSquadStyle) == 0x000008, "Member 'FortTeamMemberPedestal_OnNewSquadEstablished::OwningSquadStyle' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.OnOwningPedestalGroupEstablished
// 0x0008 (0x0008 - 0x0000)
struct FortTeamMemberPedestal_OnOwningPedestalGroupEstablished final
{
public:
	int32                                         SquadIdx;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSquadHasLocalPlayer;                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPopulated;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTeamMemberPedestal_OnOwningPedestalGroupEstablished) == 0x000004, "Wrong alignment on FortTeamMemberPedestal_OnOwningPedestalGroupEstablished");
static_assert(sizeof(FortTeamMemberPedestal_OnOwningPedestalGroupEstablished) == 0x000008, "Wrong size on FortTeamMemberPedestal_OnOwningPedestalGroupEstablished");
static_assert(offsetof(FortTeamMemberPedestal_OnOwningPedestalGroupEstablished, SquadIdx) == 0x000000, "Member 'FortTeamMemberPedestal_OnOwningPedestalGroupEstablished::SquadIdx' has a wrong offset!");
static_assert(offsetof(FortTeamMemberPedestal_OnOwningPedestalGroupEstablished, bSquadHasLocalPlayer) == 0x000004, "Member 'FortTeamMemberPedestal_OnOwningPedestalGroupEstablished::bSquadHasLocalPlayer' has a wrong offset!");
static_assert(offsetof(FortTeamMemberPedestal_OnOwningPedestalGroupEstablished, bIsPopulated) == 0x000005, "Member 'FortTeamMemberPedestal_OnOwningPedestalGroupEstablished::bIsPopulated' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.OnPedestalIsPopulatedChanged
// 0x0002 (0x0002 - 0x0000)
struct FortTeamMemberPedestal_OnPedestalIsPopulatedChanged final
{
public:
	bool                                          bIsPopulated;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwningSquadContainsLocalPlayer;                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_OnPedestalIsPopulatedChanged) == 0x000001, "Wrong alignment on FortTeamMemberPedestal_OnPedestalIsPopulatedChanged");
static_assert(sizeof(FortTeamMemberPedestal_OnPedestalIsPopulatedChanged) == 0x000002, "Wrong size on FortTeamMemberPedestal_OnPedestalIsPopulatedChanged");
static_assert(offsetof(FortTeamMemberPedestal_OnPedestalIsPopulatedChanged, bIsPopulated) == 0x000000, "Member 'FortTeamMemberPedestal_OnPedestalIsPopulatedChanged::bIsPopulated' has a wrong offset!");
static_assert(offsetof(FortTeamMemberPedestal_OnPedestalIsPopulatedChanged, bOwningSquadContainsLocalPlayer) == 0x000001, "Member 'FortTeamMemberPedestal_OnPedestalIsPopulatedChanged::bOwningSquadContainsLocalPlayer' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.OnTeamMemberSet
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberPedestal_OnTeamMemberSet final
{
public:
	bool                                          bHasValidTeamMember;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_OnTeamMemberSet) == 0x000001, "Wrong alignment on FortTeamMemberPedestal_OnTeamMemberSet");
static_assert(sizeof(FortTeamMemberPedestal_OnTeamMemberSet) == 0x000001, "Wrong size on FortTeamMemberPedestal_OnTeamMemberSet");
static_assert(offsetof(FortTeamMemberPedestal_OnTeamMemberSet, bHasValidTeamMember) == 0x000000, "Member 'FortTeamMemberPedestal_OnTeamMemberSet::bHasValidTeamMember' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.GetCurrentTeamSize
// 0x0004 (0x0004 - 0x0000)
struct FortTeamMemberPedestal_GetCurrentTeamSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_GetCurrentTeamSize) == 0x000004, "Wrong alignment on FortTeamMemberPedestal_GetCurrentTeamSize");
static_assert(sizeof(FortTeamMemberPedestal_GetCurrentTeamSize) == 0x000004, "Wrong size on FortTeamMemberPedestal_GetCurrentTeamSize");
static_assert(offsetof(FortTeamMemberPedestal_GetCurrentTeamSize, ReturnValue) == 0x000000, "Member 'FortTeamMemberPedestal_GetCurrentTeamSize::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.IsCurrentMemberLocal
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberPedestal_IsCurrentMemberLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_IsCurrentMemberLocal) == 0x000001, "Wrong alignment on FortTeamMemberPedestal_IsCurrentMemberLocal");
static_assert(sizeof(FortTeamMemberPedestal_IsCurrentMemberLocal) == 0x000001, "Wrong size on FortTeamMemberPedestal_IsCurrentMemberLocal");
static_assert(offsetof(FortTeamMemberPedestal_IsCurrentMemberLocal, ReturnValue) == 0x000000, "Member 'FortTeamMemberPedestal_IsCurrentMemberLocal::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.IsInFrontEnd
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberPedestal_IsInFrontEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_IsInFrontEnd) == 0x000001, "Wrong alignment on FortTeamMemberPedestal_IsInFrontEnd");
static_assert(sizeof(FortTeamMemberPedestal_IsInFrontEnd) == 0x000001, "Wrong size on FortTeamMemberPedestal_IsInFrontEnd");
static_assert(offsetof(FortTeamMemberPedestal_IsInFrontEnd, ReturnValue) == 0x000000, "Member 'FortTeamMemberPedestal_IsInFrontEnd::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.IsInLocalSquadGroup
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberPedestal_IsInLocalSquadGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_IsInLocalSquadGroup) == 0x000001, "Wrong alignment on FortTeamMemberPedestal_IsInLocalSquadGroup");
static_assert(sizeof(FortTeamMemberPedestal_IsInLocalSquadGroup) == 0x000001, "Wrong size on FortTeamMemberPedestal_IsInLocalSquadGroup");
static_assert(offsetof(FortTeamMemberPedestal_IsInLocalSquadGroup, ReturnValue) == 0x000000, "Member 'FortTeamMemberPedestal_IsInLocalSquadGroup::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.IsPlayingFortnite
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberPedestal_IsPlayingFortnite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_IsPlayingFortnite) == 0x000001, "Wrong alignment on FortTeamMemberPedestal_IsPlayingFortnite");
static_assert(sizeof(FortTeamMemberPedestal_IsPlayingFortnite) == 0x000001, "Wrong size on FortTeamMemberPedestal_IsPlayingFortnite");
static_assert(offsetof(FortTeamMemberPedestal_IsPlayingFortnite, ReturnValue) == 0x000000, "Member 'FortTeamMemberPedestal_IsPlayingFortnite::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTeamMemberPedestal.IsValidTeamMember
// 0x0001 (0x0001 - 0x0000)
struct FortTeamMemberPedestal_IsValidTeamMember final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamMemberPedestal_IsValidTeamMember) == 0x000001, "Wrong alignment on FortTeamMemberPedestal_IsValidTeamMember");
static_assert(sizeof(FortTeamMemberPedestal_IsValidTeamMember) == 0x000001, "Wrong size on FortTeamMemberPedestal_IsValidTeamMember");
static_assert(offsetof(FortTeamMemberPedestal_IsValidTeamMember, ReturnValue) == 0x000000, "Member 'FortTeamMemberPedestal_IsValidTeamMember::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTheaterSelect.GetSurvivalCMSText
// 0x0038 (0x0038 - 0x0000)
struct FortTheaterSelect_GetSurvivalCMSText final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTheaterSelect_GetSurvivalCMSText) == 0x000008, "Wrong alignment on FortTheaterSelect_GetSurvivalCMSText");
static_assert(sizeof(FortTheaterSelect_GetSurvivalCMSText) == 0x000038, "Wrong size on FortTheaterSelect_GetSurvivalCMSText");
static_assert(offsetof(FortTheaterSelect_GetSurvivalCMSText, Title) == 0x000000, "Member 'FortTheaterSelect_GetSurvivalCMSText::Title' has a wrong offset!");
static_assert(offsetof(FortTheaterSelect_GetSurvivalCMSText, Body) == 0x000018, "Member 'FortTheaterSelect_GetSurvivalCMSText::Body' has a wrong offset!");
static_assert(offsetof(FortTheaterSelect_GetSurvivalCMSText, ReturnValue) == 0x000030, "Member 'FortTheaterSelect_GetSurvivalCMSText::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTheaterSelect.GetTheaterRecommendedRatingRange
// 0x0020 (0x0020 - 0x0000)
struct FortTheaterSelect_GetTheaterRecommendedRatingRange final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minimum;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maximum;                                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTheaterSelect_GetTheaterRecommendedRatingRange) == 0x000008, "Wrong alignment on FortTheaterSelect_GetTheaterRecommendedRatingRange");
static_assert(sizeof(FortTheaterSelect_GetTheaterRecommendedRatingRange) == 0x000020, "Wrong size on FortTheaterSelect_GetTheaterRecommendedRatingRange");
static_assert(offsetof(FortTheaterSelect_GetTheaterRecommendedRatingRange, UniqueId) == 0x000000, "Member 'FortTheaterSelect_GetTheaterRecommendedRatingRange::UniqueId' has a wrong offset!");
static_assert(offsetof(FortTheaterSelect_GetTheaterRecommendedRatingRange, Minimum) == 0x000010, "Member 'FortTheaterSelect_GetTheaterRecommendedRatingRange::Minimum' has a wrong offset!");
static_assert(offsetof(FortTheaterSelect_GetTheaterRecommendedRatingRange, Maximum) == 0x000014, "Member 'FortTheaterSelect_GetTheaterRecommendedRatingRange::Maximum' has a wrong offset!");
static_assert(offsetof(FortTheaterSelect_GetTheaterRecommendedRatingRange, ReturnValue) == 0x000018, "Member 'FortTheaterSelect_GetTheaterRecommendedRatingRange::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortToastDisplayArea.OnDisplayToast
// 0x0008 (0x0008 - 0x0000)
struct FortToastDisplayArea_OnDisplayToast final
{
public:
	class UFortUINotification*                    NewToast;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortToastDisplayArea_OnDisplayToast) == 0x000008, "Wrong alignment on FortToastDisplayArea_OnDisplayToast");
static_assert(sizeof(FortToastDisplayArea_OnDisplayToast) == 0x000008, "Wrong size on FortToastDisplayArea_OnDisplayToast");
static_assert(offsetof(FortToastDisplayArea_OnDisplayToast, NewToast) == 0x000000, "Member 'FortToastDisplayArea_OnDisplayToast::NewToast' has a wrong offset!");

// Function FortniteUI.FortTouchLookStick.OnFireFromIndexStopped
// 0x0004 (0x0004 - 0x0000)
struct FortTouchLookStick_OnFireFromIndexStopped final
{
public:
	int32                                         StopFireIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchLookStick_OnFireFromIndexStopped) == 0x000004, "Wrong alignment on FortTouchLookStick_OnFireFromIndexStopped");
static_assert(sizeof(FortTouchLookStick_OnFireFromIndexStopped) == 0x000004, "Wrong size on FortTouchLookStick_OnFireFromIndexStopped");
static_assert(offsetof(FortTouchLookStick_OnFireFromIndexStopped, StopFireIndex) == 0x000000, "Member 'FortTouchLookStick_OnFireFromIndexStopped::StopFireIndex' has a wrong offset!");

// Function FortniteUI.FortTouchLookStick.SetFiringState
// 0x0001 (0x0001 - 0x0000)
struct FortTouchLookStick_SetFiringState final
{
public:
	bool                                          IsFiring;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchLookStick_SetFiringState) == 0x000001, "Wrong alignment on FortTouchLookStick_SetFiringState");
static_assert(sizeof(FortTouchLookStick_SetFiringState) == 0x000001, "Wrong size on FortTouchLookStick_SetFiringState");
static_assert(offsetof(FortTouchLookStick_SetFiringState, IsFiring) == 0x000000, "Member 'FortTouchLookStick_SetFiringState::IsFiring' has a wrong offset!");

// Function FortniteUI.FortTouchLookStick.SetSize
// 0x0004 (0x0004 - 0x0000)
struct FortTouchLookStick_SetSize final
{
public:
	float                                         NewSize;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchLookStick_SetSize) == 0x000004, "Wrong alignment on FortTouchLookStick_SetSize");
static_assert(sizeof(FortTouchLookStick_SetSize) == 0x000004, "Wrong size on FortTouchLookStick_SetSize");
static_assert(offsetof(FortTouchLookStick_SetSize, NewSize) == 0x000000, "Member 'FortTouchLookStick_SetSize::NewSize' has a wrong offset!");

// Function FortniteUI.FortTouchLookStick.SetTouchStickPositionAbsolute
// 0x0008 (0x0008 - 0x0000)
struct FortTouchLookStick_SetTouchStickPositionAbsolute final
{
public:
	struct FVector2D                              TouchPosition;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchLookStick_SetTouchStickPositionAbsolute) == 0x000004, "Wrong alignment on FortTouchLookStick_SetTouchStickPositionAbsolute");
static_assert(sizeof(FortTouchLookStick_SetTouchStickPositionAbsolute) == 0x000008, "Wrong size on FortTouchLookStick_SetTouchStickPositionAbsolute");
static_assert(offsetof(FortTouchLookStick_SetTouchStickPositionAbsolute, TouchPosition) == 0x000000, "Member 'FortTouchLookStick_SetTouchStickPositionAbsolute::TouchPosition' has a wrong offset!");

// Function FortniteUI.FortTouchLookStick.SetTouchStickPositionLocal
// 0x0008 (0x0008 - 0x0000)
struct FortTouchLookStick_SetTouchStickPositionLocal final
{
public:
	struct FVector2D                              TouchPosition;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchLookStick_SetTouchStickPositionLocal) == 0x000004, "Wrong alignment on FortTouchLookStick_SetTouchStickPositionLocal");
static_assert(sizeof(FortTouchLookStick_SetTouchStickPositionLocal) == 0x000008, "Wrong size on FortTouchLookStick_SetTouchStickPositionLocal");
static_assert(offsetof(FortTouchLookStick_SetTouchStickPositionLocal, TouchPosition) == 0x000000, "Member 'FortTouchLookStick_SetTouchStickPositionLocal::TouchPosition' has a wrong offset!");

// Function FortniteUI.FortTouchLookStick.GetShowAllTimeTime
// 0x0001 (0x0001 - 0x0000)
struct FortTouchLookStick_GetShowAllTimeTime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchLookStick_GetShowAllTimeTime) == 0x000001, "Wrong alignment on FortTouchLookStick_GetShowAllTimeTime");
static_assert(sizeof(FortTouchLookStick_GetShowAllTimeTime) == 0x000001, "Wrong size on FortTouchLookStick_GetShowAllTimeTime");
static_assert(offsetof(FortTouchLookStick_GetShowAllTimeTime, ReturnValue) == 0x000000, "Member 'FortTouchLookStick_GetShowAllTimeTime::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTouchLookStick.GetSize
// 0x0004 (0x0004 - 0x0000)
struct FortTouchLookStick_GetSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTouchLookStick_GetSize) == 0x000004, "Wrong alignment on FortTouchLookStick_GetSize");
static_assert(sizeof(FortTouchLookStick_GetSize) == 0x000004, "Wrong size on FortTouchLookStick_GetSize");
static_assert(offsetof(FortTouchLookStick_GetSize, ReturnValue) == 0x000000, "Member 'FortTouchLookStick_GetSize::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTouchLookStick.IsFireButtonUnderTouch
// 0x000C (0x000C - 0x0000)
struct FortTouchLookStick_IsFireButtonUnderTouch final
{
public:
	struct FVector2D                              TouchPosition;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTouchLookStick_IsFireButtonUnderTouch) == 0x000004, "Wrong alignment on FortTouchLookStick_IsFireButtonUnderTouch");
static_assert(sizeof(FortTouchLookStick_IsFireButtonUnderTouch) == 0x00000C, "Wrong size on FortTouchLookStick_IsFireButtonUnderTouch");
static_assert(offsetof(FortTouchLookStick_IsFireButtonUnderTouch, TouchPosition) == 0x000000, "Member 'FortTouchLookStick_IsFireButtonUnderTouch::TouchPosition' has a wrong offset!");
static_assert(offsetof(FortTouchLookStick_IsFireButtonUnderTouch, ReturnValue) == 0x000008, "Member 'FortTouchLookStick_IsFireButtonUnderTouch::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTournamentModal.OnTournamentSet
// 0x0020 (0x0020 - 0x0000)
struct FortTournamentModal_OnTournamentSet final
{
public:
	struct FLinearColor                           LeftColor;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RightColor;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTournamentModal_OnTournamentSet) == 0x000004, "Wrong alignment on FortTournamentModal_OnTournamentSet");
static_assert(sizeof(FortTournamentModal_OnTournamentSet) == 0x000020, "Wrong size on FortTournamentModal_OnTournamentSet");
static_assert(offsetof(FortTournamentModal_OnTournamentSet, LeftColor) == 0x000000, "Member 'FortTournamentModal_OnTournamentSet::LeftColor' has a wrong offset!");
static_assert(offsetof(FortTournamentModal_OnTournamentSet, RightColor) == 0x000010, "Member 'FortTournamentModal_OnTournamentSet::RightColor' has a wrong offset!");

// Function FortniteUI.FortTransformSlotItemPicker.RebuildSlottableItems
// 0x0028 (0x0028 - 0x0000)
struct FortTransformSlotItemPicker_RebuildSlottableItems final
{
public:
	TArray<EFortInventoryFilter>                  ItemFilters;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EFortItemType                                 ItemType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItem*>                      ItemsToIgnore;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTransformSlotItemPicker_RebuildSlottableItems) == 0x000008, "Wrong alignment on FortTransformSlotItemPicker_RebuildSlottableItems");
static_assert(sizeof(FortTransformSlotItemPicker_RebuildSlottableItems) == 0x000028, "Wrong size on FortTransformSlotItemPicker_RebuildSlottableItems");
static_assert(offsetof(FortTransformSlotItemPicker_RebuildSlottableItems, ItemFilters) == 0x000000, "Member 'FortTransformSlotItemPicker_RebuildSlottableItems::ItemFilters' has a wrong offset!");
static_assert(offsetof(FortTransformSlotItemPicker_RebuildSlottableItems, ItemType) == 0x000010, "Member 'FortTransformSlotItemPicker_RebuildSlottableItems::ItemType' has a wrong offset!");
static_assert(offsetof(FortTransformSlotItemPicker_RebuildSlottableItems, ItemsToIgnore) == 0x000018, "Member 'FortTransformSlotItemPicker_RebuildSlottableItems::ItemsToIgnore' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.CanStartTutorial
// 0x0018 (0x0018 - 0x0000)
struct FortTutorialContext_CanStartTutorial final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialType                                 TutorialType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialContext_CanStartTutorial) == 0x000008, "Wrong alignment on FortTutorialContext_CanStartTutorial");
static_assert(sizeof(FortTutorialContext_CanStartTutorial) == 0x000018, "Wrong size on FortTutorialContext_CanStartTutorial");
static_assert(offsetof(FortTutorialContext_CanStartTutorial, Quest) == 0x000000, "Member 'FortTutorialContext_CanStartTutorial::Quest' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_CanStartTutorial, WidgetName) == 0x000008, "Member 'FortTutorialContext_CanStartTutorial::WidgetName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_CanStartTutorial, TutorialType) == 0x000010, "Member 'FortTutorialContext_CanStartTutorial::TutorialType' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_CanStartTutorial, ReturnValue) == 0x000011, "Member 'FortTutorialContext_CanStartTutorial::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.DisableTutorialCallout
// 0x0014 (0x0014 - 0x0000)
struct FortTutorialContext_DisableTutorialCallout final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TutorialQuestObjectiveName;                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialType                                 TutorialType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialContext_DisableTutorialCallout) == 0x000004, "Wrong alignment on FortTutorialContext_DisableTutorialCallout");
static_assert(sizeof(FortTutorialContext_DisableTutorialCallout) == 0x000014, "Wrong size on FortTutorialContext_DisableTutorialCallout");
static_assert(offsetof(FortTutorialContext_DisableTutorialCallout, WidgetName) == 0x000000, "Member 'FortTutorialContext_DisableTutorialCallout::WidgetName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_DisableTutorialCallout, TutorialQuestObjectiveName) == 0x000008, "Member 'FortTutorialContext_DisableTutorialCallout::TutorialQuestObjectiveName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_DisableTutorialCallout, TutorialType) == 0x000010, "Member 'FortTutorialContext_DisableTutorialCallout::TutorialType' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.EnableTutorialCallout
// 0x0014 (0x0014 - 0x0000)
struct FortTutorialContext_EnableTutorialCallout final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TutorialQuestObjectiveName;                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialType                                 TutorialType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialContext_EnableTutorialCallout) == 0x000004, "Wrong alignment on FortTutorialContext_EnableTutorialCallout");
static_assert(sizeof(FortTutorialContext_EnableTutorialCallout) == 0x000014, "Wrong size on FortTutorialContext_EnableTutorialCallout");
static_assert(offsetof(FortTutorialContext_EnableTutorialCallout, WidgetName) == 0x000000, "Member 'FortTutorialContext_EnableTutorialCallout::WidgetName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_EnableTutorialCallout, TutorialQuestObjectiveName) == 0x000008, "Member 'FortTutorialContext_EnableTutorialCallout::TutorialQuestObjectiveName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_EnableTutorialCallout, TutorialType) == 0x000010, "Member 'FortTutorialContext_EnableTutorialCallout::TutorialType' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.FinishTutorial
// 0x0018 (0x0018 - 0x0000)
struct FortTutorialContext_FinishTutorial final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialType                                 TutorialType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialContext_FinishTutorial) == 0x000008, "Wrong alignment on FortTutorialContext_FinishTutorial");
static_assert(sizeof(FortTutorialContext_FinishTutorial) == 0x000018, "Wrong size on FortTutorialContext_FinishTutorial");
static_assert(offsetof(FortTutorialContext_FinishTutorial, Quest) == 0x000000, "Member 'FortTutorialContext_FinishTutorial::Quest' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_FinishTutorial, WidgetName) == 0x000008, "Member 'FortTutorialContext_FinishTutorial::WidgetName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_FinishTutorial, TutorialType) == 0x000010, "Member 'FortTutorialContext_FinishTutorial::TutorialType' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.GetHiddenTutorialCallouts
// 0x0010 (0x0010 - 0x0000)
struct FortTutorialContext_GetHiddenTutorialCallouts final
{
public:
	TArray<class FName>                           WidgetNames;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_GetHiddenTutorialCallouts) == 0x000008, "Wrong alignment on FortTutorialContext_GetHiddenTutorialCallouts");
static_assert(sizeof(FortTutorialContext_GetHiddenTutorialCallouts) == 0x000010, "Wrong size on FortTutorialContext_GetHiddenTutorialCallouts");
static_assert(offsetof(FortTutorialContext_GetHiddenTutorialCallouts, WidgetNames) == 0x000000, "Member 'FortTutorialContext_GetHiddenTutorialCallouts::WidgetNames' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.GetTutorialCallouts
// 0x0010 (0x0010 - 0x0000)
struct FortTutorialContext_GetTutorialCallouts final
{
public:
	TArray<class FName>                           WidgetNames;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_GetTutorialCallouts) == 0x000008, "Wrong alignment on FortTutorialContext_GetTutorialCallouts");
static_assert(sizeof(FortTutorialContext_GetTutorialCallouts) == 0x000010, "Wrong size on FortTutorialContext_GetTutorialCallouts");
static_assert(offsetof(FortTutorialContext_GetTutorialCallouts, WidgetNames) == 0x000000, "Member 'FortTutorialContext_GetTutorialCallouts::WidgetNames' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.HideTutorialCallout
// 0x0014 (0x0014 - 0x0000)
struct FortTutorialContext_HideTutorialCallout final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TutorialQuestObjectiveName;                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialType                                 TutorialType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialContext_HideTutorialCallout) == 0x000004, "Wrong alignment on FortTutorialContext_HideTutorialCallout");
static_assert(sizeof(FortTutorialContext_HideTutorialCallout) == 0x000014, "Wrong size on FortTutorialContext_HideTutorialCallout");
static_assert(offsetof(FortTutorialContext_HideTutorialCallout, WidgetName) == 0x000000, "Member 'FortTutorialContext_HideTutorialCallout::WidgetName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_HideTutorialCallout, TutorialQuestObjectiveName) == 0x000008, "Member 'FortTutorialContext_HideTutorialCallout::TutorialQuestObjectiveName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_HideTutorialCallout, TutorialType) == 0x000010, "Member 'FortTutorialContext_HideTutorialCallout::TutorialType' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.IsObjectiveNextTutorialObjective
// 0x0018 (0x0018 - 0x0000)
struct FortTutorialContext_IsObjectiveNextTutorialObjective final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TutorialObjectiveName;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialContext_IsObjectiveNextTutorialObjective) == 0x000008, "Wrong alignment on FortTutorialContext_IsObjectiveNextTutorialObjective");
static_assert(sizeof(FortTutorialContext_IsObjectiveNextTutorialObjective) == 0x000018, "Wrong size on FortTutorialContext_IsObjectiveNextTutorialObjective");
static_assert(offsetof(FortTutorialContext_IsObjectiveNextTutorialObjective, Quest) == 0x000000, "Member 'FortTutorialContext_IsObjectiveNextTutorialObjective::Quest' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_IsObjectiveNextTutorialObjective, TutorialObjectiveName) == 0x000008, "Member 'FortTutorialContext_IsObjectiveNextTutorialObjective::TutorialObjectiveName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_IsObjectiveNextTutorialObjective, ReturnValue) == 0x000010, "Member 'FortTutorialContext_IsObjectiveNextTutorialObjective::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.IsTutorialCalloutVisible
// 0x000C (0x000C - 0x0000)
struct FortTutorialContext_IsTutorialCalloutVisible final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialContext_IsTutorialCalloutVisible) == 0x000004, "Wrong alignment on FortTutorialContext_IsTutorialCalloutVisible");
static_assert(sizeof(FortTutorialContext_IsTutorialCalloutVisible) == 0x00000C, "Wrong size on FortTutorialContext_IsTutorialCalloutVisible");
static_assert(offsetof(FortTutorialContext_IsTutorialCalloutVisible, WidgetName) == 0x000000, "Member 'FortTutorialContext_IsTutorialCalloutVisible::WidgetName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_IsTutorialCalloutVisible, ReturnValue) == 0x000008, "Member 'FortTutorialContext_IsTutorialCalloutVisible::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.OnNewAnnouncementStartedOnClient
// 0x0008 (0x0008 - 0x0000)
struct FortTutorialContext_OnNewAnnouncementStartedOnClient final
{
public:
	class AFortClientAnnouncement*                NewAnnouncement;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_OnNewAnnouncementStartedOnClient) == 0x000008, "Wrong alignment on FortTutorialContext_OnNewAnnouncementStartedOnClient");
static_assert(sizeof(FortTutorialContext_OnNewAnnouncementStartedOnClient) == 0x000008, "Wrong size on FortTutorialContext_OnNewAnnouncementStartedOnClient");
static_assert(offsetof(FortTutorialContext_OnNewAnnouncementStartedOnClient, NewAnnouncement) == 0x000000, "Member 'FortTutorialContext_OnNewAnnouncementStartedOnClient::NewAnnouncement' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.StartTutorial
// 0x000C (0x000C - 0x0000)
struct FortTutorialContext_StartTutorial final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialType                                 TutorialType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialContext_StartTutorial) == 0x000004, "Wrong alignment on FortTutorialContext_StartTutorial");
static_assert(sizeof(FortTutorialContext_StartTutorial) == 0x00000C, "Wrong size on FortTutorialContext_StartTutorial");
static_assert(offsetof(FortTutorialContext_StartTutorial, WidgetName) == 0x000000, "Member 'FortTutorialContext_StartTutorial::WidgetName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_StartTutorial, TutorialType) == 0x000008, "Member 'FortTutorialContext_StartTutorial::TutorialType' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.TryClearingPendingQuest
// 0x0008 (0x0008 - 0x0000)
struct FortTutorialContext_TryClearingPendingQuest final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_TryClearingPendingQuest) == 0x000008, "Wrong alignment on FortTutorialContext_TryClearingPendingQuest");
static_assert(sizeof(FortTutorialContext_TryClearingPendingQuest) == 0x000008, "Wrong size on FortTutorialContext_TryClearingPendingQuest");
static_assert(offsetof(FortTutorialContext_TryClearingPendingQuest, Quest) == 0x000000, "Member 'FortTutorialContext_TryClearingPendingQuest::Quest' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.UnhideTutorialCallout
// 0x0014 (0x0014 - 0x0000)
struct FortTutorialContext_UnhideTutorialCallout final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TutorialQuestObjectiveName;                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialType                                 TutorialType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialContext_UnhideTutorialCallout) == 0x000004, "Wrong alignment on FortTutorialContext_UnhideTutorialCallout");
static_assert(sizeof(FortTutorialContext_UnhideTutorialCallout) == 0x000014, "Wrong size on FortTutorialContext_UnhideTutorialCallout");
static_assert(offsetof(FortTutorialContext_UnhideTutorialCallout, WidgetName) == 0x000000, "Member 'FortTutorialContext_UnhideTutorialCallout::WidgetName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_UnhideTutorialCallout, TutorialQuestObjectiveName) == 0x000008, "Member 'FortTutorialContext_UnhideTutorialCallout::TutorialQuestObjectiveName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_UnhideTutorialCallout, TutorialType) == 0x000010, "Member 'FortTutorialContext_UnhideTutorialCallout::TutorialType' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.UpdateTutorialAnnouncement
// 0x0140 (0x0140 - 0x0000)
struct FortTutorialContext_UpdateTutorialAnnouncement final
{
public:
	struct FFortClientAnnouncementData_Tutorial   AnnouncementData;                                  // 0x0000(0x0138)(Parm, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0138(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialContext_UpdateTutorialAnnouncement) == 0x000008, "Wrong alignment on FortTutorialContext_UpdateTutorialAnnouncement");
static_assert(sizeof(FortTutorialContext_UpdateTutorialAnnouncement) == 0x000140, "Wrong size on FortTutorialContext_UpdateTutorialAnnouncement");
static_assert(offsetof(FortTutorialContext_UpdateTutorialAnnouncement, AnnouncementData) == 0x000000, "Member 'FortTutorialContext_UpdateTutorialAnnouncement::AnnouncementData' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_UpdateTutorialAnnouncement, bShow) == 0x000138, "Member 'FortTutorialContext_UpdateTutorialAnnouncement::bShow' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.GetTutorialData
// 0x0068 (0x0068 - 0x0000)
struct FortTutorialContext_GetTutorialData final
{
public:
	class FName                                   TutorialObjectiveName;                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortUITutorialData                    OutTutorialData;                                   // 0x0008(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialContext_GetTutorialData) == 0x000008, "Wrong alignment on FortTutorialContext_GetTutorialData");
static_assert(sizeof(FortTutorialContext_GetTutorialData) == 0x000068, "Wrong size on FortTutorialContext_GetTutorialData");
static_assert(offsetof(FortTutorialContext_GetTutorialData, TutorialObjectiveName) == 0x000000, "Member 'FortTutorialContext_GetTutorialData::TutorialObjectiveName' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_GetTutorialData, OutTutorialData) == 0x000008, "Member 'FortTutorialContext_GetTutorialData::OutTutorialData' has a wrong offset!");
static_assert(offsetof(FortTutorialContext_GetTutorialData, ReturnValue) == 0x000060, "Member 'FortTutorialContext_GetTutorialData::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortTutorialContext.ShouldPromptToSkipTutorial
// 0x0001 (0x0001 - 0x0000)
struct FortTutorialContext_ShouldPromptToSkipTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_ShouldPromptToSkipTutorial) == 0x000001, "Wrong alignment on FortTutorialContext_ShouldPromptToSkipTutorial");
static_assert(sizeof(FortTutorialContext_ShouldPromptToSkipTutorial) == 0x000001, "Wrong size on FortTutorialContext_ShouldPromptToSkipTutorial");
static_assert(offsetof(FortTutorialContext_ShouldPromptToSkipTutorial, ReturnValue) == 0x000000, "Member 'FortTutorialContext_ShouldPromptToSkipTutorial::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.GetAssetFromTemplateId
// 0x0018 (0x0018 - 0x0000)
struct FortUIBlueprintFunctionLibrary_GetAssetFromTemplateId final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_GetAssetFromTemplateId) == 0x000008, "Wrong alignment on FortUIBlueprintFunctionLibrary_GetAssetFromTemplateId");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_GetAssetFromTemplateId) == 0x000018, "Wrong size on FortUIBlueprintFunctionLibrary_GetAssetFromTemplateId");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetAssetFromTemplateId, TemplateId) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_GetAssetFromTemplateId::TemplateId' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetAssetFromTemplateId, ReturnValue) == 0x000010, "Member 'FortUIBlueprintFunctionLibrary_GetAssetFromTemplateId::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.GetItemDefinitionSmallPreviewImageBrush
// 0x0098 (0x0098 - 0x0000)
struct FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageBrush final
{
public:
	const class UFortItemDefinition*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0010(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageBrush) == 0x000008, "Wrong alignment on FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageBrush");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageBrush) == 0x000098, "Wrong size on FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageBrush");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageBrush, ItemDefinition) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageBrush::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageBrush, BrushSize) == 0x000008, "Member 'FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageBrush::BrushSize' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageBrush, ReturnValue) == 0x000010, "Member 'FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageBrush::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.GetItemDefinitionSmallPreviewImageMultiSizeBrush
// 0x0338 (0x0338 - 0x0000)
struct FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageMultiSizeBrush final
{
public:
	const class UFortItemDefinition*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    ReturnValue;                                       // 0x0008(0x0330)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageMultiSizeBrush) == 0x000008, "Wrong alignment on FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageMultiSizeBrush");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageMultiSizeBrush) == 0x000338, "Wrong size on FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageMultiSizeBrush");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageMultiSizeBrush, ItemDefinition) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageMultiSizeBrush::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageMultiSizeBrush, ReturnValue) == 0x000008, "Member 'FortUIBlueprintFunctionLibrary_GetItemDefinitionSmallPreviewImageMultiSizeBrush::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.GetItemSmallPreviewImageBrush
// 0x0098 (0x0098 - 0x0000)
struct FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageBrush final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0010(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageBrush) == 0x000008, "Wrong alignment on FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageBrush");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageBrush) == 0x000098, "Wrong size on FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageBrush");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageBrush, Item) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageBrush::Item' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageBrush, BrushSize) == 0x000008, "Member 'FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageBrush::BrushSize' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageBrush, ReturnValue) == 0x000010, "Member 'FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageBrush::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.GetItemSmallPreviewImageMultiSizeBrush
// 0x0338 (0x0338 - 0x0000)
struct FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageMultiSizeBrush final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    ReturnValue;                                       // 0x0008(0x0330)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageMultiSizeBrush) == 0x000008, "Wrong alignment on FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageMultiSizeBrush");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageMultiSizeBrush) == 0x000338, "Wrong size on FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageMultiSizeBrush");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageMultiSizeBrush, Item) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageMultiSizeBrush::Item' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageMultiSizeBrush, ReturnValue) == 0x000008, "Member 'FortUIBlueprintFunctionLibrary_GetItemSmallPreviewImageMultiSizeBrush::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.GetMetaBoolOnOffer
// 0x0090 (0x0090 - 0x0000)
struct FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer final
{
public:
	struct FCardPackOffer                         Offer;                                             // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultValue;                                     // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0089(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer) == 0x000008, "Wrong alignment on FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer) == 0x000090, "Wrong size on FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer, Offer) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer::Offer' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer, Key) == 0x000078, "Member 'FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer::Key' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer, bDefaultValue) == 0x000088, "Member 'FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer::bDefaultValue' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer, ReturnValue) == 0x000089, "Member 'FortUIBlueprintFunctionLibrary_GetMetaBoolOnOffer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.GetMetaIntOnOffer
// 0x0090 (0x0090 - 0x0000)
struct FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer final
{
public:
	struct FCardPackOffer                         Offer;                                             // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultValue;                                      // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x008C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer) == 0x000008, "Wrong alignment on FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer) == 0x000090, "Wrong size on FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer, Offer) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer::Offer' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer, Key) == 0x000078, "Member 'FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer::Key' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer, DefaultValue) == 0x000088, "Member 'FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer::DefaultValue' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer, ReturnValue) == 0x00008C, "Member 'FortUIBlueprintFunctionLibrary_GetMetaIntOnOffer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.GetMetaStringOnOffer
// 0x0098 (0x0098 - 0x0000)
struct FortUIBlueprintFunctionLibrary_GetMetaStringOnOffer final
{
public:
	struct FCardPackOffer                         Offer;                                             // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_GetMetaStringOnOffer) == 0x000008, "Wrong alignment on FortUIBlueprintFunctionLibrary_GetMetaStringOnOffer");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_GetMetaStringOnOffer) == 0x000098, "Wrong size on FortUIBlueprintFunctionLibrary_GetMetaStringOnOffer");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetMetaStringOnOffer, Offer) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_GetMetaStringOnOffer::Offer' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetMetaStringOnOffer, Key) == 0x000078, "Member 'FortUIBlueprintFunctionLibrary_GetMetaStringOnOffer::Key' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetMetaStringOnOffer, ReturnValue) == 0x000088, "Member 'FortUIBlueprintFunctionLibrary_GetMetaStringOnOffer::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.GetOrLoadSynchronously
// 0x0030 (0x0030 - 0x0000)
struct FortUIBlueprintFunctionLibrary_GetOrLoadSynchronously final
{
public:
	TSoftObjectPtr<class UTexture2D>              SoftTexture2D;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_GetOrLoadSynchronously) == 0x000008, "Wrong alignment on FortUIBlueprintFunctionLibrary_GetOrLoadSynchronously");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_GetOrLoadSynchronously) == 0x000030, "Wrong size on FortUIBlueprintFunctionLibrary_GetOrLoadSynchronously");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetOrLoadSynchronously, SoftTexture2D) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_GetOrLoadSynchronously::SoftTexture2D' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetOrLoadSynchronously, ReturnValue) == 0x000028, "Member 'FortUIBlueprintFunctionLibrary_GetOrLoadSynchronously::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.GetStandardBrushSize
// 0x000C (0x000C - 0x0000)
struct FortUIBlueprintFunctionLibrary_GetStandardBrushSize final
{
public:
	EFortBrushSize                                BrushSize;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_GetStandardBrushSize) == 0x000004, "Wrong alignment on FortUIBlueprintFunctionLibrary_GetStandardBrushSize");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_GetStandardBrushSize) == 0x00000C, "Wrong size on FortUIBlueprintFunctionLibrary_GetStandardBrushSize");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetStandardBrushSize, BrushSize) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_GetStandardBrushSize::BrushSize' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetStandardBrushSize, ReturnValue) == 0x000004, "Member 'FortUIBlueprintFunctionLibrary_GetStandardBrushSize::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.GetTimespanAsSimpleString
// 0x0020 (0x0020 - 0x0000)
struct FortUIBlueprintFunctionLibrary_GetTimespanAsSimpleString final
{
public:
	struct FTimespan                              Timespan;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_GetTimespanAsSimpleString) == 0x000008, "Wrong alignment on FortUIBlueprintFunctionLibrary_GetTimespanAsSimpleString");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_GetTimespanAsSimpleString) == 0x000020, "Wrong size on FortUIBlueprintFunctionLibrary_GetTimespanAsSimpleString");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetTimespanAsSimpleString, Timespan) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_GetTimespanAsSimpleString::Timespan' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_GetTimespanAsSimpleString, ReturnValue) == 0x000008, "Member 'FortUIBlueprintFunctionLibrary_GetTimespanAsSimpleString::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIBlueprintFunctionLibrary.RoundFloat
// 0x000C (0x000C - 0x0000)
struct FortUIBlueprintFunctionLibrary_RoundFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERoundingMode                                 RoundingMode;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIBlueprintFunctionLibrary_RoundFloat) == 0x000004, "Wrong alignment on FortUIBlueprintFunctionLibrary_RoundFloat");
static_assert(sizeof(FortUIBlueprintFunctionLibrary_RoundFloat) == 0x00000C, "Wrong size on FortUIBlueprintFunctionLibrary_RoundFloat");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_RoundFloat, Value) == 0x000000, "Member 'FortUIBlueprintFunctionLibrary_RoundFloat::Value' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_RoundFloat, RoundingMode) == 0x000004, "Member 'FortUIBlueprintFunctionLibrary_RoundFloat::RoundingMode' has a wrong offset!");
static_assert(offsetof(FortUIBlueprintFunctionLibrary_RoundFloat, ReturnValue) == 0x000008, "Member 'FortUIBlueprintFunctionLibrary_RoundFloat::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUIMessageItemWidget.OnStackSizeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortUIMessageItemWidget_OnStackSizeChanged final
{
public:
	int32                                         OldStackSize;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIMessageItemWidget_OnStackSizeChanged) == 0x000004, "Wrong alignment on FortUIMessageItemWidget_OnStackSizeChanged");
static_assert(sizeof(FortUIMessageItemWidget_OnStackSizeChanged) == 0x000004, "Wrong size on FortUIMessageItemWidget_OnStackSizeChanged");
static_assert(offsetof(FortUIMessageItemWidget_OnStackSizeChanged, OldStackSize) == 0x000000, "Member 'FortUIMessageItemWidget_OnStackSizeChanged::OldStackSize' has a wrong offset!");

// Function FortniteUI.FortUIRewardReport.GetRewardedChestIndex
// 0x0004 (0x0004 - 0x0000)
struct FortUIRewardReport_GetRewardedChestIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIRewardReport_GetRewardedChestIndex) == 0x000004, "Wrong alignment on FortUIRewardReport_GetRewardedChestIndex");
static_assert(sizeof(FortUIRewardReport_GetRewardedChestIndex) == 0x000004, "Wrong size on FortUIRewardReport_GetRewardedChestIndex");
static_assert(offsetof(FortUIRewardReport_GetRewardedChestIndex, ReturnValue) == 0x000000, "Member 'FortUIRewardReport_GetRewardedChestIndex::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.CanAffordUpgrade
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeInfo_CanAffordUpgrade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_CanAffordUpgrade) == 0x000001, "Wrong alignment on FortUpgradeInfo_CanAffordUpgrade");
static_assert(sizeof(FortUpgradeInfo_CanAffordUpgrade) == 0x000001, "Wrong size on FortUpgradeInfo_CanAffordUpgrade");
static_assert(offsetof(FortUpgradeInfo_CanAffordUpgrade, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_CanAffordUpgrade::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.CanPreview
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeInfo_CanPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_CanPreview) == 0x000001, "Wrong alignment on FortUpgradeInfo_CanPreview");
static_assert(sizeof(FortUpgradeInfo_CanPreview) == 0x000001, "Wrong size on FortUpgradeInfo_CanPreview");
static_assert(offsetof(FortUpgradeInfo_CanPreview, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_CanPreview::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetCost
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeInfo_GetCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetCost) == 0x000004, "Wrong alignment on FortUpgradeInfo_GetCost");
static_assert(sizeof(FortUpgradeInfo_GetCost) == 0x000004, "Wrong size on FortUpgradeInfo_GetCost");
static_assert(offsetof(FortUpgradeInfo_GetCost, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetCost::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetCurrentLevel
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeInfo_GetCurrentLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetCurrentLevel) == 0x000004, "Wrong alignment on FortUpgradeInfo_GetCurrentLevel");
static_assert(sizeof(FortUpgradeInfo_GetCurrentLevel) == 0x000004, "Wrong size on FortUpgradeInfo_GetCurrentLevel");
static_assert(offsetof(FortUpgradeInfo_GetCurrentLevel, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetCurrentLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetDescription) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetDescription");
static_assert(sizeof(FortUpgradeInfo_GetDescription) == 0x000018, "Wrong size on FortUpgradeInfo_GetDescription");
static_assert(offsetof(FortUpgradeInfo_GetDescription, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetDisplayAttributes
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetDisplayAttributes final
{
public:
	TArray<struct FFortDisplayAttribute>          OutDisplayAttributes;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUpgradeInfo_GetDisplayAttributes) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetDisplayAttributes");
static_assert(sizeof(FortUpgradeInfo_GetDisplayAttributes) == 0x000018, "Wrong size on FortUpgradeInfo_GetDisplayAttributes");
static_assert(offsetof(FortUpgradeInfo_GetDisplayAttributes, OutDisplayAttributes) == 0x000000, "Member 'FortUpgradeInfo_GetDisplayAttributes::OutDisplayAttributes' has a wrong offset!");
static_assert(offsetof(FortUpgradeInfo_GetDisplayAttributes, ReturnValue) == 0x000010, "Member 'FortUpgradeInfo_GetDisplayAttributes::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetIcon
// 0x0030 (0x0030 - 0x0000)
struct FortUpgradeInfo_GetIcon final
{
public:
	EUpgradeInfoImageSize                         ImageSize;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetIcon) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetIcon");
static_assert(sizeof(FortUpgradeInfo_GetIcon) == 0x000030, "Wrong size on FortUpgradeInfo_GetIcon");
static_assert(offsetof(FortUpgradeInfo_GetIcon, ImageSize) == 0x000000, "Member 'FortUpgradeInfo_GetIcon::ImageSize' has a wrong offset!");
static_assert(offsetof(FortUpgradeInfo_GetIcon, ReturnValue) == 0x000008, "Member 'FortUpgradeInfo_GetIcon::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetItemName
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetItemName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetItemName) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetItemName");
static_assert(sizeof(FortUpgradeInfo_GetItemName) == 0x000018, "Wrong size on FortUpgradeInfo_GetItemName");
static_assert(offsetof(FortUpgradeInfo_GetItemName, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetItemName::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetMaxLevel
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeInfo_GetMaxLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetMaxLevel) == 0x000004, "Wrong alignment on FortUpgradeInfo_GetMaxLevel");
static_assert(sizeof(FortUpgradeInfo_GetMaxLevel) == 0x000004, "Wrong size on FortUpgradeInfo_GetMaxLevel");
static_assert(offsetof(FortUpgradeInfo_GetMaxLevel, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetMaxLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetNextLevel
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeInfo_GetNextLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetNextLevel) == 0x000004, "Wrong alignment on FortUpgradeInfo_GetNextLevel");
static_assert(sizeof(FortUpgradeInfo_GetNextLevel) == 0x000004, "Wrong size on FortUpgradeInfo_GetNextLevel");
static_assert(offsetof(FortUpgradeInfo_GetNextLevel, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetNextLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetNextLevelDescription
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetNextLevelDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetNextLevelDescription) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetNextLevelDescription");
static_assert(sizeof(FortUpgradeInfo_GetNextLevelDescription) == 0x000018, "Wrong size on FortUpgradeInfo_GetNextLevelDescription");
static_assert(offsetof(FortUpgradeInfo_GetNextLevelDescription, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetNextLevelDescription::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetNextLevelTitle
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetNextLevelTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetNextLevelTitle) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetNextLevelTitle");
static_assert(sizeof(FortUpgradeInfo_GetNextLevelTitle) == 0x000018, "Wrong size on FortUpgradeInfo_GetNextLevelTitle");
static_assert(offsetof(FortUpgradeInfo_GetNextLevelTitle, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetNextLevelTitle::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetTitle
// 0x0018 (0x0018 - 0x0000)
struct FortUpgradeInfo_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetTitle) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetTitle");
static_assert(sizeof(FortUpgradeInfo_GetTitle) == 0x000018, "Wrong size on FortUpgradeInfo_GetTitle");
static_assert(offsetof(FortUpgradeInfo_GetTitle, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetTitle::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetUpgradeUnlockLevel
// 0x0004 (0x0004 - 0x0000)
struct FortUpgradeInfo_GetUpgradeUnlockLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetUpgradeUnlockLevel) == 0x000004, "Wrong alignment on FortUpgradeInfo_GetUpgradeUnlockLevel");
static_assert(sizeof(FortUpgradeInfo_GetUpgradeUnlockLevel) == 0x000004, "Wrong size on FortUpgradeInfo_GetUpgradeUnlockLevel");
static_assert(offsetof(FortUpgradeInfo_GetUpgradeUnlockLevel, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetUpgradeUnlockLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.GetVideo
// 0x0008 (0x0008 - 0x0000)
struct FortUpgradeInfo_GetVideo final
{
public:
	class UMediaSource*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_GetVideo) == 0x000008, "Wrong alignment on FortUpgradeInfo_GetVideo");
static_assert(sizeof(FortUpgradeInfo_GetVideo) == 0x000008, "Wrong size on FortUpgradeInfo_GetVideo");
static_assert(offsetof(FortUpgradeInfo_GetVideo, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_GetVideo::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.IsPreviewing
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeInfo_IsPreviewing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_IsPreviewing) == 0x000001, "Wrong alignment on FortUpgradeInfo_IsPreviewing");
static_assert(sizeof(FortUpgradeInfo_IsPreviewing) == 0x000001, "Wrong size on FortUpgradeInfo_IsPreviewing");
static_assert(offsetof(FortUpgradeInfo_IsPreviewing, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_IsPreviewing::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortUpgradeInfo.IsUpgradeUnlocked
// 0x0001 (0x0001 - 0x0000)
struct FortUpgradeInfo_IsUpgradeUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUpgradeInfo_IsUpgradeUnlocked) == 0x000001, "Wrong alignment on FortUpgradeInfo_IsUpgradeUnlocked");
static_assert(sizeof(FortUpgradeInfo_IsUpgradeUnlocked) == 0x000001, "Wrong size on FortUpgradeInfo_IsUpgradeUnlocked");
static_assert(offsetof(FortUpgradeInfo_IsUpgradeUnlocked, ReturnValue) == 0x000000, "Member 'FortUpgradeInfo_IsUpgradeUnlocked::ReturnValue' has a wrong offset!");

// Function FortniteUI.FortVoiceChannelSpeakerWidget.OnAnimateTalkingChanged
// 0x0001 (0x0001 - 0x0000)
struct FortVoiceChannelSpeakerWidget_OnAnimateTalkingChanged final
{
public:
	bool                                          bIsNowTalking;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVoiceChannelSpeakerWidget_OnAnimateTalkingChanged) == 0x000001, "Wrong alignment on FortVoiceChannelSpeakerWidget_OnAnimateTalkingChanged");
static_assert(sizeof(FortVoiceChannelSpeakerWidget_OnAnimateTalkingChanged) == 0x000001, "Wrong size on FortVoiceChannelSpeakerWidget_OnAnimateTalkingChanged");
static_assert(offsetof(FortVoiceChannelSpeakerWidget_OnAnimateTalkingChanged, bIsNowTalking) == 0x000000, "Member 'FortVoiceChannelSpeakerWidget_OnAnimateTalkingChanged::bIsNowTalking' has a wrong offset!");

// Function FortniteUI.FortVoiceChannelSpeakerWidget.OnStyleAssigned
// 0x0001 (0x0001 - 0x0000)
struct FortVoiceChannelSpeakerWidget_OnStyleAssigned final
{
public:
	EChannelSpeakerStyle                          NewStyle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVoiceChannelSpeakerWidget_OnStyleAssigned) == 0x000001, "Wrong alignment on FortVoiceChannelSpeakerWidget_OnStyleAssigned");
static_assert(sizeof(FortVoiceChannelSpeakerWidget_OnStyleAssigned) == 0x000001, "Wrong size on FortVoiceChannelSpeakerWidget_OnStyleAssigned");
static_assert(offsetof(FortVoiceChannelSpeakerWidget_OnStyleAssigned, NewStyle) == 0x000000, "Member 'FortVoiceChannelSpeakerWidget_OnStyleAssigned::NewStyle' has a wrong offset!");

// Function FortniteUI.FortWorkerSetBonusIcon.SetGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct FortWorkerSetBonusIcon_SetGameplayTag final
{
public:
	struct FGameplayTag                           InGameplayTag;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorkerSetBonusIcon_SetGameplayTag) == 0x000004, "Wrong alignment on FortWorkerSetBonusIcon_SetGameplayTag");
static_assert(sizeof(FortWorkerSetBonusIcon_SetGameplayTag) == 0x000008, "Wrong size on FortWorkerSetBonusIcon_SetGameplayTag");
static_assert(offsetof(FortWorkerSetBonusIcon_SetGameplayTag, InGameplayTag) == 0x000000, "Member 'FortWorkerSetBonusIcon_SetGameplayTag::InGameplayTag' has a wrong offset!");

// Function FortniteUI.FriendCodeShareButtonBase.OnFriendCodeIssued
// 0x0028 (0x0028 - 0x0000)
struct FriendCodeShareButtonBase_OnFriendCodeIssued final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFriendCode                            FriendCode;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendCodeShareButtonBase_OnFriendCodeIssued) == 0x000008, "Wrong alignment on FriendCodeShareButtonBase_OnFriendCodeIssued");
static_assert(sizeof(FriendCodeShareButtonBase_OnFriendCodeIssued) == 0x000028, "Wrong size on FriendCodeShareButtonBase_OnFriendCodeIssued");
static_assert(offsetof(FriendCodeShareButtonBase_OnFriendCodeIssued, bSuccess) == 0x000000, "Member 'FriendCodeShareButtonBase_OnFriendCodeIssued::bSuccess' has a wrong offset!");
static_assert(offsetof(FriendCodeShareButtonBase_OnFriendCodeIssued, FriendCode) == 0x000008, "Member 'FriendCodeShareButtonBase_OnFriendCodeIssued::FriendCode' has a wrong offset!");

// Function FortniteUI.FriendCodeShareButtonBase.OnQueryUnredeemedFriendCodesComplete
// 0x0018 (0x0018 - 0x0000)
struct FriendCodeShareButtonBase_OnQueryUnredeemedFriendCodesComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFriendCode>                    FriendCodes;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendCodeShareButtonBase_OnQueryUnredeemedFriendCodesComplete) == 0x000008, "Wrong alignment on FriendCodeShareButtonBase_OnQueryUnredeemedFriendCodesComplete");
static_assert(sizeof(FriendCodeShareButtonBase_OnQueryUnredeemedFriendCodesComplete) == 0x000018, "Wrong size on FriendCodeShareButtonBase_OnQueryUnredeemedFriendCodesComplete");
static_assert(offsetof(FriendCodeShareButtonBase_OnQueryUnredeemedFriendCodesComplete, bSuccess) == 0x000000, "Member 'FriendCodeShareButtonBase_OnQueryUnredeemedFriendCodesComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(FriendCodeShareButtonBase_OnQueryUnredeemedFriendCodesComplete, FriendCodes) == 0x000008, "Member 'FriendCodeShareButtonBase_OnQueryUnredeemedFriendCodesComplete::FriendCodes' has a wrong offset!");

// Function FortniteUI.GGCenterDisplayWidgetBase.OnLocalPlayerAwardedWeapon
// 0x0008 (0x0008 - 0x0000)
struct GGCenterDisplayWidgetBase_OnLocalPlayerAwardedWeapon final
{
public:
	class UFortWeaponItemDefinition*              NextWeapon;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGCenterDisplayWidgetBase_OnLocalPlayerAwardedWeapon) == 0x000008, "Wrong alignment on GGCenterDisplayWidgetBase_OnLocalPlayerAwardedWeapon");
static_assert(sizeof(GGCenterDisplayWidgetBase_OnLocalPlayerAwardedWeapon) == 0x000008, "Wrong size on GGCenterDisplayWidgetBase_OnLocalPlayerAwardedWeapon");
static_assert(offsetof(GGCenterDisplayWidgetBase_OnLocalPlayerAwardedWeapon, NextWeapon) == 0x000000, "Member 'GGCenterDisplayWidgetBase_OnLocalPlayerAwardedWeapon::NextWeapon' has a wrong offset!");

// Function FortniteUI.GGCenterDisplayWidgetBase.OnOtherPlayerAwardedWeapon
// 0x0010 (0x0010 - 0x0000)
struct GGCenterDisplayWidgetBase_OnOtherPlayerAwardedWeapon final
{
public:
	class AFortPlayerStateAthena*                 OtherPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWeaponItemDefinition*              NextWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGCenterDisplayWidgetBase_OnOtherPlayerAwardedWeapon) == 0x000008, "Wrong alignment on GGCenterDisplayWidgetBase_OnOtherPlayerAwardedWeapon");
static_assert(sizeof(GGCenterDisplayWidgetBase_OnOtherPlayerAwardedWeapon) == 0x000010, "Wrong size on GGCenterDisplayWidgetBase_OnOtherPlayerAwardedWeapon");
static_assert(offsetof(GGCenterDisplayWidgetBase_OnOtherPlayerAwardedWeapon, OtherPlayer) == 0x000000, "Member 'GGCenterDisplayWidgetBase_OnOtherPlayerAwardedWeapon::OtherPlayer' has a wrong offset!");
static_assert(offsetof(GGCenterDisplayWidgetBase_OnOtherPlayerAwardedWeapon, NextWeapon) == 0x000008, "Member 'GGCenterDisplayWidgetBase_OnOtherPlayerAwardedWeapon::NextWeapon' has a wrong offset!");

// Function FortniteUI.GGCenterDisplayWidgetBase.UpdateDisplayWith
// 0x0018 (0x0018 - 0x0000)
struct GGCenterDisplayWidgetBase_UpdateDisplayWith final
{
public:
	TArray<struct FGGCenterDisplayEntry>          Entries;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUpdatingForLocalPlayer;                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GGCenterDisplayWidgetBase_UpdateDisplayWith) == 0x000008, "Wrong alignment on GGCenterDisplayWidgetBase_UpdateDisplayWith");
static_assert(sizeof(GGCenterDisplayWidgetBase_UpdateDisplayWith) == 0x000018, "Wrong size on GGCenterDisplayWidgetBase_UpdateDisplayWith");
static_assert(offsetof(GGCenterDisplayWidgetBase_UpdateDisplayWith, Entries) == 0x000000, "Member 'GGCenterDisplayWidgetBase_UpdateDisplayWith::Entries' has a wrong offset!");
static_assert(offsetof(GGCenterDisplayWidgetBase_UpdateDisplayWith, bUpdatingForLocalPlayer) == 0x000010, "Member 'GGCenterDisplayWidgetBase_UpdateDisplayWith::bUpdatingForLocalPlayer' has a wrong offset!");

// Function FortniteUI.GGInventoryWidgetBase.OnLocalPlayerNewWeapon
// 0x0008 (0x0008 - 0x0000)
struct GGInventoryWidgetBase_OnLocalPlayerNewWeapon final
{
public:
	class UFortWeaponItemDefinition*              NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGInventoryWidgetBase_OnLocalPlayerNewWeapon) == 0x000008, "Wrong alignment on GGInventoryWidgetBase_OnLocalPlayerNewWeapon");
static_assert(sizeof(GGInventoryWidgetBase_OnLocalPlayerNewWeapon) == 0x000008, "Wrong size on GGInventoryWidgetBase_OnLocalPlayerNewWeapon");
static_assert(offsetof(GGInventoryWidgetBase_OnLocalPlayerNewWeapon, NewWeapon) == 0x000000, "Member 'GGInventoryWidgetBase_OnLocalPlayerNewWeapon::NewWeapon' has a wrong offset!");

// Function FortniteUI.GGInventoryWidgetBase.UpdateWidgetForNewWeapon
// 0x0010 (0x0010 - 0x0000)
struct GGInventoryWidgetBase_UpdateWidgetForNewWeapon final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   Rarity;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GGInventoryWidgetBase_UpdateWidgetForNewWeapon) == 0x000008, "Wrong alignment on GGInventoryWidgetBase_UpdateWidgetForNewWeapon");
static_assert(sizeof(GGInventoryWidgetBase_UpdateWidgetForNewWeapon) == 0x000010, "Wrong size on GGInventoryWidgetBase_UpdateWidgetForNewWeapon");
static_assert(offsetof(GGInventoryWidgetBase_UpdateWidgetForNewWeapon, Texture) == 0x000000, "Member 'GGInventoryWidgetBase_UpdateWidgetForNewWeapon::Texture' has a wrong offset!");
static_assert(offsetof(GGInventoryWidgetBase_UpdateWidgetForNewWeapon, Rarity) == 0x000008, "Member 'GGInventoryWidgetBase_UpdateWidgetForNewWeapon::Rarity' has a wrong offset!");

// Function FortniteUI.GGProgressWidget.OnLeaderboardUpdate
// 0x0010 (0x0010 - 0x0000)
struct GGProgressWidget_OnLeaderboardUpdate final
{
public:
	TArray<struct FFortInGameLeaderboardPlacementData> Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGProgressWidget_OnLeaderboardUpdate) == 0x000008, "Wrong alignment on GGProgressWidget_OnLeaderboardUpdate");
static_assert(sizeof(GGProgressWidget_OnLeaderboardUpdate) == 0x000010, "Wrong size on GGProgressWidget_OnLeaderboardUpdate");
static_assert(offsetof(GGProgressWidget_OnLeaderboardUpdate, Data) == 0x000000, "Member 'GGProgressWidget_OnLeaderboardUpdate::Data' has a wrong offset!");

// Function FortniteUI.GGProgressWidget.OnPlayerNearGoal
// 0x0048 (0x0048 - 0x0000)
struct GGProgressWidget_OnPlayerNearGoal final
{
public:
	struct FFortInGameLeaderboardPlacementData    PlayerNearGoal;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGProgressWidget_OnPlayerNearGoal) == 0x000008, "Wrong alignment on GGProgressWidget_OnPlayerNearGoal");
static_assert(sizeof(GGProgressWidget_OnPlayerNearGoal) == 0x000048, "Wrong size on GGProgressWidget_OnPlayerNearGoal");
static_assert(offsetof(GGProgressWidget_OnPlayerNearGoal, PlayerNearGoal) == 0x000000, "Member 'GGProgressWidget_OnPlayerNearGoal::PlayerNearGoal' has a wrong offset!");

// Function FortniteUI.GGProgressWidget.UpdateLocalPlayer
// 0x0048 (0x0048 - 0x0000)
struct GGProgressWidget_UpdateLocalPlayer final
{
public:
	struct FFortInGameLeaderboardPlacementData    LocalPlayer;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGProgressWidget_UpdateLocalPlayer) == 0x000008, "Wrong alignment on GGProgressWidget_UpdateLocalPlayer");
static_assert(sizeof(GGProgressWidget_UpdateLocalPlayer) == 0x000048, "Wrong size on GGProgressWidget_UpdateLocalPlayer");
static_assert(offsetof(GGProgressWidget_UpdateLocalPlayer, LocalPlayer) == 0x000000, "Member 'GGProgressWidget_UpdateLocalPlayer::LocalPlayer' has a wrong offset!");

// Function FortniteUI.GGProgressWidget.UpdateTopThreeEnemies
// 0x0010 (0x0010 - 0x0000)
struct GGProgressWidget_UpdateTopThreeEnemies final
{
public:
	TArray<struct FFortInGameLeaderboardPlacementData> TopThreeEnemies;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GGProgressWidget_UpdateTopThreeEnemies) == 0x000008, "Wrong alignment on GGProgressWidget_UpdateTopThreeEnemies");
static_assert(sizeof(GGProgressWidget_UpdateTopThreeEnemies) == 0x000010, "Wrong size on GGProgressWidget_UpdateTopThreeEnemies");
static_assert(offsetof(GGProgressWidget_UpdateTopThreeEnemies, TopThreeEnemies) == 0x000000, "Member 'GGProgressWidget_UpdateTopThreeEnemies::TopThreeEnemies' has a wrong offset!");

// Function FortniteUI.GooseInventoryWidget.OpenWidget
// 0x0010 (0x0010 - 0x0000)
struct GooseInventoryWidget_OpenWidget final
{
public:
	class UTexture2D*                             IconTexture;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         ItemDef;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseInventoryWidget_OpenWidget) == 0x000008, "Wrong alignment on GooseInventoryWidget_OpenWidget");
static_assert(sizeof(GooseInventoryWidget_OpenWidget) == 0x000010, "Wrong size on GooseInventoryWidget_OpenWidget");
static_assert(offsetof(GooseInventoryWidget_OpenWidget, IconTexture) == 0x000000, "Member 'GooseInventoryWidget_OpenWidget::IconTexture' has a wrong offset!");
static_assert(offsetof(GooseInventoryWidget_OpenWidget, ItemDef) == 0x000008, "Member 'GooseInventoryWidget_OpenWidget::ItemDef' has a wrong offset!");

// Function FortniteUI.GoosePlaneWeaponWidget.OpenWidget
// 0x0048 (0x0048 - 0x0000)
struct GoosePlaneWeaponWidget_OpenWidget final
{
public:
	int32                                         DisplayIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGooseWeaponDisplayData                InDisplayData;                                     // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GoosePlaneWeaponWidget_OpenWidget) == 0x000008, "Wrong alignment on GoosePlaneWeaponWidget_OpenWidget");
static_assert(sizeof(GoosePlaneWeaponWidget_OpenWidget) == 0x000048, "Wrong size on GoosePlaneWeaponWidget_OpenWidget");
static_assert(offsetof(GoosePlaneWeaponWidget_OpenWidget, DisplayIndex) == 0x000000, "Member 'GoosePlaneWeaponWidget_OpenWidget::DisplayIndex' has a wrong offset!");
static_assert(offsetof(GoosePlaneWeaponWidget_OpenWidget, InDisplayData) == 0x000008, "Member 'GoosePlaneWeaponWidget_OpenWidget::InDisplayData' has a wrong offset!");
static_assert(offsetof(GoosePlaneWeaponWidget_OpenWidget, StartTime) == 0x000040, "Member 'GoosePlaneWeaponWidget_OpenWidget::StartTime' has a wrong offset!");

// Function FortniteUI.GooseWidgetBase.OnUpdateNumberOfPlanes
// 0x0008 (0x0008 - 0x0000)
struct GooseWidgetBase_OnUpdateNumberOfPlanes final
{
public:
	int32                                         FriendlyPlaneCount;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyPlaneCount;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GooseWidgetBase_OnUpdateNumberOfPlanes) == 0x000004, "Wrong alignment on GooseWidgetBase_OnUpdateNumberOfPlanes");
static_assert(sizeof(GooseWidgetBase_OnUpdateNumberOfPlanes) == 0x000008, "Wrong size on GooseWidgetBase_OnUpdateNumberOfPlanes");
static_assert(offsetof(GooseWidgetBase_OnUpdateNumberOfPlanes, FriendlyPlaneCount) == 0x000000, "Member 'GooseWidgetBase_OnUpdateNumberOfPlanes::FriendlyPlaneCount' has a wrong offset!");
static_assert(offsetof(GooseWidgetBase_OnUpdateNumberOfPlanes, EnemyPlaneCount) == 0x000004, "Member 'GooseWidgetBase_OnUpdateNumberOfPlanes::EnemyPlaneCount' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.OnDisplayBlingUI
// 0x0001 (0x0001 - 0x0000)
struct HeistWidgetBase_OnDisplayBlingUI final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeistWidgetBase_OnDisplayBlingUI) == 0x000001, "Wrong alignment on HeistWidgetBase_OnDisplayBlingUI");
static_assert(sizeof(HeistWidgetBase_OnDisplayBlingUI) == 0x000001, "Wrong size on HeistWidgetBase_OnDisplayBlingUI");
static_assert(offsetof(HeistWidgetBase_OnDisplayBlingUI, bDisplay) == 0x000000, "Member 'HeistWidgetBase_OnDisplayBlingUI::bDisplay' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.OnDisplayExitCraftUI
// 0x0001 (0x0001 - 0x0000)
struct HeistWidgetBase_OnDisplayExitCraftUI final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeistWidgetBase_OnDisplayExitCraftUI) == 0x000001, "Wrong alignment on HeistWidgetBase_OnDisplayExitCraftUI");
static_assert(sizeof(HeistWidgetBase_OnDisplayExitCraftUI) == 0x000001, "Wrong size on HeistWidgetBase_OnDisplayExitCraftUI");
static_assert(offsetof(HeistWidgetBase_OnDisplayExitCraftUI, bDisplay) == 0x000000, "Member 'HeistWidgetBase_OnDisplayExitCraftUI::bDisplay' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.OnExitCraftsUIChanged
// 0x0001 (0x0001 - 0x0000)
struct HeistWidgetBase_OnExitCraftsUIChanged final
{
public:
	EHeistExitCraftUIState                        NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeistWidgetBase_OnExitCraftsUIChanged) == 0x000001, "Wrong alignment on HeistWidgetBase_OnExitCraftsUIChanged");
static_assert(sizeof(HeistWidgetBase_OnExitCraftsUIChanged) == 0x000001, "Wrong size on HeistWidgetBase_OnExitCraftsUIChanged");
static_assert(offsetof(HeistWidgetBase_OnExitCraftsUIChanged, NewState) == 0x000000, "Member 'HeistWidgetBase_OnExitCraftsUIChanged::NewState' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.OnHandleSpectatingChanged
// 0x0008 (0x0008 - 0x0000)
struct HeistWidgetBase_OnHandleSpectatingChanged final
{
public:
	class AFortPlayerStateZone*                   SpectatingTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeistWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong alignment on HeistWidgetBase_OnHandleSpectatingChanged");
static_assert(sizeof(HeistWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong size on HeistWidgetBase_OnHandleSpectatingChanged");
static_assert(offsetof(HeistWidgetBase_OnHandleSpectatingChanged, SpectatingTarget) == 0x000000, "Member 'HeistWidgetBase_OnHandleSpectatingChanged::SpectatingTarget' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.OnMutatorObjectUpdated
// 0x0118 (0x0118 - 0x0000)
struct HeistWidgetBase_OnMutatorObjectUpdated final
{
public:
	struct FGameplayMutatorObjectDataArray        MutatorArray;                                      // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeistWidgetBase_OnMutatorObjectUpdated) == 0x000008, "Wrong alignment on HeistWidgetBase_OnMutatorObjectUpdated");
static_assert(sizeof(HeistWidgetBase_OnMutatorObjectUpdated) == 0x000118, "Wrong size on HeistWidgetBase_OnMutatorObjectUpdated");
static_assert(offsetof(HeistWidgetBase_OnMutatorObjectUpdated, MutatorArray) == 0x000000, "Member 'HeistWidgetBase_OnMutatorObjectUpdated::MutatorArray' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.OnSpecialActorAdded
// 0x0208 (0x0208 - 0x0000)
struct HeistWidgetBase_OnSpecialActorAdded final
{
public:
	struct FSpecialActorRepData                   SpecialActorData;                                  // 0x0000(0x0208)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeistWidgetBase_OnSpecialActorAdded) == 0x000008, "Wrong alignment on HeistWidgetBase_OnSpecialActorAdded");
static_assert(sizeof(HeistWidgetBase_OnSpecialActorAdded) == 0x000208, "Wrong size on HeistWidgetBase_OnSpecialActorAdded");
static_assert(offsetof(HeistWidgetBase_OnSpecialActorAdded, SpecialActorData) == 0x000000, "Member 'HeistWidgetBase_OnSpecialActorAdded::SpecialActorData' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.OnSpecialActorRemoved
// 0x0208 (0x0208 - 0x0000)
struct HeistWidgetBase_OnSpecialActorRemoved final
{
public:
	struct FSpecialActorRepData                   SpecialActorData;                                  // 0x0000(0x0208)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeistWidgetBase_OnSpecialActorRemoved) == 0x000008, "Wrong alignment on HeistWidgetBase_OnSpecialActorRemoved");
static_assert(sizeof(HeistWidgetBase_OnSpecialActorRemoved) == 0x000208, "Wrong size on HeistWidgetBase_OnSpecialActorRemoved");
static_assert(offsetof(HeistWidgetBase_OnSpecialActorRemoved, SpecialActorData) == 0x000000, "Member 'HeistWidgetBase_OnSpecialActorRemoved::SpecialActorData' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.OnUpdateBlingIcon
// 0x0008 (0x0008 - 0x0000)
struct HeistWidgetBase_OnUpdateBlingIcon final
{
public:
	struct FHeistBlingIconData                    BlingIconData;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeistWidgetBase_OnUpdateBlingIcon) == 0x000004, "Wrong alignment on HeistWidgetBase_OnUpdateBlingIcon");
static_assert(sizeof(HeistWidgetBase_OnUpdateBlingIcon) == 0x000008, "Wrong size on HeistWidgetBase_OnUpdateBlingIcon");
static_assert(offsetof(HeistWidgetBase_OnUpdateBlingIcon, BlingIconData) == 0x000000, "Member 'HeistWidgetBase_OnUpdateBlingIcon::BlingIconData' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.OnUpdateExitCraftIcon
// 0x0010 (0x0010 - 0x0000)
struct HeistWidgetBase_OnUpdateExitCraftIcon final
{
public:
	struct FHeistExitCraftIconData                ExitCraftIconData;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeistWidgetBase_OnUpdateExitCraftIcon) == 0x000004, "Wrong alignment on HeistWidgetBase_OnUpdateExitCraftIcon");
static_assert(sizeof(HeistWidgetBase_OnUpdateExitCraftIcon) == 0x000010, "Wrong size on HeistWidgetBase_OnUpdateExitCraftIcon");
static_assert(offsetof(HeistWidgetBase_OnUpdateExitCraftIcon, ExitCraftIconData) == 0x000000, "Member 'HeistWidgetBase_OnUpdateExitCraftIcon::ExitCraftIconData' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.OnUpdateStateText
// 0x0020 (0x0020 - 0x0000)
struct HeistWidgetBase_OnUpdateStateText final
{
public:
	class FText                                   StateText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EHeistExitCraftUIState                        CurrState;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeistWidgetBase_OnUpdateStateText) == 0x000008, "Wrong alignment on HeistWidgetBase_OnUpdateStateText");
static_assert(sizeof(HeistWidgetBase_OnUpdateStateText) == 0x000020, "Wrong size on HeistWidgetBase_OnUpdateStateText");
static_assert(offsetof(HeistWidgetBase_OnUpdateStateText, StateText) == 0x000000, "Member 'HeistWidgetBase_OnUpdateStateText::StateText' has a wrong offset!");
static_assert(offsetof(HeistWidgetBase_OnUpdateStateText, CurrState) == 0x000018, "Member 'HeistWidgetBase_OnUpdateStateText::CurrState' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.OnUpdateStateTimeText
// 0x0020 (0x0020 - 0x0000)
struct HeistWidgetBase_OnUpdateStateTimeText final
{
public:
	class FText                                   TimeText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EHeistExitCraftUIState                        CurrState;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeistWidgetBase_OnUpdateStateTimeText) == 0x000008, "Wrong alignment on HeistWidgetBase_OnUpdateStateTimeText");
static_assert(sizeof(HeistWidgetBase_OnUpdateStateTimeText) == 0x000020, "Wrong size on HeistWidgetBase_OnUpdateStateTimeText");
static_assert(offsetof(HeistWidgetBase_OnUpdateStateTimeText, TimeText) == 0x000000, "Member 'HeistWidgetBase_OnUpdateStateTimeText::TimeText' has a wrong offset!");
static_assert(offsetof(HeistWidgetBase_OnUpdateStateTimeText, CurrState) == 0x000018, "Member 'HeistWidgetBase_OnUpdateStateTimeText::CurrState' has a wrong offset!");

// Function FortniteUI.HeistWidgetBase.SetExitCraftUIState
// 0x0001 (0x0001 - 0x0000)
struct HeistWidgetBase_SetExitCraftUIState final
{
public:
	EHeistExitCraftUIState                        NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeistWidgetBase_SetExitCraftUIState) == 0x000001, "Wrong alignment on HeistWidgetBase_SetExitCraftUIState");
static_assert(sizeof(HeistWidgetBase_SetExitCraftUIState) == 0x000001, "Wrong size on HeistWidgetBase_SetExitCraftUIState");
static_assert(offsetof(HeistWidgetBase_SetExitCraftUIState, NewState) == 0x000000, "Member 'HeistWidgetBase_SetExitCraftUIState::NewState' has a wrong offset!");

// Function FortniteUI.MashBossBattleWidget.HandleMashPhaseChanged
// 0x0004 (0x0004 - 0x0000)
struct MashBossBattleWidget_HandleMashPhaseChanged final
{
public:
	int32                                         NewPhase;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MashBossBattleWidget_HandleMashPhaseChanged) == 0x000004, "Wrong alignment on MashBossBattleWidget_HandleMashPhaseChanged");
static_assert(sizeof(MashBossBattleWidget_HandleMashPhaseChanged) == 0x000004, "Wrong size on MashBossBattleWidget_HandleMashPhaseChanged");
static_assert(offsetof(MashBossBattleWidget_HandleMashPhaseChanged, NewPhase) == 0x000000, "Member 'MashBossBattleWidget_HandleMashPhaseChanged::NewPhase' has a wrong offset!");

// Function FortniteUI.QuickHealButton.HandlePlayerHealthUpdated
// 0x0008 (0x0008 - 0x0000)
struct QuickHealButton_HandlePlayerHealthUpdated final
{
public:
	float                                         PlayerHealth;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortHitPointModificationReason               Reason;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuickHealButton_HandlePlayerHealthUpdated) == 0x000004, "Wrong alignment on QuickHealButton_HandlePlayerHealthUpdated");
static_assert(sizeof(QuickHealButton_HandlePlayerHealthUpdated) == 0x000008, "Wrong size on QuickHealButton_HandlePlayerHealthUpdated");
static_assert(offsetof(QuickHealButton_HandlePlayerHealthUpdated, PlayerHealth) == 0x000000, "Member 'QuickHealButton_HandlePlayerHealthUpdated::PlayerHealth' has a wrong offset!");
static_assert(offsetof(QuickHealButton_HandlePlayerHealthUpdated, Reason) == 0x000004, "Member 'QuickHealButton_HandlePlayerHealthUpdated::Reason' has a wrong offset!");

// Function FortniteUI.QuickHealButton.HandlePlayerMaxHealthUpdated
// 0x0004 (0x0004 - 0x0000)
struct QuickHealButton_HandlePlayerMaxHealthUpdated final
{
public:
	float                                         PlayerMaxHealth;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuickHealButton_HandlePlayerMaxHealthUpdated) == 0x000004, "Wrong alignment on QuickHealButton_HandlePlayerMaxHealthUpdated");
static_assert(sizeof(QuickHealButton_HandlePlayerMaxHealthUpdated) == 0x000004, "Wrong size on QuickHealButton_HandlePlayerMaxHealthUpdated");
static_assert(offsetof(QuickHealButton_HandlePlayerMaxHealthUpdated, PlayerMaxHealth) == 0x000000, "Member 'QuickHealButton_HandlePlayerMaxHealthUpdated::PlayerMaxHealth' has a wrong offset!");

// Function FortniteUI.QuickHealButton.HandlePlayerMaxShieldUpdated
// 0x0004 (0x0004 - 0x0000)
struct QuickHealButton_HandlePlayerMaxShieldUpdated final
{
public:
	float                                         PlayerMaxShield;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuickHealButton_HandlePlayerMaxShieldUpdated) == 0x000004, "Wrong alignment on QuickHealButton_HandlePlayerMaxShieldUpdated");
static_assert(sizeof(QuickHealButton_HandlePlayerMaxShieldUpdated) == 0x000004, "Wrong size on QuickHealButton_HandlePlayerMaxShieldUpdated");
static_assert(offsetof(QuickHealButton_HandlePlayerMaxShieldUpdated, PlayerMaxShield) == 0x000000, "Member 'QuickHealButton_HandlePlayerMaxShieldUpdated::PlayerMaxShield' has a wrong offset!");

// Function FortniteUI.QuickHealButton.HandlePlayerShieldUpdated
// 0x0008 (0x0008 - 0x0000)
struct QuickHealButton_HandlePlayerShieldUpdated final
{
public:
	float                                         PlayerShield;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortHitPointModificationReason               Reason;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuickHealButton_HandlePlayerShieldUpdated) == 0x000004, "Wrong alignment on QuickHealButton_HandlePlayerShieldUpdated");
static_assert(sizeof(QuickHealButton_HandlePlayerShieldUpdated) == 0x000008, "Wrong size on QuickHealButton_HandlePlayerShieldUpdated");
static_assert(offsetof(QuickHealButton_HandlePlayerShieldUpdated, PlayerShield) == 0x000000, "Member 'QuickHealButton_HandlePlayerShieldUpdated::PlayerShield' has a wrong offset!");
static_assert(offsetof(QuickHealButton_HandlePlayerShieldUpdated, Reason) == 0x000004, "Member 'QuickHealButton_HandlePlayerShieldUpdated::Reason' has a wrong offset!");

// Function FortniteUI.RadialBacchusButton.GetListenedGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct RadialBacchusButton_GetListenedGameplayTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadialBacchusButton_GetListenedGameplayTag) == 0x000004, "Wrong alignment on RadialBacchusButton_GetListenedGameplayTag");
static_assert(sizeof(RadialBacchusButton_GetListenedGameplayTag) == 0x000008, "Wrong size on RadialBacchusButton_GetListenedGameplayTag");
static_assert(offsetof(RadialBacchusButton_GetListenedGameplayTag, ReturnValue) == 0x000000, "Member 'RadialBacchusButton_GetListenedGameplayTag::ReturnValue' has a wrong offset!");

// Function FortniteUI.RadialBacchusButton.ReceiveRadialProgressEvent
// 0x00C8 (0x00C8 - 0x0000)
struct RadialBacchusButton_ReceiveRadialProgressEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayCueEvent                             EventType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadialBacchusButton_ReceiveRadialProgressEvent) == 0x000008, "Wrong alignment on RadialBacchusButton_ReceiveRadialProgressEvent");
static_assert(sizeof(RadialBacchusButton_ReceiveRadialProgressEvent) == 0x0000C8, "Wrong size on RadialBacchusButton_ReceiveRadialProgressEvent");
static_assert(offsetof(RadialBacchusButton_ReceiveRadialProgressEvent, EventName) == 0x000000, "Member 'RadialBacchusButton_ReceiveRadialProgressEvent::EventName' has a wrong offset!");
static_assert(offsetof(RadialBacchusButton_ReceiveRadialProgressEvent, EventType) == 0x000008, "Member 'RadialBacchusButton_ReceiveRadialProgressEvent::EventType' has a wrong offset!");
static_assert(offsetof(RadialBacchusButton_ReceiveRadialProgressEvent, Parameters) == 0x000010, "Member 'RadialBacchusButton_ReceiveRadialProgressEvent::Parameters' has a wrong offset!");

// Function FortniteUI.RadialBacchusButton.ReceiveRadialProgressEvent_Blueprint
// 0x00C8 (0x00C8 - 0x0000)
struct RadialBacchusButton_ReceiveRadialProgressEvent_Blueprint final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayCueEvent                             EventType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadialBacchusButton_ReceiveRadialProgressEvent_Blueprint) == 0x000008, "Wrong alignment on RadialBacchusButton_ReceiveRadialProgressEvent_Blueprint");
static_assert(sizeof(RadialBacchusButton_ReceiveRadialProgressEvent_Blueprint) == 0x0000C8, "Wrong size on RadialBacchusButton_ReceiveRadialProgressEvent_Blueprint");
static_assert(offsetof(RadialBacchusButton_ReceiveRadialProgressEvent_Blueprint, EventName) == 0x000000, "Member 'RadialBacchusButton_ReceiveRadialProgressEvent_Blueprint::EventName' has a wrong offset!");
static_assert(offsetof(RadialBacchusButton_ReceiveRadialProgressEvent_Blueprint, EventType) == 0x000008, "Member 'RadialBacchusButton_ReceiveRadialProgressEvent_Blueprint::EventType' has a wrong offset!");
static_assert(offsetof(RadialBacchusButton_ReceiveRadialProgressEvent_Blueprint, Parameters) == 0x000010, "Member 'RadialBacchusButton_ReceiveRadialProgressEvent_Blueprint::Parameters' has a wrong offset!");

// Function FortniteUI.RadialBacchusButton.SetListenedGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct RadialBacchusButton_SetListenedGameplayTag final
{
public:
	struct FGameplayTag                           InListenedTag;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadialBacchusButton_SetListenedGameplayTag) == 0x000004, "Wrong alignment on RadialBacchusButton_SetListenedGameplayTag");
static_assert(sizeof(RadialBacchusButton_SetListenedGameplayTag) == 0x000008, "Wrong size on RadialBacchusButton_SetListenedGameplayTag");
static_assert(offsetof(RadialBacchusButton_SetListenedGameplayTag, InListenedTag) == 0x000000, "Member 'RadialBacchusButton_SetListenedGameplayTag::InListenedTag' has a wrong offset!");

// Function FortniteUI.RumbleLeaderWidget.OnLeaderboardUpdate
// 0x0010 (0x0010 - 0x0000)
struct RumbleLeaderWidget_OnLeaderboardUpdate final
{
public:
	TArray<struct FFortInGameLeaderboardPlacementData> Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RumbleLeaderWidget_OnLeaderboardUpdate) == 0x000008, "Wrong alignment on RumbleLeaderWidget_OnLeaderboardUpdate");
static_assert(sizeof(RumbleLeaderWidget_OnLeaderboardUpdate) == 0x000010, "Wrong size on RumbleLeaderWidget_OnLeaderboardUpdate");
static_assert(offsetof(RumbleLeaderWidget_OnLeaderboardUpdate, Data) == 0x000000, "Member 'RumbleLeaderWidget_OnLeaderboardUpdate::Data' has a wrong offset!");

// Function FortniteUI.RumbleLeaderWidget.UpdateDisplay
// 0x0050 (0x0050 - 0x0000)
struct RumbleLeaderWidget_UpdateDisplay final
{
public:
	struct FFortInGameLeaderboardPlacementData    LeaderEntry;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsTiedForLead;                                    // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RumbleLeaderWidget_UpdateDisplay) == 0x000008, "Wrong alignment on RumbleLeaderWidget_UpdateDisplay");
static_assert(sizeof(RumbleLeaderWidget_UpdateDisplay) == 0x000050, "Wrong size on RumbleLeaderWidget_UpdateDisplay");
static_assert(offsetof(RumbleLeaderWidget_UpdateDisplay, LeaderEntry) == 0x000000, "Member 'RumbleLeaderWidget_UpdateDisplay::LeaderEntry' has a wrong offset!");
static_assert(offsetof(RumbleLeaderWidget_UpdateDisplay, bIsTiedForLead) == 0x000048, "Member 'RumbleLeaderWidget_UpdateDisplay::bIsTiedForLead' has a wrong offset!");

// Function FortniteUI.SeasonPassLevelPanel.OnLockedStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct SeasonPassLevelPanel_OnLockedStatusChanged final
{
public:
	bool                                          FreeUnlocked;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PaidUnlocked;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLevelPanel_OnLockedStatusChanged) == 0x000001, "Wrong alignment on SeasonPassLevelPanel_OnLockedStatusChanged");
static_assert(sizeof(SeasonPassLevelPanel_OnLockedStatusChanged) == 0x000002, "Wrong size on SeasonPassLevelPanel_OnLockedStatusChanged");
static_assert(offsetof(SeasonPassLevelPanel_OnLockedStatusChanged, FreeUnlocked) == 0x000000, "Member 'SeasonPassLevelPanel_OnLockedStatusChanged::FreeUnlocked' has a wrong offset!");
static_assert(offsetof(SeasonPassLevelPanel_OnLockedStatusChanged, PaidUnlocked) == 0x000001, "Member 'SeasonPassLevelPanel_OnLockedStatusChanged::PaidUnlocked' has a wrong offset!");

// Function FortniteUI.SeasonPassLevelPanel.Setup
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassLevelPanel_Setup final
{
public:
	class UFortSeasonPassLevelInfo*               Info;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLevelPanel_Setup) == 0x000008, "Wrong alignment on SeasonPassLevelPanel_Setup");
static_assert(sizeof(SeasonPassLevelPanel_Setup) == 0x000008, "Wrong size on SeasonPassLevelPanel_Setup");
static_assert(offsetof(SeasonPassLevelPanel_Setup, Info) == 0x000000, "Member 'SeasonPassLevelPanel_Setup::Info' has a wrong offset!");

// Function FortniteUI.SeasonPassLevelPanel.GetLevelInfo
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassLevelPanel_GetLevelInfo final
{
public:
	class UFortSeasonPassLevelInfo*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLevelPanel_GetLevelInfo) == 0x000008, "Wrong alignment on SeasonPassLevelPanel_GetLevelInfo");
static_assert(sizeof(SeasonPassLevelPanel_GetLevelInfo) == 0x000008, "Wrong size on SeasonPassLevelPanel_GetLevelInfo");
static_assert(offsetof(SeasonPassLevelPanel_GetLevelInfo, ReturnValue) == 0x000000, "Member 'SeasonPassLevelPanel_GetLevelInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassPageWidget.ContainsLevel
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassPageWidget_ContainsLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassPageWidget_ContainsLevel) == 0x000004, "Wrong alignment on SeasonPassPageWidget_ContainsLevel");
static_assert(sizeof(SeasonPassPageWidget_ContainsLevel) == 0x000008, "Wrong size on SeasonPassPageWidget_ContainsLevel");
static_assert(offsetof(SeasonPassPageWidget_ContainsLevel, Level) == 0x000000, "Member 'SeasonPassPageWidget_ContainsLevel::Level' has a wrong offset!");
static_assert(offsetof(SeasonPassPageWidget_ContainsLevel, ReturnValue) == 0x000004, "Member 'SeasonPassPageWidget_ContainsLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassPageWidget.ShouldPlayInto
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassPageWidget_ShouldPlayInto final
{
public:
	int32                                         FirstLevel;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassPageWidget_ShouldPlayInto) == 0x000004, "Wrong alignment on SeasonPassPageWidget_ShouldPlayInto");
static_assert(sizeof(SeasonPassPageWidget_ShouldPlayInto) == 0x000008, "Wrong size on SeasonPassPageWidget_ShouldPlayInto");
static_assert(offsetof(SeasonPassPageWidget_ShouldPlayInto, FirstLevel) == 0x000000, "Member 'SeasonPassPageWidget_ShouldPlayInto::FirstLevel' has a wrong offset!");
static_assert(offsetof(SeasonPassPageWidget_ShouldPlayInto, ReturnValue) == 0x000004, "Member 'SeasonPassPageWidget_ShouldPlayInto::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassPageWidget.GetCurrentSeasonNumber
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassPageWidget_GetCurrentSeasonNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassPageWidget_GetCurrentSeasonNumber) == 0x000004, "Wrong alignment on SeasonPassPageWidget_GetCurrentSeasonNumber");
static_assert(sizeof(SeasonPassPageWidget_GetCurrentSeasonNumber) == 0x000004, "Wrong size on SeasonPassPageWidget_GetCurrentSeasonNumber");
static_assert(offsetof(SeasonPassPageWidget_GetCurrentSeasonNumber, ReturnValue) == 0x000000, "Member 'SeasonPassPageWidget_GetCurrentSeasonNumber::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassPageWidget.OwnsSeasonPass
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassPageWidget_OwnsSeasonPass final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassPageWidget_OwnsSeasonPass) == 0x000001, "Wrong alignment on SeasonPassPageWidget_OwnsSeasonPass");
static_assert(sizeof(SeasonPassPageWidget_OwnsSeasonPass) == 0x000001, "Wrong size on SeasonPassPageWidget_OwnsSeasonPass");
static_assert(offsetof(SeasonPassPageWidget_OwnsSeasonPass, ReturnValue) == 0x000000, "Member 'SeasonPassPageWidget_OwnsSeasonPass::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.GenerateLevelWidgets
// 0x0018 (0x0018 - 0x0000)
struct SeasonPassScreenBase_GenerateLevelWidgets final
{
public:
	class UFortSeasonPassLevelInfo*               LevelInfo;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USeasonPassLevelWidget*>         ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_GenerateLevelWidgets) == 0x000008, "Wrong alignment on SeasonPassScreenBase_GenerateLevelWidgets");
static_assert(sizeof(SeasonPassScreenBase_GenerateLevelWidgets) == 0x000018, "Wrong size on SeasonPassScreenBase_GenerateLevelWidgets");
static_assert(offsetof(SeasonPassScreenBase_GenerateLevelWidgets, LevelInfo) == 0x000000, "Member 'SeasonPassScreenBase_GenerateLevelWidgets::LevelInfo' has a wrong offset!");
static_assert(offsetof(SeasonPassScreenBase_GenerateLevelWidgets, ReturnValue) == 0x000008, "Member 'SeasonPassScreenBase_GenerateLevelWidgets::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.IsCellConnection
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassScreenBase_IsCellConnection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_IsCellConnection) == 0x000001, "Wrong alignment on SeasonPassScreenBase_IsCellConnection");
static_assert(sizeof(SeasonPassScreenBase_IsCellConnection) == 0x000001, "Wrong size on SeasonPassScreenBase_IsCellConnection");
static_assert(offsetof(SeasonPassScreenBase_IsCellConnection, ReturnValue) == 0x000000, "Member 'SeasonPassScreenBase_IsCellConnection::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.NavigateToLevel
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassScreenBase_NavigateToLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_NavigateToLevel) == 0x000004, "Wrong alignment on SeasonPassScreenBase_NavigateToLevel");
static_assert(sizeof(SeasonPassScreenBase_NavigateToLevel) == 0x000004, "Wrong size on SeasonPassScreenBase_NavigateToLevel");
static_assert(offsetof(SeasonPassScreenBase_NavigateToLevel, Level) == 0x000000, "Member 'SeasonPassScreenBase_NavigateToLevel::Level' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.OnNavigateToLevel
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassScreenBase_OnNavigateToLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_OnNavigateToLevel) == 0x000004, "Wrong alignment on SeasonPassScreenBase_OnNavigateToLevel");
static_assert(sizeof(SeasonPassScreenBase_OnNavigateToLevel) == 0x000004, "Wrong size on SeasonPassScreenBase_OnNavigateToLevel");
static_assert(offsetof(SeasonPassScreenBase_OnNavigateToLevel, Level) == 0x000000, "Member 'SeasonPassScreenBase_OnNavigateToLevel::Level' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.OnSetGiftability
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassScreenBase_OnSetGiftability final
{
public:
	bool                                          bIsGiftable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_OnSetGiftability) == 0x000001, "Wrong alignment on SeasonPassScreenBase_OnSetGiftability");
static_assert(sizeof(SeasonPassScreenBase_OnSetGiftability) == 0x000001, "Wrong size on SeasonPassScreenBase_OnSetGiftability");
static_assert(offsetof(SeasonPassScreenBase_OnSetGiftability, bIsGiftable) == 0x000000, "Member 'SeasonPassScreenBase_OnSetGiftability::bIsGiftable' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.ShouldOpenAboutScreen
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassScreenBase_ShouldOpenAboutScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_ShouldOpenAboutScreen) == 0x000001, "Wrong alignment on SeasonPassScreenBase_ShouldOpenAboutScreen");
static_assert(sizeof(SeasonPassScreenBase_ShouldOpenAboutScreen) == 0x000001, "Wrong size on SeasonPassScreenBase_ShouldOpenAboutScreen");
static_assert(offsetof(SeasonPassScreenBase_ShouldOpenAboutScreen, ReturnValue) == 0x000000, "Member 'SeasonPassScreenBase_ShouldOpenAboutScreen::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.UpdateStoreHasStarsNotification
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassScreenBase_UpdateStoreHasStarsNotification final
{
public:
	bool                                          bShowNotification;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_UpdateStoreHasStarsNotification) == 0x000001, "Wrong alignment on SeasonPassScreenBase_UpdateStoreHasStarsNotification");
static_assert(sizeof(SeasonPassScreenBase_UpdateStoreHasStarsNotification) == 0x000001, "Wrong size on SeasonPassScreenBase_UpdateStoreHasStarsNotification");
static_assert(offsetof(SeasonPassScreenBase_UpdateStoreHasStarsNotification, bShowNotification) == 0x000000, "Member 'SeasonPassScreenBase_UpdateStoreHasStarsNotification::bShowNotification' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.CanClaimBattlePassDiscountToken
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassScreenBase_CanClaimBattlePassDiscountToken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_CanClaimBattlePassDiscountToken) == 0x000001, "Wrong alignment on SeasonPassScreenBase_CanClaimBattlePassDiscountToken");
static_assert(sizeof(SeasonPassScreenBase_CanClaimBattlePassDiscountToken) == 0x000001, "Wrong size on SeasonPassScreenBase_CanClaimBattlePassDiscountToken");
static_assert(offsetof(SeasonPassScreenBase_CanClaimBattlePassDiscountToken, ReturnValue) == 0x000000, "Member 'SeasonPassScreenBase_CanClaimBattlePassDiscountToken::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.GetAllLevelInfos
// 0x0050 (0x0050 - 0x0000)
struct SeasonPassScreenBase_GetAllLevelInfos final
{
public:
	TMap<int32, class UFortSeasonPassLevelInfo*>  ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_GetAllLevelInfos) == 0x000008, "Wrong alignment on SeasonPassScreenBase_GetAllLevelInfos");
static_assert(sizeof(SeasonPassScreenBase_GetAllLevelInfos) == 0x000050, "Wrong size on SeasonPassScreenBase_GetAllLevelInfos");
static_assert(offsetof(SeasonPassScreenBase_GetAllLevelInfos, ReturnValue) == 0x000000, "Member 'SeasonPassScreenBase_GetAllLevelInfos::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.GetLevelInfo
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassScreenBase_GetLevelInfo final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSeasonPassLevelInfo*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_GetLevelInfo) == 0x000008, "Wrong alignment on SeasonPassScreenBase_GetLevelInfo");
static_assert(sizeof(SeasonPassScreenBase_GetLevelInfo) == 0x000010, "Wrong size on SeasonPassScreenBase_GetLevelInfo");
static_assert(offsetof(SeasonPassScreenBase_GetLevelInfo, Level) == 0x000000, "Member 'SeasonPassScreenBase_GetLevelInfo::Level' has a wrong offset!");
static_assert(offsetof(SeasonPassScreenBase_GetLevelInfo, ReturnValue) == 0x000008, "Member 'SeasonPassScreenBase_GetLevelInfo::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.GetSeasonEndDate
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassScreenBase_GetSeasonEndDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_GetSeasonEndDate) == 0x000008, "Wrong alignment on SeasonPassScreenBase_GetSeasonEndDate");
static_assert(sizeof(SeasonPassScreenBase_GetSeasonEndDate) == 0x000008, "Wrong size on SeasonPassScreenBase_GetSeasonEndDate");
static_assert(offsetof(SeasonPassScreenBase_GetSeasonEndDate, ReturnValue) == 0x000000, "Member 'SeasonPassScreenBase_GetSeasonEndDate::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.GetSeasonPassLevel
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassScreenBase_GetSeasonPassLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_GetSeasonPassLevel) == 0x000004, "Wrong alignment on SeasonPassScreenBase_GetSeasonPassLevel");
static_assert(sizeof(SeasonPassScreenBase_GetSeasonPassLevel) == 0x000004, "Wrong size on SeasonPassScreenBase_GetSeasonPassLevel");
static_assert(offsetof(SeasonPassScreenBase_GetSeasonPassLevel, ReturnValue) == 0x000000, "Member 'SeasonPassScreenBase_GetSeasonPassLevel::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.GetSeasonPassLevelMax
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassScreenBase_GetSeasonPassLevelMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_GetSeasonPassLevelMax) == 0x000004, "Wrong alignment on SeasonPassScreenBase_GetSeasonPassLevelMax");
static_assert(sizeof(SeasonPassScreenBase_GetSeasonPassLevelMax) == 0x000004, "Wrong size on SeasonPassScreenBase_GetSeasonPassLevelMax");
static_assert(offsetof(SeasonPassScreenBase_GetSeasonPassLevelMax, ReturnValue) == 0x000000, "Member 'SeasonPassScreenBase_GetSeasonPassLevelMax::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.HasUnclaimedBattlePassDiscountToken
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassScreenBase_HasUnclaimedBattlePassDiscountToken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_HasUnclaimedBattlePassDiscountToken) == 0x000001, "Wrong alignment on SeasonPassScreenBase_HasUnclaimedBattlePassDiscountToken");
static_assert(sizeof(SeasonPassScreenBase_HasUnclaimedBattlePassDiscountToken) == 0x000001, "Wrong size on SeasonPassScreenBase_HasUnclaimedBattlePassDiscountToken");
static_assert(offsetof(SeasonPassScreenBase_HasUnclaimedBattlePassDiscountToken, ReturnValue) == 0x000000, "Member 'SeasonPassScreenBase_HasUnclaimedBattlePassDiscountToken::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.OwnsSeasonPass
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassScreenBase_OwnsSeasonPass final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_OwnsSeasonPass) == 0x000001, "Wrong alignment on SeasonPassScreenBase_OwnsSeasonPass");
static_assert(sizeof(SeasonPassScreenBase_OwnsSeasonPass) == 0x000001, "Wrong size on SeasonPassScreenBase_OwnsSeasonPass");
static_assert(offsetof(SeasonPassScreenBase_OwnsSeasonPass, ReturnValue) == 0x000000, "Member 'SeasonPassScreenBase_OwnsSeasonPass::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.PurchaseAvailible
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassScreenBase_PurchaseAvailible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_PurchaseAvailible) == 0x000001, "Wrong alignment on SeasonPassScreenBase_PurchaseAvailible");
static_assert(sizeof(SeasonPassScreenBase_PurchaseAvailible) == 0x000001, "Wrong size on SeasonPassScreenBase_PurchaseAvailible");
static_assert(offsetof(SeasonPassScreenBase_PurchaseAvailible, ReturnValue) == 0x000000, "Member 'SeasonPassScreenBase_PurchaseAvailible::ReturnValue' has a wrong offset!");

// Function FortniteUI.SeasonPassScreenBase.SendSeasonPassTabInteractionAnalytic
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassScreenBase_SendSeasonPassTabInteractionAnalytic final
{
public:
	class FString                                 Interaction;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScreenBase_SendSeasonPassTabInteractionAnalytic) == 0x000008, "Wrong alignment on SeasonPassScreenBase_SendSeasonPassTabInteractionAnalytic");
static_assert(sizeof(SeasonPassScreenBase_SendSeasonPassTabInteractionAnalytic) == 0x000010, "Wrong size on SeasonPassScreenBase_SendSeasonPassTabInteractionAnalytic");
static_assert(offsetof(SeasonPassScreenBase_SendSeasonPassTabInteractionAnalytic, Interaction) == 0x000000, "Member 'SeasonPassScreenBase_SendSeasonPassTabInteractionAnalytic::Interaction' has a wrong offset!");

// Function FortniteUI.StoreToastRequest.IsRequestReady
// 0x0001 (0x0001 - 0x0000)
struct StoreToastRequest_IsRequestReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreToastRequest_IsRequestReady) == 0x000001, "Wrong alignment on StoreToastRequest_IsRequestReady");
static_assert(sizeof(StoreToastRequest_IsRequestReady) == 0x000001, "Wrong size on StoreToastRequest_IsRequestReady");
static_assert(offsetof(StoreToastRequest_IsRequestReady, ReturnValue) == 0x000000, "Member 'StoreToastRequest_IsRequestReady::ReturnValue' has a wrong offset!");

// Function FortniteUI.StoreToastRequest.ShouldBeginRequest
// 0x0001 (0x0001 - 0x0000)
struct StoreToastRequest_ShouldBeginRequest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreToastRequest_ShouldBeginRequest) == 0x000001, "Wrong alignment on StoreToastRequest_ShouldBeginRequest");
static_assert(sizeof(StoreToastRequest_ShouldBeginRequest) == 0x000001, "Wrong size on StoreToastRequest_ShouldBeginRequest");
static_assert(offsetof(StoreToastRequest_ShouldBeginRequest, ReturnValue) == 0x000000, "Member 'StoreToastRequest_ShouldBeginRequest::ReturnValue' has a wrong offset!");

// Function FortniteUI.StoreToastRequest.GetToast
// 0x0090 (0x0090 - 0x0000)
struct StoreToastRequest_GetToast final
{
public:
	struct FStoreCallout                          ReturnValue;                                       // 0x0000(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreToastRequest_GetToast) == 0x000008, "Wrong alignment on StoreToastRequest_GetToast");
static_assert(sizeof(StoreToastRequest_GetToast) == 0x000090, "Wrong size on StoreToastRequest_GetToast");
static_assert(offsetof(StoreToastRequest_GetToast, ReturnValue) == 0x000000, "Member 'StoreToastRequest_GetToast::ReturnValue' has a wrong offset!");

// Function FortniteUI.TryHardCountdownWidget.OnGamePhaseStepChanged
// 0x0001 (0x0001 - 0x0000)
struct TryHardCountdownWidget_OnGamePhaseStepChanged final
{
public:
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TryHardCountdownWidget_OnGamePhaseStepChanged) == 0x000001, "Wrong alignment on TryHardCountdownWidget_OnGamePhaseStepChanged");
static_assert(sizeof(TryHardCountdownWidget_OnGamePhaseStepChanged) == 0x000001, "Wrong size on TryHardCountdownWidget_OnGamePhaseStepChanged");
static_assert(offsetof(TryHardCountdownWidget_OnGamePhaseStepChanged, GamePhaseStep) == 0x000000, "Member 'TryHardCountdownWidget_OnGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function FortniteUI.TryHardCountdownWidget.OnHandleSpectatingChanged
// 0x0008 (0x0008 - 0x0000)
struct TryHardCountdownWidget_OnHandleSpectatingChanged final
{
public:
	class AFortPlayerStateZone*                   SpectatingTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TryHardCountdownWidget_OnHandleSpectatingChanged) == 0x000008, "Wrong alignment on TryHardCountdownWidget_OnHandleSpectatingChanged");
static_assert(sizeof(TryHardCountdownWidget_OnHandleSpectatingChanged) == 0x000008, "Wrong size on TryHardCountdownWidget_OnHandleSpectatingChanged");
static_assert(offsetof(TryHardCountdownWidget_OnHandleSpectatingChanged, SpectatingTarget) == 0x000000, "Member 'TryHardCountdownWidget_OnHandleSpectatingChanged::SpectatingTarget' has a wrong offset!");

// Function FortniteUI.TryHardCountdownWidget.ShowWidget
// 0x0004 (0x0004 - 0x0000)
struct TryHardCountdownWidget_ShowWidget final
{
public:
	int32                                         NumRemaining;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TryHardCountdownWidget_ShowWidget) == 0x000004, "Wrong alignment on TryHardCountdownWidget_ShowWidget");
static_assert(sizeof(TryHardCountdownWidget_ShowWidget) == 0x000004, "Wrong size on TryHardCountdownWidget_ShowWidget");
static_assert(offsetof(TryHardCountdownWidget_ShowWidget, NumRemaining) == 0x000000, "Member 'TryHardCountdownWidget_ShowWidget::NumRemaining' has a wrong offset!");

// Function FortniteUI.TryHardCountdownWidget.UpdateNumber
// 0x0004 (0x0004 - 0x0000)
struct TryHardCountdownWidget_UpdateNumber final
{
public:
	int32                                         NumRemaining;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TryHardCountdownWidget_UpdateNumber) == 0x000004, "Wrong alignment on TryHardCountdownWidget_UpdateNumber");
static_assert(sizeof(TryHardCountdownWidget_UpdateNumber) == 0x000004, "Wrong size on TryHardCountdownWidget_UpdateNumber");
static_assert(offsetof(TryHardCountdownWidget_UpdateNumber, NumRemaining) == 0x000000, "Member 'TryHardCountdownWidget_UpdateNumber::NumRemaining' has a wrong offset!");

// Function FortniteUI.TryHardCountdownWidget.IsShowing
// 0x0001 (0x0001 - 0x0000)
struct TryHardCountdownWidget_IsShowing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TryHardCountdownWidget_IsShowing) == 0x000001, "Wrong alignment on TryHardCountdownWidget_IsShowing");
static_assert(sizeof(TryHardCountdownWidget_IsShowing) == 0x000001, "Wrong size on TryHardCountdownWidget_IsShowing");
static_assert(offsetof(TryHardCountdownWidget_IsShowing, ReturnValue) == 0x000000, "Member 'TryHardCountdownWidget_IsShowing::ReturnValue' has a wrong offset!");

// Function FortniteUI.TwoTeamScoreWidgetBase.OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct TwoTeamScoreWidgetBase_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwoTeamScoreWidgetBase_OnGamePhaseChanged) == 0x000001, "Wrong alignment on TwoTeamScoreWidgetBase_OnGamePhaseChanged");
static_assert(sizeof(TwoTeamScoreWidgetBase_OnGamePhaseChanged) == 0x000001, "Wrong size on TwoTeamScoreWidgetBase_OnGamePhaseChanged");
static_assert(offsetof(TwoTeamScoreWidgetBase_OnGamePhaseChanged, GamePhase) == 0x000000, "Member 'TwoTeamScoreWidgetBase_OnGamePhaseChanged::GamePhase' has a wrong offset!");

// Function FortniteUI.TwoTeamScoreWidgetBase.OnHandleSpectatingChanged
// 0x0008 (0x0008 - 0x0000)
struct TwoTeamScoreWidgetBase_OnHandleSpectatingChanged final
{
public:
	class AFortPlayerStateZone*                   SpectatingTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwoTeamScoreWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong alignment on TwoTeamScoreWidgetBase_OnHandleSpectatingChanged");
static_assert(sizeof(TwoTeamScoreWidgetBase_OnHandleSpectatingChanged) == 0x000008, "Wrong size on TwoTeamScoreWidgetBase_OnHandleSpectatingChanged");
static_assert(offsetof(TwoTeamScoreWidgetBase_OnHandleSpectatingChanged, SpectatingTarget) == 0x000000, "Member 'TwoTeamScoreWidgetBase_OnHandleSpectatingChanged::SpectatingTarget' has a wrong offset!");

// Function FortniteUI.TwoTeamScoreWidgetBase.OnPlayScoreProgressSound
// 0x0002 (0x0002 - 0x0000)
struct TwoTeamScoreWidgetBase_OnPlayScoreProgressSound final
{
public:
	ETDMScoreProgressTypes                        ScoreProgressType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalTeam;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwoTeamScoreWidgetBase_OnPlayScoreProgressSound) == 0x000001, "Wrong alignment on TwoTeamScoreWidgetBase_OnPlayScoreProgressSound");
static_assert(sizeof(TwoTeamScoreWidgetBase_OnPlayScoreProgressSound) == 0x000002, "Wrong size on TwoTeamScoreWidgetBase_OnPlayScoreProgressSound");
static_assert(offsetof(TwoTeamScoreWidgetBase_OnPlayScoreProgressSound, ScoreProgressType) == 0x000000, "Member 'TwoTeamScoreWidgetBase_OnPlayScoreProgressSound::ScoreProgressType' has a wrong offset!");
static_assert(offsetof(TwoTeamScoreWidgetBase_OnPlayScoreProgressSound, bIsLocalTeam) == 0x000001, "Member 'TwoTeamScoreWidgetBase_OnPlayScoreProgressSound::bIsLocalTeam' has a wrong offset!");

// Function FortniteUI.TwoTeamScoreWidgetBase.OnUpdateTeamScore
// 0x0028 (0x0028 - 0x0000)
struct TwoTeamScoreWidgetBase_OnUpdateTeamScore final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTDMTeamScoreData                      ScoreData;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwoTeamScoreWidgetBase_OnUpdateTeamScore) == 0x000008, "Wrong alignment on TwoTeamScoreWidgetBase_OnUpdateTeamScore");
static_assert(sizeof(TwoTeamScoreWidgetBase_OnUpdateTeamScore) == 0x000028, "Wrong size on TwoTeamScoreWidgetBase_OnUpdateTeamScore");
static_assert(offsetof(TwoTeamScoreWidgetBase_OnUpdateTeamScore, TeamIndex) == 0x000000, "Member 'TwoTeamScoreWidgetBase_OnUpdateTeamScore::TeamIndex' has a wrong offset!");
static_assert(offsetof(TwoTeamScoreWidgetBase_OnUpdateTeamScore, ScoreData) == 0x000008, "Member 'TwoTeamScoreWidgetBase_OnUpdateTeamScore::ScoreData' has a wrong offset!");

// Function FortniteUI.TwoTeamScoreWidgetBase.OnUpdateTotalScore
// 0x0018 (0x0018 - 0x0000)
struct TwoTeamScoreWidgetBase_OnUpdateTotalScore final
{
public:
	class FText                                   TotalScoreText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwoTeamScoreWidgetBase_OnUpdateTotalScore) == 0x000008, "Wrong alignment on TwoTeamScoreWidgetBase_OnUpdateTotalScore");
static_assert(sizeof(TwoTeamScoreWidgetBase_OnUpdateTotalScore) == 0x000018, "Wrong size on TwoTeamScoreWidgetBase_OnUpdateTotalScore");
static_assert(offsetof(TwoTeamScoreWidgetBase_OnUpdateTotalScore, TotalScoreText) == 0x000000, "Member 'TwoTeamScoreWidgetBase_OnUpdateTotalScore::TotalScoreText' has a wrong offset!");

// Function FortniteUI.WaxActiveTokenEventWidgetBase.GetWaxTokensHighCrit
// 0x0004 (0x0004 - 0x0000)
struct WaxActiveTokenEventWidgetBase_GetWaxTokensHighCrit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxActiveTokenEventWidgetBase_GetWaxTokensHighCrit) == 0x000004, "Wrong alignment on WaxActiveTokenEventWidgetBase_GetWaxTokensHighCrit");
static_assert(sizeof(WaxActiveTokenEventWidgetBase_GetWaxTokensHighCrit) == 0x000004, "Wrong size on WaxActiveTokenEventWidgetBase_GetWaxTokensHighCrit");
static_assert(offsetof(WaxActiveTokenEventWidgetBase_GetWaxTokensHighCrit, ReturnValue) == 0x000000, "Member 'WaxActiveTokenEventWidgetBase_GetWaxTokensHighCrit::ReturnValue' has a wrong offset!");

// Function FortniteUI.WaxActiveTokenEventWidgetBase.GetWaxTokensMediumCrit
// 0x0004 (0x0004 - 0x0000)
struct WaxActiveTokenEventWidgetBase_GetWaxTokensMediumCrit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxActiveTokenEventWidgetBase_GetWaxTokensMediumCrit) == 0x000004, "Wrong alignment on WaxActiveTokenEventWidgetBase_GetWaxTokensMediumCrit");
static_assert(sizeof(WaxActiveTokenEventWidgetBase_GetWaxTokensMediumCrit) == 0x000004, "Wrong size on WaxActiveTokenEventWidgetBase_GetWaxTokensMediumCrit");
static_assert(offsetof(WaxActiveTokenEventWidgetBase_GetWaxTokensMediumCrit, ReturnValue) == 0x000000, "Member 'WaxActiveTokenEventWidgetBase_GetWaxTokensMediumCrit::ReturnValue' has a wrong offset!");

// Function FortniteUI.WaxProgressWidgetBase.AdjustForSpectate
// 0x0001 (0x0001 - 0x0000)
struct WaxProgressWidgetBase_AdjustForSpectate final
{
public:
	bool                                          bIsSpectating;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxProgressWidgetBase_AdjustForSpectate) == 0x000001, "Wrong alignment on WaxProgressWidgetBase_AdjustForSpectate");
static_assert(sizeof(WaxProgressWidgetBase_AdjustForSpectate) == 0x000001, "Wrong size on WaxProgressWidgetBase_AdjustForSpectate");
static_assert(offsetof(WaxProgressWidgetBase_AdjustForSpectate, bIsSpectating) == 0x000000, "Member 'WaxProgressWidgetBase_AdjustForSpectate::bIsSpectating' has a wrong offset!");

// Function FortniteUI.WaxProgressWidgetBase.DoCoinPulseFor
// 0x0004 (0x0004 - 0x0000)
struct WaxProgressWidgetBase_DoCoinPulseFor final
{
public:
	int32                                         BarIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxProgressWidgetBase_DoCoinPulseFor) == 0x000004, "Wrong alignment on WaxProgressWidgetBase_DoCoinPulseFor");
static_assert(sizeof(WaxProgressWidgetBase_DoCoinPulseFor) == 0x000004, "Wrong size on WaxProgressWidgetBase_DoCoinPulseFor");
static_assert(offsetof(WaxProgressWidgetBase_DoCoinPulseFor, BarIndex) == 0x000000, "Member 'WaxProgressWidgetBase_DoCoinPulseFor::BarIndex' has a wrong offset!");

// Function FortniteUI.WaxProgressWidgetBase.OnPendingFlashes
// 0x0010 (0x0010 - 0x0000)
struct WaxProgressWidgetBase_OnPendingFlashes final
{
public:
	TArray<int32>                                 Flashes;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxProgressWidgetBase_OnPendingFlashes) == 0x000008, "Wrong alignment on WaxProgressWidgetBase_OnPendingFlashes");
static_assert(sizeof(WaxProgressWidgetBase_OnPendingFlashes) == 0x000010, "Wrong size on WaxProgressWidgetBase_OnPendingFlashes");
static_assert(offsetof(WaxProgressWidgetBase_OnPendingFlashes, Flashes) == 0x000000, "Member 'WaxProgressWidgetBase_OnPendingFlashes::Flashes' has a wrong offset!");

// Function FortniteUI.WaxProgressWidgetBase.ShowEnemyCloseToVictory
// 0x0004 (0x0004 - 0x0000)
struct WaxProgressWidgetBase_ShowEnemyCloseToVictory final
{
public:
	int32                                         CoinsAwayFromVictory;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxProgressWidgetBase_ShowEnemyCloseToVictory) == 0x000004, "Wrong alignment on WaxProgressWidgetBase_ShowEnemyCloseToVictory");
static_assert(sizeof(WaxProgressWidgetBase_ShowEnemyCloseToVictory) == 0x000004, "Wrong size on WaxProgressWidgetBase_ShowEnemyCloseToVictory");
static_assert(offsetof(WaxProgressWidgetBase_ShowEnemyCloseToVictory, CoinsAwayFromVictory) == 0x000000, "Member 'WaxProgressWidgetBase_ShowEnemyCloseToVictory::CoinsAwayFromVictory' has a wrong offset!");

// Function FortniteUI.WaxProgressWidgetBase.ShowPlayerCloseToVictory
// 0x0004 (0x0004 - 0x0000)
struct WaxProgressWidgetBase_ShowPlayerCloseToVictory final
{
public:
	int32                                         CoinsAwayFromVictory;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxProgressWidgetBase_ShowPlayerCloseToVictory) == 0x000004, "Wrong alignment on WaxProgressWidgetBase_ShowPlayerCloseToVictory");
static_assert(sizeof(WaxProgressWidgetBase_ShowPlayerCloseToVictory) == 0x000004, "Wrong size on WaxProgressWidgetBase_ShowPlayerCloseToVictory");
static_assert(offsetof(WaxProgressWidgetBase_ShowPlayerCloseToVictory, CoinsAwayFromVictory) == 0x000000, "Member 'WaxProgressWidgetBase_ShowPlayerCloseToVictory::CoinsAwayFromVictory' has a wrong offset!");

// Function FortniteUI.WaxSquadStatusWidget.UpdateLives
// 0x0004 (0x0004 - 0x0000)
struct WaxSquadStatusWidget_UpdateLives final
{
public:
	int32                                         NewScore;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxSquadStatusWidget_UpdateLives) == 0x000004, "Wrong alignment on WaxSquadStatusWidget_UpdateLives");
static_assert(sizeof(WaxSquadStatusWidget_UpdateLives) == 0x000004, "Wrong size on WaxSquadStatusWidget_UpdateLives");
static_assert(offsetof(WaxSquadStatusWidget_UpdateLives, NewScore) == 0x000000, "Member 'WaxSquadStatusWidget_UpdateLives::NewScore' has a wrong offset!");

// Function FortniteUI.WaxSquadStatusWidget.UpdateScore
// 0x0004 (0x0004 - 0x0000)
struct WaxSquadStatusWidget_UpdateScore final
{
public:
	int32                                         NewScore;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxSquadStatusWidget_UpdateScore) == 0x000004, "Wrong alignment on WaxSquadStatusWidget_UpdateScore");
static_assert(sizeof(WaxSquadStatusWidget_UpdateScore) == 0x000004, "Wrong size on WaxSquadStatusWidget_UpdateScore");
static_assert(offsetof(WaxSquadStatusWidget_UpdateScore, NewScore) == 0x000000, "Member 'WaxSquadStatusWidget_UpdateScore::NewScore' has a wrong offset!");

// Function FortniteUI.WaxSquadStatusWidget.UpdateThreatValue
// 0x0001 (0x0001 - 0x0000)
struct WaxSquadStatusWidget_UpdateThreatValue final
{
public:
	EWaxState                                     NewWaxState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaxSquadStatusWidget_UpdateThreatValue) == 0x000001, "Wrong alignment on WaxSquadStatusWidget_UpdateThreatValue");
static_assert(sizeof(WaxSquadStatusWidget_UpdateThreatValue) == 0x000001, "Wrong size on WaxSquadStatusWidget_UpdateThreatValue");
static_assert(offsetof(WaxSquadStatusWidget_UpdateThreatValue, NewWaxState) == 0x000000, "Member 'WaxSquadStatusWidget_UpdateThreatValue::NewWaxState' has a wrong offset!");

// Function FortniteUI.WaxTokenEventWidgetBase.OnFlyingTokensApplied
// 0x0010 (0x0010 - 0x0000)
struct WaxTokenEventWidgetBase_OnFlyingTokensApplied final
{
public:
	class AFortPlayerStateAthena*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WaxTokenEventWidgetBase_OnFlyingTokensApplied) == 0x000008, "Wrong alignment on WaxTokenEventWidgetBase_OnFlyingTokensApplied");
static_assert(sizeof(WaxTokenEventWidgetBase_OnFlyingTokensApplied) == 0x000010, "Wrong size on WaxTokenEventWidgetBase_OnFlyingTokensApplied");
static_assert(offsetof(WaxTokenEventWidgetBase_OnFlyingTokensApplied, Player) == 0x000000, "Member 'WaxTokenEventWidgetBase_OnFlyingTokensApplied::Player' has a wrong offset!");
static_assert(offsetof(WaxTokenEventWidgetBase_OnFlyingTokensApplied, Amount) == 0x000008, "Member 'WaxTokenEventWidgetBase_OnFlyingTokensApplied::Amount' has a wrong offset!");

// Function FortniteUI.WaxTokenEventWidgetBase.OnTokensAwarded
// 0x0010 (0x0010 - 0x0000)
struct WaxTokenEventWidgetBase_OnTokensAwarded final
{
public:
	class AFortPlayerStateAthena*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WaxTokenEventWidgetBase_OnTokensAwarded) == 0x000008, "Wrong alignment on WaxTokenEventWidgetBase_OnTokensAwarded");
static_assert(sizeof(WaxTokenEventWidgetBase_OnTokensAwarded) == 0x000010, "Wrong size on WaxTokenEventWidgetBase_OnTokensAwarded");
static_assert(offsetof(WaxTokenEventWidgetBase_OnTokensAwarded, Player) == 0x000000, "Member 'WaxTokenEventWidgetBase_OnTokensAwarded::Player' has a wrong offset!");
static_assert(offsetof(WaxTokenEventWidgetBase_OnTokensAwarded, Amount) == 0x000008, "Member 'WaxTokenEventWidgetBase_OnTokensAwarded::Amount' has a wrong offset!");

// Function FortniteUI.WaxTokenEventWidgetBase.OnTokensCollected
// 0x0010 (0x0010 - 0x0000)
struct WaxTokenEventWidgetBase_OnTokensCollected final
{
public:
	class AFortPlayerStateAthena*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WaxTokenEventWidgetBase_OnTokensCollected) == 0x000008, "Wrong alignment on WaxTokenEventWidgetBase_OnTokensCollected");
static_assert(sizeof(WaxTokenEventWidgetBase_OnTokensCollected) == 0x000010, "Wrong size on WaxTokenEventWidgetBase_OnTokensCollected");
static_assert(offsetof(WaxTokenEventWidgetBase_OnTokensCollected, Player) == 0x000000, "Member 'WaxTokenEventWidgetBase_OnTokensCollected::Player' has a wrong offset!");
static_assert(offsetof(WaxTokenEventWidgetBase_OnTokensCollected, Amount) == 0x000008, "Member 'WaxTokenEventWidgetBase_OnTokensCollected::Amount' has a wrong offset!");

// Function FortniteUI.WeaponOverheatWidget.OnWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct WeaponOverheatWidget_OnWeaponEquipped final
{
public:
	class AFortWeapon*                            CurrentWeapon;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponOverheatWidget_OnWeaponEquipped) == 0x000008, "Wrong alignment on WeaponOverheatWidget_OnWeaponEquipped");
static_assert(sizeof(WeaponOverheatWidget_OnWeaponEquipped) == 0x000010, "Wrong size on WeaponOverheatWidget_OnWeaponEquipped");
static_assert(offsetof(WeaponOverheatWidget_OnWeaponEquipped, CurrentWeapon) == 0x000000, "Member 'WeaponOverheatWidget_OnWeaponEquipped::CurrentWeapon' has a wrong offset!");
static_assert(offsetof(WeaponOverheatWidget_OnWeaponEquipped, PrevWeapon) == 0x000008, "Member 'WeaponOverheatWidget_OnWeaponEquipped::PrevWeapon' has a wrong offset!");

}

