#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteGame

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "CinematicCamera_structs.hpp"
#include "McpProfileSys_structs.hpp"
#include "Party_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "JsonUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "GameSubCatalog_structs.hpp"
#include "MeshNetwork_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonInput_structs.hpp"
#include "InputCore_structs.hpp"
#include "AIModule_structs.hpp"
#include "Account_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"


namespace SDK
{

// Enum FortniteGame.EBuildingReplacementType
// NumValues: 0x0004
enum class EBuildingReplacementType : uint8
{
	BRT_None                                 = 0,
	BRT_Edited                               = 1,
	BRT_Upgrade                              = 2,
	BRT_MAX                                  = 3,
};

// Enum FortniteGame.EFortAIDirectorEvent
// NumValues: 0x0019
enum class EFortAIDirectorEvent : uint8
{
	PlayerAIEnemies                          = 0,
	PlayerTakeDamage                         = 1,
	PlayerHealth                             = 2,
	PlayerDeath                              = 3,
	PlayerLookAtAIEnemy                      = 4,
	PlayerDamageAIEnemy                      = 5,
	PlayerKillAIEnemy                        = 6,
	PlayerHealingPotential                   = 7,
	PlayerAmmoLight                          = 8,
	PlayerAmmoMedium                         = 9,
	PlayerAmmoHeavy                          = 10,
	PlayerAmmoShells                         = 11,
	PlayerAmmoEnergy                         = 12,
	PlayerAINear                             = 13,
	PlayerMovement                           = 14,
	ObjectiveTakeDamage                      = 15,
	ObjectiveHealth                          = 16,
	ObjectiveDestroyed                       = 17,
	TrapFired                                = 18,
	TrapDamagedAIEnemy                       = 19,
	ObjectivePathCost                        = 20,
	PlayerPathCost                           = 21,
	ObjectiveNearbyBuildingDamaged           = 22,
	Max_None                                 = 23,
	EFortAIDirectorEvent_MAX                 = 24,
};

// Enum FortniteGame.EFortCustomPartType
// NumValues: 0x0008
enum class EFortCustomPartType : uint8
{
	Head                                     = 0,
	Body                                     = 1,
	Hat                                      = 2,
	Backpack                                 = 3,
	Charm                                    = 4,
	Face                                     = 5,
	NumTypes                                 = 6,
	EFortCustomPartType_MAX                  = 7,
};

// Enum FortniteGame.EFortDayPhase
// NumValues: 0x0006
enum class EFortDayPhase : uint8
{
	Morning                                  = 0,
	Day                                      = 1,
	Evening                                  = 2,
	Night                                    = 3,
	NumPhases                                = 4,
	EFortDayPhase_MAX                        = 5,
};

// Enum FortniteGame.EFortInventoryType
// NumValues: 0x0004
enum class EFortInventoryType : uint8
{
	World                                    = 0,
	Account                                  = 1,
	Outpost                                  = 2,
	MAX                                      = 3,
};

// Enum FortniteGame.EOfferPurchaseError
// NumValues: 0x000C
enum class EOfferPurchaseError : uint8
{
	NoError                                  = 0,
	PendingServerConfirmation                = 1,
	CannotAffordItem                         = 2,
	InvalidOfferID                           = 3,
	InvalidPriceIndex                        = 4,
	NoneLeft                                 = 5,
	PurchaseAlreadyPending                   = 6,
	NoConnection                             = 7,
	AccountNotEligible                       = 8,
	CannotGiftItem                           = 9,
	MFANotEnabled                            = 10,
	EOfferPurchaseError_MAX                  = 11,
};

// Enum FortniteGame.EFortAlteration
// NumValues: 0x000B
enum class EFortAlteration : uint8
{
	AttributeSlot                            = 0,
	GameplaySlot                             = 1,
	ComplexCosmeticSlot                      = 2,
	UserPickedCosmeticSlot                   = 3,
	ColorSlot                                = 4,
	HeroSpecializationTier1Slot              = 5,
	HeroSpecializationTier2Slot              = 6,
	HeroSpecializationTier3Slot              = 7,
	HeroSpecializationTier4Slot              = 8,
	HeroSpecializationTier5Slot              = 9,
	EFortAlteration_MAX                      = 10,
};

// Enum FortniteGame.EPlayerCompetitiveBanReasons
// NumValues: 0x000E
enum class EPlayerCompetitiveBanReasons : uint8
{
	None                                     = 0,
	Cheating                                 = 1,
	Collusion                                = 2,
	Toxicity                                 = 3,
	Harassment                               = 4,
	Ringing                                  = 5,
	Gambling                                 = 6,
	Exploiting                               = 7,
	IntentionalDisconnect                    = 8,
	Other                                    = 9,
	AccountSharing                           = 10,
	CircumventingRegionLock                  = 11,
	CircumventingBan                         = 12,
	EPlayerCompetitiveBanReasons_MAX         = 13,
};

// Enum FortniteGame.EPlayerBanReasons
// NumValues: 0x0007
enum class EPlayerBanReasons : uint8
{
	Teaming                                  = 0,
	Afk_Leeching                             = 1,
	Harassment                               = 2,
	TradeScamming                            = 3,
	Exploiting                               = 4,
	Competitive                              = 5,
	EPlayerBanReasons_MAX                    = 6,
};

// Enum FortniteGame.EFortItemType
// NumValues: 0x0062
enum class EFortItemType : uint8
{
	WorldItem                                = 0,
	Ammo                                     = 1,
	Badge                                    = 2,
	BackpackPickup                           = 3,
	BuildingPiece                            = 4,
	CharacterPart                            = 5,
	Consumable                               = 6,
	Deco                                     = 7,
	EditTool                                 = 8,
	Ingredient                               = 9,
	ItemCache                                = 10,
	Food                                     = 11,
	Gadget                                   = 12,
	AthenaGadget                             = 13,
	HomebaseGadget                           = 14,
	HeroAbility                              = 15,
	MissionItem                              = 16,
	Trap                                     = 17,
	Weapon                                   = 18,
	WeaponMelee                              = 19,
	WeaponRanged                             = 20,
	WeaponHarvest                            = 21,
	WeaponCreativePhone                      = 22,
	WorldResource                            = 23,
	CreativeUserPrefab                       = 24,
	AccountItem                              = 25,
	AccountResource                          = 26,
	CollectedResource                        = 27,
	Alteration                               = 28,
	CardPack                                 = 29,
	Currency                                 = 30,
	Hero                                     = 31,
	Schematic                                = 32,
	Worker                                   = 33,
	TeamPerk                                 = 34,
	Token                                    = 35,
	DailyRewardScheduleToken                 = 36,
	CodeToken                                = 37,
	Stat                                     = 38,
	Buff                                     = 39,
	BuffCredit                               = 40,
	Quest                                    = 41,
	ChallengeBundle                          = 42,
	ChallengeBundleSchedule                  = 43,
	ChallengeBundleCompletionToken           = 44,
	GameplayModifier                         = 45,
	Outpost                                  = 46,
	HomebaseNode                             = 47,
	Defender                                 = 48,
	ConversionControl                        = 49,
	DeployableBaseCloudSave                  = 50,
	ConsumableAccountItem                    = 51,
	Quota                                    = 52,
	Expedition                               = 53,
	HomebaseBannerIcon                       = 54,
	HomebaseBannerColor                      = 55,
	AthenaSkyDiveContrail                    = 56,
	PersonalVehicle                          = 57,
	AthenaGlider                             = 58,
	AthenaPickaxe                            = 59,
	AthenaHat                                = 60,
	AthenaBackpack                           = 61,
	AthenaCharacter                          = 62,
	AthenaDance                              = 63,
	AthenaConsumableEmote                    = 64,
	AthenaLoadingScreen                      = 65,
	AthenaBattleBus                          = 66,
	AthenaVehicleCosmetic                    = 67,
	AthenaItemWrap                           = 68,
	AthenaCallingCard                        = 69,
	AthenaMapMarker                          = 70,
	AthenaMusicPack                          = 71,
	AthenaPetCosmetic                        = 72,
	AthenaCharmCosmetic                      = 73,
	AthenaVictoryPose                        = 74,
	AthenaSeasonTreasure                     = 75,
	AthenaSeason                             = 76,
	EventDescription                         = 77,
	MatchAward                               = 78,
	AthenaEventToken                         = 79,
	EventPurchaseTracker                     = 80,
	CosmeticVariantToken                     = 81,
	CampaignHeroLoadout                      = 82,
	Playset                                  = 83,
	PrerollData                              = 84,
	CreativePlot                             = 85,
	PlayerSurveyToken                        = 86,
	CosmeticLocker                           = 87,
	BannerToken                              = 88,
	SpecialItem                              = 89,
	Emote                                    = 90,
	Stack                                    = 91,
	CollectionBookPage                       = 92,
	BGAConsumableWrapper                     = 93,
	GiftBox                                  = 94,
	Profile                                  = 95,
	Max_None                                 = 96,
	EFortItemType_MAX                        = 97,
};

// Enum FortniteGame.EAthenaTravelLogPlayerType
// NumValues: 0x0005
enum class EAthenaTravelLogPlayerType : uint8
{
	Self                                     = 0,
	Ally                                     = 1,
	Enemy                                    = 2,
	Invalid                                  = 3,
	EAthenaTravelLogPlayerType_MAX           = 4,
};

// Enum FortniteGame.EAthenaTravelEventType
// NumValues: 0x001E
enum class EAthenaTravelEventType : uint8
{
	GroundMove                               = 0,
	AirMove                                  = 1,
	BattleBusJump                            = 2,
	LaunchJump                               = 3,
	Landed                                   = 4,
	OpenChest                                = 5,
	OpenAmmo                                 = 6,
	GotAssist                                = 7,
	GotKnockdown                             = 8,
	GotKill                                  = 9,
	PlayerDowned                             = 10,
	PlayerDied                               = 11,
	Won                                      = 12,
	DealtDamage                              = 13,
	HealthChange                             = 14,
	GotItem                                  = 15,
	DroppedItem                              = 16,
	ShieldChange                             = 17,
	WeaponExecuted                           = 18,
	EnteredVehicle                           = 19,
	ExitedVehicle                            = 20,
	TrapBuilt                                = 21,
	UsedItem                                 = 22,
	ZoneUpdate                               = 23,
	PlacedBuilding                           = 24,
	EmoteUsed                                = 25,
	UpgradedBuilding                         = 26,
	EditedBuilding                           = 27,
	Count                                    = 28,
	EAthenaTravelEventType_MAX               = 29,
};

// Enum FortniteGame.ERewardSource
// NumValues: 0x000D
enum class ERewardSource : uint8
{
	Invalid                                  = 0,
	MinutesPlayed                            = 1,
	FirstKill                                = 2,
	TeamKills                                = 3,
	FirstRevive                              = 4,
	AdditionalRevives                        = 5,
	Placement                                = 6,
	Medals                                   = 7,
	FirstWin                                 = 8,
	SeasonLevelUp                            = 9,
	BookLevelUp                              = 10,
	MAX_COUNT                                = 11,
	ERewardSource_MAX                        = 12,
};

// Enum FortniteGame.EAthenaMatchXpMultiplierSource
// NumValues: 0x0008
enum class EAthenaMatchXpMultiplierSource : uint8
{
	Invalid                                  = 0,
	BattlePassSelf                           = 1,
	BattlePassFriends                        = 2,
	CosmeticSet                              = 3,
	AntiAddictionPenalty                     = 4,
	BonusXpEvent                             = 5,
	MAX_COUNT                                = 6,
	EAthenaMatchXpMultiplierSource_MAX       = 7,
};

// Enum FortniteGame.ECampaignCustomizationCategory
// NumValues: 0x0003
enum class ECampaignCustomizationCategory : uint8
{
	None                                     = 0,
	PersonalVehicle                          = 1,
	ECampaignCustomizationCategory_MAX       = 2,
};

// Enum FortniteGame.EVolumeState
// NumValues: 0x0005
enum class EVolumeState : uint8
{
	Uninitialized                            = 0,
	ReadOnly                                 = 1,
	Initializing                             = 2,
	Ready                                    = 3,
	EVolumeState_MAX                         = 4,
};

// Enum FortniteGame.EAthenaScoringEvent
// NumValues: 0x000D
enum class EAthenaScoringEvent : uint8
{
	None                                     = 0,
	Elimination                              = 1,
	ChestOpened                              = 2,
	AmmoCanOpened                            = 3,
	SupplyDropOpened                         = 4,
	SupplyLlamaOpened                        = 5,
	ForagedItemConsumed                      = 6,
	SurvivalInMinutes                        = 7,
	CollectedCoinBronze                      = 8,
	CollectedCoinSilver                      = 9,
	CollectedCoinGold                        = 10,
	AIKilled                                 = 11,
	EAthenaScoringEvent_MAX                  = 12,
};

// Enum FortniteGame.EMatchAbandonState
// NumValues: 0x0005
enum class EMatchAbandonState : uint8
{
	None                                     = 0,
	Joining                                  = 1,
	CanAbandon                               = 2,
	TeamLocked                               = 3,
	EMatchAbandonState_MAX                   = 4,
};

// Enum FortniteGame.EFortVoteStatus
// NumValues: 0x0006
enum class EFortVoteStatus : uint8
{
	Begin                                    = 0,
	Update                                   = 1,
	End                                      = 2,
	BeginLockout                             = 3,
	EndLockout                               = 4,
	EFortVoteStatus_MAX                      = 5,
};

// Enum FortniteGame.EFortVoteType
// NumValues: 0x0005
enum class EFortVoteType : uint8
{
	SurvivalVote                             = 0,
	DifficultyIncrease                       = 1,
	MissionActivation                        = 2,
	ContinueOrExtract                        = 3,
	EFortVoteType_MAX                        = 4,
};

// Enum FortniteGame.EFortQuickBars
// NumValues: 0x0005
enum class EFortQuickBars : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Creative                                 = 2,
	Max_None                                 = 3,
	EFortQuickBars_MAX                       = 4,
};

// Enum FortniteGame.EAthenaCustomizationCategory
// NumValues: 0x0014
enum class EAthenaCustomizationCategory : uint8
{
	None                                     = 0,
	Glider                                   = 1,
	Pickaxe                                  = 2,
	Hat                                      = 3,
	Backpack                                 = 4,
	Character                                = 5,
	LoadingScreen                            = 6,
	BattleBus                                = 7,
	VehicleDecoration                        = 8,
	CallingCard                              = 9,
	MapMarker                                = 10,
	Dance                                    = 11,
	ConsumableEmote                          = 12,
	VictoryPose                              = 13,
	SkyDiveContrail                          = 14,
	MusicPack                                = 15,
	ItemWrap                                 = 16,
	PetSkin                                  = 17,
	Charm                                    = 18,
	MAX                                      = 19,
};

// Enum FortniteGame.EStatCategory
// NumValues: 0x0005
enum class EStatCategory : uint8
{
	Combat                                   = 0,
	Building                                 = 1,
	Utility                                  = 2,
	Max_None                                 = 3,
	EStatCategory_MAX                        = 4,
};

// Enum FortniteGame.EFortResourceType
// NumValues: 0x0006
enum class EFortResourceType : uint8
{
	Wood                                     = 0,
	Stone                                    = 1,
	Metal                                    = 2,
	Permanite                                = 3,
	None                                     = 4,
	EFortResourceType_MAX                    = 5,
};

// Enum FortniteGame.ERichPresenceStateChange
// NumValues: 0x0006
enum class ERichPresenceStateChange : uint8
{
	AutoUpdate                               = 0,
	Idle                                     = 1,
	Active                                   = 2,
	Busy                                     = 3,
	NotBusy                                  = 4,
	ERichPresenceStateChange_MAX             = 5,
};

// Enum FortniteGame.ESubGame
// NumValues: 0x0005
enum class ESubGame : uint8
{
	Campaign                                 = 0,
	Athena                                   = 1,
	Invalid                                  = 2,
	Count                                    = 2,
	ESubGame_MAX                             = 3,
};

// Enum FortniteGame.ELockOnState
// NumValues: 0x0007
enum class ELockOnState : uint8
{
	NoTarget                                 = 0,
	TargetAcquired                           = 1,
	LockingOnToTarget                        = 2,
	TargetLockedOn                           = 3,
	Cooldown                                 = 4,
	COUNT                                    = 5,
	ELockOnState_MAX                         = 6,
};

// Enum FortniteGame.EStatRecordingPeriod
// NumValues: 0x0008
enum class EStatRecordingPeriod : uint8
{
	Frame                                    = 0,
	Minute                                   = 1,
	AthenaSafeZonePhase                      = 2,
	Life                                     = 3,
	Map                                      = 4,
	Campaign                                 = 5,
	Persistent                               = 6,
	Max                                      = 7,
};

// Enum FortniteGame.EStatMod
// NumValues: 0x0004
enum class EStatMod : uint8
{
	Delta                                    = 0,
	Set                                      = 1,
	Maximum                                  = 2,
	EStatMod_MAX                             = 3,
};

// Enum FortniteGame.EFortDamageZone
// NumValues: 0x0005
enum class EFortDamageZone : uint8
{
	Light                                    = 0,
	Normal                                   = 1,
	Critical                                 = 2,
	Vulnerability                            = 3,
	Max                                      = 4,
};

// Enum FortniteGame.EFortItemTier
// NumValues: 0x000D
enum class EFortItemTier : uint8
{
	No_Tier                                  = 0,
	I                                        = 1,
	II                                       = 2,
	III                                      = 3,
	IV                                       = 4,
	V                                        = 5,
	VI                                       = 6,
	VII                                      = 7,
	VIII                                     = 8,
	IX                                       = 9,
	X                                        = 10,
	NumItemTierValues                        = 11,
	EFortItemTier_MAX                        = 12,
};

// Enum FortniteGame.EFortResourceLevel
// NumValues: 0x0009
enum class EFortResourceLevel : uint8
{
	First                                    = 0,
	Second                                   = 1,
	Third                                    = 2,
	Fourth                                   = 3,
	Fifth                                    = 4,
	Sixth                                    = 5,
	NumLevels                                = 6,
	Invalid                                  = 7,
	EFortResourceLevel_MAX                   = 8,
};

// Enum FortniteGame.EFortItemEntryState
// NumValues: 0x0010
enum class EFortItemEntryState : uint8
{
	NoneState                                = 0,
	NewItemCount                             = 1,
	ShouldShowItemToast                      = 2,
	DurabilityInitialized                    = 3,
	DoNotShowSpawnParticles                  = 4,
	FromRecoveredBackpack                    = 5,
	FromGift                                 = 6,
	PendingUpgradeCriteriaProgress           = 7,
	OwnerBuildingHandle                      = 8,
	FromDroppedPickup                        = 9,
	JustCrafted                              = 10,
	CraftAndSlotTarget                       = 11,
	GenericAttributeValueSet                 = 12,
	PickupInstigatorHandle                   = 13,
	CreativeUserPrefabHasContent             = 14,
	EFortItemEntryState_MAX                  = 15,
};

// Enum FortniteGame.EFortRequestedGameplayAction
// NumValues: 0x0009
enum class EFortRequestedGameplayAction : uint8
{
	ContinuePlaying                          = 0,
	StartPlaying                             = 1,
	StopPlaying                              = 2,
	EnterZone                                = 3,
	LeaveZone                                = 4,
	ReturnToMainMenu                         = 5,
	QuitGame                                 = 6,
	Invalid                                  = 7,
	EFortRequestedGameplayAction_MAX         = 8,
};

// Enum FortniteGame.EFortGameplayState
// NumValues: 0x0007
enum class EFortGameplayState : uint8
{
	NormalGameplay                           = 0,
	WaitingToStart                           = 1,
	EndOfZone                                = 2,
	EnteringZone                             = 3,
	LeavingZone                              = 4,
	Invalid                                  = 5,
	EFortGameplayState_MAX                   = 6,
};

// Enum FortniteGame.EFortCombatEvents
// NumValues: 0x001E
enum class EFortCombatEvents : uint8
{
	HuskFollowing                            = 0,
	SmasherFollowing                         = 1,
	TrollFollowing                           = 2,
	FlingerFollowing                         = 3,
	TakerFollowing                           = 4,
	HuskCombatNearby                         = 5,
	SmasherCombatNearby                      = 6,
	TrollCombatNearby                        = 7,
	FlingerCombatNearby                      = 8,
	TakerCombatNearby                        = 9,
	PlayerTakeDamage                         = 10,
	PlayerHealth                             = 11,
	PlayerLookAtEnemy                        = 12,
	PlayerDamageEnemy                        = 13,
	PlayerKilledEnemy                        = 14,
	AtlasTakeDamage                          = 15,
	AtlasHealth                              = 16,
	AtlasDestroyed                           = 17,
	TrapFiring                               = 18,
	BuildingTakeDamage                       = 19,
	FoodHealingPotential                     = 20,
	PlayerAmmo                               = 21,
	EnemiesNear                              = 22,
	PlayerMovement                           = 23,
	BuildingDamagedNearObjective             = 24,
	TrapDamageEnemy                          = 25,
	ObjectivePathCost                        = 26,
	PlayerPathCost                           = 27,
	Max_None                                 = 28,
	EFortCombatEvents_MAX                    = 29,
};

// Enum FortniteGame.EBuildingHighlightType
// NumValues: 0x0006
enum class EBuildingHighlightType : uint8
{
	Primary                                  = 0,
	Interact                                 = 1,
	WillBeDestroyed                          = 2,
	Quest                                    = 3,
	MAX_None                                 = 4,
	EBuildingHighlightType_MAX               = 5,
};

// Enum FortniteGame.EFortPawnStasisMode
// NumValues: 0x0005
enum class EFortPawnStasisMode : uint8
{
	None                                     = 0,
	NoMovement                               = 1,
	NoMovementOrTurning                      = 2,
	NoMovementOrFalling                      = 3,
	EFortPawnStasisMode_MAX                  = 4,
};

// Enum FortniteGame.EFortJumpStaminaCost
// NumValues: 0x0005
enum class EFortJumpStaminaCost : uint8
{
	None                                     = 0,
	Trigger                                  = 1,
	SprintTrigger                            = 2,
	SprintAir                                = 3,
	EFortJumpStaminaCost_MAX                 = 4,
};

// Enum FortniteGame.EFortPCTutorialCompletedState
// NumValues: 0x0004
enum class EFortPCTutorialCompletedState : uint8
{
	Unknown                                  = 0,
	Incomplete                               = 1,
	Complete                                 = 2,
	EFortPCTutorialCompletedState_MAX        = 3,
};

// Enum FortniteGame.EFortCompletionResult
// NumValues: 0x0005
enum class EFortCompletionResult : uint8
{
	Win                                      = 0,
	Loss                                     = 1,
	Draw                                     = 2,
	Undefined                                = 3,
	EFortCompletionResult_MAX                = 4,
};

// Enum FortniteGame.EFortRewardActivityType
// NumValues: 0x0006
enum class EFortRewardActivityType : uint8
{
	General                                  = 0,
	MissionPrimary                           = 1,
	MissionSecondary                         = 2,
	AccountLevelUp                           = 3,
	Max_None                                 = 4,
	EFortRewardActivityType_MAX              = 5,
};

// Enum FortniteGame.EFortDelayedQuickBarAction
// NumValues: 0x0005
enum class EFortDelayedQuickBarAction : uint8
{
	Add                                      = 0,
	Remove                                   = 1,
	Replace                                  = 2,
	Invalid                                  = 3,
	EFortDelayedQuickBarAction_MAX           = 4,
};

// Enum FortniteGame.EFortElementalDamageType
// NumValues: 0x0006
enum class EFortElementalDamageType : uint8
{
	None                                     = 0,
	Fire                                     = 1,
	Ice                                      = 2,
	Lightning                                = 3,
	Energy                                   = 4,
	MAX                                      = 5,
};

// Enum FortniteGame.EFortDamageNumberType
// NumValues: 0x0008
enum class EFortDamageNumberType : uint8
{
	None                                     = 0,
	Pawn                                     = 1,
	Building                                 = 2,
	Player                                   = 3,
	Shield                                   = 4,
	Score                                    = 5,
	DBNO                                     = 6,
	EFortDamageNumberType_MAX                = 7,
};

// Enum FortniteGame.EFortCostInfoTypes
// NumValues: 0x0006
enum class EFortCostInfoTypes : uint8
{
	Placement                                = 0,
	Repair                                   = 1,
	Conversion                               = 2,
	Ability                                  = 3,
	None                                     = 4,
	EFortCostInfoTypes_MAX                   = 5,
};

// Enum FortniteGame.EFortBuildPreviewMarkerOptionalAdjustment
// NumValues: 0x0004
enum class EFortBuildPreviewMarkerOptionalAdjustment : uint8
{
	None                                     = 0,
	FreeWallPieceOnTop                       = 1,
	FreeWallPieceOnBottom                    = 2,
	EFortBuildPreviewMarkerOptionalAdjustment_MAX = 3,
};

// Enum FortniteGame.EFortIsFinalXpUpdate
// NumValues: 0x0004
enum class EFortIsFinalXpUpdate : uint8
{
	Uninitialized                            = 0,
	NotFinal                                 = 1,
	Final                                    = 2,
	EFortIsFinalXpUpdate_MAX                 = 3,
};

// Enum FortniteGame.EFortTeam
// NumValues: 0x0006
enum class EFortTeam : uint8
{
	Spectator                                = 0,
	HumanCampaign                            = 1,
	Monster                                  = 2,
	HumanPvP_Team1                           = 3,
	HumanPvP_Team2                           = 4,
	MAX                                      = 255,
};

// Enum FortniteGame.EFortVoteArbitratorType
// NumValues: 0x0004
enum class EFortVoteArbitratorType : uint8
{
	Invalid                                  = 0,
	Majority                                 = 1,
	Unanimous                                = 2,
	EFortVoteArbitratorType_MAX              = 3,
};

// Enum FortniteGame.EAthenaGamePhase
// NumValues: 0x0008
enum class EAthenaGamePhase : uint8
{
	None                                     = 0,
	Setup                                    = 1,
	Warmup                                   = 2,
	Aircraft                                 = 3,
	SafeZones                                = 4,
	EndGame                                  = 5,
	Count                                    = 6,
	EAthenaGamePhase_MAX                     = 7,
};

// Enum FortniteGame.EAthenaGamePhaseStep
// NumValues: 0x000E
enum class EAthenaGamePhaseStep : uint8
{
	None                                     = 0,
	Setup                                    = 1,
	Warmup                                   = 2,
	GetReady                                 = 3,
	BusLocked                                = 4,
	BusFlying                                = 5,
	StormForming                             = 6,
	StormHolding                             = 7,
	StormShrinking                           = 8,
	Countdown                                = 9,
	FinalCountdown                           = 10,
	EndGame                                  = 11,
	Count                                    = 12,
	EAthenaGamePhaseStep_MAX                 = 13,
};

// Enum FortniteGame.EAthenaStormCapState
// NumValues: 0x0005
enum class EAthenaStormCapState : uint8
{
	None                                     = 0,
	Clear                                    = 1,
	Warning                                  = 2,
	Damaging                                 = 3,
	EAthenaStormCapState_MAX                 = 4,
};

// Enum FortniteGame.EAthenaGameMsgType
// NumValues: 0x0010
enum class EAthenaGameMsgType : uint8
{
	None                                     = 0,
	DefaultIntro                             = 1,
	DefaultMessage                           = 2,
	DefaultCriticalMessage                   = 3,
	CommIntro                                = 4,
	CommMessage                              = 5,
	CommCriticalMessage                      = 6,
	CornerIntro                              = 7,
	CornerMessage                            = 8,
	CornerCriticalMessage                    = 9,
	RespawnTurningOffWarning                 = 10,
	RespawnOffWarning                        = 11,
	CenterMessage                            = 12,
	CenterImportantMessage                   = 13,
	CenterCriticalMessage                    = 14,
	EAthenaGameMsgType_MAX                   = 15,
};

// Enum FortniteGame.EWaveRules
// NumValues: 0x0006
enum class EWaveRules : uint8
{
	KillAllEnemies                           = 0,
	Timed                                    = 1,
	KillPoints                               = 2,
	KillSpecificEnemy                        = 3,
	Mission                                  = 4,
	EWaveRules_MAX                           = 5,
};

// Enum FortniteGame.EAthenaAerialPhase
// NumValues: 0x0007
enum class EAthenaAerialPhase : uint8
{
	None                                     = 0,
	BusCantExit                              = 1,
	BusCanExit                               = 2,
	BusCanExitEndZebulonDrone                = 3,
	Skydiving                                = 4,
	Parachuting                              = 5,
	EAthenaAerialPhase_MAX                   = 6,
};

// Enum FortniteGame.EFortPlaylistType
// NumValues: 0x0005
enum class EFortPlaylistType : uint8
{
	Default                                  = 0,
	Playground                               = 1,
	Creative                                 = 2,
	Creative_LTM                             = 3,
	EFortPlaylistType_MAX                    = 4,
};

// Enum FortniteGame.ESpawnMachineState
// NumValues: 0x0006
enum class ESpawnMachineState : uint8
{
	Default                                  = 0,
	WaitingForUse                            = 1,
	Active                                   = 2,
	Complete                                 = 3,
	OnCooldown                               = 4,
	ESpawnMachineState_MAX                   = 5,
};

// Enum FortniteGame.ESafeZoneStartUp
// NumValues: 0x0004
enum class ESafeZoneStartUp : uint8
{
	UseDefaultGameBehavior                   = 0,
	StartsWithWarmUp                         = 1,
	StartsWithAirCraft                       = 2,
	ESafeZoneStartUp_MAX                     = 3,
};

// Enum FortniteGame.EEventTournamentRound
// NumValues: 0x0005
enum class EEventTournamentRound : uint8
{
	Qualifiers                               = 0,
	SemiFinals                               = 1,
	Finals                                   = 2,
	Unknown                                  = 3,
	EEventTournamentRound_MAX                = 4,
};

// Enum FortniteGame.EFriendlyFireType
// NumValues: 0x0003
enum class EFriendlyFireType : uint8
{
	Off                                      = 0,
	On                                       = 1,
	EFriendlyFireType_MAX                    = 2,
};

// Enum FortniteGame.EAirCraftBehavior
// NumValues: 0x0005
enum class EAirCraftBehavior : uint8
{
	Default                                  = 0,
	OpposingAirCraftForEachTeam              = 1,
	FlyTowardFirstCircleCenter               = 2,
	NoAircraft                               = 3,
	EAirCraftBehavior_MAX                    = 4,
};

// Enum FortniteGame.EFortReportDayPhase
// NumValues: 0x0005
enum class EFortReportDayPhase : uint8
{
	Dawn                                     = 0,
	Dusk                                     = 1,
	ZoneFinished                             = 2,
	PlayerLogout                             = 3,
	EFortReportDayPhase_MAX                  = 4,
};

// Enum FortniteGame.EFortPvPGameResult
// NumValues: 0x0004
enum class EFortPvPGameResult : uint8
{
	Win                                      = 0,
	Loss                                     = 1,
	Draw                                     = 2,
	EFortPvPGameResult_MAX                   = 3,
};

// Enum FortniteGame.EEndOfMatchReason
// NumValues: 0x0007
enum class EEndOfMatchReason : uint8
{
	LastManStanding                          = 0,
	ScoreReached                             = 1,
	TimeRanOut                               = 2,
	WinEventOccurred                         = 3,
	AllLoggedOut                             = 4,
	AllEliminated                            = 5,
	EEndOfMatchReason_MAX                    = 6,
};

// Enum FortniteGame.EDeathCause
// NumValues: 0x0032
enum class EDeathCause : uint8
{
	OutsideSafeZone                          = 0,
	FallDamage                               = 1,
	Pistol                                   = 2,
	Shotgun                                  = 3,
	Rifle                                    = 4,
	SMG                                      = 5,
	Sniper                                   = 6,
	SniperNoScope                            = 7,
	Melee                                    = 8,
	InfinityBlade                            = 9,
	Grenade                                  = 10,
	C4                                       = 11,
	GrenadeLauncher                          = 12,
	RocketLauncher                           = 13,
	Minigun                                  = 14,
	Bow                                      = 15,
	Trap                                     = 16,
	DBNOTimeout                              = 17,
	Banhammer                                = 18,
	RemovedFromGame                          = 19,
	MassiveMelee                             = 20,
	MassiveDiveBomb                          = 21,
	MassiveRanged                            = 22,
	Vehicle                                  = 23,
	ShoppingCart                             = 24,
	ATK                                      = 25,
	QuadCrasher                              = 26,
	Biplane                                  = 27,
	BiplaneGun                               = 28,
	LMG                                      = 29,
	GasGrenade                               = 30,
	InstantEnvironmental                     = 31,
	Turret                                   = 32,
	ShipCannon                               = 33,
	Cube                                     = 34,
	Balloon                                  = 35,
	StormSurge                               = 36,
	Lava                                     = 37,
	BasicFiend                               = 38,
	EliteFiend                               = 39,
	RangedFiend                              = 40,
	BasicBrute                               = 41,
	EliteBrute                               = 42,
	MegaBrute                                = 43,
	SilentSwitchingToSpectate                = 44,
	LoggedOut                                = 45,
	TeamSwitchSuicide                        = 46,
	WonMatch                                 = 47,
	Unspecified                              = 48,
	EDeathCause_MAX                          = 49,
};

// Enum FortniteGame.EFortVolumeType
// NumValues: 0x0006
enum class EFortVolumeType : uint8
{
	None                                     = 0,
	Island                                   = 1,
	Featured                                 = 2,
	Prefab                                   = 3,
	Hub                                      = 4,
	EFortVolumeType_MAX                      = 5,
};

// Enum FortniteGame.EFortBuildingType
// NumValues: 0x000E
enum class EFortBuildingType : uint8
{
	Wall                                     = 0,
	Floor                                    = 1,
	Corner                                   = 2,
	Deco                                     = 3,
	Prop                                     = 4,
	Stairs                                   = 5,
	Roof                                     = 6,
	Pillar                                   = 7,
	SpawnedItem                              = 8,
	Container                                = 9,
	Trap                                     = 10,
	GenericCenterCellActor                   = 11,
	None                                     = 12,
	EFortBuildingType_MAX                    = 13,
};

// Enum FortniteGame.EForceKickAfterDeathMode
// NumValues: 0x0004
enum class EForceKickAfterDeathMode : uint8
{
	Disabled                                 = 0,
	KickAll                                  = 1,
	KickPrivate                              = 2,
	EForceKickAfterDeathMode_MAX             = 3,
};

// Enum FortniteGame.ECapturePointState
// NumValues: 0x0007
enum class ECapturePointState : uint8
{
	Idle                                     = 0,
	Capturing                                = 1,
	Contested                                = 2,
	Resetting                                = 3,
	Captured                                 = 4,
	Reset                                    = 5,
	ECapturePointState_MAX                   = 6,
};

// Enum FortniteGame.EBackupSaveState
// NumValues: 0x0004
enum class EBackupSaveState : uint8
{
	Ready                                    = 0,
	InProgress                               = 1,
	OnCooldown                               = 2,
	EBackupSaveState_MAX                     = 3,
};

// Enum FortniteGame.EPropertyOverrideTargetType
// NumValues: 0x0004
enum class EPropertyOverrideTargetType : uint8
{
	None                                     = 0,
	Default                                  = 1,
	ImmutableTarget                          = 2,
	EPropertyOverrideTargetType_MAX          = 3,
};

// Enum FortniteGame.EHudVisibilityState
// NumValues: 0x0005
enum class EHudVisibilityState : uint8
{
	FullyVisible                             = 0,
	FullyHidden                              = 1,
	GameOnly                                 = 2,
	ReplayOnly                               = 3,
	MAX                                      = 4,
};

// Enum FortniteGame.EFortReplayEventType
// NumValues: 0x0005
enum class EFortReplayEventType : uint8
{
	Elimination                              = 0,
	Eliminated                               = 1,
	DBNO                                     = 2,
	UserPlaced                               = 3,
	MAX                                      = 4,
};

// Enum FortniteGame.ESpectatorCameraType
// NumValues: 0x000A
enum class ESpectatorCameraType : uint8
{
	ThirdPerson                              = 0,
	DroneFree                                = 1,
	Gameplay                                 = 2,
	ReverseShot                              = 3,
	FollowShot                               = 4,
	DroneFollow                              = 5,
	DroneAttach                              = 6,
	BattleMap                                = 7,
	ARDrone                                  = 8,
	MAX                                      = 9,
};

// Enum FortniteGame.ECaptureState
// NumValues: 0x0007
enum class ECaptureState : uint8
{
	CS_Idle                                  = 0,
	CS_Capturing                             = 1,
	CS_Contested                             = 2,
	CS_Resetting                             = 3,
	CS_Captured                              = 4,
	CS_Reset                                 = 5,
	CS_MAX                                   = 6,
};

// Enum FortniteGame.EFOBIOStatus
// NumValues: 0x0004
enum class EFOBIOStatus : uint8
{
	Saving                                   = 0,
	Loading                                  = 1,
	Free                                     = 2,
	EFOBIOStatus_MAX                         = 3,
};

// Enum FortniteGame.EFortMinigameState
// NumValues: 0x000C
enum class EFortMinigameState : uint8
{
	PreGame                                  = 0,
	Setup                                    = 1,
	Transitioning                            = 2,
	WaitingForCameras                        = 3,
	Warmup                                   = 4,
	InProgress                               = 5,
	PostGameTimeDilation                     = 6,
	PostRoundEnd                             = 7,
	PostGameEnd                              = 8,
	PostGameAbandon                          = 9,
	PostGameReset                            = 10,
	EFortMinigameState_MAX                   = 11,
};

// Enum FortniteGame.ECollectionBookRewardType
// NumValues: 0x0005
enum class ECollectionBookRewardType : uint8
{
	Uninitialized                            = 0,
	Book                                     = 1,
	Page                                     = 2,
	Section                                  = 3,
	ECollectionBookRewardType_MAX            = 4,
};

// Enum FortniteGame.EFortPrototypingStatus
// NumValues: 0x0004
enum class EFortPrototypingStatus : uint8
{
	Unknown                                  = 0,
	Disabled                                 = 1,
	Enabled                                  = 2,
	EFortPrototypingStatus_MAX               = 3,
};

// Enum FortniteGame.EFortQuestObjectiveStatEvent
// NumValues: 0x0047
enum class EFortQuestObjectiveStatEvent : uint8
{
	Kill                                     = 0,
	TeamKill                                 = 1,
	KillContribution                         = 2,
	Damage                                   = 3,
	Damage_OLD                               = 4,
	Visit                                    = 5,
	Land                                     = 6,
	Emote                                    = 7,
	Spray                                    = 8,
	Toy                                      = 9,
	Build                                    = 10,
	BuildingEdit                             = 11,
	BuildingRepair                           = 12,
	BuildingUpgrade                          = 13,
	PlaceTrap                                = 14,
	Complete                                 = 15,
	Craft                                    = 16,
	Collect                                  = 17,
	Win                                      = 18,
	Interact                                 = 19,
	TeamInteract                             = 20,
	Destroy                                  = 21,
	Ability                                  = 22,
	WaveComplete                             = 23,
	Custom                                   = 24,
	ComplexCustom                            = 25,
	Client                                   = 26,
	AthenaRank                               = 27,
	AthenaOutlive                            = 28,
	RevivePlayer                             = 29,
	Heal                                     = 30,
	EarnVehicleTrickPoints                   = 31,
	VehicleAirTime                           = 32,
	TimeElapsed                              = 33,
	NumGameplayEvents                        = 34,
	Acquire                                  = 35,
	Consume                                  = 36,
	OpenCardPack                             = 37,
	PurchaseCardPack                         = 38,
	Convert                                  = 39,
	Upgrade                                  = 40,
	UpgradeRarity                            = 41,
	QuestComplete                            = 42,
	AssignWorker                             = 43,
	CollectExpedition                        = 44,
	CollectSuccessfulExpedition              = 45,
	LevelUpCollectionBook                    = 46,
	LevelUpAthenaSeason                      = 47,
	LevelUpBattlePass                        = 48,
	GainAthenaSeasonXp                       = 49,
	HasItem                                  = 50,
	HasAccumulatedItem                       = 51,
	SlotInCollection                         = 52,
	AlterationRespec                         = 53,
	AlterationUpgrade                        = 54,
	HasCompletedQuest                        = 55,
	HasAssignedWorker                        = 56,
	HasUpgraded                              = 57,
	HasConverted                             = 58,
	HasUpgradedRarity                        = 59,
	HasLeveledUpCollectionBook               = 60,
	SlotHeroInLoadout                        = 61,
	HasLeveledUpAthenaSeason                 = 62,
	HasLeveledUpBattlePass                   = 63,
	HasGainedAthenaSeasonXp                  = 64,
	MinigameDynamicEvent                     = 65,
	MinigameComplete                         = 66,
	MinigameDeath                            = 67,
	MinigameAssist                           = 68,
	Max_None                                 = 69,
	EFortQuestObjectiveStatEvent_MAX         = 70,
};

// Enum FortniteGame.EFortMinigameEnd
// NumValues: 0x0004
enum class EFortMinigameEnd : uint8
{
	AbandonGame                              = 0,
	EndGame                                  = 1,
	EndRound                                 = 2,
	EFortMinigameEnd_MAX                     = 3,
};

// Enum FortniteGame.EFortObjectiveStatus
// NumValues: 0x0007
enum class EFortObjectiveStatus : uint8
{
	Created                                  = 0,
	InProgress                               = 1,
	Succeeded                                = 2,
	Failed                                   = 3,
	NeutralCompletion                        = 4,
	Max_None                                 = 5,
	EFortObjectiveStatus_MAX                 = 6,
};

// Enum FortniteGame.EFortMissionVisibilityOverride
// NumValues: 0x0004
enum class EFortMissionVisibilityOverride : uint8
{
	Visible                                  = 0,
	Invisible                                = 1,
	Max_None                                 = 2,
	EFortMissionVisibilityOverride_MAX       = 3,
};

// Enum FortniteGame.EMatchmakingCompleteResult
// NumValues: 0x0009
enum class EMatchmakingCompleteResult : uint8
{
	NotStarted                               = 0,
	UpdateNeeded                             = 1,
	OutpostNotFound                          = 2,
	Cancelled                                = 3,
	NoResults                                = 4,
	Failure                                  = 5,
	CreateFailure                            = 6,
	Success                                  = 7,
	EMatchmakingCompleteResult_MAX           = 8,
};

// Enum FortniteGame.EMatchmakingState
// NumValues: 0x000F
enum class EMatchmakingState : uint8
{
	NotMatchmaking                           = 0,
	CancelingMatchmaking                     = 1,
	ReleasingLock                            = 2,
	AcquiringLock                            = 3,
	LockAcquistionFailure                    = 4,
	FindingEmptyServer                       = 5,
	FindingExistingSession                   = 6,
	TestingEmptyServers                      = 7,
	TestingExistingSessions                  = 8,
	JoiningExistingSession                   = 9,
	NoMatchesAvailable                       = 10,
	CleaningUpExisting                       = 11,
	HandlingFailure                          = 12,
	JoinSuccess                              = 13,
	EMatchmakingState_MAX                    = 14,
};

// Enum FortniteGame.EAthenaPartyMemberReadyType
// NumValues: 0x0005
enum class EAthenaPartyMemberReadyType : uint8
{
	Ready                                    = 0,
	NotReady                                 = 1,
	Playing                                  = 2,
	WatchingReplay                           = 3,
	EAthenaPartyMemberReadyType_MAX          = 4,
};

// Enum FortniteGame.EFortFriendRequestStatus
// NumValues: 0x0005
enum class EFortFriendRequestStatus : uint8
{
	None                                     = 0,
	Accepted                                 = 1,
	PendingReceived                          = 2,
	PendingSent                              = 3,
	EFortFriendRequestStatus_MAX             = 4,
};

// Enum FortniteGame.EFortPartyMemberLocation
// NumValues: 0x0009
enum class EFortPartyMemberLocation : uint8
{
	PreLobby                                 = 0,
	ConnectingToLobby                        = 1,
	Lobby                                    = 2,
	JoiningGame                              = 3,
	ProcessingRejoin                         = 4,
	InGame                                   = 5,
	WatchingReplay                           = 6,
	ReturningToFrontEnd                      = 7,
	EFortPartyMemberLocation_MAX             = 8,
};

// Enum FortniteGame.EFortPartyState
// NumValues: 0x000B
enum class EFortPartyState : uint8
{
	Undetermined                             = 0,
	WorldView                                = 1,
	TheaterView                              = 2,
	Matchmaking                              = 3,
	PostMatchmaking                          = 4,
	ReturningToFrontEnd                      = 5,
	BattleRoyaleView                         = 6,
	BattleRoyalePreloading                   = 7,
	BattleRoyaleMatchmaking                  = 8,
	BattleRoyalePostMatchmaking              = 9,
	EFortPartyState_MAX                      = 10,
};

// Enum FortniteGame.EFortPartyMemberDisplayState
// NumValues: 0x0004
enum class EFortPartyMemberDisplayState : uint8
{
	Open                                     = 0,
	Connecting                               = 1,
	Connected                                = 2,
	Max                                      = 3,
};

// Enum FortniteGame.EFortRuntimeOptionTabState
// NumValues: 0x0004
enum class EFortRuntimeOptionTabState : uint8
{
	Default                                  = 0,
	Disabled                                 = 1,
	Hidden                                   = 2,
	EFortRuntimeOptionTabState_MAX           = 3,
};

// Enum FortniteGame.ENewsExternalURLMode
// NumValues: 0x0004
enum class ENewsExternalURLMode : uint8
{
	PatchNotes                               = 0,
	UpdateNotes                              = 1,
	MoreInformation                          = 2,
	ENewsExternalURLMode_MAX                 = 3,
};

// Enum FortniteGame.ESpectateBlendEasing
// NumValues: 0x0003
enum class ESpectateBlendEasing : uint8
{
	Linear                                   = 0,
	EaseOutQuad                              = 1,
	ESpectateBlendEasing_MAX                 = 2,
};

// Enum FortniteGame.EFortSpectatorBlendType
// NumValues: 0x0004
enum class EFortSpectatorBlendType : uint8
{
	None                                     = 0,
	Orbit                                    = 1,
	Default                                  = 2,
	EFortSpectatorBlendType_MAX              = 3,
};

// Enum FortniteGame.EThirdPersonAutoFollowMode
// NumValues: 0x0004
enum class EThirdPersonAutoFollowMode : uint8
{
	Off                                      = 0,
	Auto                                     = 1,
	Lazy                                     = 2,
	EThirdPersonAutoFollowMode_MAX           = 3,
};

// Enum FortniteGame.EPlayEventType
// NumValues: 0x0009
enum class EPlayEventType : uint32
{
	None                                     = 0,
	TeamFlight                               = 1,
	Zone                                     = 2,
	Elimination                              = 3,
	PlayerMoves                              = 4,
	SinglePlayerMove                         = 5,
	ActorsPosition                           = 6,
	GameHighlights                           = 7,
	EPlayEventType_MAX                       = 8,
};

// Enum FortniteGame.EFortPlayerSurveyAnswerContainerChangeReason
// NumValues: 0x0004
enum class EFortPlayerSurveyAnswerContainerChangeReason : uint8
{
	AnswerChange                             = 0,
	QuestionChange                           = 1,
	ProxyChange                              = 2,
	EFortPlayerSurveyAnswerContainerChangeReason_MAX = 3,
};

// Enum FortniteGame.EFortPlayerSurveyFinishReason
// NumValues: 0x0004
enum class EFortPlayerSurveyFinishReason : uint8
{
	Submitted                                = 0,
	Canceled                                 = 1,
	Disallowed                               = 2,
	EFortPlayerSurveyFinishReason_MAX        = 3,
};

// Enum FortniteGame.EFortDialogFeedbackType
// NumValues: 0x0005
enum class EFortDialogFeedbackType : uint8
{
	FriendRequestSent                        = 0,
	FriendRequestReceived                    = 1,
	FriendRequestAccepted                    = 2,
	Default                                  = 3,
	EFortDialogFeedbackType_MAX              = 4,
};

// Enum FortniteGame.EHitTraceRule
// NumValues: 0x0004
enum class EHitTraceRule : uint8
{
	Visibility                               = 0,
	Terrain                                  = 1,
	None                                     = 2,
	EHitTraceRule_MAX                        = 3,
};

// Enum FortniteGame.ETransformationType
// NumValues: 0x0005
enum class ETransformationType : uint8
{
	Translation                              = 0,
	Rotation                                 = 1,
	Scale                                    = 2,
	None                                     = 3,
	ETransformationType_MAX                  = 4,
};

// Enum FortniteGame.EScaleAxis
// NumValues: 0x0005
enum class EScaleAxis : uint8
{
	All                                      = 0,
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 3,
	EScaleAxis_MAX                           = 4,
};

// Enum FortniteGame.ESelectionProperty
// NumValues: 0x0005
enum class ESelectionProperty : uint8
{
	SingleObject                             = 0,
	MultipleObjects                          = 1,
	MultipleObjectsMoveOnGrid                = 2,
	None                                     = 3,
	ESelectionProperty_MAX                   = 4,
};

// Enum FortniteGame.EDualWeaponHand
// NumValues: 0x0003
enum class EDualWeaponHand : uint8
{
	LEFT                                     = 0,
	RIGHT                                    = 1,
	MAX                                      = 2,
};

// Enum FortniteGame.EFortEncounterDirection
// NumValues: 0x000A
enum class EFortEncounterDirection : uint8
{
	North                                    = 0,
	NorthEast                                = 1,
	East                                     = 2,
	SouthEast                                = 3,
	South                                    = 4,
	SouthWest                                = 5,
	West                                     = 6,
	NorthWest                                = 7,
	Max_None                                 = 8,
	EFortEncounterDirection_MAX              = 9,
};

// Enum FortniteGame.EItemWrapMaterialType
// NumValues: 0x0004
enum class EItemWrapMaterialType : uint8
{
	WeaponWrap                               = 0,
	VehicleWrap_Opaque                       = 1,
	VehicleWrap_Masked                       = 2,
	EItemWrapMaterialType_MAX                = 3,
};

// Enum FortniteGame.EAIHotSpotAssignmentFilter
// NumValues: 0x0004
enum class EAIHotSpotAssignmentFilter : uint8
{
	All                                      = 0,
	WithSlots                                = 1,
	WaitingList                              = 2,
	EAIHotSpotAssignmentFilter_MAX           = 3,
};

// Enum FortniteGame.EAIHotSpotSlotFilter
// NumValues: 0x0004
enum class EAIHotSpotSlotFilter : uint8
{
	All                                      = 0,
	AvailableOnly                            = 1,
	UnavailableOnly                          = 2,
	EAIHotSpotSlotFilter_MAX                 = 3,
};

// Enum FortniteGame.EAIHotSpotSlot
// NumValues: 0x0006
enum class EAIHotSpotSlot : uint8
{
	Free                                     = 0,
	Claimed                                  = 1,
	Occupied                                 = 2,
	Blocked                                  = 3,
	Disabled                                 = 4,
	EAIHotSpotSlot_MAX                       = 5,
};

// Enum FortniteGame.EBoundingBoxSlotDirectionCalculation
// NumValues: 0x0005
enum class EBoundingBoxSlotDirectionCalculation : uint8
{
	Auto                                     = 0,
	FaceWall                                 = 1,
	FaceAwayFromWall                         = 2,
	FaceCenter                               = 3,
	EBoundingBoxSlotDirectionCalculation_MAX = 4,
};

// Enum FortniteGame.EBarrierFlagState
// NumValues: 0x0003
enum class EBarrierFlagState : uint8
{
	FlagUp                                   = 0,
	FlagDown                                 = 1,
	EBarrierFlagState_MAX                    = 2,
};

// Enum FortniteGame.EBarrierState
// NumValues: 0x0004
enum class EBarrierState : uint8
{
	BarrierUp                                = 0,
	BarrierComingDown                        = 1,
	BarrierDown                              = 2,
	EBarrierState_MAX                        = 3,
};

// Enum FortniteGame.EAthenaBroadcastKillFeedEntryType
// NumValues: 0x0007
enum class EAthenaBroadcastKillFeedEntryType : uint8
{
	Elimination                              = 0,
	Storm                                    = 1,
	FallDamage                               = 2,
	Explosion                                = 3,
	DBNO                                     = 4,
	Revive                                   = 5,
	EAthenaBroadcastKillFeedEntryType_MAX    = 6,
};

// Enum FortniteGame.ECapturePointUnlockRules
// NumValues: 0x0004
enum class ECapturePointUnlockRules : uint8
{
	Reset                                    = 0,
	MaintainState                            = 1,
	ResetDeactivate                          = 2,
	ECapturePointUnlockRules_MAX             = 3,
};

// Enum FortniteGame.EContentionRuleType
// NumValues: 0x0003
enum class EContentionRuleType : uint8
{
	MajorityWins                             = 0,
	OneTeamOnlyWins                          = 1,
	EContentionRuleType_MAX                  = 2,
};

// Enum FortniteGame.EEventTokenType
// NumValues: 0x0003
enum class EEventTokenType : uint8
{
	Invite                                   = 0,
	Creation                                 = 1,
	EEventTokenType_MAX                      = 2,
};

// Enum FortniteGame.EGoosePickupState
// NumValues: 0x0006
enum class EGoosePickupState : uint8
{
	None                                     = 0,
	Falling                                  = 1,
	Deployed                                 = 2,
	ImpactedByPlane                          = 3,
	DeployTimerUp                            = 4,
	EGoosePickupState_MAX                    = 5,
};

// Enum FortniteGame.EItemWrapSectionNames
// NumValues: 0x0021
enum class EItemWrapSectionNames : uint8
{
	Section_0                                = 0,
	Section_1                                = 1,
	Section_2                                = 2,
	Section_3                                = 3,
	Section_4                                = 4,
	Section_5                                = 5,
	Section_6                                = 6,
	Section_7                                = 7,
	Section_8                                = 8,
	Section_9                                = 9,
	Section_10                               = 10,
	Section_11                               = 11,
	Section_12                               = 12,
	Section_13                               = 13,
	Section_14                               = 14,
	Section_15                               = 15,
	Section_16                               = 16,
	Section_17                               = 17,
	Section_18                               = 18,
	Section_19                               = 19,
	Section_20                               = 20,
	Section_21                               = 21,
	Section_22                               = 22,
	Section_23                               = 23,
	Section_24                               = 24,
	Section_25                               = 25,
	Section_26                               = 26,
	Section_27                               = 27,
	Section_28                               = 28,
	Section_29                               = 29,
	Section_30                               = 30,
	Section_31                               = 31,
	Section_MAX                              = 32,
};

// Enum FortniteGame.ECancelMarkerReason
// NumValues: 0x0003
enum class ECancelMarkerReason : uint32
{
	Ping                                     = 0,
	MapOrDeath                               = 1,
	ECancelMarkerReason_MAX                  = 2,
};

// Enum FortniteGame.EAthenaQuickChatFilteringType
// NumValues: 0x0009
enum class EAthenaQuickChatFilteringType : uint8
{
	AlwaysVisible                            = 0,
	ActiveMaterial                           = 1,
	FacingPickup                             = 2,
	ActiveHotbarItem                         = 3,
	ActiveHotbarItemAmmo                     = 4,
	FacingPickupOrActiveHotbarItem           = 5,
	NoWeaponEquippedRequiringAmmo            = 6,
	WeaponEquippedOfAmmoType                 = 7,
	EAthenaQuickChatFilteringType_MAX        = 8,
};

// Enum FortniteGame.EAthenaSeasonRewardTrack
// NumValues: 0x0005
enum class EAthenaSeasonRewardTrack : uint8
{
	Invalid                                  = 0,
	SeasonProgressionTrack                   = 1,
	CompendiumFreeTrack                      = 2,
	CompendiumPaidTrack                      = 3,
	EAthenaSeasonRewardTrack_MAX             = 4,
};

// Enum FortniteGame.EAthenaRewardItemType
// NumValues: 0x0004
enum class EAthenaRewardItemType : uint8
{
	Normal                                   = 0,
	HiddenReward                             = 1,
	NonExportedFakeReward                    = 2,
	EAthenaRewardItemType_MAX                = 3,
};

// Enum FortniteGame.EAthenaChallengeTabVisibility
// NumValues: 0x0003
enum class EAthenaChallengeTabVisibility : uint8
{
	Hide                                     = 0,
	ShowAlways                               = 1,
	EAthenaChallengeTabVisibility_MAX        = 2,
};

// Enum FortniteGame.EAthenaSeasonShopVisibility
// NumValues: 0x0004
enum class EAthenaSeasonShopVisibility : uint8
{
	Hide                                     = 0,
	ShowIfOffersAvailable                    = 1,
	ShowAlways                               = 2,
	EAthenaSeasonShopVisibility_MAX          = 3,
};

// Enum FortniteGame.EFortVehicleDecoType
// NumValues: 0x0005
enum class EFortVehicleDecoType : uint8
{
	Unknown                                  = 0,
	Flag                                     = 1,
	HoodOrnament                             = 2,
	Wings                                    = 3,
	EFortVehicleDecoType_MAX                 = 4,
};

// Enum FortniteGame.EAutoFrameMode
// NumValues: 0x0004
enum class EAutoFrameMode : uint8
{
	Off                                      = 0,
	ManualOverride                           = 1,
	AutoFrame                                = 2,
	EAutoFrameMode_MAX                       = 3,
};

// Enum FortniteGame.EBacchusHUDStateType
// NumValues: 0x0005
enum class EBacchusHUDStateType : uint8
{
	DoNothing                                = 0,
	Hide                                     = 1,
	Show                                     = 2,
	FallbackToDefault                        = 3,
	EBacchusHUDStateType_MAX                 = 4,
};

// Enum FortniteGame.BattleMapHoveredReason
// NumValues: 0x0004
enum class EBattleMapHoveredReason : uint32
{
	None                                     = 0,
	Mouse                                    = 1,
	Code                                     = 2,
	BattleMapHoveredReason_MAX               = 3,
};

// Enum FortniteGame.EAbilitySystemComponentCreationPolicy
// NumValues: 0x0004
enum class EAbilitySystemComponentCreationPolicy : uint8
{
	Never                                    = 0,
	Lazy                                     = 1,
	Always                                   = 2,
	EAbilitySystemComponentCreationPolicy_MAX = 3,
};

// Enum FortniteGame.EAttributeInitLevelSource
// NumValues: 0x0004
enum class EAttributeInitLevelSource : uint8
{
	WorldDifficulty                          = 0,
	PlayerBuildingSkill                      = 1,
	AthenaPlaylist                           = 2,
	EAttributeInitLevelSource_MAX            = 3,
};

// Enum FortniteGame.EDynamicBuildingPlacementType
// NumValues: 0x0004
enum class EDynamicBuildingPlacementType : uint8
{
	CountsTowardsBounds                      = 0,
	DestroyIfColliding                       = 1,
	DestroyAnythingThatCollides              = 2,
	EDynamicBuildingPlacementType_MAX        = 3,
};

// Enum FortniteGame.EUnlockRules
// NumValues: 0x0004
enum class EUnlockRules : uint8
{
	UR_Reset                                 = 0,
	UR_MaintainState                         = 1,
	UR_ResetDeactivate                       = 2,
	UR_MAX                                   = 3,
};

// Enum FortniteGame.EContentionRules
// NumValues: 0x0003
enum class EContentionRules : uint8
{
	CR_MajorityWins                          = 0,
	CR_OneTeamOnlyWins                       = 1,
	CR_MAX                                   = 2,
};

// Enum FortniteGame.EBinaryToggleValues
// NumValues: 0x0004
enum class EBinaryToggleValues : uint8
{
	BTV_Active                               = 0,
	BTV_Inactive                             = 1,
	BTV_Either                               = 2,
	BTV_MAX                                  = 3,
};

// Enum FortniteGame.EAuxIndicatorStates
// NumValues: 0x0005
enum class EAuxIndicatorStates : uint8
{
	AIS_GuidingArrow                         = 0,
	AIS_ConfirmedArrow                       = 1,
	AIS_Inactive                             = 2,
	AIS_Active                               = 3,
	AIS_MAX                                  = 4,
};

// Enum FortniteGame.EFOBFileHeaderStatus
// NumValues: 0x0004
enum class EFOBFileHeaderStatus : uint8
{
	NoExistingFile                           = 0,
	HasExistingFile                          = 1,
	UnableToDetermine                        = 2,
	EFOBFileHeaderStatus_MAX                 = 3,
};

// Enum FortniteGame.EFOBInitStatus
// NumValues: 0x0008
enum class EFOBInitStatus : uint8
{
	Successful                               = 0,
	Failure_CloudStorageDisabled             = 1,
	Failure_PreviouslyInitialized            = 2,
	Failure_DataOwner                        = 3,
	Failure_CloudStorageError                = 4,
	Failure_MissingFileName                  = 5,
	Failure_Generic                          = 6,
	EFOBInitStatus_MAX                       = 7,
};

// Enum FortniteGame.EFOBMode
// NumValues: 0x0004
enum class EFOBMode : uint8
{
	Uninitialized                            = 0,
	Creation                                 = 1,
	Deployment                               = 2,
	EFOBMode_MAX                             = 3,
};

// Enum FortniteGame.EDynamicFoundationEnabledState
// NumValues: 0x0004
enum class EDynamicFoundationEnabledState : uint8
{
	Unknown                                  = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	EDynamicFoundationEnabledState_MAX       = 3,
};

// Enum FortniteGame.EDynamicFoundationType
// NumValues: 0x0005
enum class EDynamicFoundationType : uint8
{
	Static                                   = 0,
	StartEnabled_Stationary                  = 1,
	StartEnabled_Dynamic                     = 2,
	StartDisabled                            = 3,
	EDynamicFoundationType_MAX               = 4,
};

// Enum FortniteGame.EBuildingFoundationType
// NumValues: 0x0005
enum class EBuildingFoundationType : uint8
{
	BFT_3x3                                  = 0,
	BFT_5x5                                  = 1,
	BFT_5x10                                 = 2,
	BFT_None                                 = 3,
	BFT_MAX                                  = 4,
};

// Enum FortniteGame.ESpawnMachineSubTextState
// NumValues: 0x0004
enum class ESpawnMachineSubTextState : uint8
{
	NoCards                                  = 0,
	VanInUse                                 = 1,
	None                                     = 2,
	ESpawnMachineSubTextState_MAX            = 3,
};

// Enum FortniteGame.EFortItemCollectorTrackingType
// NumValues: 0x0003
enum class EFortItemCollectorTrackingType : uint8
{
	Player                                   = 0,
	Team                                     = 1,
	EFortItemCollectorTrackingType_MAX       = 2,
};

// Enum FortniteGame.EFortItemCollectorBehavior
// NumValues: 0x0003
enum class EFortItemCollectorBehavior : uint8
{
	FirstToGoal                              = 0,
	FreeForAll                               = 1,
	EFortItemCollectorBehavior_MAX           = 2,
};

// Enum FortniteGame.EFortItemCollectorState
// NumValues: 0x0006
enum class EFortItemCollectorState : uint8
{
	CanInteract                              = 0,
	Active                                   = 1,
	Inactive                                 = 2,
	Captured                                 = 3,
	Invalid                                  = 4,
	EFortItemCollectorState_MAX              = 5,
};

// Enum FortniteGame.ELayoutRequirementStatus
// NumValues: 0x0004
enum class ELayoutRequirementStatus : uint8
{
	Inactive_Invisible                       = 0,
	Active_Invisible                         = 1,
	Active_Visible                           = 2,
	ELayoutRequirementStatus_MAX             = 3,
};

// Enum FortniteGame.EMusicTrackPlayback
// NumValues: 0x0003
enum class EMusicTrackPlayback : uint8
{
	Disabled                                 = 0,
	Enabled                                  = 1,
	EMusicTrackPlayback_MAX                  = 2,
};

// Enum FortniteGame.ERiftCosmeticState
// NumValues: 0x0006
enum class ERiftCosmeticState : uint8
{
	None                                     = 0,
	Intro                                    = 1,
	Idle                                     = 2,
	RampUp                                   = 3,
	ShouldDie                                = 4,
	ERiftCosmeticState_MAX                   = 5,
};

// Enum FortniteGame.EFortRiftSpawnSlotSelectionMode
// NumValues: 0x0003
enum class EFortRiftSpawnSlotSelectionMode : uint8
{
	Random                                   = 0,
	BestScore                                = 1,
	EFortRiftSpawnSlotSelectionMode_MAX      = 2,
};

// Enum FortniteGame.EFortRiftSlotStatus
// NumValues: 0x0004
enum class EFortRiftSlotStatus : uint8
{
	Reserved                                 = 0,
	Occupied                                 = 1,
	Max_None                                 = 2,
	EFortRiftSlotStatus_MAX                  = 3,
};

// Enum FortniteGame.EBuildingNavObstacleType
// NumValues: 0x0007
enum class EBuildingNavObstacleType : uint8
{
	UnwalkableAll                            = 0,
	UnwalkableHuskOnly                       = 1,
	SmashWhenLowHeight                       = 2,
	SmashOnlyLowHeight                       = 3,
	SmashSmasherOnly                         = 4,
	SmashAll                                 = 5,
	EBuildingNavObstacleType_MAX             = 6,
};

// Enum FortniteGame.EFortDamageVisualsState
// NumValues: 0x0004
enum class EFortDamageVisualsState : uint8
{
	UnDamaged                                = 0,
	DamagedAndAnimating                      = 1,
	DamagedAndStatic                         = 2,
	EFortDamageVisualsState_MAX              = 3,
};

// Enum FortniteGame.EStructuralSupportCheck
// NumValues: 0x0004
enum class EStructuralSupportCheck : uint8
{
	Stable                                   = 0,
	Unstable                                 = 1,
	Max_None                                 = 2,
	EStructuralSupportCheck_MAX              = 3,
};

// Enum FortniteGame.ESavedSupportStatus
// NumValues: 0x0004
enum class ESavedSupportStatus : uint8
{
	UnknownState                             = 0,
	Supported                                = 1,
	UnSupported                              = 2,
	ESavedSupportStatus_MAX                  = 3,
};

// Enum FortniteGame.EPlacementType
// NumValues: 0x0004
enum class EPlacementType : uint8
{
	Free                                     = 0,
	Grid                                     = 1,
	None                                     = 2,
	EPlacementType_MAX                       = 3,
};

// Enum FortniteGame.EBuildingAttachmentSide
// NumValues: 0x0004
enum class EBuildingAttachmentSide : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Any                                      = 2,
	EBuildingAttachmentSide_MAX              = 3,
};

// Enum FortniteGame.EBuildingAttachmentSlot
// NumValues: 0x0005
enum class EBuildingAttachmentSlot : uint8
{
	SLOT_Floor                               = 0,
	SLOT_Wall                                = 1,
	SLOT_Ceiling                             = 2,
	SLOT_None                                = 3,
	SLOT_MAX                                 = 4,
};

// Enum FortniteGame.EBuildingAnim
// NumValues: 0x0008
enum class EBuildingAnim : uint8
{
	EBA_None                                 = 0,
	EBA_Building                             = 1,
	EBA_Breaking                             = 2,
	EBA_Destruction                          = 3,
	EBA_Placement                            = 4,
	EBA_DynamicLOD                           = 5,
	EBA_DynamicShrink                        = 6,
	EBA_MAX                                  = 7,
};

// Enum FortniteGame.EStructuralFloorPosition
// NumValues: 0x0003
enum class EStructuralFloorPosition : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	EStructuralFloorPosition_MAX             = 2,
};

// Enum FortniteGame.EStructuralWallPosition
// NumValues: 0x0005
enum class EStructuralWallPosition : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Front                                    = 2,
	Back                                     = 3,
	EStructuralWallPosition_MAX              = 4,
};

// Enum FortniteGame.EFortDefenderInteractionError
// NumValues: 0x0005
enum class EFortDefenderInteractionError : uint8
{
	None                                     = 0,
	Obstructed                               = 1,
	NoEditPermission                         = 2,
	UsedByAnotherPlayer                      = 3,
	EFortDefenderInteractionError_MAX        = 4,
};

// Enum FortniteGame.EFortBounceType
// NumValues: 0x0004
enum class EFortBounceType : uint8
{
	Hit                                      = 0,
	Interact                                 = 1,
	EditPlaced                               = 2,
	EFortBounceType_MAX                      = 3,
};

// Enum FortniteGame.EFortConnectivityCubeFace
// NumValues: 0x0007
enum class EFortConnectivityCubeFace : uint8
{
	Front                                    = 0,
	Left                                     = 1,
	Back                                     = 2,
	Right                                    = 3,
	Upper                                    = 4,
	Lower                                    = 5,
	MAX                                      = 6,
};

// Enum FortniteGame.EFortDecoPlacementQueryResults
// NumValues: 0x000F
enum class EFortDecoPlacementQueryResults : uint8
{
	CanAdd                                   = 0,
	ExistingTrap                             = 1,
	ExistingObject                           = 2,
	Obstructed                               = 3,
	NoLocation                               = 4,
	WrongType                                = 5,
	WrongShape                               = 6,
	BeingModified                            = 7,
	WrongTeam                                = 8,
	BlueprintFailure                         = 9,
	AbilityFailure                           = 10,
	RequiresPlayerBuildableActor             = 11,
	NoEditPermission                         = 12,
	WrongZone                                = 13,
	EFortDecoPlacementQueryResults_MAX       = 14,
};

// Enum FortniteGame.EFortStructuralGridQueryResults
// NumValues: 0x000C
enum class EFortStructuralGridQueryResults : uint8
{
	CanAdd                                   = 0,
	ExistingActor                            = 1,
	Obstructed                               = 2,
	NoStructuralSupport                      = 3,
	InvalidActor                             = 4,
	ReachedLimit                             = 5,
	NoEditPermission                         = 6,
	PatternNotPermittedByLayoutRequirement   = 7,
	ResourceTypeNotPermittedByLayoutRequirement = 8,
	BuildingAtRequirementsDisabled           = 9,
	BuildingOtherThanRequirementsDisabled    = 10,
	EFortStructuralGridQueryResults_MAX      = 11,
};

// Enum FortniteGame.EFortBuildingInitializationReason
// NumValues: 0x0009
enum class EFortBuildingInitializationReason : uint8
{
	StaticallyPlaced                         = 0,
	Spawned                                  = 1,
	Replaced                                 = 2,
	LoadedFromSave                           = 3,
	DynamicBuilderPlaced                     = 4,
	PlacementTool                            = 5,
	TrapTool                                 = 6,
	None                                     = 7,
	EFortBuildingInitializationReason_MAX    = 8,
};

// Enum FortniteGame.EFortBuildingPersistentState
// NumValues: 0x0007
enum class EFortBuildingPersistentState : uint8
{
	Default                                  = 0,
	New                                      = 1,
	Constructed                              = 2,
	Destroyed                                = 3,
	Searched                                 = 4,
	None                                     = 5,
	EFortBuildingPersistentState_MAX         = 6,
};

// Enum FortniteGame.EFortBuildingState
// NumValues: 0x0004
enum class EFortBuildingState : uint8
{
	Placement                                = 0,
	EditMode                                 = 1,
	None                                     = 2,
	EFortBuildingState_MAX                   = 3,
};

// Enum FortniteGame.EFortTextureDataSlot
// NumValues: 0x0006
enum class EFortTextureDataSlot : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tertiary                                 = 2,
	Fourth                                   = 3,
	NumSlots                                 = 4,
	EFortTextureDataSlot_MAX                 = 5,
};

// Enum FortniteGame.EFortTextureDataType
// NumValues: 0x000C
enum class EFortTextureDataType : uint8
{
	Any                                      = 0,
	OuterWall                                = 1,
	InnerWall                                = 2,
	Corner                                   = 3,
	Floor                                    = 4,
	Ceiling                                  = 5,
	Trim                                     = 6,
	Roof                                     = 7,
	Pillar                                   = 8,
	Shingle                                  = 9,
	None                                     = 10,
	EFortTextureDataType_MAX                 = 11,
};

// Enum FortniteGame.EBuildingAttachmentType
// NumValues: 0x000A
enum class EBuildingAttachmentType : uint8
{
	ATTACH_Floor                             = 0,
	ATTACH_Wall                              = 1,
	ATTACH_Ceiling                           = 2,
	ATTACH_Corner                            = 3,
	ATTACH_All                               = 4,
	ATTACH_WallThenFloor                     = 5,
	ATTACH_FloorAndStairs                    = 6,
	ATTACH_CeilingAndStairs                  = 7,
	ATTACH_None                              = 8,
	ATTACH_MAX                               = 9,
};

// Enum FortniteGame.EAccessoryColorName
// NumValues: 0x0005
enum class EAccessoryColorName : uint8
{
	EAccessoryColorName_AccessoryColor1      = 0,
	EAccessoryColorName_AccessoryColor2      = 1,
	EAccessoryColorName_AccessoryColor3      = 2,
	EAccessoryColorName_NumTypes             = 3,
	EAccessoryColorName_MAX                  = 4,
};

// Enum FortniteGame.ECustomHatType
// NumValues: 0x0007
enum class ECustomHatType : uint8
{
	ECustomHatType_None                      = 0,
	ECustomHatType_Cap                       = 1,
	ECustomHatType_Helmet                    = 2,
	ECustomHatType_Mask                      = 3,
	ECustomHatType_Hat                       = 4,
	ECustomHatType_HeadReplacement           = 5,
	ECustomHatType_MAX                       = 6,
};

// Enum FortniteGame.EClothingColorName
// NumValues: 0x0004
enum class EClothingColorName : uint8
{
	EClothingColorName_AccessoryColor1       = 0,
	EClothingColorName_AccessoryColor2       = 1,
	EClothingColorName_NumTypes              = 2,
	EClothingColorName_MAX                   = 3,
};

// Enum FortniteGame.EColorSwatchType
// NumValues: 0x0006
enum class EColorSwatchType : uint8
{
	EColorSwatchType_Skin                    = 0,
	EColorSwatchType_Hair                    = 1,
	EColorSwatchType_BodyAccessory           = 2,
	EColorSwatchType_Accessory               = 3,
	EColorSwatchType_NumTypes                = 4,
	EColorSwatchType_MAX                     = 5,
};

// Enum FortniteGame.ECharacterColorSwatchType
// NumValues: 0x0004
enum class ECharacterColorSwatchType : uint8
{
	ECharacterColorSwatchType_Skin           = 0,
	ECharacterColorSwatchType_Hair           = 1,
	ECharacterColorSwatchType_NumTypes       = 2,
	ECharacterColorSwatchType_MAX            = 3,
};

// Enum FortniteGame.EDeployableBaseConstructionStatus
// NumValues: 0x0004
enum class EDeployableBaseConstructionStatus : uint8
{
	Constructing                             = 0,
	Destroying                               = 1,
	Finished                                 = 2,
	EDeployableBaseConstructionStatus_MAX    = 3,
};

// Enum FortniteGame.EDeployableBaseBuildingState
// NumValues: 0x000A
enum class EDeployableBaseBuildingState : uint8
{
	Empty                                    = 0,
	Built                                    = 1,
	Unoccupied                               = 2,
	WaitingToBuild                           = 3,
	Building                                 = 4,
	WaitingToDestroy                         = 5,
	Destroying                               = 6,
	WaitingToReset                           = 7,
	Resetting                                = 8,
	EDeployableBaseBuildingState_MAX         = 9,
};

// Enum FortniteGame.EDeployableBaseBoxType
// NumValues: 0x0005
enum class EDeployableBaseBoxType : uint8
{
	BuildSpace                               = 0,
	SaveSpace                                = 1,
	PlotSpace                                = 2,
	NumSpaceTypes                            = 3,
	EDeployableBaseBoxType_MAX               = 4,
};

// Enum FortniteGame.EFortSharedAnimationState
// NumValues: 0x000C
enum class EFortSharedAnimationState : uint8
{
	Anim_Walk                                = 0,
	Anim_Run                                 = 1,
	Anim_Turn                                = 2,
	Anim_Attack                              = 3,
	Anim_Death                               = 4,
	Anim_Knockback                           = 5,
	Anim_FullBodyHit                         = 6,
	Anim_Pushed                              = 7,
	Anim_Dance                               = 8,
	Anim_Idle                                = 9,
	Anim_RangedAttack                        = 10,
	Anim_MAX                                 = 11,
};

// Enum FortniteGame.EFortStatDisplayType
// NumValues: 0x0006
enum class EFortStatDisplayType : uint8
{
	Category                                 = 0,
	Buff                                     = 1,
	Debuff                                   = 2,
	Neutral                                  = 3,
	DoNotDisplay                             = 4,
	EFortStatDisplayType_MAX                 = 5,
};

// Enum FortniteGame.EFortAbilityTargetSelectionUsage
// NumValues: 0x0004
enum class EFortAbilityTargetSelectionUsage : uint8
{
	BothTargetingAndCanHit                   = 0,
	OnlyTargeting                            = 1,
	OnlyCanHit                               = 2,
	EFortAbilityTargetSelectionUsage_MAX     = 3,
};

// Enum FortniteGame.EFortDirectedMovementSpace
// NumValues: 0x0005
enum class EFortDirectedMovementSpace : uint8
{
	WorldSpace                               = 0,
	ActorLocRelative                         = 1,
	ActorLocRotRelative                      = 2,
	CameraRelative                           = 3,
	EFortDirectedMovementSpace_MAX           = 4,
};

// Enum FortniteGame.EFortAbilityTargetDataPolicy
// NumValues: 0x0003
enum class EFortAbilityTargetDataPolicy : uint8
{
	ReplicateToServer                        = 0,
	SimulateOnServer                         = 1,
	EFortAbilityTargetDataPolicy_MAX         = 2,
};

// Enum FortniteGame.EFortProximityBasedGEApplicationType
// NumValues: 0x0004
enum class EFortProximityBasedGEApplicationType : uint8
{
	ApplyOnProximityPulse                    = 0,
	ApplyOnProximityTouch                    = 1,
	ApplyOnlyDuringProximityTouch            = 2,
	EFortProximityBasedGEApplicationType_MAX = 3,
};

// Enum FortniteGame.EFortDeliveryInfoBuildingActorSpecification
// NumValues: 0x0004
enum class EFortDeliveryInfoBuildingActorSpecification : uint8
{
	All                                      = 0,
	PlayerBuildable                          = 1,
	NonPlayerBuildable                       = 2,
	EFortDeliveryInfoBuildingActorSpecification_MAX = 3,
};

// Enum FortniteGame.EDespawnAIType
// NumValues: 0x0003
enum class EDespawnAIType : uint8
{
	Relevancy                                = 0,
	Distance                                 = 1,
	EDespawnAIType_MAX                       = 2,
};

// Enum FortniteGame.EFortEncounterUtilityDesire
// NumValues: 0x0006
enum class EFortEncounterUtilityDesire : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	VeryHigh                                 = 3,
	Max_None                                 = 4,
	EFortEncounterUtilityDesire_MAX          = 5,
};

// Enum FortniteGame.EFortAIDirectorFactorContribution
// NumValues: 0x0003
enum class EFortAIDirectorFactorContribution : uint8
{
	Direct                                   = 0,
	Inverse                                  = 1,
	EFortAIDirectorFactorContribution_MAX    = 2,
};

// Enum FortniteGame.EFortAIDirectorEventContribution
// NumValues: 0x0003
enum class EFortAIDirectorEventContribution : uint8
{
	Increment                                = 0,
	Set                                      = 1,
	EFortAIDirectorEventContribution_MAX     = 2,
};

// Enum FortniteGame.EFortAIWaveProgressSection
// NumValues: 0x0004
enum class EFortAIWaveProgressSection : uint8
{
	SectionOne                               = 0,
	SectionTwo                               = 1,
	Max_None                                 = 2,
	EFortAIWaveProgressSection_MAX           = 3,
};

// Enum FortniteGame.EFortEncounterState
// NumValues: 0x0008
enum class EFortEncounterState : uint8
{
	Uninitialized                            = 0,
	InitializingProperties                   = 1,
	InitializingRiftManager                  = 2,
	AwaitingActivation                       = 3,
	Active                                   = 4,
	ReplacingRifts                           = 5,
	Max_None                                 = 6,
	EFortEncounterState_MAX                  = 7,
};

// Enum FortniteGame.EFortEncounterPacingState
// NumValues: 0x0006
enum class EFortEncounterPacingState : uint8
{
	Ramp                                     = 0,
	Peak                                     = 1,
	Fade                                     = 2,
	Rest                                     = 3,
	Max_None                                 = 4,
	EFortEncounterPacingState_MAX            = 5,
};

// Enum FortniteGame.EFortEncounterSequenceResult
// NumValues: 0x0004
enum class EFortEncounterSequenceResult : uint8
{
	Success                                  = 0,
	FailedEncounterInProgress                = 1,
	Failed                                   = 2,
	EFortEncounterSequenceResult_MAX         = 3,
};

// Enum FortniteGame.EAssignmentCreationResult
// NumValues: 0x0004
enum class EAssignmentCreationResult : uint8
{
	AssignmentNotFoundOrCreated              = 0,
	AssignmentCreated                        = 1,
	AssignmentFound                          = 2,
	EAssignmentCreationResult_MAX            = 3,
};

// Enum FortniteGame.ETagGoalScoringCategory
// NumValues: 0x0004
enum class ETagGoalScoringCategory : uint8
{
	Ignore                                   = 0,
	HighInterest                             = 1,
	NumCategories                            = 2,
	ETagGoalScoringCategory_MAX              = 3,
};

// Enum FortniteGame.EFortAIPawnGender
// NumValues: 0x0004
enum class EFortAIPawnGender : uint8
{
	FAPG_Default                             = 0,
	FAPG_Female                              = 1,
	FAPG_Male                                = 2,
	FAPG_MAX                                 = 3,
};

// Enum FortniteGame.EFortAILevelRatingDisplayType
// NumValues: 0x0004
enum class EFortAILevelRatingDisplayType : uint8
{
	DisplayRatingBasedOnDifficulty           = 0,
	DisplayAIDifficultyAsRating              = 1,
	DontDisplayRating                        = 2,
	EFortAILevelRatingDisplayType_MAX        = 3,
};

// Enum FortniteGame.EFortressAIType
// NumValues: 0x0007
enum class EFortressAIType : uint8
{
	FAT_Dormant                              = 0,
	FAT_Cleaner                              = 1,
	FAT_DayWanderer                          = 2,
	FAT_NightWanderer                        = 3,
	FAT_DebugOnly                            = 4,
	FAT_Encounter                            = 5,
	FAT_MAX                                  = 6,
};

// Enum FortniteGame.ECorePerceptionTypes
// NumValues: 0x0007
enum class ECorePerceptionTypes : uint8
{
	Sight                                    = 0,
	Hearing                                  = 1,
	Damage                                   = 2,
	Touch                                    = 3,
	Team                                     = 4,
	Prediction                               = 5,
	MAX                                      = 6,
};

// Enum FortniteGame.ENavigationObstacleOverride
// NumValues: 0x0004
enum class ENavigationObstacleOverride : uint8
{
	UseMeshSettings                          = 0,
	ForceEnabled                             = 1,
	ForceDisabled                            = 2,
	ENavigationObstacleOverride_MAX          = 3,
};

// Enum FortniteGame.EFortPartialPathUsage
// NumValues: 0x0004
enum class EFortPartialPathUsage : uint8
{
	Always                                   = 0,
	OnlyGoalsOnDestructible                  = 1,
	Never                                    = 2,
	EFortPartialPathUsage_MAX                = 3,
};

// Enum FortniteGame.EHotspotTypeConfigMode
// NumValues: 0x0004
enum class EHotspotTypeConfigMode : uint8
{
	AlwaysAdd                                = 0,
	WhenNotDefined                           = 1,
	WhenNotValid                             = 2,
	EHotspotTypeConfigMode_MAX               = 3,
};

// Enum FortniteGame.EFortHotSpotPreview
// NumValues: 0x0004
enum class EFortHotSpotPreview : uint8
{
	None                                     = 0,
	Smashing                                 = 1,
	Shooting                                 = 2,
	EFortHotSpotPreview_MAX                  = 3,
};

// Enum FortniteGame.EFortHotSpotDirection
// NumValues: 0x0008
enum class EFortHotSpotDirection : uint8
{
	PositiveX                                = 0,
	NegativeX                                = 1,
	PositiveY                                = 2,
	NegativeY                                = 3,
	PositiveZ                                = 4,
	NegativeZ                                = 5,
	Any                                      = 6,
	EFortHotSpotDirection_MAX                = 7,
};

// Enum FortniteGame.EFortHotSpotSlot
// NumValues: 0x0005
enum class EFortHotSpotSlot : uint8
{
	Melee                                    = 0,
	MeleeHuge                                = 1,
	Ranged                                   = 2,
	None                                     = 3,
	EFortHotSpotSlot_MAX                     = 4,
};

// Enum FortniteGame.EBuildingFloorRailing
// NumValues: 0x0003
enum class EBuildingFloorRailing : uint8
{
	None                                     = 0,
	Balcony                                  = 1,
	EBuildingFloorRailing_MAX                = 2,
};

// Enum FortniteGame.EBuildingStairsRailing
// NumValues: 0x0004
enum class EBuildingStairsRailing : uint8
{
	None                                     = 0,
	Partial                                  = 1,
	Full                                     = 2,
	EBuildingStairsRailing_MAX               = 3,
};

// Enum FortniteGame.EBuildingWallArea
// NumValues: 0x0004
enum class EBuildingWallArea : uint8
{
	Regular                                  = 0,
	Flat                                     = 1,
	Special                                  = 2,
	EBuildingWallArea_MAX                    = 3,
};

// Enum FortniteGame.EAssignmentType
// NumValues: 0x0006
enum class EAssignmentType : uint8
{
	Invalid                                  = 0,
	Encounter                                = 1,
	World                                    = 2,
	Enemy                                    = 3,
	NumAssignmentTypes                       = 4,
	EAssignmentType_MAX                      = 5,
};

// Enum FortniteGame.EFortAILODLevel
// NumValues: 0x0007
enum class EFortAILODLevel : uint8
{
	Invalid                                  = 0,
	Lowest                                   = 1,
	Lower                                    = 2,
	BelowNormal                              = 3,
	Normal                                   = 4,
	AboveNormal                              = 5,
	MAX                                      = 6,
};

// Enum FortniteGame.EFortAnalyticsClientEngagementEventType
// NumValues: 0x0012
enum class EFortAnalyticsClientEngagementEventType : uint8
{
	None                                     = 0,
	DamageReceivedFromPlayerPawn             = 1,
	DamageDealtToPlayerPawn                  = 2,
	DamageDealtToPlayerBuild                 = 3,
	DamageDealtToOther                       = 4,
	EngagementTimeout                        = 5,
	PlayerWon                                = 6,
	PlayerDeathOnWin                         = 7,
	TeamWon                                  = 8,
	TeamLost                                 = 9,
	PlayerLost                               = 10,
	PlayerKilledPlayer                       = 11,
	PlayerFiredWeapon                        = 12,
	ManagerStopped                           = 13,
	PlayerPawnDied                           = 14,
	PlayerPawnSpawned                        = 15,
	Count                                    = 16,
	EFortAnalyticsClientEngagementEventType_MAX = 17,
};

// Enum FortniteGame.ESkydivingDirection
// NumValues: 0x0006
enum class ESkydivingDirection : uint8
{
	Center                                   = 0,
	Right                                    = 1,
	Left                                     = 2,
	Forward                                  = 3,
	Back                                     = 4,
	ESkydivingDirection_MAX                  = 5,
};

// Enum FortniteGame.EAnimRelaxedState
// NumValues: 0x0005
enum class EAnimRelaxedState : uint8
{
	None                                     = 0,
	WeaponRaised                             = 1,
	RelaxedLevel1                            = 2,
	RelaxedLevel2                            = 3,
	EAnimRelaxedState_MAX                    = 4,
};

// Enum FortniteGame.ESourceSelectionMode
// NumValues: 0x0002
enum class ESourceSelectionMode : uint8
{
	MaxDifference                            = 0,
	ESourceSelectionMode_MAX                 = 1,
};

// Enum FortniteGame.ESpeedWarpingAxisMode
// NumValues: 0x0007
enum class ESpeedWarpingAxisMode : uint8
{
	IKFootRootLocalX                         = 0,
	IKFootRootLocalY                         = 1,
	IKFootRootLocalZ                         = 2,
	WorldSpaceVectorInput                    = 3,
	ComponentSpaceVectorInput                = 4,
	ActorSpaceVectorInput                    = 5,
	ESpeedWarpingAxisMode_MAX                = 6,
};

// Enum FortniteGame.EMontageInterrupt
// NumValues: 0x0004
enum class EMontageInterrupt : uint8
{
	Any                                      = 0,
	RootMotionOnly                           = 1,
	None                                     = 2,
	EMontageInterrupt_MAX                    = 3,
};

// Enum FortniteGame.EDeimosAnimState
// NumValues: 0x000D
enum class EDeimosAnimState : uint8
{
	Idle                                     = 0,
	Running                                  = 1,
	Attack                                   = 2,
	Dance                                    = 3,
	Dying                                    = 4,
	Died                                     = 5,
	FullBodyHitReact                         = 6,
	AdditiveHitReact                         = 7,
	ActiveIdle                               = 8,
	Falling                                  = 9,
	Frozen                                   = 10,
	RangedAttack                             = 11,
	EDeimosAnimState_MAX                     = 12,
};

// Enum FortniteGame.EFortCardinalDirection
// NumValues: 0x0005
enum class EFortCardinalDirection : uint8
{
	North                                    = 0,
	East                                     = 1,
	South                                    = 2,
	West                                     = 3,
	EFortCardinalDirection_MAX               = 4,
};

// Enum FortniteGame.EPlaneDirection
// NumValues: 0x0006
enum class EPlaneDirection : uint8
{
	Center                                   = 0,
	Right                                    = 1,
	Left                                     = 2,
	Up                                       = 3,
	Down                                     = 4,
	EPlaneDirection_MAX                      = 5,
};

// Enum FortniteGame.EFortFacialAnimTypes
// NumValues: 0x0004
enum class EFortFacialAnimTypes : uint8
{
	Default                                  = 0,
	Player                                   = 1,
	Provider                                 = 2,
	Max                                      = 3,
};

// Enum FortniteGame.EWaxTokenState
// NumValues: 0x0006
enum class EWaxTokenState : uint8
{
	None                                     = 0,
	FirstSpline                              = 1,
	Interpolation                            = 2,
	LastSpline                               = 3,
	Finished                                 = 4,
	EWaxTokenState_MAX                       = 5,
};

// Enum FortniteGame.EInventorySlotType
// NumValues: 0x0008
enum class EInventorySlotType : uint8
{
	PickAxe                                  = 0,
	ShortRange                               = 1,
	MediumRange                              = 2,
	LongRange                                = 3,
	GadgetsOrSpecialWeapon                   = 4,
	HealthOrArmor                            = 5,
	MaxSlot                                  = 6,
	EInventorySlotType_MAX                   = 7,
};

// Enum FortniteGame.EStimType
// NumValues: 0x0009
enum class EStimType : uint8
{
	Seeing                                   = 0,
	Saw                                      = 1,
	Smashable                                = 2,
	Undermine                                = 3,
	Hurt                                     = 4,
	Heard                                    = 5,
	Unknown                                  = 6,
	Count                                    = 6,
	EStimType_MAX                            = 7,
};

// Enum FortniteGame.EEvasiveManeuverType
// NumValues: 0x0005
enum class EEvasiveManeuverType : uint8
{
	Crouch                                   = 0,
	Dodge                                    = 1,
	Jump                                     = 2,
	None                                     = 3,
	EEvasiveManeuverType_MAX                 = 4,
};

// Enum FortniteGame.ELootPathResult
// NumValues: 0x0004
enum class ELootPathResult : uint8
{
	PendingPathQuery                         = 0,
	ValidPath                                = 1,
	InvalidPath                              = 2,
	ELootPathResult_MAX                      = 3,
};

// Enum FortniteGame.EExecutionStatus
// NumValues: 0x0006
enum class EExecutionStatus : uint8
{
	ExecutionError                           = 0,
	ExecutionDenied                          = 1,
	ExecutionSuccess                         = 2,
	ExecutionPending                         = 3,
	ExecutionAllowed                         = 4,
	EExecutionStatus_MAX                     = 5,
};

// Enum FortniteGame.ELootElementType
// NumValues: 0x0004
enum class ELootElementType : uint8
{
	Pickup                                   = 0,
	Chest                                    = 1,
	Invalid                                  = 255,
	ELootElementType_MAX                     = 256,
};

// Enum FortniteGame.EActionState
// NumValues: 0x0007
enum class EActionState : uint8
{
	TryingToEquip                            = 0,
	EquippingItem                            = 1,
	UsingItem                                = 2,
	WaitingItemTermination                   = 3,
	ActionEndedWithNoError                   = 4,
	ActionEndedWithError                     = 5,
	EActionState_MAX                         = 6,
};

// Enum FortniteGame.EDoghouseControlMode
// NumValues: 0x0004
enum class EDoghouseControlMode : uint8
{
	GroundControls                           = 0,
	AirControls                              = 1,
	MaxCount                                 = 2,
	EDoghouseControlMode_MAX                 = 3,
};

// Enum FortniteGame.EFreelookMode
// NumValues: 0x0004
enum class EFreelookMode : uint8
{
	None                                     = 0,
	Mouse                                    = 1,
	Analog                                   = 2,
	EFreelookMode_MAX                        = 3,
};

// Enum FortniteGame.EAileronRollDirection
// NumValues: 0x0004
enum class EAileronRollDirection : uint8
{
	None                                     = 0,
	Right                                    = 1,
	Left                                     = 2,
	EAileronRollDirection_MAX                = 3,
};

// Enum FortniteGame.EExitCraftState
// NumValues: 0x0009
enum class EExitCraftState : uint8
{
	None                                     = 0,
	Spawned                                  = 1,
	Landed                                   = 2,
	SpawnBalloon                             = 3,
	GettingIntoPosition                      = 4,
	GettingIntoPosition_Simple               = 5,
	WaitingForPawns                          = 6,
	Exiting                                  = 7,
	EExitCraftState_MAX                      = 8,
};

// Enum FortniteGame.EFortExitRequirements
// NumValues: 0x0003
enum class EFortExitRequirements : uint8
{
	AnyPlayer                                = 0,
	WholeSquad                               = 1,
	EFortExitRequirements_MAX                = 2,
};

// Enum FortniteGame.EFortMutatorReturnValue
// NumValues: 0x0004
enum class EFortMutatorReturnValue : uint8
{
	Ignore                                   = 0,
	Override                                 = 1,
	OverrideReturn                           = 2,
	EFortMutatorReturnValue_MAX              = 3,
};

// Enum FortniteGame.EAshtonStoneStateType
// NumValues: 0x0004
enum class EAshtonStoneStateType : uint8
{
	NotSpawned                               = 0,
	Spawned                                  = 1,
	Captured                                 = 2,
	MAX                                      = 3,
};

// Enum FortniteGame.EAshtonStoneType
// NumValues: 0x0007
enum class EAshtonStoneType : uint8
{
	Purple                                   = 0,
	Blue                                     = 1,
	Red                                      = 2,
	Orange                                   = 3,
	Green                                    = 4,
	Yellow                                   = 5,
	MAX                                      = 6,
};

// Enum FortniteGame.EBarrierObjectiveDamageState
// NumValues: 0x000A
enum class EBarrierObjectiveDamageState : uint8
{
	Health_75                                = 0,
	Health_50                                = 1,
	Health_25                                = 2,
	Health_10                                = 3,
	Health_5                                 = 4,
	Health_4                                 = 5,
	Health_3                                 = 6,
	Health_2                                 = 7,
	Health_1                                 = 8,
	MAX                                      = 9,
};

// Enum FortniteGame.EBarrierFoodTeam
// NumValues: 0x0003
enum class EBarrierFoodTeam : uint8
{
	Burger                                   = 0,
	Tomato                                   = 1,
	MAX                                      = 2,
};

// Enum FortniteGame.EFortContextTutorialPlatform
// NumValues: 0x0004
enum class EFortContextTutorialPlatform : uint8
{
	Any                                      = 0,
	PcAndConsole                             = 1,
	Mobile                                   = 2,
	EFortContextTutorialPlatform_MAX         = 3,
};

// Enum FortniteGame.EFortContextTutorialTypes
// NumValues: 0x0020
enum class EFortContextTutorialTypes : uint8
{
	AllSeen                                  = 0,
	BattleBusPhaseStartPC                    = 1,
	BattleBusPhaseStartMobile                = 2,
	LeaveBattleBus                           = 3,
	Skydiving                                = 4,
	NearbyChestPC                            = 5,
	NearbyChestMobile                        = 6,
	NearbyLootPC                             = 7,
	NearbyLootMobile                         = 8,
	Harvest                                  = 9,
	Harvesting                               = 10,
	PickUpSmallShield                        = 11,
	PickUpMediumShield                       = 12,
	PickUpSlurpJuice                         = 13,
	PickUpChugJug                            = 14,
	UseBandage                               = 15,
	UseMedKit                                = 16,
	ReachTheEyeOfTheStorm                    = 17,
	InsideStorm                              = 18,
	LandedFarFromStructure                   = 19,
	AmmoResourceInventorySpace               = 20,
	InventoryIsFull                          = 21,
	PickupRarity                             = 22,
	AimForRoof                               = 23,
	BuildRamp                                = 24,
	BuildWall                                = 25,
	BuildCover                               = 26,
	BuildGeneric                             = 27,
	ImproveAccuracy                          = 28,
	Count                                    = 29,
	None                                     = 30,
	EFortContextTutorialTypes_MAX            = 31,
};

// Enum FortniteGame.EFortCrucibleStatSource
// NumValues: 0x0004
enum class EFortCrucibleStatSource : uint8
{
	None                                     = 0,
	Backend                                  = 1,
	CurrentSession                           = 2,
	EFortCrucibleStatSource_MAX              = 3,
};

// Enum FortniteGame.EFortCrucibleStatId
// NumValues: 0x0011
enum class EFortCrucibleStatId : uint8
{
	CourseOverall                            = 0,
	CourseSegment1                           = 1,
	CourseSegment2                           = 2,
	CourseSegment3                           = 3,
	CourseSegment4                           = 4,
	CourseSegment5                           = 5,
	Challenge1                               = 6,
	Challenge2                               = 7,
	Challenge3                               = 8,
	Challenge4                               = 9,
	Challenge5                               = 10,
	Challenge6                               = 11,
	Challenge7                               = 12,
	Challenge8                               = 13,
	Challenge9                               = 14,
	Count                                    = 15,
	EFortCrucibleStatId_MAX                  = 16,
};

// Enum FortniteGame.EFortCrucibleRunMode
// NumValues: 0x0003
enum class EFortCrucibleRunMode : uint8
{
	Legacy                                   = 0,
	New                                      = 1,
	EFortCrucibleRunMode_MAX                 = 2,
};

// Enum FortniteGame.EDBNOMutatorType
// NumValues: 0x0004
enum class EDBNOMutatorType : uint8
{
	Default                                  = 0,
	On                                       = 1,
	Off                                      = 2,
	EDBNOMutatorType_MAX                     = 3,
};

// Enum FortniteGame.EControlPointState
// NumValues: 0x0004
enum class EControlPointState : uint8
{
	None                                     = 0,
	Disabled                                 = 1,
	Enabled                                  = 2,
	EControlPointState_MAX                   = 3,
};

// Enum FortniteGame.EEnvironmentDamageFilter
// NumValues: 0x0004
enum class EEnvironmentDamageFilter : uint8
{
	Off                                      = 0,
	PlayerBuiltOnly                          = 1,
	All                                      = 2,
	EEnvironmentDamageFilter_MAX             = 3,
};

// Enum FortniteGame.EBuildingDamageTeamFilter
// NumValues: 0x0007
enum class EBuildingDamageTeamFilter : uint8
{
	Default                                  = 0,
	OwnerOnly                                = 1,
	TeamOnly                                 = 2,
	EnemyOnly                                = 3,
	EnemyAndOwnerOnly                        = 4,
	None                                     = 5,
	EBuildingDamageTeamFilter_MAX            = 6,
};

// Enum FortniteGame.EAthenaMutatorEvaluators
// NumValues: 0x0005
enum class EAthenaMutatorEvaluators : uint8
{
	NoOverride                               = 0,
	ForceOverride                            = 1,
	Add                                      = 2,
	Multiply                                 = 3,
	EAthenaMutatorEvaluators_MAX             = 4,
};

// Enum FortniteGame.EHeistExitCraftState
// NumValues: 0x0005
enum class EHeistExitCraftState : uint8
{
	None                                     = 0,
	Incoming                                 = 1,
	Spawned                                  = 2,
	Exited                                   = 3,
	EHeistExitCraftState_MAX                 = 4,
};

// Enum FortniteGame.EAthenaInventorySpawnOverride
// NumValues: 0x0005
enum class EAthenaInventorySpawnOverride : uint8
{
	NoOverride                               = 0,
	Always                                   = 1,
	IntialSpawn                              = 2,
	AircraftPhaseOnly                        = 3,
	EAthenaInventorySpawnOverride_MAX        = 4,
};

// Enum FortniteGame.EAthenaLootDropOverride
// NumValues: 0x0005
enum class EAthenaLootDropOverride : uint8
{
	NoOverride                               = 0,
	ForceDrop                                = 1,
	ForceKeep                                = 2,
	ForceDestroy                             = 3,
	EAthenaLootDropOverride_MAX              = 4,
};

// Enum FortniteGame.ERespawnRequirements
// NumValues: 0x0004
enum class ERespawnRequirements : uint8
{
	RespawnOnly                              = 0,
	NoRespawnOnly                            = 1,
	Both                                     = 2,
	ERespawnRequirements_MAX                 = 3,
};

// Enum FortniteGame.EMashDifficulty
// NumValues: 0x0004
enum class EMashDifficulty : uint8
{
	Easy                                     = 0,
	Medium                                   = 1,
	Hard                                     = 2,
	EMashDifficulty_MAX                      = 3,
};

// Enum FortniteGame.EMashScoreEvent
// NumValues: 0x000F
enum class EMashScoreEvent : uint8
{
	FiendKill                                = 0,
	BruteKill                                = 1,
	RangedKill                               = 2,
	ExplodingKill                            = 3,
	ChillKill                                = 4,
	PoisonKill                               = 5,
	GoldKill                                 = 6,
	RiftDestroyed                            = 7,
	ScoreMultiplierUsed                      = 8,
	HeadshotKill                             = 9,
	RespawnPenalty                           = 10,
	AmmoBoxOpened                            = 11,
	ChestOpened                              = 12,
	FinalBossKill                            = 13,
	MAX                                      = 14,
};

// Enum FortniteGame.EMashPhase
// NumValues: 0x0008
enum class EMashPhase : uint8
{
	NotStarted                               = 0,
	Preparation                              = 1,
	Survival                                 = 2,
	AfterMath                                = 3,
	Moving                                   = 4,
	FinalPhase                               = 5,
	FinalPhaseFullStorm                      = 6,
	MAX                                      = 7,
};

// Enum FortniteGame.EIndicatorDisplayMode
// NumValues: 0x0005
enum class EIndicatorDisplayMode : uint8
{
	Default                                  = 0,
	Always                                   = 1,
	Never                                    = 2,
	MiniMap                                  = 3,
	EIndicatorDisplayMode_MAX                = 4,
};

// Enum FortniteGame.EOmahaTeam
// NumValues: 0x0003
enum class EOmahaTeam : uint8
{
	Home                                     = 0,
	Away                                     = 1,
	MAX                                      = 2,
};

// Enum FortniteGame.EPlayerDamageHeightRatioDetectionType
// NumValues: 0x0004
enum class EPlayerDamageHeightRatioDetectionType : uint8
{
	None                                     = 0,
	FromBottom                               = 1,
	FromTop                                  = 2,
	EPlayerDamageHeightRatioDetectionType_MAX = 3,
};

// Enum FortniteGame.ESkyCapState
// NumValues: 0x0003
enum class ESkyCapState : uint8
{
	Hidden                                   = 0,
	StormStarting                            = 1,
	ESkyCapState_MAX                         = 2,
};

// Enum FortniteGame.EAthenaTODColor
// NumValues: 0x000A
enum class EAthenaTODColor : uint8
{
	NoOverride                               = 0,
	Black                                    = 1,
	White                                    = 2,
	Red                                      = 3,
	Green                                    = 4,
	Blue                                     = 5,
	Yellow                                   = 6,
	Magenta                                  = 7,
	Cyan                                     = 8,
	EAthenaTODColor_MAX                      = 9,
};

// Enum FortniteGame.EAthenaFogDensityOverride
// NumValues: 0x000D
enum class EAthenaFogDensityOverride : uint8
{
	NoOverride                               = 0,
	Fog0                                     = 1,
	Fog1                                     = 2,
	Fog2                                     = 3,
	Fog3                                     = 4,
	Fog4                                     = 5,
	Fog5                                     = 6,
	Fog6                                     = 7,
	Fog7                                     = 8,
	Fog8                                     = 9,
	Fog9                                     = 10,
	Fog10                                    = 11,
	EAthenaFogDensityOverride_MAX            = 12,
};

// Enum FortniteGame.EAthenaLightIntensityOverride
// NumValues: 0x000D
enum class EAthenaLightIntensityOverride : uint8
{
	NoOverride                               = 0,
	Intensity0                               = 1,
	Intensity1                               = 2,
	Intensity2                               = 3,
	Intensity3                               = 4,
	Intensity4                               = 5,
	Intensity5                               = 6,
	Intensity6                               = 7,
	Intensity7                               = 8,
	Intensity8                               = 9,
	Intensity9                               = 10,
	Intensity10                              = 11,
	EAthenaLightIntensityOverride_MAX        = 12,
};

// Enum FortniteGame.EAthenaTimeOfDayOverride
// NumValues: 0x001E
enum class EAthenaTimeOfDayOverride : uint8
{
	NoOverride                               = 0,
	ForceDay                                 = 1,
	ForceNight                               = 2,
	Custom                                   = 3,
	Hour0                                    = 4,
	Hour1                                    = 5,
	Hour2                                    = 6,
	Hour3                                    = 7,
	Hour4                                    = 8,
	Hour5                                    = 9,
	Hour6                                    = 10,
	Hour7                                    = 11,
	Hour8                                    = 12,
	Hour9                                    = 13,
	Hour10                                   = 14,
	Hour11                                   = 15,
	Hour12                                   = 16,
	Hour13                                   = 17,
	Hour14                                   = 18,
	Hour15                                   = 19,
	Hour16                                   = 20,
	Hour17                                   = 21,
	Hour18                                   = 22,
	Hour19                                   = 23,
	Hour20                                   = 24,
	Hour21                                   = 25,
	Hour22                                   = 26,
	Hour23                                   = 27,
	Random                                   = 28,
	EAthenaTimeOfDayOverride_MAX             = 29,
};

// Enum FortniteGame.EFortAthenaMutator_VoiceChatChannelType
// NumValues: 0x0009
enum class EFortAthenaMutator_VoiceChatChannelType : uint8
{
	Default                                  = 0,
	None                                     = 1,
	SquadOnly                                = 2,
	TeamOnly                                 = 3,
	WholeServer                              = 4,
	ScopeOnly                                = 5,
	ScopeSquadOnly                           = 6,
	ScopeTeamOnly                            = 7,
	EFortAthenaMutator_MAX                   = 8,
};

// Enum FortniteGame.EWaxState
// NumValues: 0x0006
enum class EWaxState : uint8
{
	None                                     = 0,
	SomewhatVisible                          = 1,
	ModeratelyVisible                        = 2,
	VeryVisible                              = 3,
	Undeniable                               = 4,
	EWaxState_MAX                            = 5,
};

// Enum FortniteGame.EWaxMinimapDrawMode
// NumValues: 0x0005
enum class EWaxMinimapDrawMode : uint8
{
	NoDrawing                                = 0,
	DrawCloseAndMoveOrShoot                  = 1,
	DrawMoveOrShoot                          = 2,
	DrawAlways                               = 3,
	EWaxMinimapDrawMode_MAX                  = 4,
};

// Enum FortniteGame.ECoastState
// NumValues: 0x0008
enum class ECoastState : uint8
{
	Idle                                     = 0,
	Mount                                    = 1,
	Coasting                                 = 2,
	Pedaling                                 = 3,
	PreDismount                              = 4,
	Dismount                                 = 5,
	EndCoast                                 = 6,
	ECoastState_MAX                          = 7,
};

// Enum FortniteGame.ETutorialButtonInteractionType
// NumValues: 0x0003
enum class ETutorialButtonInteractionType : uint8
{
	Click                                    = 0,
	Press                                    = 1,
	ETutorialButtonInteractionType_MAX       = 2,
};

// Enum FortniteGame.EBounceCompressionState
// NumValues: 0x0006
enum class EBounceCompressionState : uint8
{
	None                                     = 0,
	Crouching                                = 1,
	Crouched                                 = 2,
	Jumping                                  = 3,
	Recoiling                                = 4,
	EBounceCompressionState_MAX              = 5,
};

// Enum FortniteGame.ENaturalSlideState
// NumValues: 0x0005
enum class ENaturalSlideState : uint8
{
	None                                     = 0,
	Entering                                 = 1,
	InProgress                               = 2,
	Exiting                                  = 3,
	ENaturalSlideState_MAX                   = 4,
};

// Enum FortniteGame.EPowerSlideState
// NumValues: 0x0005
enum class EPowerSlideState : uint8
{
	None                                     = 0,
	Entering                                 = 1,
	InProgress                               = 2,
	Exiting                                  = 3,
	EPowerSlideState_MAX                     = 4,
};

// Enum FortniteGame.EFortFuelGadgetVisualType
// NumValues: 0x0004
enum class EFortFuelGadgetVisualType : uint8
{
	FuelMeter                                = 0,
	ChargeText                               = 1,
	Invalid                                  = 2,
	EFortFuelGadgetVisualType_MAX            = 3,
};

// Enum FortniteGame.EFortAttributeDisplay
// NumValues: 0x000B
enum class EFortAttributeDisplay : uint8
{
	BasicInt                                 = 0,
	NegativeImpliesInfiniteInt               = 1,
	BasicFloat                               = 2,
	NegativeImpliesInfiniteFloat             = 3,
	BasicString                              = 4,
	NormalizedPercentage                     = 5,
	StringArray                              = 6,
	SlateBrush                               = 7,
	DoNotDisplay                             = 8,
	None_Max                                 = 9,
	EFortAttributeDisplay_MAX                = 10,
};

// Enum FortniteGame.EBannerUsageContext
// NumValues: 0x0005
enum class EBannerUsageContext : uint8
{
	Unknown                                  = 0,
	BannerIcon                               = 1,
	PhysicalBanner                           = 2,
	Spray                                    = 3,
	EBannerUsageContext_MAX                  = 4,
};

// Enum FortniteGame.ETargetDistanceComparisonType
// NumValues: 0x0004
enum class ETargetDistanceComparisonType : uint8
{
	TwoDimensions                            = 0,
	ThreeDimensions                          = 1,
	CollisionHalfHeightMultiplier            = 2,
	ETargetDistanceComparisonType_MAX        = 3,
};

// Enum FortniteGame.ESpawnResult
// NumValues: 0x0005
enum class ESpawnResult : uint8
{
	Success                                  = 0,
	Failure_NoLocationFound                  = 1,
	Failure_NoActorClass                     = 2,
	Failure_BadQueryData                     = 3,
	ESpawnResult_MAX                         = 4,
};

// Enum FortniteGame.EFortBuildingSoundType
// NumValues: 0x0005
enum class EFortBuildingSoundType : uint8
{
	Construction                             = 0,
	GenericDestruction                       = 1,
	PlayerBuiltDestruction                   = 2,
	None                                     = 3,
	EFortBuildingSoundType_MAX               = 4,
};

// Enum FortniteGame.EFortUICameraFrameTargetBoundingBehavior
// NumValues: 0x0004
enum class EFortUICameraFrameTargetBoundingBehavior : uint8
{
	NoBounds                                 = 0,
	AllBounds                                = 1,
	TopBoundOnly                             = 2,
	EFortUICameraFrameTargetBoundingBehavior_MAX = 3,
};

// Enum FortniteGame.ECameraOrigin
// NumValues: 0x0003
enum class ECameraOrigin : uint8
{
	ViewTargetTransform                      = 0,
	BoneTransform                            = 1,
	ECameraOrigin_MAX                        = 2,
};

// Enum FortniteGame.EChallengeBundleQuestUnlockType
// NumValues: 0x0005
enum class EChallengeBundleQuestUnlockType : uint8
{
	GrantWithBundle                          = 0,
	RequiresBattlePass                       = 1,
	DaysFromEventStart                       = 2,
	ChallengesCompletedToUnlock              = 3,
	EChallengeBundleQuestUnlockType_MAX      = 4,
};

// Enum FortniteGame.EChallengeScheduleUnlockType
// NumValues: 0x0004
enum class EChallengeScheduleUnlockType : uint8
{
	Manually                                 = 0,
	OnScheduleGranted                        = 1,
	DaysSinceEventStart                      = 2,
	EChallengeScheduleUnlockType_MAX         = 3,
};

// Enum FortniteGame.EFortCustomMovement
// NumValues: 0x000B
enum class EFortCustomMovement : uint8
{
	Default                                  = 0,
	Driving                                  = 1,
	Passenger                                = 2,
	Parachuting                              = 3,
	Skydiving                                = 4,
	SkydiveFollowing                         = 5,
	Hover                                    = 6,
	RemoteControl_Flying                     = 7,
	Ziplining                                = 8,
	Ballooning                               = 9,
	EFortCustomMovement_MAX                  = 10,
};

// Enum FortniteGame.EChatRoomJoinHelperState
// NumValues: 0x0005
enum class EChatRoomJoinHelperState : uint8
{
	Ready                                    = 0,
	AttemptingJoin                           = 1,
	Joined                                   = 2,
	AttemptingLeave                          = 3,
	EChatRoomJoinHelperState_MAX             = 4,
};

// Enum FortniteGame.EFortAnnouncementDisplayPreference
// NumValues: 0x0004
enum class EFortAnnouncementDisplayPreference : uint8
{
	Default_HUD                              = 0,
	QuestIntroduction                        = 1,
	QuestJournal                             = 2,
	EFortAnnouncementDisplayPreference_MAX   = 3,
};

// Enum FortniteGame.EFortAnnouncementChannel
// NumValues: 0x0005
enum class EFortAnnouncementChannel : uint8
{
	Primary                                  = 0,
	Conversation                             = 1,
	Tutorial                                 = 2,
	Max_None                                 = 3,
	EFortAnnouncementChannel_MAX             = 4,
};

// Enum FortniteGame.EFortAnnouncementDelivery
// NumValues: 0x0007
enum class EFortAnnouncementDelivery : uint8
{
	Created                                  = 0,
	Received                                 = 1,
	Ignored                                  = 2,
	Active                                   = 3,
	Stopped                                  = 4,
	Max_None                                 = 5,
	EFortAnnouncementDelivery_MAX            = 6,
};

// Enum FortniteGame.EQuestMapScreenMode
// NumValues: 0x0004
enum class EQuestMapScreenMode : uint8
{
	Invalid                                  = 0,
	MainCampaign                             = 1,
	Event                                    = 2,
	EQuestMapScreenMode_MAX                  = 3,
};

// Enum FortniteGame.EFortAllowBackgroundAudioSetting
// NumValues: 0x0005
enum class EFortAllowBackgroundAudioSetting : uint8
{
	Off                                      = 0,
	NotificationsOnly                        = 1,
	AllSounds                                = 2,
	Num                                      = 3,
	EFortAllowBackgroundAudioSetting_MAX     = 4,
};

// Enum FortniteGame.EAndroidAppStoreTypes
// NumValues: 0x0004
enum class EAndroidAppStoreTypes : uint8
{
	Unset                                    = 0,
	Epic                                     = 1,
	Samsung                                  = 2,
	EAndroidAppStoreTypes_MAX                = 3,
};

// Enum FortniteGame.EColorBlindMode
// NumValues: 0x0005
enum class EColorBlindMode : uint8
{
	Off                                      = 0,
	Deuteranope                              = 1,
	Protanope                                = 2,
	Tritanope                                = 3,
	EColorBlindMode_MAX                      = 4,
};

// Enum FortniteGame.ECloudFileState
// NumValues: 0x0005
enum class ECloudFileState : uint8
{
	Unitialized                              = 0,
	Saving                                   = 1,
	Loading                                  = 2,
	Idle                                     = 3,
	ECloudFileState_MAX                      = 4,
};

// Enum FortniteGame.ECodeTokenPlatform
// NumValues: 0x0004
enum class ECodeTokenPlatform : uint8
{
	PC                                       = 0,
	PS4                                      = 1,
	XBOX                                     = 2,
	ECodeTokenPlatform_MAX                   = 3,
};

// Enum FortniteGame.EFortCollectionBookState
// NumValues: 0x0004
enum class EFortCollectionBookState : uint8
{
	Active                                   = 0,
	Completed                                = 1,
	Claimed                                  = 2,
	EFortCollectionBookState_MAX             = 3,
};

// Enum FortniteGame.EFortPIDValueGraphElements
// NumValues: 0x0004
enum class EFortPIDValueGraphElements : uint8
{
	Proportional                             = 0,
	Integral                                 = 1,
	Max_None                                 = 2,
	EFortPIDValueGraphElements_MAX           = 3,
};

// Enum FortniteGame.EFortIntensityGraphElements
// NumValues: 0x0004
enum class EFortIntensityGraphElements : uint8
{
	ActualIntensity                          = 0,
	DesiredIntensity                         = 1,
	Max_None                                 = 2,
	EFortIntensityGraphElements_MAX          = 3,
};

// Enum FortniteGame.EFortContributionGraphElements
// NumValues: 0x0007
enum class EFortContributionGraphElements : uint8
{
	ProportionalLine                         = 0,
	IntegralLine                             = 1,
	TotalLine                                = 2,
	PendingLine                              = 3,
	ActionLine                               = 4,
	Max_None                                 = 5,
	EFortContributionGraphElements_MAX       = 6,
};

// Enum FortniteGame.EFortFactorContributionType
// NumValues: 0x0005
enum class EFortFactorContributionType : uint8
{
	CurrentValue_Direct                      = 0,
	CurrentValue_Inverse                     = 1,
	AverageValue_Direct                      = 2,
	AverageValue_Inverse                     = 3,
	EFortFactorContributionType_MAX          = 4,
};

// Enum FortniteGame.EFortAIDirectorFactor
// NumValues: 0x000E
enum class EFortAIDirectorFactor : uint8
{
	PlayerDamageThreat                       = 0,
	ObjectiveDamageThreat                    = 1,
	ObjectivePathCost                        = 2,
	PlayerPathCost                           = 3,
	PlayerMovement                           = 4,
	TrapsEffective                           = 5,
	PlayerWander                             = 6,
	NearbyEnemyPresence                      = 7,
	OffensiveResources                       = 8,
	DefensiveResources                       = 9,
	Boredom                                  = 10,
	ArtilleryVulnerability                   = 11,
	Max_None                                 = 12,
	EFortAIDirectorFactor_MAX                = 13,
};

// Enum FortniteGame.EFortCombatFactors
// NumValues: 0x000E
enum class EFortCombatFactors : uint8
{
	PlayerDamageThreat                       = 0,
	ObjectiveDamageThreat                    = 1,
	ObjectivePathCost                        = 2,
	PlayerPathCost                           = 3,
	PlayerMovement                           = 4,
	TrapsEffective                           = 5,
	PlayerWander                             = 6,
	NearbyEnemyPresence                      = 7,
	OffensiveResources                       = 8,
	DefensiveResources                       = 9,
	Boredom                                  = 10,
	ArtilleryVulnerability                   = 11,
	Max_None                                 = 12,
	EFortCombatFactors_MAX                   = 13,
};

// Enum FortniteGame.EFortCombatEventContribution
// NumValues: 0x0005
enum class EFortCombatEventContribution : uint8
{
	Linear                                   = 0,
	Inverse                                  = 1,
	Accumulator                              = 2,
	Max_None                                 = 3,
	EFortCombatEventContribution_MAX         = 4,
};

// Enum FortniteGame.EFortAIDirectorEventParticipant
// NumValues: 0x0005
enum class EFortAIDirectorEventParticipant : uint8
{
	Target                                   = 0,
	Source                                   = 1,
	Either                                   = 2,
	Max_None                                 = 3,
	EFortAIDirectorEventParticipant_MAX      = 4,
};

// Enum FortniteGame.EFortCombatThresholds
// NumValues: 0x0006
enum class EFortCombatThresholds : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Extreme                                  = 3,
	Max_None                                 = 4,
	EFortCombatThresholds_MAX                = 5,
};

// Enum FortniteGame.EFortBaseWeaponDamage
// NumValues: 0x0003
enum class EFortBaseWeaponDamage : uint8
{
	Combat                                   = 0,
	Environmental                            = 1,
	EFortBaseWeaponDamage_MAX                = 2,
};

// Enum FortniteGame.EFortWeaponCoreAnimation
// NumValues: 0x0023
enum class EFortWeaponCoreAnimation : uint8
{
	Melee                                    = 0,
	Pistol                                   = 1,
	Shotgun                                  = 2,
	PaperBlueprint                           = 3,
	Rifle                                    = 4,
	MeleeOneHand                             = 5,
	MachinePistol                            = 6,
	RocketLauncher                           = 7,
	GrenadeLauncher                          = 8,
	GoingCommando                            = 9,
	AssaultRifle                             = 10,
	TacticalShotgun                          = 11,
	SniperRifle                              = 12,
	TrapPlacement                            = 13,
	ShoulderLauncher                         = 14,
	AbilityDecoTool                          = 15,
	Crossbow                                 = 16,
	C4                                       = 17,
	RemoteControl                            = 18,
	DualWield                                = 19,
	AR_BullPup                               = 20,
	AR_ForwardGrip                           = 21,
	MedPackPaddles                           = 22,
	SMG_P90                                  = 23,
	AR_DrumGun                               = 24,
	Consumable_Small                         = 25,
	Consumable_Large                         = 26,
	Balloon                                  = 27,
	MountedTurret                            = 28,
	CreativeTool                             = 29,
	ExplosiveBow                             = 30,
	AshtonIndigo                             = 31,
	AshtonChicago                            = 32,
	MeleeDualWield                           = 33,
	MAX                                      = 34,
};

// Enum FortniteGame.EFortTargetingFXState
// NumValues: 0x0004
enum class EFortTargetingFXState : uint8
{
	TargetingStart                           = 0,
	TargetingEnd                             = 1,
	Max_None                                 = 2,
	EFortTargetingFXState_MAX                = 3,
};

// Enum FortniteGame.EFortReloadFXState
// NumValues: 0x0005
enum class EFortReloadFXState : uint8
{
	ReloadStart                              = 0,
	ReloadCartridge                          = 1,
	ReloadEnd                                = 2,
	Max_None                                 = 3,
	EFortReloadFXState_MAX                   = 4,
};

// Enum FortniteGame.EFortWeaponSoundChannel
// NumValues: 0x0006
enum class EFortWeaponSoundChannel : uint8
{
	NormalA                                  = 0,
	NormalB                                  = 1,
	LowAmmo                                  = 2,
	Degraded                                 = 3,
	Max_None                                 = 4,
	EFortWeaponSoundChannel_MAX              = 5,
};

// Enum FortniteGame.EFortWeaponSoundState
// NumValues: 0x0005
enum class EFortWeaponSoundState : uint8
{
	Normal                                   = 0,
	LowAmmo                                  = 1,
	Degraded                                 = 2,
	Max_None                                 = 3,
	EFortWeaponSoundState_MAX                = 4,
};

// Enum FortniteGame.EFortMontageInputType
// NumValues: 0x0004
enum class EFortMontageInputType : uint8
{
	WindowClickOrHold                        = 0,
	WindowHoldOnly                           = 1,
	InstantClick                             = 2,
	EFortMontageInputType_MAX                = 3,
};

// Enum FortniteGame.EFortAbilityTargetingSource
// NumValues: 0x0008
enum class EFortAbilityTargetingSource : uint8
{
	Camera                                   = 0,
	PawnForward                              = 1,
	PawnTowardsFocus                         = 2,
	WeaponForward                            = 3,
	WeaponTowardsFocus                       = 4,
	Custom                                   = 5,
	Max_None                                 = 6,
	EFortAbilityTargetingSource_MAX          = 7,
};

// Enum FortniteGame.EFortAmmoType
// NumValues: 0x0006
enum class EFortAmmoType : uint8
{
	Pistol                                   = 0,
	Shotgun                                  = 1,
	Assault                                  = 2,
	Sniper                                   = 3,
	Energy                                   = 4,
	EFortAmmoType_MAX                        = 5,
};

// Enum FortniteGame.EFortConditionalResourceItemTest
// NumValues: 0x0002
enum class EFortConditionalResourceItemTest : uint8
{
	CanEarnMtx                               = 0,
	EFortConditionalResourceItemTest_MAX     = 1,
};

// Enum FortniteGame.EFortContentEncryptionAllowedReferences
// NumValues: 0x0004
enum class EFortContentEncryptionAllowedReferences : uint32
{
	None                                     = 0,
	SoftOnly                                 = 1,
	Any                                      = 2,
	EFortContentEncryptionAllowedReferences_MAX = 3,
};

// Enum FortniteGame.EFortContentEncryptionCollectionGrouping
// NumValues: 0x0004
enum class EFortContentEncryptionCollectionGrouping : uint32
{
	Individual                               = 0,
	Combined                                 = 1,
	ByCosmeticSet                            = 2,
	EFortContentEncryptionCollectionGrouping_MAX = 3,
};

// Enum FortniteGame.EFortEncryptionStatus
// NumValues: 0x0003
enum class EFortEncryptionStatus : uint8
{
	ENCRYPTED                                = 0,
	RELEASED                                 = 1,
	EFortEncryptionStatus_MAX                = 2,
};

// Enum FortniteGame.EFortSentenceAudioPreference
// NumValues: 0x0003
enum class EFortSentenceAudioPreference : uint8
{
	AudioAsset                               = 0,
	FeedbackBank                             = 1,
	EFortSentenceAudioPreference_MAX         = 2,
};

// Enum FortniteGame.EAddToSelectionResult
// NumValues: 0x0005
enum class EAddToSelectionResult : uint8
{
	Added                                    = 0,
	Removed                                  = 1,
	AtLimit                                  = 2,
	None                                     = 3,
	EAddToSelectionResult_MAX                = 4,
};

// Enum FortniteGame.EHitTraceType
// NumValues: 0x0003
enum class EHitTraceType : uint8
{
	Single                                   = 0,
	Multi                                    = 1,
	EHitTraceType_MAX                        = 2,
};

// Enum FortniteGame.ECreativePortalManagerValidityResult
// NumValues: 0x0003
enum class ECreativePortalManagerValidityResult : uint8
{
	Valid                                    = 0,
	Invalid                                  = 1,
	ECreativePortalManagerValidityResult_MAX = 2,
};

// Enum FortniteGame.EFortCreativePlotPermission
// NumValues: 0x0003
enum class EFortCreativePlotPermission : uint8
{
	Private                                  = 0,
	Public                                   = 1,
	EFortCreativePlotPermission_MAX          = 2,
};

// Enum FortniteGame.ERealEstateOffsetType
// NumValues: 0x0003
enum class ERealEstateOffsetType : uint8
{
	CustomOffsetFromCorner                   = 0,
	Center                                   = 1,
	ERealEstateOffsetType_MAX                = 2,
};

// Enum FortniteGame.ETimespanAsTextFormat
// NumValues: 0x0004
enum class ETimespanAsTextFormat : uint8
{
	DaysHoursMinutesSeconds                  = 0,
	Colons                                   = 1,
	Approximate                              = 2,
	ETimespanAsTextFormat_MAX                = 3,
};

// Enum FortniteGame.EDeathCauseReason
// NumValues: 0x0005
enum class EDeathCauseReason : uint8
{
	SelfInflicted                            = 0,
	SelfInflictedDBNO                        = 1,
	Eliminated                               = 2,
	EliminatedDBNO                           = 3,
	EDeathCauseReason_MAX                    = 4,
};

// Enum FortniteGame.EFortDefenderSubtype
// NumValues: 0x0007
enum class EFortDefenderSubtype : uint8
{
	AssaultRifle                             = 0,
	Pistol                                   = 1,
	Melee                                    = 2,
	Sniper                                   = 3,
	Shotgun                                  = 4,
	Invalid                                  = 5,
	EFortDefenderSubtype_MAX                 = 6,
};

// Enum FortniteGame.EHordeTierStartStatus
// NumValues: 0x0005
enum class EHordeTierStartStatus : uint8
{
	ReadyToStart                             = 0,
	WaitingForPlayer                         = 1,
	WaitingForDBM                            = 2,
	GenericNotReadyToStart                   = 3,
	EHordeTierStartStatus_MAX                = 4,
};

// Enum FortniteGame.EHordeWaveStingerType
// NumValues: 0x0005
enum class EHordeWaveStingerType : uint8
{
	WaveSuccess                              = 0,
	WaveFailure                              = 1,
	WaveIncoming                             = 2,
	WaveStarted                              = 3,
	EHordeWaveStingerType_MAX                = 4,
};

// Enum FortniteGame.EQueueActionType
// NumValues: 0x0004
enum class EQueueActionType : uint8
{
	Plot                                     = 0,
	ZoneCleanup                              = 1,
	EnvironmentActorRestoration              = 2,
	EQueueActionType_MAX                     = 3,
};

// Enum FortniteGame.EAthenaPIEStartupMode
// NumValues: 0x0007
enum class EAthenaPIEStartupMode : uint8
{
	UseDefaults                              = 0,
	Warmup                                   = 1,
	WarmupPaused                             = 2,
	Aircraft                                 = 3,
	AircraftPaused                           = 4,
	Gameplay                                 = 5,
	EAthenaPIEStartupMode_MAX                = 6,
};

// Enum FortniteGame.FDynamicBuildOrder
// NumValues: 0x0005
enum class EFDynamicBuildOrder : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	None                                     = 3,
	FDynamicBuildOrder_MAX                   = 4,
};

// Enum FortniteGame.EFortFeedbackBroadcastFilter
// NumValues: 0x0007
enum class EFortFeedbackBroadcastFilter : uint8
{
	FFBF_Speaker                             = 0,
	FFBF_SpeakerTeam                         = 1,
	FFBF_SpeakerAdressee                     = 2,
	FFBF_HumanPvP_Team1                      = 3,
	FFBF_HumanPvP_Team2                      = 4,
	FFBF_None_Max                            = 5,
	FFBF_MAX                                 = 6,
};

// Enum FortniteGame.EFortFeedbackSelectionMethod
// NumValues: 0x0009
enum class EFortFeedbackSelectionMethod : uint8
{
	FFSM_Instigator                          = 0,
	FFSM_Recipient                           = 1,
	FFSM_TeamWitness                         = 2,
	FFSM_EnemyWitness                        = 3,
	FFSM_Random                              = 4,
	FFSM_Priority_IRTE                       = 5,
	FFSM_AllPawns                            = 6,
	FFSM_Announcer                           = 7,
	FFSM_MAX                                 = 8,
};

// Enum FortniteGame.EFortFeedbackAddressee
// NumValues: 0x0004
enum class EFortFeedbackAddressee : uint8
{
	FFA_Instigator                           = 0,
	FFA_Recipient                            = 1,
	FFA_All                                  = 2,
	FFA_MAX                                  = 3,
};

// Enum FortniteGame.EFortFeedbackContext
// NumValues: 0x0008
enum class EFortFeedbackContext : uint8
{
	FFC_Instigator                           = 0,
	FFC_Recipient                            = 1,
	FFC_TeamWitness                          = 2,
	FFC_EnemyWitness                         = 3,
	FFC_AllPawns                             = 4,
	FFC_Announcer                            = 5,
	FFC_None_Max                             = 6,
	FFC_MAX                                  = 7,
};

// Enum FortniteGame.EFortFootstepPosition
// NumValues: 0x0006
enum class EFortFootstepPosition : uint8
{
	Parallel                                 = 0,
	Above                                    = 1,
	Below                                    = 2,
	AboveOrBelowAndVisible                   = 3,
	Max_None                                 = 4,
	EFortFootstepPosition_MAX                = 5,
};

// Enum FortniteGame.EFortFootstepSurfaceType
// NumValues: 0x000A
enum class EFortFootstepSurfaceType : uint8
{
	Default                                  = 0,
	Wood                                     = 1,
	Stone                                    = 2,
	Metal                                    = 3,
	Water                                    = 4,
	Snow                                     = 5,
	Ice                                      = 6,
	Lava                                     = 7,
	Max_None                                 = 8,
	EFortFootstepSurfaceType_MAX             = 9,
};

// Enum FortniteGame.EFortFootstepAudioType
// NumValues: 0x0009
enum class EFortFootstepAudioType : uint8
{
	Crouch                                   = 0,
	CrouchSprint                             = 1,
	Walk                                     = 2,
	Sprint                                   = 3,
	Jump                                     = 4,
	Land                                     = 5,
	LandHard                                 = 6,
	Max_None                                 = 7,
	EFortFootstepAudioType_MAX               = 8,
};

// Enum FortniteGame.ESubGameAccessReason
// NumValues: 0x0007
enum class ESubGameAccessReason : uint8
{
	NoAccess                                 = 0,
	OpenAccess                               = 1,
	TokenItemAccess                          = 2,
	XboxHomeSharingAccess                    = 3,
	XboxServiceOutageAccess                  = 4,
	LimitedAccess                            = 5,
	ESubGameAccessReason_MAX                 = 6,
};

// Enum FortniteGame.EPartyFeedbackType
// NumValues: 0x0004
enum class EPartyFeedbackType : uint8
{
	PartyInProgressPlayerJoined              = 0,
	PartyInProgressPlayerLeft                = 1,
	Default                                  = 2,
	EPartyFeedbackType_MAX                   = 3,
};

// Enum FortniteGame.EFriendFeedbackType
// NumValues: 0x0005
enum class EFriendFeedbackType : uint8
{
	FriendRequestSent                        = 0,
	FriendRequestReceived                    = 1,
	FriendRequestAccepted                    = 2,
	Default                                  = 3,
	EFriendFeedbackType_MAX                  = 4,
};

// Enum FortniteGame.EClampType
// NumValues: 0x0003
enum class EClampType : uint8
{
	Minimum                                  = 0,
	Maximum                                  = 1,
	EClampType_MAX                           = 2,
};

// Enum FortniteGame.EDynamicSoundOverride
// NumValues: 0x0003
enum class EDynamicSoundOverride : uint8
{
	Cue                                      = 0,
	Wave                                     = 1,
	EDynamicSoundOverride_MAX                = 2,
};

// Enum FortniteGame.EPlayerQueueType
// NumValues: 0x0004
enum class EPlayerQueueType : uint8
{
	Player                                   = 0,
	Spectator                                = 1,
	Broadcaster                              = 2,
	EPlayerQueueType_MAX                     = 3,
};

// Enum FortniteGame.EFortInputFilterLevel
// NumValues: 0x0005
enum class EFortInputFilterLevel : uint8
{
	None                                     = 0,
	Touch                                    = 1,
	Gamepad                                  = 2,
	Mouse                                    = 3,
	EFortInputFilterLevel_MAX                = 4,
};

// Enum FortniteGame.EAircraftLaunchReason
// NumValues: 0x0006
enum class EAircraftLaunchReason : uint8
{
	StdTimerAllPlayers                       = 0,
	EarlyTimerAllPlayers                     = 1,
	StdTimerMostPlayers                      = 2,
	EarlyTimerMostPlayers                    = 3,
	StdTimerFewPlayers                       = 4,
	EAircraftLaunchReason_MAX                = 5,
};

// Enum FortniteGame.EFortGamepadLookInputCurve
// NumValues: 0x0003
enum class EFortGamepadLookInputCurve : uint8
{
	Linear                                   = 0,
	Exponential                              = 1,
	EFortGamepadLookInputCurve_MAX           = 2,
};

// Enum FortniteGame.EFortGamepadSensitivity
// NumValues: 0x000C
enum class EFortGamepadSensitivity : uint8
{
	Invalid                                  = 0,
	Slow                                     = 1,
	SlowPlus                                 = 2,
	SlowPlusPlus                             = 3,
	Normal                                   = 4,
	NormalPlus                               = 5,
	NormalPlusPlus                           = 6,
	Fast                                     = 7,
	FastPlus                                 = 8,
	FastPlusPlus                             = 9,
	Insane                                   = 10,
	MAX                                      = 11,
};

// Enum FortniteGame.EFortAbilityCostSource
// NumValues: 0x0006
enum class EFortAbilityCostSource : uint8
{
	Stamina                                  = 0,
	Durability                               = 1,
	AmmoMagazine                             = 2,
	AmmoPrimary                              = 3,
	Item                                     = 4,
	EFortAbilityCostSource_MAX               = 5,
};

// Enum FortniteGame.EFortGameplayAbilityActivation
// NumValues: 0x0004
enum class EFortGameplayAbilityActivation : uint8
{
	Passive                                  = 0,
	Triggered                                = 1,
	Active                                   = 2,
	EFortGameplayAbilityActivation_MAX       = 3,
};

// Enum FortniteGame.EFortAIWeaponUsage
// NumValues: 0x0004
enum class EFortAIWeaponUsage : uint8
{
	NoWeaponUsage                            = 0,
	UsesRangedWeapon                         = 1,
	UsesMeleeWeapon                          = 2,
	EFortAIWeaponUsage_MAX                   = 3,
};

// Enum FortniteGame.EFortGameplayAbilityMontageSectionToPlay
// NumValues: 0x0004
enum class EFortGameplayAbilityMontageSectionToPlay : uint8
{
	FirstSection                             = 0,
	RandomSection                            = 1,
	TestedRandomSection                      = 2,
	EFortGameplayAbilityMontageSectionToPlay_MAX = 3,
};

// Enum FortniteGame.EJumpBoostPackState
// NumValues: 0x0006
enum class EJumpBoostPackState : uint8
{
	Idle                                     = 0,
	Boost                                    = 1,
	Hovering                                 = 2,
	Falling                                  = 3,
	None                                     = 4,
	EJumpBoostPackState_MAX                  = 5,
};

// Enum FortniteGame.EMedicPackState
// NumValues: 0x0004
enum class EMedicPackState : uint8
{
	Idle                                     = 0,
	Active                                   = 1,
	None                                     = 2,
	EMedicPackState_MAX                      = 3,
};

// Enum FortniteGame.EFortGameplayCueSourceCondition
// NumValues: 0x0004
enum class EFortGameplayCueSourceCondition : uint8
{
	AnySource                                = 0,
	LocalPlayerSource                        = 1,
	NonLocalPlayerSource                     = 2,
	EFortGameplayCueSourceCondition_MAX      = 3,
};

// Enum FortniteGame.EFortGameplayCueAttachType
// NumValues: 0x0003
enum class EFortGameplayCueAttachType : uint8
{
	AttachToTarget                           = 0,
	DoNotAttach                              = 1,
	EFortGameplayCueAttachType_MAX           = 2,
};

// Enum FortniteGame.ESetCVarType
// NumValues: 0x0003
enum class ESetCVarType : uint8
{
	Numeric                                  = 0,
	String                                   = 1,
	ESetCVarType_MAX                         = 2,
};

// Enum FortniteGame.EPvPGameEndReasons
// NumValues: 0x0005
enum class EPvPGameEndReasons : uint8
{
	PVPGER_TeamScoreLimit                    = 0,
	PVPGER_LastManStanding                   = 1,
	PVPGER_TimeExpired                       = 2,
	PVPGER_MissionCompletion                 = 3,
	PVPGER_MAX                               = 4,
};

// Enum FortniteGame.EFortServerGameMode
// NumValues: 0x0006
enum class EFortServerGameMode : uint8
{
	Idle                                     = 0,
	LobbyPvE                                 = 1,
	LobbyPvP                                 = 2,
	ZonePvP                                  = 3,
	ZonePvE                                  = 4,
	EFortServerGameMode_MAX                  = 5,
};

// Enum FortniteGame.EFortBanHammerNotificationAction
// NumValues: 0x0003
enum class EFortBanHammerNotificationAction : uint8
{
	BanAndKick                               = 0,
	Kick                                     = 1,
	EFortBanHammerNotificationAction_MAX     = 2,
};

// Enum FortniteGame.ETeamChatRoomState
// NumValues: 0x0005
enum class ETeamChatRoomState : uint8
{
	NotCreated                               = 0,
	Creating                                 = 1,
	Created                                  = 2,
	Timeout                                  = 3,
	ETeamChatRoomState_MAX                   = 4,
};

// Enum FortniteGame.EPlayerIndicatorFlags
// NumValues: 0x0005
enum class EPlayerIndicatorFlags : uint8
{
	None                                     = 0,
	Minimap                                  = 1,
	WorldArrow                               = 2,
	WorldName                                = 4,
	EPlayerIndicatorFlags_MAX                = 5,
};

// Enum FortniteGame.EShowInGamePictureInPicture
// NumValues: 0x0004
enum class EShowInGamePictureInPicture : uint8
{
	Default                                  = 0,
	Hide                                     = 1,
	Show                                     = 2,
	EShowInGamePictureInPicture_MAX          = 3,
};

// Enum FortniteGame.EFortScalabilityMode
// NumValues: 0x0003
enum class EFortScalabilityMode : uint8
{
	LowPower                                 = 0,
	Frontend                                 = 1,
	EFortScalabilityMode_MAX                 = 2,
};

// Enum FortniteGame.ESavedAccountType
// NumValues: 0x0008
enum class ESavedAccountType : uint8
{
	None                                     = 0,
	Facebook                                 = 1,
	Google                                   = 2,
	Epic                                     = 3,
	Device                                   = 4,
	Headless                                 = 5,
	Refresh                                  = 6,
	ESavedAccountType_MAX                    = 7,
};

// Enum FortniteGame.EFortMobileFPSMode
// NumValues: 0x0004
enum class EFortMobileFPSMode : uint8
{
	Mode_20Fps                               = 0,
	Mode_30Fps                               = 1,
	Mode_60Fps                               = 2,
	Mode_MAX                                 = 3,
};

// Enum FortniteGame.EFortConsoleFPSMode
// NumValues: 0x0004
enum class EFortConsoleFPSMode : uint8
{
	Mode_30Fps                               = 0,
	Mode_30Fps_Unlocked                      = 1,
	Mode_60Fps                               = 2,
	Mode_MAX                                 = 3,
};

// Enum FortniteGame.EFortGiftWrapType
// NumValues: 0x0006
enum class EFortGiftWrapType : uint8
{
	System                                   = 0,
	UserFree                                 = 1,
	UserUnlock                               = 2,
	UserConsumable                           = 3,
	Message                                  = 4,
	EFortGiftWrapType_MAX                    = 5,
};

// Enum FortniteGame.EFortGlobalAction
// NumValues: 0x0023
enum class EFortGlobalAction : uint8
{
	TrapConfirm                              = 0,
	TrapPicker                               = 1,
	BuildConfirm                             = 2,
	PerformBuildingEditInteraction           = 3,
	PerformBuildingImprovementInteraction    = 4,
	SwitchQuickBar                           = 5,
	Use                                      = 6,
	Reload                                   = 7,
	InventoryOrChatHold                      = 8,
	GamepadChangeMaterialOrHarvestHold       = 9,
	GamepadNextWeaponOrHarvestHold           = 10,
	ChangeMaterial                           = 11,
	Fire                                     = 12,
	RotatePrimitiveClockwise                 = 13,
	Gadget1                                  = 14,
	Gadget2                                  = 15,
	Ability1                                 = 16,
	Ability2                                 = 17,
	Ability3                                 = 18,
	ToggleFullScreenMap                      = 19,
	ToggleInventory                          = 20,
	Jump                                     = 21,
	Crouch                                   = 22,
	VehicleExit                              = 23,
	ShoppingCartCoast                        = 24,
	VehicleJump                              = 25,
	GolfCartEBrake                           = 26,
	VehicleChangeSeat                        = 27,
	GolfCartForward                          = 28,
	GolfCartReverse                          = 29,
	GolfCartHonk                             = 30,
	GamepadToggleHarvestOrHoldCreativePhone  = 31,
	GamepadToggleCreativePhoneWeapon         = 32,
	Count                                    = 33,
	EFortGlobalAction_MAX                    = 34,
};

// Enum FortniteGame.EChunkInstallState
// NumValues: 0x0005
enum class EChunkInstallState : uint8
{
	NotInstalled                             = 0,
	Pending                                  = 1,
	Installed                                = 2,
	Unknown                                  = 3,
	EChunkInstallState_MAX                   = 4,
};

// Enum FortniteGame.EFortAccountLinkingUIConfig
// NumValues: 0x0005
enum class EFortAccountLinkingUIConfig : uint8
{
	Disabled                                 = 0,
	Default                                  = 1,
	ExternalViewerOnly                       = 2,
	FullExternal                             = 3,
	EFortAccountLinkingUIConfig_MAX          = 4,
};

// Enum FortniteGame.EFortHelpContentLocation
// NumValues: 0x0003
enum class EFortHelpContentLocation : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	Max                                      = 2,
};

// Enum FortniteGame.EFortHelpItemType
// NumValues: 0x0003
enum class EFortHelpItemType : uint8
{
	Header                                   = 0,
	Entry                                    = 1,
	Max                                      = 2,
};

// Enum FortniteGame.ESpecializationType
// NumValues: 0x0006
enum class ESpecializationType : uint8
{
	Tier1                                    = 0,
	Tier2                                    = 1,
	Tier3                                    = 2,
	Tier4                                    = 3,
	NumTiers                                 = 4,
	ESpecializationType_MAX                  = 5,
};

// Enum FortniteGame.EFortHeroLoadoutPerkType
// NumValues: 0x0003
enum class EFortHeroLoadoutPerkType : uint8
{
	Commander                                = 0,
	Standard                                 = 1,
	EFortHeroLoadoutPerkType_MAX             = 2,
};

// Enum FortniteGame.EFortSupportBonusType
// NumValues: 0x0004
enum class EFortSupportBonusType : uint8
{
	Normal                                   = 0,
	Tactical                                 = 1,
	Max_None                                 = 2,
	EFortSupportBonusType_MAX                = 3,
};

// Enum FortniteGame.EFortHexTileAdjacency
// NumValues: 0x0008
enum class EFortHexTileAdjacency : uint8
{
	North                                    = 0,
	NorthEast                                = 1,
	SouthEast                                = 2,
	South                                    = 3,
	SouthWest                                = 4,
	NorthWest                                = 5,
	Max_None                                 = 6,
	EFortHexTileAdjacency_MAX                = 7,
};

// Enum FortniteGame.ESquadSlotType
// NumValues: 0x0006
enum class ESquadSlotType : uint8
{
	HeroSquadMissionDefender                 = 0,
	SurvivorSquadLeadSurvivor                = 1,
	SurvivorSquadSurvivor                    = 2,
	DefenderSquadMember                      = 3,
	ExpeditionSquadMember                    = 4,
	ESquadSlotType_MAX                       = 5,
};

// Enum FortniteGame.EFortHomebaseSquadType
// NumValues: 0x0006
enum class EFortHomebaseSquadType : uint8
{
	AttributeSquad                           = 0,
	CombatSquad                              = 1,
	DefenderSquad                            = 2,
	ExpeditionSquad                          = 3,
	Max_None                                 = 4,
	EFortHomebaseSquadType_MAX               = 5,
};

// Enum FortniteGame.EHomebaseNodeType
// NumValues: 0x0004
enum class EHomebaseNodeType : uint8
{
	Gadget                                   = 0,
	Utility                                  = 1,
	Hidden                                   = 2,
	EHomebaseNodeType_MAX                    = 3,
};

// Enum FortniteGame.EFortHuskAnimType
// NumValues: 0x000A
enum class EFortHuskAnimType : uint8
{
	Basic                                    = 0,
	Dwarf                                    = 1,
	BlasterBig                               = 2,
	Weak                                     = 3,
	TinyHead                                 = 4,
	Beehive                                  = 5,
	Husky                                    = 6,
	Sploder                                  = 7,
	Zapper                                   = 8,
	EFortHuskAnimType_MAX                    = 9,
};

// Enum FortniteGame.EMapCaptureMethod
// NumValues: 0x0004
enum class EMapCaptureMethod : uint32
{
	None                                     = 0,
	LiveCapture                              = 1,
	StaticCapture                            = 2,
	EMapCaptureMethod_MAX                    = 3,
};

// Enum FortniteGame.EFortInputGameMode
// NumValues: 0x0003
enum class EFortInputGameMode : uint8
{
	SaveTheWorld                             = 0,
	Athena                                   = 1,
	EFortInputGameMode_MAX                   = 2,
};

// Enum FortniteGame.EFortIntensityCurveSequenceType
// NumValues: 0x0005
enum class EFortIntensityCurveSequenceType : uint8
{
	Sequence                                 = 0,
	Loop                                     = 1,
	Random                                   = 2,
	Max_None                                 = 3,
	EFortIntensityCurveSequenceType_MAX      = 4,
};

// Enum FortniteGame.TInteractionType
// NumValues: 0x0007
enum class ETInteractionType : uint8
{
	IT_NoInteraction                         = 0,
	IT_Simple                                = 1,
	IT_LongPress                             = 2,
	IT_BuildingEdit                          = 3,
	IT_BuildingImprovement                   = 4,
	IT_TrapPlacement                         = 5,
	IT_MAX                                   = 6,
};

// Enum FortniteGame.EItemEvolutionRestrictionReason
// NumValues: 0x0008
enum class EItemEvolutionRestrictionReason : uint8
{
	NoEvolutions                             = 0,
	BelowMaximumLevel                        = 1,
	VaultOverflow                            = 2,
	MissingCatalyst                          = 3,
	MissingCosts                             = 4,
	NoRarityUpgrade                          = 5,
	InUseByCrafting                          = 6,
	EItemEvolutionRestrictionReason_MAX      = 7,
};

// Enum FortniteGame.EItemUpgradeRestrictionReason
// NumValues: 0x0004
enum class EItemUpgradeRestrictionReason : uint8
{
	NoAdditionalLevels                       = 0,
	MaximumLevelAchieved                     = 1,
	VaultOverflow                            = 2,
	EItemUpgradeRestrictionReason_MAX        = 3,
};

// Enum FortniteGame.EFortTemplateAccess
// NumValues: 0x0004
enum class EFortTemplateAccess : uint8
{
	Normal                                   = 0,
	Trusted                                  = 1,
	Private                                  = 2,
	EFortTemplateAccess_MAX                  = 3,
};

// Enum FortniteGame.EItemProfileType
// NumValues: 0x0004
enum class EItemProfileType : uint8
{
	Common                                   = 0,
	Campaign                                 = 1,
	Athena                                   = 2,
	EItemProfileType_MAX                     = 3,
};

// Enum FortniteGame.EFortKickReason
// NumValues: 0x0007
enum class EFortKickReason : uint8
{
	NotKicked                                = 0,
	GenericKick                              = 1,
	WasBanned                                = 2,
	EncryptionRequired                       = 3,
	CrossPlayRestriction                     = 4,
	ClientIdRestriction                      = 5,
	EFortKickReason_MAX                      = 6,
};

// Enum FortniteGame.ELobbyMissionGeneratorDetailsRequirement
// NumValues: 0x0004
enum class ELobbyMissionGeneratorDetailsRequirement : uint8
{
	Unknown                                  = 0,
	NotRequired                              = 1,
	Required                                 = 2,
	ELobbyMissionGeneratorDetailsRequirement_MAX = 3,
};

// Enum FortniteGame.ELootQuotaLevel
// NumValues: 0x0014
enum class ELootQuotaLevel : uint8
{
	Unlimited                                = 0,
	Level1                                   = 1,
	Level2                                   = 2,
	Level3                                   = 3,
	Level4                                   = 4,
	Level5                                   = 5,
	Level6                                   = 6,
	Level7                                   = 7,
	Level8                                   = 8,
	Level9                                   = 9,
	Level10                                  = 10,
	Level11                                  = 11,
	Level12                                  = 12,
	Level13                                  = 13,
	Level14                                  = 14,
	Level15                                  = 15,
	Level16                                  = 16,
	Level17                                  = 17,
	NumLevels                                = 18,
	ELootQuotaLevel_MAX                      = 19,
};

// Enum FortniteGame.EFortMatchmakingType
// NumValues: 0x0005
enum class EFortMatchmakingType : uint8
{
	Gathering                                = 0,
	CriticalMission                          = 1,
	QuickPlay                                = 2,
	Session                                  = 3,
	EFortMatchmakingType_MAX                 = 4,
};

// Enum FortniteGame.EFortSessionHelperJoinResult
// NumValues: 0x0025
enum class EFortSessionHelperJoinResult : uint8
{
	NoResult                                 = 0,
	ReservationSuccess                       = 1,
	ReservationFailure_PartyLimitReached     = 2,
	ReservationFailure_IncorrectPlayerCount  = 3,
	ReservationFailure_RequestTimedOut       = 4,
	ReservationFailure_ReservationNotFound   = 5,
	ReservationFailure_ReservationDenied     = 6,
	ReservationFailure_ReservationDenied_Banned = 7,
	ReservationFailure_ReservationRequestCanceled = 8,
	ReservationFailure_ReservationInvalid    = 9,
	ReservationFailure_BadSessionId          = 10,
	ReservationFailure_ReservationDenied_ContainsExistingPlayers = 11,
	ReservationFailure_GeneralError          = 12,
	ReservationFailure_NoSubsystem           = 13,
	ReservationFailure_NoIdentity            = 14,
	ReservationFailure_InvalidSession        = 15,
	ReservationFailure_InvalidUser           = 16,
	ReservationFailure_EncryptionKey         = 17,
	ReservationFailure_RefreshAuth           = 18,
	ReservationFailure_AlreadyJoiningDuringReserve = 19,
	ReservationFailure_AlreadyJoiningDuringSkip = 20,
	JoinSessionSuccess                       = 21,
	JoinSessionFailure_SessionIsFull         = 22,
	JoinSessionFailure_SessionDoesNotExist   = 23,
	JoinSessionFailure_CouldNotRetrieveAddress = 24,
	JoinSessionFailure_AlreadyInSession      = 25,
	JoinSessionFailure_UnknownError          = 26,
	JoinSessionFailure_InvalidSession        = 27,
	JoinSessionFailure_InvalidSearchResultIndex = 28,
	JoinSessionFailure_AlreadyJoiningDuringJoin = 29,
	SearchPassFailure_NoSessionHelper        = 30,
	SearchPassFailure_InvalidUser            = 31,
	SearchPassFailure_NoIdentity             = 32,
	SearchPassFailure_InvalidSearchResult    = 33,
	SearchPassFailure_InvalidSearchResultIndex = 34,
	JoinSessionCanceled                      = 35,
	EFortSessionHelperJoinResult_MAX         = 36,
};

// Enum FortniteGame.EFortMatchmakingPool
// NumValues: 0x000A
enum class EFortMatchmakingPool : uint8
{
	Any                                      = 0,
	Desktop                                  = 1,
	PS4                                      = 2,
	XboxOne                                  = 3,
	Mobile                                   = 4,
	Test                                     = 5,
	Switch                                   = 6,
	Console                                  = 7,
	All                                      = 8,
	EFortMatchmakingPool_MAX                 = 9,
};

// Enum FortniteGame.EFortMatchmakingPrivacyConfiguration
// NumValues: 0x0004
enum class EFortMatchmakingPrivacyConfiguration : uint8
{
	UserPartyConfigured                      = 0,
	ForcePrivate                             = 1,
	ForcePublic                              = 2,
	EFortMatchmakingPrivacyConfiguration_MAX = 3,
};

// Enum FortniteGame.EMatchmakingFlags
// NumValues: 0x0006
enum class EMatchmakingFlags : uint8
{
	None                                     = 0,
	CreateNewOnly                            = 1,
	NoReservation                            = 2,
	Private                                  = 4,
	UseWorldDataOwner                        = 8,
	EMatchmakingFlags_MAX                    = 9,
};

// Enum FortniteGame.EMatchmakingStartLocation
// NumValues: 0x0005
enum class EMatchmakingStartLocation : uint8
{
	Lobby                                    = 0,
	Game                                     = 1,
	CreateNew                                = 2,
	FindSingle                               = 3,
	EMatchmakingStartLocation_MAX            = 4,
};

// Enum FortniteGame.EMatchmakingCancelReasonV2
// NumValues: 0x0013
enum class EMatchmakingCancelReasonV2 : uint8
{
	Explicit                                 = 0,
	JoinedParty                              = 1,
	LeftParty                                = 2,
	PartyMemberJoined                        = 3,
	PartyMemberLeft                          = 4,
	PartyMemberCanceled                      = 5,
	PlayReplay                               = 6,
	UIDestroyed                              = 7,
	PCDestroyed                              = 8,
	AppBackgrounded                          = 9,
	HotfixOutdated                           = 10,
	TournamentOver                           = 11,
	NotInParty                               = 12,
	CrossplayBlocked                         = 13,
	TournamentCrossplayBlocked               = 14,
	AccountLevelTooLow                       = 15,
	FillNoCrossplay                          = 16,
	Unknown                                  = 17,
	EMatchmakingCancelReasonV2_MAX           = 18,
};

// Enum FortniteGame.EMatchmakingErrorV2
// NumValues: 0x001F
enum class EMatchmakingErrorV2 : uint32
{
	Success                                  = 0,
	Canceled                                 = 1,
	NeedUpdate                               = 2,
	VersionMismatch                          = 3,
	NotLoggedIn                              = 4,
	NoIdentityInterface                      = 5,
	NoSessionInterface                       = 6,
	AlreadyInSession                         = 7,
	FindSessionFailure                       = 8,
	FailedToQueryEncryptionKey               = 9,
	FailedToRefreshAuthToken                 = 10,
	FailedToCleanupSession                   = 11,
	FailedToJoinSession                      = 12,
	FailedToTravelToSession                  = 13,
	Unauthorized                             = 14,
	BannedFromAthena                         = 15,
	BannedFromAthenaForExploit               = 16,
	BannedFromAthenaForTeaming               = 17,
	BannedFromAthenaForTeamKilling           = 18,
	InvalidCustomMatchKey                    = 19,
	FailedToContactGameServices              = 20,
	FailedToConnectToMMS                     = 21,
	MMSCommunicationIssue                    = 22,
	ServiceReturnedError                     = 23,
	PlaylistNoLongerAvailable                = 24,
	CrossplayUnsetWithInputDevicePoolShift   = 25,
	CrossplayNeededForTournamentMatch        = 26,
	MatchmakingDisabled                      = 27,
	AccountLevelTooLow                       = 28,
	UnknownError                             = 29,
	EMatchmakingErrorV2_MAX                  = 30,
};

// Enum FortniteGame.EAthenaFilterDisplayType
// NumValues: 0x0003
enum class EAthenaFilterDisplayType : uint8
{
	UseCategoryName                          = 0,
	ShowFilterString                         = 1,
	EAthenaFilterDisplayType_MAX             = 2,
};

// Enum FortniteGame.ESocialImportPanelPlatform
// NumValues: 0x0007
enum class ESocialImportPanelPlatform : uint8
{
	Facebook                                 = 0,
	VK                                       = 1,
	Steam                                    = 2,
	Xbox                                     = 3,
	Playstation                              = 4,
	Switch                                   = 5,
	ESocialImportPanelPlatform_MAX           = 6,
};

// Enum FortniteGame.EPublishStatus
// NumValues: 0x0006
enum class EPublishStatus : uint8
{
	Banned                                   = 0,
	CannotPublish                            = 1,
	NeedsCreatorName                         = 2,
	CanPublishProvisionally                  = 3,
	CanPublish                               = 4,
	EPublishStatus_MAX                       = 5,
};

// Enum FortniteGame.ETwitchViewerStatusType
// NumValues: 0x0005
enum class ETwitchViewerStatusType : uint8
{
	TwitchViewerStatus_Unknown               = 0,
	TwitchViewerStatus_Nonsubscriber         = 1,
	TwitchViewerStatus_Subscriber            = 2,
	TwitchViewerStatus_Broadcaster           = 3,
	TwitchViewerStatus_Max                   = 4,
};

// Enum FortniteGame.EMegaStormState
// NumValues: 0x0003
enum class EMegaStormState : uint8
{
	GatheringActorList                       = 0,
	DamagingActors                           = 1,
	EMegaStormState_MAX                      = 2,
};

// Enum FortniteGame.EMinigameScoreboardStates
// NumValues: 0x0005
enum class EMinigameScoreboardStates : uint8
{
	RoundEndDisplayWinner                    = 0,
	GameEndDisplayWinner                     = 1,
	RoundEndDisplayScoreboard                = 2,
	GameEndDisplayScoreboard                 = 3,
	Max                                      = 4,
};

// Enum FortniteGame.EMinigameFullscreenMapWidgetType
// NumValues: 0x0003
enum class EMinigameFullscreenMapWidgetType : uint8
{
	Default_Map                              = 0,
	Creative_Scoreboard                      = 1,
	EMinigameFullscreenMapWidgetType_MAX     = 2,
};

// Enum FortniteGame.EFortMinigameExec
// NumValues: 0x0003
enum class EFortMinigameExec : uint8
{
	Yes                                      = 0,
	No                                       = 1,
	EFortMinigameExec_MAX                    = 2,
};

// Enum FortniteGame.EMinigameTeamListType
// NumValues: 0x0003
enum class EMinigameTeamListType : uint8
{
	Blacklist                                = 0,
	Whitelist                                = 1,
	EMinigameTeamListType_MAX                = 2,
};

// Enum FortniteGame.EMinigameCaptureObjectiveState
// NumValues: 0x0003
enum class EMinigameCaptureObjectiveState : uint8
{
	NotCaptured                              = 0,
	Captured                                 = 1,
	EMinigameCaptureObjectiveState_MAX       = 2,
};

// Enum FortniteGame.ETrackedObjectiveQuery
// NumValues: 0x0006
enum class ETrackedObjectiveQuery : uint8
{
	All                                      = 0,
	ExactTeam                                = 1,
	Friendly                                 = 2,
	Neutral                                  = 3,
	Hostile                                  = 4,
	MAX                                      = 5,
};

// Enum FortniteGame.EMinigameScoreType
// NumValues: 0x0003
enum class EMinigameScoreType : uint8
{
	Time                                     = 0,
	PointTotal                               = 1,
	EMinigameScoreType_MAX                   = 2,
};

// Enum FortniteGame.EFortMinigameStatDefinitionHelper
// NumValues: 0x000A
enum class EFortMinigameStatDefinitionHelper : uint8
{
	Unknown                                  = 0,
	PLAYER_Eliminations                      = 1,
	PLAYER_Health                            = 2,
	PLAYER_Assists                           = 3,
	PLAYER_Deaths                            = 4,
	CHALLENGE_All                            = 5,
	AI_Eliminations                          = 6,
	SCORE                                    = 7,
	DESTRUCTABLE_All                         = 8,
	EFortMinigameStatDefinitionHelper_MAX    = 9,
};

// Enum FortniteGame.EFortMinigameStatOperation
// NumValues: 0x0006
enum class EFortMinigameStatOperation : uint8
{
	Equal                                    = 0,
	Less                                     = 1,
	Greater                                  = 2,
	LessOrEqual                              = 3,
	GreaterOrEqual                           = 4,
	EFortMinigameStatOperation_MAX           = 5,
};

// Enum FortniteGame.EFortMinigameStatScope
// NumValues: 0x0004
enum class EFortMinigameStatScope : uint8
{
	Group                                    = 0,
	Team                                     = 1,
	Player                                   = 2,
	EFortMinigameStatScope_MAX               = 3,
};

// Enum FortniteGame.EFortMinigamePostGameSpawnLocationSetting
// NumValues: 0x0003
enum class EFortMinigamePostGameSpawnLocationSetting : uint8
{
	IslandStart                              = 0,
	PreGameLocation                          = 1,
	EFortMinigamePostGameSpawnLocationSetting_MAX = 2,
};

// Enum FortniteGame.EFortMinigamePlayerSpawnLocationSetting
// NumValues: 0x0004
enum class EFortMinigamePlayerSpawnLocationSetting : uint8
{
	SpawnPads                                = 0,
	Air                                      = 1,
	CurrentLocation                          = 2,
	EFortMinigamePlayerSpawnLocationSetting_MAX = 3,
};

// Enum FortniteGame.EFortMiniMapIconRotation
// NumValues: 0x0004
enum class EFortMiniMapIconRotation : uint8
{
	EFMMIR_None                              = 0,
	EFMMIR_Absolute                          = 1,
	EFMMIR_Relative                          = 2,
	EFMMIR_MAX                               = 3,
};

// Enum FortniteGame.EFortMiniMapContext
// NumValues: 0x0003
enum class EFortMiniMapContext : uint8
{
	EFMC_MiniMap                             = 0,
	EFMC_FullScreenMap                       = 1,
	EFMC_MAX                                 = 2,
};

// Enum FortniteGame.EFortMiniMapHeight
// NumValues: 0x0004
enum class EFortMiniMapHeight : uint8
{
	EFMH_Equal                               = 0,
	EFMH_Below                               = 1,
	EFMH_Above                               = 2,
	EFMH_MAX                                 = 3,
};

// Enum FortniteGame.EFortCheatMissionGenType
// NumValues: 0x0004
enum class EFortCheatMissionGenType : uint8
{
	NewGeneration                            = 0,
	OldGeneration                            = 1,
	Max_None                                 = 2,
	EFortCheatMissionGenType_MAX             = 3,
};

// Enum FortniteGame.EFortOptionGenerationResult
// NumValues: 0x0004
enum class EFortOptionGenerationResult : uint8
{
	NoOptionsGenerated                       = 0,
	NewOptionsGenerated                      = 1,
	ExistingOptionsGenerated                 = 2,
	EFortOptionGenerationResult_MAX          = 3,
};

// Enum FortniteGame.EPollActorsInVolumeTypes
// NumValues: 0x0004
enum class EPollActorsInVolumeTypes : uint8
{
	DesignerPlacedOnly                       = 0,
	PlayerBuiltOnly                          = 1,
	All                                      = 2,
	EPollActorsInVolumeTypes_MAX             = 3,
};

// Enum FortniteGame.EMissionReplyTypes
// NumValues: 0x0003
enum class EMissionReplyTypes : uint8
{
	Handled                                  = 0,
	NotHandled                               = 1,
	EMissionReplyTypes_MAX                   = 2,
};

// Enum FortniteGame.EMissionStormShieldState
// NumValues: 0x0004
enum class EMissionStormShieldState : uint8
{
	IDLE                                     = 0,
	GROWING                                  = 1,
	SHRINKING                                = 2,
	MAX                                      = 3,
};

// Enum FortniteGame.ETimerOverrideSetting
// NumValues: 0x0005
enum class ETimerOverrideSetting : uint8
{
	DefaultBehavior                          = 0,
	ForceShow                                = 1,
	ForceHide                                = 2,
	ShowAtEnd                                = 3,
	ETimerOverrideSetting_MAX                = 4,
};

// Enum FortniteGame.EFortMtxPlatform
// NumValues: 0x000C
enum class EFortMtxPlatform : uint8
{
	Epic                                     = 0,
	PSN                                      = 1,
	Live                                     = 2,
	Shared                                   = 3,
	EpicPC                                   = 4,
	EpicPCKorea                              = 5,
	IOSAppStore                              = 6,
	EpicAndroid                              = 7,
	Nintendo                                 = 8,
	WeGame                                   = 9,
	Samsung                                  = 10,
	EFortMtxPlatform_MAX                     = 11,
};

// Enum FortniteGame.EFortMusicSectionType
// NumValues: 0x0005
enum class EFortMusicSectionType : uint8
{
	Intro                                    = 0,
	Loop                                     = 1,
	Outro                                    = 2,
	Max_None                                 = 3,
	EFortMusicSectionType_MAX                = 4,
};

// Enum FortniteGame.EFortMusicSectionStopBehavior
// NumValues: 0x0003
enum class EFortMusicSectionStopBehavior : uint8
{
	Crossfade                                = 0,
	AllowFadeOut                             = 1,
	EFortMusicSectionStopBehavior_MAX        = 2,
};

// Enum FortniteGame.EFortMusicCombatIntensity
// NumValues: 0x0006
enum class EFortMusicCombatIntensity : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	VeryHigh                                 = 3,
	Max_None                                 = 4,
	EFortMusicCombatIntensity_MAX            = 5,
};

// Enum FortniteGame.EMusicChannel
// NumValues: 0x0004
enum class EMusicChannel : uint8
{
	VoiceA                                   = 0,
	VoiceB                                   = 1,
	Max_None                                 = 2,
	EMusicChannel_MAX                        = 3,
};

// Enum FortniteGame.EMusicFadeStyles
// NumValues: 0x0004
enum class EMusicFadeStyles : uint8
{
	CrossFade                                = 0,
	FadeOutThenIn                            = 1,
	Max_None                                 = 2,
	EMusicFadeStyles_MAX                     = 3,
};

// Enum FortniteGame.EMutatorListInitState
// NumValues: 0x0004
enum class EMutatorListInitState : uint32
{
	Default                                  = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	EMutatorListInitState_MAX                = 3,
};

// Enum FortniteGame.EFortAreaFlag
// NumValues: 0x0006
enum class EFortAreaFlag : uint8
{
	Default                                  = 0,
	Obstacle                                 = 1,
	Smashable                                = 2,
	Unwalkable                               = 3,
	Interactable                             = 4,
	EFortAreaFlag_MAX                        = 5,
};

// Enum FortniteGame.EFortNavLinkPattern
// NumValues: 0x0005
enum class EFortNavLinkPattern : uint8
{
	Floor                                    = 0,
	Stairs                                   = 1,
	Roof                                     = 2,
	Manual                                   = 3,
	EFortNavLinkPattern_MAX                  = 4,
};

// Enum FortniteGame.EFortNamedNavmesh
// NumValues: 0x0003
enum class EFortNamedNavmesh : uint8
{
	Husk                                     = 0,
	Smasher                                  = 1,
	MAX                                      = 2,
};

// Enum FortniteGame.EPartyMemberVoiceChatStatus
// NumValues: 0x0006
enum class EPartyMemberVoiceChatStatus : uint8
{
	Disabled                                 = 0,
	Enabled                                  = 1,
	PartyVoice                               = 2,
	GameVoice                                = 3,
	PlatformVoice                            = 4,
	EPartyMemberVoiceChatStatus_MAX          = 5,
};

// Enum FortniteGame.EGameReadiness
// NumValues: 0x0004
enum class EGameReadiness : uint8
{
	NotReady                                 = 0,
	Ready                                    = 1,
	SittingOut                               = 2,
	EGameReadiness_MAX                       = 3,
};

// Enum FortniteGame.ESquadChangeType
// NumValues: 0x0006
enum class ESquadChangeType : uint8
{
	JoinSquad                                = 0,
	BenchSelf                                = 1,
	UnbenchSelf                              = 2,
	Swap                                     = 3,
	None                                     = 4,
	ESquadChangeType_MAX                     = 5,
};

// Enum FortniteGame.EPathUndermineEvent
// NumValues: 0x0004
enum class EPathUndermineEvent : uint8
{
	Predicted                                = 0,
	Started                                  = 1,
	Finished                                 = 2,
	EPathUndermineEvent_MAX                  = 3,
};

// Enum FortniteGame.EPathObstacleAction
// NumValues: 0x0005
enum class EPathObstacleAction : uint8
{
	Melee                                    = 0,
	Ignore                                   = 1,
	AbortMoveAsFailed                        = 2,
	FinishMoveAsSucceeded                    = 3,
	EPathObstacleAction_MAX                  = 4,
};

// Enum FortniteGame.EWardAffectType
// NumValues: 0x0004
enum class EWardAffectType : uint8
{
	AffectsBothStartAndEndPoints             = 0,
	AffectsOnlyStartPoints                   = 1,
	AffectsOnlyEndPoints                     = 2,
	EWardAffectType_MAX                      = 3,
};

// Enum FortniteGame.EFortControlRecoveryBehavior
// NumValues: 0x0004
enum class EFortControlRecoveryBehavior : uint8
{
	DefaultControl                           = 0,
	LimitedControl                           = 1,
	ChainControl                             = 2,
	EFortControlRecoveryBehavior_MAX         = 3,
};

// Enum FortniteGame.EFortPawnPushSize
// NumValues: 0x0005
enum class EFortPawnPushSize : uint8
{
	FFPS_Normal                              = 0,
	FPPS_Player                              = 1,
	FPPS_Large                               = 2,
	FPPS_SuperLarge                          = 3,
	EFortPawnPushSize_MAX                    = 4,
};

// Enum FortniteGame.EFortAnnouncerTeamVocalChords
// NumValues: 0x0004
enum class EFortAnnouncerTeamVocalChords : uint8
{
	Team1                                    = 0,
	Team2                                    = 1,
	Max_None                                 = 2,
	EFortAnnouncerTeamVocalChords_MAX        = 3,
};

// Enum FortniteGame.EFortBadMatchTeamSize
// NumValues: 0x0004
enum class EFortBadMatchTeamSize : uint8
{
	Unspecified                              = 0,
	SmallTeam                                = 1,
	LargeTeam                                = 2,
	EFortBadMatchTeamSize_MAX                = 3,
};

// Enum FortniteGame.EFortBadMatchTriggerOperation
// NumValues: 0x0006
enum class EFortBadMatchTriggerOperation : uint8
{
	LessThan                                 = 0,
	LessThanOrEqual                          = 1,
	Equal                                    = 2,
	GreaterThan                              = 3,
	GreaterThanOrEqual                       = 4,
	EFortBadMatchTriggerOperation_MAX        = 5,
};

// Enum FortniteGame.EFortRewardType
// NumValues: 0x0004
enum class EFortRewardType : uint8
{
	Default                                  = 0,
	Missed                                   = 1,
	Max_None                                 = 2,
	EFortRewardType_MAX                      = 3,
};

// Enum FortniteGame.EFortReplicatedStat
// NumValues: 0x0023
enum class EFortReplicatedStat : uint8
{
	MonsterKills                             = 0,
	MonsterDamagePoints                      = 1,
	PlayerKills                              = 2,
	WoodGathered                             = 3,
	StoneGathered                            = 4,
	MetalGathered                            = 5,
	Deaths                                   = 6,
	BuildingsBuilt                           = 7,
	BuildingsBuilt_Wood                      = 8,
	BuildingsBuilt_Stone                     = 9,
	BuildingsBuilt_Metal                     = 10,
	BuildingsUpgraded_Wood2                  = 11,
	BuildingsUpgraded_Wood3                  = 12,
	BuildingsUpgraded_Stone2                 = 13,
	BuildingsUpgraded_Stone3                 = 14,
	BuildingsUpgraded_Metal2                 = 15,
	BuildingsUpgraded_Metal3                 = 16,
	BuildingsDestroyed                       = 17,
	Repair_Wood                              = 18,
	Repair_Stone                             = 19,
	Repair_Metal                             = 20,
	FlagsCaptured                            = 21,
	FlagsReturned                            = 22,
	ContainersLooted                         = 23,
	CraftingPoints                           = 24,
	TrapPlacementPoints                      = 25,
	TrapActivationPoints                     = 26,
	TotalScore                               = 27,
	OldTotalScore                            = 28,
	CombatScore                              = 29,
	BuildingScore                            = 30,
	UtilityScore                             = 31,
	BadgesScore                              = 32,
	None                                     = 33,
	MAX                                      = 34,
};

// Enum FortniteGame.EFortReplenishmentType
// NumValues: 0x0005
enum class EFortReplenishmentType : uint8
{
	Restricted                               = 0,
	ClampMin                                 = 1,
	Add                                      = 2,
	Ability                                  = 3,
	EFortReplenishmentType_MAX               = 4,
};

// Enum FortniteGame.EFortPickupTossState
// NumValues: 0x0004
enum class EFortPickupTossState : uint8
{
	NotTossed                                = 0,
	InProgress                               = 1,
	AtRest                                   = 2,
	EFortPickupTossState_MAX                 = 3,
};

// Enum FortniteGame.EFortPickupSpawnSource
// NumValues: 0x0007
enum class EFortPickupSpawnSource : uint8
{
	Unset                                    = 0,
	PlayerElimination                        = 1,
	Chest                                    = 2,
	SupplyDrop                               = 3,
	AmmoBox                                  = 4,
	Drone                                    = 5,
	EFortPickupSpawnSource_MAX               = 6,
};

// Enum FortniteGame.EFortPickupSourceTypeFlag
// NumValues: 0x0008
enum class EFortPickupSourceTypeFlag : uint8
{
	Other                                    = 0,
	Player                                   = 1,
	Destruction                              = 2,
	Container                                = 4,
	AI                                       = 8,
	Tossed                                   = 16,
	FloorLoot                                = 32,
	EFortPickupSourceTypeFlag_MAX            = 33,
};

// Enum FortniteGame.EFortPlayerAnimBodyType
// NumValues: 0x0004
enum class EFortPlayerAnimBodyType : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	EFortPlayerAnimBodyType_MAX              = 3,
};

// Enum FortniteGame.EAlertLevel
// NumValues: 0x0006
enum class EAlertLevel : uint8
{
	Unaware                                  = 0,
	Suspicious                               = 1,
	Alerted                                  = 2,
	Threatened                               = 3,
	Count                                    = 4,
	EAlertLevel_MAX                          = 5,
};

// Enum FortniteGame.EDBNOPlayStyle
// NumValues: 0x0006
enum class EDBNOPlayStyle : uint8
{
	Thirsty                                  = 0,
	Default                                  = 1,
	Passive                                  = 2,
	ThristyButPassiveOnPlayers               = 3,
	DefaultButPassiveOnPlayers               = 4,
	EDBNOPlayStyle_MAX                       = 5,
};

// Enum FortniteGame.EFortCrucibleControlsMode
// NumValues: 0x0004
enum class EFortCrucibleControlsMode : uint8
{
	UserOptions                              = 0,
	ForceOn                                  = 1,
	ForceOff                                 = 2,
	EFortCrucibleControlsMode_MAX            = 3,
};

// Enum FortniteGame.EFortCrucibleWhitelistLevel
// NumValues: 0x0004
enum class EFortCrucibleWhitelistLevel : uint8
{
	None                                     = 0,
	Basic                                    = 1,
	Advanced                                 = 2,
	EFortCrucibleWhitelistLevel_MAX          = 3,
};

// Enum FortniteGame.ECreativeQuickbarSlots
// NumValues: 0x0002
enum class ECreativeQuickbarSlots : uint8
{
	Phone                                    = 0,
	ECreativeQuickbarSlots_MAX               = 1,
};

// Enum FortniteGame.EQuickbarSlots
// NumValues: 0x000A
enum class EQuickbarSlots : uint8
{
	HarvestingTool                           = 0,
	Weapon1                                  = 1,
	Weapon2                                  = 2,
	Weapon3                                  = 3,
	Gadget1                                  = 4,
	Gadget2                                  = 5,
	Ability1                                 = 6,
	Ability2                                 = 7,
	Ability3                                 = 8,
	EQuickbarSlots_MAX                       = 9,
};

// Enum FortniteGame.EFortPickerToDisplay
// NumValues: 0x0008
enum class EFortPickerToDisplay : uint8
{
	TrapPicker                               = 0,
	WeaponPicker                             = 1,
	SocialPicker                             = 2,
	ChatPicker                               = 3,
	NotePicker                               = 4,
	EmotePicker                              = 5,
	SquadQuickChatPicker                     = 6,
	EFortPickerToDisplay_MAX                 = 7,
};

// Enum FortniteGame.EMapZoomingMode
// NumValues: 0x0004
enum class EMapZoomingMode : uint8
{
	None                                     = 0,
	ZoomingIn                                = 1,
	ZoomingOut                               = 2,
	EMapZoomingMode_MAX                      = 3,
};

// Enum FortniteGame.EFortIdleDetectionState
// NumValues: 0x0005
enum class EFortIdleDetectionState : uint8
{
	Disabled                                 = 0,
	Default                                  = 1,
	Suspicious                               = 2,
	Inactive                                 = 3,
	EFortIdleDetectionState_MAX              = 4,
};

// Enum FortniteGame.EHighlightReelTypes
// NumValues: 0x0009
enum class EHighlightReelTypes : uint8
{
	Generic                                  = 0,
	GameSummary                              = 1,
	ExtendedGameSummary                      = 2,
	Builder                                  = 3,
	FastMover                                = 4,
	LongDistance                             = 5,
	Multikill                                = 6,
	StormCloud                               = 7,
	EHighlightReelTypes_MAX                  = 8,
};

// Enum FortniteGame.ECameraStateRestoreReason
// NumValues: 0x0008
enum class ECameraStateRestoreReason : uint8
{
	Unknown                                  = 0,
	ChangedFollowTarget                      = 1,
	ChangedCameraType                        = 2,
	InvokedHotKey                            = 3,
	Scrubbed                                 = 4,
	Restored                                 = 5,
	SpecialAction                            = 6,
	MAX                                      = 7,
};

// Enum FortniteGame.EFollow
// NumValues: 0x0004
enum class EFollow : uint8
{
	NextTeammate                             = 0,
	PreviousTeammate                         = 1,
	SpecialActor                             = 2,
	EFollow_MAX                              = 3,
};

// Enum FortniteGame.EFortMotionYawAxis
// NumValues: 0x0003
enum class EFortMotionYawAxis : uint8
{
	Yaw                                      = 0,
	Roll                                     = 1,
	EFortMotionYawAxis_MAX                   = 2,
};

// Enum FortniteGame.EFortInputActionGroup
// NumValues: 0x001C
enum class EFortInputActionGroup : uint8
{
	AllModes                                 = 0,
	Combat                                   = 1,
	Building                                 = 2,
	Movement                                 = 3,
	Edit                                     = 4,
	Death                                    = 5,
	Cinematic                                = 6,
	Picker                                   = 7,
	Other                                    = 8,
	Vehicle                                  = 9,
	ShoppingCart                             = 10,
	GolfCart                                 = 11,
	QuadCrasher                              = 12,
	Biplane                                  = 13,
	Jackal                                   = 14,
	Hamsterball                              = 15,
	ShipCannon                               = 16,
	Spectating                               = 17,
	FullscreenMap                            = 18,
	CreativeAll                              = 19,
	CreativeMoveToolEquipped                 = 20,
	CreativeMoveObjectsFreely                = 21,
	CreativeMoveBuildingsOnGrid              = 22,
	CreativeFlying                           = 23,
	CreativeIslandPanel                      = 24,
	PropSelectorEquipped                     = 25,
	CombatAndBuilding                        = 26,
	EFortInputActionGroup_MAX                = 27,
};

// Enum FortniteGame.EFortInputActionType
// NumValues: 0x0005
enum class EFortInputActionType : uint8
{
	Press                                    = 0,
	Click                                    = 1,
	Hold                                     = 2,
	Release                                  = 3,
	EFortInputActionType_MAX                 = 4,
};

// Enum FortniteGame.EFortInputDevice
// NumValues: 0x0005
enum class EFortInputDevice : uint8
{
	Mouse                                    = 0,
	Keyboard                                 = 1,
	Gamepad                                  = 2,
	Touch                                    = 3,
	EFortInputDevice_MAX                     = 4,
};

// Enum FortniteGame.EItemInteractionStatus
// NumValues: 0x0004
enum class EItemInteractionStatus : uint8
{
	Interrupted                              = 0,
	Completed                                = 1,
	TimedOut                                 = 2,
	EItemInteractionStatus_MAX               = 3,
};

// Enum FortniteGame.EItemInteractionType
// NumValues: 0x0004
enum class EItemInteractionType : uint8
{
	Search                                   = 0,
	LockOnSearch                             = 1,
	None                                     = 2,
	EItemInteractionType_MAX                 = 3,
};

// Enum FortniteGame.EBodyPartVisibilityGrouping
// NumValues: 0x0005
enum class EBodyPartVisibilityGrouping : uint8
{
	AllParts                                 = 0,
	AllButHead                               = 1,
	OnlyBackBling                            = 2,
	BackBlingAndCharm                        = 3,
	EBodyPartVisibilityGrouping_MAX          = 4,
};

// Enum FortniteGame.EBackpackType
// NumValues: 0x0005
enum class EBackpackType : uint8
{
	Jetpack                                  = 0,
	Medic                                    = 1,
	StormTracker                             = 2,
	Glider                                   = 3,
	EBackpackType_MAX                        = 4,
};

// Enum FortniteGame.ETrustedPlatformType
// NumValues: 0x0006
enum class ETrustedPlatformType : uint8
{
	Unknown                                  = 0,
	Untrusted                                = 1,
	PS4                                      = 2,
	XboxOne                                  = 3,
	Switch                                   = 4,
	ETrustedPlatformType_MAX                 = 5,
};

// Enum FortniteGame.ETeamMemberState
// NumValues: 0x000F
enum class ETeamMemberState : uint8
{
	None                                     = 0,
	FIRST_CHAT_MESSAGE                       = 1,
	NeedAmmoHeavy                            = 1,
	NeedAmmoLight                            = 2,
	NeedAmmoMedium                           = 3,
	NeedAmmoShells                           = 4,
	NeedAmmoRocket                           = 5,
	ChatBubble                               = 6,
	EnemySpotted                             = 7,
	NeedBandages                             = 8,
	NeedMaterials                            = 9,
	NeedShields                              = 10,
	NeedWeapon                               = 11,
	LAST_CHAT_MESSAGE                        = 11,
	MAX                                      = 12,
};

// Enum FortniteGame.EFortPawnState
// NumValues: 0x0007
enum class EFortPawnState : uint8
{
	Default                                  = 0,
	InCombat                                 = 1,
	DBNO                                     = 2,
	IsReviving                               = 4,
	BeingRevived                             = 8,
	Dead                                     = 16,
	EFortPawnState_MAX                       = 17,
};

// Enum FortniteGame.EFortPlayerSurveyAnalyticsFinishReason
// NumValues: 0x0003
enum class EFortPlayerSurveyAnalyticsFinishReason : uint8
{
	Submitted                                = 0,
	Canceled                                 = 1,
	EFortPlayerSurveyAnalyticsFinishReason_MAX = 2,
};

// Enum FortniteGame.EFortPlayerSurveyQuestionPresentationStyle
// NumValues: 0x0005
enum class EFortPlayerSurveyQuestionPresentationStyle : uint8
{
	Invalid                                  = 0,
	Standard                                 = 1,
	MultipleChoice_Rating                    = 2,
	Num                                      = 3,
	EFortPlayerSurveyQuestionPresentationStyle_MAX = 4,
};

// Enum FortniteGame.EFortPlayerSurveyQuestionType
// NumValues: 0x0006
enum class EFortPlayerSurveyQuestionType : uint8
{
	Invalid                                  = 0,
	MultipleChoice                           = 1,
	MultipleSelection                        = 2,
	FreeFormText                             = 3,
	Num                                      = 4,
	EFortPlayerSurveyQuestionType_MAX        = 5,
};

// Enum FortniteGame.EVehicleTrickType
// NumValues: 0x0012
enum class EVehicleTrickType : uint8
{
	None                                     = 0,
	RollIncrement                            = 1,
	ReverseRollIncrement                     = 2,
	YawIncrement                             = 3,
	ReverseYawIncrement                      = 4,
	PitchIncrement                           = 5,
	ReversePitchIncrement                    = 6,
	HeightIncrement                          = 7,
	DistanceIncrement                        = 8,
	AirTimeIncrement                         = 9,
	ShoppingCart_Flying                      = 10,
	ShoppingCart_Stooping                    = 11,
	StartedLanding                           = 12,
	FailedLanding                            = 13,
	Cancelled                                = 14,
	StuckLanding                             = 15,
	Count                                    = 16,
	EVehicleTrickType_MAX                    = 17,
};

// Enum FortniteGame.EVehicleTrickAxis
// NumValues: 0x0008
enum class EVehicleTrickAxis : uint8
{
	X                                        = 0,
	XNeg                                     = 1,
	Y                                        = 2,
	YNeg                                     = 3,
	Z                                        = 4,
	ZNeg                                     = 5,
	Count                                    = 6,
	EVehicleTrickAxis_MAX                    = 7,
};

// Enum FortniteGame.EDBNOType
// NumValues: 0x0004
enum class EDBNOType : uint8
{
	On                                       = 0,
	Off                                      = 1,
	NotWhenRespawning                        = 2,
	EDBNOType_MAX                            = 3,
};

// Enum FortniteGame.EWeaponSelectionPreservationType
// NumValues: 0x0003
enum class EWeaponSelectionPreservationType : uint8
{
	KeepSelectionWhenRespawning              = 0,
	NeverKeepSelection                       = 1,
	EWeaponSelectionPreservationType_MAX     = 2,
};

// Enum FortniteGame.ERewardPlacementBonusType
// NumValues: 0x000F
enum class ERewardPlacementBonusType : uint8
{
	Solo                                     = 0,
	Duo                                      = 1,
	Squad                                    = 2,
	LargeTeam                                = 3,
	None                                     = 4,
	TwoTeam                                  = 5,
	MediumTeam                               = 6,
	QuickSolo                                = 7,
	QuickDuo                                 = 8,
	QuickSquad                               = 9,
	QuickLargeTeam                           = 10,
	QuickTwoTeam                             = 11,
	QuickMediumTeam                          = 12,
	SinglePlacement                          = 13,
	ERewardPlacementBonusType_MAX            = 14,
};

// Enum FortniteGame.ERewardTimePlayedType
// NumValues: 0x0004
enum class ERewardTimePlayedType : uint8
{
	Default                                  = 0,
	NoReward                                 = 1,
	FlatValue                                = 2,
	ERewardTimePlayedType_MAX                = 3,
};

// Enum FortniteGame.EPlaylistUIExtensionSlot
// NumValues: 0x0010
enum class EPlaylistUIExtensionSlot : uint8
{
	Primary                                  = 0,
	TopRightCorner                           = 1,
	GameInfoBox                              = 2,
	Quickbar                                 = 3,
	UpperCenter                              = 4,
	CrosshairRight                           = 5,
	UnderSquadInfo                           = 6,
	FullScreenMap                            = 7,
	BelowRespawnWidget                       = 8,
	BelowCompass                             = 9,
	UnderTeammateStatus                      = 10,
	ControllerBindingCallout                 = 11,
	AboveStormMessageSlot                    = 12,
	CustomMinigameCallouts                   = 13,
	UnderLocalPlayerInfo                     = 14,
	EPlaylistUIExtensionSlot_MAX             = 15,
};

// Enum FortniteGame.EAthenaWinCondition
// NumValues: 0x0008
enum class EAthenaWinCondition : uint8
{
	LastManStanding                          = 0,
	LastManStandingIncludingAllies           = 1,
	TimedTeamFinalFight                      = 2,
	FirstToGoalScore                         = 3,
	TimedLastMenStanding                     = 4,
	MutatorControlled                        = 5,
	MutatorControlledGoalScore               = 6,
	EAthenaWinCondition_MAX                  = 7,
};

// Enum FortniteGame.EAthenaRespawnLocation
// NumValues: 0x0003
enum class EAthenaRespawnLocation : uint8
{
	LastDeath                                = 0,
	CreativePlayerStart                      = 1,
	EAthenaRespawnLocation_MAX               = 2,
};

// Enum FortniteGame.EAthenaRespawnType
// NumValues: 0x0004
enum class EAthenaRespawnType : uint8
{
	None                                     = 0,
	InfiniteRespawn                          = 1,
	InfiniteRespawnExceptStorm               = 2,
	EAthenaRespawnType_MAX                   = 3,
};

// Enum FortniteGame.EPlaylistVisibilityState
// NumValues: 0x0004
enum class EPlaylistVisibilityState : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	Hidden                                   = 2,
	EPlaylistVisibilityState_MAX             = 3,
};

// Enum FortniteGame.EPlaylistAdvertisementType
// NumValues: 0x0004
enum class EPlaylistAdvertisementType : uint8
{
	None                                     = 0,
	New                                      = 1,
	Updated                                  = 2,
	EPlaylistAdvertisementType_MAX           = 3,
};

// Enum FortniteGame.EPlaysetOffsetType
// NumValues: 0x0003
enum class EPlaysetOffsetType : uint8
{
	CustomOffsetFromCorner                   = 0,
	Center                                   = 1,
	EPlaysetOffsetType_MAX                   = 2,
};

// Enum FortniteGame.EProfileGoState
// NumValues: 0x0007
enum class EProfileGoState : uint8
{
	None                                     = 0,
	SettlingLocation                         = 1,
	RunningCommands                          = 2,
	CompletedScenario                        = 3,
	Summary                                  = 4,
	Completed                                = 5,
	EProfileGoState_MAX                      = 6,
};

// Enum FortniteGame.EFortPointsFromNavGraphGoalPathDistanceFilterOperator
// NumValues: 0x0003
enum class EFortPointsFromNavGraphGoalPathDistanceFilterOperator : uint8
{
	AllGoalsInRange                          = 0,
	AnyGoalInRange                           = 1,
	EFortPointsFromNavGraphGoalPathDistanceFilterOperator_MAX = 2,
};

// Enum FortniteGame.EFortTestGoalActorDot
// NumValues: 0x0003
enum class EFortTestGoalActorDot : uint8
{
	Dot3D                                    = 0,
	Dot2D                                    = 1,
	EFortTestGoalActorDot_MAX                = 2,
};

// Enum FortniteGame.EDistanceMode
// NumValues: 0x0004
enum class EDistanceMode : uint8
{
	DistItemToContext                        = 0,
	DistItemGoalActorToContext               = 1,
	DistItemToItemGoalActor                  = 2,
	EDistanceMode_MAX                        = 3,
};

// Enum FortniteGame.ECountAIAssignedToType
// NumValues: 0x0004
enum class ECountAIAssignedToType : uint8
{
	Goal                                     = 0,
	Actor                                    = 1,
	Assignment                               = 2,
	ECountAIAssignedToType_MAX               = 3,
};

// Enum FortniteGame.ETwoPointSolverRotationA
// NumValues: 0x0006
enum class ETwoPointSolverRotationA : uint8
{
	PointAToQuerier                          = 0,
	QuerierToPointA                          = 1,
	PointAToQuerierWithRandomOffset          = 2,
	QuerierToPointAWithRandomOffset          = 3,
	Custom                                   = 4,
	ETwoPointSolverRotationA_MAX             = 5,
};

// Enum FortniteGame.EObjectiveStatusUpdateType
// NumValues: 0x0005
enum class EObjectiveStatusUpdateType : uint8
{
	Always                                   = 0,
	OnPercent                                = 1,
	OnComplete                               = 2,
	Never                                    = 3,
	EObjectiveStatusUpdateType_MAX           = 4,
};

// Enum FortniteGame.EFortQuestRewardType
// NumValues: 0x0003
enum class EFortQuestRewardType : uint8
{
	BasicRewards                             = 0,
	BasicPlusSingleChoice                    = 1,
	EFortQuestRewardType_MAX                 = 2,
};

// Enum FortniteGame.EFortQuestType
// NumValues: 0x0010
enum class EFortQuestType : uint8
{
	Task                                     = 0,
	Optional                                 = 1,
	DailyQuest                               = 2,
	TransientQuest                           = 3,
	SurvivorQuest                            = 4,
	Achievement                              = 5,
	Onboarding                               = 6,
	StreamBroadcaster                        = 7,
	StreamViewer                             = 8,
	StreamSubscriber                         = 9,
	Athena                                   = 10,
	AthenaDailyQuest                         = 11,
	AthenaEvent                              = 12,
	AthenaChallengeBundleQuest               = 13,
	All                                      = 14,
	EFortQuestType_MAX                       = 15,
};

// Enum FortniteGame.ECosmeticType
// NumValues: 0x0003
enum class ECosmeticType : uint8
{
	Image                                    = 0,
	Widget                                   = 1,
	ECosmeticType_MAX                        = 2,
};

// Enum FortniteGame.EFortQuestMapNodeLabelPosition
// NumValues: 0x0003
enum class EFortQuestMapNodeLabelPosition : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	EFortQuestMapNodeLabelPosition_MAX       = 2,
};

// Enum FortniteGame.EFortQuestMapNodeType
// NumValues: 0x0003
enum class EFortQuestMapNodeType : uint8
{
	MandatoryQuest                           = 0,
	SideQuest                                = 1,
	EFortQuestMapNodeType_MAX                = 2,
};

// Enum FortniteGame.EFortQuestObjectiveItemEvent
// NumValues: 0x0021
enum class EFortQuestObjectiveItemEvent : uint8
{
	Craft                                    = 0,
	Collect                                  = 1,
	Acquire                                  = 2,
	Consume                                  = 3,
	OpenCardPack                             = 4,
	PurchaseCardPack                         = 5,
	Convert                                  = 6,
	Upgrade                                  = 7,
	UpgradeRarity                            = 8,
	QuestComplete                            = 9,
	AssignWorker                             = 10,
	LevelUpCollectionBook                    = 11,
	LevelUpAthenaSeason                      = 12,
	LevelUpBattlePass                        = 13,
	GainAthenaSeasonXp                       = 14,
	HasItem                                  = 15,
	HasAccumulatedItem                       = 16,
	SlotInCollection                         = 17,
	AlterationRespec                         = 18,
	AlterationUpgrade                        = 19,
	HasCompletedQuest                        = 20,
	HasAssignedWorker                        = 21,
	HasUpgraded                              = 22,
	HasConverted                             = 23,
	HasUpgradedRarity                        = 24,
	HasLeveledUpCollectionBook               = 25,
	SlotHeroInLoadout                        = 26,
	HasLeveledUpAthenaSeason                 = 27,
	HasLeveledUpBattlePass                   = 28,
	HasGainedAthenaSeasonXp                  = 29,
	MinigameTime                             = 30,
	Max_None                                 = 31,
	EFortQuestObjectiveItemEvent_MAX         = 32,
};

// Enum FortniteGame.EFortChallengeBundleInfoLockedReasonCode
// NumValues: 0x0006
enum class EFortChallengeBundleInfoLockedReasonCode : uint8
{
	Unlocked                                 = 0,
	NoKnownUnlockMethod                      = 1,
	PurchaseTheBattlePass                    = 2,
	ReachSpecificTier                        = 3,
	TimeLeftBeforeUnlock                     = 4,
	EFortChallengeBundleInfoLockedReasonCode_MAX = 5,
};

// Enum FortniteGame.EFortQuestState
// NumValues: 0x0005
enum class EFortQuestState : uint8
{
	Inactive                                 = 0,
	Active                                   = 1,
	Completed                                = 2,
	Claimed                                  = 3,
	EFortQuestState_MAX                      = 4,
};

// Enum FortniteGame.ERegisteredPlayerUnregistrationStatus
// NumValues: 0x0008
enum class ERegisteredPlayerUnregistrationStatus : uint8
{
	Registered                               = 0,
	UnregistrationStarting                   = 1,
	UnregistrationWaitingForInitialLock      = 2,
	UnregistrationWaitingForScoreSave        = 3,
	UnregistrationWaitingForFinalSave        = 4,
	UnregistrationWaitingForProfileUnlock    = 5,
	UnregistrationComplete                   = 6,
	ERegisteredPlayerUnregistrationStatus_MAX = 7,
};

// Enum FortniteGame.ESpectatorSquadIdMode
// NumValues: 0x0004
enum class ESpectatorSquadIdMode : uint8
{
	AlwaysOff                                = 0,
	AlwaysOn                                 = 1,
	HoldToDisplay                            = 2,
	ESpectatorSquadIdMode_MAX                = 3,
};

// Enum FortniteGame.EEventMatchScreen
// NumValues: 0x0006
enum class EEventMatchScreen : uint8
{
	None                                     = 0,
	ActivePlayerGrid                         = 1,
	EliminatedPlayerGrid                     = 2,
	MatchStatus                              = 3,
	Scoreboard                               = 4,
	EEventMatchScreen_MAX                    = 5,
};

// Enum FortniteGame.EDroneFollowMode
// NumValues: 0x0005
enum class EDroneFollowMode : uint8
{
	None                                     = 0,
	ForceFacingLocation                      = 1,
	ForceFacingFollowedPlayer                = 2,
	TetherToFollowedPlayer                   = 3,
	MAX                                      = 4,
};

// Enum FortniteGame.EHighlightFeatures
// NumValues: 0x000C
enum class EHighlightFeatures : uint8
{
	INVALID                                  = 0,
	FollowingPlayerKill                      = 1,
	FollowingPlayerDeath                     = 2,
	InterestingDeathCause                    = 3,
	BusyBuilder                              = 4,
	FastMover                                = 5,
	LongDistanceKill                         = 6,
	Multikill                                = 7,
	StormCloudAction                         = 8,
	WinningMoment                            = 9,
	COUNT                                    = 10,
	EHighlightFeatures_MAX                   = 11,
};

// Enum FortniteGame.EClassRepNodeMapping
// NumValues: 0x0006
enum class EClassRepNodeMapping : uint8
{
	NotRouted                                = 0,
	RelevantAllConnections                   = 1,
	Spatialize_Static                        = 2,
	Spatialize_Dynamic                       = 3,
	Spatialize_Dormancy                      = 4,
	EClassRepNodeMapping_MAX                 = 5,
};

// Enum FortniteGame.EFortSafeZoneState
// NumValues: 0x0005
enum class EFortSafeZoneState : uint8
{
	None                                     = 0,
	Starting                                 = 1,
	Holding                                  = 2,
	Shrinking                                = 3,
	EFortSafeZoneState_MAX                   = 4,
};

// Enum FortniteGame.EFortUIScoreType
// NumValues: 0x0008
enum class EFortUIScoreType : uint8
{
	Combat                                   = 0,
	Building                                 = 1,
	Utility                                  = 2,
	Badges                                   = 3,
	Bonus                                    = 4,
	Total                                    = 5,
	Max_None                                 = 6,
	EFortUIScoreType_MAX                     = 7,
};

// Enum FortniteGame.EFortScriptedActionEnvironment
// NumValues: 0x0005
enum class EFortScriptedActionEnvironment : uint8
{
	FrontEnd                                 = 0,
	GameServer                               = 1,
	GameClient                               = 2,
	Max_None                                 = 3,
	EFortScriptedActionEnvironment_MAX       = 4,
};

// Enum FortniteGame.EFortScriptedActionSource
// NumValues: 0x0005
enum class EFortScriptedActionSource : uint8
{
	Quest                                    = 0,
	Token                                    = 1,
	Manual                                   = 2,
	Max_None                                 = 3,
	EFortScriptedActionSource_MAX            = 4,
};

// Enum FortniteGame.EServerManifestOutputFormat
// NumValues: 0x0004
enum class EServerManifestOutputFormat : uint8
{
	FlatFile                                 = 0,
	Json                                     = 1,
	HTTP                                     = 2,
	EServerManifestOutputFormat_MAX          = 3,
};

// Enum FortniteGame.EServerManifestCommandType
// NumValues: 0x0004
enum class EServerManifestCommandType : uint8
{
	Move                                     = 0,
	Copy                                     = 1,
	Unknown                                  = 2,
	EServerManifestCommandType_MAX           = 3,
};

// Enum FortniteGame.EFortSessionHelperJoinState
// NumValues: 0x0009
enum class EFortSessionHelperJoinState : uint8
{
	NotJoining                               = 0,
	RequestingReservation                    = 1,
	FailedReservation                        = 2,
	WaitingOnGame                            = 3,
	AttemptingJoin                           = 4,
	JoiningSession                           = 5,
	FailedJoin                               = 6,
	CanceledJoin                             = 7,
	EFortSessionHelperJoinState_MAX          = 8,
};

// Enum FortniteGame.ESendFriendInviteFailureReason
// NumValues: 0x0009
enum class ESendFriendInviteFailureReason : uint8
{
	NotFound                                 = 0,
	AlreadyFriends                           = 1,
	InvitePending                            = 2,
	AddingSelfFail                           = 3,
	AddingBlockedFail                        = 4,
	AutoDeclined                             = 5,
	BlockedByTarget                          = 6,
	UnknownError                             = 7,
	ESendFriendInviteFailureReason_MAX       = 8,
};

// Enum FortniteGame.EFortSoundIndicatorTypes
// NumValues: 0x0008
enum class EFortSoundIndicatorTypes : uint8
{
	Generic                                  = 0,
	FootStep                                 = 1,
	Gunshot                                  = 2,
	Chest                                    = 3,
	Glider                                   = 4,
	Vehicle                                  = 5,
	COUNT                                    = 6,
	EFortSoundIndicatorTypes_MAX             = 7,
};

// Enum FortniteGame.EFortSpawnActorTime
// NumValues: 0x0003
enum class EFortSpawnActorTime : uint8
{
	PostPlaylistLoad                         = 0,
	StartOfStormHoldTime                     = 1,
	EFortSpawnActorTime_MAX                  = 2,
};

// Enum FortniteGame.EFortEventConditionType
// NumValues: 0x0003
enum class EFortEventConditionType : uint8
{
	EFEC_StatCompare                         = 0,
	EFEC_CanCraft                            = 1,
	EFEC_MAX                                 = 2,
};

// Enum FortniteGame.EFortCompare
// NumValues: 0x0006
enum class EFortCompare : uint8
{
	EFC_LessThan                             = 0,
	EFC_LessThanOrEqual                      = 1,
	EFC_GreaterThan                          = 2,
	EFC_GreaterThanOrEqual                   = 3,
	EFC_Equals                               = 4,
	EFC_MAX                                  = 5,
};

// Enum FortniteGame.EFortEventRepeat
// NumValues: 0x0006
enum class EFortEventRepeat : uint8
{
	EFER_Inactive                            = 0,
	EFER_Always                              = 1,
	EFER_OncePerPlayer                       = 2,
	EFER_OncePerCampaign                     = 3,
	EFER_OncePerMap                          = 4,
	EFER_MAX                                 = 5,
};

// Enum FortniteGame.EFortStatType
// NumValues: 0x000A
enum class EFortStatType : uint8
{
	Fortitude                                = 0,
	Offense                                  = 1,
	Resistance                               = 2,
	Technology                               = 3,
	Fortitude_Team                           = 4,
	Offense_Team                             = 5,
	Resistance_Team                          = 6,
	Technology_Team                          = 7,
	Invalid                                  = 8,
	EFortStatType_MAX                        = 9,
};

// Enum FortniteGame.ESupplyDropItemTrackType
// NumValues: 0x0002
enum class ESupplyDropItemTrackType : uint8
{
	SpecialActors                            = 0,
	ESupplyDropItemTrackType_MAX             = 1,
};

// Enum FortniteGame.ESupplyDropSpawnType
// NumValues: 0x0003
enum class ESupplyDropSpawnType : uint8
{
	SafeZoneDriven                           = 0,
	ItemDeliveryManagement                   = 1,
	ESupplyDropSpawnType_MAX                 = 2,
};

// Enum FortniteGame.EFortAutoTestState
// NumValues: 0x000A
enum class EFortAutoTestState : uint8
{
	InitialLoad                              = 0,
	Login                                    = 1,
	FrontendLoad                             = 2,
	FrontendPvELoad                          = 3,
	FrontendPvETest                          = 4,
	PvEMatchmaking                           = 5,
	ZoneLoad                                 = 6,
	ZoneTest                                 = 7,
	Finished                                 = 8,
	MAX                                      = 9,
};

// Enum FortniteGame.EReplaySmokeTestStep
// NumValues: 0x001F
enum class EReplaySmokeTestStep : uint8
{
	Setup                                    = 0,
	TogglePause                              = 1,
	StepForward                              = 2,
	StepBackward                             = 3,
	StepToEnd                                = 4,
	StepToBeginning                          = 5,
	SpeedUpPlayback                          = 6,
	SlowDownPlayback                         = 7,
	ToggleHideTimeline                       = 8,
	IterateCameraModes                       = 9,
	TogglePlayerOutlines                     = 10,
	ToggleNamePlates                         = 11,
	ToggleReplayRegion                       = 12,
	ZoomIn                                   = 13,
	ZoomOut                                  = 14,
	ToggleAutoFollowThirdPerson              = 15,
	IncreaseExposure                         = 16,
	DecreaseExposure                         = 17,
	SetAutoExposure                          = 18,
	IncreaseAperture                         = 19,
	DecreaseAperture                         = 20,
	IncreaseFocalLength                      = 21,
	DecreaseFocalLength                      = 22,
	IncreaseFocusDistance                    = 23,
	DecreaseFocusDistance                    = 24,
	SetAutoFocus                             = 25,
	ToggleDamageEffects                      = 26,
	ToggleHideUI                             = 27,
	ToggleMap                                = 28,
	Reset                                    = 29,
	MAX                                      = 30,
};

// Enum FortniteGame.EFortTheaterType
// NumValues: 0x0008
enum class EFortTheaterType : uint8
{
	Standard                                 = 0,
	Elder                                    = 1,
	PvP                                      = 2,
	PvP2                                     = 3,
	Tutorial                                 = 4,
	TutorialGate                             = 5,
	Max_None                                 = 6,
	EFortTheaterType_MAX                     = 7,
};

// Enum FortniteGame.EFortTheaterMapTileType
// NumValues: 0x0007
enum class EFortTheaterMapTileType : uint8
{
	Normal                                   = 0,
	CriticalMission                          = 1,
	AlwaysActive                             = 2,
	Outpost                                  = 3,
	NonMission                               = 4,
	PvPFOB                                   = 5,
	EFortTheaterMapTileType_MAX              = 6,
};

// Enum FortniteGame.EFortMapNavigationDirection
// NumValues: 0x000A
enum class EFortMapNavigationDirection : uint8
{
	North                                    = 0,
	NorthEast                                = 1,
	East                                     = 2,
	SouthEast                                = 3,
	South                                    = 4,
	SouthWest                                = 5,
	West                                     = 6,
	NorthWest                                = 7,
	Invalid                                  = 8,
	EFortMapNavigationDirection_MAX          = 9,
};

// Enum FortniteGame.EFortMissionQuestValidityResult
// NumValues: 0x0006
enum class EFortMissionQuestValidityResult : uint8
{
	Invalid                                  = 0,
	InvalidNotPlayable                       = 1,
	ValidLinked                              = 2,
	ValidObjectiveCondition                  = 3,
	ValidFallback                            = 4,
	EFortMissionQuestValidityResult_MAX      = 5,
};

// Enum FortniteGame.ECollectionSelectionMethod
// NumValues: 0x0006
enum class ECollectionSelectionMethod : uint8
{
	TierAsIndex                              = 0,
	TierAsIndexOverflowToLastValid           = 1,
	Modulo                                   = 2,
	Random                                   = 3,
	None                                     = 4,
	ECollectionSelectionMethod_MAX           = 5,
};

// Enum FortniteGame.EPayoutScoringType
// NumValues: 0x0006
enum class EPayoutScoringType : uint8
{
	Invalid                                  = 0,
	Points                                   = 1,
	Ranking                                  = 2,
	Percentile                               = 3,
	Persistent                               = 4,
	EPayoutScoringType_MAX                   = 5,
};

// Enum FortniteGame.EPayoutRewardType
// NumValues: 0x0005
enum class EPayoutRewardType : uint8
{
	Invalid                                  = 0,
	Commerce                                 = 1,
	GameRelated                              = 2,
	Token                                    = 3,
	EPayoutRewardType_MAX                    = 4,
};

// Enum FortniteGame.EScoreMatchOperator
// NumValues: 0x0007
enum class EScoreMatchOperator : uint8
{
	Invalid                                  = 0,
	LessThan                                 = 1,
	LessThanOrEqual                          = 2,
	Equal                                    = 3,
	GreaterThan                              = 4,
	GreaterThanOrEqual                       = 5,
	EScoreMatchOperator_MAX                  = 6,
};

// Enum FortniteGame.EMessageFeedSubject
// NumValues: 0x0003
enum class EMessageFeedSubject : uint8
{
	ToyOwner                                 = 0,
	OtherPlayerInteractingWithToy            = 1,
	EMessageFeedSubject_MAX                  = 2,
};

// Enum FortniteGame.EMessageFeedRelationshipFilter
// NumValues: 0x0005
enum class EMessageFeedRelationshipFilter : uint8
{
	Anyone                                   = 0,
	SquadAndTeamMembers                      = 1,
	SquadMembersOnly                         = 2,
	SelfOnly                                 = 3,
	EMessageFeedRelationshipFilter_MAX       = 4,
};

// Enum FortniteGame.ETrackVerticality
// NumValues: 0x0005
enum class ETrackVerticality : uint8
{
	Floor                                    = 0,
	Ramp                                     = 1,
	GradualRamp                              = 2,
	Max_None                                 = 3,
	ETrackVerticality_MAX                    = 4,
};

// Enum FortniteGame.ETrackIncline
// NumValues: 0x0008
enum class ETrackIncline : uint8
{
	NoNeighbor                               = 0,
	Flat                                     = 1,
	Up                                       = 2,
	Down                                     = 3,
	GradualUp                                = 4,
	GradualDown                              = 5,
	Max_None                                 = 6,
	ETrackIncline_MAX                        = 7,
};

// Enum FortniteGame.ETrackPieceType
// NumValues: 0x0007
enum class ETrackPieceType : uint8
{
	None                                     = 0,
	Straight                                 = 1,
	Turn                                     = 2,
	TShape                                   = 3,
	Cross                                    = 4,
	Max_None                                 = 5,
	ETrackPieceType_MAX                      = 6,
};

// Enum FortniteGame.ETrackDirection
// NumValues: 0x0006
enum class ETrackDirection : uint8
{
	YNegative                                = 0,
	XPositive                                = 1,
	YPositive                                = 2,
	XNegative                                = 3,
	Max_None                                 = 4,
	ETrackDirection_MAX                      = 5,
};

// Enum FortniteGame.EMessageDispatcherErrorMessageType
// NumValues: 0x0007
enum class EMessageDispatcherErrorMessageType : uint8
{
	FailedToSetTrigger_TooManyTriggers       = 0,
	FailedToSetReceiver_TooManyReceivers     = 1,
	FailedToSetReceiver_TooManyReceiversOnOneChannel = 2,
	FailedToSetTriggerReceiver_InvalidChannel = 3,
	FailedToEnqueueMessage                   = 4,
	UnknownError                             = 5,
	EMessageDispatcherErrorMessageType_MAX   = 6,
};

// Enum FortniteGame.EFortLeaderboardMetric
// NumValues: 0x0003
enum class EFortLeaderboardMetric : uint8
{
	Score                                    = 0,
	Kills                                    = 1,
	EFortLeaderboardMetric_MAX               = 2,
};

// Enum FortniteGame.EFortHomingStyle
// NumValues: 0x0006
enum class EFortHomingStyle : uint8
{
	None                                     = 0,
	LockOn                                   = 1,
	LaserTargeted                            = 2,
	LaserTargeted_NoTrace                    = 3,
	DrunkArtillery                           = 4,
	EFortHomingStyle_MAX                     = 5,
};

// Enum FortniteGame.UFortMatchmakingKnobsDataSource
// NumValues: 0x0008
enum class EUFortMatchmakingKnobsDataSource : uint8
{
	None                                     = 0,
	Playlist                                 = 1,
	Mutator                                  = 2,
	GameMode                                 = 3,
	Permissions                              = 4,
	UISettings                               = 5,
	CreativeGlobalOption                     = 6,
	Max                                      = 7,
};

// Enum FortniteGame.ECreativeItemCategory
// NumValues: 0x0006
enum class ECreativeItemCategory : uint8
{
	Prefabs                                  = 0,
	Devices                                  = 1,
	Weapons                                  = 2,
	Consumables                              = 3,
	Gallery                                  = 4,
	ECreativeItemCategory_MAX                = 5,
};

// Enum FortniteGame.EFortPlaylistTeamSizeType
// NumValues: 0x0006
enum class EFortPlaylistTeamSizeType : uint8
{
	Solo                                     = 0,
	Duo                                      = 1,
	Trio                                     = 2,
	Squad                                    = 3,
	LargeTeam                                = 4,
	MAX                                      = 5,
};

// Enum FortniteGame.EFortGameFeatureState
// NumValues: 0x000B
enum class EFortGameFeatureState : uint8
{
	Unknown                                  = 0,
	Unavailable                              = 1,
	Downloading                              = 2,
	DownloadFailed                           = 3,
	Available                                = 4,
	Preloading                               = 5,
	Preloaded                                = 6,
	Loading                                  = 7,
	Loaded                                   = 8,
	Count                                    = 8,
	EFortGameFeatureState_MAX                = 9,
};

// Enum FortniteGame.EFortGameFeature
// NumValues: 0x000B
enum class EFortGameFeature : uint8
{
	EarlyStartup                             = 0,
	DedicatedServer                          = 1,
	KairosInitial                            = 2,
	KairosCapture                            = 3,
	WorldAR                                  = 4,
	Frontend                                 = 5,
	GameplayAthena                           = 6,
	GameplayCampaign                         = 7,
	Invalid                                  = 8,
	Count                                    = 8,
	EFortGameFeature_MAX                     = 9,
};

// Enum FortniteGame.EFortStartupPhase
// NumValues: 0x0008
enum class EFortStartupPhase : uint8
{
	InitializingEngine                       = 0,
	EarlyStartupLoading                      = 1,
	EarlyStartupFinished                     = 2,
	GameStartupLoading                       = 3,
	GameStartupFinished                      = 4,
	Invalid                                  = 5,
	Count                                    = 5,
	EFortStartupPhase_MAX                    = 6,
};

// Enum FortniteGame.EFortCreativeAdColorPreset
// NumValues: 0x0008
enum class EFortCreativeAdColorPreset : uint8
{
	Default                                  = 0,
	Emphasized                               = 1,
	Common                                   = 2,
	Uncommon                                 = 3,
	Rare                                     = 4,
	Epic                                     = 5,
	Legendary                                = 6,
	EFortCreativeAdColorPreset_MAX           = 7,
};

// Enum FortniteGame.EFortCreativeAdType
// NumValues: 0x0007
enum class EFortCreativeAdType : uint8
{
	Default                                  = 0,
	Playset                                  = 1,
	Toy                                      = 2,
	Game                                     = 3,
	Island                                   = 4,
	Knob                                     = 5,
	EFortCreativeAdType_MAX                  = 6,
};

// Enum FortniteGame.EEventTournamentType
// NumValues: 0x0005
enum class EEventTournamentType : uint8
{
	Online                                   = 0,
	Onsite                                   = 1,
	Test                                     = 2,
	Unknown                                  = 3,
	EEventTournamentType_MAX                 = 4,
};

// Enum FortniteGame.EFortLobbyType
// NumValues: 0x0005
enum class EFortLobbyType : uint8
{
	Default                                  = 0,
	Tournament                               = 1,
	Creative                                 = 2,
	Division                                 = 3,
	EFortLobbyType_MAX                       = 4,
};

// Enum FortniteGame.EFortMatchmakingViolatorStyle
// NumValues: 0x0005
enum class EFortMatchmakingViolatorStyle : uint8
{
	None                                     = 0,
	Basic                                    = 1,
	HighStakes                               = 2,
	Showdown                                 = 3,
	EFortMatchmakingViolatorStyle_MAX        = 4,
};

// Enum FortniteGame.EFortMatchmakingTileStyle
// NumValues: 0x0005
enum class EFortMatchmakingTileStyle : uint8
{
	None                                     = 0,
	Special                                  = 1,
	HighStakes                               = 2,
	Showdown                                 = 3,
	EFortMatchmakingTileStyle_MAX            = 4,
};

// Enum FortniteGame.EFortErrorSeverity
// NumValues: 0x0006
enum class EFortErrorSeverity : uint8
{
	Unspecified                              = 0,
	Silent                                   = 1,
	Passive                                  = 2,
	Blocking                                 = 3,
	SevereBlocking                           = 4,
	EFortErrorSeverity_MAX                   = 5,
};

// Enum FortniteGame.EFortPickerMode
// NumValues: 0x000E
enum class EFortPickerMode : uint8
{
	BuildingCategory                         = 0,
	TrapCategory                             = 1,
	WeaponCategory                           = 2,
	SocialCategory                           = 3,
	Building                                 = 4,
	Trap                                     = 5,
	TrapRadial                               = 6,
	Weapon                                   = 7,
	Social                                   = 8,
	DirectPickEmote                          = 9,
	DirectPickSpray                          = 10,
	SquadQuickChat                           = 11,
	WeaponsSlotted                           = 12,
	EFortPickerMode_MAX                      = 13,
};

// Enum FortniteGame.EPTTState
// NumValues: 0x0004
enum class EPTTState : uint8
{
	Enabled                                  = 0,
	MicDisabled                              = 1,
	AllSoundDisabled                         = 2,
	EPTTState_MAX                            = 3,
};

// Enum FortniteGame.EFortPlayerRole
// NumValues: 0x0005
enum class EFortPlayerRole : uint32
{
	Player                                   = 0,
	LiveSpectator                            = 1,
	ReplaySpectator                          = 2,
	InactivePlayer                           = 3,
	EFortPlayerRole_MAX                      = 4,
};

// Enum FortniteGame.EMobileInteractionIconTypes
// NumValues: 0x0005
enum class EMobileInteractionIconTypes : uint8
{
	Interact                                 = 0,
	Swap                                     = 1,
	Revive                                   = 2,
	Blocked                                  = 3,
	MAX                                      = 4,
};

// Enum FortniteGame.EAthenaPickerType
// NumValues: 0x0003
enum class EAthenaPickerType : uint8
{
	EditMode                                 = 0,
	Interact                                 = 1,
	MAX                                      = 2,
};

// Enum FortniteGame.EFortGliderType
// NumValues: 0x0003
enum class EFortGliderType : uint8
{
	Glider                                   = 0,
	Umbrella                                 = 1,
	EFortGliderType_MAX                      = 2,
};

// Enum FortniteGame.EItemListViewDisplayType
// NumValues: 0x0005
enum class EItemListViewDisplayType : uint8
{
	World                                    = 0,
	Outpost                                  = 1,
	Account                                  = 2,
	DeployableBase                           = 3,
	Max                                      = 4,
};

// Enum FortniteGame.EStormShieldDefense
// NumValues: 0x0004
enum class EStormShieldDefense : uint8
{
	NotSSD                                   = 0,
	StormShieldExpansion                     = 1,
	WargameSimulation                        = 2,
	EStormShieldDefense_MAX                  = 3,
};

// Enum FortniteGame.EOutpostBuildings
// NumValues: 0x0007
enum class EOutpostBuildings : uint8
{
	StormShield                              = 0,
	CraftingTable                            = 1,
	Fabricator                               = 2,
	HarvestingOptimizer                      = 3,
	StorageVault                             = 4,
	POST                                     = 5,
	EOutpostBuildings_MAX                    = 6,
};

// Enum FortniteGame.EFortClientAnnouncementQueueType
// NumValues: 0x0003
enum class EFortClientAnnouncementQueueType : uint8
{
	Toasts                                   = 0,
	Stickies                                 = 1,
	Max                                      = 2,
};

// Enum FortniteGame.EFortNotificationQueueType
// NumValues: 0x0004
enum class EFortNotificationQueueType : uint8
{
	Toasts                                   = 0,
	Stickies                                 = 1,
	Messages                                 = 2,
	Max                                      = 3,
};

// Enum FortniteGame.EFortDialogResult
// NumValues: 0x0007
enum class EFortDialogResult : uint8
{
	Confirmed                                = 0,
	Declined                                 = 1,
	Ignored                                  = 2,
	Killed                                   = 3,
	TimedOut                                 = 4,
	Unknown                                  = 5,
	EFortDialogResult_MAX                    = 6,
};

// Enum FortniteGame.ETutorialType
// NumValues: 0x0006
enum class ETutorialType : uint8
{
	None                                     = 0,
	Callout                                  = 1,
	GuardScreen                              = 2,
	WidgetIntro                              = 3,
	Highlight                                = 4,
	ETutorialType_MAX                        = 5,
};

// Enum FortniteGame.EFortBangType
// NumValues: 0x0041
enum class EFortBangType : uint8
{
	Invalid                                  = 0,
	Custom                                   = 1,
	PlayTab                                  = 2,
	HeroesTab                                = 3,
	VaultTab                                 = 4,
	StoreTab                                 = 5,
	FriendsButton                            = 6,
	PartyInviteButton                        = 7,
	SubGameAccessChanged                     = 8,
	DailyRewardsButton                       = 9,
	QuestsButton                             = 10,
	CompletedExpeditions                     = 11,
	MainMenu                                 = 12,
	HelpMenu                                 = 13,
	VaultSchematics                          = 14,
	VaultLeadSurvivors                       = 15,
	VaultSurvivors                           = 16,
	VaultHeroes                              = 17,
	VaultDefenders                           = 18,
	VaultResources                           = 19,
	VaultMelee                               = 20,
	VaultRanged                              = 21,
	VaultConsumables                         = 22,
	VaultIngredients                         = 23,
	VaultTraps                               = 24,
	BattlePassTab                            = 25,
	CosmeticsTab                             = 26,
	CosmeticsOutfit                          = 27,
	CosmeticGlider                           = 28,
	CosmeticContrail                         = 29,
	CosmeticBattleBus                        = 30,
	CosmeticVehicle                          = 31,
	CosmeticItemWrap                         = 32,
	CosmeticCallingCard                      = 33,
	CosmeticMapMarker                        = 34,
	CosmeticMusicPack                        = 35,
	CosmeticPetSkin                          = 36,
	CosmeticLoadingScreen                    = 37,
	CosmeticBackpack                         = 38,
	CosmeticHat                              = 39,
	CosmeticPickaxe                          = 40,
	CosmeticDance                            = 41,
	CosmeticCharm                            = 42,
	AthenaDirectedAcquisitionTab             = 43,
	PlayerBanners                            = 44,
	STWCommand                               = 45,
	STWCommand_Heroes                        = 46,
	STWCommand_Heroes_Manage                 = 47,
	STWCommand_Heroes_HeroLoadout            = 48,
	STWCommand_Heroes_Defenders              = 49,
	STWCommand_Heroes_Expeditions            = 50,
	STWCommand_Survivors                     = 51,
	STWCommand_Survivors_Manage              = 52,
	STWCommand_Survivors_Squads              = 53,
	STWCommand_Upgrades                      = 54,
	STWCommand_Research                      = 55,
	STWCommand_AccountXP                     = 56,
	STWArmory                                = 57,
	STWArmory_Schematics                     = 58,
	STWArmory_Backpack                       = 59,
	STWArmory_Storage                        = 60,
	STWArmory_CollectionBook                 = 61,
	STWArmory_Transform                      = 62,
	STWArmory_Resources                      = 63,
	EFortBangType_MAX                        = 64,
};

// Enum FortniteGame.EFortEventNameType
// NumValues: 0x0003
enum class EFortEventNameType : uint8
{
	Mission                                  = 0,
	Client                                   = 1,
	EFortEventNameType_MAX                   = 2,
};

// Enum FortniteGame.EFortCraftFailCause
// NumValues: 0x0008
enum class EFortCraftFailCause : uint8
{
	Unknown                                  = 0,
	NotEnoughResources                       = 1,
	InventoryFull                            = 2,
	InsufficientTeamLevel                    = 3,
	CraftingQueueFull                        = 4,
	CurrentlyLocked                          = 5,
	OverflowSchematic                        = 6,
	EFortCraftFailCause_MAX                  = 7,
};

// Enum FortniteGame.EKeepDefenseState
// NumValues: 0x0005
enum class EKeepDefenseState : uint8
{
	Inactive                                 = 0,
	Warmup                                   = 1,
	Defense                                  = 2,
	LastAlive                                = 3,
	Max                                      = 4,
};

// Enum FortniteGame.EKeepContainerType
// NumValues: 0x0007
enum class EKeepContainerType : uint8
{
	Base                                     = 0,
	Storeroom                                = 1,
	FirstAid                                 = 2,
	Armory                                   = 3,
	Workshop                                 = 4,
	AmmoStash                                = 5,
	Max                                      = 6,
};

// Enum FortniteGame.EFortIndicatorState
// NumValues: 0x0004
enum class EFortIndicatorState : uint8
{
	Hidden                                   = 0,
	OnlyFriendsVisible                       = 1,
	Visible                                  = 2,
	EFortIndicatorState_MAX                  = 3,
};

// Enum FortniteGame.EReadyCheckState
// NumValues: 0x0004
enum class EReadyCheckState : uint8
{
	CheckStarted                             = 0,
	Ready                                    = 1,
	NotReady                                 = 2,
	EReadyCheckState_MAX                     = 3,
};

// Enum FortniteGame.EFortTeamAffiliation
// NumValues: 0x0004
enum class EFortTeamAffiliation : uint8
{
	Friendly                                 = 0,
	Neutral                                  = 1,
	Hostile                                  = 2,
	EFortTeamAffiliation_MAX                 = 3,
};

// Enum FortniteGame.EFortAIUtility
// NumValues: 0x0011
enum class EFortAIUtility : uint8
{
	KillPlayersMelee                         = 0,
	KillPlayersRanged                        = 1,
	KillPlayersArtillery                     = 2,
	DestroyBuildingsMelee                    = 3,
	DestroyBuildingsRanged                   = 4,
	DestroyBuildingsArtillery                = 5,
	DestroyTraps                             = 6,
	Tank                                     = 7,
	Infiltrate                               = 8,
	Mob                                      = 9,
	Support                                  = 10,
	Kiting                                   = 11,
	AreaOfDenial                             = 12,
	DisableTraps                             = 13,
	Dormant                                  = 14,
	Assassin                                 = 15,
	MAX                                      = 16,
};

// Enum FortniteGame.EFortTileEdgeType
// NumValues: 0x0008
enum class EFortTileEdgeType : uint8
{
	Undefined                                = 0,
	Outer_1                                  = 1,
	Transition_2                             = 2,
	Inner_3                                  = 3,
	Border_4                                 = 4,
	BorderTransitionSingle_5                 = 5,
	BorderTransitionDouble_6                 = 6,
	MAX                                      = 7,
};

// Enum FortniteGame.EFortMovementUrgency
// NumValues: 0x0006
enum class EFortMovementUrgency : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	NumLevels                                = 4,
	EFortMovementUrgency_MAX                 = 5,
};

// Enum FortniteGame.EFortMovementStyle
// NumValues: 0x0007
enum class EFortMovementStyle : uint8
{
	Running                                  = 0,
	Walking                                  = 1,
	Charging                                 = 2,
	Sprinting                                = 3,
	PersonalVehicle                          = 4,
	Flying                                   = 5,
	EFortMovementStyle_MAX                   = 6,
};

// Enum FortniteGame.EFortWeaponReloadType
// NumValues: 0x0005
enum class EFortWeaponReloadType : uint8
{
	ReloadWholeClip                          = 0,
	ReloadIndividualBullets                  = 1,
	ReloadBasedOnAmmoCostPerFire             = 2,
	ReloadBasedOnCartridgePerFire            = 3,
	EFortWeaponReloadType_MAX                = 4,
};

// Enum FortniteGame.EFortWeaponTriggerType
// NumValues: 0x0005
enum class EFortWeaponTriggerType : uint8
{
	OnPress                                  = 0,
	Automatic                                = 1,
	OnRelease                                = 2,
	OnPressAndRelease                        = 3,
	EFortWeaponTriggerType_MAX               = 4,
};

// Enum FortniteGame.EFortDayPhasePrio
// NumValues: 0x0003
enum class EFortDayPhasePrio : uint8
{
	Default                                  = 0,
	DailySummary                             = 1,
	EFortDayPhasePrio_MAX                    = 2,
};

// Enum FortniteGame.EFortCustomBodyType
// NumValues: 0x0009
enum class EFortCustomBodyType : uint8
{
	Small                                    = 1,
	Medium                                   = 2,
	MediumAndSmall                           = 3,
	Large                                    = 4,
	LargeAndSmall                            = 5,
	LargeAndMedium                           = 6,
	All                                      = 7,
	Deprecated                               = 8,
	EFortCustomBodyType_MAX                  = 9,
};

// Enum FortniteGame.EFortDisplayGender
// NumValues: 0x0005
enum class EFortDisplayGender : uint8
{
	Unknown                                  = 0,
	Male                                     = 1,
	Female                                   = 2,
	NumTypes                                 = 3,
	EFortDisplayGender_MAX                   = 4,
};

// Enum FortniteGame.EFortCustomGender
// NumValues: 0x0005
enum class EFortCustomGender : uint8
{
	Invalid                                  = 0,
	Male                                     = 1,
	Female                                   = 2,
	Both                                     = 3,
	EFortCustomGender_MAX                    = 4,
};

// Enum FortniteGame.EFortRarity
// NumValues: 0x000A
enum class EFortRarity : uint8
{
	Common                                   = 0,
	Uncommon                                 = 1,
	Rare                                     = 2,
	Epic                                     = 3,
	Legendary                                = 4,
	Mythic                                   = 5,
	Transcendent                             = 6,
	Unattainable                             = 7,
	NumRarityValues                          = 8,
	EFortRarity_MAX                          = 9,
};

// Enum FortniteGame.EFortTargetSelectionFilter
// NumValues: 0x000C
enum class EFortTargetSelectionFilter : uint8
{
	Damageable                               = 0,
	Everything                               = 1,
	Pawns                                    = 2,
	Buildings                                = 3,
	Walls                                    = 4,
	Traps                                    = 5,
	Players                                  = 6,
	AIPawns                                  = 7,
	Instigator                               = 8,
	WeakSpots                                = 9,
	World                                    = 10,
	Max                                      = 11,
};

// Enum FortniteGame.EFortWeaponType
// NumValues: 0x0010
enum class EFortWeaponType : uint8
{
	None                                     = 0,
	RangedAny                                = 1,
	Pistol                                   = 2,
	Shotgun                                  = 3,
	Rifle                                    = 4,
	SMG                                      = 5,
	Sniper                                   = 6,
	GrenadeLauncher                          = 7,
	RocketLauncher                           = 8,
	Bow                                      = 9,
	Minigun                                  = 10,
	LMG                                      = 11,
	BiplaneGun                               = 12,
	MeleeAny                                 = 13,
	Harvesting                               = 14,
	MAX                                      = 15,
};

// Enum FortniteGame.EFortTargetSelectionTestType
// NumValues: 0x0004
enum class EFortTargetSelectionTestType : uint8
{
	Overlap                                  = 0,
	Swept                                    = 1,
	Ballistic                                = 2,
	EFortTargetSelectionTestType_MAX         = 3,
};

// Enum FortniteGame.EFortTargetSelectionShape
// NumValues: 0x0009
enum class EFortTargetSelectionShape : uint8
{
	Sphere                                   = 0,
	Cone                                     = 1,
	Box                                      = 2,
	Capsule                                  = 3,
	Line                                     = 4,
	Cylinder                                 = 5,
	Custom                                   = 6,
	CustomOnSource                           = 7,
	EFortTargetSelectionShape_MAX            = 8,
};

// Enum FortniteGame.EFortBrushSize
// NumValues: 0x0007
enum class EFortBrushSize : uint8
{
	VeryVerySmall                            = 0,
	VerySmall                                = 1,
	Small                                    = 2,
	Medium                                   = 3,
	Large                                    = 4,
	VeryLarge                                = 5,
	EFortBrushSize_MAX                       = 6,
};

// Enum FortniteGame.ESpecialActorStatType
// NumValues: 0x000B
enum class ESpecialActorStatType : uint8
{
	NumEliminationsNearby                    = 0,
	TimeInWorld                              = 1,
	PickupNumSpawns                          = 2,
	PickupNumDespawns                        = 3,
	PickupNumDropped                         = 4,
	PickupNumTaken                           = 5,
	PlayerWon                                = 6,
	PlayerNumEliminations                    = 7,
	PlayerNum                                = 8,
	TotalStats                               = 9,
	ESpecialActorStatType_MAX                = 10,
};

// Enum FortniteGame.EFortItemViewRotationMode
// NumValues: 0x0005
enum class EFortItemViewRotationMode : uint8
{
	None                                     = 0,
	BoundsPivot                              = 1,
	World                                    = 2,
	Relative                                 = 3,
	EFortItemViewRotationMode_MAX            = 4,
};

// Enum FortniteGame.EChangeInStructDetected
// NumValues: 0x0003
enum class EChangeInStructDetected : uint8
{
	Dirty                                    = 0,
	Clean                                    = 1,
	EChangeInStructDetected_MAX              = 2,
};

// Enum FortniteGame.EFortInventoryCustomFilter
// NumValues: 0x0007
enum class EFortInventoryCustomFilter : uint8
{
	Mythic                                   = 0,
	Legendary                                = 1,
	Epic                                     = 2,
	Rare                                     = 3,
	Uncommon                                 = 4,
	Common                                   = 5,
	EFortInventoryCustomFilter_MAX           = 6,
};

// Enum FortniteGame.EInventoryContentSortType
// NumValues: 0x000A
enum class EInventoryContentSortType : uint8
{
	ByName                                   = 0,
	ByRating                                 = 1,
	ByLevel                                  = 2,
	ByCategory                               = 3,
	ByRarity                                 = 4,
	ByLocation                               = 5,
	ByPersonality                            = 6,
	ByBonus                                  = 7,
	BySubtype                                = 8,
	EInventoryContentSortType_MAX            = 9,
};

// Enum FortniteGame.EFortFrontendInventoryFilter
// NumValues: 0x0018
enum class EFortFrontendInventoryFilter : uint8
{
	Schematics                               = 0,
	WorldItems                               = 1,
	WorldItemsInGame                         = 2,
	WorldItemsStorage                        = 3,
	WorldItemsTransfer                       = 4,
	ConsumablesAndAccountResources           = 5,
	Heroes                                   = 6,
	Defenders                                = 7,
	Survivors                                = 8,
	AthenaCharacter                          = 9,
	AthenaBackpack                           = 10,
	AthenaPickaxe                            = 11,
	AthenaGliders                            = 12,
	AthenaContrails                          = 13,
	AthenaEmotes                             = 14,
	AthenaItemWraps                          = 15,
	AthenaLoadingScreens                     = 16,
	AthenaLobbyMusic                         = 17,
	AthenaCharm                              = 18,
	HestiaWeapons                            = 19,
	HestiaResources                          = 20,
	Invisible                                = 21,
	Max_None                                 = 22,
	EFortFrontendInventoryFilter_MAX         = 23,
};

// Enum FortniteGame.EFortInventoryFilter
// NumValues: 0x0017
enum class EFortInventoryFilter : uint8
{
	WeaponMelee                              = 0,
	WeaponRanged                             = 1,
	Ammo                                     = 2,
	Traps                                    = 3,
	Consumables                              = 4,
	Ingredients                              = 5,
	Gadget                                   = 6,
	Decorations                              = 7,
	Badges                                   = 8,
	Heroes                                   = 9,
	LeadSurvivors                            = 10,
	Survivors                                = 11,
	Defenders                                = 12,
	Resources                                = 13,
	ConversionControl                        = 14,
	AthenaCosmetics                          = 15,
	Playset                                  = 16,
	CreativePlot                             = 17,
	TeamPerk                                 = 18,
	Workers                                  = 19,
	Invisible                                = 20,
	Max_None                                 = 21,
	EFortInventoryFilter_MAX                 = 22,
};

// Enum FortniteGame.EFortItemCategoryOrdinal
// NumValues: 0x0004
enum class EFortItemCategoryOrdinal : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tertiary                                 = 2,
	EFortItemCategoryOrdinal_MAX             = 3,
};

// Enum FortniteGame.ESubGameMatchmakingStatus
// NumValues: 0x0003
enum class ESubGameMatchmakingStatus : uint8
{
	Disabled                                 = 0,
	Enabled                                  = 1,
	ESubGameMatchmakingStatus_MAX            = 2,
};

// Enum FortniteGame.ESubGameAccessStatus
// NumValues: 0x0004
enum class ESubGameAccessStatus : uint8
{
	Disabled                                 = 0,
	LimitedAccess                            = 1,
	OpenAccess                               = 2,
	ESubGameAccessStatus_MAX                 = 3,
};

// Enum FortniteGame.EFortUIFriendNotificationType
// NumValues: 0x0006
enum class EFortUIFriendNotificationType : uint8
{
	Default                                  = 0,
	FriendRequest                            = 1,
	PartyInvite                              = 2,
	AutoImportFriendSuggestion               = 3,
	PartyMemberCreated                       = 4,
	EFortUIFriendNotificationType_MAX        = 5,
};

// Enum FortniteGame.EFortNotificationPriority
// NumValues: 0x0007
enum class EFortNotificationPriority : uint8
{
	Vote                                     = 0,
	Friend                                   = 1,
	BoostedXP                                = 2,
	TwitchHigh                               = 3,
	GeneralSendNotification                  = 4,
	TwitchLow                                = 10,
	Max                                      = 11,
};

// Enum FortniteGame.EFortNotificationType
// NumValues: 0x0007
enum class EFortNotificationType : uint8
{
	Default                                  = 0,
	Power                                    = 1,
	HealthWarning                            = 2,
	Error                                    = 3,
	GiftSent                                 = 4,
	VoiceChannel                             = 5,
	Max                                      = 6,
};

// Enum FortniteGame.EFortContextualReticleTypes
// NumValues: 0x000A
enum class EFortContextualReticleTypes : uint8
{
	FCR_GenericFailure                       = 0,
	FCR_Upgrade                              = 1,
	FCR_Repair                               = 2,
	FCR_Locked                               = 3,
	FCR_Placement                            = 4,
	FCR_Edit                                 = 5,
	FCR_NoTarget                             = 6,
	FCR_InProgress                           = 7,
	FCR_None                                 = 8,
	FCR_MAX                                  = 9,
};

// Enum FortniteGame.EFortUserCloudRequestResult
// NumValues: 0x0006
enum class EFortUserCloudRequestResult : uint8
{
	Success                                  = 0,
	Failure_CloudStorageDisabled             = 1,
	Failure_CloudStorageError                = 2,
	Failure_FileNotFoundInUserFileList       = 3,
	Failure_SavingNotAllowedForSpecifiedUser = 4,
	EFortUserCloudRequestResult_MAX          = 5,
};

// Enum FortniteGame.EFortUserCloudRequestType
// NumValues: 0x0003
enum class EFortUserCloudRequestType : uint8
{
	LoadCloudFile                            = 0,
	SaveCloudFile                            = 1,
	EFortUserCloudRequestType_MAX            = 2,
};

// Enum FortniteGame.EVehicleAudioTriggerDir
// NumValues: 0x0003
enum class EVehicleAudioTriggerDir : uint8
{
	Forward                                  = 0,
	Backward                                 = 1,
	EVehicleAudioTriggerDir_MAX              = 2,
};

// Enum FortniteGame.EVehicleAudioInterpolationType
// NumValues: 0x0004
enum class EVehicleAudioInterpolationType : uint8
{
	None                                     = 0,
	CustomCurve                              = 1,
	Linear                                   = 2,
	EVehicleAudioInterpolationType_MAX       = 3,
};

// Enum FortniteGame.EVehicleSessionEndReason
// NumValues: 0x0003
enum class EVehicleSessionEndReason : uint8
{
	Invalid                                  = 0,
	NoPassengers                             = 1,
	EVehicleSessionEndReason_MAX             = 2,
};

// Enum FortniteGame.EVehicleMovementMode
// NumValues: 0x0005
enum class EVehicleMovementMode : uint8
{
	OnGround                                 = 0,
	InAir                                    = 1,
	WipeOut                                  = 2,
	MaxCount                                 = 3,
	EVehicleMovementMode_MAX                 = 4,
};

// Enum FortniteGame.EVehicleSeats
// NumValues: 0x0008
enum class EVehicleSeats : uint8
{
	Driver                                   = 0,
	Passenger1                               = 1,
	Passenger2                               = 2,
	Passenger3                               = 3,
	Passenger4                               = 4,
	Passenger5                               = 5,
	MaxCount                                 = 6,
	EVehicleSeats_MAX                        = 7,
};

// Enum FortniteGame.EFortVisibilityBehavior
// NumValues: 0x0005
enum class EFortVisibilityBehavior : uint8
{
	Proximity                                = 0,
	OnceSeenAlwaysSeen                       = 1,
	AlwaysSeen                               = 2,
	Invalid                                  = 3,
	EFortVisibilityBehavior_MAX              = 4,
};

// Enum FortniteGame.EVolumeValidityResult
// NumValues: 0x0003
enum class EVolumeValidityResult : uint8
{
	Valid                                    = 0,
	Invalid                                  = 1,
	EVolumeValidityResult_MAX                = 2,
};

// Enum FortniteGame.EFortReloadMontageSection
// NumValues: 0x0004
enum class EFortReloadMontageSection : uint8
{
	Intro                                    = 0,
	Loop                                     = 1,
	Outro                                    = 2,
	EFortReloadMontageSection_MAX            = 3,
};

// Enum FortniteGame.EFortDisplayTier
// NumValues: 0x000C
enum class EFortDisplayTier : uint8
{
	Invalid                                  = 0,
	Handmade                                 = 1,
	Copper                                   = 2,
	Silver                                   = 3,
	Malachite                                = 4,
	Obsidian                                 = 5,
	Brightcore                               = 6,
	Spectrolite                              = 7,
	Shadowshard                              = 8,
	Sunbeam                                  = 9,
	Moonglow                                 = 10,
	EFortDisplayTier_MAX                     = 11,
};

// Enum FortniteGame.EFortWeaponOverheatState
// NumValues: 0x0005
enum class EFortWeaponOverheatState : uint8
{
	None                                     = 0,
	Heating                                  = 1,
	Cooling                                  = 2,
	Overheated                               = 3,
	EFortWeaponOverheatState_MAX             = 4,
};

// Enum FortniteGame.EWorldItemDropBehavior
// NumValues: 0x0004
enum class EWorldItemDropBehavior : uint8
{
	DropAsPickup                             = 0,
	DestroyOnDrop                            = 1,
	DropAsPickupDestroyOnEmpty               = 2,
	EWorldItemDropBehavior_MAX               = 3,
};

// Enum FortniteGame.EFortWorldManagerState
// NumValues: 0x0008
enum class EFortWorldManagerState : uint8
{
	WMS_Created                              = 0,
	WMS_QueryingWorld                        = 1,
	WMS_WorldQueryComplete                   = 2,
	WMS_CreatingNewWorld                     = 3,
	WMS_LoadingExistingWorld                 = 4,
	WMS_Running                              = 5,
	WMS_Failed                               = 6,
	WMS_MAX                                  = 7,
};

// Enum FortniteGame.EFortLevelStreamingState
// NumValues: 0x0008
enum class EFortLevelStreamingState : uint8
{
	LSS_Unloaded                             = 0,
	LSS_Loaded                               = 1,
	LSS_UnconditionalFoundationsUpdated      = 2,
	LSS_AllFoundationsUpdated                = 3,
	LSS_NewActorsCreatedButNotUpdated        = 4,
	LSS_AllUpdated                           = 5,
	LSS_Ready                                = 6,
	LSS_MAX                                  = 7,
};

// Enum FortniteGame.EFortQueuedActionUserStatus
// NumValues: 0x0005
enum class EFortQueuedActionUserStatus : uint8
{
	Succeeded                                = 0,
	Failed                                   = 1,
	WaitingForCloudRequest                   = 2,
	WaitingForProfileSave                    = 3,
	EFortQueuedActionUserStatus_MAX          = 4,
};

// Enum FortniteGame.EFortWorldRecordState
// NumValues: 0x000D
enum class EFortWorldRecordState : uint8
{
	StartProcessing                          = 0,
	WaitingForResponse                       = 1,
	RetrievingTheaterInformation             = 2,
	RetrievingZoneInformation                = 3,
	LoadingWorldRecord                       = 4,
	LoadingZoneRecord                        = 5,
	SavingZoneRecord                         = 6,
	SavingPlayerProfiles                     = 7,
	SavingPlayerDeployableBases              = 8,
	Succeeded                                = 9,
	Failed                                   = 10,
	Max_None                                 = 11,
	EFortWorldRecordState_MAX                = 12,
};

// Enum FortniteGame.EFortWorldRecordAction
// NumValues: 0x0007
enum class EFortWorldRecordAction : uint8
{
	LoadWorldOnly                            = 0,
	SaveWorldOnly                            = 1,
	SaveZoneAndWorld                         = 2,
	LoadZoneAndWorld                         = 3,
	SaveDeployableBasesAndWorld              = 4,
	Max_None                                 = 5,
	EFortWorldRecordAction_MAX               = 6,
};

// Enum FortniteGame.EFortWorldMarkerType
// NumValues: 0x0006
enum class EFortWorldMarkerType : uint8
{
	None                                     = 0,
	Location                                 = 1,
	Enemy                                    = 2,
	Item                                     = 3,
	SpecialLocal                             = 4,
	MAX                                      = 5,
};

// Enum FortniteGame.EDeployableBaseUseType
// NumValues: 0x0003
enum class EDeployableBaseUseType : uint8
{
	Neighborhood                             = 0,
	PvECombat                                = 1,
	EDeployableBaseUseType_MAX               = 2,
};

// Enum FortniteGame.EFortZoneType
// NumValues: 0x0006
enum class EFortZoneType : uint8
{
	PVE                                      = 0,
	PVP                                      = 1,
	Keep                                     = 2,
	SingleZone                               = 3,
	Max_None                                 = 4,
	EFortZoneType_MAX                        = 5,
};

// Enum FortniteGame.EFrontEndCamera
// NumValues: 0x0028
enum class EFrontEndCamera : uint8
{
	Invalid                                  = 0,
	Command                                  = 1,
	Command_HeroLoadout                      = 2,
	LegacyHeroLoadout                        = 3,
	Cosmetics                                = 4,
	Expeditions                              = 5,
	FrontendDefault                          = 6,
	Heroes                                   = 7,
	HeroSelect                               = 8,
	HeroLoadout                              = 9,
	Home                                     = 10,
	HomeBase                                 = 11,
	Login                                    = 12,
	Manage1                                  = 13,
	Manage2                                  = 14,
	Manage3                                  = 15,
	Manage4                                  = 16,
	MissionControl                           = 17,
	Party                                    = 18,
	Play                                     = 19,
	Research                                 = 20,
	SkillTrees                               = 21,
	SmallCosmetics                           = 22,
	SpecialEvent                             = 23,
	SpecialEvent2                            = 24,
	Store                                    = 25,
	StoreItemInspect                         = 26,
	StwFrontendDefault                       = 27,
	SurvivorSquadBuilding1                   = 28,
	SurvivorSquadBuilding2                   = 29,
	SurvivorSquadBuilding3                   = 30,
	SurvivorSquadBuilding4                   = 31,
	TutorialPhaseOne                         = 32,
	TutorialPhaseTwo                         = 33,
	TutorialPhaseThree                       = 34,
	Upgrades                                 = 35,
	Vault                                    = 36,
	WorldMap                                 = 37,
	LobbyCentered                            = 38,
	EFrontEndCamera_MAX                      = 39,
};

// Enum FortniteGame.EDroneFacingLocationMode
// NumValues: 0x0004
enum class EDroneFacingLocationMode : uint8
{
	NotFacingLocation                        = 0,
	FindingPoint                             = 1,
	TrackingPoint                            = 2,
	EDroneFacingLocationMode_MAX             = 3,
};

// Enum FortniteGame.EFireModeType
// NumValues: 0x0007
enum class EFireModeType : uint8
{
	Unset                                    = 0,
	TapToShoot                               = 1,
	FireButton                               = 2,
	AutoFire                                 = 3,
	ForceTouch                               = 4,
	Custom                                   = 5,
	MAX                                      = 6,
};

// Enum FortniteGame.ELayoutPropertyType
// NumValues: 0x0005
enum class ELayoutPropertyType : uint8
{
	PropertyType_Float                       = 0,
	PropertyType_Integer                     = 1,
	PropertyType_Bool                        = 2,
	PropertyType_Rotator                     = 3,
	PropertyType_MAX                         = 4,
};

// Enum FortniteGame.ELayoutDataType
// NumValues: 0x0006
enum class ELayoutDataType : uint8
{
	Custom                                   = 0,
	DefaultToolLayout                        = 1,
	DefaultGameLayout                        = 2,
	MAX_Local                                = 3,
	CustomCloudLayout                        = 4,
	ELayoutDataType_MAX                      = 5,
};

// Enum FortniteGame.EIslandInspectorState
// NumValues: 0x0005
enum class EIslandInspectorState : uint8
{
	Initializing                             = 0,
	Ready                                    = 1,
	AwaitingProcessCommand                   = 2,
	ProcessingCommand                        = 3,
	EIslandInspectorState_MAX                = 4,
};

// Enum FortniteGame.ELevelSaveCategory
// NumValues: 0x0003
enum class ELevelSaveCategory : uint8
{
	ActorInstance                            = 0,
	VolumeInfoActor                          = 1,
	ELevelSaveCategory_MAX                   = 2,
};

// Enum FortniteGame.EFortMarkedActorScreenClamping
// NumValues: 0x0005
enum class EFortMarkedActorScreenClamping : uint8
{
	Default                                  = 0,
	Clamp                                    = 1,
	ClampWhileNew                            = 2,
	DontClamp                                = 3,
	EFortMarkedActorScreenClamping_MAX       = 4,
};

// Enum FortniteGame.EFortEncounterSpawnLimitType
// NumValues: 0x0005
enum class EFortEncounterSpawnLimitType : uint8
{
	NoLimit                                  = 0,
	NumPawnsLimit                            = 1,
	SpawnPointLimit                          = 2,
	UserDefined                              = 3,
	MAX                                      = 4,
};

// Enum FortniteGame.EFortEncounterUtilitiesMode
// NumValues: 0x0003
enum class EFortEncounterUtilitiesMode : uint8
{
	LockedOnly                               = 0,
	LockedAndFree                            = 1,
	EFortEncounterUtilitiesMode_MAX          = 2,
};

// Enum FortniteGame.EFortEncounterSpawnLocationManagementMode
// NumValues: 0x0003
enum class EFortEncounterSpawnLocationManagementMode : uint8
{
	Spawn                                    = 0,
	Search                                   = 1,
	EFortEncounterSpawnLocationManagementMode_MAX = 2,
};

// Enum FortniteGame.EFortEncounterSpawnLocationPlacementMode
// NumValues: 0x0006
enum class EFortEncounterSpawnLocationPlacementMode : uint8
{
	Directional                              = 0,
	Ring                                     = 1,
	Volume                                   = 2,
	Custom                                   = 3,
	Max_None                                 = 4,
	EFortEncounterSpawnLocationPlacementMode_MAX = 5,
};

// Enum FortniteGame.EFortEncounterPacingMode
// NumValues: 0x0005
enum class EFortEncounterPacingMode : uint8
{
	SpawnPointsPercentageCurve               = 0,
	IntensityCurve                           = 1,
	Burst                                    = 2,
	Fixed                                    = 3,
	EFortEncounterPacingMode_MAX             = 4,
};

// Enum FortniteGame.EFortMissionAudibility
// NumValues: 0x0004
enum class EFortMissionAudibility : uint8
{
	UseVisibility                            = 0,
	Audible                                  = 1,
	Inaudible                                = 2,
	EFortMissionAudibility_MAX               = 3,
};

// Enum FortniteGame.EFortMissionType
// NumValues: 0x0004
enum class EFortMissionType : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Max_None                                 = 2,
	EFortMissionType_MAX                     = 3,
};

// Enum FortniteGame.EFortObjectiveRequirement
// NumValues: 0x0004
enum class EFortObjectiveRequirement : uint8
{
	Optional                                 = 0,
	Required                                 = 1,
	RequiredButCanFail                       = 2,
	EFortObjectiveRequirement_MAX            = 3,
};

// Enum FortniteGame.EFortMissionStatus
// NumValues: 0x0008
enum class EFortMissionStatus : uint8
{
	Created                                  = 0,
	InProgress                               = 1,
	Succeeded                                = 2,
	Failed                                   = 3,
	NeutralCompletion                        = 4,
	Quit                                     = 5,
	Max_None                                 = 6,
	EFortMissionStatus_MAX                   = 7,
};

// Enum FortniteGame.EMissionGenerationCategory
// NumValues: 0x0006
enum class EMissionGenerationCategory : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tertiary                                 = 2,
	Survivor                                 = 3,
	Max_None                                 = 4,
	EMissionGenerationCategory_MAX           = 5,
};

// Enum FortniteGame.EIndexNavigationResult
// NumValues: 0x0006
enum class EIndexNavigationResult : uint8
{
	Succeeded                                = 0,
	Modified                                 = 1,
	Clamped                                  = 2,
	StepOff                                  = 3,
	NoMove                                   = 4,
	EIndexNavigationResult_MAX               = 5,
};

// Enum FortniteGame.EFortStrategicBuildingLevelCriteriaDisplayRepresentation
// NumValues: 0x0003
enum class EFortStrategicBuildingLevelCriteriaDisplayRepresentation : uint8
{
	Integer                                  = 0,
	Float                                    = 1,
	EFortStrategicBuildingLevelCriteriaDisplayRepresentation_MAX = 2,
};

// Enum FortniteGame.EFortStrategicBuildingCategory
// NumValues: 0x0004
enum class EFortStrategicBuildingCategory : uint8
{
	Defensive                                = 0,
	Offensive                                = 1,
	Utility                                  = 2,
	EFortStrategicBuildingCategory_MAX       = 3,
};

// Enum FortniteGame.EFortThreatDeactivationType
// NumValues: 0x0003
enum class EFortThreatDeactivationType : uint8
{
	Off                                      = 0,
	Dormant                                  = 1,
	EFortThreatDeactivationType_MAX          = 2,
};

// Enum FortniteGame.EWrapPreviewGridLockerMode
// NumValues: 0x0004
enum class EWrapPreviewGridLockerMode : uint8
{
	IgnoreLockerConfiguration                = 0,
	SupportedWeaponsOnly                     = 1,
	UnsupportedWeaponsOnly                   = 2,
	EWrapPreviewGridLockerMode_MAX           = 3,
};

// ScriptStruct FortniteGame.PowPlayerDataEntry
// 0x001C (0x0028 - 0x000C)
struct FPowPlayerDataEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentMaxShield;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentShield;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAthenaMutator_Pow*                 POWMutator;                                        // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowPlayerDataEntry) == 0x000008, "Wrong alignment on FPowPlayerDataEntry");
static_assert(sizeof(FPowPlayerDataEntry) == 0x000028, "Wrong size on FPowPlayerDataEntry");
static_assert(offsetof(FPowPlayerDataEntry, PlayerState) == 0x000010, "Member 'FPowPlayerDataEntry::PlayerState' has a wrong offset!");
static_assert(offsetof(FPowPlayerDataEntry, CurrentMaxShield) == 0x000018, "Member 'FPowPlayerDataEntry::CurrentMaxShield' has a wrong offset!");
static_assert(offsetof(FPowPlayerDataEntry, CurrentShield) == 0x00001C, "Member 'FPowPlayerDataEntry::CurrentShield' has a wrong offset!");
static_assert(offsetof(FPowPlayerDataEntry, POWMutator) == 0x000020, "Member 'FPowPlayerDataEntry::POWMutator' has a wrong offset!");

// ScriptStruct FortniteGame.MeshSet
// 0x0060 (0x0060 - 0x0000)
struct FMeshSet final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortResourceType                             ResourceType;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDoNotBlockBuildings : 1;                          // 0x0005(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDestroyOnPlayerBuildingPlacement : 1;             // 0x0005(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedsDamageOverlay : 1;                           // 0x0005(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            BaseMesh;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        BreakEffect;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        DeathParticles;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DeathParticleSocketName;                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             DeathSound;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ConstructedEffect;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            SearchedMesh;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   SearchSpeed;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LootNoiseRange;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LootSpawnLocation;                                 // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshSet) == 0x000008, "Wrong alignment on FMeshSet");
static_assert(sizeof(FMeshSet) == 0x000060, "Wrong size on FMeshSet");
static_assert(offsetof(FMeshSet, Weight) == 0x000000, "Member 'FMeshSet::Weight' has a wrong offset!");
static_assert(offsetof(FMeshSet, ResourceType) == 0x000004, "Member 'FMeshSet::ResourceType' has a wrong offset!");
static_assert(offsetof(FMeshSet, BaseMesh) == 0x000008, "Member 'FMeshSet::BaseMesh' has a wrong offset!");
static_assert(offsetof(FMeshSet, BreakEffect) == 0x000010, "Member 'FMeshSet::BreakEffect' has a wrong offset!");
static_assert(offsetof(FMeshSet, DeathParticles) == 0x000018, "Member 'FMeshSet::DeathParticles' has a wrong offset!");
static_assert(offsetof(FMeshSet, DeathParticleSocketName) == 0x000020, "Member 'FMeshSet::DeathParticleSocketName' has a wrong offset!");
static_assert(offsetof(FMeshSet, DeathSound) == 0x000028, "Member 'FMeshSet::DeathSound' has a wrong offset!");
static_assert(offsetof(FMeshSet, ConstructedEffect) == 0x000030, "Member 'FMeshSet::ConstructedEffect' has a wrong offset!");
static_assert(offsetof(FMeshSet, SearchedMesh) == 0x000038, "Member 'FMeshSet::SearchedMesh' has a wrong offset!");
static_assert(offsetof(FMeshSet, SearchSpeed) == 0x000040, "Member 'FMeshSet::SearchSpeed' has a wrong offset!");
static_assert(offsetof(FMeshSet, LootNoiseRange) == 0x000050, "Member 'FMeshSet::LootNoiseRange' has a wrong offset!");
static_assert(offsetof(FMeshSet, LootSpawnLocation) == 0x000054, "Member 'FMeshSet::LootSpawnLocation' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlacedBuilding
// 0x0020 (0x0020 - 0x0000)
struct FFortPlacedBuilding final
{
public:
	class FString                                 BuildingTag;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlacedTag;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlacedBuilding) == 0x000008, "Wrong alignment on FFortPlacedBuilding");
static_assert(sizeof(FFortPlacedBuilding) == 0x000020, "Wrong size on FFortPlacedBuilding");
static_assert(offsetof(FFortPlacedBuilding, BuildingTag) == 0x000000, "Member 'FFortPlacedBuilding::BuildingTag' has a wrong offset!");
static_assert(offsetof(FFortPlacedBuilding, PlacedTag) == 0x000010, "Member 'FFortPlacedBuilding::PlacedTag' has a wrong offset!");

// ScriptStruct FortniteGame.FortOutpostCoreInfo
// 0x0028 (0x0028 - 0x0000)
struct FFortOutpostCoreInfo final
{
public:
	TArray<struct FFortPlacedBuilding>            PlacedBuildings;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AccountsWithEditPermission;                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        HighestEnduranceWaveReached;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortOutpostCoreInfo) == 0x000008, "Wrong alignment on FFortOutpostCoreInfo");
static_assert(sizeof(FFortOutpostCoreInfo) == 0x000028, "Wrong size on FFortOutpostCoreInfo");
static_assert(offsetof(FFortOutpostCoreInfo, PlacedBuildings) == 0x000000, "Member 'FFortOutpostCoreInfo::PlacedBuildings' has a wrong offset!");
static_assert(offsetof(FFortOutpostCoreInfo, AccountsWithEditPermission) == 0x000010, "Member 'FFortOutpostCoreInfo::AccountsWithEditPermission' has a wrong offset!");
static_assert(offsetof(FFortOutpostCoreInfo, HighestEnduranceWaveReached) == 0x000020, "Member 'FFortOutpostCoreInfo::HighestEnduranceWaveReached' has a wrong offset!");

// ScriptStruct FortniteGame.FortColorPalette
// 0x0050 (0x0050 - 0x0000)
struct FFortColorPalette final
{
public:
	struct FLinearColor                           Color1;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color2;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color3;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color4;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color5;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortColorPalette) == 0x000004, "Wrong alignment on FFortColorPalette");
static_assert(sizeof(FFortColorPalette) == 0x000050, "Wrong size on FFortColorPalette");
static_assert(offsetof(FFortColorPalette, Color1) == 0x000000, "Member 'FFortColorPalette::Color1' has a wrong offset!");
static_assert(offsetof(FFortColorPalette, Color2) == 0x000010, "Member 'FFortColorPalette::Color2' has a wrong offset!");
static_assert(offsetof(FFortColorPalette, Color3) == 0x000020, "Member 'FFortColorPalette::Color3' has a wrong offset!");
static_assert(offsetof(FFortColorPalette, Color4) == 0x000030, "Member 'FFortColorPalette::Color4' has a wrong offset!");
static_assert(offsetof(FFortColorPalette, Color5) == 0x000040, "Member 'FFortColorPalette::Color5' has a wrong offset!");

// ScriptStruct FortniteGame.ProjectileEventData
// 0x0028 (0x0028 - 0x0000)
struct FProjectileEventData final
{
public:
	class AFortProjectileBase*                    SpawnedProjectile;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     Hits;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ExplodedActors;                                    // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectileEventData) == 0x000008, "Wrong alignment on FProjectileEventData");
static_assert(sizeof(FProjectileEventData) == 0x000028, "Wrong size on FProjectileEventData");
static_assert(offsetof(FProjectileEventData, SpawnedProjectile) == 0x000000, "Member 'FProjectileEventData::SpawnedProjectile' has a wrong offset!");
static_assert(offsetof(FProjectileEventData, Hits) == 0x000008, "Member 'FProjectileEventData::Hits' has a wrong offset!");
static_assert(offsetof(FProjectileEventData, ExplodedActors) == 0x000018, "Member 'FProjectileEventData::ExplodedActors' has a wrong offset!");

// ScriptStruct FortniteGame.FortCriteriaRequirementData
// 0x0018 (0x0020 - 0x0008)
struct FFortCriteriaRequirementData final : public FTableRowBase
{
public:
	struct FGameplayTag                           RequiredTag;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGlobalMod;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModValue;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireRarity;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   RequiredRarity;                                    // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCriteriaRequirementData) == 0x000008, "Wrong alignment on FFortCriteriaRequirementData");
static_assert(sizeof(FFortCriteriaRequirementData) == 0x000020, "Wrong size on FFortCriteriaRequirementData");
static_assert(offsetof(FFortCriteriaRequirementData, RequiredTag) == 0x000008, "Member 'FFortCriteriaRequirementData::RequiredTag' has a wrong offset!");
static_assert(offsetof(FFortCriteriaRequirementData, bGlobalMod) == 0x000010, "Member 'FFortCriteriaRequirementData::bGlobalMod' has a wrong offset!");
static_assert(offsetof(FFortCriteriaRequirementData, ModValue) == 0x000014, "Member 'FFortCriteriaRequirementData::ModValue' has a wrong offset!");
static_assert(offsetof(FFortCriteriaRequirementData, bRequireRarity) == 0x000018, "Member 'FFortCriteriaRequirementData::bRequireRarity' has a wrong offset!");
static_assert(offsetof(FFortCriteriaRequirementData, RequiredRarity) == 0x000019, "Member 'FFortCriteriaRequirementData::RequiredRarity' has a wrong offset!");

// ScriptStruct FortniteGame.FortRequirementsInfo
// 0x0060 (0x0060 - 0x0000)
struct FFortRequirementsInfo final
{
public:
	int32                                         CommanderLevel;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersonalPowerRating;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPersonalPowerRating;                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyPowerRating;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPartyPowerRating;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortQuestItemDefinition*>       ActiveQuestDefinitions;                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UFortQuestItemDefinition*               QuestDefinition;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UFortQuestItemDefinition*               UncompletedQuestDefinition;                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventFlag;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRequirementsInfo) == 0x000008, "Wrong alignment on FFortRequirementsInfo");
static_assert(sizeof(FFortRequirementsInfo) == 0x000060, "Wrong size on FFortRequirementsInfo");
static_assert(offsetof(FFortRequirementsInfo, CommanderLevel) == 0x000000, "Member 'FFortRequirementsInfo::CommanderLevel' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, PersonalPowerRating) == 0x000004, "Member 'FFortRequirementsInfo::PersonalPowerRating' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, MaxPersonalPowerRating) == 0x000008, "Member 'FFortRequirementsInfo::MaxPersonalPowerRating' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, PartyPowerRating) == 0x00000C, "Member 'FFortRequirementsInfo::PartyPowerRating' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, MaxPartyPowerRating) == 0x000010, "Member 'FFortRequirementsInfo::MaxPartyPowerRating' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, ActiveQuestDefinitions) == 0x000018, "Member 'FFortRequirementsInfo::ActiveQuestDefinitions' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, QuestDefinition) == 0x000028, "Member 'FFortRequirementsInfo::QuestDefinition' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, ObjectiveStatHandle) == 0x000030, "Member 'FFortRequirementsInfo::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, UncompletedQuestDefinition) == 0x000040, "Member 'FFortRequirementsInfo::UncompletedQuestDefinition' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, ItemDefinition) == 0x000048, "Member 'FFortRequirementsInfo::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, EventFlag) == 0x000050, "Member 'FFortRequirementsInfo::EventFlag' has a wrong offset!");

// ScriptStruct FortniteGame.HeroPerkDefaultRequirements
// 0x000C (0x000C - 0x0000)
struct FHeroPerkDefaultRequirements final
{
public:
	EFortItemTier                                 MinimumHeroTier;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumHeroLevel;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   MinimumHeroRarity;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroPerkDefaultRequirements) == 0x000004, "Wrong alignment on FHeroPerkDefaultRequirements");
static_assert(sizeof(FHeroPerkDefaultRequirements) == 0x00000C, "Wrong size on FHeroPerkDefaultRequirements");
static_assert(offsetof(FHeroPerkDefaultRequirements, MinimumHeroTier) == 0x000000, "Member 'FHeroPerkDefaultRequirements::MinimumHeroTier' has a wrong offset!");
static_assert(offsetof(FHeroPerkDefaultRequirements, MinimumHeroLevel) == 0x000004, "Member 'FHeroPerkDefaultRequirements::MinimumHeroLevel' has a wrong offset!");
static_assert(offsetof(FHeroPerkDefaultRequirements, MinimumHeroRarity) == 0x000008, "Member 'FHeroPerkDefaultRequirements::MinimumHeroRarity' has a wrong offset!");

// ScriptStruct FortniteGame.FortEventName
// 0x0010 (0x0010 - 0x0000)
struct FFortEventName
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEventName) == 0x000004, "Wrong alignment on FFortEventName");
static_assert(sizeof(FFortEventName) == 0x000010, "Wrong size on FFortEventName");
static_assert(offsetof(FFortEventName, CategoryName) == 0x000000, "Member 'FFortEventName::CategoryName' has a wrong offset!");
static_assert(offsetof(FFortEventName, EventName) == 0x000008, "Member 'FFortEventName::EventName' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientEventName
// 0x0000 (0x0010 - 0x0010)
struct FFortClientEventName final : public FFortEventName
{
};
static_assert(alignof(FFortClientEventName) == 0x000004, "Wrong alignment on FFortClientEventName");
static_assert(sizeof(FFortClientEventName) == 0x000010, "Wrong size on FFortClientEventName");

// ScriptStruct FortniteGame.FortHomeBaseInfo
// 0x0040 (0x0040 - 0x0000)
struct FFortHomeBaseInfo final
{
public:
	class FString                                 BannerIconId;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerColorId;                                     // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          ValidData;                                         // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortHomeBaseInfo) == 0x000008, "Wrong alignment on FFortHomeBaseInfo");
static_assert(sizeof(FFortHomeBaseInfo) == 0x000040, "Wrong size on FFortHomeBaseInfo");
static_assert(offsetof(FFortHomeBaseInfo, BannerIconId) == 0x000000, "Member 'FFortHomeBaseInfo::BannerIconId' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, BannerColorId) == 0x000010, "Member 'FFortHomeBaseInfo::BannerColorId' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, Name) == 0x000020, "Member 'FFortHomeBaseInfo::Name' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, ValidData) == 0x000038, "Member 'FFortHomeBaseInfo::ValidData' has a wrong offset!");

// ScriptStruct FortniteGame.FortTeamMemberInfo
// 0x0200 (0x0200 - 0x0000)
struct FFortTeamMemberInfo final
{
public:
	struct FUniqueNetIdRepl                       MemberUniqueId;                                    // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PartyLeaderUniqueId;                               // 0x0028(0x0028)(BlueprintVisible, BlueprintReadOnly, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       ConsoleUniqueId;                                   // 0x0050(0x0028)(BlueprintVisible, BlueprintReadOnly, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   PlayerName;                                        // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bPartyLeader;                                      // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInZone;                                         // 0x00A1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBoostXp;                                       // 0x00A2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasRestXp;                                        // 0x00A3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BannerIconId;                                      // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerColorId;                                     // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattlePassPurchased;                              // 0x00C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BattlePassLevel;                                   // 0x00CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePassSelfXpBoost;                             // 0x00D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePassFriendXpBoost;                           // 0x00D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayersInParty;                                 // 0x00D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x00DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamAffiliation;                                   // 0x00E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HeroClass;                                         // 0x00E8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HeroLevel;                                         // 0x0100(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         HeroXP;                                            // 0x0118(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              HeroItem;                                          // 0x0120(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      SelectedGadgetItems;                               // 0x0128(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HeroIcon;                                          // 0x0138(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortHomeBaseInfo                      HomeBaseInfo;                                      // 0x01C0(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTeamMemberInfo) == 0x000008, "Wrong alignment on FFortTeamMemberInfo");
static_assert(sizeof(FFortTeamMemberInfo) == 0x000200, "Wrong size on FFortTeamMemberInfo");
static_assert(offsetof(FFortTeamMemberInfo, MemberUniqueId) == 0x000000, "Member 'FFortTeamMemberInfo::MemberUniqueId' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, PartyLeaderUniqueId) == 0x000028, "Member 'FFortTeamMemberInfo::PartyLeaderUniqueId' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, ConsoleUniqueId) == 0x000050, "Member 'FFortTeamMemberInfo::ConsoleUniqueId' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, Platform) == 0x000078, "Member 'FFortTeamMemberInfo::Platform' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, PlayerName) == 0x000088, "Member 'FFortTeamMemberInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, bPartyLeader) == 0x0000A0, "Member 'FFortTeamMemberInfo::bPartyLeader' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, bIsInZone) == 0x0000A1, "Member 'FFortTeamMemberInfo::bIsInZone' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, bHasBoostXp) == 0x0000A2, "Member 'FFortTeamMemberInfo::bHasBoostXp' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, bHasRestXp) == 0x0000A3, "Member 'FFortTeamMemberInfo::bHasRestXp' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, BannerIconId) == 0x0000A8, "Member 'FFortTeamMemberInfo::BannerIconId' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, BannerColorId) == 0x0000B8, "Member 'FFortTeamMemberInfo::BannerColorId' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, bBattlePassPurchased) == 0x0000C8, "Member 'FFortTeamMemberInfo::bBattlePassPurchased' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, BattlePassLevel) == 0x0000CC, "Member 'FFortTeamMemberInfo::BattlePassLevel' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, BattlePassSelfXpBoost) == 0x0000D0, "Member 'FFortTeamMemberInfo::BattlePassSelfXpBoost' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, BattlePassFriendXpBoost) == 0x0000D4, "Member 'FFortTeamMemberInfo::BattlePassFriendXpBoost' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, NumPlayersInParty) == 0x0000D8, "Member 'FFortTeamMemberInfo::NumPlayersInParty' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, PlayerIndex) == 0x0000DC, "Member 'FFortTeamMemberInfo::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, TeamAffiliation) == 0x0000E0, "Member 'FFortTeamMemberInfo::TeamAffiliation' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroClass) == 0x0000E8, "Member 'FFortTeamMemberInfo::HeroClass' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroLevel) == 0x000100, "Member 'FFortTeamMemberInfo::HeroLevel' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroXP) == 0x000118, "Member 'FFortTeamMemberInfo::HeroXP' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroItem) == 0x000120, "Member 'FFortTeamMemberInfo::HeroItem' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, SelectedGadgetItems) == 0x000128, "Member 'FFortTeamMemberInfo::SelectedGadgetItems' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroIcon) == 0x000138, "Member 'FFortTeamMemberInfo::HeroIcon' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HomeBaseInfo) == 0x0001C0, "Member 'FFortTeamMemberInfo::HomeBaseInfo' has a wrong offset!");

// ScriptStruct FortniteGame.PetStimuliResponse
// 0x0010 (0x0010 - 0x0000)
struct FPetStimuliResponse final
{
public:
	struct FGameplayTag                           ResponseTag;                                       // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResponseDuration;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResponseWeight;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPetStimuliResponse) == 0x000004, "Wrong alignment on FPetStimuliResponse");
static_assert(sizeof(FPetStimuliResponse) == 0x000010, "Wrong size on FPetStimuliResponse");
static_assert(offsetof(FPetStimuliResponse, ResponseTag) == 0x000000, "Member 'FPetStimuliResponse::ResponseTag' has a wrong offset!");
static_assert(offsetof(FPetStimuliResponse, ResponseDuration) == 0x000008, "Member 'FPetStimuliResponse::ResponseDuration' has a wrong offset!");
static_assert(offsetof(FPetStimuliResponse, ResponseWeight) == 0x00000C, "Member 'FPetStimuliResponse::ResponseWeight' has a wrong offset!");

// ScriptStruct FortniteGame.MorphValuePair
// 0x000C (0x000C - 0x0000)
struct FMorphValuePair final
{
public:
	class FName                                   MorphName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MorphValue;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMorphValuePair) == 0x000004, "Wrong alignment on FMorphValuePair");
static_assert(sizeof(FMorphValuePair) == 0x00000C, "Wrong size on FMorphValuePair");
static_assert(offsetof(FMorphValuePair, MorphName) == 0x000000, "Member 'FMorphValuePair::MorphName' has a wrong offset!");
static_assert(offsetof(FMorphValuePair, MorphValue) == 0x000008, "Member 'FMorphValuePair::MorphValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientPilotConsumableTestDefinition
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FFortClientPilotConsumableTestDefinition final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortClientPilotConsumableTestDefinition) == 0x000008, "Wrong alignment on FFortClientPilotConsumableTestDefinition");
static_assert(sizeof(FFortClientPilotConsumableTestDefinition) == 0x000030, "Wrong size on FFortClientPilotConsumableTestDefinition");

// ScriptStruct FortniteGame.ReplicatedControlState
// 0x001C (0x001C - 0x0000)
struct FReplicatedControlState final
{
public:
	struct FVector_NetQuantizeNormal              Up;                                                // 0x0000(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              Forward;                                           // 0x000C(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bIsEngineOn : 1;                                   // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedControlState) == 0x000004, "Wrong alignment on FReplicatedControlState");
static_assert(sizeof(FReplicatedControlState) == 0x00001C, "Wrong size on FReplicatedControlState");
static_assert(offsetof(FReplicatedControlState, Up) == 0x000000, "Member 'FReplicatedControlState::Up' has a wrong offset!");
static_assert(offsetof(FReplicatedControlState, Forward) == 0x00000C, "Member 'FReplicatedControlState::Forward' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIDirectorEvent
// 0x0020 (0x0020 - 0x0000)
struct FFortAIDirectorEvent final
{
public:
	EFortAIDirectorEvent                          Event;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventSource;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventTarget;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventValue;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIDirectorEvent) == 0x000008, "Wrong alignment on FFortAIDirectorEvent");
static_assert(sizeof(FFortAIDirectorEvent) == 0x000020, "Wrong size on FFortAIDirectorEvent");
static_assert(offsetof(FFortAIDirectorEvent, Event) == 0x000000, "Member 'FFortAIDirectorEvent::Event' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorEvent, EventSource) == 0x000008, "Member 'FFortAIDirectorEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorEvent, EventTarget) == 0x000010, "Member 'FFortAIDirectorEvent::EventTarget' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorEvent, EventValue) == 0x000018, "Member 'FFortAIDirectorEvent::EventValue' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameTeam
// 0x0028 (0x0028 - 0x0000)
struct FMinigameTeam final
{
public:
	uint8                                         TeamIndex;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TeamName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamColorIndex;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInitTeamSize;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitTeamSizeWeight;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinigameTeam) == 0x000008, "Wrong alignment on FMinigameTeam");
static_assert(sizeof(FMinigameTeam) == 0x000028, "Wrong size on FMinigameTeam");
static_assert(offsetof(FMinigameTeam, TeamIndex) == 0x000000, "Member 'FMinigameTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(FMinigameTeam, TeamName) == 0x000008, "Member 'FMinigameTeam::TeamName' has a wrong offset!");
static_assert(offsetof(FMinigameTeam, TeamColorIndex) == 0x000018, "Member 'FMinigameTeam::TeamColorIndex' has a wrong offset!");
static_assert(offsetof(FMinigameTeam, MaxInitTeamSize) == 0x00001C, "Member 'FMinigameTeam::MaxInitTeamSize' has a wrong offset!");
static_assert(offsetof(FMinigameTeam, InitTeamSizeWeight) == 0x000020, "Member 'FMinigameTeam::InitTeamSizeWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimNode_ScaleHuskBones
// 0x0150 (0x0160 - 0x0010)
struct FFortAnimNode_ScaleHuskBones final : public FAnimNode_Base
{
public:
	struct FPoseLink                              PreScalePose;                                      // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x140];                                     // 0x0020(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimNode_ScaleHuskBones) == 0x000008, "Wrong alignment on FFortAnimNode_ScaleHuskBones");
static_assert(sizeof(FFortAnimNode_ScaleHuskBones) == 0x000160, "Wrong size on FFortAnimNode_ScaleHuskBones");
static_assert(offsetof(FFortAnimNode_ScaleHuskBones, PreScalePose) == 0x000010, "Member 'FFortAnimNode_ScaleHuskBones::PreScalePose' has a wrong offset!");

// ScriptStruct FortniteGame.BaseVariantDef
// 0x0070 (0x0070 - 0x0000)
struct FBaseVariantDef
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStartUnlocked;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefault;                                        // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideIfNotOwned;                                   // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CustomizationVariantTag;                           // 0x000C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   VariantName;                                       // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PreviewImage;                                      // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UnlockRequirements;                                // 0x0058(0x0018)(Edit, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FBaseVariantDef) == 0x000008, "Wrong alignment on FBaseVariantDef");
static_assert(sizeof(FBaseVariantDef) == 0x000070, "Wrong size on FBaseVariantDef");
static_assert(offsetof(FBaseVariantDef, bStartUnlocked) == 0x000008, "Member 'FBaseVariantDef::bStartUnlocked' has a wrong offset!");
static_assert(offsetof(FBaseVariantDef, bIsDefault) == 0x000009, "Member 'FBaseVariantDef::bIsDefault' has a wrong offset!");
static_assert(offsetof(FBaseVariantDef, bHideIfNotOwned) == 0x00000A, "Member 'FBaseVariantDef::bHideIfNotOwned' has a wrong offset!");
static_assert(offsetof(FBaseVariantDef, CustomizationVariantTag) == 0x00000C, "Member 'FBaseVariantDef::CustomizationVariantTag' has a wrong offset!");
static_assert(offsetof(FBaseVariantDef, VariantName) == 0x000018, "Member 'FBaseVariantDef::VariantName' has a wrong offset!");
static_assert(offsetof(FBaseVariantDef, PreviewImage) == 0x000030, "Member 'FBaseVariantDef::PreviewImage' has a wrong offset!");
static_assert(offsetof(FBaseVariantDef, UnlockRequirements) == 0x000058, "Member 'FBaseVariantDef::UnlockRequirements' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_GolfCart
// 0x0054 (0x0054 - 0x0000)
struct FFortAnimInput_GolfCart final
{
public:
	uint8                                         bIsUsingGolfCart : 1;                              // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDriver : 1;                                     // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFrontPassenger : 1;                             // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBackLeftPassenger : 1;                          // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBackRightPassenger : 1;                         // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFrontPassengerAndLeaning : 1;                   // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBackPassengerAndLeaning : 1;                    // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDrifting : 1;                                   // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBoosting : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsEBraking : 1;                                   // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsReversing : 1;                                  // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBraking : 1;                                    // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMoving : 1;                                     // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMovingForward : 1;                              // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsPowerSliding : 1;                               // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsLeaning : 1;                                    // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsLeaningOrBouncing : 1;                          // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceCrouching : 1;                            // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceCrouched : 1;                             // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceJumping : 1;                              // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceRecoiling : 1;                            // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSteeringRight : 1;                              // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSteeringLeft : 1;                               // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RunForwardAlpha;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceCompression;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeanPosition;                                      // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanPositionX;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanPositionY;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanPositionZ;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAimFWD : 1;                                       // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimBWD : 1;                                       // 0x0024(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimLFT : 1;                                       // 0x0024(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimRGT : 1;                                       // 0x0024(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PawnToVehicleDeltaYawAngleDegrees;                 // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimCardDirDeadZoneAngleDegrees;                    // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimCardDirAngleOffsetDegrees;                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastCardDirIndex;                                  // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimFWDDeltaAngleDegrees;                           // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimBWDDeltaAngleDegrees;                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimLFTDeltaAngleDegrees;                           // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimRGTDeltaAngleDegrees;                           // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopePitchDegreeAngle;                             // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeRollDegreeAngle;                              // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAngle;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_GolfCart) == 0x000004, "Wrong alignment on FFortAnimInput_GolfCart");
static_assert(sizeof(FFortAnimInput_GolfCart) == 0x000054, "Wrong size on FFortAnimInput_GolfCart");
static_assert(offsetof(FFortAnimInput_GolfCart, RunForwardAlpha) == 0x000004, "Member 'FFortAnimInput_GolfCart::RunForwardAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, BounceCompression) == 0x000008, "Member 'FFortAnimInput_GolfCart::BounceCompression' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, LeanPosition) == 0x00000C, "Member 'FFortAnimInput_GolfCart::LeanPosition' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, LeanPositionX) == 0x000018, "Member 'FFortAnimInput_GolfCart::LeanPositionX' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, LeanPositionY) == 0x00001C, "Member 'FFortAnimInput_GolfCart::LeanPositionY' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, LeanPositionZ) == 0x000020, "Member 'FFortAnimInput_GolfCart::LeanPositionZ' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, PawnToVehicleDeltaYawAngleDegrees) == 0x000028, "Member 'FFortAnimInput_GolfCart::PawnToVehicleDeltaYawAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, AimCardDirDeadZoneAngleDegrees) == 0x00002C, "Member 'FFortAnimInput_GolfCart::AimCardDirDeadZoneAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, AimCardDirAngleOffsetDegrees) == 0x000030, "Member 'FFortAnimInput_GolfCart::AimCardDirAngleOffsetDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, LastCardDirIndex) == 0x000034, "Member 'FFortAnimInput_GolfCart::LastCardDirIndex' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, AimFWDDeltaAngleDegrees) == 0x000038, "Member 'FFortAnimInput_GolfCart::AimFWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, AimBWDDeltaAngleDegrees) == 0x00003C, "Member 'FFortAnimInput_GolfCart::AimBWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, AimLFTDeltaAngleDegrees) == 0x000040, "Member 'FFortAnimInput_GolfCart::AimLFTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, AimRGTDeltaAngleDegrees) == 0x000044, "Member 'FFortAnimInput_GolfCart::AimRGTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, SlopePitchDegreeAngle) == 0x000048, "Member 'FFortAnimInput_GolfCart::SlopePitchDegreeAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, SlopeRollDegreeAngle) == 0x00004C, "Member 'FFortAnimInput_GolfCart::SlopeRollDegreeAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_GolfCart, SteerAngle) == 0x000050, "Member 'FFortAnimInput_GolfCart::SteerAngle' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyQuestRerollNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortDailyQuestRerollNotification final
{
public:
	class FString                                 NewQuestId;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyQuestRerollNotification) == 0x000008, "Wrong alignment on FFortDailyQuestRerollNotification");
static_assert(sizeof(FFortDailyQuestRerollNotification) == 0x000010, "Wrong size on FFortDailyQuestRerollNotification");
static_assert(offsetof(FFortDailyQuestRerollNotification, NewQuestId) == 0x000000, "Member 'FFortDailyQuestRerollNotification::NewQuestId' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestEarnedBadgeData
// 0x0018 (0x0018 - 0x0000)
struct FFortQuestEarnedBadgeData final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestEarnedBadgeData) == 0x000008, "Wrong alignment on FFortQuestEarnedBadgeData");
static_assert(sizeof(FFortQuestEarnedBadgeData) == 0x000018, "Wrong size on FFortQuestEarnedBadgeData");
static_assert(offsetof(FFortQuestEarnedBadgeData, TemplateId) == 0x000000, "Member 'FFortQuestEarnedBadgeData::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortQuestEarnedBadgeData, Count) == 0x000010, "Member 'FFortQuestEarnedBadgeData::Count' has a wrong offset!");

// ScriptStruct FortniteGame.VehicleSphericalPontoon
// 0x0024 (0x0024 - 0x0000)
struct FVehicleSphericalPontoon final
{
public:
	class FName                                   CenterSocket;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x18];                                       // 0x000C(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleSphericalPontoon) == 0x000004, "Wrong alignment on FVehicleSphericalPontoon");
static_assert(sizeof(FVehicleSphericalPontoon) == 0x000024, "Wrong size on FVehicleSphericalPontoon");
static_assert(offsetof(FVehicleSphericalPontoon, CenterSocket) == 0x000000, "Member 'FVehicleSphericalPontoon::CenterSocket' has a wrong offset!");
static_assert(offsetof(FVehicleSphericalPontoon, Radius) == 0x000008, "Member 'FVehicleSphericalPontoon::Radius' has a wrong offset!");

// ScriptStruct FortniteGame.FortAppActivationSoundMixPair
// 0x0010 (0x0010 - 0x0000)
struct FFortAppActivationSoundMixPair final
{
public:
	class USoundMix*                              TrueMix;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundMix*                              FalseMix;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAppActivationSoundMixPair) == 0x000008, "Wrong alignment on FFortAppActivationSoundMixPair");
static_assert(sizeof(FFortAppActivationSoundMixPair) == 0x000010, "Wrong size on FFortAppActivationSoundMixPair");
static_assert(offsetof(FFortAppActivationSoundMixPair, TrueMix) == 0x000000, "Member 'FFortAppActivationSoundMixPair::TrueMix' has a wrong offset!");
static_assert(offsetof(FFortAppActivationSoundMixPair, FalseMix) == 0x000008, "Member 'FFortAppActivationSoundMixPair::FalseMix' has a wrong offset!");

// ScriptStruct FortniteGame.FortLinkedQuest
// 0x0018 (0x0018 - 0x0000)
struct FFortLinkedQuest final
{
public:
	class UFortQuestItemDefinition*               QuestDefinition;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLinkedQuest) == 0x000008, "Wrong alignment on FFortLinkedQuest");
static_assert(sizeof(FFortLinkedQuest) == 0x000018, "Wrong size on FFortLinkedQuest");
static_assert(offsetof(FFortLinkedQuest, QuestDefinition) == 0x000000, "Member 'FFortLinkedQuest::QuestDefinition' has a wrong offset!");
static_assert(offsetof(FFortLinkedQuest, ObjectiveStatHandle) == 0x000008, "Member 'FFortLinkedQuest::ObjectiveStatHandle' has a wrong offset!");

// ScriptStruct FortniteGame.PurchasedItemInfo
// 0x0010 (0x0010 - 0x0000)
struct FPurchasedItemInfo final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPurchasedItemInfo) == 0x000008, "Wrong alignment on FPurchasedItemInfo");
static_assert(sizeof(FPurchasedItemInfo) == 0x000010, "Wrong size on FPurchasedItemInfo");
static_assert(offsetof(FPurchasedItemInfo, Item) == 0x000000, "Member 'FPurchasedItemInfo::Item' has a wrong offset!");
static_assert(offsetof(FPurchasedItemInfo, Quantity) == 0x000008, "Member 'FPurchasedItemInfo::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.PenetrationAvoidanceFeeler
// 0x0020 (0x0020 - 0x0000)
struct FPenetrationAvoidanceFeeler final
{
public:
	struct FRotator                               AdjustmentRot;                                     // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WorldWeight;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnWeight;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TraceInterval;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FramesUntilNextTrace;                              // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPenetrationAvoidanceFeeler) == 0x000004, "Wrong alignment on FPenetrationAvoidanceFeeler");
static_assert(sizeof(FPenetrationAvoidanceFeeler) == 0x000020, "Wrong size on FPenetrationAvoidanceFeeler");
static_assert(offsetof(FPenetrationAvoidanceFeeler, AdjustmentRot) == 0x000000, "Member 'FPenetrationAvoidanceFeeler::AdjustmentRot' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, WorldWeight) == 0x00000C, "Member 'FPenetrationAvoidanceFeeler::WorldWeight' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, PawnWeight) == 0x000010, "Member 'FPenetrationAvoidanceFeeler::PawnWeight' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, Extent) == 0x000014, "Member 'FPenetrationAvoidanceFeeler::Extent' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, TraceInterval) == 0x000018, "Member 'FPenetrationAvoidanceFeeler::TraceInterval' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, FramesUntilNextTrace) == 0x00001C, "Member 'FPenetrationAvoidanceFeeler::FramesUntilNextTrace' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_OctopusVehicle
// 0x0001 (0x0001 - 0x0000)
struct FFortAnimInput_OctopusVehicle final
{
public:
	uint8                                         bIsUsingOctopusVehicle : 1;                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FFortAnimInput_OctopusVehicle) == 0x000001, "Wrong alignment on FFortAnimInput_OctopusVehicle");
static_assert(sizeof(FFortAnimInput_OctopusVehicle) == 0x000001, "Wrong size on FFortAnimInput_OctopusVehicle");

// ScriptStruct FortniteGame.MaterialVariants
// 0x0068 (0x0068 - 0x0000)
struct FMaterialVariants final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      MaterialToSwap;                                    // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentToOverride;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CascadeMaterialName;                               // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialOverrideIndex;                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      OverrideMaterial;                                  // 0x0040(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialVariants) == 0x000008, "Wrong alignment on FMaterialVariants");
static_assert(sizeof(FMaterialVariants) == 0x000068, "Wrong size on FMaterialVariants");
static_assert(offsetof(FMaterialVariants, MaterialToSwap) == 0x000000, "Member 'FMaterialVariants::MaterialToSwap' has a wrong offset!");
static_assert(offsetof(FMaterialVariants, ComponentToOverride) == 0x000028, "Member 'FMaterialVariants::ComponentToOverride' has a wrong offset!");
static_assert(offsetof(FMaterialVariants, CascadeMaterialName) == 0x000030, "Member 'FMaterialVariants::CascadeMaterialName' has a wrong offset!");
static_assert(offsetof(FMaterialVariants, MaterialOverrideIndex) == 0x000038, "Member 'FMaterialVariants::MaterialOverrideIndex' has a wrong offset!");
static_assert(offsetof(FMaterialVariants, OverrideMaterial) == 0x000040, "Member 'FMaterialVariants::OverrideMaterial' has a wrong offset!");

// ScriptStruct FortniteGame.MaterialParamName
// 0x0008 (0x0008 - 0x0000)
struct FMaterialParamName
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialParamName) == 0x000004, "Wrong alignment on FMaterialParamName");
static_assert(sizeof(FMaterialParamName) == 0x000008, "Wrong size on FMaterialParamName");
static_assert(offsetof(FMaterialParamName, ParamName) == 0x000000, "Member 'FMaterialParamName::ParamName' has a wrong offset!");

// ScriptStruct FortniteGame.MaterialVectorVariant
// 0x0010 (0x0018 - 0x0008)
struct FMaterialVectorVariant final : public FMaterialParamName
{
public:
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialVectorVariant) == 0x000004, "Wrong alignment on FMaterialVectorVariant");
static_assert(sizeof(FMaterialVectorVariant) == 0x000018, "Wrong size on FMaterialVectorVariant");
static_assert(offsetof(FMaterialVectorVariant, Value) == 0x000008, "Member 'FMaterialVectorVariant::Value' has a wrong offset!");

// ScriptStruct FortniteGame.MaterialFloatVariant
// 0x0004 (0x000C - 0x0008)
struct FMaterialFloatVariant final : public FMaterialParamName
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialFloatVariant) == 0x000004, "Wrong alignment on FMaterialFloatVariant");
static_assert(sizeof(FMaterialFloatVariant) == 0x00000C, "Wrong size on FMaterialFloatVariant");
static_assert(offsetof(FMaterialFloatVariant, Value) == 0x000008, "Member 'FMaterialFloatVariant::Value' has a wrong offset!");

// ScriptStruct FortniteGame.MaterialTextureVariant
// 0x0028 (0x0030 - 0x0008)
struct FMaterialTextureVariant final : public FMaterialParamName
{
public:
	TSoftObjectPtr<class UTexture>                Value;                                             // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialTextureVariant) == 0x000008, "Wrong alignment on FMaterialTextureVariant");
static_assert(sizeof(FMaterialTextureVariant) == 0x000030, "Wrong size on FMaterialTextureVariant");
static_assert(offsetof(FMaterialTextureVariant, Value) == 0x000008, "Member 'FMaterialTextureVariant::Value' has a wrong offset!");

// ScriptStruct FortniteGame.MaterialParamterDef
// 0x0060 (0x0060 - 0x0000)
struct FMaterialParamterDef final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      MaterialToAlter;                                   // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CascadeMaterialName;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaterialVectorVariant>         ColorParams;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialTextureVariant>        TextureParams;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialFloatVariant>          FloatParams;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialParamterDef) == 0x000008, "Wrong alignment on FMaterialParamterDef");
static_assert(sizeof(FMaterialParamterDef) == 0x000060, "Wrong size on FMaterialParamterDef");
static_assert(offsetof(FMaterialParamterDef, MaterialToAlter) == 0x000000, "Member 'FMaterialParamterDef::MaterialToAlter' has a wrong offset!");
static_assert(offsetof(FMaterialParamterDef, CascadeMaterialName) == 0x000028, "Member 'FMaterialParamterDef::CascadeMaterialName' has a wrong offset!");
static_assert(offsetof(FMaterialParamterDef, ColorParams) == 0x000030, "Member 'FMaterialParamterDef::ColorParams' has a wrong offset!");
static_assert(offsetof(FMaterialParamterDef, TextureParams) == 0x000040, "Member 'FMaterialParamterDef::TextureParams' has a wrong offset!");
static_assert(offsetof(FMaterialParamterDef, FloatParams) == 0x000050, "Member 'FMaterialParamterDef::FloatParams' has a wrong offset!");

// ScriptStruct FortniteGame.VariantParticleSystemInitializerData
// 0x0068 (0x0068 - 0x0000)
struct FVariantParticleSystemInitializerData final
{
public:
	class FName                                   ParticleComponentName;                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         ParticleSystem;                                    // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           MeshToBindTO;                                      // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               LocationRule;                                      // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               RotationRule;                                      // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               ScaleRule;                                         // 0x0062(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeldSimulatedBodies;                              // 0x0063(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVariantParticleSystemInitializerData) == 0x000008, "Wrong alignment on FVariantParticleSystemInitializerData");
static_assert(sizeof(FVariantParticleSystemInitializerData) == 0x000068, "Wrong size on FVariantParticleSystemInitializerData");
static_assert(offsetof(FVariantParticleSystemInitializerData, ParticleComponentName) == 0x000000, "Member 'FVariantParticleSystemInitializerData::ParticleComponentName' has a wrong offset!");
static_assert(offsetof(FVariantParticleSystemInitializerData, ParticleSystem) == 0x000008, "Member 'FVariantParticleSystemInitializerData::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FVariantParticleSystemInitializerData, MeshToBindTO) == 0x000030, "Member 'FVariantParticleSystemInitializerData::MeshToBindTO' has a wrong offset!");
static_assert(offsetof(FVariantParticleSystemInitializerData, AttachSocketName) == 0x000058, "Member 'FVariantParticleSystemInitializerData::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FVariantParticleSystemInitializerData, LocationRule) == 0x000060, "Member 'FVariantParticleSystemInitializerData::LocationRule' has a wrong offset!");
static_assert(offsetof(FVariantParticleSystemInitializerData, RotationRule) == 0x000061, "Member 'FVariantParticleSystemInitializerData::RotationRule' has a wrong offset!");
static_assert(offsetof(FVariantParticleSystemInitializerData, ScaleRule) == 0x000062, "Member 'FVariantParticleSystemInitializerData::ScaleRule' has a wrong offset!");
static_assert(offsetof(FVariantParticleSystemInitializerData, bWeldSimulatedBodies) == 0x000063, "Member 'FVariantParticleSystemInitializerData::bWeldSimulatedBodies' has a wrong offset!");

// ScriptStruct FortniteGame.VectorParamVariant
// 0x000C (0x0014 - 0x0008)
struct FVectorParamVariant final : public FMaterialParamName
{
public:
	struct FVector                                Value;                                             // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVectorParamVariant) == 0x000004, "Wrong alignment on FVectorParamVariant");
static_assert(sizeof(FVectorParamVariant) == 0x000014, "Wrong size on FVectorParamVariant");
static_assert(offsetof(FVectorParamVariant, Value) == 0x000008, "Member 'FVectorParamVariant::Value' has a wrong offset!");

// ScriptStruct FortniteGame.ParticleParamterVariant
// 0x0058 (0x0058 - 0x0000)
struct FParticleParamterVariant final
{
public:
	TSoftObjectPtr<class UParticleSystem>         ParticleSystemToAlter;                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaterialVectorVariant>         ColorParams;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorParamVariant>            VectorParams;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialFloatVariant>          FloatParams;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParticleParamterVariant) == 0x000008, "Wrong alignment on FParticleParamterVariant");
static_assert(sizeof(FParticleParamterVariant) == 0x000058, "Wrong size on FParticleParamterVariant");
static_assert(offsetof(FParticleParamterVariant, ParticleSystemToAlter) == 0x000000, "Member 'FParticleParamterVariant::ParticleSystemToAlter' has a wrong offset!");
static_assert(offsetof(FParticleParamterVariant, ColorParams) == 0x000028, "Member 'FParticleParamterVariant::ColorParams' has a wrong offset!");
static_assert(offsetof(FParticleParamterVariant, VectorParams) == 0x000038, "Member 'FParticleParamterVariant::VectorParams' has a wrong offset!");
static_assert(offsetof(FParticleParamterVariant, FloatParams) == 0x000048, "Member 'FParticleParamterVariant::FloatParams' has a wrong offset!");

// ScriptStruct FortniteGame.ParticleVariant
// 0x0058 (0x0058 - 0x0000)
struct FParticleVariant final
{
public:
	TSoftObjectPtr<class UParticleSystem>         ParticleSystemToAlter;                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentToOverride;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         OverrideParticleSystem;                            // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParticleVariant) == 0x000008, "Wrong alignment on FParticleVariant");
static_assert(sizeof(FParticleVariant) == 0x000058, "Wrong size on FParticleVariant");
static_assert(offsetof(FParticleVariant, ParticleSystemToAlter) == 0x000000, "Member 'FParticleVariant::ParticleSystemToAlter' has a wrong offset!");
static_assert(offsetof(FParticleVariant, ComponentToOverride) == 0x000028, "Member 'FParticleVariant::ComponentToOverride' has a wrong offset!");
static_assert(offsetof(FParticleVariant, OverrideParticleSystem) == 0x000030, "Member 'FParticleVariant::OverrideParticleSystem' has a wrong offset!");

// ScriptStruct FortniteGame.SocketTransformVariant
// 0x0038 (0x0038 - 0x0000)
struct FSocketTransformVariant final
{
public:
	class FName                                   SourceSocketName;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverridSocketName;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SourceObjectToModify;                              // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocketTransformVariant) == 0x000008, "Wrong alignment on FSocketTransformVariant");
static_assert(sizeof(FSocketTransformVariant) == 0x000038, "Wrong size on FSocketTransformVariant");
static_assert(offsetof(FSocketTransformVariant, SourceSocketName) == 0x000000, "Member 'FSocketTransformVariant::SourceSocketName' has a wrong offset!");
static_assert(offsetof(FSocketTransformVariant, OverridSocketName) == 0x000008, "Member 'FSocketTransformVariant::OverridSocketName' has a wrong offset!");
static_assert(offsetof(FSocketTransformVariant, SourceObjectToModify) == 0x000010, "Member 'FSocketTransformVariant::SourceObjectToModify' has a wrong offset!");

// ScriptStruct FortniteGame.CosmeticMetaTagContainer
// 0x0040 (0x0040 - 0x0000)
struct FCosmeticMetaTagContainer final
{
public:
	struct FGameplayTagContainer                  MetaTagsToApply;                                   // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MetaTagsToRemove;                                  // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmeticMetaTagContainer) == 0x000008, "Wrong alignment on FCosmeticMetaTagContainer");
static_assert(sizeof(FCosmeticMetaTagContainer) == 0x000040, "Wrong size on FCosmeticMetaTagContainer");
static_assert(offsetof(FCosmeticMetaTagContainer, MetaTagsToApply) == 0x000000, "Member 'FCosmeticMetaTagContainer::MetaTagsToApply' has a wrong offset!");
static_assert(offsetof(FCosmeticMetaTagContainer, MetaTagsToRemove) == 0x000020, "Member 'FCosmeticMetaTagContainer::MetaTagsToRemove' has a wrong offset!");

// ScriptStruct FortniteGame.PartVariantDef
// 0x00B0 (0x0120 - 0x0070)
struct FPartVariantDef final : public FBaseVariantDef
{
public:
	TArray<TSoftObjectPtr<class UCustomCharacterPart>> VariantParts;                                      // 0x0070(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FMaterialVariants>              VariantMaterials;                                  // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialParamterDef>           VariantMaterialParams;                             // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVariantParticleSystemInitializerData> InitalParticelSystemData;                          // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FParticleVariant>               VariantParticles;                                  // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FParticleParamterVariant>       VariantParticleParams;                             // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSocketTransformVariant>        SocketTransforms;                                  // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCosmeticMetaTagContainer              MetaTags;                                          // 0x00E0(0x0040)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartVariantDef) == 0x000008, "Wrong alignment on FPartVariantDef");
static_assert(sizeof(FPartVariantDef) == 0x000120, "Wrong size on FPartVariantDef");
static_assert(offsetof(FPartVariantDef, VariantParts) == 0x000070, "Member 'FPartVariantDef::VariantParts' has a wrong offset!");
static_assert(offsetof(FPartVariantDef, VariantMaterials) == 0x000080, "Member 'FPartVariantDef::VariantMaterials' has a wrong offset!");
static_assert(offsetof(FPartVariantDef, VariantMaterialParams) == 0x000090, "Member 'FPartVariantDef::VariantMaterialParams' has a wrong offset!");
static_assert(offsetof(FPartVariantDef, InitalParticelSystemData) == 0x0000A0, "Member 'FPartVariantDef::InitalParticelSystemData' has a wrong offset!");
static_assert(offsetof(FPartVariantDef, VariantParticles) == 0x0000B0, "Member 'FPartVariantDef::VariantParticles' has a wrong offset!");
static_assert(offsetof(FPartVariantDef, VariantParticleParams) == 0x0000C0, "Member 'FPartVariantDef::VariantParticleParams' has a wrong offset!");
static_assert(offsetof(FPartVariantDef, SocketTransforms) == 0x0000D0, "Member 'FPartVariantDef::SocketTransforms' has a wrong offset!");
static_assert(offsetof(FPartVariantDef, MetaTags) == 0x0000E0, "Member 'FPartVariantDef::MetaTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortPickupTossOverrideData
// 0x0010 (0x0010 - 0x0000)
struct FFortPickupTossOverrideData final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinTossDist;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTossDist;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDirectionConeHalfAngle;                       // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPickupTossOverrideData) == 0x000004, "Wrong alignment on FFortPickupTossOverrideData");
static_assert(sizeof(FFortPickupTossOverrideData) == 0x000010, "Wrong size on FFortPickupTossOverrideData");
static_assert(offsetof(FFortPickupTossOverrideData, bIsValid) == 0x000000, "Member 'FFortPickupTossOverrideData::bIsValid' has a wrong offset!");
static_assert(offsetof(FFortPickupTossOverrideData, MinTossDist) == 0x000004, "Member 'FFortPickupTossOverrideData::MinTossDist' has a wrong offset!");
static_assert(offsetof(FFortPickupTossOverrideData, MaxTossDist) == 0x000008, "Member 'FFortPickupTossOverrideData::MaxTossDist' has a wrong offset!");
static_assert(offsetof(FFortPickupTossOverrideData, SpawnDirectionConeHalfAngle) == 0x00000C, "Member 'FFortPickupTossOverrideData::SpawnDirectionConeHalfAngle' has a wrong offset!");

// ScriptStruct FortniteGame.QueryName
// 0x0008 (0x0008 - 0x0000)
struct FQueryName final
{
public:
	class FName                                   QueryName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueryName) == 0x000004, "Wrong alignment on FQueryName");
static_assert(sizeof(FQueryName) == 0x000008, "Wrong size on FQueryName");
static_assert(offsetof(FQueryName, QueryName) == 0x000000, "Member 'FQueryName::QueryName' has a wrong offset!");

// ScriptStruct FortniteGame.ScriptedAction
// 0x0070 (0x0070 - 0x0000)
struct FScriptedAction final
{
public:
	class FString                                 Template;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Params;                                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ParamMap;                                          // 0x0020(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScriptedAction) == 0x000008, "Wrong alignment on FScriptedAction");
static_assert(sizeof(FScriptedAction) == 0x000070, "Wrong size on FScriptedAction");
static_assert(offsetof(FScriptedAction, Template) == 0x000000, "Member 'FScriptedAction::Template' has a wrong offset!");
static_assert(offsetof(FScriptedAction, Params) == 0x000010, "Member 'FScriptedAction::Params' has a wrong offset!");
static_assert(offsetof(FScriptedAction, ParamMap) == 0x000020, "Member 'FScriptedAction::ParamMap' has a wrong offset!");

// ScriptStruct FortniteGame.ScriptedBehavior
// 0x0020 (0x0020 - 0x0000)
struct FScriptedBehavior final
{
public:
	class FString                                 ScriptName;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FScriptedAction>                Actions;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScriptedBehavior) == 0x000008, "Wrong alignment on FScriptedBehavior");
static_assert(sizeof(FScriptedBehavior) == 0x000020, "Wrong size on FScriptedBehavior");
static_assert(offsetof(FScriptedBehavior, ScriptName) == 0x000000, "Member 'FScriptedBehavior::ScriptName' has a wrong offset!");
static_assert(offsetof(FScriptedBehavior, Actions) == 0x000010, "Member 'FScriptedBehavior::Actions' has a wrong offset!");

// ScriptStruct FortniteGame.FortDifficultyIncreaseRewardEntry
// 0x0028 (0x0028 - 0x0000)
struct FFortDifficultyIncreaseRewardEntry final
{
public:
	int32                                         DifficultyIncreaseTier;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMcpLootResult                         DifficultyIncreaseMissionRewards;                  // 0x0008(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDifficultyIncreaseRewardEntry) == 0x000008, "Wrong alignment on FFortDifficultyIncreaseRewardEntry");
static_assert(sizeof(FFortDifficultyIncreaseRewardEntry) == 0x000028, "Wrong size on FFortDifficultyIncreaseRewardEntry");
static_assert(offsetof(FFortDifficultyIncreaseRewardEntry, DifficultyIncreaseTier) == 0x000000, "Member 'FFortDifficultyIncreaseRewardEntry::DifficultyIncreaseTier' has a wrong offset!");
static_assert(offsetof(FFortDifficultyIncreaseRewardEntry, DifficultyIncreaseMissionRewards) == 0x000008, "Member 'FFortDifficultyIncreaseRewardEntry::DifficultyIncreaseMissionRewards' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingEditAnalyticEvent
// 0x0002 (0x0002 - 0x0000)
struct FBuildingEditAnalyticEvent final
{
public:
	EFortBuildingType                             BuildingType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortResourceType                             ResourceType;                                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingEditAnalyticEvent) == 0x000001, "Wrong alignment on FBuildingEditAnalyticEvent");
static_assert(sizeof(FBuildingEditAnalyticEvent) == 0x000002, "Wrong size on FBuildingEditAnalyticEvent");
static_assert(offsetof(FBuildingEditAnalyticEvent, BuildingType) == 0x000000, "Member 'FBuildingEditAnalyticEvent::BuildingType' has a wrong offset!");
static_assert(offsetof(FBuildingEditAnalyticEvent, ResourceType) == 0x000001, "Member 'FBuildingEditAnalyticEvent::ResourceType' has a wrong offset!");

// ScriptStruct FortniteGame.FerretVehicleBoostLevel
// 0x0008 (0x0008 - 0x0000)
struct FFerretVehicleBoostLevel final
{
public:
	float                                         AccumulationPercent;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTime;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFerretVehicleBoostLevel) == 0x000004, "Wrong alignment on FFerretVehicleBoostLevel");
static_assert(sizeof(FFerretVehicleBoostLevel) == 0x000008, "Wrong size on FFerretVehicleBoostLevel");
static_assert(offsetof(FFerretVehicleBoostLevel, AccumulationPercent) == 0x000000, "Member 'FFerretVehicleBoostLevel::AccumulationPercent' has a wrong offset!");
static_assert(offsetof(FFerretVehicleBoostLevel, BoostTime) == 0x000004, "Member 'FFerretVehicleBoostLevel::BoostTime' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaLevelInfo
// 0x0024 (0x0024 - 0x0000)
struct FAthenaLevelInfo final
{
public:
	int32                                         AccountLevel;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelXp;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelXpForLevel;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookLevel;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookMaxLevel;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookLevelXp;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookLevelXpForLevel;                               // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaLevelInfo) == 0x000004, "Wrong alignment on FAthenaLevelInfo");
static_assert(sizeof(FAthenaLevelInfo) == 0x000024, "Wrong size on FAthenaLevelInfo");
static_assert(offsetof(FAthenaLevelInfo, AccountLevel) == 0x000000, "Member 'FAthenaLevelInfo::AccountLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, Level) == 0x000004, "Member 'FAthenaLevelInfo::Level' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, MaxLevel) == 0x000008, "Member 'FAthenaLevelInfo::MaxLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, LevelXp) == 0x00000C, "Member 'FAthenaLevelInfo::LevelXp' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, LevelXpForLevel) == 0x000010, "Member 'FAthenaLevelInfo::LevelXpForLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, BookLevel) == 0x000014, "Member 'FAthenaLevelInfo::BookLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, BookMaxLevel) == 0x000018, "Member 'FAthenaLevelInfo::BookMaxLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, BookLevelXp) == 0x00001C, "Member 'FAthenaLevelInfo::BookLevelXp' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, BookLevelXpForLevel) == 0x000020, "Member 'FAthenaLevelInfo::BookLevelXpForLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortPublicAccountInfo
// 0x0034 (0x0034 - 0x0000)
struct FFortPublicAccountInfo
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelXp;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelXpForLevel;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAthenaLevelInfo                       BattleRoyaleLevel;                                 // 0x0010(0x0024)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPublicAccountInfo) == 0x000004, "Wrong alignment on FFortPublicAccountInfo");
static_assert(sizeof(FFortPublicAccountInfo) == 0x000034, "Wrong size on FFortPublicAccountInfo");
static_assert(offsetof(FFortPublicAccountInfo, Level) == 0x000000, "Member 'FFortPublicAccountInfo::Level' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, MaxLevel) == 0x000004, "Member 'FFortPublicAccountInfo::MaxLevel' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, LevelXp) == 0x000008, "Member 'FFortPublicAccountInfo::LevelXp' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, LevelXpForLevel) == 0x00000C, "Member 'FFortPublicAccountInfo::LevelXpForLevel' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, BattleRoyaleLevel) == 0x000010, "Member 'FFortPublicAccountInfo::BattleRoyaleLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortPrivateAccountInfo
// 0x0004 (0x0038 - 0x0034)
struct FFortPrivateAccountInfo final : public FFortPublicAccountInfo
{
public:
	int32                                         MtxBalance;                                        // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPrivateAccountInfo) == 0x000004, "Wrong alignment on FFortPrivateAccountInfo");
static_assert(sizeof(FFortPrivateAccountInfo) == 0x000038, "Wrong size on FFortPrivateAccountInfo");
static_assert(offsetof(FFortPrivateAccountInfo, MtxBalance) == 0x000034, "Member 'FFortPrivateAccountInfo::MtxBalance' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostItemUpgradeData
// 0x0050 (0x0058 - 0x0008)
struct FOutpostItemUpgradeData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortOutpostItemDefinition> ItemDefinition;                                    // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequiredItems;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredAccountItems;                              // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostItemUpgradeData) == 0x000008, "Wrong alignment on FOutpostItemUpgradeData");
static_assert(sizeof(FOutpostItemUpgradeData) == 0x000058, "Wrong size on FOutpostItemUpgradeData");
static_assert(offsetof(FOutpostItemUpgradeData, ItemDefinition) == 0x000008, "Member 'FOutpostItemUpgradeData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FOutpostItemUpgradeData, ItemLevel) == 0x000030, "Member 'FOutpostItemUpgradeData::ItemLevel' has a wrong offset!");
static_assert(offsetof(FOutpostItemUpgradeData, RequiredItems) == 0x000038, "Member 'FOutpostItemUpgradeData::RequiredItems' has a wrong offset!");
static_assert(offsetof(FOutpostItemUpgradeData, RequiredAccountItems) == 0x000048, "Member 'FOutpostItemUpgradeData::RequiredAccountItems' has a wrong offset!");

// ScriptStruct FortniteGame.FortPersistentGameplayStatValue
// 0x0018 (0x0018 - 0x0000)
struct FFortPersistentGameplayStatValue final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPersistentGameplayStatValue) == 0x000008, "Wrong alignment on FFortPersistentGameplayStatValue");
static_assert(sizeof(FFortPersistentGameplayStatValue) == 0x000018, "Wrong size on FFortPersistentGameplayStatValue");
static_assert(offsetof(FFortPersistentGameplayStatValue, StatName) == 0x000000, "Member 'FFortPersistentGameplayStatValue::StatName' has a wrong offset!");
static_assert(offsetof(FFortPersistentGameplayStatValue, StatValue) == 0x000010, "Member 'FFortPersistentGameplayStatValue::StatValue' has a wrong offset!");

// ScriptStruct FortniteGame.GeneralChatRoom
// 0x0028 (0x0028 - 0x0000)
struct FGeneralChatRoom final
{
public:
	class FString                                 RoomName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentMembersCount;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMembersCount;                                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublicFacingShardName;                             // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralChatRoom) == 0x000008, "Wrong alignment on FGeneralChatRoom");
static_assert(sizeof(FGeneralChatRoom) == 0x000028, "Wrong size on FGeneralChatRoom");
static_assert(offsetof(FGeneralChatRoom, RoomName) == 0x000000, "Member 'FGeneralChatRoom::RoomName' has a wrong offset!");
static_assert(offsetof(FGeneralChatRoom, CurrentMembersCount) == 0x000010, "Member 'FGeneralChatRoom::CurrentMembersCount' has a wrong offset!");
static_assert(offsetof(FGeneralChatRoom, MaxMembersCount) == 0x000014, "Member 'FGeneralChatRoom::MaxMembersCount' has a wrong offset!");
static_assert(offsetof(FGeneralChatRoom, PublicFacingShardName) == 0x000018, "Member 'FGeneralChatRoom::PublicFacingShardName' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaWeaponStats
// 0x0048 (0x0048 - 0x0000)
struct FAthenaWeaponStats final
{
public:
	class FString                                 WeaponId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Stats[0xD];                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaWeaponStats) == 0x000008, "Wrong alignment on FAthenaWeaponStats");
static_assert(sizeof(FAthenaWeaponStats) == 0x000048, "Wrong size on FAthenaWeaponStats");
static_assert(offsetof(FAthenaWeaponStats, WeaponId) == 0x000000, "Member 'FAthenaWeaponStats::WeaponId' has a wrong offset!");
static_assert(offsetof(FAthenaWeaponStats, Stats) == 0x000010, "Member 'FAthenaWeaponStats::Stats' has a wrong offset!");

// ScriptStruct FortniteGame.FortUserCloudRequestHandle
// 0x0008 (0x0008 - 0x0000)
struct FFortUserCloudRequestHandle final
{
public:
	uint64                                        Handle;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortUserCloudRequestHandle) == 0x000008, "Wrong alignment on FFortUserCloudRequestHandle");
static_assert(sizeof(FFortUserCloudRequestHandle) == 0x000008, "Wrong size on FFortUserCloudRequestHandle");
static_assert(offsetof(FFortUserCloudRequestHandle, Handle) == 0x000000, "Member 'FFortUserCloudRequestHandle::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.FortUserCloudRequestPayload
// 0x0058 (0x0058 - 0x0000)
struct FFortUserCloudRequestPayload final
{
public:
	struct FFortUserCloudRequestHandle            RequestHandle;                                     // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UserNetId;                                         // 0x0008(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUserCloudRequestType                     RequestType;                                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 DataBuffer;                                        // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUserCloudRequestPayload) == 0x000008, "Wrong alignment on FFortUserCloudRequestPayload");
static_assert(sizeof(FFortUserCloudRequestPayload) == 0x000058, "Wrong size on FFortUserCloudRequestPayload");
static_assert(offsetof(FFortUserCloudRequestPayload, RequestHandle) == 0x000000, "Member 'FFortUserCloudRequestPayload::RequestHandle' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestPayload, UserNetId) == 0x000008, "Member 'FFortUserCloudRequestPayload::UserNetId' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestPayload, Filename) == 0x000030, "Member 'FFortUserCloudRequestPayload::Filename' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestPayload, RequestType) == 0x000040, "Member 'FFortUserCloudRequestPayload::RequestType' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestPayload, DataBuffer) == 0x000048, "Member 'FFortUserCloudRequestPayload::DataBuffer' has a wrong offset!");

// ScriptStruct FortniteGame.FortUserCloudRequest
// 0x0070 (0x0070 - 0x0000)
struct FFortUserCloudRequest final
{
public:
	struct FFortUserCloudRequestPayload           RequestPayload;                                    // 0x0000(0x0058)(NativeAccessSpecifierPublic)
	uint8                                         bNeedsFileEnumeration : 1;                         // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStartedProcessing : 1;                            // 0x0058(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x17];                                      // 0x0059(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUserCloudRequest) == 0x000008, "Wrong alignment on FFortUserCloudRequest");
static_assert(sizeof(FFortUserCloudRequest) == 0x000070, "Wrong size on FFortUserCloudRequest");
static_assert(offsetof(FFortUserCloudRequest, RequestPayload) == 0x000000, "Member 'FFortUserCloudRequest::RequestPayload' has a wrong offset!");

// ScriptStruct FortniteGame.FortUserCloudRequestQueue
// 0x0028 (0x0028 - 0x0000)
struct FFortUserCloudRequestQueue final
{
public:
	uint8                                         bFreezeIncomingRequests : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortUserCloudRequestHandle            FirstFrozenHandle;                                 // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           ProcessingTimerHandle;                             // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortUserCloudRequest>          RequestQueue;                                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUserCloudRequestQueue) == 0x000008, "Wrong alignment on FFortUserCloudRequestQueue");
static_assert(sizeof(FFortUserCloudRequestQueue) == 0x000028, "Wrong size on FFortUserCloudRequestQueue");
static_assert(offsetof(FFortUserCloudRequestQueue, FirstFrozenHandle) == 0x000008, "Member 'FFortUserCloudRequestQueue::FirstFrozenHandle' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestQueue, ProcessingTimerHandle) == 0x000010, "Member 'FFortUserCloudRequestQueue::ProcessingTimerHandle' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestQueue, RequestQueue) == 0x000018, "Member 'FFortUserCloudRequestQueue::RequestQueue' has a wrong offset!");

// ScriptStruct FortniteGame.TransactionalAnalyticEvent
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FTransactionalAnalyticEvent final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTransactionalAnalyticEvent) == 0x000008, "Wrong alignment on FTransactionalAnalyticEvent");
static_assert(sizeof(FTransactionalAnalyticEvent) == 0x000028, "Wrong size on FTransactionalAnalyticEvent");

// ScriptStruct FortniteGame.FortEncounterGroupLimitData
// 0x000C (0x000C - 0x0000)
struct FFortEncounterGroupLimitData final
{
public:
	int32                                         DesiredPawnNumCap;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingDesiredLimit;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentEncounterLimit;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterGroupLimitData) == 0x000004, "Wrong alignment on FFortEncounterGroupLimitData");
static_assert(sizeof(FFortEncounterGroupLimitData) == 0x00000C, "Wrong size on FFortEncounterGroupLimitData");
static_assert(offsetof(FFortEncounterGroupLimitData, DesiredPawnNumCap) == 0x000000, "Member 'FFortEncounterGroupLimitData::DesiredPawnNumCap' has a wrong offset!");
static_assert(offsetof(FFortEncounterGroupLimitData, RemainingDesiredLimit) == 0x000004, "Member 'FFortEncounterGroupLimitData::RemainingDesiredLimit' has a wrong offset!");
static_assert(offsetof(FFortEncounterGroupLimitData, CurrentEncounterLimit) == 0x000008, "Member 'FFortEncounterGroupLimitData::CurrentEncounterLimit' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayEffectApplicationInfoHard
// 0x0010 (0x0010 - 0x0000)
struct FGameplayEffectApplicationInfoHard final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEffectApplicationInfoHard) == 0x000008, "Wrong alignment on FGameplayEffectApplicationInfoHard");
static_assert(sizeof(FGameplayEffectApplicationInfoHard) == 0x000010, "Wrong size on FGameplayEffectApplicationInfoHard");
static_assert(offsetof(FGameplayEffectApplicationInfoHard, GameplayEffect) == 0x000000, "Member 'FGameplayEffectApplicationInfoHard::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FGameplayEffectApplicationInfoHard, Level) == 0x000008, "Member 'FGameplayEffectApplicationInfoHard::Level' has a wrong offset!");

// ScriptStruct FortniteGame.FortDeliveryInfoRequirementsFilter
// 0x0098 (0x0098 - 0x0000)
struct FFortDeliveryInfoRequirementsFilter final
{
public:
	struct FGameplayTagRequirements               SourceTagRequirements;                             // 0x0000(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTagRequirements;                             // 0x0040(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortTeamAffiliation                          ApplicableTeamAffiliation;                         // 0x0080(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bConsiderTeamAffiliationToInstigator : 1;          // 0x0084(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EFortTeam                                     ApplicableTeam;                                    // 0x0088(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bConsiderTeam : 1;                                 // 0x008C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyToPlayerPawns : 1;                           // 0x008C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyToAIPawns : 1;                               // 0x008C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyToBuildingActors : 1;                        // 0x008C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EFortDeliveryInfoBuildingActorSpecification   BuildingActorSpecification;                        // 0x0090(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bApplyToGlobalEnvironmentAbilityActor : 1;         // 0x0094(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDeliveryInfoRequirementsFilter) == 0x000008, "Wrong alignment on FFortDeliveryInfoRequirementsFilter");
static_assert(sizeof(FFortDeliveryInfoRequirementsFilter) == 0x000098, "Wrong size on FFortDeliveryInfoRequirementsFilter");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, SourceTagRequirements) == 0x000000, "Member 'FFortDeliveryInfoRequirementsFilter::SourceTagRequirements' has a wrong offset!");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, TargetTagRequirements) == 0x000040, "Member 'FFortDeliveryInfoRequirementsFilter::TargetTagRequirements' has a wrong offset!");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, ApplicableTeamAffiliation) == 0x000080, "Member 'FFortDeliveryInfoRequirementsFilter::ApplicableTeamAffiliation' has a wrong offset!");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, ApplicableTeam) == 0x000088, "Member 'FFortDeliveryInfoRequirementsFilter::ApplicableTeam' has a wrong offset!");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, BuildingActorSpecification) == 0x000090, "Member 'FFortDeliveryInfoRequirementsFilter::BuildingActorSpecification' has a wrong offset!");

// ScriptStruct FortniteGame.ProximityBasedGEDeliveryInfoBase
// 0x00A8 (0x00A8 - 0x0000)
struct FProximityBasedGEDeliveryInfoBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortDeliveryInfoRequirementsFilter    DeliveryRequirements;                              // 0x0008(0x0098)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EFortProximityBasedGEApplicationType          ProximityApplicationType;                          // 0x00A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProximityBasedGEDeliveryInfoBase) == 0x000008, "Wrong alignment on FProximityBasedGEDeliveryInfoBase");
static_assert(sizeof(FProximityBasedGEDeliveryInfoBase) == 0x0000A8, "Wrong size on FProximityBasedGEDeliveryInfoBase");
static_assert(offsetof(FProximityBasedGEDeliveryInfoBase, DeliveryRequirements) == 0x000008, "Member 'FProximityBasedGEDeliveryInfoBase::DeliveryRequirements' has a wrong offset!");
static_assert(offsetof(FProximityBasedGEDeliveryInfoBase, ProximityApplicationType) == 0x0000A0, "Member 'FProximityBasedGEDeliveryInfoBase::ProximityApplicationType' has a wrong offset!");

// ScriptStruct FortniteGame.ProximityBasedGEDeliveryInfoHard
// 0x0010 (0x00B8 - 0x00A8)
struct FProximityBasedGEDeliveryInfoHard final : public FProximityBasedGEDeliveryInfoBase
{
public:
	TArray<struct FGameplayEffectApplicationInfoHard> EffectsToApply;                                    // 0x00A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FProximityBasedGEDeliveryInfoHard) == 0x000008, "Wrong alignment on FProximityBasedGEDeliveryInfoHard");
static_assert(sizeof(FProximityBasedGEDeliveryInfoHard) == 0x0000B8, "Wrong size on FProximityBasedGEDeliveryInfoHard");
static_assert(offsetof(FProximityBasedGEDeliveryInfoHard, EffectsToApply) == 0x0000A8, "Member 'FProximityBasedGEDeliveryInfoHard::EffectsToApply' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameScoreboardValue
// 0x0010 (0x0010 - 0x0000)
struct FMinigameScoreboardValue final
{
public:
	TSubclassOf<class UFortMinigameStatFilter>    StatFilter;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighlight;                                        // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinigameScoreboardValue) == 0x000008, "Wrong alignment on FMinigameScoreboardValue");
static_assert(sizeof(FMinigameScoreboardValue) == 0x000010, "Wrong size on FMinigameScoreboardValue");
static_assert(offsetof(FMinigameScoreboardValue, StatFilter) == 0x000000, "Member 'FMinigameScoreboardValue::StatFilter' has a wrong offset!");
static_assert(offsetof(FMinigameScoreboardValue, Value) == 0x000008, "Member 'FMinigameScoreboardValue::Value' has a wrong offset!");
static_assert(offsetof(FMinigameScoreboardValue, bHighlight) == 0x00000C, "Member 'FMinigameScoreboardValue::bHighlight' has a wrong offset!");

// ScriptStruct FortniteGame.MingiameScoreboardRow
// 0x0038 (0x0038 - 0x0000)
struct FMingiameScoreboardRow
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TeamColorIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMinigameScoreboardValue>       Values;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         WinCount;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighlight;                                        // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMingiameScoreboardRow) == 0x000008, "Wrong alignment on FMingiameScoreboardRow");
static_assert(sizeof(FMingiameScoreboardRow) == 0x000038, "Wrong size on FMingiameScoreboardRow");
static_assert(offsetof(FMingiameScoreboardRow, Name) == 0x000000, "Member 'FMingiameScoreboardRow::Name' has a wrong offset!");
static_assert(offsetof(FMingiameScoreboardRow, TeamColorIndex) == 0x000018, "Member 'FMingiameScoreboardRow::TeamColorIndex' has a wrong offset!");
static_assert(offsetof(FMingiameScoreboardRow, Values) == 0x000020, "Member 'FMingiameScoreboardRow::Values' has a wrong offset!");
static_assert(offsetof(FMingiameScoreboardRow, WinCount) == 0x000030, "Member 'FMingiameScoreboardRow::WinCount' has a wrong offset!");
static_assert(offsetof(FMingiameScoreboardRow, bHighlight) == 0x000034, "Member 'FMingiameScoreboardRow::bHighlight' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameScoreboardPlayerRow
// 0x0008 (0x0040 - 0x0038)
struct FMinigameScoreboardPlayerRow final : public FMingiameScoreboardRow
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinigameScoreboardPlayerRow) == 0x000008, "Wrong alignment on FMinigameScoreboardPlayerRow");
static_assert(sizeof(FMinigameScoreboardPlayerRow) == 0x000040, "Wrong size on FMinigameScoreboardPlayerRow");
static_assert(offsetof(FMinigameScoreboardPlayerRow, PlayerState) == 0x000038, "Member 'FMinigameScoreboardPlayerRow::PlayerState' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameScoreboardBucketRow
// 0x0018 (0x0050 - 0x0038)
struct FMinigameScoreboardBucketRow final : public FMingiameScoreboardRow
{
public:
	int32                                         Standing;                                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BucketIndex;                                       // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMinigameScoreboardPlayerRow>   PlayerRows;                                        // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinigameScoreboardBucketRow) == 0x000008, "Wrong alignment on FMinigameScoreboardBucketRow");
static_assert(sizeof(FMinigameScoreboardBucketRow) == 0x000050, "Wrong size on FMinigameScoreboardBucketRow");
static_assert(offsetof(FMinigameScoreboardBucketRow, Standing) == 0x000038, "Member 'FMinigameScoreboardBucketRow::Standing' has a wrong offset!");
static_assert(offsetof(FMinigameScoreboardBucketRow, BucketIndex) == 0x00003C, "Member 'FMinigameScoreboardBucketRow::BucketIndex' has a wrong offset!");
static_assert(offsetof(FMinigameScoreboardBucketRow, PlayerRows) == 0x000040, "Member 'FMinigameScoreboardBucketRow::PlayerRows' has a wrong offset!");

// ScriptStruct FortniteGame.FortTargetFilter
// 0x0038 (0x0038 - 0x0000)
struct FFortTargetFilter final
{
public:
	EFortTargetSelectionFilter                    ActorTypeFilter;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ActorClassFilter;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bExcludeInstigator : 1;                            // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseTrapsOwningPawnAsInstigator : 1;               // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeRequester : 1;                             // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeAllAttachedToInstigator : 1;               // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeAthenaVehicleOfInstigator : 1;             // 0x0010(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeAllAttachedToRequester : 1;                // 0x0010(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludePawnFriends : 1;                           // 0x0010(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeFriendlyAI : 1;                            // 0x0010(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeAllAI : 1;                                 // 0x0011(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludePawnEnemies : 1;                           // 0x0011(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeNonPawnFriends : 1;                        // 0x0011(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeNonPawnEnemies : 1;                        // 0x0011(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConsiderFriendlyFireWhenExcludingFriends : 1;     // 0x0011(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeDBNOPawns : 1;                             // 0x0011(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeWaterVolumes : 1;                          // 0x0011(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeAthenaVehicleUnoccupied : 1;               // 0x0011(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeAthenaVehicleOccupied : 1;                 // 0x0012(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeAthenaVehicleFromObstructionChecks : 1;    // 0x0012(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeWithoutNavigationCorridor : 1;             // 0x0012(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeNonPlayerBuiltPieces : 1;                  // 0x0012(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludePlayerBuiltPieces : 1;                     // 0x0012(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeNonBGABuildings : 1;                       // 0x0012(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeNonBlockingHits : 1;                       // 0x0012(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExcludeProjectiles : 1;                           // 0x0012(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTraceComplexCollision : 1;                        // 0x0013(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ExclusionGameplayTags;                             // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTargetFilter) == 0x000008, "Wrong alignment on FFortTargetFilter");
static_assert(sizeof(FFortTargetFilter) == 0x000038, "Wrong size on FFortTargetFilter");
static_assert(offsetof(FFortTargetFilter, ActorTypeFilter) == 0x000000, "Member 'FFortTargetFilter::ActorTypeFilter' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, ActorClassFilter) == 0x000008, "Member 'FFortTargetFilter::ActorClassFilter' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, ExclusionGameplayTags) == 0x000018, "Member 'FFortTargetFilter::ExclusionGameplayTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityTargetSelection
// 0x00F8 (0x00F8 - 0x0000)
struct FFortAbilityTargetSelection final
{
public:
	EFortTargetSelectionShape                     Shape;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomShapeComponentName;                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTargetSelectionTestType                  TestType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAbilityTargetingSource                   PrimarySource;                                     // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAbilityTargetingSource                   SecondarySource;                                   // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Range;                                             // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                HalfExtents;                                       // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ConeYawAngle;                                      // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ConePitchAngle;                                    // 0x0070(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ConeMinRadius;                                     // 0x0090(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFortTargetFilter                      TargetFilter;                                      // 0x00B0(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bExcludeObstructedByWorld;                         // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAttachedActorsObstructTarget;               // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateHitResultWhenNoTargetsFound;                // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseProjectileRotationForDamageZones;              // 0x00EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAbilityTargetSelectionUsage              TargetSelectionUsage;                              // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxTargets;                                        // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAbilityTargetSelection) == 0x000008, "Wrong alignment on FFortAbilityTargetSelection");
static_assert(sizeof(FFortAbilityTargetSelection) == 0x0000F8, "Wrong size on FFortAbilityTargetSelection");
static_assert(offsetof(FFortAbilityTargetSelection, Shape) == 0x000000, "Member 'FFortAbilityTargetSelection::Shape' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, CustomShapeComponentName) == 0x000008, "Member 'FFortAbilityTargetSelection::CustomShapeComponentName' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, TestType) == 0x000018, "Member 'FFortAbilityTargetSelection::TestType' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, PrimarySource) == 0x000019, "Member 'FFortAbilityTargetSelection::PrimarySource' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, SecondarySource) == 0x00001A, "Member 'FFortAbilityTargetSelection::SecondarySource' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, Range) == 0x000020, "Member 'FFortAbilityTargetSelection::Range' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, HalfExtents) == 0x000040, "Member 'FFortAbilityTargetSelection::HalfExtents' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, ConeYawAngle) == 0x000050, "Member 'FFortAbilityTargetSelection::ConeYawAngle' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, ConePitchAngle) == 0x000070, "Member 'FFortAbilityTargetSelection::ConePitchAngle' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, ConeMinRadius) == 0x000090, "Member 'FFortAbilityTargetSelection::ConeMinRadius' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, TargetFilter) == 0x0000B0, "Member 'FFortAbilityTargetSelection::TargetFilter' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, bExcludeObstructedByWorld) == 0x0000E8, "Member 'FFortAbilityTargetSelection::bExcludeObstructedByWorld' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, bShouldAttachedActorsObstructTarget) == 0x0000E9, "Member 'FFortAbilityTargetSelection::bShouldAttachedActorsObstructTarget' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, bCreateHitResultWhenNoTargetsFound) == 0x0000EA, "Member 'FFortAbilityTargetSelection::bCreateHitResultWhenNoTargetsFound' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, bUseProjectileRotationForDamageZones) == 0x0000EB, "Member 'FFortAbilityTargetSelection::bUseProjectileRotationForDamageZones' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, TargetSelectionUsage) == 0x0000EC, "Member 'FFortAbilityTargetSelection::TargetSelectionUsage' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, MaxTargets) == 0x0000F0, "Member 'FFortAbilityTargetSelection::MaxTargets' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistOptionValue
// 0x0028 (0x0028 - 0x0000)
struct FPlaylistOptionValue
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 OptionValueName;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistOptionValue) == 0x000008, "Wrong alignment on FPlaylistOptionValue");
static_assert(sizeof(FPlaylistOptionValue) == 0x000028, "Wrong size on FPlaylistOptionValue");
static_assert(offsetof(FPlaylistOptionValue, DisplayName) == 0x000000, "Member 'FPlaylistOptionValue::DisplayName' has a wrong offset!");
static_assert(offsetof(FPlaylistOptionValue, OptionValueName) == 0x000018, "Member 'FPlaylistOptionValue::OptionValueName' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistOptionColorValue
// 0x0010 (0x0038 - 0x0028)
struct FPlaylistOptionColorValue final : public FPlaylistOptionValue
{
public:
	struct FLinearColor                           Value;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistOptionColorValue) == 0x000008, "Wrong alignment on FPlaylistOptionColorValue");
static_assert(sizeof(FPlaylistOptionColorValue) == 0x000038, "Wrong size on FPlaylistOptionColorValue");
static_assert(offsetof(FPlaylistOptionColorValue, Value) == 0x000028, "Member 'FPlaylistOptionColorValue::Value' has a wrong offset!");

// ScriptStruct FortniteGame.CosmeticSetDataRow
// 0x0038 (0x0040 - 0x0008)
struct FCosmeticSetDataRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmeticSetDataRow) == 0x000008, "Wrong alignment on FCosmeticSetDataRow");
static_assert(sizeof(FCosmeticSetDataRow) == 0x000040, "Wrong size on FCosmeticSetDataRow");
static_assert(offsetof(FCosmeticSetDataRow, Tag) == 0x000008, "Member 'FCosmeticSetDataRow::Tag' has a wrong offset!");
static_assert(offsetof(FCosmeticSetDataRow, DisplayName) == 0x000010, "Member 'FCosmeticSetDataRow::DisplayName' has a wrong offset!");
static_assert(offsetof(FCosmeticSetDataRow, Description) == 0x000028, "Member 'FCosmeticSetDataRow::Description' has a wrong offset!");

// ScriptStruct FortniteGame.FortGlobalMission
// 0x0178 (0x0178 - 0x0000)
struct FFortGlobalMission
{
public:
	TSoftObjectPtr<class UFortMissionInfo>        MissionInfo;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EFortTheaterType>                      AllowedTheaterTypes;                               // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TheaterTagQuery;                                   // 0x0038(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      RegionTagQuery;                                    // 0x0080(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	TArray<EFortZoneType>                         AllowedZoneTypes;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      ZoneTagQuery;                                      // 0x00D8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      PrimaryMissionTagQuery;                            // 0x0120(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	float                                         MaxDifficultyLevel;                                // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDifficultyLevel;                                // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrototype;                                      // 0x0170(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInTestMaps;                                  // 0x0171(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0172(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_173[0x5];                                      // 0x0173(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGlobalMission) == 0x000008, "Wrong alignment on FFortGlobalMission");
static_assert(sizeof(FFortGlobalMission) == 0x000178, "Wrong size on FFortGlobalMission");
static_assert(offsetof(FFortGlobalMission, MissionInfo) == 0x000000, "Member 'FFortGlobalMission::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, AllowedTheaterTypes) == 0x000028, "Member 'FFortGlobalMission::AllowedTheaterTypes' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, TheaterTagQuery) == 0x000038, "Member 'FFortGlobalMission::TheaterTagQuery' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, RegionTagQuery) == 0x000080, "Member 'FFortGlobalMission::RegionTagQuery' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, AllowedZoneTypes) == 0x0000C8, "Member 'FFortGlobalMission::AllowedZoneTypes' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, ZoneTagQuery) == 0x0000D8, "Member 'FFortGlobalMission::ZoneTagQuery' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, PrimaryMissionTagQuery) == 0x000120, "Member 'FFortGlobalMission::PrimaryMissionTagQuery' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, MaxDifficultyLevel) == 0x000168, "Member 'FFortGlobalMission::MaxDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, MinDifficultyLevel) == 0x00016C, "Member 'FFortGlobalMission::MinDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, bIsPrototype) == 0x000170, "Member 'FFortGlobalMission::bIsPrototype' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, bAllowInTestMaps) == 0x000171, "Member 'FFortGlobalMission::bAllowInTestMaps' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, bEnabled) == 0x000172, "Member 'FFortGlobalMission::bEnabled' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestDrivenMission
// 0x0008 (0x0180 - 0x0178)
struct FFortQuestDrivenMission final : public FFortGlobalMission
{
public:
	class UFortQuestItemDefinition*               RequiredQuest;                                     // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestDrivenMission) == 0x000008, "Wrong alignment on FFortQuestDrivenMission");
static_assert(sizeof(FFortQuestDrivenMission) == 0x000180, "Wrong size on FFortQuestDrivenMission");
static_assert(offsetof(FFortQuestDrivenMission, RequiredQuest) == 0x000178, "Member 'FFortQuestDrivenMission::RequiredQuest' has a wrong offset!");

// ScriptStruct FortniteGame.QuestDrivenMissionSubList
// 0x0020 (0x0020 - 0x0000)
struct FQuestDrivenMissionSubList final
{
public:
	class FName                                   MissionSubListName;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortQuestDrivenMission>        QuestDrivenMissionList;                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestDrivenMissionSubList) == 0x000008, "Wrong alignment on FQuestDrivenMissionSubList");
static_assert(sizeof(FQuestDrivenMissionSubList) == 0x000020, "Wrong size on FQuestDrivenMissionSubList");
static_assert(offsetof(FQuestDrivenMissionSubList, MissionSubListName) == 0x000000, "Member 'FQuestDrivenMissionSubList::MissionSubListName' has a wrong offset!");
static_assert(offsetof(FQuestDrivenMissionSubList, bEnabled) == 0x000008, "Member 'FQuestDrivenMissionSubList::bEnabled' has a wrong offset!");
static_assert(offsetof(FQuestDrivenMissionSubList, QuestDrivenMissionList) == 0x000010, "Member 'FQuestDrivenMissionSubList::QuestDrivenMissionList' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPlacementActorItem
// 0x0080 (0x0080 - 0x0000)
struct FFortMissionPlacementActorItem final
{
public:
	struct FGameplayTagContainer                  ItemIdentifyingTags;                               // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToAddToChosenPlacementActor;                   // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UEnvQuery*                              PlacementQuery;                                    // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   ActorToPlace;                                      // 0x0048(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumLocationsToFind;                                // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSpawnActorAutomatically;                          // 0x0074(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldReserveLocations;                           // 0x0075(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_76[0x1];                                       // 0x0076(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSnapToGrid;                                       // 0x0077(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAdjustPlacementForFloors;                         // 0x0078(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDontCreateSpawnRiftsNearby;                       // 0x0079(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionPlacementActorItem) == 0x000008, "Wrong alignment on FFortMissionPlacementActorItem");
static_assert(sizeof(FFortMissionPlacementActorItem) == 0x000080, "Wrong size on FFortMissionPlacementActorItem");
static_assert(offsetof(FFortMissionPlacementActorItem, ItemIdentifyingTags) == 0x000000, "Member 'FFortMissionPlacementActorItem::ItemIdentifyingTags' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, TagsToAddToChosenPlacementActor) == 0x000020, "Member 'FFortMissionPlacementActorItem::TagsToAddToChosenPlacementActor' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, PlacementQuery) == 0x000040, "Member 'FFortMissionPlacementActorItem::PlacementQuery' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, ActorToPlace) == 0x000048, "Member 'FFortMissionPlacementActorItem::ActorToPlace' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, NumLocationsToFind) == 0x000070, "Member 'FFortMissionPlacementActorItem::NumLocationsToFind' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, bSpawnActorAutomatically) == 0x000074, "Member 'FFortMissionPlacementActorItem::bSpawnActorAutomatically' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, bShouldReserveLocations) == 0x000075, "Member 'FFortMissionPlacementActorItem::bShouldReserveLocations' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, bSnapToGrid) == 0x000077, "Member 'FFortMissionPlacementActorItem::bSnapToGrid' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, bAdjustPlacementForFloors) == 0x000078, "Member 'FFortMissionPlacementActorItem::bAdjustPlacementForFloors' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, bDontCreateSpawnRiftsNearby) == 0x000079, "Member 'FFortMissionPlacementActorItem::bDontCreateSpawnRiftsNearby' has a wrong offset!");

// ScriptStruct FortniteGame.LastBuildableState
// 0x0010 (0x0010 - 0x0000)
struct FLastBuildableState final
{
public:
	class UBuildingEditModeMetadata*              LastBuildableMetaData;                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastBuildableMirrored;                             // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastBuildableRotationIterations;                   // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLastBuildableState) == 0x000008, "Wrong alignment on FLastBuildableState");
static_assert(sizeof(FLastBuildableState) == 0x000010, "Wrong size on FLastBuildableState");
static_assert(offsetof(FLastBuildableState, LastBuildableMetaData) == 0x000000, "Member 'FLastBuildableState::LastBuildableMetaData' has a wrong offset!");
static_assert(offsetof(FLastBuildableState, LastBuildableMirrored) == 0x000008, "Member 'FLastBuildableState::LastBuildableMirrored' has a wrong offset!");
static_assert(offsetof(FLastBuildableState, LastBuildableRotationIterations) == 0x00000C, "Member 'FLastBuildableState::LastBuildableRotationIterations' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemInstanceQuantityPair
// 0x0010 (0x0010 - 0x0000)
struct FFortItemInstanceQuantityPair final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryType                            InventoryType;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemInstanceQuantityPair) == 0x000008, "Wrong alignment on FFortItemInstanceQuantityPair");
static_assert(sizeof(FFortItemInstanceQuantityPair) == 0x000010, "Wrong size on FFortItemInstanceQuantityPair");
static_assert(offsetof(FFortItemInstanceQuantityPair, Item) == 0x000000, "Member 'FFortItemInstanceQuantityPair::Item' has a wrong offset!");
static_assert(offsetof(FFortItemInstanceQuantityPair, InventoryType) == 0x000008, "Member 'FFortItemInstanceQuantityPair::InventoryType' has a wrong offset!");
static_assert(offsetof(FFortItemInstanceQuantityPair, Quantity) == 0x00000C, "Member 'FFortItemInstanceQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.CameraAltitudeAdjustments
// 0x0010 (0x0010 - 0x0000)
struct FCameraAltitudeAdjustments final
{
public:
	float                                         Altitude;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFogZOffset;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraAltitudeAdjustments) == 0x000004, "Wrong alignment on FCameraAltitudeAdjustments");
static_assert(sizeof(FCameraAltitudeAdjustments) == 0x000010, "Wrong size on FCameraAltitudeAdjustments");
static_assert(offsetof(FCameraAltitudeAdjustments, Altitude) == 0x000000, "Member 'FCameraAltitudeAdjustments::Altitude' has a wrong offset!");
static_assert(offsetof(FCameraAltitudeAdjustments, FogHeightFalloff) == 0x000004, "Member 'FCameraAltitudeAdjustments::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FCameraAltitudeAdjustments, HeightFogZOffset) == 0x000008, "Member 'FCameraAltitudeAdjustments::HeightFogZOffset' has a wrong offset!");
static_assert(offsetof(FCameraAltitudeAdjustments, FogDensity) == 0x00000C, "Member 'FCameraAltitudeAdjustments::FogDensity' has a wrong offset!");

// ScriptStruct FortniteGame.GooseDisplayData
// 0x0020 (0x0020 - 0x0000)
struct FGooseDisplayData final
{
public:
	class FName                                   LootTableName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MaterialsToSwap;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGooseDisplayData) == 0x000008, "Wrong alignment on FGooseDisplayData");
static_assert(sizeof(FGooseDisplayData) == 0x000020, "Wrong size on FGooseDisplayData");
static_assert(offsetof(FGooseDisplayData, LootTableName) == 0x000000, "Member 'FGooseDisplayData::LootTableName' has a wrong offset!");
static_assert(offsetof(FGooseDisplayData, StaticMesh) == 0x000008, "Member 'FGooseDisplayData::StaticMesh' has a wrong offset!");
static_assert(offsetof(FGooseDisplayData, MaterialsToSwap) == 0x000010, "Member 'FGooseDisplayData::MaterialsToSwap' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaMatchXpMultiplierGroup
// 0x0008 (0x0008 - 0x0000)
struct FAthenaMatchXpMultiplierGroup final
{
public:
	EAthenaMatchXpMultiplierSource                Source;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaMatchXpMultiplierGroup) == 0x000004, "Wrong alignment on FAthenaMatchXpMultiplierGroup");
static_assert(sizeof(FAthenaMatchXpMultiplierGroup) == 0x000008, "Wrong size on FAthenaMatchXpMultiplierGroup");
static_assert(offsetof(FAthenaMatchXpMultiplierGroup, Source) == 0x000000, "Member 'FAthenaMatchXpMultiplierGroup::Source' has a wrong offset!");
static_assert(offsetof(FAthenaMatchXpMultiplierGroup, Amount) == 0x000004, "Member 'FAthenaMatchXpMultiplierGroup::Amount' has a wrong offset!");

// ScriptStruct FortniteGame.FortHighlightColors
// 0x0030 (0x0030 - 0x0000)
struct FFortHighlightColors final
{
public:
	struct FLinearColor                           OutlineColor;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneModulationColor1;                             // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneModulationColor2;                             // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHighlightColors) == 0x000004, "Wrong alignment on FFortHighlightColors");
static_assert(sizeof(FFortHighlightColors) == 0x000030, "Wrong size on FFortHighlightColors");
static_assert(offsetof(FFortHighlightColors, OutlineColor) == 0x000000, "Member 'FFortHighlightColors::OutlineColor' has a wrong offset!");
static_assert(offsetof(FFortHighlightColors, SceneModulationColor1) == 0x000010, "Member 'FFortHighlightColors::SceneModulationColor1' has a wrong offset!");
static_assert(offsetof(FFortHighlightColors, SceneModulationColor2) == 0x000020, "Member 'FFortHighlightColors::SceneModulationColor2' has a wrong offset!");

// ScriptStruct FortniteGame.McpPrivacySettings
// 0x0002 (0x0002 - 0x0000)
struct FMcpPrivacySettings final
{
public:
	bool                                          OptOutOfPublicLeaderboards;                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OptOutOfFriendsLeaderboards;                       // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMcpPrivacySettings) == 0x000001, "Wrong alignment on FMcpPrivacySettings");
static_assert(sizeof(FMcpPrivacySettings) == 0x000002, "Wrong size on FMcpPrivacySettings");
static_assert(offsetof(FMcpPrivacySettings, OptOutOfPublicLeaderboards) == 0x000000, "Member 'FMcpPrivacySettings::OptOutOfPublicLeaderboards' has a wrong offset!");
static_assert(offsetof(FMcpPrivacySettings, OptOutOfFriendsLeaderboards) == 0x000001, "Member 'FMcpPrivacySettings::OptOutOfFriendsLeaderboards' has a wrong offset!");

// ScriptStruct FortniteGame.FortDamageNumberInfo
// 0x0088 (0x0088 - 0x0000)
struct FFortDamageNumberInfo final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCriticalDamage;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Damage;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDamageNumberType                         DamageNumberType;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VisualDamageScale;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortElementalDamageType                      ElementalDamageType;                               // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatCategory                                 ScoreType;                                         // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachScoreNumberToPlayer;                        // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       MeshMIDs;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DamageNumberArray;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamagedActorTags;                                  // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  DamagedActor;                                      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APawn>                   DamageCauser;                                      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDamageNumberInfo) == 0x000008, "Wrong alignment on FFortDamageNumberInfo");
static_assert(sizeof(FFortDamageNumberInfo) == 0x000088, "Wrong size on FFortDamageNumberInfo");
static_assert(offsetof(FFortDamageNumberInfo, WorldLocation) == 0x000000, "Member 'FFortDamageNumberInfo::WorldLocation' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, HitNormal) == 0x00000C, "Member 'FFortDamageNumberInfo::HitNormal' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, bIsCriticalDamage) == 0x000018, "Member 'FFortDamageNumberInfo::bIsCriticalDamage' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, Damage) == 0x00001C, "Member 'FFortDamageNumberInfo::Damage' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamageNumberType) == 0x000020, "Member 'FFortDamageNumberInfo::DamageNumberType' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, VisualDamageScale) == 0x000024, "Member 'FFortDamageNumberInfo::VisualDamageScale' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, ElementalDamageType) == 0x000028, "Member 'FFortDamageNumberInfo::ElementalDamageType' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, ScoreType) == 0x000029, "Member 'FFortDamageNumberInfo::ScoreType' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, bAttachScoreNumberToPlayer) == 0x00002A, "Member 'FFortDamageNumberInfo::bAttachScoreNumberToPlayer' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, StaticMeshComponent) == 0x000030, "Member 'FFortDamageNumberInfo::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, MeshMIDs) == 0x000038, "Member 'FFortDamageNumberInfo::MeshMIDs' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamageNumberArray) == 0x000048, "Member 'FFortDamageNumberInfo::DamageNumberArray' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamagedActorTags) == 0x000058, "Member 'FFortDamageNumberInfo::DamagedActorTags' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamagedActor) == 0x000078, "Member 'FFortDamageNumberInfo::DamagedActor' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamageCauser) == 0x000080, "Member 'FFortDamageNumberInfo::DamageCauser' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarSlotData
// 0x0040 (0x0040 - 0x0000)
struct FQuickBarSlotData final
{
public:
	TArray<EFortItemType>                         AcceptedItemTypes;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bStaticSlot;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortWorldItemDefinition> DefaultItem;                                       // 0x0018(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuickBarSlotData) == 0x000008, "Wrong alignment on FQuickBarSlotData");
static_assert(sizeof(FQuickBarSlotData) == 0x000040, "Wrong size on FQuickBarSlotData");
static_assert(offsetof(FQuickBarSlotData, AcceptedItemTypes) == 0x000000, "Member 'FQuickBarSlotData::AcceptedItemTypes' has a wrong offset!");
static_assert(offsetof(FQuickBarSlotData, bStaticSlot) == 0x000010, "Member 'FQuickBarSlotData::bStaticSlot' has a wrong offset!");
static_assert(offsetof(FQuickBarSlotData, DefaultItem) == 0x000018, "Member 'FQuickBarSlotData::DefaultItem' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarData
// 0x0010 (0x0010 - 0x0000)
struct FQuickBarData final
{
public:
	TArray<struct FQuickBarSlotData>              QuickbarSlots;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuickBarData) == 0x000008, "Wrong alignment on FQuickBarData");
static_assert(sizeof(FQuickBarData) == 0x000010, "Wrong size on FQuickBarData");
static_assert(offsetof(FQuickBarData, QuickbarSlots) == 0x000000, "Member 'FQuickBarData::QuickbarSlots' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingClassData
// 0x0010 (0x0010 - 0x0000)
struct FBuildingClassData final
{
public:
	TSubclassOf<class ABuildingActor>             BuildingClass;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousBuildingLevel;                             // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UpgradeLevel;                                      // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingClassData) == 0x000008, "Wrong alignment on FBuildingClassData");
static_assert(sizeof(FBuildingClassData) == 0x000010, "Wrong size on FBuildingClassData");
static_assert(offsetof(FBuildingClassData, BuildingClass) == 0x000000, "Member 'FBuildingClassData::BuildingClass' has a wrong offset!");
static_assert(offsetof(FBuildingClassData, PreviousBuildingLevel) == 0x000008, "Member 'FBuildingClassData::PreviousBuildingLevel' has a wrong offset!");
static_assert(offsetof(FBuildingClassData, UpgradeLevel) == 0x00000C, "Member 'FBuildingClassData::UpgradeLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIGoalInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortAIGoalInfo
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActorAlwaysPerceived;                             // 0x0014(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIGoalInfo) == 0x000004, "Wrong alignment on FFortAIGoalInfo");
static_assert(sizeof(FFortAIGoalInfo) == 0x000018, "Wrong size on FFortAIGoalInfo");
static_assert(offsetof(FFortAIGoalInfo, Actor) == 0x000000, "Member 'FFortAIGoalInfo::Actor' has a wrong offset!");
static_assert(offsetof(FFortAIGoalInfo, Location) == 0x000008, "Member 'FFortAIGoalInfo::Location' has a wrong offset!");
static_assert(offsetof(FFortAIGoalInfo, bActorAlwaysPerceived) == 0x000014, "Member 'FFortAIGoalInfo::bActorAlwaysPerceived' has a wrong offset!");

// ScriptStruct FortniteGame.RuntimeOptionLocalizableStringEntry
// 0x0020 (0x0020 - 0x0000)
struct FRuntimeOptionLocalizableStringEntry final
{
public:
	class FString                                 Culture;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeOptionLocalizableStringEntry) == 0x000008, "Wrong alignment on FRuntimeOptionLocalizableStringEntry");
static_assert(sizeof(FRuntimeOptionLocalizableStringEntry) == 0x000020, "Wrong size on FRuntimeOptionLocalizableStringEntry");
static_assert(offsetof(FRuntimeOptionLocalizableStringEntry, Culture) == 0x000000, "Member 'FRuntimeOptionLocalizableStringEntry::Culture' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionLocalizableStringEntry, Text) == 0x000010, "Member 'FRuntimeOptionLocalizableStringEntry::Text' has a wrong offset!");

// ScriptStruct FortniteGame.RuntimeOptionLocalizableString
// 0x0010 (0x0010 - 0x0000)
struct FRuntimeOptionLocalizableString final
{
public:
	TArray<struct FRuntimeOptionLocalizableStringEntry> Entries;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeOptionLocalizableString) == 0x000008, "Wrong alignment on FRuntimeOptionLocalizableString");
static_assert(sizeof(FRuntimeOptionLocalizableString) == 0x000010, "Wrong size on FRuntimeOptionLocalizableString");
static_assert(offsetof(FRuntimeOptionLocalizableString, Entries) == 0x000000, "Member 'FRuntimeOptionLocalizableString::Entries' has a wrong offset!");

// ScriptStruct FortniteGame.McpBanInfo
// 0x0058 (0x0058 - 0x0000)
struct FMcpBanInfo final
{
public:
	bool                                          bRequiresUserAck;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPlayerBanReasons>                     BanReasons;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bBanHasStarted;                                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              BanStartTimeUtc;                                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BanDurationDays;                                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExploitProgramName;                                // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdditionalInfo;                                    // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCompetitiveBanReasons                  CompetitiveBanReason;                              // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMcpBanInfo) == 0x000008, "Wrong alignment on FMcpBanInfo");
static_assert(sizeof(FMcpBanInfo) == 0x000058, "Wrong size on FMcpBanInfo");
static_assert(offsetof(FMcpBanInfo, bRequiresUserAck) == 0x000000, "Member 'FMcpBanInfo::bRequiresUserAck' has a wrong offset!");
static_assert(offsetof(FMcpBanInfo, BanReasons) == 0x000008, "Member 'FMcpBanInfo::BanReasons' has a wrong offset!");
static_assert(offsetof(FMcpBanInfo, bBanHasStarted) == 0x000018, "Member 'FMcpBanInfo::bBanHasStarted' has a wrong offset!");
static_assert(offsetof(FMcpBanInfo, BanStartTimeUtc) == 0x000020, "Member 'FMcpBanInfo::BanStartTimeUtc' has a wrong offset!");
static_assert(offsetof(FMcpBanInfo, BanDurationDays) == 0x000028, "Member 'FMcpBanInfo::BanDurationDays' has a wrong offset!");
static_assert(offsetof(FMcpBanInfo, ExploitProgramName) == 0x000030, "Member 'FMcpBanInfo::ExploitProgramName' has a wrong offset!");
static_assert(offsetof(FMcpBanInfo, AdditionalInfo) == 0x000040, "Member 'FMcpBanInfo::AdditionalInfo' has a wrong offset!");
static_assert(offsetof(FMcpBanInfo, CompetitiveBanReason) == 0x000050, "Member 'FMcpBanInfo::CompetitiveBanReason' has a wrong offset!");

// ScriptStruct FortniteGame.FortCampaignLoadout
// 0x0008 (0x0008 - 0x0000)
struct FFortCampaignLoadout final
{
public:
	class UFortPersonalVehicleItem*               PersonalVehicle;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCampaignLoadout) == 0x000008, "Wrong alignment on FFortCampaignLoadout");
static_assert(sizeof(FFortCampaignLoadout) == 0x000008, "Wrong size on FFortCampaignLoadout");
static_assert(offsetof(FFortCampaignLoadout, PersonalVehicle) == 0x000000, "Member 'FFortCampaignLoadout::PersonalVehicle' has a wrong offset!");

// ScriptStruct FortniteGame.CrucibleLeaderboardEntry
// 0x0020 (0x0020 - 0x0000)
struct FCrucibleLeaderboardEntry final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrucibleLeaderboardEntry) == 0x000008, "Wrong alignment on FCrucibleLeaderboardEntry");
static_assert(sizeof(FCrucibleLeaderboardEntry) == 0x000020, "Wrong size on FCrucibleLeaderboardEntry");
static_assert(offsetof(FCrucibleLeaderboardEntry, DisplayName) == 0x000000, "Member 'FCrucibleLeaderboardEntry::DisplayName' has a wrong offset!");
static_assert(offsetof(FCrucibleLeaderboardEntry, Rank) == 0x000010, "Member 'FCrucibleLeaderboardEntry::Rank' has a wrong offset!");
static_assert(offsetof(FCrucibleLeaderboardEntry, Value) == 0x000014, "Member 'FCrucibleLeaderboardEntry::Value' has a wrong offset!");
static_assert(offsetof(FCrucibleLeaderboardEntry, bIsLocalPlayer) == 0x000018, "Member 'FCrucibleLeaderboardEntry::bIsLocalPlayer' has a wrong offset!");

// ScriptStruct FortniteGame.CrucibleLeaderboardQuery
// 0x0068 (0x0068 - 0x0000)
struct FCrucibleLeaderboardQuery final
{
public:
	int32                                         LeaderboardId;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LeaderboardName;                                   // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       RequestingId;                                      // 0x0018(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bNeedsUserInfoQueried;                             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedsResultsCompiled;                             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCrucibleLeaderboardEntry>      CurrentCompiledResults;                            // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrucibleLeaderboardQuery) == 0x000008, "Wrong alignment on FCrucibleLeaderboardQuery");
static_assert(sizeof(FCrucibleLeaderboardQuery) == 0x000068, "Wrong size on FCrucibleLeaderboardQuery");
static_assert(offsetof(FCrucibleLeaderboardQuery, LeaderboardId) == 0x000000, "Member 'FCrucibleLeaderboardQuery::LeaderboardId' has a wrong offset!");
static_assert(offsetof(FCrucibleLeaderboardQuery, LeaderboardName) == 0x000008, "Member 'FCrucibleLeaderboardQuery::LeaderboardName' has a wrong offset!");
static_assert(offsetof(FCrucibleLeaderboardQuery, RequestingId) == 0x000018, "Member 'FCrucibleLeaderboardQuery::RequestingId' has a wrong offset!");
static_assert(offsetof(FCrucibleLeaderboardQuery, bNeedsUserInfoQueried) == 0x000050, "Member 'FCrucibleLeaderboardQuery::bNeedsUserInfoQueried' has a wrong offset!");
static_assert(offsetof(FCrucibleLeaderboardQuery, bNeedsResultsCompiled) == 0x000051, "Member 'FCrucibleLeaderboardQuery::bNeedsResultsCompiled' has a wrong offset!");
static_assert(offsetof(FCrucibleLeaderboardQuery, CurrentCompiledResults) == 0x000058, "Member 'FCrucibleLeaderboardQuery::CurrentCompiledResults' has a wrong offset!");

// ScriptStruct FortniteGame.FriendCode
// 0x0020 (0x0020 - 0x0000)
struct FFriendCode final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CodeType;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendCode) == 0x000008, "Wrong alignment on FFriendCode");
static_assert(sizeof(FFriendCode) == 0x000020, "Wrong size on FFriendCode");
static_assert(offsetof(FFriendCode, Code) == 0x000000, "Member 'FFriendCode::Code' has a wrong offset!");
static_assert(offsetof(FFriendCode, CodeType) == 0x000010, "Member 'FFriendCode::CodeType' has a wrong offset!");

// ScriptStruct FortniteGame.FortPresenceGameplayStats
// 0x0020 (0x0020 - 0x0000)
struct FFortPresenceGameplayStats final
{
public:
	class FString                                 State;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Playlist;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumKills;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFellToDeath;                                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPresenceGameplayStats) == 0x000008, "Wrong alignment on FFortPresenceGameplayStats");
static_assert(sizeof(FFortPresenceGameplayStats) == 0x000020, "Wrong size on FFortPresenceGameplayStats");
static_assert(offsetof(FFortPresenceGameplayStats, State) == 0x000000, "Member 'FFortPresenceGameplayStats::State' has a wrong offset!");
static_assert(offsetof(FFortPresenceGameplayStats, Playlist) == 0x000010, "Member 'FFortPresenceGameplayStats::Playlist' has a wrong offset!");
static_assert(offsetof(FFortPresenceGameplayStats, NumKills) == 0x000018, "Member 'FFortPresenceGameplayStats::NumKills' has a wrong offset!");
static_assert(offsetof(FFortPresenceGameplayStats, bFellToDeath) == 0x00001C, "Member 'FFortPresenceGameplayStats::bFellToDeath' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackHandle
// 0x0018 (0x0018 - 0x0000)
struct FFortFeedbackHandle final
{
public:
	class UFortFeedbackBank*                      FeedbackBank;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadOnly;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBankDefined;                                      // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackBroadcastFilter                  BroadcastFilterOverride;                           // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackHandle) == 0x000008, "Wrong alignment on FFortFeedbackHandle");
static_assert(sizeof(FFortFeedbackHandle) == 0x000018, "Wrong size on FFortFeedbackHandle");
static_assert(offsetof(FFortFeedbackHandle, FeedbackBank) == 0x000000, "Member 'FFortFeedbackHandle::FeedbackBank' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, EventName) == 0x000008, "Member 'FFortFeedbackHandle::EventName' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, bReadOnly) == 0x000010, "Member 'FFortFeedbackHandle::bReadOnly' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, bBankDefined) == 0x000011, "Member 'FFortFeedbackHandle::bBankDefined' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, BroadcastFilterOverride) == 0x000012, "Member 'FFortFeedbackHandle::BroadcastFilterOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackResponse
// 0x0020 (0x0020 - 0x0000)
struct FFortFeedbackResponse final
{
public:
	struct FFortFeedbackHandle                    Handle;                                            // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EFortFeedbackContext                          Context;                                           // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackResponse) == 0x000008, "Wrong alignment on FFortFeedbackResponse");
static_assert(sizeof(FFortFeedbackResponse) == 0x000020, "Wrong size on FFortFeedbackResponse");
static_assert(offsetof(FFortFeedbackResponse, Handle) == 0x000000, "Member 'FFortFeedbackResponse::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackResponse, Context) == 0x000018, "Member 'FFortFeedbackResponse::Context' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaQuickChatActiveEntry
// 0x0014 (0x0014 - 0x0000)
struct FAthenaQuickChatActiveEntry final
{
public:
	TWeakObjectPtr<class UAthenaQuickChatBank>    Bank;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 ContextObject;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         ContextValue;                                      // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Index;                                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaQuickChatActiveEntry) == 0x000004, "Wrong alignment on FAthenaQuickChatActiveEntry");
static_assert(sizeof(FAthenaQuickChatActiveEntry) == 0x000014, "Wrong size on FAthenaQuickChatActiveEntry");
static_assert(offsetof(FAthenaQuickChatActiveEntry, Bank) == 0x000000, "Member 'FAthenaQuickChatActiveEntry::Bank' has a wrong offset!");
static_assert(offsetof(FAthenaQuickChatActiveEntry, ContextObject) == 0x000008, "Member 'FAthenaQuickChatActiveEntry::ContextObject' has a wrong offset!");
static_assert(offsetof(FAthenaQuickChatActiveEntry, ContextValue) == 0x000010, "Member 'FAthenaQuickChatActiveEntry::ContextValue' has a wrong offset!");
static_assert(offsetof(FAthenaQuickChatActiveEntry, Index) == 0x000012, "Member 'FAthenaQuickChatActiveEntry::Index' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaEmoteCacheRecord
// 0x0010 (0x0010 - 0x0000)
struct FFortAthenaEmoteCacheRecord final
{
public:
	class UFortItemDefinition*                    ItemDef;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaEmoteCacheRecord) == 0x000008, "Wrong alignment on FFortAthenaEmoteCacheRecord");
static_assert(sizeof(FFortAthenaEmoteCacheRecord) == 0x000010, "Wrong size on FFortAthenaEmoteCacheRecord");
static_assert(offsetof(FFortAthenaEmoteCacheRecord, ItemDef) == 0x000000, "Member 'FFortAthenaEmoteCacheRecord::ItemDef' has a wrong offset!");

// ScriptStruct FortniteGame.TournamentPayoutData
// 0x0020 (0x0020 - 0x0000)
struct FTournamentPayoutData final
{
public:
	EPayoutRewardType                             RewardType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Value;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamSize;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTournamentPayoutData) == 0x000008, "Wrong alignment on FTournamentPayoutData");
static_assert(sizeof(FTournamentPayoutData) == 0x000020, "Wrong size on FTournamentPayoutData");
static_assert(offsetof(FTournamentPayoutData, RewardType) == 0x000000, "Member 'FTournamentPayoutData::RewardType' has a wrong offset!");
static_assert(offsetof(FTournamentPayoutData, Value) == 0x000008, "Member 'FTournamentPayoutData::Value' has a wrong offset!");
static_assert(offsetof(FTournamentPayoutData, Quantity) == 0x000018, "Member 'FTournamentPayoutData::Quantity' has a wrong offset!");
static_assert(offsetof(FTournamentPayoutData, TeamSize) == 0x00001C, "Member 'FTournamentPayoutData::TeamSize' has a wrong offset!");

// ScriptStruct FortniteGame.ItemsToGiveAtPhase
// 0x0028 (0x0028 - 0x0000)
struct FItemsToGiveAtPhase final
{
public:
	class UFortWorldItemDefinition*               ItemToDrop;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         NumberToGive;                                      // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemsToGiveAtPhase) == 0x000008, "Wrong alignment on FItemsToGiveAtPhase");
static_assert(sizeof(FItemsToGiveAtPhase) == 0x000028, "Wrong size on FItemsToGiveAtPhase");
static_assert(offsetof(FItemsToGiveAtPhase, ItemToDrop) == 0x000000, "Member 'FItemsToGiveAtPhase::ItemToDrop' has a wrong offset!");
static_assert(offsetof(FItemsToGiveAtPhase, NumberToGive) == 0x000008, "Member 'FItemsToGiveAtPhase::NumberToGive' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookUnslotItemNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortCollectionBookUnslotItemNotification final
{
public:
	class FString                                 UnslottedItemId;                                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookUnslotItemNotification) == 0x000008, "Wrong alignment on FFortCollectionBookUnslotItemNotification");
static_assert(sizeof(FFortCollectionBookUnslotItemNotification) == 0x000010, "Wrong size on FFortCollectionBookUnslotItemNotification");
static_assert(offsetof(FFortCollectionBookUnslotItemNotification, UnslottedItemId) == 0x000000, "Member 'FFortCollectionBookUnslotItemNotification::UnslottedItemId' has a wrong offset!");

// ScriptStruct FortniteGame.CosmeticVariantInfo
// 0x0010 (0x0010 - 0x0000)
struct FCosmeticVariantInfo
{
public:
	struct FGameplayTag                           VariantChannelTag;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActiveVariantTag;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmeticVariantInfo) == 0x000004, "Wrong alignment on FCosmeticVariantInfo");
static_assert(sizeof(FCosmeticVariantInfo) == 0x000010, "Wrong size on FCosmeticVariantInfo");
static_assert(offsetof(FCosmeticVariantInfo, VariantChannelTag) == 0x000000, "Member 'FCosmeticVariantInfo::VariantChannelTag' has a wrong offset!");
static_assert(offsetof(FCosmeticVariantInfo, ActiveVariantTag) == 0x000008, "Member 'FCosmeticVariantInfo::ActiveVariantTag' has a wrong offset!");

// ScriptStruct FortniteGame.McpVariantChannelInfo
// 0x0028 (0x0038 - 0x0010)
struct FMcpVariantChannelInfo final : public FCosmeticVariantInfo
{
public:
	struct FGameplayTagContainer                  OwnedVariantTags;                                  // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemVariantIsUsedFor;                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMcpVariantChannelInfo) == 0x000008, "Wrong alignment on FMcpVariantChannelInfo");
static_assert(sizeof(FMcpVariantChannelInfo) == 0x000038, "Wrong size on FMcpVariantChannelInfo");
static_assert(offsetof(FMcpVariantChannelInfo, OwnedVariantTags) == 0x000010, "Member 'FMcpVariantChannelInfo::OwnedVariantTags' has a wrong offset!");
static_assert(offsetof(FMcpVariantChannelInfo, ItemVariantIsUsedFor) == 0x000030, "Member 'FMcpVariantChannelInfo::ItemVariantIsUsedFor' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaLoadout
// 0x00F0 (0x00F0 - 0x0000)
struct FFortAthenaLoadout final
{
public:
	class FString                                 BannerIconId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerColorId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaSkyDiveContrailItemDefinition*   SkyDiveContrail;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaGliderItemDefinition*            Glider;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaPickaxeItemDefinition*           Pickaxe;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefaultCharacter;                               // 0x0038(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaCharacterItemDefinition*         Character;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMcpVariantChannelInfo>         CharacterVariantChannels;                          // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bForceUpdateVariants;                              // 0x0058(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaHatItemDefinition*               Hat;                                               // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaBackpackItemDefinition*          Backpack;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaLoadingScreenItemDefinition*     LoadingScreen;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaBattleBusItemDefinition*         BattleBus;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaVehicleCosmeticItemDefinition*   VehicleDecoration;                                 // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaCallingCardItemDefinition*       CallingCard;                                       // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaMapMarkerItemDefinition*         MapMarker;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAthenaDanceItemDefinition*>     Dances;                                            // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAthenaVictoryPoseItemDefinition*       VictoryPose;                                       // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaMusicPackItemDefinition*         MusicPack;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaItemWrapDefinition*              ItemWrapOverride;                                  // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAthenaItemWrapDefinition*>      ItemWraps;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAthenaCharmItemDefinition*             CharmOverride;                                     // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAthenaCharmItemDefinition*>     Charms;                                            // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAthenaPetItemDefinition*               PetSkin;                                           // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAthenaLoadout) == 0x000008, "Wrong alignment on FFortAthenaLoadout");
static_assert(sizeof(FFortAthenaLoadout) == 0x0000F0, "Wrong size on FFortAthenaLoadout");
static_assert(offsetof(FFortAthenaLoadout, BannerIconId) == 0x000000, "Member 'FFortAthenaLoadout::BannerIconId' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, BannerColorId) == 0x000010, "Member 'FFortAthenaLoadout::BannerColorId' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, SkyDiveContrail) == 0x000020, "Member 'FFortAthenaLoadout::SkyDiveContrail' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Glider) == 0x000028, "Member 'FFortAthenaLoadout::Glider' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Pickaxe) == 0x000030, "Member 'FFortAthenaLoadout::Pickaxe' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, bIsDefaultCharacter) == 0x000038, "Member 'FFortAthenaLoadout::bIsDefaultCharacter' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Character) == 0x000040, "Member 'FFortAthenaLoadout::Character' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, CharacterVariantChannels) == 0x000048, "Member 'FFortAthenaLoadout::CharacterVariantChannels' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, bForceUpdateVariants) == 0x000058, "Member 'FFortAthenaLoadout::bForceUpdateVariants' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Hat) == 0x000060, "Member 'FFortAthenaLoadout::Hat' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Backpack) == 0x000068, "Member 'FFortAthenaLoadout::Backpack' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, LoadingScreen) == 0x000070, "Member 'FFortAthenaLoadout::LoadingScreen' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, BattleBus) == 0x000078, "Member 'FFortAthenaLoadout::BattleBus' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, VehicleDecoration) == 0x000080, "Member 'FFortAthenaLoadout::VehicleDecoration' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, CallingCard) == 0x000088, "Member 'FFortAthenaLoadout::CallingCard' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, MapMarker) == 0x000090, "Member 'FFortAthenaLoadout::MapMarker' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Dances) == 0x000098, "Member 'FFortAthenaLoadout::Dances' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, VictoryPose) == 0x0000A8, "Member 'FFortAthenaLoadout::VictoryPose' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, MusicPack) == 0x0000B0, "Member 'FFortAthenaLoadout::MusicPack' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, ItemWrapOverride) == 0x0000B8, "Member 'FFortAthenaLoadout::ItemWrapOverride' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, ItemWraps) == 0x0000C0, "Member 'FFortAthenaLoadout::ItemWraps' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, CharmOverride) == 0x0000D0, "Member 'FFortAthenaLoadout::CharmOverride' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Charms) == 0x0000D8, "Member 'FFortAthenaLoadout::Charms' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, PetSkin) == 0x0000E8, "Member 'FFortAthenaLoadout::PetSkin' has a wrong offset!");

// ScriptStruct FortniteGame.AlterationSlotRarity
// 0x0050 (0x0058 - 0x0008)
struct FAlterationSlotRarity final : public FTableRowBase
{
public:
	TMap<EFortRarity, int32>                      RarityWeights;                                     // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlterationSlotRarity) == 0x000008, "Wrong alignment on FAlterationSlotRarity");
static_assert(sizeof(FAlterationSlotRarity) == 0x000058, "Wrong size on FAlterationSlotRarity");
static_assert(offsetof(FAlterationSlotRarity, RarityWeights) == 0x000008, "Member 'FAlterationSlotRarity::RarityWeights' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveGameplayModifierHandle
// 0x0004 (0x0004 - 0x0000)
struct FActiveGameplayModifierHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveGameplayModifierHandle) == 0x000004, "Wrong alignment on FActiveGameplayModifierHandle");
static_assert(sizeof(FActiveGameplayModifierHandle) == 0x000004, "Wrong size on FActiveGameplayModifierHandle");
static_assert(offsetof(FActiveGameplayModifierHandle, Handle) == 0x000000, "Member 'FActiveGameplayModifierHandle::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveGameplayModifier
// 0x00CC (0x00D8 - 0x000C)
struct FActiveGameplayModifier final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameplayModifierItemDefinition*    ModifierDef;                                       // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayModifierHandle          ModifierHandle;                                    // 0x0018(0x0004)(Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortGameplayMutator*>           Mutators;                                          // 0x0020(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	int32                                         Expiration;                                        // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xA4];                                      // 0x0034(0x00A4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveGameplayModifier) == 0x000008, "Wrong alignment on FActiveGameplayModifier");
static_assert(sizeof(FActiveGameplayModifier) == 0x0000D8, "Wrong size on FActiveGameplayModifier");
static_assert(offsetof(FActiveGameplayModifier, ModifierDef) == 0x000010, "Member 'FActiveGameplayModifier::ModifierDef' has a wrong offset!");
static_assert(offsetof(FActiveGameplayModifier, ModifierHandle) == 0x000018, "Member 'FActiveGameplayModifier::ModifierHandle' has a wrong offset!");
static_assert(offsetof(FActiveGameplayModifier, Mutators) == 0x000020, "Member 'FActiveGameplayModifier::Mutators' has a wrong offset!");
static_assert(offsetof(FActiveGameplayModifier, Expiration) == 0x000030, "Member 'FActiveGameplayModifier::Expiration' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveGameplayModifierArray
// 0x0028 (0x0130 - 0x0108)
struct FActiveGameplayModifierArray final : public FFastArraySerializer
{
public:
	TArray<struct FActiveGameplayModifier>        Items;                                             // 0x0108(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FActiveGameplayModifier>        DeferredGameplayModifiers;                         // 0x0118(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         ModifierHandleGenerator;                           // 0x0128(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSupportRuntimeModifierShutdown;                   // 0x012C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveGameplayModifierArray) == 0x000008, "Wrong alignment on FActiveGameplayModifierArray");
static_assert(sizeof(FActiveGameplayModifierArray) == 0x000130, "Wrong size on FActiveGameplayModifierArray");
static_assert(offsetof(FActiveGameplayModifierArray, Items) == 0x000108, "Member 'FActiveGameplayModifierArray::Items' has a wrong offset!");
static_assert(offsetof(FActiveGameplayModifierArray, DeferredGameplayModifiers) == 0x000118, "Member 'FActiveGameplayModifierArray::DeferredGameplayModifiers' has a wrong offset!");
static_assert(offsetof(FActiveGameplayModifierArray, ModifierHandleGenerator) == 0x000128, "Member 'FActiveGameplayModifierArray::ModifierHandleGenerator' has a wrong offset!");
static_assert(offsetof(FActiveGameplayModifierArray, bSupportRuntimeModifierShutdown) == 0x00012C, "Member 'FActiveGameplayModifierArray::bSupportRuntimeModifierShutdown' has a wrong offset!");

// ScriptStruct FortniteGame.ImposterBatch
// 0x0020 (0x0020 - 0x0000)
struct FImposterBatch final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class AFortImposterGroup*                     ImposterGroup;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CachedIndex;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImposterBatch) == 0x000008, "Wrong alignment on FImposterBatch");
static_assert(sizeof(FImposterBatch) == 0x000020, "Wrong size on FImposterBatch");
static_assert(offsetof(FImposterBatch, Transforms) == 0x000000, "Member 'FImposterBatch::Transforms' has a wrong offset!");
static_assert(offsetof(FImposterBatch, ImposterGroup) == 0x000010, "Member 'FImposterBatch::ImposterGroup' has a wrong offset!");
static_assert(offsetof(FImposterBatch, CachedIndex) == 0x000018, "Member 'FImposterBatch::CachedIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayCueAttachInfo
// 0x0028 (0x0028 - 0x0000)
struct FFortGameplayCueAttachInfo final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGameplayCueAttachType                    AttachType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAttachToWeapon : 1;                               // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAttachToHitResult : 1;                            // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseUnsmoothedNetworkPosition : 1;                 // 0x000C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreScale : 1;                                  // 0x000C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreRotation : 1;                               // 0x000C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideScale;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OverrideRotation;                                  // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayCueAttachInfo) == 0x000004, "Wrong alignment on FFortGameplayCueAttachInfo");
static_assert(sizeof(FFortGameplayCueAttachInfo) == 0x000028, "Wrong size on FFortGameplayCueAttachInfo");
static_assert(offsetof(FFortGameplayCueAttachInfo, SocketName) == 0x000000, "Member 'FFortGameplayCueAttachInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueAttachInfo, AttachType) == 0x000008, "Member 'FFortGameplayCueAttachInfo::AttachType' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueAttachInfo, OverrideScale) == 0x000010, "Member 'FFortGameplayCueAttachInfo::OverrideScale' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueAttachInfo, OverrideRotation) == 0x00001C, "Member 'FFortGameplayCueAttachInfo::OverrideRotation' has a wrong offset!");

// ScriptStruct FortniteGame.SetCVarParams
// 0x0020 (0x0020 - 0x0000)
struct FSetCVarParams final
{
public:
	class FName                                   CVarName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetCVarType                                  Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NumberValue;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetCVarParams) == 0x000008, "Wrong alignment on FSetCVarParams");
static_assert(sizeof(FSetCVarParams) == 0x000020, "Wrong size on FSetCVarParams");
static_assert(offsetof(FSetCVarParams, CVarName) == 0x000000, "Member 'FSetCVarParams::CVarName' has a wrong offset!");
static_assert(offsetof(FSetCVarParams, Type) == 0x000008, "Member 'FSetCVarParams::Type' has a wrong offset!");
static_assert(offsetof(FSetCVarParams, NumberValue) == 0x00000C, "Member 'FSetCVarParams::NumberValue' has a wrong offset!");
static_assert(offsetof(FSetCVarParams, StringValue) == 0x000010, "Member 'FSetCVarParams::StringValue' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostDisintegrationData
// 0x0030 (0x0038 - 0x0008)
struct FOutpostDisintegrationData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortWorldItemDefinition> ItemDefinition;                                    // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisintegrationValue;                               // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOutpostDisintegrationData) == 0x000008, "Wrong alignment on FOutpostDisintegrationData");
static_assert(sizeof(FOutpostDisintegrationData) == 0x000038, "Wrong size on FOutpostDisintegrationData");
static_assert(offsetof(FOutpostDisintegrationData, ItemDefinition) == 0x000008, "Member 'FOutpostDisintegrationData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FOutpostDisintegrationData, DisintegrationValue) == 0x000030, "Member 'FOutpostDisintegrationData::DisintegrationValue' has a wrong offset!");

// ScriptStruct FortniteGame.IgnoreCollisionActor
// 0x0010 (0x0010 - 0x0000)
struct FIgnoreCollisionActor final
{
public:
	class AActor*                                 IgnoreActor;                                       // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeIgnoreStarted;                                 // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreDuration;                                    // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIgnoreCollisionActor) == 0x000008, "Wrong alignment on FIgnoreCollisionActor");
static_assert(sizeof(FIgnoreCollisionActor) == 0x000010, "Wrong size on FIgnoreCollisionActor");
static_assert(offsetof(FIgnoreCollisionActor, IgnoreActor) == 0x000000, "Member 'FIgnoreCollisionActor::IgnoreActor' has a wrong offset!");
static_assert(offsetof(FIgnoreCollisionActor, TimeIgnoreStarted) == 0x000008, "Member 'FIgnoreCollisionActor::TimeIgnoreStarted' has a wrong offset!");
static_assert(offsetof(FIgnoreCollisionActor, IgnoreDuration) == 0x00000C, "Member 'FIgnoreCollisionActor::IgnoreDuration' has a wrong offset!");

// ScriptStruct FortniteGame.FortGiftingInfo
// 0x0028 (0x0028 - 0x0000)
struct FFortGiftingInfo
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortHeroType*                          HeroType;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGiftingInfo) == 0x000008, "Wrong alignment on FFortGiftingInfo");
static_assert(sizeof(FFortGiftingInfo) == 0x000028, "Wrong size on FFortGiftingInfo");
static_assert(offsetof(FFortGiftingInfo, PlayerName) == 0x000000, "Member 'FFortGiftingInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FFortGiftingInfo, HeroType) == 0x000010, "Member 'FFortGiftingInfo::HeroType' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemEntryStateValue
// 0x0010 (0x0010 - 0x0000)
struct FFortItemEntryStateValue final
{
public:
	int32                                         IntValue;                                          // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NameValue;                                         // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortItemEntryState                           StateType;                                         // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemEntryStateValue) == 0x000004, "Wrong alignment on FFortItemEntryStateValue");
static_assert(sizeof(FFortItemEntryStateValue) == 0x000010, "Wrong size on FFortItemEntryStateValue");
static_assert(offsetof(FFortItemEntryStateValue, IntValue) == 0x000000, "Member 'FFortItemEntryStateValue::IntValue' has a wrong offset!");
static_assert(offsetof(FFortItemEntryStateValue, NameValue) == 0x000004, "Member 'FFortItemEntryStateValue::NameValue' has a wrong offset!");
static_assert(offsetof(FFortItemEntryStateValue, StateType) == 0x00000C, "Member 'FFortItemEntryStateValue::StateType' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemEntry
// 0x0114 (0x0120 - 0x000C)
struct FFortItemEntry final : public FFastArraySerializerItem
{
public:
	int32                                         Count;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PreviousCount;                                     // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Durability;                                        // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Level;                                             // 0x0024(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LoadedAmmo;                                        // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AlterationDefinitions;                             // 0x0030(0x0010)(ZeroConstructor, SaveGame, RepSkip, NativeAccessSpecifierPrivate)
	class FString                                 ItemSource;                                        // 0x0040(0x0010)(ZeroConstructor, SaveGame, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ItemGuid;                                          // 0x0050(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Inventory_overflow_date;                           // 0x0060(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bWasGifted;                                        // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsReplicatedCopy;                                 // 0x0062(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsDirty;                                          // 0x0063(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUpdateStatsOnCollection;                          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGiftingInfo                       GiftingInfo;                                       // 0x0068(0x0028)(RepSkip, NativeAccessSpecifierPrivate)
	TArray<struct FFortItemEntryStateValue>       StateValues;                                       // 0x0090(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AFortInventory>          ParentInventory;                                   // 0x00A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayAbilitySpecHandle             GameplayAbilitySpecHandle;                         // 0x00A8(0x0004)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAlterationItemDefinition*>  AlterationInstances;                               // 0x00B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<float>                                 GenericAttributeValues;                            // 0x00C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x50];                                      // 0x00D0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemEntry) == 0x000008, "Wrong alignment on FFortItemEntry");
static_assert(sizeof(FFortItemEntry) == 0x000120, "Wrong size on FFortItemEntry");
static_assert(offsetof(FFortItemEntry, Count) == 0x00000C, "Member 'FFortItemEntry::Count' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, PreviousCount) == 0x000010, "Member 'FFortItemEntry::PreviousCount' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ItemDefinition) == 0x000018, "Member 'FFortItemEntry::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, Durability) == 0x000020, "Member 'FFortItemEntry::Durability' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, Level) == 0x000024, "Member 'FFortItemEntry::Level' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, LoadedAmmo) == 0x000028, "Member 'FFortItemEntry::LoadedAmmo' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, AlterationDefinitions) == 0x000030, "Member 'FFortItemEntry::AlterationDefinitions' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ItemSource) == 0x000040, "Member 'FFortItemEntry::ItemSource' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ItemGuid) == 0x000050, "Member 'FFortItemEntry::ItemGuid' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, Inventory_overflow_date) == 0x000060, "Member 'FFortItemEntry::Inventory_overflow_date' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, bWasGifted) == 0x000061, "Member 'FFortItemEntry::bWasGifted' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, bIsReplicatedCopy) == 0x000062, "Member 'FFortItemEntry::bIsReplicatedCopy' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, bIsDirty) == 0x000063, "Member 'FFortItemEntry::bIsDirty' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, bUpdateStatsOnCollection) == 0x000064, "Member 'FFortItemEntry::bUpdateStatsOnCollection' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, GiftingInfo) == 0x000068, "Member 'FFortItemEntry::GiftingInfo' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, StateValues) == 0x000090, "Member 'FFortItemEntry::StateValues' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ParentInventory) == 0x0000A0, "Member 'FFortItemEntry::ParentInventory' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, GameplayAbilitySpecHandle) == 0x0000A8, "Member 'FFortItemEntry::GameplayAbilitySpecHandle' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, AlterationInstances) == 0x0000B0, "Member 'FFortItemEntry::AlterationInstances' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, GenericAttributeValues) == 0x0000C0, "Member 'FFortItemEntry::GenericAttributeValues' has a wrong offset!");

// ScriptStruct FortniteGame.FortRewardActivity
// 0x0078 (0x0078 - 0x0000)
struct FFortRewardActivity final
{
public:
	EFortRewardActivityType                       ActivityType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ActivityGuid;                                      // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0030(0x0018)(NativeAccessSpecifierPublic)
	float                                         RewardDisplayTime;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemEntry>                 RewardItems;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemEntry>                 MissedRewardItems;                                 // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EFortCompletionResult                         ActivityCompletionResult;                          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdditionalCompletionMissionPoints;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRewardActivity) == 0x000008, "Wrong alignment on FFortRewardActivity");
static_assert(sizeof(FFortRewardActivity) == 0x000078, "Wrong size on FFortRewardActivity");
static_assert(offsetof(FFortRewardActivity, ActivityType) == 0x000000, "Member 'FFortRewardActivity::ActivityType' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, ActivityGuid) == 0x000004, "Member 'FFortRewardActivity::ActivityGuid' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, TitleText) == 0x000018, "Member 'FFortRewardActivity::TitleText' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, DescriptionText) == 0x000030, "Member 'FFortRewardActivity::DescriptionText' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, RewardDisplayTime) == 0x000048, "Member 'FFortRewardActivity::RewardDisplayTime' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, RewardItems) == 0x000050, "Member 'FFortRewardActivity::RewardItems' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, MissedRewardItems) == 0x000060, "Member 'FFortRewardActivity::MissedRewardItems' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, ActivityCompletionResult) == 0x000070, "Member 'FFortRewardActivity::ActivityCompletionResult' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, AdditionalCompletionMissionPoints) == 0x000074, "Member 'FFortRewardActivity::AdditionalCompletionMissionPoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortRewardReport
// 0x0070 (0x0070 - 0x0000)
struct FFortRewardReport final
{
public:
	class FText                                   MissionName;                                       // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   TheaterName;                                       // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   Difficulty;                                        // 0x0030(0x0018)(NativeAccessSpecifierPublic)
	float                                         DifficultyValue;                                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortRewardActivity>            RewardActivities;                                  // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsFinalized;                                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRewardReport) == 0x000008, "Wrong alignment on FFortRewardReport");
static_assert(sizeof(FFortRewardReport) == 0x000070, "Wrong size on FFortRewardReport");
static_assert(offsetof(FFortRewardReport, MissionName) == 0x000000, "Member 'FFortRewardReport::MissionName' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, TheaterName) == 0x000018, "Member 'FFortRewardReport::TheaterName' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, Difficulty) == 0x000030, "Member 'FFortRewardReport::Difficulty' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, DifficultyValue) == 0x000048, "Member 'FFortRewardReport::DifficultyValue' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, RewardActivities) == 0x000050, "Member 'FFortRewardReport::RewardActivities' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, bIsFinalized) == 0x000060, "Member 'FFortRewardReport::bIsFinalized' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaTravelLogEntry
// 0x00D0 (0x00D0 - 0x0000)
struct FAthenaTravelLogEntry final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAthenaTravelEventType                        Type;                                              // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InstigatorName;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       InstigatorId;                                      // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaTravelLogPlayerType                    InstigatorPlayerType;                              // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReceiverName;                                      // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       ReceiverId;                                        // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaTravelLogPlayerType                    ReceiverPlayerType;                                // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Meta;                                              // 0x0090(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  LocationPOITags;                                   // 0x00B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaTravelLogEntry) == 0x000008, "Wrong alignment on FAthenaTravelLogEntry");
static_assert(sizeof(FAthenaTravelLogEntry) == 0x0000D0, "Wrong size on FAthenaTravelLogEntry");
static_assert(offsetof(FAthenaTravelLogEntry, Time) == 0x000000, "Member 'FAthenaTravelLogEntry::Time' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, Position) == 0x000004, "Member 'FAthenaTravelLogEntry::Position' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, Rotation) == 0x000010, "Member 'FAthenaTravelLogEntry::Rotation' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, Type) == 0x00001C, "Member 'FAthenaTravelLogEntry::Type' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, InstigatorName) == 0x000020, "Member 'FAthenaTravelLogEntry::InstigatorName' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, InstigatorId) == 0x000028, "Member 'FAthenaTravelLogEntry::InstigatorId' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, InstigatorPlayerType) == 0x000050, "Member 'FAthenaTravelLogEntry::InstigatorPlayerType' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, ReceiverName) == 0x000054, "Member 'FAthenaTravelLogEntry::ReceiverName' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, ReceiverId) == 0x000060, "Member 'FAthenaTravelLogEntry::ReceiverId' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, ReceiverPlayerType) == 0x000088, "Member 'FAthenaTravelLogEntry::ReceiverPlayerType' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, Value) == 0x00008C, "Member 'FAthenaTravelLogEntry::Value' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, Meta) == 0x000090, "Member 'FAthenaTravelLogEntry::Meta' has a wrong offset!");
static_assert(offsetof(FAthenaTravelLogEntry, LocationPOITags) == 0x0000B0, "Member 'FAthenaTravelLogEntry::LocationPOITags' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaTravelRecord
// 0x0010 (0x0010 - 0x0000)
struct FAthenaTravelRecord final
{
public:
	TArray<struct FAthenaTravelLogEntry>          Log;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaTravelRecord) == 0x000008, "Wrong alignment on FAthenaTravelRecord");
static_assert(sizeof(FAthenaTravelRecord) == 0x000010, "Wrong size on FAthenaTravelRecord");
static_assert(offsetof(FAthenaTravelRecord, Log) == 0x000000, "Member 'FAthenaTravelRecord::Log' has a wrong offset!");

// ScriptStruct FortniteGame.HeroKeywordDisplayData
// 0x0020 (0x0020 - 0x0000)
struct FHeroKeywordDisplayData final
{
public:
	struct FGameplayTag                           KeyWordGameplayTag;                                // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KeywordDisplayName;                                // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroKeywordDisplayData) == 0x000008, "Wrong alignment on FHeroKeywordDisplayData");
static_assert(sizeof(FHeroKeywordDisplayData) == 0x000020, "Wrong size on FHeroKeywordDisplayData");
static_assert(offsetof(FHeroKeywordDisplayData, KeyWordGameplayTag) == 0x000000, "Member 'FHeroKeywordDisplayData::KeyWordGameplayTag' has a wrong offset!");
static_assert(offsetof(FHeroKeywordDisplayData, KeywordDisplayName) == 0x000008, "Member 'FHeroKeywordDisplayData::KeywordDisplayName' has a wrong offset!");

// ScriptStruct FortniteGame.CreativeActorMetaData
// 0x0008 (0x0008 - 0x0000)
struct FCreativeActorMetaData final
{
public:
	int32                                         AssetSize;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceSize;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeActorMetaData) == 0x000004, "Wrong alignment on FCreativeActorMetaData");
static_assert(sizeof(FCreativeActorMetaData) == 0x000008, "Wrong size on FCreativeActorMetaData");
static_assert(offsetof(FCreativeActorMetaData, AssetSize) == 0x000000, "Member 'FCreativeActorMetaData::AssetSize' has a wrong offset!");
static_assert(offsetof(FCreativeActorMetaData, InstanceSize) == 0x000004, "Member 'FCreativeActorMetaData::InstanceSize' has a wrong offset!");

// ScriptStruct FortniteGame.FortMaterialParameterID
// 0x000C (0x000C - 0x0000)
struct FFortMaterialParameterID final
{
public:
	int32                                         VariableIndex;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VariableName;                                      // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMaterialParameterID) == 0x000004, "Wrong alignment on FFortMaterialParameterID");
static_assert(sizeof(FFortMaterialParameterID) == 0x00000C, "Wrong size on FFortMaterialParameterID");
static_assert(offsetof(FFortMaterialParameterID, VariableIndex) == 0x000000, "Member 'FFortMaterialParameterID::VariableIndex' has a wrong offset!");
static_assert(offsetof(FFortMaterialParameterID, VariableName) == 0x000004, "Member 'FFortMaterialParameterID::VariableName' has a wrong offset!");

// ScriptStruct FortniteGame.FriendCodeLocString
// 0x0020 (0x0020 - 0x0000)
struct FFriendCodeLocString final
{
public:
	class FString                                 Lang;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendCodeLocString) == 0x000008, "Wrong alignment on FFriendCodeLocString");
static_assert(sizeof(FFriendCodeLocString) == 0x000020, "Wrong size on FFriendCodeLocString");
static_assert(offsetof(FFriendCodeLocString, Lang) == 0x000000, "Member 'FFriendCodeLocString::Lang' has a wrong offset!");
static_assert(offsetof(FFriendCodeLocString, Text) == 0x000010, "Member 'FFriendCodeLocString::Text' has a wrong offset!");

// ScriptStruct FortniteGame.CreativePlotSessionData
// 0x0014 (0x0014 - 0x0000)
struct FCreativePlotSessionData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimesInventoryOpened;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimesIslandMenuOpened;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimesGameStarted;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativePlotSessionData) == 0x000004, "Wrong alignment on FCreativePlotSessionData");
static_assert(sizeof(FCreativePlotSessionData) == 0x000014, "Wrong size on FCreativePlotSessionData");
static_assert(offsetof(FCreativePlotSessionData, TimesInventoryOpened) == 0x000008, "Member 'FCreativePlotSessionData::TimesInventoryOpened' has a wrong offset!");
static_assert(offsetof(FCreativePlotSessionData, TimesIslandMenuOpened) == 0x00000C, "Member 'FCreativePlotSessionData::TimesIslandMenuOpened' has a wrong offset!");
static_assert(offsetof(FCreativePlotSessionData, TimesGameStarted) == 0x000010, "Member 'FCreativePlotSessionData::TimesGameStarted' has a wrong offset!");

// ScriptStruct FortniteGame.FortSubgameClientSettings
// 0x0010 (0x0010 - 0x0000)
struct FFortSubgameClientSettings final
{
public:
	TArray<class FString>                         PinnedQuestInstances;                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSubgameClientSettings) == 0x000008, "Wrong alignment on FFortSubgameClientSettings");
static_assert(sizeof(FFortSubgameClientSettings) == 0x000010, "Wrong size on FFortSubgameClientSettings");
static_assert(offsetof(FFortSubgameClientSettings, PinnedQuestInstances) == 0x000000, "Member 'FFortSubgameClientSettings::PinnedQuestInstances' has a wrong offset!");

// ScriptStruct FortniteGame.TimeOfDayPhase
// 0x0020 (0x0020 - 0x0000)
struct FTimeOfDayPhase final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeOfDayPhase) == 0x000008, "Wrong alignment on FTimeOfDayPhase");
static_assert(sizeof(FTimeOfDayPhase) == 0x000020, "Wrong size on FTimeOfDayPhase");
static_assert(offsetof(FTimeOfDayPhase, Time) == 0x000000, "Member 'FTimeOfDayPhase::Time' has a wrong offset!");
static_assert(offsetof(FTimeOfDayPhase, DisplayName) == 0x000008, "Member 'FTimeOfDayPhase::DisplayName' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaBatchedDamageGameplayCues_NonShared
// 0x0010 (0x0010 - 0x0000)
struct FAthenaBatchedDamageGameplayCues_NonShared final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NonPlayerHitActor;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaBatchedDamageGameplayCues_NonShared) == 0x000008, "Wrong alignment on FAthenaBatchedDamageGameplayCues_NonShared");
static_assert(sizeof(FAthenaBatchedDamageGameplayCues_NonShared) == 0x000010, "Wrong size on FAthenaBatchedDamageGameplayCues_NonShared");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_NonShared, HitActor) == 0x000000, "Member 'FAthenaBatchedDamageGameplayCues_NonShared::HitActor' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_NonShared, NonPlayerHitActor) == 0x000008, "Member 'FAthenaBatchedDamageGameplayCues_NonShared::NonPlayerHitActor' has a wrong offset!");

// ScriptStruct FortniteGame.CreativeIslandData
// 0x0050 (0x0050 - 0x0000)
struct FCreativeIslandData final
{
public:
	class FString                                 McpId;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   IslandName;                                        // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 PublishedIslandCode;                               // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PublishedIslandVersion;                            // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastLoadedDate;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDeleted;                                        // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreativeIslandData) == 0x000008, "Wrong alignment on FCreativeIslandData");
static_assert(sizeof(FCreativeIslandData) == 0x000050, "Wrong size on FCreativeIslandData");
static_assert(offsetof(FCreativeIslandData, McpId) == 0x000000, "Member 'FCreativeIslandData::McpId' has a wrong offset!");
static_assert(offsetof(FCreativeIslandData, IslandName) == 0x000010, "Member 'FCreativeIslandData::IslandName' has a wrong offset!");
static_assert(offsetof(FCreativeIslandData, PublishedIslandCode) == 0x000028, "Member 'FCreativeIslandData::PublishedIslandCode' has a wrong offset!");
static_assert(offsetof(FCreativeIslandData, PublishedIslandVersion) == 0x000038, "Member 'FCreativeIslandData::PublishedIslandVersion' has a wrong offset!");
static_assert(offsetof(FCreativeIslandData, LastLoadedDate) == 0x000040, "Member 'FCreativeIslandData::LastLoadedDate' has a wrong offset!");
static_assert(offsetof(FCreativeIslandData, bIsDeleted) == 0x000048, "Member 'FCreativeIslandData::bIsDeleted' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipDisplayStatInfo
// 0x0050 (0x0050 - 0x0000)
struct FFortTooltipDisplayStatInfo final
{
public:
	struct FGameplayTag                           Token;                                             // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0020)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ContextTags;                                       // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bLowerIsBetter;                                    // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTooltipDisplayStatInfo) == 0x000008, "Wrong alignment on FFortTooltipDisplayStatInfo");
static_assert(sizeof(FFortTooltipDisplayStatInfo) == 0x000050, "Wrong size on FFortTooltipDisplayStatInfo");
static_assert(offsetof(FFortTooltipDisplayStatInfo, Token) == 0x000000, "Member 'FFortTooltipDisplayStatInfo::Token' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayStatInfo, Attribute) == 0x000008, "Member 'FFortTooltipDisplayStatInfo::Attribute' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayStatInfo, ContextTags) == 0x000028, "Member 'FFortTooltipDisplayStatInfo::ContextTags' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayStatInfo, bLowerIsBetter) == 0x000048, "Member 'FFortTooltipDisplayStatInfo::bLowerIsBetter' has a wrong offset!");

// ScriptStruct FortniteGame.CreativePooledMID
// 0x0010 (0x0010 - 0x0000)
struct FCreativePooledMID final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     OriginalMaterial;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativePooledMID) == 0x000008, "Wrong alignment on FCreativePooledMID");
static_assert(sizeof(FCreativePooledMID) == 0x000010, "Wrong size on FCreativePooledMID");
static_assert(offsetof(FCreativePooledMID, Mid) == 0x000000, "Member 'FCreativePooledMID::Mid' has a wrong offset!");
static_assert(offsetof(FCreativePooledMID, OriginalMaterial) == 0x000008, "Member 'FCreativePooledMID::OriginalMaterial' has a wrong offset!");

// ScriptStruct FortniteGame.EndZoneScoreAndAwards
// 0x0070 (0x0070 - 0x0000)
struct FEndZoneScoreAndAwards final
{
public:
	bool                                          bResultsPendingSave;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalScore;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalMatchBonus;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortQuestEarnedBadgeData>      EarnedBadgeData;                                   // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EarnedItemCaches;                                  // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumMissionPoints;                                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x3C];                                      // 0x0034(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndZoneScoreAndAwards) == 0x000008, "Wrong alignment on FEndZoneScoreAndAwards");
static_assert(sizeof(FEndZoneScoreAndAwards) == 0x000070, "Wrong size on FEndZoneScoreAndAwards");
static_assert(offsetof(FEndZoneScoreAndAwards, bResultsPendingSave) == 0x000000, "Member 'FEndZoneScoreAndAwards::bResultsPendingSave' has a wrong offset!");
static_assert(offsetof(FEndZoneScoreAndAwards, TotalScore) == 0x000004, "Member 'FEndZoneScoreAndAwards::TotalScore' has a wrong offset!");
static_assert(offsetof(FEndZoneScoreAndAwards, bCriticalMatchBonus) == 0x000008, "Member 'FEndZoneScoreAndAwards::bCriticalMatchBonus' has a wrong offset!");
static_assert(offsetof(FEndZoneScoreAndAwards, EarnedBadgeData) == 0x000010, "Member 'FEndZoneScoreAndAwards::EarnedBadgeData' has a wrong offset!");
static_assert(offsetof(FEndZoneScoreAndAwards, EarnedItemCaches) == 0x000020, "Member 'FEndZoneScoreAndAwards::EarnedItemCaches' has a wrong offset!");
static_assert(offsetof(FEndZoneScoreAndAwards, NumMissionPoints) == 0x000030, "Member 'FEndZoneScoreAndAwards::NumMissionPoints' has a wrong offset!");

// ScriptStruct FortniteGame.RandomDayphaseFX
// 0x0040 (0x0040 - 0x0000)
struct FRandomDayphaseFX final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleSystem*>                AltParticleSystems;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortDayPhase>                         RequiredDayphases;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ChanceToSpawnFX;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetailMode                                   DetailMode;                                        // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDrawDistance;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomSelectionAlreadyHappened;                   // 0x0034(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               SpawnedComponent;                                  // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomDayphaseFX) == 0x000008, "Wrong alignment on FRandomDayphaseFX");
static_assert(sizeof(FRandomDayphaseFX) == 0x000040, "Wrong size on FRandomDayphaseFX");
static_assert(offsetof(FRandomDayphaseFX, ParticleSystem) == 0x000000, "Member 'FRandomDayphaseFX::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, AltParticleSystems) == 0x000008, "Member 'FRandomDayphaseFX::AltParticleSystems' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, RequiredDayphases) == 0x000018, "Member 'FRandomDayphaseFX::RequiredDayphases' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, ChanceToSpawnFX) == 0x000028, "Member 'FRandomDayphaseFX::ChanceToSpawnFX' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, DetailMode) == 0x00002C, "Member 'FRandomDayphaseFX::DetailMode' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, MaxDrawDistance) == 0x000030, "Member 'FRandomDayphaseFX::MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, bRandomSelectionAlreadyHappened) == 0x000034, "Member 'FRandomDayphaseFX::bRandomSelectionAlreadyHappened' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, SpawnedComponent) == 0x000038, "Member 'FRandomDayphaseFX::SpawnedComponent' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaMatchLootReward
// 0x0018 (0x0018 - 0x0000)
struct FAthenaMatchLootReward final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaMatchLootReward) == 0x000008, "Wrong alignment on FAthenaMatchLootReward");
static_assert(sizeof(FAthenaMatchLootReward) == 0x000018, "Wrong size on FAthenaMatchLootReward");
static_assert(offsetof(FAthenaMatchLootReward, TemplateId) == 0x000000, "Member 'FAthenaMatchLootReward::TemplateId' has a wrong offset!");
static_assert(offsetof(FAthenaMatchLootReward, Amount) == 0x000010, "Member 'FAthenaMatchLootReward::Amount' has a wrong offset!");

// ScriptStruct FortniteGame.DeathInfo
// 0x0050 (0x0050 - 0x0000)
struct FDeathInfo final
{
public:
	class AActor*                                 FinisherOrDowner;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Downer;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDBNO;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeathCause                                   DeathCause;                                        // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeathLocation;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitialized;                                      // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DeathTags;                                         // 0x0028(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeathInfo) == 0x000008, "Wrong alignment on FDeathInfo");
static_assert(sizeof(FDeathInfo) == 0x000050, "Wrong size on FDeathInfo");
static_assert(offsetof(FDeathInfo, FinisherOrDowner) == 0x000000, "Member 'FDeathInfo::FinisherOrDowner' has a wrong offset!");
static_assert(offsetof(FDeathInfo, Downer) == 0x000008, "Member 'FDeathInfo::Downer' has a wrong offset!");
static_assert(offsetof(FDeathInfo, bDBNO) == 0x000010, "Member 'FDeathInfo::bDBNO' has a wrong offset!");
static_assert(offsetof(FDeathInfo, DeathCause) == 0x000011, "Member 'FDeathInfo::DeathCause' has a wrong offset!");
static_assert(offsetof(FDeathInfo, Distance) == 0x000014, "Member 'FDeathInfo::Distance' has a wrong offset!");
static_assert(offsetof(FDeathInfo, DeathLocation) == 0x000018, "Member 'FDeathInfo::DeathLocation' has a wrong offset!");
static_assert(offsetof(FDeathInfo, bInitialized) == 0x000024, "Member 'FDeathInfo::bInitialized' has a wrong offset!");
static_assert(offsetof(FDeathInfo, DeathTags) == 0x000028, "Member 'FDeathInfo::DeathTags' has a wrong offset!");

// ScriptStruct FortniteGame.CustomPartTextureParameter
// 0x0038 (0x0038 - 0x0000)
struct FCustomPartTextureParameter final
{
public:
	int32                                         MaterialIndexForTextureParameter;                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterNameForMaterial;                   // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                TextureOverride;                                   // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCustomPartTextureParameter) == 0x000008, "Wrong alignment on FCustomPartTextureParameter");
static_assert(sizeof(FCustomPartTextureParameter) == 0x000038, "Wrong size on FCustomPartTextureParameter");
static_assert(offsetof(FCustomPartTextureParameter, MaterialIndexForTextureParameter) == 0x000000, "Member 'FCustomPartTextureParameter::MaterialIndexForTextureParameter' has a wrong offset!");
static_assert(offsetof(FCustomPartTextureParameter, TextureParameterNameForMaterial) == 0x000004, "Member 'FCustomPartTextureParameter::TextureParameterNameForMaterial' has a wrong offset!");
static_assert(offsetof(FCustomPartTextureParameter, TextureOverride) == 0x000010, "Member 'FCustomPartTextureParameter::TextureOverride' has a wrong offset!");

// ScriptStruct FortniteGame.NavAgentData
// 0x0018 (0x0018 - 0x0000)
struct FNavAgentData final
{
public:
	class FName                                   AgentName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   BuildingActorHealthToNavAreaStrengthHandle;        // 0x0008(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNavAgentData) == 0x000008, "Wrong alignment on FNavAgentData");
static_assert(sizeof(FNavAgentData) == 0x000018, "Wrong size on FNavAgentData");
static_assert(offsetof(FNavAgentData, AgentName) == 0x000000, "Member 'FNavAgentData::AgentName' has a wrong offset!");
static_assert(offsetof(FNavAgentData, BuildingActorHealthToNavAreaStrengthHandle) == 0x000008, "Member 'FNavAgentData::BuildingActorHealthToNavAreaStrengthHandle' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaMatchXpReward
// 0x0020 (0x0020 - 0x0000)
struct FAthenaMatchXpReward final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaMatchXpReward) == 0x000008, "Wrong alignment on FAthenaMatchXpReward");
static_assert(sizeof(FAthenaMatchXpReward) == 0x000020, "Wrong size on FAthenaMatchXpReward");
static_assert(offsetof(FAthenaMatchXpReward, Text) == 0x000000, "Member 'FAthenaMatchXpReward::Text' has a wrong offset!");
static_assert(offsetof(FAthenaMatchXpReward, Amount) == 0x000018, "Member 'FAthenaMatchXpReward::Amount' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaAwardGroup
// 0x0028 (0x0028 - 0x0000)
struct FAthenaAwardGroup final
{
public:
	ERewardSource                                 RewardSource;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMcpLootEntry>                  Items;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeasonXp;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookXp;                                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaAwardGroup) == 0x000008, "Wrong alignment on FAthenaAwardGroup");
static_assert(sizeof(FAthenaAwardGroup) == 0x000028, "Wrong size on FAthenaAwardGroup");
static_assert(offsetof(FAthenaAwardGroup, RewardSource) == 0x000000, "Member 'FAthenaAwardGroup::RewardSource' has a wrong offset!");
static_assert(offsetof(FAthenaAwardGroup, Items) == 0x000008, "Member 'FAthenaAwardGroup::Items' has a wrong offset!");
static_assert(offsetof(FAthenaAwardGroup, Score) == 0x000018, "Member 'FAthenaAwardGroup::Score' has a wrong offset!");
static_assert(offsetof(FAthenaAwardGroup, SeasonXp) == 0x00001C, "Member 'FAthenaAwardGroup::SeasonXp' has a wrong offset!");
static_assert(offsetof(FAthenaAwardGroup, BookXp) == 0x000020, "Member 'FAthenaAwardGroup::BookXp' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaRewardResult
// 0x0040 (0x0040 - 0x0000)
struct FAthenaRewardResult final
{
public:
	int32                                         LevelsGained;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookLevelsGained;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSeasonXpGained;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalBookXpGained;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrePenaltySeasonXpGained;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAthenaMatchXpMultiplierGroup>  XpMultipliers;                                     // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAthenaAwardGroup>              Rewards;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AntiAddictionMultiplier;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaRewardResult) == 0x000008, "Wrong alignment on FAthenaRewardResult");
static_assert(sizeof(FAthenaRewardResult) == 0x000040, "Wrong size on FAthenaRewardResult");
static_assert(offsetof(FAthenaRewardResult, LevelsGained) == 0x000000, "Member 'FAthenaRewardResult::LevelsGained' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, BookLevelsGained) == 0x000004, "Member 'FAthenaRewardResult::BookLevelsGained' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, TotalSeasonXpGained) == 0x000008, "Member 'FAthenaRewardResult::TotalSeasonXpGained' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, TotalBookXpGained) == 0x00000C, "Member 'FAthenaRewardResult::TotalBookXpGained' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, PrePenaltySeasonXpGained) == 0x000010, "Member 'FAthenaRewardResult::PrePenaltySeasonXpGained' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, XpMultipliers) == 0x000018, "Member 'FAthenaRewardResult::XpMultipliers' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, Rewards) == 0x000028, "Member 'FAthenaRewardResult::Rewards' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, AntiAddictionMultiplier) == 0x000038, "Member 'FAthenaRewardResult::AntiAddictionMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseBannerColor
// 0x0020 (0x0020 - 0x0000)
struct FHomebaseBannerColor final
{
public:
	struct FLinearColor                           PrimaryColor;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           SecondaryColor;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FHomebaseBannerColor) == 0x000004, "Wrong alignment on FHomebaseBannerColor");
static_assert(sizeof(FHomebaseBannerColor) == 0x000020, "Wrong size on FHomebaseBannerColor");
static_assert(offsetof(FHomebaseBannerColor, PrimaryColor) == 0x000000, "Member 'FHomebaseBannerColor::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerColor, SecondaryColor) == 0x000010, "Member 'FHomebaseBannerColor::SecondaryColor' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveSetData
// 0x01D0 (0x01D0 - 0x0000)
struct FTieredWaveSetData final
{
public:
	int32                                         EDOIdx;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreatherBetweenWaves;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaveRules                                    WaveRules;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EnemyTypeToKillMod;                                // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UFortMissionInfo>> WaveMissions;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         WaveLengthMod;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumKillsMod;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillPointsMod;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyAddMod;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferTemporaryModifiers;                          // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   OverrideSpawnPointsMultiplier;                     // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideSpawnPointsCurve;                          // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideSpawnProgression;                          // 0x0090(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideUtilitiesAdjustment;                       // 0x00B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideUtilitiesFree;                             // 0x00E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideUtilitiesLocked;                           // 0x0108(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideDistance;                                  // 0x0130(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideDirectionNumber;                           // 0x0158(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideModifierTags;                              // 0x0180(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideTimedModifierTags;                         // 0x01A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveSetData) == 0x000008, "Wrong alignment on FTieredWaveSetData");
static_assert(sizeof(FTieredWaveSetData) == 0x0001D0, "Wrong size on FTieredWaveSetData");
static_assert(offsetof(FTieredWaveSetData, EDOIdx) == 0x000000, "Member 'FTieredWaveSetData::EDOIdx' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, BreatherBetweenWaves) == 0x000004, "Member 'FTieredWaveSetData::BreatherBetweenWaves' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, WaveRules) == 0x000008, "Member 'FTieredWaveSetData::WaveRules' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, EnemyTypeToKillMod) == 0x00000C, "Member 'FTieredWaveSetData::EnemyTypeToKillMod' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, WaveMissions) == 0x000018, "Member 'FTieredWaveSetData::WaveMissions' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, WaveLengthMod) == 0x000028, "Member 'FTieredWaveSetData::WaveLengthMod' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, NumKillsMod) == 0x00002C, "Member 'FTieredWaveSetData::NumKillsMod' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, KillPointsMod) == 0x000030, "Member 'FTieredWaveSetData::KillPointsMod' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, DifficultyAddMod) == 0x000034, "Member 'FTieredWaveSetData::DifficultyAddMod' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, bDeferTemporaryModifiers) == 0x000038, "Member 'FTieredWaveSetData::bDeferTemporaryModifiers' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideSpawnPointsMultiplier) == 0x000040, "Member 'FTieredWaveSetData::OverrideSpawnPointsMultiplier' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideSpawnPointsCurve) == 0x000068, "Member 'FTieredWaveSetData::OverrideSpawnPointsCurve' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideSpawnProgression) == 0x000090, "Member 'FTieredWaveSetData::OverrideSpawnProgression' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideUtilitiesAdjustment) == 0x0000B8, "Member 'FTieredWaveSetData::OverrideUtilitiesAdjustment' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideUtilitiesFree) == 0x0000E0, "Member 'FTieredWaveSetData::OverrideUtilitiesFree' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideUtilitiesLocked) == 0x000108, "Member 'FTieredWaveSetData::OverrideUtilitiesLocked' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideDistance) == 0x000130, "Member 'FTieredWaveSetData::OverrideDistance' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideDirectionNumber) == 0x000158, "Member 'FTieredWaveSetData::OverrideDirectionNumber' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideModifierTags) == 0x000180, "Member 'FTieredWaveSetData::OverrideModifierTags' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideTimedModifierTags) == 0x0001A8, "Member 'FTieredWaveSetData::OverrideTimedModifierTags' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveSet
// 0x0010 (0x0018 - 0x0008)
struct FTieredWaveSet final : public FTableRowBase
{
public:
	TArray<struct FTieredWaveSetData>             WaveData;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveSet) == 0x000008, "Wrong alignment on FTieredWaveSet");
static_assert(sizeof(FTieredWaveSet) == 0x000018, "Wrong size on FTieredWaveSet");
static_assert(offsetof(FTieredWaveSet, WaveData) == 0x000008, "Member 'FTieredWaveSet::WaveData' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlacementDistanceRequirements
// 0x0008 (0x0008 - 0x0000)
struct FFortPlacementDistanceRequirements final
{
public:
	float                                         DistanceRangeMin;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRangeMax;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlacementDistanceRequirements) == 0x000004, "Wrong alignment on FFortPlacementDistanceRequirements");
static_assert(sizeof(FFortPlacementDistanceRequirements) == 0x000008, "Wrong size on FFortPlacementDistanceRequirements");
static_assert(offsetof(FFortPlacementDistanceRequirements, DistanceRangeMin) == 0x000000, "Member 'FFortPlacementDistanceRequirements::DistanceRangeMin' has a wrong offset!");
static_assert(offsetof(FFortPlacementDistanceRequirements, DistanceRangeMax) == 0x000004, "Member 'FFortPlacementDistanceRequirements::DistanceRangeMax' has a wrong offset!");

// ScriptStruct FortniteGame.CenterOnLocationPOI
// 0x0070 (0x0070 - 0x0000)
struct FCenterOnLocationPOI final
{
public:
	struct FScalableFloat                         Enabled;                                           // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RelativeToPreviousChosenLocation;                  // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FVector                                LocationForPOI;                                    // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         WithinRadius;                                      // 0x0050(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCenterOnLocationPOI) == 0x000008, "Wrong alignment on FCenterOnLocationPOI");
static_assert(sizeof(FCenterOnLocationPOI) == 0x000070, "Wrong size on FCenterOnLocationPOI");
static_assert(offsetof(FCenterOnLocationPOI, Enabled) == 0x000000, "Member 'FCenterOnLocationPOI::Enabled' has a wrong offset!");
static_assert(offsetof(FCenterOnLocationPOI, RelativeToPreviousChosenLocation) == 0x000020, "Member 'FCenterOnLocationPOI::RelativeToPreviousChosenLocation' has a wrong offset!");
static_assert(offsetof(FCenterOnLocationPOI, LocationForPOI) == 0x000040, "Member 'FCenterOnLocationPOI::LocationForPOI' has a wrong offset!");
static_assert(offsetof(FCenterOnLocationPOI, WithinRadius) == 0x000050, "Member 'FCenterOnLocationPOI::WithinRadius' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaMatchTeamStats
// 0x0008 (0x0008 - 0x0000)
struct FAthenaMatchTeamStats final
{
public:
	int32                                         Place;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPlayers;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaMatchTeamStats) == 0x000004, "Wrong alignment on FAthenaMatchTeamStats");
static_assert(sizeof(FAthenaMatchTeamStats) == 0x000008, "Wrong size on FAthenaMatchTeamStats");
static_assert(offsetof(FAthenaMatchTeamStats, Place) == 0x000000, "Member 'FAthenaMatchTeamStats::Place' has a wrong offset!");
static_assert(offsetof(FAthenaMatchTeamStats, TotalPlayers) == 0x000004, "Member 'FAthenaMatchTeamStats::TotalPlayers' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerLoudoutEntry
// 0x0070 (0x0070 - 0x0000)
struct FPlayerLoudoutEntry final
{
public:
	class UFortWorldItemDefinition*               ItemToGrant;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         NumberOfItemsToGrant;                              // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RemoveItemOnNextSwap;                              // 0x0028(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RandomWeight;                                      // 0x0048(0x0020)(Edit, NativeAccessSpecifierPublic)
	int32                                         DesiredSlot;                                       // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerLoudoutEntry) == 0x000008, "Wrong alignment on FPlayerLoudoutEntry");
static_assert(sizeof(FPlayerLoudoutEntry) == 0x000070, "Wrong size on FPlayerLoudoutEntry");
static_assert(offsetof(FPlayerLoudoutEntry, ItemToGrant) == 0x000000, "Member 'FPlayerLoudoutEntry::ItemToGrant' has a wrong offset!");
static_assert(offsetof(FPlayerLoudoutEntry, NumberOfItemsToGrant) == 0x000008, "Member 'FPlayerLoudoutEntry::NumberOfItemsToGrant' has a wrong offset!");
static_assert(offsetof(FPlayerLoudoutEntry, RemoveItemOnNextSwap) == 0x000028, "Member 'FPlayerLoudoutEntry::RemoveItemOnNextSwap' has a wrong offset!");
static_assert(offsetof(FPlayerLoudoutEntry, RandomWeight) == 0x000048, "Member 'FPlayerLoudoutEntry::RandomWeight' has a wrong offset!");
static_assert(offsetof(FPlayerLoudoutEntry, DesiredSlot) == 0x000068, "Member 'FPlayerLoudoutEntry::DesiredSlot' has a wrong offset!");

// ScriptStruct FortniteGame.RandomItemEntries
// 0x0010 (0x0010 - 0x0000)
struct FRandomItemEntries final
{
public:
	TArray<struct FPlayerLoudoutEntry>            WeightedEntries;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomItemEntries) == 0x000008, "Wrong alignment on FRandomItemEntries");
static_assert(sizeof(FRandomItemEntries) == 0x000010, "Wrong size on FRandomItemEntries");
static_assert(offsetof(FRandomItemEntries, WeightedEntries) == 0x000000, "Member 'FRandomItemEntries::WeightedEntries' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerLoadout
// 0x0040 (0x0040 - 0x0000)
struct FPlayerLoadout final
{
public:
	TArray<struct FPlayerLoudoutEntry>            AlwaysGrantedLoadoutItems;                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRandomItemEntries>             RandomlyGrantedLoadoutItems;                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FScalableFloat                         LoadoutDuration;                                   // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerLoadout) == 0x000008, "Wrong alignment on FPlayerLoadout");
static_assert(sizeof(FPlayerLoadout) == 0x000040, "Wrong size on FPlayerLoadout");
static_assert(offsetof(FPlayerLoadout, AlwaysGrantedLoadoutItems) == 0x000000, "Member 'FPlayerLoadout::AlwaysGrantedLoadoutItems' has a wrong offset!");
static_assert(offsetof(FPlayerLoadout, RandomlyGrantedLoadoutItems) == 0x000010, "Member 'FPlayerLoadout::RandomlyGrantedLoadoutItems' has a wrong offset!");
static_assert(offsetof(FPlayerLoadout, LoadoutDuration) == 0x000020, "Member 'FPlayerLoadout::LoadoutDuration' has a wrong offset!");

// ScriptStruct FortniteGame.FortTaggedUnlockBase
// 0x0008 (0x0008 - 0x0000)
struct FFortTaggedUnlockBase
{
public:
	struct FGameplayTag                           RequiredTag;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTaggedUnlockBase) == 0x000004, "Wrong alignment on FFortTaggedUnlockBase");
static_assert(sizeof(FFortTaggedUnlockBase) == 0x000008, "Wrong size on FFortTaggedUnlockBase");
static_assert(offsetof(FFortTaggedUnlockBase, RequiredTag) == 0x000000, "Member 'FFortTaggedUnlockBase::RequiredTag' has a wrong offset!");

// ScriptStruct FortniteGame.FortTaggedDeployableBaseLootUnlock
// 0x0008 (0x0010 - 0x0008)
struct FFortTaggedDeployableBaseLootUnlock final : public FFortTaggedUnlockBase
{
public:
	class FName                                   LootTierGroup;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTaggedDeployableBaseLootUnlock) == 0x000004, "Wrong alignment on FFortTaggedDeployableBaseLootUnlock");
static_assert(sizeof(FFortTaggedDeployableBaseLootUnlock) == 0x000010, "Wrong size on FFortTaggedDeployableBaseLootUnlock");
static_assert(offsetof(FFortTaggedDeployableBaseLootUnlock, LootTierGroup) == 0x000008, "Member 'FFortTaggedDeployableBaseLootUnlock::LootTierGroup' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestMissionCreationContext
// 0x0040 (0x0040 - 0x0000)
struct FFortQuestMissionCreationContext final
{
public:
	TSoftObjectPtr<class UFortMissionInfo>        MissionInfo;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTagContainer>          MissionCreationContextTags;                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSetQuestOwnerAsMissionOwner;                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNumberToSpawnInWorld;                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestMissionCreationContext) == 0x000008, "Wrong alignment on FFortQuestMissionCreationContext");
static_assert(sizeof(FFortQuestMissionCreationContext) == 0x000040, "Wrong size on FFortQuestMissionCreationContext");
static_assert(offsetof(FFortQuestMissionCreationContext, MissionInfo) == 0x000000, "Member 'FFortQuestMissionCreationContext::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortQuestMissionCreationContext, MissionCreationContextTags) == 0x000028, "Member 'FFortQuestMissionCreationContext::MissionCreationContextTags' has a wrong offset!");
static_assert(offsetof(FFortQuestMissionCreationContext, bSetQuestOwnerAsMissionOwner) == 0x000038, "Member 'FFortQuestMissionCreationContext::bSetQuestOwnerAsMissionOwner' has a wrong offset!");
static_assert(offsetof(FFortQuestMissionCreationContext, MaxNumberToSpawnInWorld) == 0x00003C, "Member 'FFortQuestMissionCreationContext::MaxNumberToSpawnInWorld' has a wrong offset!");

// ScriptStruct FortniteGame.FortGiftBoxFortmatData
// 0x0020 (0x0020 - 0x0000)
struct FFortGiftBoxFortmatData final
{
public:
	class FString                                 StringAssetType;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringData;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGiftBoxFortmatData) == 0x000008, "Wrong alignment on FFortGiftBoxFortmatData");
static_assert(sizeof(FFortGiftBoxFortmatData) == 0x000020, "Wrong size on FFortGiftBoxFortmatData");
static_assert(offsetof(FFortGiftBoxFortmatData, StringAssetType) == 0x000000, "Member 'FFortGiftBoxFortmatData::StringAssetType' has a wrong offset!");
static_assert(offsetof(FFortGiftBoxFortmatData, StringData) == 0x000010, "Member 'FFortGiftBoxFortmatData::StringData' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaMatchStats
// 0x00A0 (0x00A0 - 0x0000)
struct FAthenaMatchStats final
{
public:
	class FString                                 StatBucket;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MatchID;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MatchEndTime;                                      // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MatchPlatform;                                     // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Stats[0x14];                                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FAthenaWeaponStats>             WeaponStats;                                       // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAthenaMatchStats) == 0x000008, "Wrong alignment on FAthenaMatchStats");
static_assert(sizeof(FAthenaMatchStats) == 0x0000A0, "Wrong size on FAthenaMatchStats");
static_assert(offsetof(FAthenaMatchStats, StatBucket) == 0x000000, "Member 'FAthenaMatchStats::StatBucket' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, MatchID) == 0x000010, "Member 'FAthenaMatchStats::MatchID' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, MatchEndTime) == 0x000020, "Member 'FAthenaMatchStats::MatchEndTime' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, MatchPlatform) == 0x000030, "Member 'FAthenaMatchStats::MatchPlatform' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, Stats) == 0x000040, "Member 'FAthenaMatchStats::Stats' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, WeaponStats) == 0x000090, "Member 'FAthenaMatchStats::WeaponStats' has a wrong offset!");

// ScriptStruct FortniteGame.AIHotSpotSlotConfig
// 0x001C (0x001C - 0x0000)
struct FAIHotSpotSlotConfig final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortHotSpotSlot                              SlotType;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIHotSpotSlotConfig) == 0x000004, "Wrong alignment on FAIHotSpotSlotConfig");
static_assert(sizeof(FAIHotSpotSlotConfig) == 0x00001C, "Wrong size on FAIHotSpotSlotConfig");
static_assert(offsetof(FAIHotSpotSlotConfig, Offset) == 0x000000, "Member 'FAIHotSpotSlotConfig::Offset' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotConfig, Direction) == 0x00000C, "Member 'FAIHotSpotSlotConfig::Direction' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotConfig, SlotType) == 0x000018, "Member 'FAIHotSpotSlotConfig::SlotType' has a wrong offset!");

// ScriptStruct FortniteGame.MinimalHighlightShot
// 0x00A8 (0x00A8 - 0x0000)
struct FMinimalHighlightShot final
{
public:
	int32                                         VersionNumber;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTimeStamp;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotDuration;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0010(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EHighlightFeatures, float>               FeatureScores;                                     // 0x0048(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumEliminations;                                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSignificantClip;                                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FinalScore;                                        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinimalHighlightShot) == 0x000008, "Wrong alignment on FMinimalHighlightShot");
static_assert(sizeof(FMinimalHighlightShot) == 0x0000A8, "Wrong size on FMinimalHighlightShot");
static_assert(offsetof(FMinimalHighlightShot, VersionNumber) == 0x000000, "Member 'FMinimalHighlightShot::VersionNumber' has a wrong offset!");
static_assert(offsetof(FMinimalHighlightShot, StartTimeStamp) == 0x000004, "Member 'FMinimalHighlightShot::StartTimeStamp' has a wrong offset!");
static_assert(offsetof(FMinimalHighlightShot, ShotDuration) == 0x000008, "Member 'FMinimalHighlightShot::ShotDuration' has a wrong offset!");
static_assert(offsetof(FMinimalHighlightShot, PlayerID) == 0x000010, "Member 'FMinimalHighlightShot::PlayerID' has a wrong offset!");
static_assert(offsetof(FMinimalHighlightShot, PlayerName) == 0x000038, "Member 'FMinimalHighlightShot::PlayerName' has a wrong offset!");
static_assert(offsetof(FMinimalHighlightShot, FeatureScores) == 0x000048, "Member 'FMinimalHighlightShot::FeatureScores' has a wrong offset!");
static_assert(offsetof(FMinimalHighlightShot, NumEliminations) == 0x000098, "Member 'FMinimalHighlightShot::NumEliminations' has a wrong offset!");
static_assert(offsetof(FMinimalHighlightShot, bIsSignificantClip) == 0x00009C, "Member 'FMinimalHighlightShot::bIsSignificantClip' has a wrong offset!");
static_assert(offsetof(FMinimalHighlightShot, FinalScore) == 0x0000A0, "Member 'FMinimalHighlightShot::FinalScore' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestObjectiveCompletion
// 0x0028 (0x0028 - 0x0000)
struct FFortQuestObjectiveCompletion final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x14];                                      // 0x0014(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestObjectiveCompletion) == 0x000008, "Wrong alignment on FFortQuestObjectiveCompletion");
static_assert(sizeof(FFortQuestObjectiveCompletion) == 0x000028, "Wrong size on FFortQuestObjectiveCompletion");
static_assert(offsetof(FFortQuestObjectiveCompletion, StatName) == 0x000000, "Member 'FFortQuestObjectiveCompletion::StatName' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveCompletion, Count) == 0x000010, "Member 'FFortQuestObjectiveCompletion::Count' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingWeakSpotData
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FBuildingWeakSpotData final
{
public:
	TWeakObjectPtr<class ABuildingSMActor>        ParentBuilding;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              Normal;                                            // 0x0008(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  Position;                                          // 0x0014(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x18];                                      // 0x0020(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingWeakSpotData) == 0x000008, "Wrong alignment on FBuildingWeakSpotData");
static_assert(sizeof(FBuildingWeakSpotData) == 0x000038, "Wrong size on FBuildingWeakSpotData");
static_assert(offsetof(FBuildingWeakSpotData, ParentBuilding) == 0x000000, "Member 'FBuildingWeakSpotData::ParentBuilding' has a wrong offset!");
static_assert(offsetof(FBuildingWeakSpotData, Normal) == 0x000008, "Member 'FBuildingWeakSpotData::Normal' has a wrong offset!");
static_assert(offsetof(FBuildingWeakSpotData, Position) == 0x000014, "Member 'FBuildingWeakSpotData::Position' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMissionWeight
// 0x0030 (0x0030 - 0x0000)
struct FFortTheaterMissionWeight final
{
public:
	TSoftClassPtr<class UClass>                   MissionGenerator;                                  // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTheaterMissionWeight) == 0x000008, "Wrong alignment on FFortTheaterMissionWeight");
static_assert(sizeof(FFortTheaterMissionWeight) == 0x000030, "Wrong size on FFortTheaterMissionWeight");
static_assert(offsetof(FFortTheaterMissionWeight, MissionGenerator) == 0x000000, "Member 'FFortTheaterMissionWeight::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortTheaterMissionWeight, Weight) == 0x000028, "Member 'FFortTheaterMissionWeight::Weight' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterDifficultyWeight
// 0x0028 (0x0028 - 0x0000)
struct FFortTheaterDifficultyWeight final
{
public:
	struct FDataTableRowHandle                    DifficultyInfo;                                    // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 LootTierGroup;                                     // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTheaterDifficultyWeight) == 0x000008, "Wrong alignment on FFortTheaterDifficultyWeight");
static_assert(sizeof(FFortTheaterDifficultyWeight) == 0x000028, "Wrong size on FFortTheaterDifficultyWeight");
static_assert(offsetof(FFortTheaterDifficultyWeight, DifficultyInfo) == 0x000000, "Member 'FFortTheaterDifficultyWeight::DifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortTheaterDifficultyWeight, LootTierGroup) == 0x000010, "Member 'FFortTheaterDifficultyWeight::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortTheaterDifficultyWeight, Weight) == 0x000020, "Member 'FFortTheaterDifficultyWeight::Weight' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapTileData
// 0x00F0 (0x00F0 - 0x0000)
struct FFortTheaterMapTileData final
{
public:
	EFortTheaterMapTileType                       TileType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ZoneTheme;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x0030(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortLinkedQuest>               LinkedQuests;                                      // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         XCoordinate;                                       // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YCoordinate;                                       // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterMissionWeight>      MissionWeightOverrides;                            // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterDifficultyWeight>   DifficultyWeightOverrides;                         // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CanBeMissionAlert;                                 // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TileTags;                                          // 0x00D0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMapTileData) == 0x000008, "Wrong alignment on FFortTheaterMapTileData");
static_assert(sizeof(FFortTheaterMapTileData) == 0x0000F0, "Wrong size on FFortTheaterMapTileData");
static_assert(offsetof(FFortTheaterMapTileData, TileType) == 0x000000, "Member 'FFortTheaterMapTileData::TileType' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, ZoneTheme) == 0x000008, "Member 'FFortTheaterMapTileData::ZoneTheme' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, Requirements) == 0x000030, "Member 'FFortTheaterMapTileData::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, LinkedQuests) == 0x000090, "Member 'FFortTheaterMapTileData::LinkedQuests' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, XCoordinate) == 0x0000A0, "Member 'FFortTheaterMapTileData::XCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, YCoordinate) == 0x0000A4, "Member 'FFortTheaterMapTileData::YCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, MissionWeightOverrides) == 0x0000A8, "Member 'FFortTheaterMapTileData::MissionWeightOverrides' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, DifficultyWeightOverrides) == 0x0000B8, "Member 'FFortTheaterMapTileData::DifficultyWeightOverrides' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, CanBeMissionAlert) == 0x0000C8, "Member 'FFortTheaterMapTileData::CanBeMissionAlert' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, TileTags) == 0x0000D0, "Member 'FFortTheaterMapTileData::TileTags' has a wrong offset!");

// ScriptStruct FortniteGame.ChallengeGiftBoxData
// 0x0038 (0x0038 - 0x0000)
struct FChallengeGiftBoxData final
{
public:
	TSoftObjectPtr<class UFortGiftBoxItemDefinition> GiftBoxToUse;                                      // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortGiftBoxFortmatData>        GiftBoxFormatData;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeGiftBoxData) == 0x000008, "Wrong alignment on FChallengeGiftBoxData");
static_assert(sizeof(FChallengeGiftBoxData) == 0x000038, "Wrong size on FChallengeGiftBoxData");
static_assert(offsetof(FChallengeGiftBoxData, GiftBoxToUse) == 0x000000, "Member 'FChallengeGiftBoxData::GiftBoxToUse' has a wrong offset!");
static_assert(offsetof(FChallengeGiftBoxData, GiftBoxFormatData) == 0x000028, "Member 'FChallengeGiftBoxData::GiftBoxFormatData' has a wrong offset!");

// ScriptStruct FortniteGame.FortChallengeBundleQuestEntry
// 0x0068 (0x0068 - 0x0000)
struct FFortChallengeBundleQuestEntry final
{
public:
	TSoftObjectPtr<class UFortQuestItemDefinition> QuestDefinition;                                   // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChallengeBundleQuestUnlockType               QuestUnlockType;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockValue;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChallengeGiftBoxData                  RewardGiftBox;                                     // 0x0030(0x0038)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortChallengeBundleQuestEntry) == 0x000008, "Wrong alignment on FFortChallengeBundleQuestEntry");
static_assert(sizeof(FFortChallengeBundleQuestEntry) == 0x000068, "Wrong size on FFortChallengeBundleQuestEntry");
static_assert(offsetof(FFortChallengeBundleQuestEntry, QuestDefinition) == 0x000000, "Member 'FFortChallengeBundleQuestEntry::QuestDefinition' has a wrong offset!");
static_assert(offsetof(FFortChallengeBundleQuestEntry, QuestUnlockType) == 0x000028, "Member 'FFortChallengeBundleQuestEntry::QuestUnlockType' has a wrong offset!");
static_assert(offsetof(FFortChallengeBundleQuestEntry, UnlockValue) == 0x00002C, "Member 'FFortChallengeBundleQuestEntry::UnlockValue' has a wrong offset!");
static_assert(offsetof(FFortChallengeBundleQuestEntry, RewardGiftBox) == 0x000030, "Member 'FFortChallengeBundleQuestEntry::RewardGiftBox' has a wrong offset!");

// ScriptStruct FortniteGame.FortKeepAmmoStash
// 0x0028 (0x0030 - 0x0008)
struct FFortKeepAmmoStash final : public FTableRowBase
{
public:
	int32                                         Max1;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown1;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max2;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown2;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max3;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown3;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max4;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown4;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickupTier;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortKeepAmmoStash) == 0x000008, "Wrong alignment on FFortKeepAmmoStash");
static_assert(sizeof(FFortKeepAmmoStash) == 0x000030, "Wrong size on FFortKeepAmmoStash");
static_assert(offsetof(FFortKeepAmmoStash, Max1) == 0x000008, "Member 'FFortKeepAmmoStash::Max1' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown1) == 0x00000C, "Member 'FFortKeepAmmoStash::Cooldown1' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Max2) == 0x000010, "Member 'FFortKeepAmmoStash::Max2' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown2) == 0x000014, "Member 'FFortKeepAmmoStash::Cooldown2' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Max3) == 0x000018, "Member 'FFortKeepAmmoStash::Max3' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown3) == 0x00001C, "Member 'FFortKeepAmmoStash::Cooldown3' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Max4) == 0x000020, "Member 'FFortKeepAmmoStash::Max4' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown4) == 0x000024, "Member 'FFortKeepAmmoStash::Cooldown4' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, PickupTier) == 0x000028, "Member 'FFortKeepAmmoStash::PickupTier' has a wrong offset!");

// ScriptStruct FortniteGame.SpeedWarpingFootDefinition
// 0x0024 (0x0024 - 0x0000)
struct FSpeedWarpingFootDefinition final
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpeedWarpingFootDefinition) == 0x000004, "Wrong alignment on FSpeedWarpingFootDefinition");
static_assert(sizeof(FSpeedWarpingFootDefinition) == 0x000024, "Wrong size on FSpeedWarpingFootDefinition");
static_assert(offsetof(FSpeedWarpingFootDefinition, IKFootBone) == 0x000000, "Member 'FSpeedWarpingFootDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FSpeedWarpingFootDefinition, FKFootBone) == 0x000010, "Member 'FSpeedWarpingFootDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FSpeedWarpingFootDefinition, NumBonesInLimb) == 0x000020, "Member 'FSpeedWarpingFootDefinition::NumBonesInLimb' has a wrong offset!");

// ScriptStruct FortniteGame.SpeedWarpingFootData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FSpeedWarpingFootData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpeedWarpingFootData) == 0x000010, "Wrong alignment on FSpeedWarpingFootData");
static_assert(sizeof(FSpeedWarpingFootData) == 0x000040, "Wrong size on FSpeedWarpingFootData");

// ScriptStruct FortniteGame.FortAnimNode_SpeedWarping
// 0x00F0 (0x01B8 - 0x00C8)
struct FFortAnimNode_SpeedWarping final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         IKFootRootBone;                                    // 0x00D0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSpeedWarpingFootDefinition>    FeetDefinitions;                                   // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSpeedWarpingFootData>          FeetData;                                          // 0x00F0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x0100(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ESpeedWarpingAxisMode                         SpeedWarpingAxisMode;                              // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedWarpingAxisMode                         FloorNormalAxisMode;                               // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpeedWarpingAxisMode                         GravityDirAxisMode;                                // 0x0112(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113[0x1];                                      // 0x0113(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedScaling;                                      // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   SpeedScalingScaleBiasClamp;                        // 0x0118(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ManualSpeedWarpingDir;                             // 0x0148(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ManualFloorNormalInput;                            // 0x0154(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ManualGravityDirInput;                             // 0x0160(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisPostAdjustmentAlpha;                         // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PelvisAdjustmentMaxIter;                           // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           PelvisAdjustmentInterp;                            // 0x0174(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x34];                                     // 0x017C(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAdjustThighBonesRotation : 1;                     // 0x01B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClampIKUsingFKLeg : 1;                            // 0x01B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOrientSpeedWarpingAxisBasedOnFloorNormal : 1;     // 0x01B0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedDeltaTime;                                   // 0x01B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimNode_SpeedWarping) == 0x000008, "Wrong alignment on FFortAnimNode_SpeedWarping");
static_assert(sizeof(FFortAnimNode_SpeedWarping) == 0x0001B8, "Wrong size on FFortAnimNode_SpeedWarping");
static_assert(offsetof(FFortAnimNode_SpeedWarping, IKFootRootBone) == 0x0000D0, "Member 'FFortAnimNode_SpeedWarping::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, FeetDefinitions) == 0x0000E0, "Member 'FFortAnimNode_SpeedWarping::FeetDefinitions' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, FeetData) == 0x0000F0, "Member 'FFortAnimNode_SpeedWarping::FeetData' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, PelvisBone) == 0x000100, "Member 'FFortAnimNode_SpeedWarping::PelvisBone' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, SpeedWarpingAxisMode) == 0x000110, "Member 'FFortAnimNode_SpeedWarping::SpeedWarpingAxisMode' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, FloorNormalAxisMode) == 0x000111, "Member 'FFortAnimNode_SpeedWarping::FloorNormalAxisMode' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, GravityDirAxisMode) == 0x000112, "Member 'FFortAnimNode_SpeedWarping::GravityDirAxisMode' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, SpeedScaling) == 0x000114, "Member 'FFortAnimNode_SpeedWarping::SpeedScaling' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, SpeedScalingScaleBiasClamp) == 0x000118, "Member 'FFortAnimNode_SpeedWarping::SpeedScalingScaleBiasClamp' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, ManualSpeedWarpingDir) == 0x000148, "Member 'FFortAnimNode_SpeedWarping::ManualSpeedWarpingDir' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, ManualFloorNormalInput) == 0x000154, "Member 'FFortAnimNode_SpeedWarping::ManualFloorNormalInput' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, ManualGravityDirInput) == 0x000160, "Member 'FFortAnimNode_SpeedWarping::ManualGravityDirInput' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, PelvisPostAdjustmentAlpha) == 0x00016C, "Member 'FFortAnimNode_SpeedWarping::PelvisPostAdjustmentAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, PelvisAdjustmentMaxIter) == 0x000170, "Member 'FFortAnimNode_SpeedWarping::PelvisAdjustmentMaxIter' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, PelvisAdjustmentInterp) == 0x000174, "Member 'FFortAnimNode_SpeedWarping::PelvisAdjustmentInterp' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, CachedDeltaTime) == 0x0001B4, "Member 'FFortAnimNode_SpeedWarping::CachedDeltaTime' has a wrong offset!");

// ScriptStruct FortniteGame.MovementTestDefinition
// 0x0020 (0x0020 - 0x0000)
struct FMovementTestDefinition final
{
public:
	float                                         ForwardMoveStrength;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideMoveStrength;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TestName;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovementTestDefinition) == 0x000008, "Wrong alignment on FMovementTestDefinition");
static_assert(sizeof(FMovementTestDefinition) == 0x000020, "Wrong size on FMovementTestDefinition");
static_assert(offsetof(FMovementTestDefinition, ForwardMoveStrength) == 0x000000, "Member 'FMovementTestDefinition::ForwardMoveStrength' has a wrong offset!");
static_assert(offsetof(FMovementTestDefinition, SideMoveStrength) == 0x000004, "Member 'FMovementTestDefinition::SideMoveStrength' has a wrong offset!");
static_assert(offsetof(FMovementTestDefinition, Duration) == 0x000008, "Member 'FMovementTestDefinition::Duration' has a wrong offset!");
static_assert(offsetof(FMovementTestDefinition, TestName) == 0x000010, "Member 'FMovementTestDefinition::TestName' has a wrong offset!");

// ScriptStruct FortniteGame.RepFortMeshAttachment
// 0x0010 (0x0010 - 0x0000)
struct FRepFortMeshAttachment final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimBlueprint*                         AnimBP;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRepFortMeshAttachment) == 0x000008, "Wrong alignment on FRepFortMeshAttachment");
static_assert(sizeof(FRepFortMeshAttachment) == 0x000010, "Wrong size on FRepFortMeshAttachment");
static_assert(offsetof(FRepFortMeshAttachment, SkeletalMesh) == 0x000000, "Member 'FRepFortMeshAttachment::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FRepFortMeshAttachment, AnimBP) == 0x000008, "Member 'FRepFortMeshAttachment::AnimBP' has a wrong offset!");

// ScriptStruct FortniteGame.VisibilityTestPoint
// 0x0018 (0x0018 - 0x0000)
struct FVisibilityTestPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Component;                                         // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVisibilityTestPoint) == 0x000008, "Wrong alignment on FVisibilityTestPoint");
static_assert(sizeof(FVisibilityTestPoint) == 0x000018, "Wrong size on FVisibilityTestPoint");
static_assert(offsetof(FVisibilityTestPoint, Location) == 0x000000, "Member 'FVisibilityTestPoint::Location' has a wrong offset!");
static_assert(offsetof(FVisibilityTestPoint, Component) == 0x000010, "Member 'FVisibilityTestPoint::Component' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilitySetHandle
// 0x0028 (0x0028 - 0x0000)
struct FFortAbilitySetHandle final
{
public:
	TWeakObjectPtr<class UAbilitySystemComponent> TargetAbilitySystemComponent;                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGameplayAbilitySpecHandle>     GrantedAbilityHandles;                             // 0x0008(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FActiveGameplayEffectHandle>    AppliedEffectHandles;                              // 0x0018(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAbilitySetHandle) == 0x000008, "Wrong alignment on FFortAbilitySetHandle");
static_assert(sizeof(FFortAbilitySetHandle) == 0x000028, "Wrong size on FFortAbilitySetHandle");
static_assert(offsetof(FFortAbilitySetHandle, TargetAbilitySystemComponent) == 0x000000, "Member 'FFortAbilitySetHandle::TargetAbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(FFortAbilitySetHandle, GrantedAbilityHandles) == 0x000008, "Member 'FFortAbilitySetHandle::GrantedAbilityHandles' has a wrong offset!");
static_assert(offsetof(FFortAbilitySetHandle, AppliedEffectHandles) == 0x000018, "Member 'FFortAbilitySetHandle::AppliedEffectHandles' has a wrong offset!");

// ScriptStruct FortniteGame.AppliedHomebaseData
// 0x0030 (0x0030 - 0x0000)
struct FAppliedHomebaseData final
{
public:
	class UAbilitySystemComponent*                Source;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Target;                                            // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    AppliedEffects;                                    // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FFortAbilitySetHandle>          AppliedAbilitySets;                                // 0x0020(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppliedHomebaseData) == 0x000008, "Wrong alignment on FAppliedHomebaseData");
static_assert(sizeof(FAppliedHomebaseData) == 0x000030, "Wrong size on FAppliedHomebaseData");
static_assert(offsetof(FAppliedHomebaseData, Source) == 0x000000, "Member 'FAppliedHomebaseData::Source' has a wrong offset!");
static_assert(offsetof(FAppliedHomebaseData, Target) == 0x000008, "Member 'FAppliedHomebaseData::Target' has a wrong offset!");
static_assert(offsetof(FAppliedHomebaseData, AppliedEffects) == 0x000010, "Member 'FAppliedHomebaseData::AppliedEffects' has a wrong offset!");
static_assert(offsetof(FAppliedHomebaseData, AppliedAbilitySets) == 0x000020, "Member 'FAppliedHomebaseData::AppliedAbilitySets' has a wrong offset!");

// ScriptStruct FortniteGame.FortSurfaceDamageRatioByAffiliationStats
// 0x0010 (0x0018 - 0x0008)
struct FFortSurfaceDamageRatioByAffiliationStats final : public FTableRowBase
{
public:
	float                                         Friendly;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Neutral;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Hostile;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSurfaceDamageRatioByAffiliationStats) == 0x000008, "Wrong alignment on FFortSurfaceDamageRatioByAffiliationStats");
static_assert(sizeof(FFortSurfaceDamageRatioByAffiliationStats) == 0x000018, "Wrong size on FFortSurfaceDamageRatioByAffiliationStats");
static_assert(offsetof(FFortSurfaceDamageRatioByAffiliationStats, Friendly) == 0x000008, "Member 'FFortSurfaceDamageRatioByAffiliationStats::Friendly' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioByAffiliationStats, Neutral) == 0x00000C, "Member 'FFortSurfaceDamageRatioByAffiliationStats::Neutral' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioByAffiliationStats, Hostile) == 0x000010, "Member 'FFortSurfaceDamageRatioByAffiliationStats::Hostile' has a wrong offset!");

// ScriptStruct FortniteGame.AccountIdAndScore
// 0x0018 (0x0018 - 0x0000)
struct FAccountIdAndScore final
{
public:
	class FString                                 AccountId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalScore;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalMatchBonus;                               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccountIdAndScore) == 0x000008, "Wrong alignment on FAccountIdAndScore");
static_assert(sizeof(FAccountIdAndScore) == 0x000018, "Wrong size on FAccountIdAndScore");
static_assert(offsetof(FAccountIdAndScore, AccountId) == 0x000000, "Member 'FAccountIdAndScore::AccountId' has a wrong offset!");
static_assert(offsetof(FAccountIdAndScore, TotalScore) == 0x000010, "Member 'FAccountIdAndScore::TotalScore' has a wrong offset!");
static_assert(offsetof(FAccountIdAndScore, bCriticalMatchBonus) == 0x000014, "Member 'FAccountIdAndScore::bCriticalMatchBonus' has a wrong offset!");

// ScriptStruct FortniteGame.TargetInfo
// 0x0040 (0x0040 - 0x0000)
struct FTargetInfo final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTargetInfo) == 0x000008, "Wrong alignment on FTargetInfo");
static_assert(sizeof(FTargetInfo) == 0x000040, "Wrong size on FTargetInfo");
static_assert(offsetof(FTargetInfo, SourceActor) == 0x000000, "Member 'FTargetInfo::SourceActor' has a wrong offset!");

// ScriptStruct FortniteGame.TargetHandler
// 0x0018 (0x0018 - 0x0000)
struct FTargetHandler final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTargetInfo>                    Targets;                                           // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTargetHandler) == 0x000008, "Wrong alignment on FTargetHandler");
static_assert(sizeof(FTargetHandler) == 0x000018, "Wrong size on FTargetHandler");
static_assert(offsetof(FTargetHandler, Targets) == 0x000008, "Member 'FTargetHandler::Targets' has a wrong offset!");

// ScriptStruct FortniteGame.StructRecord
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FStructRecord final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStructRecord) == 0x000004, "Wrong alignment on FStructRecord");
static_assert(sizeof(FStructRecord) == 0x000004, "Wrong size on FStructRecord");

// ScriptStruct FortniteGame.SaveStructFile
// 0x0010 (0x0010 - 0x0000)
struct FSaveStructFile final
{
public:
	TArray<struct FStructRecord>                  StructRecords;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveStructFile) == 0x000008, "Wrong alignment on FSaveStructFile");
static_assert(sizeof(FSaveStructFile) == 0x000010, "Wrong size on FSaveStructFile");
static_assert(offsetof(FSaveStructFile, StructRecords) == 0x000000, "Member 'FSaveStructFile::StructRecords' has a wrong offset!");

// ScriptStruct FortniteGame.FortFXAnimationInfoBase
// 0x0018 (0x0018 - 0x0000)
struct FFortFXAnimationInfoBase
{
public:
	class UCurveFloat*                            LerpCurve;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFXAnimationInfoBase) == 0x000008, "Wrong alignment on FFortFXAnimationInfoBase");
static_assert(sizeof(FFortFXAnimationInfoBase) == 0x000018, "Wrong size on FFortFXAnimationInfoBase");
static_assert(offsetof(FFortFXAnimationInfoBase, LerpCurve) == 0x000000, "Member 'FFortFXAnimationInfoBase::LerpCurve' has a wrong offset!");

// ScriptStruct FortniteGame.FortLinearColorCurveAnimationInfo
// 0x0010 (0x0028 - 0x0018)
struct FFortLinearColorCurveAnimationInfo : public FFortFXAnimationInfoBase
{
public:
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLinearColorCurveAnimationInfo) == 0x000008, "Wrong alignment on FFortLinearColorCurveAnimationInfo");
static_assert(sizeof(FFortLinearColorCurveAnimationInfo) == 0x000028, "Wrong size on FFortLinearColorCurveAnimationInfo");

// ScriptStruct FortniteGame.FortPlayerSurveyAnalyticsAnswer
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFortPlayerSurveyAnalyticsAnswer final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyAnalyticsAnswer) == 0x000008, "Wrong alignment on FFortPlayerSurveyAnalyticsAnswer");
static_assert(sizeof(FFortPlayerSurveyAnalyticsAnswer) == 0x000020, "Wrong size on FFortPlayerSurveyAnalyticsAnswer");

// ScriptStruct FortniteGame.FortPlayerSurveyAnalyticsSurveyResponse
// 0x0048 (0x0048 - 0x0000)
struct FFortPlayerSurveyAnalyticsSurveyResponse final
{
public:
	class FString                                 SurveyID;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPlayerSurveyAnalyticsFinishReason        FinishReason;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     MetaData;                                          // 0x0018(0x0020)(NativeAccessSpecifierPublic)
	TArray<struct FFortPlayerSurveyAnalyticsAnswer> Answers;                                           // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnalyticsSurveyResponse) == 0x000008, "Wrong alignment on FFortPlayerSurveyAnalyticsSurveyResponse");
static_assert(sizeof(FFortPlayerSurveyAnalyticsSurveyResponse) == 0x000048, "Wrong size on FFortPlayerSurveyAnalyticsSurveyResponse");
static_assert(offsetof(FFortPlayerSurveyAnalyticsSurveyResponse, SurveyID) == 0x000000, "Member 'FFortPlayerSurveyAnalyticsSurveyResponse::SurveyID' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyAnalyticsSurveyResponse, FinishReason) == 0x000010, "Member 'FFortPlayerSurveyAnalyticsSurveyResponse::FinishReason' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyAnalyticsSurveyResponse, MetaData) == 0x000018, "Member 'FFortPlayerSurveyAnalyticsSurveyResponse::MetaData' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyAnalyticsSurveyResponse, Answers) == 0x000038, "Member 'FFortPlayerSurveyAnalyticsSurveyResponse::Answers' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_MountedTurret
// 0x0010 (0x0010 - 0x0000)
struct FFortAnimInput_MountedTurret final
{
public:
	bool                                          bIsUsingMountedTurret;                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimingYaw;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimingPitch;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PedalScaler;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_MountedTurret) == 0x000004, "Wrong alignment on FFortAnimInput_MountedTurret");
static_assert(sizeof(FFortAnimInput_MountedTurret) == 0x000010, "Wrong size on FFortAnimInput_MountedTurret");
static_assert(offsetof(FFortAnimInput_MountedTurret, bIsUsingMountedTurret) == 0x000000, "Member 'FFortAnimInput_MountedTurret::bIsUsingMountedTurret' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_MountedTurret, AimingYaw) == 0x000004, "Member 'FFortAnimInput_MountedTurret::AimingYaw' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_MountedTurret, AimingPitch) == 0x000008, "Member 'FFortAnimInput_MountedTurret::AimingPitch' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_MountedTurret, PedalScaler) == 0x00000C, "Member 'FFortAnimInput_MountedTurret::PedalScaler' has a wrong offset!");

// ScriptStruct FortniteGame.CharmPreviewEntry
// 0x0070 (0x0070 - 0x0000)
struct FCharmPreviewEntry final
{
public:
	TSoftObjectPtr<class UObject>                 PreviewObject;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PreviewTransform;                                  // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bPreviewUsingVehicleShader : 1;                    // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharmPreviewEntry) == 0x000010, "Wrong alignment on FCharmPreviewEntry");
static_assert(sizeof(FCharmPreviewEntry) == 0x000070, "Wrong size on FCharmPreviewEntry");
static_assert(offsetof(FCharmPreviewEntry, PreviewObject) == 0x000000, "Member 'FCharmPreviewEntry::PreviewObject' has a wrong offset!");
static_assert(offsetof(FCharmPreviewEntry, PreviewTransform) == 0x000030, "Member 'FCharmPreviewEntry::PreviewTransform' has a wrong offset!");

// ScriptStruct FortniteGame.CharmSlotMetadata
// 0x0058 (0x0058 - 0x0000)
struct FCharmSlotMetadata final
{
public:
	struct FGameplayTagQuery                      MatchCriteria;                                     // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FCharmPreviewEntry>             PreviewList;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharmSlotMetadata) == 0x000008, "Wrong alignment on FCharmSlotMetadata");
static_assert(sizeof(FCharmSlotMetadata) == 0x000058, "Wrong size on FCharmSlotMetadata");
static_assert(offsetof(FCharmSlotMetadata, MatchCriteria) == 0x000000, "Member 'FCharmSlotMetadata::MatchCriteria' has a wrong offset!");
static_assert(offsetof(FCharmSlotMetadata, PreviewList) == 0x000048, "Member 'FCharmSlotMetadata::PreviewList' has a wrong offset!");

// ScriptStruct FortniteGame.FortCloudSaveRecordInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortCloudSaveRecordInfo final
{
public:
	int32                                         RecordIndex;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArchiveNumber;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecordFilename;                                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCloudSaveRecordInfo) == 0x000008, "Wrong alignment on FFortCloudSaveRecordInfo");
static_assert(sizeof(FFortCloudSaveRecordInfo) == 0x000018, "Wrong size on FFortCloudSaveRecordInfo");
static_assert(offsetof(FFortCloudSaveRecordInfo, RecordIndex) == 0x000000, "Member 'FFortCloudSaveRecordInfo::RecordIndex' has a wrong offset!");
static_assert(offsetof(FFortCloudSaveRecordInfo, ArchiveNumber) == 0x000004, "Member 'FFortCloudSaveRecordInfo::ArchiveNumber' has a wrong offset!");
static_assert(offsetof(FFortCloudSaveRecordInfo, RecordFilename) == 0x000008, "Member 'FFortCloudSaveRecordInfo::RecordFilename' has a wrong offset!");

// ScriptStruct FortniteGame.FortCloudSaveInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortCloudSaveInfo final
{
public:
	int32                                         SaveCount;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortCloudSaveRecordInfo>       SavedRecords;                                      // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCloudSaveInfo) == 0x000008, "Wrong alignment on FFortCloudSaveInfo");
static_assert(sizeof(FFortCloudSaveInfo) == 0x000018, "Wrong size on FFortCloudSaveInfo");
static_assert(offsetof(FFortCloudSaveInfo, SaveCount) == 0x000000, "Member 'FFortCloudSaveInfo::SaveCount' has a wrong offset!");
static_assert(offsetof(FFortCloudSaveInfo, SavedRecords) == 0x000008, "Member 'FFortCloudSaveInfo::SavedRecords' has a wrong offset!");

// ScriptStruct FortniteGame.AccountIdAndMatchEndData
// 0x0180 (0x0180 - 0x0000)
struct FAccountIdAndMatchEndData final
{
public:
	class FString                                 AccountId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortQuestObjectiveCompletion>  Advance;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortQuestEarnedBadgeData>      EarnedBadgeData;                                   // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EarnedItemCaches;                                  // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TotalScore;                                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalMatchBonus;                               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumMissionPoints;                                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TheaterNum;                                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpProfileChangeRequest               TheaterItemUpdate;                                 // 0x0050(0x0058)(NativeAccessSpecifierPublic)
	int32                                         OutpostNum;                                        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMcpProfileChangeRequest               OutpostItemUpdate;                                 // 0x00B0(0x0058)(NativeAccessSpecifierPublic)
	class FString                                 OutpostId;                                         // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortOutpostCoreInfo                   OutpostInfo;                                       // 0x0118(0x0028)(NativeAccessSpecifierPublic)
	class FString                                 DeployableBaseItemId;                              // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortCloudSaveInfo                     CloudSaveInfo;                                     // 0x0150(0x0018)(NativeAccessSpecifierPublic)
	class FString                                 LockCode;                                          // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbandoning;                                       // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccountIdAndMatchEndData) == 0x000008, "Wrong alignment on FAccountIdAndMatchEndData");
static_assert(sizeof(FAccountIdAndMatchEndData) == 0x000180, "Wrong size on FAccountIdAndMatchEndData");
static_assert(offsetof(FAccountIdAndMatchEndData, AccountId) == 0x000000, "Member 'FAccountIdAndMatchEndData::AccountId' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, Advance) == 0x000010, "Member 'FAccountIdAndMatchEndData::Advance' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, EarnedBadgeData) == 0x000020, "Member 'FAccountIdAndMatchEndData::EarnedBadgeData' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, EarnedItemCaches) == 0x000030, "Member 'FAccountIdAndMatchEndData::EarnedItemCaches' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, TotalScore) == 0x000040, "Member 'FAccountIdAndMatchEndData::TotalScore' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, bCriticalMatchBonus) == 0x000044, "Member 'FAccountIdAndMatchEndData::bCriticalMatchBonus' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, NumMissionPoints) == 0x000048, "Member 'FAccountIdAndMatchEndData::NumMissionPoints' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, TheaterNum) == 0x00004C, "Member 'FAccountIdAndMatchEndData::TheaterNum' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, TheaterItemUpdate) == 0x000050, "Member 'FAccountIdAndMatchEndData::TheaterItemUpdate' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, OutpostNum) == 0x0000A8, "Member 'FAccountIdAndMatchEndData::OutpostNum' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, OutpostItemUpdate) == 0x0000B0, "Member 'FAccountIdAndMatchEndData::OutpostItemUpdate' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, OutpostId) == 0x000108, "Member 'FAccountIdAndMatchEndData::OutpostId' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, OutpostInfo) == 0x000118, "Member 'FAccountIdAndMatchEndData::OutpostInfo' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, DeployableBaseItemId) == 0x000140, "Member 'FAccountIdAndMatchEndData::DeployableBaseItemId' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, CloudSaveInfo) == 0x000150, "Member 'FAccountIdAndMatchEndData::CloudSaveInfo' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, LockCode) == 0x000168, "Member 'FAccountIdAndMatchEndData::LockCode' has a wrong offset!");
static_assert(offsetof(FAccountIdAndMatchEndData, bAbandoning) == 0x000178, "Member 'FAccountIdAndMatchEndData::bAbandoning' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootNotification
// 0x0040 (0x0040 - 0x0000)
struct FFortLootNotification final
{
public:
	class FString                                 LootSource;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootSourceInstance;                                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         LootGranted;                                       // 0x0020(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootNotification) == 0x000008, "Wrong alignment on FFortLootNotification");
static_assert(sizeof(FFortLootNotification) == 0x000040, "Wrong size on FFortLootNotification");
static_assert(offsetof(FFortLootNotification, LootSource) == 0x000000, "Member 'FFortLootNotification::LootSource' has a wrong offset!");
static_assert(offsetof(FFortLootNotification, LootSourceInstance) == 0x000010, "Member 'FFortLootNotification::LootSourceInstance' has a wrong offset!");
static_assert(offsetof(FFortLootNotification, LootGranted) == 0x000020, "Member 'FFortLootNotification::LootGranted' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaRewardItemReference
// 0x0080 (0x0080 - 0x0000)
struct FAthenaRewardItemReference final
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TemplateId;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChallengeGiftBoxData                  RewardGiftBox;                                     // 0x0040(0x0038)(Edit, NativeAccessSpecifierPublic)
	bool                                          IsChaseReward;                                     // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaRewardItemType                         RewardType;                                        // 0x0079(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaRewardItemReference) == 0x000008, "Wrong alignment on FAthenaRewardItemReference");
static_assert(sizeof(FAthenaRewardItemReference) == 0x000080, "Wrong size on FAthenaRewardItemReference");
static_assert(offsetof(FAthenaRewardItemReference, ItemDefinition) == 0x000000, "Member 'FAthenaRewardItemReference::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FAthenaRewardItemReference, TemplateId) == 0x000028, "Member 'FAthenaRewardItemReference::TemplateId' has a wrong offset!");
static_assert(offsetof(FAthenaRewardItemReference, Quantity) == 0x000038, "Member 'FAthenaRewardItemReference::Quantity' has a wrong offset!");
static_assert(offsetof(FAthenaRewardItemReference, RewardGiftBox) == 0x000040, "Member 'FAthenaRewardItemReference::RewardGiftBox' has a wrong offset!");
static_assert(offsetof(FAthenaRewardItemReference, IsChaseReward) == 0x000078, "Member 'FAthenaRewardItemReference::IsChaseReward' has a wrong offset!");
static_assert(offsetof(FAthenaRewardItemReference, RewardType) == 0x000079, "Member 'FAthenaRewardItemReference::RewardType' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaRewardScheduleLevel
// 0x0010 (0x0010 - 0x0000)
struct FAthenaRewardScheduleLevel final
{
public:
	TArray<struct FAthenaRewardItemReference>     Rewards;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaRewardScheduleLevel) == 0x000008, "Wrong alignment on FAthenaRewardScheduleLevel");
static_assert(sizeof(FAthenaRewardScheduleLevel) == 0x000010, "Wrong size on FAthenaRewardScheduleLevel");
static_assert(offsetof(FAthenaRewardScheduleLevel, Rewards) == 0x000000, "Member 'FAthenaRewardScheduleLevel::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.DelayedQuickBarAction
// 0x0034 (0x0040 - 0x000C)
struct FDelayedQuickBarAction final : public FFastArraySerializerItem
{
public:
	uint32                                        ActionId;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDelayedQuickBarAction                    Action;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ItemGuid;                                          // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ItemDefinitionAssetId;                             // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuickBars                                QuickBarType;                                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuickBarSlot;                                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceExecution;                                   // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelayedQuickBarAction) == 0x000004, "Wrong alignment on FDelayedQuickBarAction");
static_assert(sizeof(FDelayedQuickBarAction) == 0x000040, "Wrong size on FDelayedQuickBarAction");
static_assert(offsetof(FDelayedQuickBarAction, ActionId) == 0x00000C, "Member 'FDelayedQuickBarAction::ActionId' has a wrong offset!");
static_assert(offsetof(FDelayedQuickBarAction, Action) == 0x000010, "Member 'FDelayedQuickBarAction::Action' has a wrong offset!");
static_assert(offsetof(FDelayedQuickBarAction, ItemGuid) == 0x000014, "Member 'FDelayedQuickBarAction::ItemGuid' has a wrong offset!");
static_assert(offsetof(FDelayedQuickBarAction, ItemDefinitionAssetId) == 0x000024, "Member 'FDelayedQuickBarAction::ItemDefinitionAssetId' has a wrong offset!");
static_assert(offsetof(FDelayedQuickBarAction, QuickBarType) == 0x000034, "Member 'FDelayedQuickBarAction::QuickBarType' has a wrong offset!");
static_assert(offsetof(FDelayedQuickBarAction, QuickBarSlot) == 0x000038, "Member 'FDelayedQuickBarAction::QuickBarSlot' has a wrong offset!");
static_assert(offsetof(FDelayedQuickBarAction, bForceExecution) == 0x00003C, "Member 'FDelayedQuickBarAction::bForceExecution' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaVehicleOverride
// 0x0060 (0x0060 - 0x0000)
struct FAthenaVehicleOverride final
{
public:
	class FString                                 RequiredCalendarEvent;                             // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DefaultVehicleClass;                               // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideVehicleClass;                              // 0x0038(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaVehicleOverride) == 0x000008, "Wrong alignment on FAthenaVehicleOverride");
static_assert(sizeof(FAthenaVehicleOverride) == 0x000060, "Wrong size on FAthenaVehicleOverride");
static_assert(offsetof(FAthenaVehicleOverride, RequiredCalendarEvent) == 0x000000, "Member 'FAthenaVehicleOverride::RequiredCalendarEvent' has a wrong offset!");
static_assert(offsetof(FAthenaVehicleOverride, DefaultVehicleClass) == 0x000010, "Member 'FAthenaVehicleOverride::DefaultVehicleClass' has a wrong offset!");
static_assert(offsetof(FAthenaVehicleOverride, OverrideVehicleClass) == 0x000038, "Member 'FAthenaVehicleOverride::OverrideVehicleClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlaylistCuratedContent
// 0x0010 (0x0010 - 0x0000)
struct FFortPlaylistCuratedContent final
{
public:
	TArray<class FString>                         CuratedLinkCodes;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlaylistCuratedContent) == 0x000008, "Wrong alignment on FFortPlaylistCuratedContent");
static_assert(sizeof(FFortPlaylistCuratedContent) == 0x000010, "Wrong size on FFortPlaylistCuratedContent");
static_assert(offsetof(FFortPlaylistCuratedContent, CuratedLinkCodes) == 0x000000, "Member 'FFortPlaylistCuratedContent::CuratedLinkCodes' has a wrong offset!");

// ScriptStruct FortniteGame.TileCompInterpData
// 0x0018 (0x0018 - 0x0000)
struct FTileCompInterpData final
{
public:
	struct FVector                                InitialTranslation;                                // 0x0000(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DesiredTranslation;                                // 0x000C(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileCompInterpData) == 0x000004, "Wrong alignment on FTileCompInterpData");
static_assert(sizeof(FTileCompInterpData) == 0x000018, "Wrong size on FTileCompInterpData");
static_assert(offsetof(FTileCompInterpData, InitialTranslation) == 0x000000, "Member 'FTileCompInterpData::InitialTranslation' has a wrong offset!");
static_assert(offsetof(FTileCompInterpData, DesiredTranslation) == 0x00000C, "Member 'FTileCompInterpData::DesiredTranslation' has a wrong offset!");

// ScriptStruct FortniteGame.AuxiliaryEditTileMeshData
// 0x0020 (0x0020 - 0x0000)
struct FAuxiliaryEditTileMeshData final
{
public:
	class UStaticMesh*                            TileMesh;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TileTexture;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRot;                                       // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAuxiliaryEditTileMeshData) == 0x000008, "Wrong alignment on FAuxiliaryEditTileMeshData");
static_assert(sizeof(FAuxiliaryEditTileMeshData) == 0x000020, "Wrong size on FAuxiliaryEditTileMeshData");
static_assert(offsetof(FAuxiliaryEditTileMeshData, TileMesh) == 0x000000, "Member 'FAuxiliaryEditTileMeshData::TileMesh' has a wrong offset!");
static_assert(offsetof(FAuxiliaryEditTileMeshData, TileTexture) == 0x000008, "Member 'FAuxiliaryEditTileMeshData::TileTexture' has a wrong offset!");
static_assert(offsetof(FAuxiliaryEditTileMeshData, RelativeRot) == 0x000010, "Member 'FAuxiliaryEditTileMeshData::RelativeRot' has a wrong offset!");

// ScriptStruct FortniteGame.ChoiceDataEntry
// 0x0050 (0x0050 - 0x0000)
struct FChoiceDataEntry final
{
public:
	class FText                                   ButtonText;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ButtonDescription;                                 // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ConfirmText;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireConfirmation;                              // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseAfterSelection;                              // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChoiceDataEntry) == 0x000008, "Wrong alignment on FChoiceDataEntry");
static_assert(sizeof(FChoiceDataEntry) == 0x000050, "Wrong size on FChoiceDataEntry");
static_assert(offsetof(FChoiceDataEntry, ButtonText) == 0x000000, "Member 'FChoiceDataEntry::ButtonText' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, ButtonDescription) == 0x000018, "Member 'FChoiceDataEntry::ButtonDescription' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, ConfirmText) == 0x000030, "Member 'FChoiceDataEntry::ConfirmText' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, bEnabled) == 0x000048, "Member 'FChoiceDataEntry::bEnabled' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, bRequireConfirmation) == 0x000049, "Member 'FChoiceDataEntry::bRequireConfirmation' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, bCloseAfterSelection) == 0x00004A, "Member 'FChoiceDataEntry::bCloseAfterSelection' has a wrong offset!");

// ScriptStruct FortniteGame.FortDialogExternalLatentActionHandle
// 0x0004 (0x0004 - 0x0000)
struct FFortDialogExternalLatentActionHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortDialogExternalLatentActionHandle) == 0x000004, "Wrong alignment on FFortDialogExternalLatentActionHandle");
static_assert(sizeof(FFortDialogExternalLatentActionHandle) == 0x000004, "Wrong size on FFortDialogExternalLatentActionHandle");
static_assert(offsetof(FFortDialogExternalLatentActionHandle, Handle) == 0x000000, "Member 'FFortDialogExternalLatentActionHandle::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.FortTierCollectionLayoutOutput
// 0x0050 (0x0050 - 0x0000)
struct FFortTierCollectionLayoutOutput final
{
public:
	class FName                                   SpawnCollectionName;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DifficultyRowName;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModifierProgressionName;                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveDifficultyMod;                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortBadgeItemDefinition*>       RewardBadges;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           StartTierLootTierGroups;                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           WaveCompleteLootTierGroups;                        // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTierCollectionLayoutOutput) == 0x000008, "Wrong alignment on FFortTierCollectionLayoutOutput");
static_assert(sizeof(FFortTierCollectionLayoutOutput) == 0x000050, "Wrong size on FFortTierCollectionLayoutOutput");
static_assert(offsetof(FFortTierCollectionLayoutOutput, SpawnCollectionName) == 0x000000, "Member 'FFortTierCollectionLayoutOutput::SpawnCollectionName' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, DifficultyRowName) == 0x000008, "Member 'FFortTierCollectionLayoutOutput::DifficultyRowName' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, ModifierProgressionName) == 0x000010, "Member 'FFortTierCollectionLayoutOutput::ModifierProgressionName' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, AdditiveDifficultyMod) == 0x000018, "Member 'FFortTierCollectionLayoutOutput::AdditiveDifficultyMod' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, RewardBadges) == 0x000020, "Member 'FFortTierCollectionLayoutOutput::RewardBadges' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, StartTierLootTierGroups) == 0x000030, "Member 'FFortTierCollectionLayoutOutput::StartTierLootTierGroups' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, WaveCompleteLootTierGroups) == 0x000040, "Member 'FFortTierCollectionLayoutOutput::WaveCompleteLootTierGroups' has a wrong offset!");

// ScriptStruct FortniteGame.SupplyDropZoneBasedSpawnData
// 0x0028 (0x0028 - 0x0000)
struct FSupplyDropZoneBasedSpawnData final
{
public:
	TArray<class AFortAthenaSupplyDrop*>          SpawnedSupplyDrops;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumDropsRemainingInWave;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextWaveSpawnTime;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextSpawnTime;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaGamePhase                              CurrGamePhase;                                     // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrSubPhase;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSupplyDropsSpawnedInSubPhase;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupplyDropZoneBasedSpawnData) == 0x000008, "Wrong alignment on FSupplyDropZoneBasedSpawnData");
static_assert(sizeof(FSupplyDropZoneBasedSpawnData) == 0x000028, "Wrong size on FSupplyDropZoneBasedSpawnData");
static_assert(offsetof(FSupplyDropZoneBasedSpawnData, SpawnedSupplyDrops) == 0x000000, "Member 'FSupplyDropZoneBasedSpawnData::SpawnedSupplyDrops' has a wrong offset!");
static_assert(offsetof(FSupplyDropZoneBasedSpawnData, NumDropsRemainingInWave) == 0x000010, "Member 'FSupplyDropZoneBasedSpawnData::NumDropsRemainingInWave' has a wrong offset!");
static_assert(offsetof(FSupplyDropZoneBasedSpawnData, NextWaveSpawnTime) == 0x000014, "Member 'FSupplyDropZoneBasedSpawnData::NextWaveSpawnTime' has a wrong offset!");
static_assert(offsetof(FSupplyDropZoneBasedSpawnData, NextSpawnTime) == 0x000018, "Member 'FSupplyDropZoneBasedSpawnData::NextSpawnTime' has a wrong offset!");
static_assert(offsetof(FSupplyDropZoneBasedSpawnData, CurrGamePhase) == 0x00001C, "Member 'FSupplyDropZoneBasedSpawnData::CurrGamePhase' has a wrong offset!");
static_assert(offsetof(FSupplyDropZoneBasedSpawnData, CurrSubPhase) == 0x000020, "Member 'FSupplyDropZoneBasedSpawnData::CurrSubPhase' has a wrong offset!");
static_assert(offsetof(FSupplyDropZoneBasedSpawnData, TotalSupplyDropsSpawnedInSubPhase) == 0x000024, "Member 'FSupplyDropZoneBasedSpawnData::TotalSupplyDropsSpawnedInSubPhase' has a wrong offset!");

// ScriptStruct FortniteGame.SupplyDropItemDeliverySpawnData
// 0x0020 (0x0020 - 0x0000)
struct FSupplyDropItemDeliverySpawnData final
{
public:
	int32                                         NumItemsToDeliver;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 QueuedSpawnTimes;                                  // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         NextSpawnTime;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumInitialSpawns;                                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupplyDropItemDeliverySpawnData) == 0x000008, "Wrong alignment on FSupplyDropItemDeliverySpawnData");
static_assert(sizeof(FSupplyDropItemDeliverySpawnData) == 0x000020, "Wrong size on FSupplyDropItemDeliverySpawnData");
static_assert(offsetof(FSupplyDropItemDeliverySpawnData, NumItemsToDeliver) == 0x000000, "Member 'FSupplyDropItemDeliverySpawnData::NumItemsToDeliver' has a wrong offset!");
static_assert(offsetof(FSupplyDropItemDeliverySpawnData, QueuedSpawnTimes) == 0x000008, "Member 'FSupplyDropItemDeliverySpawnData::QueuedSpawnTimes' has a wrong offset!");
static_assert(offsetof(FSupplyDropItemDeliverySpawnData, NextSpawnTime) == 0x000018, "Member 'FSupplyDropItemDeliverySpawnData::NextSpawnTime' has a wrong offset!");
static_assert(offsetof(FSupplyDropItemDeliverySpawnData, NumInitialSpawns) == 0x00001C, "Member 'FSupplyDropItemDeliverySpawnData::NumInitialSpawns' has a wrong offset!");

// ScriptStruct FortniteGame.SupplyDropSpawnData
// 0x0050 (0x0050 - 0x0000)
struct FSupplyDropSpawnData final
{
public:
	class UFortSupplyDropInfo*                    SupplyDropInfo;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSupplyDropZoneBasedSpawnData          ZoneBasedData;                                     // 0x0008(0x0028)(NativeAccessSpecifierPublic)
	struct FSupplyDropItemDeliverySpawnData       ItemDeliveryData;                                  // 0x0030(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupplyDropSpawnData) == 0x000008, "Wrong alignment on FSupplyDropSpawnData");
static_assert(sizeof(FSupplyDropSpawnData) == 0x000050, "Wrong size on FSupplyDropSpawnData");
static_assert(offsetof(FSupplyDropSpawnData, SupplyDropInfo) == 0x000000, "Member 'FSupplyDropSpawnData::SupplyDropInfo' has a wrong offset!");
static_assert(offsetof(FSupplyDropSpawnData, ZoneBasedData) == 0x000008, "Member 'FSupplyDropSpawnData::ZoneBasedData' has a wrong offset!");
static_assert(offsetof(FSupplyDropSpawnData, ItemDeliveryData) == 0x000030, "Member 'FSupplyDropSpawnData::ItemDeliveryData' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPopupWidgetData
// 0x01D0 (0x01D0 - 0x0000)
struct FFortMissionPopupWidgetData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bShowDescription;                                  // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DescriptionIcon;                                   // 0x0038(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            AvailableIcon;                                     // 0x00C0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UnavailableIcon;                                   // 0x0148(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionPopupWidgetData) == 0x000008, "Wrong alignment on FFortMissionPopupWidgetData");
static_assert(sizeof(FFortMissionPopupWidgetData) == 0x0001D0, "Wrong size on FFortMissionPopupWidgetData");
static_assert(offsetof(FFortMissionPopupWidgetData, DisplayName) == 0x000000, "Member 'FFortMissionPopupWidgetData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortMissionPopupWidgetData, bShowDescription) == 0x000018, "Member 'FFortMissionPopupWidgetData::bShowDescription' has a wrong offset!");
static_assert(offsetof(FFortMissionPopupWidgetData, Description) == 0x000020, "Member 'FFortMissionPopupWidgetData::Description' has a wrong offset!");
static_assert(offsetof(FFortMissionPopupWidgetData, DescriptionIcon) == 0x000038, "Member 'FFortMissionPopupWidgetData::DescriptionIcon' has a wrong offset!");
static_assert(offsetof(FFortMissionPopupWidgetData, AvailableIcon) == 0x0000C0, "Member 'FFortMissionPopupWidgetData::AvailableIcon' has a wrong offset!");
static_assert(offsetof(FFortMissionPopupWidgetData, UnavailableIcon) == 0x000148, "Member 'FFortMissionPopupWidgetData::UnavailableIcon' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnalyticsEventAttribute
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFortAnalyticsEventAttribute final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnalyticsEventAttribute) == 0x000008, "Wrong alignment on FFortAnalyticsEventAttribute");
static_assert(sizeof(FFortAnalyticsEventAttribute) == 0x000020, "Wrong size on FFortAnalyticsEventAttribute");

// ScriptStruct FortniteGame.FortPendingStoppedEncounterData
// 0x0010 (0x0010 - 0x0000)
struct FFortPendingStoppedEncounterData final
{
public:
	class UFortAIEncounterInfo*                   Encounter;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortObjectiveStatus                          ObjectiveStatus;                                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDestroyAI;                                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEncounterCompletedSuccessfully;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPendingStoppedEncounterData) == 0x000008, "Wrong alignment on FFortPendingStoppedEncounterData");
static_assert(sizeof(FFortPendingStoppedEncounterData) == 0x000010, "Wrong size on FFortPendingStoppedEncounterData");
static_assert(offsetof(FFortPendingStoppedEncounterData, Encounter) == 0x000000, "Member 'FFortPendingStoppedEncounterData::Encounter' has a wrong offset!");
static_assert(offsetof(FFortPendingStoppedEncounterData, ObjectiveStatus) == 0x000008, "Member 'FFortPendingStoppedEncounterData::ObjectiveStatus' has a wrong offset!");
static_assert(offsetof(FFortPendingStoppedEncounterData, bForceDestroyAI) == 0x000009, "Member 'FFortPendingStoppedEncounterData::bForceDestroyAI' has a wrong offset!");
static_assert(offsetof(FFortPendingStoppedEncounterData, bEncounterCompletedSuccessfully) == 0x00000A, "Member 'FFortPendingStoppedEncounterData::bEncounterCompletedSuccessfully' has a wrong offset!");

// ScriptStruct FortniteGame.AsyncTaskResult
// 0x0030 (0x0030 - 0x0000)
struct FAsyncTaskResult final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorCode;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   ErrorMessage;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAsyncTaskResult) == 0x000008, "Wrong alignment on FAsyncTaskResult");
static_assert(sizeof(FAsyncTaskResult) == 0x000030, "Wrong size on FAsyncTaskResult");
static_assert(offsetof(FAsyncTaskResult, bSucceeded) == 0x000000, "Member 'FAsyncTaskResult::bSucceeded' has a wrong offset!");
static_assert(offsetof(FAsyncTaskResult, ErrorCode) == 0x000008, "Member 'FAsyncTaskResult::ErrorCode' has a wrong offset!");
static_assert(offsetof(FAsyncTaskResult, ErrorMessage) == 0x000018, "Member 'FAsyncTaskResult::ErrorMessage' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnGroupCap
// 0x0020 (0x0020 - 0x0000)
struct FFortAIEncounterSpawnGroupCap final
{
public:
	struct FCurveTableRowHandle                   MinSpawnGroupNumberCap;                            // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxSpawnGroupNumberCap;                            // 0x0010(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnGroupCap) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnGroupCap");
static_assert(sizeof(FFortAIEncounterSpawnGroupCap) == 0x000020, "Wrong size on FFortAIEncounterSpawnGroupCap");
static_assert(offsetof(FFortAIEncounterSpawnGroupCap, MinSpawnGroupNumberCap) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCap::MinSpawnGroupNumberCap' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCap, MaxSpawnGroupNumberCap) == 0x000010, "Member 'FFortAIEncounterSpawnGroupCap::MaxSpawnGroupNumberCap' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnGroupCapsCategory
// 0x0140 (0x0140 - 0x0000)
struct FFortAIEncounterSpawnGroupCapsCategory final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bApplyGroupPopulationCurveToCategoryMax;           // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   InitialSpawnGroupAvailabilityDelaySeconds;         // 0x0050(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   SpawnGroupAvailabilityDelaySeconds;                // 0x0060(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      UnlockingTagQuery;                                 // 0x0070(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterSpawnGroupCap>  SpawnGroupCapsPerPlayerCount;                      // 0x00B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         InitialSpawnGroupAvailabilityTime;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumActiveCategorySpawnGroups;                      // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 SpawnGroupAvailabilityTimes;                       // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumSpawnGroupAvailable;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CategorySource;                                    // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x50];                                      // 0x00F0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterSpawnGroupCapsCategory) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnGroupCapsCategory");
static_assert(sizeof(FFortAIEncounterSpawnGroupCapsCategory) == 0x000140, "Wrong size on FFortAIEncounterSpawnGroupCapsCategory");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, TagQuery) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCapsCategory::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, bApplyGroupPopulationCurveToCategoryMax) == 0x000048, "Member 'FFortAIEncounterSpawnGroupCapsCategory::bApplyGroupPopulationCurveToCategoryMax' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, InitialSpawnGroupAvailabilityDelaySeconds) == 0x000050, "Member 'FFortAIEncounterSpawnGroupCapsCategory::InitialSpawnGroupAvailabilityDelaySeconds' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, SpawnGroupAvailabilityDelaySeconds) == 0x000060, "Member 'FFortAIEncounterSpawnGroupCapsCategory::SpawnGroupAvailabilityDelaySeconds' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, UnlockingTagQuery) == 0x000070, "Member 'FFortAIEncounterSpawnGroupCapsCategory::UnlockingTagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, SpawnGroupCapsPerPlayerCount) == 0x0000B8, "Member 'FFortAIEncounterSpawnGroupCapsCategory::SpawnGroupCapsPerPlayerCount' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, InitialSpawnGroupAvailabilityTime) == 0x0000C8, "Member 'FFortAIEncounterSpawnGroupCapsCategory::InitialSpawnGroupAvailabilityTime' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, NumActiveCategorySpawnGroups) == 0x0000CC, "Member 'FFortAIEncounterSpawnGroupCapsCategory::NumActiveCategorySpawnGroups' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, SpawnGroupAvailabilityTimes) == 0x0000D0, "Member 'FFortAIEncounterSpawnGroupCapsCategory::SpawnGroupAvailabilityTimes' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, NumSpawnGroupAvailable) == 0x0000E0, "Member 'FFortAIEncounterSpawnGroupCapsCategory::NumSpawnGroupAvailable' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, CategorySource) == 0x0000E8, "Member 'FFortAIEncounterSpawnGroupCapsCategory::CategorySource' has a wrong offset!");

// ScriptStruct FortniteGame.FortVehicleAudioOneshotGate
// 0x0028 (0x0028 - 0x0000)
struct FFortVehicleAudioOneshotGate final
{
public:
	float                                         GateValue;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleAudioTriggerDir                       Direction;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FadeWhenOutsideGate;                               // 0x0005(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeSinceTrigger;                               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterruptFadeTime;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        AudioComp;                                         // 0x0020(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortVehicleAudioOneshotGate) == 0x000008, "Wrong alignment on FFortVehicleAudioOneshotGate");
static_assert(sizeof(FFortVehicleAudioOneshotGate) == 0x000028, "Wrong size on FFortVehicleAudioOneshotGate");
static_assert(offsetof(FFortVehicleAudioOneshotGate, GateValue) == 0x000000, "Member 'FFortVehicleAudioOneshotGate::GateValue' has a wrong offset!");
static_assert(offsetof(FFortVehicleAudioOneshotGate, Direction) == 0x000004, "Member 'FFortVehicleAudioOneshotGate::Direction' has a wrong offset!");
static_assert(offsetof(FFortVehicleAudioOneshotGate, FadeWhenOutsideGate) == 0x000005, "Member 'FFortVehicleAudioOneshotGate::FadeWhenOutsideGate' has a wrong offset!");
static_assert(offsetof(FFortVehicleAudioOneshotGate, Sound) == 0x000008, "Member 'FFortVehicleAudioOneshotGate::Sound' has a wrong offset!");
static_assert(offsetof(FFortVehicleAudioOneshotGate, MinTimeSinceTrigger) == 0x000010, "Member 'FFortVehicleAudioOneshotGate::MinTimeSinceTrigger' has a wrong offset!");
static_assert(offsetof(FFortVehicleAudioOneshotGate, InterruptFadeTime) == 0x000014, "Member 'FFortVehicleAudioOneshotGate::InterruptFadeTime' has a wrong offset!");
static_assert(offsetof(FFortVehicleAudioOneshotGate, AudioComp) == 0x000020, "Member 'FFortVehicleAudioOneshotGate::AudioComp' has a wrong offset!");

// ScriptStruct FortniteGame.QuantizedBuildingAttribute
// 0x0004 (0x0004 - 0x0000)
struct FQuantizedBuildingAttribute final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuantizedBuildingAttribute) == 0x000004, "Wrong alignment on FQuantizedBuildingAttribute");
static_assert(sizeof(FQuantizedBuildingAttribute) == 0x000004, "Wrong size on FQuantizedBuildingAttribute");
static_assert(offsetof(FQuantizedBuildingAttribute, Value) == 0x000000, "Member 'FQuantizedBuildingAttribute::Value' has a wrong offset!");

// ScriptStruct FortniteGame.AttributeModifierInfo
// 0x0020 (0x0020 - 0x0000)
struct FAttributeModifierInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayEffect*                        InstantGEs;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttributeModifierInfo) == 0x000008, "Wrong alignment on FAttributeModifierInfo");
static_assert(sizeof(FAttributeModifierInfo) == 0x000020, "Wrong size on FAttributeModifierInfo");
static_assert(offsetof(FAttributeModifierInfo, InstantGEs) == 0x000008, "Member 'FAttributeModifierInfo::InstantGEs' has a wrong offset!");

// ScriptStruct FortniteGame.FortFloatAnimationInfo
// 0x0008 (0x0020 - 0x0018)
struct FFortFloatAnimationInfo : public FFortFXAnimationInfoBase
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFloatAnimationInfo) == 0x000008, "Wrong alignment on FFortFloatAnimationInfo");
static_assert(sizeof(FFortFloatAnimationInfo) == 0x000020, "Wrong size on FFortFloatAnimationInfo");

// ScriptStruct FortniteGame.FortFloatParamAnimationInfo
// 0x0008 (0x0028 - 0x0020)
struct FFortFloatParamAnimationInfo final : public FFortFloatAnimationInfo
{
public:
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFloatParamAnimationInfo) == 0x000008, "Wrong alignment on FFortFloatParamAnimationInfo");
static_assert(sizeof(FFortFloatParamAnimationInfo) == 0x000028, "Wrong size on FFortFloatParamAnimationInfo");

// ScriptStruct FortniteGame.FortLinearColorAnimationInfo
// 0x0020 (0x0038 - 0x0018)
struct FFortLinearColorAnimationInfo : public FFortFXAnimationInfoBase
{
public:
	uint8                                         Pad_18[0x20];                                      // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLinearColorAnimationInfo) == 0x000008, "Wrong alignment on FFortLinearColorAnimationInfo");
static_assert(sizeof(FFortLinearColorAnimationInfo) == 0x000038, "Wrong size on FFortLinearColorAnimationInfo");

// ScriptStruct FortniteGame.FortLinearColorParamAnimationInfo
// 0x0008 (0x0040 - 0x0038)
struct FFortLinearColorParamAnimationInfo final : public FFortLinearColorAnimationInfo
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLinearColorParamAnimationInfo) == 0x000008, "Wrong alignment on FFortLinearColorParamAnimationInfo");
static_assert(sizeof(FFortLinearColorParamAnimationInfo) == 0x000040, "Wrong size on FFortLinearColorParamAnimationInfo");

// ScriptStruct FortniteGame.FortLinearColorCurveParamAnimationInfo
// 0x0008 (0x0030 - 0x0028)
struct FFortLinearColorCurveParamAnimationInfo final : public FFortLinearColorCurveAnimationInfo
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLinearColorCurveParamAnimationInfo) == 0x000008, "Wrong alignment on FFortLinearColorCurveParamAnimationInfo");
static_assert(sizeof(FFortLinearColorCurveParamAnimationInfo) == 0x000030, "Wrong size on FFortLinearColorCurveParamAnimationInfo");

// ScriptStruct FortniteGame.FortMIDAnimSet
// 0x0040 (0x0040 - 0x0000)
struct FFortMIDAnimSet final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortFloatParamAnimationInfo>   FloatParamAnims;                                   // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FFortLinearColorParamAnimationInfo> ColorParamAnims;                                   // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FFortLinearColorCurveParamAnimationInfo> ColorCurveParamAnims;                              // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMIDAnimSet) == 0x000008, "Wrong alignment on FFortMIDAnimSet");
static_assert(sizeof(FFortMIDAnimSet) == 0x000040, "Wrong size on FFortMIDAnimSet");
static_assert(offsetof(FFortMIDAnimSet, Mid) == 0x000000, "Member 'FFortMIDAnimSet::Mid' has a wrong offset!");
static_assert(offsetof(FFortMIDAnimSet, FloatParamAnims) == 0x000008, "Member 'FFortMIDAnimSet::FloatParamAnims' has a wrong offset!");
static_assert(offsetof(FFortMIDAnimSet, ColorParamAnims) == 0x000018, "Member 'FFortMIDAnimSet::ColorParamAnims' has a wrong offset!");
static_assert(offsetof(FFortMIDAnimSet, ColorCurveParamAnims) == 0x000028, "Member 'FFortMIDAnimSet::ColorCurveParamAnims' has a wrong offset!");

// ScriptStruct FortniteGame.RuntimeOptionReviewPromptCriteria
// 0x0014 (0x0014 - 0x0000)
struct FRuntimeOptionReviewPromptCriteria final
{
public:
	int32                                         MinutesPlayed;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamesPlayed;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestResult;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCount;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequireAll;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRuntimeOptionReviewPromptCriteria) == 0x000004, "Wrong alignment on FRuntimeOptionReviewPromptCriteria");
static_assert(sizeof(FRuntimeOptionReviewPromptCriteria) == 0x000014, "Wrong size on FRuntimeOptionReviewPromptCriteria");
static_assert(offsetof(FRuntimeOptionReviewPromptCriteria, MinutesPlayed) == 0x000000, "Member 'FRuntimeOptionReviewPromptCriteria::MinutesPlayed' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionReviewPromptCriteria, GamesPlayed) == 0x000004, "Member 'FRuntimeOptionReviewPromptCriteria::GamesPlayed' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionReviewPromptCriteria, BestResult) == 0x000008, "Member 'FRuntimeOptionReviewPromptCriteria::BestResult' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionReviewPromptCriteria, KillCount) == 0x00000C, "Member 'FRuntimeOptionReviewPromptCriteria::KillCount' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionReviewPromptCriteria, RequireAll) == 0x000010, "Member 'FRuntimeOptionReviewPromptCriteria::RequireAll' has a wrong offset!");

// ScriptStruct FortniteGame.GCSettingsOverride
// 0x0010 (0x0010 - 0x0000)
struct FGCSettingsOverride final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGCOnServerDuringMatch;                      // 0x0008(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GCFrequency;                                       // 0x000C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGCSettingsOverride) == 0x000004, "Wrong alignment on FGCSettingsOverride");
static_assert(sizeof(FGCSettingsOverride) == 0x000010, "Wrong size on FGCSettingsOverride");
static_assert(offsetof(FGCSettingsOverride, PlaylistName) == 0x000000, "Member 'FGCSettingsOverride::PlaylistName' has a wrong offset!");
static_assert(offsetof(FGCSettingsOverride, bEnableGCOnServerDuringMatch) == 0x000008, "Member 'FGCSettingsOverride::bEnableGCOnServerDuringMatch' has a wrong offset!");
static_assert(offsetof(FGCSettingsOverride, GCFrequency) == 0x00000C, "Member 'FGCSettingsOverride::GCFrequency' has a wrong offset!");

// ScriptStruct FortniteGame.VolumePerformanceMetrics
// 0x000C (0x000C - 0x0000)
struct FVolumePerformanceMetrics final
{
public:
	int32                                         PerformanceValue;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PerformanceMaxValue;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviewDeltaValue;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVolumePerformanceMetrics) == 0x000004, "Wrong alignment on FVolumePerformanceMetrics");
static_assert(sizeof(FVolumePerformanceMetrics) == 0x00000C, "Wrong size on FVolumePerformanceMetrics");
static_assert(offsetof(FVolumePerformanceMetrics, PerformanceValue) == 0x000000, "Member 'FVolumePerformanceMetrics::PerformanceValue' has a wrong offset!");
static_assert(offsetof(FVolumePerformanceMetrics, PerformanceMaxValue) == 0x000004, "Member 'FVolumePerformanceMetrics::PerformanceMaxValue' has a wrong offset!");
static_assert(offsetof(FVolumePerformanceMetrics, PreviewDeltaValue) == 0x000008, "Member 'FVolumePerformanceMetrics::PreviewDeltaValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterWaveProgressEstimation
// 0x001C (0x001C - 0x0000)
struct FFortAIEncounterWaveProgressEstimation final
{
public:
	float                                         SectionProgressEstimate;                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectionStartTime;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastWaveProgressUpdateTime;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakAndFadeWavePercentage;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAdjustmentPerSecond;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIWaveProgressSection                    CurrentSection;                                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfWaveSegments;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterWaveProgressEstimation) == 0x000004, "Wrong alignment on FFortAIEncounterWaveProgressEstimation");
static_assert(sizeof(FFortAIEncounterWaveProgressEstimation) == 0x00001C, "Wrong size on FFortAIEncounterWaveProgressEstimation");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, SectionProgressEstimate) == 0x000000, "Member 'FFortAIEncounterWaveProgressEstimation::SectionProgressEstimate' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, SectionStartTime) == 0x000004, "Member 'FFortAIEncounterWaveProgressEstimation::SectionStartTime' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, LastWaveProgressUpdateTime) == 0x000008, "Member 'FFortAIEncounterWaveProgressEstimation::LastWaveProgressUpdateTime' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, PeakAndFadeWavePercentage) == 0x00000C, "Member 'FFortAIEncounterWaveProgressEstimation::PeakAndFadeWavePercentage' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, MaxAdjustmentPerSecond) == 0x000010, "Member 'FFortAIEncounterWaveProgressEstimation::MaxAdjustmentPerSecond' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, CurrentSection) == 0x000014, "Member 'FFortAIEncounterWaveProgressEstimation::CurrentSection' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, NumberOfWaveSegments) == 0x000018, "Member 'FFortAIEncounterWaveProgressEstimation::NumberOfWaveSegments' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveCollectionLootSetData
// 0x0020 (0x0020 - 0x0000)
struct FTieredWaveCollectionLootSetData final
{
public:
	TArray<class FName>                           StartOfCollectionItemTierGroups;                   // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           SuccessfulWaveItemTierGroups;                      // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveCollectionLootSetData) == 0x000008, "Wrong alignment on FTieredWaveCollectionLootSetData");
static_assert(sizeof(FTieredWaveCollectionLootSetData) == 0x000020, "Wrong size on FTieredWaveCollectionLootSetData");
static_assert(offsetof(FTieredWaveCollectionLootSetData, StartOfCollectionItemTierGroups) == 0x000000, "Member 'FTieredWaveCollectionLootSetData::StartOfCollectionItemTierGroups' has a wrong offset!");
static_assert(offsetof(FTieredWaveCollectionLootSetData, SuccessfulWaveItemTierGroups) == 0x000010, "Member 'FTieredWaveCollectionLootSetData::SuccessfulWaveItemTierGroups' has a wrong offset!");

// ScriptStruct FortniteGame.Voter
// 0x0038 (0x0038 - 0x0000)
struct FVoter final
{
public:
	int32                                         VoteDecision;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastVoteDecision;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumVotesCast;                                      // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoter) == 0x000008, "Wrong alignment on FVoter");
static_assert(sizeof(FVoter) == 0x000038, "Wrong size on FVoter");
static_assert(offsetof(FVoter, VoteDecision) == 0x000000, "Member 'FVoter::VoteDecision' has a wrong offset!");
static_assert(offsetof(FVoter, LastVoteDecision) == 0x000004, "Member 'FVoter::LastVoteDecision' has a wrong offset!");
static_assert(offsetof(FVoter, NetId) == 0x000008, "Member 'FVoter::NetId' has a wrong offset!");
static_assert(offsetof(FVoter, NumVotesCast) == 0x000030, "Member 'FVoter::NumVotesCast' has a wrong offset!");

// ScriptStruct FortniteGame.ChoiceData
// 0x0030 (0x0030 - 0x0000)
struct FChoiceData final
{
public:
	int32                                         MenuIdentifier;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCloseButton;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FChoiceDataEntry>               Items;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChoiceData) == 0x000008, "Wrong alignment on FChoiceData");
static_assert(sizeof(FChoiceData) == 0x000030, "Wrong size on FChoiceData");
static_assert(offsetof(FChoiceData, MenuIdentifier) == 0x000000, "Member 'FChoiceData::MenuIdentifier' has a wrong offset!");
static_assert(offsetof(FChoiceData, bShowCloseButton) == 0x000004, "Member 'FChoiceData::bShowCloseButton' has a wrong offset!");
static_assert(offsetof(FChoiceData, Title) == 0x000008, "Member 'FChoiceData::Title' has a wrong offset!");
static_assert(offsetof(FChoiceData, Items) == 0x000020, "Member 'FChoiceData::Items' has a wrong offset!");

// ScriptStruct FortniteGame.LockOnInfo
// 0x0038 (0x0038 - 0x0000)
struct FLockOnInfo final
{
public:
	ELockOnState                                  State;                                             // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AFortWeapon>             Weapon;                                            // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  LockOnTarget;                                      // 0x000C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CamRotAtTargetAcquisiton;                          // 0x0014(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              LockOnCoords;                                      // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetAcquisitionTime;                             // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetLockOnTime;                                  // 0x002C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetOutOfSightTime;                              // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownStartTime;                                 // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLockOnInfo) == 0x000004, "Wrong alignment on FLockOnInfo");
static_assert(sizeof(FLockOnInfo) == 0x000038, "Wrong size on FLockOnInfo");
static_assert(offsetof(FLockOnInfo, State) == 0x000000, "Member 'FLockOnInfo::State' has a wrong offset!");
static_assert(offsetof(FLockOnInfo, Weapon) == 0x000004, "Member 'FLockOnInfo::Weapon' has a wrong offset!");
static_assert(offsetof(FLockOnInfo, LockOnTarget) == 0x00000C, "Member 'FLockOnInfo::LockOnTarget' has a wrong offset!");
static_assert(offsetof(FLockOnInfo, CamRotAtTargetAcquisiton) == 0x000014, "Member 'FLockOnInfo::CamRotAtTargetAcquisiton' has a wrong offset!");
static_assert(offsetof(FLockOnInfo, LockOnCoords) == 0x000020, "Member 'FLockOnInfo::LockOnCoords' has a wrong offset!");
static_assert(offsetof(FLockOnInfo, TargetAcquisitionTime) == 0x000028, "Member 'FLockOnInfo::TargetAcquisitionTime' has a wrong offset!");
static_assert(offsetof(FLockOnInfo, TargetLockOnTime) == 0x00002C, "Member 'FLockOnInfo::TargetLockOnTime' has a wrong offset!");
static_assert(offsetof(FLockOnInfo, TargetOutOfSightTime) == 0x000030, "Member 'FLockOnInfo::TargetOutOfSightTime' has a wrong offset!");
static_assert(offsetof(FLockOnInfo, CooldownStartTime) == 0x000034, "Member 'FLockOnInfo::CooldownStartTime' has a wrong offset!");

// ScriptStruct FortniteGame.SourceDriver
// 0x0038 (0x0038 - 0x0000)
struct FSourceDriver final
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EComponentType                                SourceComponent;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseQuaternion;                                     // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DrivingCurve;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRange;                                         // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RangeMin;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMin;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMax;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSourceDriver) == 0x000008, "Wrong alignment on FSourceDriver");
static_assert(sizeof(FSourceDriver) == 0x000038, "Wrong size on FSourceDriver");
static_assert(offsetof(FSourceDriver, SourceBone) == 0x000000, "Member 'FSourceDriver::SourceBone' has a wrong offset!");
static_assert(offsetof(FSourceDriver, SourceComponent) == 0x000010, "Member 'FSourceDriver::SourceComponent' has a wrong offset!");
static_assert(offsetof(FSourceDriver, UseQuaternion) == 0x000011, "Member 'FSourceDriver::UseQuaternion' has a wrong offset!");
static_assert(offsetof(FSourceDriver, DrivingCurve) == 0x000018, "Member 'FSourceDriver::DrivingCurve' has a wrong offset!");
static_assert(offsetof(FSourceDriver, Multiplier) == 0x000020, "Member 'FSourceDriver::Multiplier' has a wrong offset!");
static_assert(offsetof(FSourceDriver, bUseRange) == 0x000024, "Member 'FSourceDriver::bUseRange' has a wrong offset!");
static_assert(offsetof(FSourceDriver, RangeMin) == 0x000028, "Member 'FSourceDriver::RangeMin' has a wrong offset!");
static_assert(offsetof(FSourceDriver, RangeMax) == 0x00002C, "Member 'FSourceDriver::RangeMax' has a wrong offset!");
static_assert(offsetof(FSourceDriver, RemappedMin) == 0x000030, "Member 'FSourceDriver::RemappedMin' has a wrong offset!");
static_assert(offsetof(FSourceDriver, RemappedMax) == 0x000034, "Member 'FSourceDriver::RemappedMax' has a wrong offset!");

// ScriptStruct FortniteGame.FortReplayPlaybackState
// 0x0018 (0x0018 - 0x0000)
struct FFortReplayPlaybackState final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeNow;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPaused;                                         // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeedMultiplier;                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTimelineHasInputFocus;                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHudVisibilityState                           HUDVisibility;                                     // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLevelStreaming;                                   // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasRelevancyZone;                                 // 0x0017(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortReplayPlaybackState) == 0x000004, "Wrong alignment on FFortReplayPlaybackState");
static_assert(sizeof(FFortReplayPlaybackState) == 0x000018, "Wrong size on FFortReplayPlaybackState");
static_assert(offsetof(FFortReplayPlaybackState, StartTime) == 0x000000, "Member 'FFortReplayPlaybackState::StartTime' has a wrong offset!");
static_assert(offsetof(FFortReplayPlaybackState, EndTime) == 0x000004, "Member 'FFortReplayPlaybackState::EndTime' has a wrong offset!");
static_assert(offsetof(FFortReplayPlaybackState, TimeNow) == 0x000008, "Member 'FFortReplayPlaybackState::TimeNow' has a wrong offset!");
static_assert(offsetof(FFortReplayPlaybackState, bIsPaused) == 0x00000C, "Member 'FFortReplayPlaybackState::bIsPaused' has a wrong offset!");
static_assert(offsetof(FFortReplayPlaybackState, PlaybackSpeedMultiplier) == 0x000010, "Member 'FFortReplayPlaybackState::PlaybackSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FFortReplayPlaybackState, bTimelineHasInputFocus) == 0x000014, "Member 'FFortReplayPlaybackState::bTimelineHasInputFocus' has a wrong offset!");
static_assert(offsetof(FFortReplayPlaybackState, HUDVisibility) == 0x000015, "Member 'FFortReplayPlaybackState::HUDVisibility' has a wrong offset!");
static_assert(offsetof(FFortReplayPlaybackState, bLevelStreaming) == 0x000016, "Member 'FFortReplayPlaybackState::bLevelStreaming' has a wrong offset!");
static_assert(offsetof(FFortReplayPlaybackState, bHasRelevancyZone) == 0x000017, "Member 'FFortReplayPlaybackState::bHasRelevancyZone' has a wrong offset!");

// ScriptStruct FortniteGame.CreateBuildingActorData
// 0x0038 (0x0038 - 0x0000)
struct FCreateBuildingActorData final
{
public:
	uint32                                        BuildingClassHandle;                               // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  BuildLoc;                                          // 0x0004(0x000C)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               BuildRot;                                          // 0x0010(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x001C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SyncKey;                                           // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBuildingClassData                     BuildingClassData;                                 // 0x0028(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCreateBuildingActorData) == 0x000008, "Wrong alignment on FCreateBuildingActorData");
static_assert(sizeof(FCreateBuildingActorData) == 0x000038, "Wrong size on FCreateBuildingActorData");
static_assert(offsetof(FCreateBuildingActorData, BuildingClassHandle) == 0x000000, "Member 'FCreateBuildingActorData::BuildingClassHandle' has a wrong offset!");
static_assert(offsetof(FCreateBuildingActorData, BuildLoc) == 0x000004, "Member 'FCreateBuildingActorData::BuildLoc' has a wrong offset!");
static_assert(offsetof(FCreateBuildingActorData, BuildRot) == 0x000010, "Member 'FCreateBuildingActorData::BuildRot' has a wrong offset!");
static_assert(offsetof(FCreateBuildingActorData, bMirrored) == 0x00001C, "Member 'FCreateBuildingActorData::bMirrored' has a wrong offset!");
static_assert(offsetof(FCreateBuildingActorData, SyncKey) == 0x000020, "Member 'FCreateBuildingActorData::SyncKey' has a wrong offset!");
static_assert(offsetof(FCreateBuildingActorData, BuildingClassData) == 0x000028, "Member 'FCreateBuildingActorData::BuildingClassData' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpokenLine
// 0x0030 (0x0030 - 0x0000)
struct FFortSpokenLine final
{
public:
	class USoundBase*                             Audio;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSequence;                                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Addressee;                                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackBroadcastFilter                  BroadcastFilter;                                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptCurrentLine;                             // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeInterrupted;                                 // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanQue;                                           // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpokenLine) == 0x000008, "Wrong alignment on FFortSpokenLine");
static_assert(sizeof(FFortSpokenLine) == 0x000030, "Wrong size on FFortSpokenLine");
static_assert(offsetof(FFortSpokenLine, Audio) == 0x000000, "Member 'FFortSpokenLine::Audio' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, AnimMontage) == 0x000008, "Member 'FFortSpokenLine::AnimMontage' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, AnimSequence) == 0x000010, "Member 'FFortSpokenLine::AnimSequence' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, Addressee) == 0x000018, "Member 'FFortSpokenLine::Addressee' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, BroadcastFilter) == 0x000020, "Member 'FFortSpokenLine::BroadcastFilter' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, Delay) == 0x000024, "Member 'FFortSpokenLine::Delay' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, bInterruptCurrentLine) == 0x000028, "Member 'FFortSpokenLine::bInterruptCurrentLine' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, bCanBeInterrupted) == 0x000029, "Member 'FFortSpokenLine::bCanBeInterrupted' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, bCanQue) == 0x00002A, "Member 'FFortSpokenLine::bCanQue' has a wrong offset!");

// ScriptStruct FortniteGame.FortFootstepAudioData
// 0x00E8 (0x00E8 - 0x0000)
struct FFortFootstepAudioData final
{
public:
	class USoundBase*                             SoundAssets[0x8];                                  // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundAssetsAbove[0x8];                             // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundAssetsBelow[0x8];                             // 0x0080(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      SoundAttenuation;                                  // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      SoundAttenuationAbove;                             // 0x00C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      SoundAttenuationBelow;                             // 0x00D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      SoundAttenuationAboveOrBelowAndVisible;            // 0x00D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x00E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFootstepAudioData) == 0x000008, "Wrong alignment on FFortFootstepAudioData");
static_assert(sizeof(FFortFootstepAudioData) == 0x0000E8, "Wrong size on FFortFootstepAudioData");
static_assert(offsetof(FFortFootstepAudioData, SoundAssets) == 0x000000, "Member 'FFortFootstepAudioData::SoundAssets' has a wrong offset!");
static_assert(offsetof(FFortFootstepAudioData, SoundAssetsAbove) == 0x000040, "Member 'FFortFootstepAudioData::SoundAssetsAbove' has a wrong offset!");
static_assert(offsetof(FFortFootstepAudioData, SoundAssetsBelow) == 0x000080, "Member 'FFortFootstepAudioData::SoundAssetsBelow' has a wrong offset!");
static_assert(offsetof(FFortFootstepAudioData, SoundAttenuation) == 0x0000C0, "Member 'FFortFootstepAudioData::SoundAttenuation' has a wrong offset!");
static_assert(offsetof(FFortFootstepAudioData, SoundAttenuationAbove) == 0x0000C8, "Member 'FFortFootstepAudioData::SoundAttenuationAbove' has a wrong offset!");
static_assert(offsetof(FFortFootstepAudioData, SoundAttenuationBelow) == 0x0000D0, "Member 'FFortFootstepAudioData::SoundAttenuationBelow' has a wrong offset!");
static_assert(offsetof(FFortFootstepAudioData, SoundAttenuationAboveOrBelowAndVisible) == 0x0000D8, "Member 'FFortFootstepAudioData::SoundAttenuationAboveOrBelowAndVisible' has a wrong offset!");
static_assert(offsetof(FFortFootstepAudioData, VolumeMultiplier) == 0x0000E0, "Member 'FFortFootstepAudioData::VolumeMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.FortTouchAimAssist_Target
// 0x0040 (0x0040 - 0x0000)
struct FFortTouchAimAssist_Target final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTouchAimAssist_Target) == 0x000008, "Wrong alignment on FFortTouchAimAssist_Target");
static_assert(sizeof(FFortTouchAimAssist_Target) == 0x000040, "Wrong size on FFortTouchAimAssist_Target");
static_assert(offsetof(FFortTouchAimAssist_Target, Actor) == 0x000000, "Member 'FFortTouchAimAssist_Target::Actor' has a wrong offset!");

// ScriptStruct FortniteGame.FortCombatManagerEvent
// 0x0008 (0x0008 - 0x0000)
struct FFortCombatManagerEvent final
{
public:
	float                                         EventValue;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCombatEvents                             Event;                                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCombatManagerEvent) == 0x000004, "Wrong alignment on FFortCombatManagerEvent");
static_assert(sizeof(FFortCombatManagerEvent) == 0x000008, "Wrong size on FFortCombatManagerEvent");
static_assert(offsetof(FFortCombatManagerEvent, EventValue) == 0x000000, "Member 'FFortCombatManagerEvent::EventValue' has a wrong offset!");
static_assert(offsetof(FFortCombatManagerEvent, Event) == 0x000004, "Member 'FFortCombatManagerEvent::Event' has a wrong offset!");

// ScriptStruct FortniteGame.FortPersistentGameplayStatContainer
// 0x0010 (0x0010 - 0x0000)
struct FFortPersistentGameplayStatContainer final
{
public:
	TArray<struct FFortPersistentGameplayStatValue> GameplayStats;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPersistentGameplayStatContainer) == 0x000008, "Wrong alignment on FFortPersistentGameplayStatContainer");
static_assert(sizeof(FFortPersistentGameplayStatContainer) == 0x000010, "Wrong size on FFortPersistentGameplayStatContainer");
static_assert(offsetof(FFortPersistentGameplayStatContainer, GameplayStats) == 0x000000, "Member 'FFortPersistentGameplayStatContainer::GameplayStats' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayCueAOEInfo
// 0x0008 (0x0008 - 0x0000)
struct FFortGameplayCueAOEInfo final
{
public:
	float                                         InnerRadius;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayCueAOEInfo) == 0x000004, "Wrong alignment on FFortGameplayCueAOEInfo");
static_assert(sizeof(FFortGameplayCueAOEInfo) == 0x000008, "Wrong size on FFortGameplayCueAOEInfo");
static_assert(offsetof(FFortGameplayCueAOEInfo, InnerRadius) == 0x000000, "Member 'FFortGameplayCueAOEInfo::InnerRadius' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueAOEInfo, OuterRadius) == 0x000004, "Member 'FFortGameplayCueAOEInfo::OuterRadius' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayCueCameraLensEffectInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortGameplayCueCameraLensEffectInfo final
{
public:
	TSubclassOf<class AEmitterCameraLensEffectBase> CameraLensEffect;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGameplayCueAOEInfo                Falloff;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAlwaysPlayOnTarget;                               // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnRemove;                                   // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayCueCameraLensEffectInfo) == 0x000008, "Wrong alignment on FFortGameplayCueCameraLensEffectInfo");
static_assert(sizeof(FFortGameplayCueCameraLensEffectInfo) == 0x000018, "Wrong size on FFortGameplayCueCameraLensEffectInfo");
static_assert(offsetof(FFortGameplayCueCameraLensEffectInfo, CameraLensEffect) == 0x000000, "Member 'FFortGameplayCueCameraLensEffectInfo::CameraLensEffect' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueCameraLensEffectInfo, Falloff) == 0x000008, "Member 'FFortGameplayCueCameraLensEffectInfo::Falloff' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueCameraLensEffectInfo, bAlwaysPlayOnTarget) == 0x000010, "Member 'FFortGameplayCueCameraLensEffectInfo::bAlwaysPlayOnTarget' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueCameraLensEffectInfo, bCancelOnRemove) == 0x000011, "Member 'FFortGameplayCueCameraLensEffectInfo::bCancelOnRemove' has a wrong offset!");

// ScriptStruct FortniteGame.RotationLerpData
// 0x0050 (0x0050 - 0x0000)
struct FRotationLerpData final
{
public:
	struct FQuat                                  RotationLerp_Start;                                // 0x0000(0x0010)(IsPlainOldData, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  RotationLerp_End;                                  // 0x0010(0x0010)(IsPlainOldData, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  RotationLerp_Target;                               // 0x0020(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TotalLerpTime;                                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x1C];                                      // 0x0034(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRotationLerpData) == 0x000010, "Wrong alignment on FRotationLerpData");
static_assert(sizeof(FRotationLerpData) == 0x000050, "Wrong size on FRotationLerpData");
static_assert(offsetof(FRotationLerpData, RotationLerp_Start) == 0x000000, "Member 'FRotationLerpData::RotationLerp_Start' has a wrong offset!");
static_assert(offsetof(FRotationLerpData, RotationLerp_End) == 0x000010, "Member 'FRotationLerpData::RotationLerp_End' has a wrong offset!");
static_assert(offsetof(FRotationLerpData, RotationLerp_Target) == 0x000020, "Member 'FRotationLerpData::RotationLerp_Target' has a wrong offset!");
static_assert(offsetof(FRotationLerpData, TotalLerpTime) == 0x000030, "Member 'FRotationLerpData::TotalLerpTime' has a wrong offset!");

// ScriptStruct FortniteGame.ObjectivePartialCompletionData
// 0x0018 (0x0018 - 0x0000)
struct FObjectivePartialCompletionData final
{
public:
	class FString                                 ObjectiveName;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletionCount;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FObjectivePartialCompletionData) == 0x000008, "Wrong alignment on FObjectivePartialCompletionData");
static_assert(sizeof(FObjectivePartialCompletionData) == 0x000018, "Wrong size on FObjectivePartialCompletionData");
static_assert(offsetof(FObjectivePartialCompletionData, ObjectiveName) == 0x000000, "Member 'FObjectivePartialCompletionData::ObjectiveName' has a wrong offset!");
static_assert(offsetof(FObjectivePartialCompletionData, CompletionCount) == 0x000010, "Member 'FObjectivePartialCompletionData::CompletionCount' has a wrong offset!");

// ScriptStruct FortniteGame.ChallengePartialCompletionData
// 0x0020 (0x0020 - 0x0000)
struct FChallengePartialCompletionData final
{
public:
	class FString                                 QuestTemplateId;                                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FObjectivePartialCompletionData> ObjectivData;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengePartialCompletionData) == 0x000008, "Wrong alignment on FChallengePartialCompletionData");
static_assert(sizeof(FChallengePartialCompletionData) == 0x000020, "Wrong size on FChallengePartialCompletionData");
static_assert(offsetof(FChallengePartialCompletionData, QuestTemplateId) == 0x000000, "Member 'FChallengePartialCompletionData::QuestTemplateId' has a wrong offset!");
static_assert(offsetof(FChallengePartialCompletionData, ObjectivData) == 0x000010, "Member 'FChallengePartialCompletionData::ObjectivData' has a wrong offset!");

// ScriptStruct FortniteGame.CurrentIntensityAnalyticsBucket
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FCurrentIntensityAnalyticsBucket final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCurrentIntensityAnalyticsBucket) == 0x000008, "Wrong alignment on FCurrentIntensityAnalyticsBucket");
static_assert(sizeof(FCurrentIntensityAnalyticsBucket) == 0x000038, "Wrong size on FCurrentIntensityAnalyticsBucket");

// ScriptStruct FortniteGame.FortQuestPoolStats_PerPool
// 0x0020 (0x0020 - 0x0000)
struct FFortQuestPoolStats_PerPool final
{
public:
	class FString                                 PoolName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              NextRefresh;                                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RerollsRemaining;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestPoolStats_PerPool) == 0x000008, "Wrong alignment on FFortQuestPoolStats_PerPool");
static_assert(sizeof(FFortQuestPoolStats_PerPool) == 0x000020, "Wrong size on FFortQuestPoolStats_PerPool");
static_assert(offsetof(FFortQuestPoolStats_PerPool, PoolName) == 0x000000, "Member 'FFortQuestPoolStats_PerPool::PoolName' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolStats_PerPool, NextRefresh) == 0x000010, "Member 'FFortQuestPoolStats_PerPool::NextRefresh' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolStats_PerPool, RerollsRemaining) == 0x000018, "Member 'FFortQuestPoolStats_PerPool::RerollsRemaining' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestPoolStats
// 0x0010 (0x0010 - 0x0000)
struct FFortQuestPoolStats final
{
public:
	TArray<struct FFortQuestPoolStats_PerPool>    PoolStats;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestPoolStats) == 0x000008, "Wrong alignment on FFortQuestPoolStats");
static_assert(sizeof(FFortQuestPoolStats) == 0x000010, "Wrong size on FFortQuestPoolStats");
static_assert(offsetof(FFortQuestPoolStats, PoolStats) == 0x000000, "Member 'FFortQuestPoolStats::PoolStats' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestManagerAttributes
// 0x0020 (0x0020 - 0x0000)
struct FFortQuestManagerAttributes final
{
public:
	struct FDateTime                              DailyLoginInterval;                                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyQuestRerolls;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortQuestPoolStats                    QuestPoolStats;                                    // 0x0010(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestManagerAttributes) == 0x000008, "Wrong alignment on FFortQuestManagerAttributes");
static_assert(sizeof(FFortQuestManagerAttributes) == 0x000020, "Wrong size on FFortQuestManagerAttributes");
static_assert(offsetof(FFortQuestManagerAttributes, DailyLoginInterval) == 0x000000, "Member 'FFortQuestManagerAttributes::DailyLoginInterval' has a wrong offset!");
static_assert(offsetof(FFortQuestManagerAttributes, DailyQuestRerolls) == 0x000008, "Member 'FFortQuestManagerAttributes::DailyQuestRerolls' has a wrong offset!");
static_assert(offsetof(FFortQuestManagerAttributes, QuestPoolStats) == 0x000010, "Member 'FFortQuestManagerAttributes::QuestPoolStats' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyRewardsNotification
// 0x0018 (0x0018 - 0x0000)
struct FFortDailyRewardsNotification final
{
public:
	int32                                         DaysLoggedIn;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMcpLootEntry>                  Items;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyRewardsNotification) == 0x000008, "Wrong alignment on FFortDailyRewardsNotification");
static_assert(sizeof(FFortDailyRewardsNotification) == 0x000018, "Wrong size on FFortDailyRewardsNotification");
static_assert(offsetof(FFortDailyRewardsNotification, DaysLoggedIn) == 0x000000, "Member 'FFortDailyRewardsNotification::DaysLoggedIn' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsNotification, Items) == 0x000008, "Member 'FFortDailyRewardsNotification::Items' has a wrong offset!");

// ScriptStruct FortniteGame.AlertLevelInfo
// 0x0010 (0x0010 - 0x0000)
struct FAlertLevelInfo final
{
public:
	TArray<class UAISenseConfig*>                 SensesConfig;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAlertLevelInfo) == 0x000008, "Wrong alignment on FAlertLevelInfo");
static_assert(sizeof(FAlertLevelInfo) == 0x000010, "Wrong size on FAlertLevelInfo");
static_assert(offsetof(FAlertLevelInfo, SensesConfig) == 0x000000, "Member 'FAlertLevelInfo::SensesConfig' has a wrong offset!");

// ScriptStruct FortniteGame.DelayedQuickBarActionContainer
// 0x0018 (0x0120 - 0x0108)
struct FDelayedQuickBarActionContainer final : public FFastArraySerializer
{
public:
	TArray<struct FDelayedQuickBarAction>         Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelayedQuickBarActionContainer) == 0x000008, "Wrong alignment on FDelayedQuickBarActionContainer");
static_assert(sizeof(FDelayedQuickBarActionContainer) == 0x000120, "Wrong size on FDelayedQuickBarActionContainer");
static_assert(offsetof(FDelayedQuickBarActionContainer, Items) == 0x000108, "Member 'FDelayedQuickBarActionContainer::Items' has a wrong offset!");

// ScriptStruct FortniteGame.CustomCharacterParts
// 0x0040 (0x0040 - 0x0000)
struct FCustomCharacterParts final
{
public:
	uint8                                         WasReplicatedFlags;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomCharacterPart*                   Parts[0x6];                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicationFailed;                                // 0x0038(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomCharacterParts) == 0x000008, "Wrong alignment on FCustomCharacterParts");
static_assert(sizeof(FCustomCharacterParts) == 0x000040, "Wrong size on FCustomCharacterParts");
static_assert(offsetof(FCustomCharacterParts, WasReplicatedFlags) == 0x000000, "Member 'FCustomCharacterParts::WasReplicatedFlags' has a wrong offset!");
static_assert(offsetof(FCustomCharacterParts, Parts) == 0x000008, "Member 'FCustomCharacterParts::Parts' has a wrong offset!");
static_assert(offsetof(FCustomCharacterParts, bReplicationFailed) == 0x000038, "Member 'FCustomCharacterParts::bReplicationFailed' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaSeasonBannerLevel
// 0x0050 (0x0050 - 0x0000)
struct FAthenaSeasonBannerLevel final
{
public:
	TSoftObjectPtr<class UTexture2D>              SurroundImage;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      BannerMaterial;                                    // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaSeasonBannerLevel) == 0x000008, "Wrong alignment on FAthenaSeasonBannerLevel");
static_assert(sizeof(FAthenaSeasonBannerLevel) == 0x000050, "Wrong size on FAthenaSeasonBannerLevel");
static_assert(offsetof(FAthenaSeasonBannerLevel, SurroundImage) == 0x000000, "Member 'FAthenaSeasonBannerLevel::SurroundImage' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonBannerLevel, BannerMaterial) == 0x000028, "Member 'FAthenaSeasonBannerLevel::BannerMaterial' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaSeasonBannerLevelSchedule
// 0x0010 (0x0010 - 0x0000)
struct FAthenaSeasonBannerLevelSchedule final
{
public:
	TArray<struct FAthenaSeasonBannerLevel>       Levels;                                            // 0x0000(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaSeasonBannerLevelSchedule) == 0x000008, "Wrong alignment on FAthenaSeasonBannerLevelSchedule");
static_assert(sizeof(FAthenaSeasonBannerLevelSchedule) == 0x000010, "Wrong size on FAthenaSeasonBannerLevelSchedule");
static_assert(offsetof(FAthenaSeasonBannerLevelSchedule, Levels) == 0x000000, "Member 'FAthenaSeasonBannerLevelSchedule::Levels' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameStatRow
// 0x0038 (0x0038 - 0x0000)
struct FMinigameStatRow final
{
public:
	class FText                                   PlayerName;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	int32                                         TeamColorIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           PlayerStats;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          bIsTeamRow;                                        // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinigameStatRow) == 0x000008, "Wrong alignment on FMinigameStatRow");
static_assert(sizeof(FMinigameStatRow) == 0x000038, "Wrong size on FMinigameStatRow");
static_assert(offsetof(FMinigameStatRow, PlayerName) == 0x000000, "Member 'FMinigameStatRow::PlayerName' has a wrong offset!");
static_assert(offsetof(FMinigameStatRow, TeamColorIndex) == 0x000018, "Member 'FMinigameStatRow::TeamColorIndex' has a wrong offset!");
static_assert(offsetof(FMinigameStatRow, PlayerStats) == 0x000020, "Member 'FMinigameStatRow::PlayerStats' has a wrong offset!");
static_assert(offsetof(FMinigameStatRow, bIsTeamRow) == 0x000030, "Member 'FMinigameStatRow::bIsTeamRow' has a wrong offset!");

// ScriptStruct FortniteGame.ActorComponentRecord
// 0x0040 (0x0040 - 0x0000)
struct FActorComponentRecord final
{
public:
	class FName                                   ComponentName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ComponentClass;                                    // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ComponentData;                                     // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorComponentRecord) == 0x000008, "Wrong alignment on FActorComponentRecord");
static_assert(sizeof(FActorComponentRecord) == 0x000040, "Wrong size on FActorComponentRecord");
static_assert(offsetof(FActorComponentRecord, ComponentName) == 0x000000, "Member 'FActorComponentRecord::ComponentName' has a wrong offset!");
static_assert(offsetof(FActorComponentRecord, ComponentClass) == 0x000008, "Member 'FActorComponentRecord::ComponentClass' has a wrong offset!");
static_assert(offsetof(FActorComponentRecord, ComponentData) == 0x000030, "Member 'FActorComponentRecord::ComponentData' has a wrong offset!");

// ScriptStruct FortniteGame.SpectatorLensSettings
// 0x0038 (0x0038 - 0x0000)
struct FSpectatorLensSettings final
{
public:
	bool                                          bAutoExposureEnabled;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualExposureBias;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocalLength;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aperture;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoFocusEnabled;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualFocusDistance;                               // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 PresetFocalLengths;                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<float>                                 PresetApertures;                                   // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpectatorLensSettings) == 0x000008, "Wrong alignment on FSpectatorLensSettings");
static_assert(sizeof(FSpectatorLensSettings) == 0x000038, "Wrong size on FSpectatorLensSettings");
static_assert(offsetof(FSpectatorLensSettings, bAutoExposureEnabled) == 0x000000, "Member 'FSpectatorLensSettings::bAutoExposureEnabled' has a wrong offset!");
static_assert(offsetof(FSpectatorLensSettings, ManualExposureBias) == 0x000004, "Member 'FSpectatorLensSettings::ManualExposureBias' has a wrong offset!");
static_assert(offsetof(FSpectatorLensSettings, FocalLength) == 0x000008, "Member 'FSpectatorLensSettings::FocalLength' has a wrong offset!");
static_assert(offsetof(FSpectatorLensSettings, Aperture) == 0x00000C, "Member 'FSpectatorLensSettings::Aperture' has a wrong offset!");
static_assert(offsetof(FSpectatorLensSettings, bAutoFocusEnabled) == 0x000010, "Member 'FSpectatorLensSettings::bAutoFocusEnabled' has a wrong offset!");
static_assert(offsetof(FSpectatorLensSettings, ManualFocusDistance) == 0x000014, "Member 'FSpectatorLensSettings::ManualFocusDistance' has a wrong offset!");
static_assert(offsetof(FSpectatorLensSettings, PresetFocalLengths) == 0x000018, "Member 'FSpectatorLensSettings::PresetFocalLengths' has a wrong offset!");
static_assert(offsetof(FSpectatorLensSettings, PresetApertures) == 0x000028, "Member 'FSpectatorLensSettings::PresetApertures' has a wrong offset!");

// ScriptStruct FortniteGame.FortUpdatedObjectiveStat
// 0x0020 (0x0020 - 0x0000)
struct FFortUpdatedObjectiveStat final
{
public:
	class UFortQuestItemDefinition*               Quest;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackendName;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatDelta;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentStage;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUpdatedObjectiveStat) == 0x000008, "Wrong alignment on FFortUpdatedObjectiveStat");
static_assert(sizeof(FFortUpdatedObjectiveStat) == 0x000020, "Wrong size on FFortUpdatedObjectiveStat");
static_assert(offsetof(FFortUpdatedObjectiveStat, Quest) == 0x000000, "Member 'FFortUpdatedObjectiveStat::Quest' has a wrong offset!");
static_assert(offsetof(FFortUpdatedObjectiveStat, BackendName) == 0x000008, "Member 'FFortUpdatedObjectiveStat::BackendName' has a wrong offset!");
static_assert(offsetof(FFortUpdatedObjectiveStat, StatValue) == 0x000010, "Member 'FFortUpdatedObjectiveStat::StatValue' has a wrong offset!");
static_assert(offsetof(FFortUpdatedObjectiveStat, StatDelta) == 0x000014, "Member 'FFortUpdatedObjectiveStat::StatDelta' has a wrong offset!");
static_assert(offsetof(FFortUpdatedObjectiveStat, CurrentStage) == 0x000018, "Member 'FFortUpdatedObjectiveStat::CurrentStage' has a wrong offset!");

// ScriptStruct FortniteGame.FortGetMcpTimeForPlayerNotification
// 0x0008 (0x0008 - 0x0000)
struct FFortGetMcpTimeForPlayerNotification final
{
public:
	struct FDateTime                              McpTime;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGetMcpTimeForPlayerNotification) == 0x000008, "Wrong alignment on FFortGetMcpTimeForPlayerNotification");
static_assert(sizeof(FFortGetMcpTimeForPlayerNotification) == 0x000008, "Wrong size on FFortGetMcpTimeForPlayerNotification");
static_assert(offsetof(FFortGetMcpTimeForPlayerNotification, McpTime) == 0x000000, "Member 'FFortGetMcpTimeForPlayerNotification::McpTime' has a wrong offset!");

// ScriptStruct FortniteGame.AIHotSpotSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct FAIHotSpotSlotInfo
{
public:
	class AAIHotSpot*                             HotSpot;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIHotSpotSlotInfo) == 0x000008, "Wrong alignment on FAIHotSpotSlotInfo");
static_assert(sizeof(FAIHotSpotSlotInfo) == 0x000010, "Wrong size on FAIHotSpotSlotInfo");
static_assert(offsetof(FAIHotSpotSlotInfo, HotSpot) == 0x000000, "Member 'FAIHotSpotSlotInfo::HotSpot' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotInfo, SlotIndex) == 0x000008, "Member 'FAIHotSpotSlotInfo::SlotIndex' has a wrong offset!");

// ScriptStruct FortniteGame.AIHotSpotUseInfo
// 0x0008 (0x0018 - 0x0010)
struct FAIHotSpotUseInfo final : public FAIHotSpotSlotInfo
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIHotSpotUseInfo) == 0x000008, "Wrong alignment on FAIHotSpotUseInfo");
static_assert(sizeof(FAIHotSpotUseInfo) == 0x000018, "Wrong size on FAIHotSpotUseInfo");

// ScriptStruct FortniteGame.AttachedInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FAttachedInfo final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 AttachedToActor;                                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  AttachOffset;                                      // 0x0090(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              VelocityNormalized;                                // 0x009C(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         NarrowPlacementAgainstVelocityThreshold;           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickyOffsetFromPhysicsMesh;                       // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickyOffsetFromBoneCenter;                        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttachedInfo) == 0x000008, "Wrong alignment on FAttachedInfo");
static_assert(sizeof(FAttachedInfo) == 0x0000B8, "Wrong size on FAttachedInfo");
static_assert(offsetof(FAttachedInfo, Hit) == 0x000000, "Member 'FAttachedInfo::Hit' has a wrong offset!");
static_assert(offsetof(FAttachedInfo, AttachedToActor) == 0x000088, "Member 'FAttachedInfo::AttachedToActor' has a wrong offset!");
static_assert(offsetof(FAttachedInfo, AttachOffset) == 0x000090, "Member 'FAttachedInfo::AttachOffset' has a wrong offset!");
static_assert(offsetof(FAttachedInfo, VelocityNormalized) == 0x00009C, "Member 'FAttachedInfo::VelocityNormalized' has a wrong offset!");
static_assert(offsetof(FAttachedInfo, NarrowPlacementAgainstVelocityThreshold) == 0x0000A8, "Member 'FAttachedInfo::NarrowPlacementAgainstVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FAttachedInfo, StickyOffsetFromPhysicsMesh) == 0x0000AC, "Member 'FAttachedInfo::StickyOffsetFromPhysicsMesh' has a wrong offset!");
static_assert(offsetof(FAttachedInfo, StickyOffsetFromBoneCenter) == 0x0000B0, "Member 'FAttachedInfo::StickyOffsetFromBoneCenter' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackLine
// 0x0098 (0x0098 - 0x0000)
struct FFortFeedbackLine final
{
public:
	TSoftObjectPtr<class USoundBase>              Audio;                                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           AnimSequence;                                      // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0050(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackAddressee                        Addressee;                                         // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackContext                          Context;                                           // 0x0079(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortFeedbackResponse>          ResponseEvents;                                    // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInterruptCurrentLine;                             // 0x0090(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeInterrupted;                                 // 0x0091(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanQue;                                           // 0x0092(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackLine) == 0x000008, "Wrong alignment on FFortFeedbackLine");
static_assert(sizeof(FFortFeedbackLine) == 0x000098, "Wrong size on FFortFeedbackLine");
static_assert(offsetof(FFortFeedbackLine, Audio) == 0x000000, "Member 'FFortFeedbackLine::Audio' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, AnimSequence) == 0x000028, "Member 'FFortFeedbackLine::AnimSequence' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, AnimMontage) == 0x000050, "Member 'FFortFeedbackLine::AnimMontage' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, Addressee) == 0x000078, "Member 'FFortFeedbackLine::Addressee' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, Context) == 0x000079, "Member 'FFortFeedbackLine::Context' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, ResponseEvents) == 0x000080, "Member 'FFortFeedbackLine::ResponseEvents' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, bInterruptCurrentLine) == 0x000090, "Member 'FFortFeedbackLine::bInterruptCurrentLine' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, bCanBeInterrupted) == 0x000091, "Member 'FFortFeedbackLine::bCanBeInterrupted' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, bCanQue) == 0x000092, "Member 'FFortFeedbackLine::bCanQue' has a wrong offset!");

// ScriptStruct FortniteGame.FriendCodeIssuedNotification
// 0x0020 (0x0020 - 0x0000)
struct FFriendCodeIssuedNotification final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CodeType;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendCodeIssuedNotification) == 0x000008, "Wrong alignment on FFriendCodeIssuedNotification");
static_assert(sizeof(FFriendCodeIssuedNotification) == 0x000020, "Wrong size on FFriendCodeIssuedNotification");
static_assert(offsetof(FFriendCodeIssuedNotification, Code) == 0x000000, "Member 'FFriendCodeIssuedNotification::Code' has a wrong offset!");
static_assert(offsetof(FFriendCodeIssuedNotification, CodeType) == 0x000010, "Member 'FFriendCodeIssuedNotification::CodeType' has a wrong offset!");

// ScriptStruct FortniteGame.ReplayKillSummary
// 0x00D0 (0x00D0 - 0x0000)
struct FReplayKillSummary final
{
public:
	struct FUniqueNetIdRepl                       Victim;                                            // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             VictimLocation;                                    // 0x0030(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       Instigator;                                        // 0x0060(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InstigatorLocation;                                // 0x0090(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDownButNotOut;                                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeathCause                                   DeathCause;                                        // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0xA];                                       // 0x00C6(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplayKillSummary) == 0x000010, "Wrong alignment on FReplayKillSummary");
static_assert(sizeof(FReplayKillSummary) == 0x0000D0, "Wrong size on FReplayKillSummary");
static_assert(offsetof(FReplayKillSummary, Victim) == 0x000000, "Member 'FReplayKillSummary::Victim' has a wrong offset!");
static_assert(offsetof(FReplayKillSummary, VictimLocation) == 0x000030, "Member 'FReplayKillSummary::VictimLocation' has a wrong offset!");
static_assert(offsetof(FReplayKillSummary, Instigator) == 0x000060, "Member 'FReplayKillSummary::Instigator' has a wrong offset!");
static_assert(offsetof(FReplayKillSummary, InstigatorLocation) == 0x000090, "Member 'FReplayKillSummary::InstigatorLocation' has a wrong offset!");
static_assert(offsetof(FReplayKillSummary, Timestamp) == 0x0000C0, "Member 'FReplayKillSummary::Timestamp' has a wrong offset!");
static_assert(offsetof(FReplayKillSummary, bIsDownButNotOut) == 0x0000C4, "Member 'FReplayKillSummary::bIsDownButNotOut' has a wrong offset!");
static_assert(offsetof(FReplayKillSummary, DeathCause) == 0x0000C5, "Member 'FReplayKillSummary::DeathCause' has a wrong offset!");

// ScriptStruct FortniteGame.GameMemberInfo
// 0x002C (0x0038 - 0x000C)
struct FGameMemberInfo final : public FFastArraySerializerItem
{
public:
	uint8                                         SquadId;                                           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamIndex;                                         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       MemberUniqueId;                                    // 0x0010(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameMemberInfo) == 0x000008, "Wrong alignment on FGameMemberInfo");
static_assert(sizeof(FGameMemberInfo) == 0x000038, "Wrong size on FGameMemberInfo");
static_assert(offsetof(FGameMemberInfo, SquadId) == 0x00000C, "Member 'FGameMemberInfo::SquadId' has a wrong offset!");
static_assert(offsetof(FGameMemberInfo, TeamIndex) == 0x00000D, "Member 'FGameMemberInfo::TeamIndex' has a wrong offset!");
static_assert(offsetof(FGameMemberInfo, MemberUniqueId) == 0x000010, "Member 'FGameMemberInfo::MemberUniqueId' has a wrong offset!");

// ScriptStruct FortniteGame.GameMemberInfoArray
// 0x0018 (0x0120 - 0x0108)
struct FGameMemberInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FGameMemberInfo>                Members;                                           // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AFortGameStateAthena*                   OwningGameState;                                   // 0x0118(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGameMemberInfoArray) == 0x000008, "Wrong alignment on FGameMemberInfoArray");
static_assert(sizeof(FGameMemberInfoArray) == 0x000120, "Wrong size on FGameMemberInfoArray");
static_assert(offsetof(FGameMemberInfoArray, Members) == 0x000108, "Member 'FGameMemberInfoArray::Members' has a wrong offset!");
static_assert(offsetof(FGameMemberInfoArray, OwningGameState) == 0x000118, "Member 'FGameMemberInfoArray::OwningGameState' has a wrong offset!");

// ScriptStruct FortniteGame.GameStateInformation
// 0x0128 (0x0128 - 0x0000)
struct FGameStateInformation final
{
public:
	struct FGameMemberInfoArray                   PlayerInfos;                                       // 0x0000(0x0120)(NativeAccessSpecifierPublic)
	bool                                          bIsTeamBasedGame;                                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameStateInformation) == 0x000008, "Wrong alignment on FGameStateInformation");
static_assert(sizeof(FGameStateInformation) == 0x000128, "Wrong size on FGameStateInformation");
static_assert(offsetof(FGameStateInformation, PlayerInfos) == 0x000000, "Member 'FGameStateInformation::PlayerInfos' has a wrong offset!");
static_assert(offsetof(FGameStateInformation, bIsTeamBasedGame) == 0x000120, "Member 'FGameStateInformation::bIsTeamBasedGame' has a wrong offset!");

// ScriptStruct FortniteGame.FortReplayMetadata
// 0x0378 (0x0378 - 0x0000)
struct FFortReplayMetadata final
{
public:
	class FString                                 ReplayName;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlaylistName;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplayLength;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       RecordingPlayer;                                   // 0x0028(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<float, struct FUniqueNetIdRepl>          RelevancyList;                                     // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FUniqueNetIdRepl, class FString>  PlayerIds;                                         // 0x00A0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            PlayerMatchReportToName;                           // 0x00F0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FUniqueNetIdRepl, class FString>  PlayerIdToMatchReport;                             // 0x0140(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FUniqueNetIdRepl, int32>          PlayerIdToWorldIdentifier;                         // 0x0190(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FReplayKillSummary>             KillSummaries;                                     // 0x01E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FUniqueNetIdRepl, int32>          PlayerFinalRankings;                               // 0x01F0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameStateInformation                  GameInformation;                                   // 0x0240(0x0128)(NativeAccessSpecifierPublic)
	TArray<struct FAthenaTravelLogEntry>          WorldLogEntries;                                   // 0x0368(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortReplayMetadata) == 0x000008, "Wrong alignment on FFortReplayMetadata");
static_assert(sizeof(FFortReplayMetadata) == 0x000378, "Wrong size on FFortReplayMetadata");
static_assert(offsetof(FFortReplayMetadata, ReplayName) == 0x000000, "Member 'FFortReplayMetadata::ReplayName' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, PlaylistName) == 0x000010, "Member 'FFortReplayMetadata::PlaylistName' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, ReplayLength) == 0x000020, "Member 'FFortReplayMetadata::ReplayLength' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, RecordingPlayer) == 0x000028, "Member 'FFortReplayMetadata::RecordingPlayer' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, RelevancyList) == 0x000050, "Member 'FFortReplayMetadata::RelevancyList' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, PlayerIds) == 0x0000A0, "Member 'FFortReplayMetadata::PlayerIds' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, PlayerMatchReportToName) == 0x0000F0, "Member 'FFortReplayMetadata::PlayerMatchReportToName' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, PlayerIdToMatchReport) == 0x000140, "Member 'FFortReplayMetadata::PlayerIdToMatchReport' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, PlayerIdToWorldIdentifier) == 0x000190, "Member 'FFortReplayMetadata::PlayerIdToWorldIdentifier' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, KillSummaries) == 0x0001E0, "Member 'FFortReplayMetadata::KillSummaries' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, PlayerFinalRankings) == 0x0001F0, "Member 'FFortReplayMetadata::PlayerFinalRankings' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, GameInformation) == 0x000240, "Member 'FFortReplayMetadata::GameInformation' has a wrong offset!");
static_assert(offsetof(FFortReplayMetadata, WorldLogEntries) == 0x000368, "Member 'FFortReplayMetadata::WorldLogEntries' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimNode_Flap
// 0x0030 (0x00F8 - 0x00C8)
struct FFortAnimNode_Flap final : public FAnimNode_SkeletalControlBase
{
public:
	TArray<struct FSourceDriver>                  SourceDrives;                                      // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EComponentType                                TargetComponent;                                   // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESourceSelectionMode                          SelectionMode;                                     // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseClamp;                                         // 0x00EA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB[0x1];                                       // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetClampMin;                                    // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetClampMax;                                    // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimNode_Flap) == 0x000008, "Wrong alignment on FFortAnimNode_Flap");
static_assert(sizeof(FFortAnimNode_Flap) == 0x0000F8, "Wrong size on FFortAnimNode_Flap");
static_assert(offsetof(FFortAnimNode_Flap, SourceDrives) == 0x0000C8, "Member 'FFortAnimNode_Flap::SourceDrives' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_Flap, TargetBone) == 0x0000D8, "Member 'FFortAnimNode_Flap::TargetBone' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_Flap, TargetComponent) == 0x0000E8, "Member 'FFortAnimNode_Flap::TargetComponent' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_Flap, SelectionMode) == 0x0000E9, "Member 'FFortAnimNode_Flap::SelectionMode' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_Flap, bUseClamp) == 0x0000EA, "Member 'FFortAnimNode_Flap::bUseClamp' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_Flap, TargetClampMin) == 0x0000EC, "Member 'FFortAnimNode_Flap::TargetClampMin' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_Flap, TargetClampMax) == 0x0000F0, "Member 'FFortAnimNode_Flap::TargetClampMax' has a wrong offset!");

// ScriptStruct FortniteGame.WeaponSeatDefinition
// 0x0030 (0x0030 - 0x0000)
struct FWeaponSeatDefinition final
{
public:
	int32                                         SeatIndex;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWeaponItemDefinition*              VehicleWeapon;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWeaponItemDefinition*              VehicleWeaponOverride;                             // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWeaponItemDefinition*              LastEquippedVehicleWeapon;                         // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponSeatDefinition) == 0x000008, "Wrong alignment on FWeaponSeatDefinition");
static_assert(sizeof(FWeaponSeatDefinition) == 0x000030, "Wrong size on FWeaponSeatDefinition");
static_assert(offsetof(FWeaponSeatDefinition, SeatIndex) == 0x000000, "Member 'FWeaponSeatDefinition::SeatIndex' has a wrong offset!");
static_assert(offsetof(FWeaponSeatDefinition, VehicleWeapon) == 0x000008, "Member 'FWeaponSeatDefinition::VehicleWeapon' has a wrong offset!");
static_assert(offsetof(FWeaponSeatDefinition, VehicleWeaponOverride) == 0x000010, "Member 'FWeaponSeatDefinition::VehicleWeaponOverride' has a wrong offset!");
static_assert(offsetof(FWeaponSeatDefinition, LastEquippedVehicleWeapon) == 0x000018, "Member 'FWeaponSeatDefinition::LastEquippedVehicleWeapon' has a wrong offset!");

// ScriptStruct FortniteGame.TargetDataEntry
// 0x0060 (0x0060 - 0x0000)
struct FTargetDataEntry final
{
public:
	TArray<class AAthenaBuildingFoundationObjective*> Targets;                                           // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FoundationTag;                                     // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         HealthPercentRequiredToMoveOn;                     // 0x0018(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          bFindInStormCircle;                                // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         NumberOfFoundationsToFind;                         // 0x0040(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTargetDataEntry) == 0x000008, "Wrong alignment on FTargetDataEntry");
static_assert(sizeof(FTargetDataEntry) == 0x000060, "Wrong size on FTargetDataEntry");
static_assert(offsetof(FTargetDataEntry, Targets) == 0x000000, "Member 'FTargetDataEntry::Targets' has a wrong offset!");
static_assert(offsetof(FTargetDataEntry, FoundationTag) == 0x000010, "Member 'FTargetDataEntry::FoundationTag' has a wrong offset!");
static_assert(offsetof(FTargetDataEntry, HealthPercentRequiredToMoveOn) == 0x000018, "Member 'FTargetDataEntry::HealthPercentRequiredToMoveOn' has a wrong offset!");
static_assert(offsetof(FTargetDataEntry, bFindInStormCircle) == 0x000038, "Member 'FTargetDataEntry::bFindInStormCircle' has a wrong offset!");
static_assert(offsetof(FTargetDataEntry, NumberOfFoundationsToFind) == 0x000040, "Member 'FTargetDataEntry::NumberOfFoundationsToFind' has a wrong offset!");

// ScriptStruct FortniteGame.FortSimpleGameStats
// 0x0018 (0x0018 - 0x0000)
struct FFortSimpleGameStats final
{
public:
	int32                                         GamesPlayed;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsPlayed;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCount;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestResult;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastReviewPromptDay;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSimpleGameStats) == 0x000004, "Wrong alignment on FFortSimpleGameStats");
static_assert(sizeof(FFortSimpleGameStats) == 0x000018, "Wrong size on FFortSimpleGameStats");
static_assert(offsetof(FFortSimpleGameStats, GamesPlayed) == 0x000000, "Member 'FFortSimpleGameStats::GamesPlayed' has a wrong offset!");
static_assert(offsetof(FFortSimpleGameStats, SecondsPlayed) == 0x000004, "Member 'FFortSimpleGameStats::SecondsPlayed' has a wrong offset!");
static_assert(offsetof(FFortSimpleGameStats, KillCount) == 0x000008, "Member 'FFortSimpleGameStats::KillCount' has a wrong offset!");
static_assert(offsetof(FFortSimpleGameStats, BestResult) == 0x00000C, "Member 'FFortSimpleGameStats::BestResult' has a wrong offset!");
static_assert(offsetof(FFortSimpleGameStats, LastReviewPromptDay) == 0x000010, "Member 'FFortSimpleGameStats::LastReviewPromptDay' has a wrong offset!");

// ScriptStruct FortniteGame.AIDirectorDebugInfo
// 0x0028 (0x0028 - 0x0000)
struct FAIDirectorDebugInfo final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 DebugGraphData;                                    // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIDirectorDebugInfo) == 0x000008, "Wrong alignment on FAIDirectorDebugInfo");
static_assert(sizeof(FAIDirectorDebugInfo) == 0x000028, "Wrong size on FAIDirectorDebugInfo");
static_assert(offsetof(FAIDirectorDebugInfo, Timestamp) == 0x000000, "Member 'FAIDirectorDebugInfo::Timestamp' has a wrong offset!");
static_assert(offsetof(FAIDirectorDebugInfo, DebugGraphData) == 0x000008, "Member 'FAIDirectorDebugInfo::DebugGraphData' has a wrong offset!");

// ScriptStruct FortniteGame.EmptyServerReservation
// 0x0058 (0x0058 - 0x0000)
struct FEmptyServerReservation final
{
public:
	int32                                         PlaylistId;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ZoneInstanceId;                                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WUID;                                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       WorldDataOwner;                                    // 0x0028(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMakePrivate;                                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMatchmakingPool                          MatchmakingPool;                                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesMatchmakingV2;                                // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEmptyServerReservation) == 0x000008, "Wrong alignment on FEmptyServerReservation");
static_assert(sizeof(FEmptyServerReservation) == 0x000058, "Wrong size on FEmptyServerReservation");
static_assert(offsetof(FEmptyServerReservation, PlaylistId) == 0x000000, "Member 'FEmptyServerReservation::PlaylistId' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, ZoneInstanceId) == 0x000008, "Member 'FEmptyServerReservation::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, WUID) == 0x000018, "Member 'FEmptyServerReservation::WUID' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, WorldDataOwner) == 0x000028, "Member 'FEmptyServerReservation::WorldDataOwner' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, bMakePrivate) == 0x000050, "Member 'FEmptyServerReservation::bMakePrivate' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, MatchmakingPool) == 0x000051, "Member 'FEmptyServerReservation::MatchmakingPool' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, bUsesMatchmakingV2) == 0x000052, "Member 'FEmptyServerReservation::bUsesMatchmakingV2' has a wrong offset!");

// ScriptStruct FortniteGame.AlterationWeightData
// 0x0028 (0x0028 - 0x0000)
struct FAlterationWeightData final
{
public:
	class FString                                 AID;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialRollWeight;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ExclusionNames;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlterationWeightData) == 0x000008, "Wrong alignment on FAlterationWeightData");
static_assert(sizeof(FAlterationWeightData) == 0x000028, "Wrong size on FAlterationWeightData");
static_assert(offsetof(FAlterationWeightData, AID) == 0x000000, "Member 'FAlterationWeightData::AID' has a wrong offset!");
static_assert(offsetof(FAlterationWeightData, InitialRollWeight) == 0x000010, "Member 'FAlterationWeightData::InitialRollWeight' has a wrong offset!");
static_assert(offsetof(FAlterationWeightData, ExclusionNames) == 0x000018, "Member 'FAlterationWeightData::ExclusionNames' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseSquadAttributeBonus
// 0x0030 (0x0030 - 0x0000)
struct FHomebaseSquadAttributeBonus final
{
public:
	struct FGameplayAttribute                     AttributeGranted;                                  // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   BonusCurve;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseSquadAttributeBonus) == 0x000008, "Wrong alignment on FHomebaseSquadAttributeBonus");
static_assert(sizeof(FHomebaseSquadAttributeBonus) == 0x000030, "Wrong size on FHomebaseSquadAttributeBonus");
static_assert(offsetof(FHomebaseSquadAttributeBonus, AttributeGranted) == 0x000000, "Member 'FHomebaseSquadAttributeBonus::AttributeGranted' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadAttributeBonus, BonusCurve) == 0x000020, "Member 'FHomebaseSquadAttributeBonus::BonusCurve' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseSquadSlot
// 0x0068 (0x0068 - 0x0000)
struct FHomebaseSquadSlot final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<EFortItemType>                         ValidSlottableItemTypes;                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagFilter;                                         // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FHomebaseSquadAttributeBonus>   SlottingBonuses;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCurveTable*                            PersonalityMatchBonusTable;                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESquadSlotType                                SlotType;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHomebaseSquadSlot) == 0x000008, "Wrong alignment on FHomebaseSquadSlot");
static_assert(sizeof(FHomebaseSquadSlot) == 0x000068, "Wrong size on FHomebaseSquadSlot");
static_assert(offsetof(FHomebaseSquadSlot, DisplayName) == 0x000000, "Member 'FHomebaseSquadSlot::DisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadSlot, ValidSlottableItemTypes) == 0x000018, "Member 'FHomebaseSquadSlot::ValidSlottableItemTypes' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadSlot, TagFilter) == 0x000028, "Member 'FHomebaseSquadSlot::TagFilter' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadSlot, SlottingBonuses) == 0x000048, "Member 'FHomebaseSquadSlot::SlottingBonuses' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadSlot, PersonalityMatchBonusTable) == 0x000058, "Member 'FHomebaseSquadSlot::PersonalityMatchBonusTable' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadSlot, SlotType) == 0x000060, "Member 'FHomebaseSquadSlot::SlotType' has a wrong offset!");

// ScriptStruct FortniteGame.VehicleTrickInfo
// 0x0150 (0x0150 - 0x0000)
struct alignas(0x08) FVehicleTrickInfo final
{
public:
	float                                         LastOnGroundTime;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAirTrick;                                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreditTrick;                                      // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MCreditDisabledTime;                               // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrickDeactivated;                                 // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStuckLanding;                                     // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrickScore;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x90];                                      // 0x0014(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrickAxisCount;                                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDoingRotationTrick;                               // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AirControlsAlpha;                                  // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirDistance;                                       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirDistanceSqrd;                                   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirTime;                                           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirHeight;                                         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeAtLaunch;                                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationAtLaunch;                                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ForwardVectorAtLaunch;                             // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVectorAtLaunch;                                  // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FlatForwardVectorAtLaunch;                         // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrevForwardVec;                                    // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrevRightVec;                                      // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrevUpVec;                                         // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PeterPanCount;                                     // 0x0130(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StoopingSquirrelCount;                             // 0x0134(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDidPeterPan : 1;                                  // 0x0138(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDidStoopingSquirrel : 1;                          // 0x0138(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_139[0x17];                                     // 0x0139(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleTrickInfo) == 0x000008, "Wrong alignment on FVehicleTrickInfo");
static_assert(sizeof(FVehicleTrickInfo) == 0x000150, "Wrong size on FVehicleTrickInfo");
static_assert(offsetof(FVehicleTrickInfo, LastOnGroundTime) == 0x000000, "Member 'FVehicleTrickInfo::LastOnGroundTime' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, bInAirTrick) == 0x000004, "Member 'FVehicleTrickInfo::bInAirTrick' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, bCreditTrick) == 0x000005, "Member 'FVehicleTrickInfo::bCreditTrick' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, MCreditDisabledTime) == 0x000008, "Member 'FVehicleTrickInfo::MCreditDisabledTime' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, bTrickDeactivated) == 0x00000C, "Member 'FVehicleTrickInfo::bTrickDeactivated' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, bStuckLanding) == 0x00000D, "Member 'FVehicleTrickInfo::bStuckLanding' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, TrickScore) == 0x000010, "Member 'FVehicleTrickInfo::TrickScore' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, TrickAxisCount) == 0x0000A4, "Member 'FVehicleTrickInfo::TrickAxisCount' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, bDoingRotationTrick) == 0x0000C0, "Member 'FVehicleTrickInfo::bDoingRotationTrick' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, AirControlsAlpha) == 0x0000C4, "Member 'FVehicleTrickInfo::AirControlsAlpha' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, AirDistance) == 0x0000C8, "Member 'FVehicleTrickInfo::AirDistance' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, AirDistanceSqrd) == 0x0000CC, "Member 'FVehicleTrickInfo::AirDistanceSqrd' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, AirTime) == 0x0000D0, "Member 'FVehicleTrickInfo::AirTime' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, AirHeight) == 0x0000D4, "Member 'FVehicleTrickInfo::AirHeight' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, TimeAtLaunch) == 0x0000D8, "Member 'FVehicleTrickInfo::TimeAtLaunch' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, LocationAtLaunch) == 0x0000DC, "Member 'FVehicleTrickInfo::LocationAtLaunch' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, ForwardVectorAtLaunch) == 0x0000E8, "Member 'FVehicleTrickInfo::ForwardVectorAtLaunch' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, UpVectorAtLaunch) == 0x0000F4, "Member 'FVehicleTrickInfo::UpVectorAtLaunch' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, FlatForwardVectorAtLaunch) == 0x000100, "Member 'FVehicleTrickInfo::FlatForwardVectorAtLaunch' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, PrevForwardVec) == 0x00010C, "Member 'FVehicleTrickInfo::PrevForwardVec' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, PrevRightVec) == 0x000118, "Member 'FVehicleTrickInfo::PrevRightVec' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, PrevUpVec) == 0x000124, "Member 'FVehicleTrickInfo::PrevUpVec' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, PeterPanCount) == 0x000130, "Member 'FVehicleTrickInfo::PeterPanCount' has a wrong offset!");
static_assert(offsetof(FVehicleTrickInfo, StoopingSquirrelCount) == 0x000134, "Member 'FVehicleTrickInfo::StoopingSquirrelCount' has a wrong offset!");

// ScriptStruct FortniteGame.CreativeOptionVariableBase
// 0x000C (0x000C - 0x0000)
struct FCreativeOptionVariableBase final
{
public:
	struct FGameplayTag                           VariableTag;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeOptionVariableBase) == 0x000004, "Wrong alignment on FCreativeOptionVariableBase");
static_assert(sizeof(FCreativeOptionVariableBase) == 0x00000C, "Wrong size on FCreativeOptionVariableBase");
static_assert(offsetof(FCreativeOptionVariableBase, VariableTag) == 0x000000, "Member 'FCreativeOptionVariableBase::VariableTag' has a wrong offset!");
static_assert(offsetof(FCreativeOptionVariableBase, Value) == 0x000008, "Member 'FCreativeOptionVariableBase::Value' has a wrong offset!");

// ScriptStruct FortniteGame.AlterationSlot
// 0x0024 (0x0024 - 0x0000)
struct FAlterationSlot final
{
public:
	int32                                         UnlockLevel;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   UnlockRarity;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SlotDefinitionRow;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespeccable;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SlotRarityInitRow;                                 // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   SlotInitMin;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   SlotInitMax;                                       // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotInitIndex;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlterationSlot) == 0x000004, "Wrong alignment on FAlterationSlot");
static_assert(sizeof(FAlterationSlot) == 0x000024, "Wrong size on FAlterationSlot");
static_assert(offsetof(FAlterationSlot, UnlockLevel) == 0x000000, "Member 'FAlterationSlot::UnlockLevel' has a wrong offset!");
static_assert(offsetof(FAlterationSlot, UnlockRarity) == 0x000004, "Member 'FAlterationSlot::UnlockRarity' has a wrong offset!");
static_assert(offsetof(FAlterationSlot, SlotDefinitionRow) == 0x000008, "Member 'FAlterationSlot::SlotDefinitionRow' has a wrong offset!");
static_assert(offsetof(FAlterationSlot, bRespeccable) == 0x000010, "Member 'FAlterationSlot::bRespeccable' has a wrong offset!");
static_assert(offsetof(FAlterationSlot, SlotRarityInitRow) == 0x000014, "Member 'FAlterationSlot::SlotRarityInitRow' has a wrong offset!");
static_assert(offsetof(FAlterationSlot, SlotInitMin) == 0x00001C, "Member 'FAlterationSlot::SlotInitMin' has a wrong offset!");
static_assert(offsetof(FAlterationSlot, SlotInitMax) == 0x00001D, "Member 'FAlterationSlot::SlotInitMax' has a wrong offset!");
static_assert(offsetof(FAlterationSlot, SlotInitIndex) == 0x000020, "Member 'FAlterationSlot::SlotInitIndex' has a wrong offset!");

// ScriptStruct FortniteGame.AlterationSlotsLoadout
// 0x0010 (0x0018 - 0x0008)
struct FAlterationSlotsLoadout final : public FTableRowBase
{
public:
	TArray<struct FAlterationSlot>                AlterationSlots;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlterationSlotsLoadout) == 0x000008, "Wrong alignment on FAlterationSlotsLoadout");
static_assert(sizeof(FAlterationSlotsLoadout) == 0x000018, "Wrong size on FAlterationSlotsLoadout");
static_assert(offsetof(FAlterationSlotsLoadout, AlterationSlots) == 0x000008, "Member 'FAlterationSlotsLoadout::AlterationSlots' has a wrong offset!");

// ScriptStruct FortniteGame.ItemAndCount
// 0x0010 (0x0010 - 0x0000)
struct FItemAndCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    Item;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemAndCount) == 0x000008, "Wrong alignment on FItemAndCount");
static_assert(sizeof(FItemAndCount) == 0x000010, "Wrong size on FItemAndCount");
static_assert(offsetof(FItemAndCount, Count) == 0x000000, "Member 'FItemAndCount::Count' has a wrong offset!");
static_assert(offsetof(FItemAndCount, Item) == 0x000008, "Member 'FItemAndCount::Item' has a wrong offset!");

// ScriptStruct FortniteGame.ItemLoadoutContainer
// 0x0010 (0x0010 - 0x0000)
struct FItemLoadoutContainer final
{
public:
	TArray<struct FItemAndCount>                  Loadout;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemLoadoutContainer) == 0x000008, "Wrong alignment on FItemLoadoutContainer");
static_assert(sizeof(FItemLoadoutContainer) == 0x000010, "Wrong size on FItemLoadoutContainer");
static_assert(offsetof(FItemLoadoutContainer, Loadout) == 0x000000, "Member 'FItemLoadoutContainer::Loadout' has a wrong offset!");

// ScriptStruct FortniteGame.GhostModeRepData
// 0x0018 (0x0018 - 0x0000)
struct FGhostModeRepData final
{
public:
	bool                                          bInGhostMode;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItemDefinition*               GhostModeItemDef;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousFocusedSlot;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeExitedGhostMode;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGhostModeRepData) == 0x000008, "Wrong alignment on FGhostModeRepData");
static_assert(sizeof(FGhostModeRepData) == 0x000018, "Wrong size on FGhostModeRepData");
static_assert(offsetof(FGhostModeRepData, bInGhostMode) == 0x000000, "Member 'FGhostModeRepData::bInGhostMode' has a wrong offset!");
static_assert(offsetof(FGhostModeRepData, GhostModeItemDef) == 0x000008, "Member 'FGhostModeRepData::GhostModeItemDef' has a wrong offset!");
static_assert(offsetof(FGhostModeRepData, PreviousFocusedSlot) == 0x000010, "Member 'FGhostModeRepData::PreviousFocusedSlot' has a wrong offset!");
static_assert(offsetof(FGhostModeRepData, TimeExitedGhostMode) == 0x000014, "Member 'FGhostModeRepData::TimeExitedGhostMode' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerDeathReport
// 0x0050 (0x0050 - 0x0000)
struct FFortPlayerDeathReport final
{
public:
	float                                         ServerTimeForRespawn;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTimeForResurrect;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LethalDamage;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       KillerPlayerState;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              KillerPawn;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDroppedBackpack : 1;                              // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNotifyUI : 1;                                     // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerDeathReport) == 0x000008, "Wrong alignment on FFortPlayerDeathReport");
static_assert(sizeof(FFortPlayerDeathReport) == 0x000050, "Wrong size on FFortPlayerDeathReport");
static_assert(offsetof(FFortPlayerDeathReport, ServerTimeForRespawn) == 0x000000, "Member 'FFortPlayerDeathReport::ServerTimeForRespawn' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, ServerTimeForResurrect) == 0x000004, "Member 'FFortPlayerDeathReport::ServerTimeForResurrect' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, LethalDamage) == 0x000008, "Member 'FFortPlayerDeathReport::LethalDamage' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, KillerPlayerState) == 0x000010, "Member 'FFortPlayerDeathReport::KillerPlayerState' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, KillerPawn) == 0x000018, "Member 'FFortPlayerDeathReport::KillerPawn' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, DamageCauser) == 0x000020, "Member 'FFortPlayerDeathReport::DamageCauser' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, Tags) == 0x000030, "Member 'FFortPlayerDeathReport::Tags' has a wrong offset!");

// ScriptStruct FortniteGame.FortDeathCauseInfoVariant
// 0x0058 (0x0058 - 0x0000)
struct FFortDeathCauseInfoVariant final
{
public:
	class FString                                 DisplayText;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DeathCauseTag;                                     // 0x0010(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           SelfInflictedMessages;                             // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           SelfInflictedDBNOMessages;                         // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           EliminatedMessages;                                // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           EliminatedDBNOMessages;                            // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDeathCauseInfoVariant) == 0x000008, "Wrong alignment on FFortDeathCauseInfoVariant");
static_assert(sizeof(FFortDeathCauseInfoVariant) == 0x000058, "Wrong size on FFortDeathCauseInfoVariant");
static_assert(offsetof(FFortDeathCauseInfoVariant, DisplayText) == 0x000000, "Member 'FFortDeathCauseInfoVariant::DisplayText' has a wrong offset!");
static_assert(offsetof(FFortDeathCauseInfoVariant, DeathCauseTag) == 0x000010, "Member 'FFortDeathCauseInfoVariant::DeathCauseTag' has a wrong offset!");
static_assert(offsetof(FFortDeathCauseInfoVariant, SelfInflictedMessages) == 0x000018, "Member 'FFortDeathCauseInfoVariant::SelfInflictedMessages' has a wrong offset!");
static_assert(offsetof(FFortDeathCauseInfoVariant, SelfInflictedDBNOMessages) == 0x000028, "Member 'FFortDeathCauseInfoVariant::SelfInflictedDBNOMessages' has a wrong offset!");
static_assert(offsetof(FFortDeathCauseInfoVariant, EliminatedMessages) == 0x000038, "Member 'FFortDeathCauseInfoVariant::EliminatedMessages' has a wrong offset!");
static_assert(offsetof(FFortDeathCauseInfoVariant, EliminatedDBNOMessages) == 0x000048, "Member 'FFortDeathCauseInfoVariant::EliminatedDBNOMessages' has a wrong offset!");

// ScriptStruct FortniteGame.FortDeathCauseInfo
// 0x0068 (0x0068 - 0x0000)
struct FFortDeathCauseInfo final
{
public:
	class FString                                 DisplayText;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DeathCauseTag;                                     // 0x0010(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           SelfInflictedMessages;                             // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           SelfInflictedDBNOMessages;                         // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           EliminatedMessages;                                // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           EliminatedDBNOMessages;                            // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortDeathCauseInfoVariant>     DeathCauseInfoVariants;                            // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDeathCauseInfo) == 0x000008, "Wrong alignment on FFortDeathCauseInfo");
static_assert(sizeof(FFortDeathCauseInfo) == 0x000068, "Wrong size on FFortDeathCauseInfo");
static_assert(offsetof(FFortDeathCauseInfo, DisplayText) == 0x000000, "Member 'FFortDeathCauseInfo::DisplayText' has a wrong offset!");
static_assert(offsetof(FFortDeathCauseInfo, DeathCauseTag) == 0x000010, "Member 'FFortDeathCauseInfo::DeathCauseTag' has a wrong offset!");
static_assert(offsetof(FFortDeathCauseInfo, SelfInflictedMessages) == 0x000018, "Member 'FFortDeathCauseInfo::SelfInflictedMessages' has a wrong offset!");
static_assert(offsetof(FFortDeathCauseInfo, SelfInflictedDBNOMessages) == 0x000028, "Member 'FFortDeathCauseInfo::SelfInflictedDBNOMessages' has a wrong offset!");
static_assert(offsetof(FFortDeathCauseInfo, EliminatedMessages) == 0x000038, "Member 'FFortDeathCauseInfo::EliminatedMessages' has a wrong offset!");
static_assert(offsetof(FFortDeathCauseInfo, EliminatedDBNOMessages) == 0x000048, "Member 'FFortDeathCauseInfo::EliminatedDBNOMessages' has a wrong offset!");
static_assert(offsetof(FFortDeathCauseInfo, DeathCauseInfoVariants) == 0x000058, "Member 'FFortDeathCauseInfo::DeathCauseInfoVariants' has a wrong offset!");

// ScriptStruct FortniteGame.ReplicatedStatValues
// 0x0008 (0x0008 - 0x0000)
struct FReplicatedStatValues final
{
public:
	int32                                         StatValue;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreValue;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicatedStatValues) == 0x000004, "Wrong alignment on FReplicatedStatValues");
static_assert(sizeof(FReplicatedStatValues) == 0x000008, "Wrong size on FReplicatedStatValues");
static_assert(offsetof(FReplicatedStatValues, StatValue) == 0x000000, "Member 'FReplicatedStatValues::StatValue' has a wrong offset!");
static_assert(offsetof(FReplicatedStatValues, ScoreValue) == 0x000004, "Member 'FReplicatedStatValues::ScoreValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortExperienceDelta
// 0x0024 (0x0024 - 0x0000)
struct FFortExperienceDelta final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xp;                                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseXPEarned;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusXPEarned;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostXPEarned;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostXPMissed;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestXPEarned;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupBoostXPEarned;                                // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortIsFinalXpUpdate                          IsFinalXpUpdate;                                   // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortExperienceDelta) == 0x000004, "Wrong alignment on FFortExperienceDelta");
static_assert(sizeof(FFortExperienceDelta) == 0x000024, "Wrong size on FFortExperienceDelta");
static_assert(offsetof(FFortExperienceDelta, Level) == 0x000000, "Member 'FFortExperienceDelta::Level' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, Xp) == 0x000004, "Member 'FFortExperienceDelta::Xp' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, BaseXPEarned) == 0x000008, "Member 'FFortExperienceDelta::BaseXPEarned' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, BonusXPEarned) == 0x00000C, "Member 'FFortExperienceDelta::BonusXPEarned' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, BoostXPEarned) == 0x000010, "Member 'FFortExperienceDelta::BoostXPEarned' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, BoostXPMissed) == 0x000014, "Member 'FFortExperienceDelta::BoostXPMissed' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, RestXPEarned) == 0x000018, "Member 'FFortExperienceDelta::RestXPEarned' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, GroupBoostXPEarned) == 0x00001C, "Member 'FFortExperienceDelta::GroupBoostXPEarned' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, IsFinalXpUpdate) == 0x000020, "Member 'FFortExperienceDelta::IsFinalXpUpdate' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerScoreReport
// 0x0298 (0x0298 - 0x0000)
struct FFortPlayerScoreReport final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPlayerState>        PlayerState;                                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     PlayerTeam;                                        // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReplicatedStatValues                  ReplicatedStats_Campaign[0x22];                    // 0x0044(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FReplicatedStatValues                  ReplicatedStats_Zone[0x22];                        // 0x0154(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InitialLevel;                                      // 0x0264(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialExperienceAmount;                           // 0x0268(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortExperienceDelta                   ExperienceInfoDelta;                               // 0x026C(0x0024)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LastExperienceDeltaAmount;                         // 0x0290(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastScoreDeltaAmount;                              // 0x0294(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerScoreReport) == 0x000008, "Wrong alignment on FFortPlayerScoreReport");
static_assert(sizeof(FFortPlayerScoreReport) == 0x000298, "Wrong size on FFortPlayerScoreReport");
static_assert(offsetof(FFortPlayerScoreReport, PlayerID) == 0x000000, "Member 'FFortPlayerScoreReport::PlayerID' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, PlayerName) == 0x000028, "Member 'FFortPlayerScoreReport::PlayerName' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, PlayerState) == 0x000038, "Member 'FFortPlayerScoreReport::PlayerState' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, PlayerTeam) == 0x000040, "Member 'FFortPlayerScoreReport::PlayerTeam' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, ReplicatedStats_Campaign) == 0x000044, "Member 'FFortPlayerScoreReport::ReplicatedStats_Campaign' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, ReplicatedStats_Zone) == 0x000154, "Member 'FFortPlayerScoreReport::ReplicatedStats_Zone' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, InitialLevel) == 0x000264, "Member 'FFortPlayerScoreReport::InitialLevel' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, InitialExperienceAmount) == 0x000268, "Member 'FFortPlayerScoreReport::InitialExperienceAmount' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, ExperienceInfoDelta) == 0x00026C, "Member 'FFortPlayerScoreReport::ExperienceInfoDelta' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, LastExperienceDeltaAmount) == 0x000290, "Member 'FFortPlayerScoreReport::LastExperienceDeltaAmount' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, LastScoreDeltaAmount) == 0x000294, "Member 'FFortPlayerScoreReport::LastScoreDeltaAmount' has a wrong offset!");

// ScriptStruct FortniteGame.PlaneLootEntry
// 0x0028 (0x0028 - 0x0000)
struct FPlaneLootEntry final
{
public:
	class FName                                   LootTableName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         LootWeight;                                        // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaneLootEntry) == 0x000008, "Wrong alignment on FPlaneLootEntry");
static_assert(sizeof(FPlaneLootEntry) == 0x000028, "Wrong size on FPlaneLootEntry");
static_assert(offsetof(FPlaneLootEntry, LootTableName) == 0x000000, "Member 'FPlaneLootEntry::LootTableName' has a wrong offset!");
static_assert(offsetof(FPlaneLootEntry, LootWeight) == 0x000008, "Member 'FPlaneLootEntry::LootWeight' has a wrong offset!");

// ScriptStruct FortniteGame.PlaneLootHeightEntry
// 0x0070 (0x0070 - 0x0000)
struct FPlaneLootHeightEntry final
{
public:
	struct FScalableFloat                         RelativeWeight;                                    // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinHeightOffGround;                                // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxHeightOffGround;                                // 0x0040(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FPlaneLootEntry>                LootEntries;                                       // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaneLootHeightEntry) == 0x000008, "Wrong alignment on FPlaneLootHeightEntry");
static_assert(sizeof(FPlaneLootHeightEntry) == 0x000070, "Wrong size on FPlaneLootHeightEntry");
static_assert(offsetof(FPlaneLootHeightEntry, RelativeWeight) == 0x000000, "Member 'FPlaneLootHeightEntry::RelativeWeight' has a wrong offset!");
static_assert(offsetof(FPlaneLootHeightEntry, MinHeightOffGround) == 0x000020, "Member 'FPlaneLootHeightEntry::MinHeightOffGround' has a wrong offset!");
static_assert(offsetof(FPlaneLootHeightEntry, MaxHeightOffGround) == 0x000040, "Member 'FPlaneLootHeightEntry::MaxHeightOffGround' has a wrong offset!");
static_assert(offsetof(FPlaneLootHeightEntry, LootEntries) == 0x000060, "Member 'FPlaneLootHeightEntry::LootEntries' has a wrong offset!");

// ScriptStruct FortniteGame.PlaneLootTypeEntry
// 0x0030 (0x0030 - 0x0000)
struct FPlaneLootTypeEntry final
{
public:
	struct FScalableFloat                         RelativeWeight;                                    // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FPlaneLootHeightEntry>          LootHeightEntries;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaneLootTypeEntry) == 0x000008, "Wrong alignment on FPlaneLootTypeEntry");
static_assert(sizeof(FPlaneLootTypeEntry) == 0x000030, "Wrong size on FPlaneLootTypeEntry");
static_assert(offsetof(FPlaneLootTypeEntry, RelativeWeight) == 0x000000, "Member 'FPlaneLootTypeEntry::RelativeWeight' has a wrong offset!");
static_assert(offsetof(FPlaneLootTypeEntry, LootHeightEntries) == 0x000020, "Member 'FPlaneLootTypeEntry::LootHeightEntries' has a wrong offset!");

// ScriptStruct FortniteGame.GoalSelectionCriteria
// 0x0008 (0x0008 - 0x0000)
struct FGoalSelectionCriteria final
{
public:
	class UEnvQuery*                              GoalSelectionQuery;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalSelectionCriteria) == 0x000008, "Wrong alignment on FGoalSelectionCriteria");
static_assert(sizeof(FGoalSelectionCriteria) == 0x000008, "Wrong size on FGoalSelectionCriteria");
static_assert(offsetof(FGoalSelectionCriteria, GoalSelectionQuery) == 0x000000, "Member 'FGoalSelectionCriteria::GoalSelectionQuery' has a wrong offset!");

// ScriptStruct FortniteGame.PawnGoalSelectionCriteria
// 0x0050 (0x0050 - 0x0000)
struct FPawnGoalSelectionCriteria final
{
public:
	struct FGameplayTagContainer                  IncludeEnemiesWithTags;                            // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExcludeEnemiesWithTags;                            // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FGoalSelectionCriteria>         GoalSelectionCriteria;                             // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnGoalSelectionCriteria) == 0x000008, "Wrong alignment on FPawnGoalSelectionCriteria");
static_assert(sizeof(FPawnGoalSelectionCriteria) == 0x000050, "Wrong size on FPawnGoalSelectionCriteria");
static_assert(offsetof(FPawnGoalSelectionCriteria, IncludeEnemiesWithTags) == 0x000000, "Member 'FPawnGoalSelectionCriteria::IncludeEnemiesWithTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionCriteria, ExcludeEnemiesWithTags) == 0x000020, "Member 'FPawnGoalSelectionCriteria::ExcludeEnemiesWithTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionCriteria, GoalSelectionCriteria) == 0x000040, "Member 'FPawnGoalSelectionCriteria::GoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteGame.PawnGoalSelectionTableEntry
// 0x0070 (0x0070 - 0x0000)
struct FPawnGoalSelectionTableEntry final
{
public:
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FPawnGoalSelectionCriteria             PawnGoalSelectionCriteria;                         // 0x0020(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnGoalSelectionTableEntry) == 0x000008, "Wrong alignment on FPawnGoalSelectionTableEntry");
static_assert(sizeof(FPawnGoalSelectionTableEntry) == 0x000070, "Wrong size on FPawnGoalSelectionTableEntry");
static_assert(offsetof(FPawnGoalSelectionTableEntry, RequiredGameplayTags) == 0x000000, "Member 'FPawnGoalSelectionTableEntry::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionTableEntry, PawnGoalSelectionCriteria) == 0x000020, "Member 'FPawnGoalSelectionTableEntry::PawnGoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteGame.FortAttributeInitializationKey
// 0x0010 (0x0010 - 0x0000)
struct FFortAttributeInitializationKey final
{
public:
	class FName                                   AttributeInitCategory;                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeInitSubCategory;                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAttributeInitializationKey) == 0x000004, "Wrong alignment on FFortAttributeInitializationKey");
static_assert(sizeof(FFortAttributeInitializationKey) == 0x000010, "Wrong size on FFortAttributeInitializationKey");
static_assert(offsetof(FFortAttributeInitializationKey, AttributeInitCategory) == 0x000000, "Member 'FFortAttributeInitializationKey::AttributeInitCategory' has a wrong offset!");
static_assert(offsetof(FFortAttributeInitializationKey, AttributeInitSubCategory) == 0x000008, "Member 'FFortAttributeInitializationKey::AttributeInitSubCategory' has a wrong offset!");

// ScriptStruct FortniteGame.HeroSubclassRarityAttributeData
// 0x0010 (0x0010 - 0x0000)
struct FHeroSubclassRarityAttributeData final
{
public:
	TArray<struct FFortAttributeInitializationKey> AttributeInitKeysPerTier;                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FHeroSubclassRarityAttributeData) == 0x000008, "Wrong alignment on FHeroSubclassRarityAttributeData");
static_assert(sizeof(FHeroSubclassRarityAttributeData) == 0x000010, "Wrong size on FHeroSubclassRarityAttributeData");
static_assert(offsetof(FHeroSubclassRarityAttributeData, AttributeInitKeysPerTier) == 0x000000, "Member 'FHeroSubclassRarityAttributeData::AttributeInitKeysPerTier' has a wrong offset!");

// ScriptStruct FortniteGame.HeroSubclassAttributeData
// 0x0030 (0x0030 - 0x0000)
struct FHeroSubclassAttributeData final
{
public:
	struct FGameplayTagContainer                  HeroClassAndSubclassTags;                          // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FHeroSubclassRarityAttributeData> AttributeInitKeysPerRarity;                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FHeroSubclassAttributeData) == 0x000008, "Wrong alignment on FHeroSubclassAttributeData");
static_assert(sizeof(FHeroSubclassAttributeData) == 0x000030, "Wrong size on FHeroSubclassAttributeData");
static_assert(offsetof(FHeroSubclassAttributeData, HeroClassAndSubclassTags) == 0x000000, "Member 'FHeroSubclassAttributeData::HeroClassAndSubclassTags' has a wrong offset!");
static_assert(offsetof(FHeroSubclassAttributeData, AttributeInitKeysPerRarity) == 0x000020, "Member 'FHeroSubclassAttributeData::AttributeInitKeysPerRarity' has a wrong offset!");

// ScriptStruct FortniteGame.PartyAssistObjectiveData
// 0x0010 (0x0010 - 0x0000)
struct FPartyAssistObjectiveData final
{
public:
	class FName                                   BackendName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompleted;                                        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyAssistObjectiveData) == 0x000004, "Wrong alignment on FPartyAssistObjectiveData");
static_assert(sizeof(FPartyAssistObjectiveData) == 0x000010, "Wrong size on FPartyAssistObjectiveData");
static_assert(offsetof(FPartyAssistObjectiveData, BackendName) == 0x000000, "Member 'FPartyAssistObjectiveData::BackendName' has a wrong offset!");
static_assert(offsetof(FPartyAssistObjectiveData, Count) == 0x000008, "Member 'FPartyAssistObjectiveData::Count' has a wrong offset!");
static_assert(offsetof(FPartyAssistObjectiveData, bCompleted) == 0x00000C, "Member 'FPartyAssistObjectiveData::bCompleted' has a wrong offset!");

// ScriptStruct FortniteGame.PartyAssistQuestData
// 0x0028 (0x0028 - 0x0000)
struct FPartyAssistQuestData final
{
public:
	class UFortQuestItemDefinition*               AssistedQuestDef;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       AssistedPlayer;                                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentQuestStage;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuestCompleted;                                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPartyAssistObjectiveData>      Objectives;                                        // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyAssistQuestData) == 0x000008, "Wrong alignment on FPartyAssistQuestData");
static_assert(sizeof(FPartyAssistQuestData) == 0x000028, "Wrong size on FPartyAssistQuestData");
static_assert(offsetof(FPartyAssistQuestData, AssistedQuestDef) == 0x000000, "Member 'FPartyAssistQuestData::AssistedQuestDef' has a wrong offset!");
static_assert(offsetof(FPartyAssistQuestData, AssistedPlayer) == 0x000008, "Member 'FPartyAssistQuestData::AssistedPlayer' has a wrong offset!");
static_assert(offsetof(FPartyAssistQuestData, CurrentQuestStage) == 0x000010, "Member 'FPartyAssistQuestData::CurrentQuestStage' has a wrong offset!");
static_assert(offsetof(FPartyAssistQuestData, QuestCompleted) == 0x000014, "Member 'FPartyAssistQuestData::QuestCompleted' has a wrong offset!");
static_assert(offsetof(FPartyAssistQuestData, Objectives) == 0x000018, "Member 'FPartyAssistQuestData::Objectives' has a wrong offset!");

// ScriptStruct FortniteGame.FortVoteConfig
// 0x0014 (0x0014 - 0x0000)
struct FFortVoteConfig final
{
public:
	int32                                         NumVoteOptions;                                    // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoteDuration;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FailedVoteLockOutDuration;                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVotesAllowedPerPlayer;                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteArbitratorType                       VoteArbitratorType;                                // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortVoteConfig) == 0x000004, "Wrong alignment on FFortVoteConfig");
static_assert(sizeof(FFortVoteConfig) == 0x000014, "Wrong size on FFortVoteConfig");
static_assert(offsetof(FFortVoteConfig, NumVoteOptions) == 0x000000, "Member 'FFortVoteConfig::NumVoteOptions' has a wrong offset!");
static_assert(offsetof(FFortVoteConfig, VoteDuration) == 0x000004, "Member 'FFortVoteConfig::VoteDuration' has a wrong offset!");
static_assert(offsetof(FFortVoteConfig, FailedVoteLockOutDuration) == 0x000008, "Member 'FFortVoteConfig::FailedVoteLockOutDuration' has a wrong offset!");
static_assert(offsetof(FFortVoteConfig, MaxVotesAllowedPerPlayer) == 0x00000C, "Member 'FFortVoteConfig::MaxVotesAllowedPerPlayer' has a wrong offset!");
static_assert(offsetof(FFortVoteConfig, VoteArbitratorType) == 0x000010, "Member 'FFortVoteConfig::VoteArbitratorType' has a wrong offset!");

// ScriptStruct FortniteGame.AttributeClamp
// 0x0028 (0x0028 - 0x0000)
struct FAttributeClamp final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClampType                                    ClampType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampValue;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttributeClamp) == 0x000008, "Wrong alignment on FAttributeClamp");
static_assert(sizeof(FAttributeClamp) == 0x000028, "Wrong size on FAttributeClamp");
static_assert(offsetof(FAttributeClamp, Attribute) == 0x000000, "Member 'FAttributeClamp::Attribute' has a wrong offset!");
static_assert(offsetof(FAttributeClamp, ClampType) == 0x000020, "Member 'FAttributeClamp::ClampType' has a wrong offset!");
static_assert(offsetof(FAttributeClamp, ClampValue) == 0x000024, "Member 'FAttributeClamp::ClampValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_SpeedWarping
// 0x0020 (0x0020 - 0x0000)
struct FFortAnimInput_SpeedWarping final
{
public:
	class UCurveFloat*                            PlayRateAdjustmentCurve;                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SpeedWarpingLimits;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SpeedWarpingLimitsAddlRateScale;                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedWarpingAmount;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_SpeedWarping) == 0x000008, "Wrong alignment on FFortAnimInput_SpeedWarping");
static_assert(sizeof(FFortAnimInput_SpeedWarping) == 0x000020, "Wrong size on FFortAnimInput_SpeedWarping");
static_assert(offsetof(FFortAnimInput_SpeedWarping, PlayRateAdjustmentCurve) == 0x000000, "Member 'FFortAnimInput_SpeedWarping::PlayRateAdjustmentCurve' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SpeedWarping, SpeedWarpingLimits) == 0x000008, "Member 'FFortAnimInput_SpeedWarping::SpeedWarpingLimits' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SpeedWarping, SpeedWarpingLimitsAddlRateScale) == 0x000010, "Member 'FFortAnimInput_SpeedWarping::SpeedWarpingLimitsAddlRateScale' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SpeedWarping, SpeedWarpingAmount) == 0x000018, "Member 'FFortAnimInput_SpeedWarping::SpeedWarpingAmount' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SpeedWarping, PlayRate) == 0x00001C, "Member 'FFortAnimInput_SpeedWarping::PlayRate' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaGameMessageData
// 0x0038 (0x0038 - 0x0000)
struct FAthenaGameMessageData final
{
public:
	EAthenaGameMsgType                            MsgType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MsgText;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class USoundCue*                              MsgSound;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MsgDelay;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTeamBased;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamIndex;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaGameMessageData) == 0x000008, "Wrong alignment on FAthenaGameMessageData");
static_assert(sizeof(FAthenaGameMessageData) == 0x000038, "Wrong size on FAthenaGameMessageData");
static_assert(offsetof(FAthenaGameMessageData, MsgType) == 0x000000, "Member 'FAthenaGameMessageData::MsgType' has a wrong offset!");
static_assert(offsetof(FAthenaGameMessageData, MsgText) == 0x000008, "Member 'FAthenaGameMessageData::MsgText' has a wrong offset!");
static_assert(offsetof(FAthenaGameMessageData, MsgSound) == 0x000020, "Member 'FAthenaGameMessageData::MsgSound' has a wrong offset!");
static_assert(offsetof(FAthenaGameMessageData, MsgDelay) == 0x000028, "Member 'FAthenaGameMessageData::MsgDelay' has a wrong offset!");
static_assert(offsetof(FAthenaGameMessageData, bIsTeamBased) == 0x00002C, "Member 'FAthenaGameMessageData::bIsTeamBased' has a wrong offset!");
static_assert(offsetof(FAthenaGameMessageData, TeamIndex) == 0x000030, "Member 'FAthenaGameMessageData::TeamIndex' has a wrong offset!");
static_assert(offsetof(FAthenaGameMessageData, DisplayTime) == 0x000034, "Member 'FAthenaGameMessageData::DisplayTime' has a wrong offset!");

// ScriptStruct FortniteGame.PropertyOverride
// 0x0034 (0x0040 - 0x000C)
struct FPropertyOverride final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PropertyScope;                                     // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0020(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyData;                                      // 0x0030(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropertyOverride) == 0x000008, "Wrong alignment on FPropertyOverride");
static_assert(sizeof(FPropertyOverride) == 0x000040, "Wrong size on FPropertyOverride");
static_assert(offsetof(FPropertyOverride, PropertyScope) == 0x000010, "Member 'FPropertyOverride::PropertyScope' has a wrong offset!");
static_assert(offsetof(FPropertyOverride, PropertyName) == 0x000020, "Member 'FPropertyOverride::PropertyName' has a wrong offset!");
static_assert(offsetof(FPropertyOverride, PropertyData) == 0x000030, "Member 'FPropertyOverride::PropertyData' has a wrong offset!");

// ScriptStruct FortniteGame.PropertyOverrideScope
// 0x0010 (0x0010 - 0x0000)
struct FPropertyOverrideScope final
{
public:
	TArray<struct FPropertyOverride>              PropertyOverrides;                                 // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropertyOverrideScope) == 0x000008, "Wrong alignment on FPropertyOverrideScope");
static_assert(sizeof(FPropertyOverrideScope) == 0x000010, "Wrong size on FPropertyOverrideScope");
static_assert(offsetof(FPropertyOverrideScope, PropertyOverrides) == 0x000000, "Member 'FPropertyOverrideScope::PropertyOverrides' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistPropertyArray
// 0x00E0 (0x01E8 - 0x0108)
struct FPlaylistPropertyArray final : public FFastArraySerializer
{
public:
	TArray<struct FPropertyOverride>              PropertyOverrides;                                 // 0x0108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         PlaylistReplicationKey;                            // 0x0118(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortPlaylistAthena*                    BasePlaylist;                                      // 0x0120(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortPlaylistAthena*                    OverridePlaylist;                                  // 0x0128(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FPropertyOverrideScope> PropertyOverrideScopes;                            // 0x0130(0x0050)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x68];                                     // 0x0180(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaylistPropertyArray) == 0x000008, "Wrong alignment on FPlaylistPropertyArray");
static_assert(sizeof(FPlaylistPropertyArray) == 0x0001E8, "Wrong size on FPlaylistPropertyArray");
static_assert(offsetof(FPlaylistPropertyArray, PropertyOverrides) == 0x000108, "Member 'FPlaylistPropertyArray::PropertyOverrides' has a wrong offset!");
static_assert(offsetof(FPlaylistPropertyArray, PlaylistReplicationKey) == 0x000118, "Member 'FPlaylistPropertyArray::PlaylistReplicationKey' has a wrong offset!");
static_assert(offsetof(FPlaylistPropertyArray, BasePlaylist) == 0x000120, "Member 'FPlaylistPropertyArray::BasePlaylist' has a wrong offset!");
static_assert(offsetof(FPlaylistPropertyArray, OverridePlaylist) == 0x000128, "Member 'FPlaylistPropertyArray::OverridePlaylist' has a wrong offset!");
static_assert(offsetof(FPlaylistPropertyArray, PropertyOverrideScopes) == 0x000130, "Member 'FPlaylistPropertyArray::PropertyOverrideScopes' has a wrong offset!");

// ScriptStruct FortniteGame.EndOfDayRecap
// 0x0020 (0x0020 - 0x0000)
struct FEndOfDayRecap final
{
public:
	int32                                         DayNumber;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamScoreAtStartOfDay;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamScoreAtEndOfDay;                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortPlayerScoreReport>         ScoreReports;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndOfDayRecap) == 0x000008, "Wrong alignment on FEndOfDayRecap");
static_assert(sizeof(FEndOfDayRecap) == 0x000020, "Wrong size on FEndOfDayRecap");
static_assert(offsetof(FEndOfDayRecap, DayNumber) == 0x000000, "Member 'FEndOfDayRecap::DayNumber' has a wrong offset!");
static_assert(offsetof(FEndOfDayRecap, TeamScoreAtStartOfDay) == 0x000004, "Member 'FEndOfDayRecap::TeamScoreAtStartOfDay' has a wrong offset!");
static_assert(offsetof(FEndOfDayRecap, TeamScoreAtEndOfDay) == 0x000008, "Member 'FEndOfDayRecap::TeamScoreAtEndOfDay' has a wrong offset!");
static_assert(offsetof(FEndOfDayRecap, ScoreReports) == 0x000010, "Member 'FEndOfDayRecap::ScoreReports' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementData
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FFortClientAnnouncementData
{
};
#pragma pack(pop)
static_assert(alignof(FFortClientAnnouncementData) == 0x000001, "Wrong alignment on FFortClientAnnouncementData");
static_assert(sizeof(FFortClientAnnouncementData) == 0x000001, "Wrong size on FFortClientAnnouncementData");

// ScriptStruct FortniteGame.FortClientAnnouncementData_Basic
// 0x00E8 (0x00E8 - 0x0000)
struct FFortClientAnnouncementData_Basic : public FFortClientAnnouncementData
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0088(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DetailText;                                        // 0x00A0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GamepadDetailText;                                 // 0x00B8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisplayTime;                                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnStartSound;                                      // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientAnnouncementData_Basic) == 0x000008, "Wrong alignment on FFortClientAnnouncementData_Basic");
static_assert(sizeof(FFortClientAnnouncementData_Basic) == 0x0000E8, "Wrong size on FFortClientAnnouncementData_Basic");
static_assert(offsetof(FFortClientAnnouncementData_Basic, Icon) == 0x000000, "Member 'FFortClientAnnouncementData_Basic::Icon' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, TitleText) == 0x000088, "Member 'FFortClientAnnouncementData_Basic::TitleText' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, DetailText) == 0x0000A0, "Member 'FFortClientAnnouncementData_Basic::DetailText' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, GamepadDetailText) == 0x0000B8, "Member 'FFortClientAnnouncementData_Basic::GamepadDetailText' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, Priority) == 0x0000D0, "Member 'FFortClientAnnouncementData_Basic::Priority' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, DisplayTime) == 0x0000D8, "Member 'FFortClientAnnouncementData_Basic::DisplayTime' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, OnStartSound) == 0x0000E0, "Member 'FFortClientAnnouncementData_Basic::OnStartSound' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionInstancedConfigDataBucket
// 0x0010 (0x0010 - 0x0000)
struct FFortMissionInstancedConfigDataBucket final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionConfigData*                 ConfigData;                                        // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionInstancedConfigDataBucket) == 0x000008, "Wrong alignment on FFortMissionInstancedConfigDataBucket");
static_assert(sizeof(FFortMissionInstancedConfigDataBucket) == 0x000010, "Wrong size on FFortMissionInstancedConfigDataBucket");
static_assert(offsetof(FFortMissionInstancedConfigDataBucket, Tag) == 0x000000, "Member 'FFortMissionInstancedConfigDataBucket::Tag' has a wrong offset!");
static_assert(offsetof(FFortMissionInstancedConfigDataBucket, ConfigData) == 0x000008, "Member 'FFortMissionInstancedConfigDataBucket::ConfigData' has a wrong offset!");

// ScriptStruct FortniteGame.TeamChangeRequest
// 0x0010 (0x0010 - 0x0000)
struct FTeamChangeRequest final
{
public:
	class AFortPlayerController*                  RequestingController;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DesiredTeam;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamChangeRequest) == 0x000008, "Wrong alignment on FTeamChangeRequest");
static_assert(sizeof(FTeamChangeRequest) == 0x000010, "Wrong size on FTeamChangeRequest");
static_assert(offsetof(FTeamChangeRequest, RequestingController) == 0x000000, "Member 'FTeamChangeRequest::RequestingController' has a wrong offset!");
static_assert(offsetof(FTeamChangeRequest, DesiredTeam) == 0x000008, "Member 'FTeamChangeRequest::DesiredTeam' has a wrong offset!");

// ScriptStruct FortniteGame.FortAISpawnGroupUpgradeUIData
// 0x0080 (0x0080 - 0x0000)
struct FFortAISpawnGroupUpgradeUIData final
{
public:
	bool                                          bAlwaysDisplayHealthBar;                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideHealthBarColor;                           // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              UpgradeIconImage;                                  // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            UpgradeIconTintColor;                              // 0x0030(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           HealthBarColorOverride;                            // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UpgradeName;                                       // 0x0068(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAISpawnGroupUpgradeUIData) == 0x000008, "Wrong alignment on FFortAISpawnGroupUpgradeUIData");
static_assert(sizeof(FFortAISpawnGroupUpgradeUIData) == 0x000080, "Wrong size on FFortAISpawnGroupUpgradeUIData");
static_assert(offsetof(FFortAISpawnGroupUpgradeUIData, bAlwaysDisplayHealthBar) == 0x000000, "Member 'FFortAISpawnGroupUpgradeUIData::bAlwaysDisplayHealthBar' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeUIData, bOverrideHealthBarColor) == 0x000001, "Member 'FFortAISpawnGroupUpgradeUIData::bOverrideHealthBarColor' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeUIData, UpgradeIconImage) == 0x000008, "Member 'FFortAISpawnGroupUpgradeUIData::UpgradeIconImage' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeUIData, UpgradeIconTintColor) == 0x000030, "Member 'FFortAISpawnGroupUpgradeUIData::UpgradeIconTintColor' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeUIData, HealthBarColorOverride) == 0x000058, "Member 'FFortAISpawnGroupUpgradeUIData::HealthBarColorOverride' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeUIData, UpgradeName) == 0x000068, "Member 'FFortAISpawnGroupUpgradeUIData::UpgradeName' has a wrong offset!");

// ScriptStruct FortniteGame.OnTimeHitInfo
// 0x0030 (0x0030 - 0x0000)
struct FOnTimeHitInfo final
{
public:
	TDelegate<void()>                             TimeCallback;                                      // 0x0000(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x20];                                      // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnTimeHitInfo) == 0x000004, "Wrong alignment on FOnTimeHitInfo");
static_assert(sizeof(FOnTimeHitInfo) == 0x000030, "Wrong size on FOnTimeHitInfo");
static_assert(offsetof(FOnTimeHitInfo, TimeCallback) == 0x000000, "Member 'FOnTimeHitInfo::TimeCallback' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayMutatorEventData
// 0x0010 (0x0010 - 0x0000)
struct FGameplayMutatorEventData final
{
public:
	int32                                         EventId;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventParam1;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventParam2;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventParam3;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayMutatorEventData) == 0x000004, "Wrong alignment on FGameplayMutatorEventData");
static_assert(sizeof(FGameplayMutatorEventData) == 0x000010, "Wrong size on FGameplayMutatorEventData");
static_assert(offsetof(FGameplayMutatorEventData, EventId) == 0x000000, "Member 'FGameplayMutatorEventData::EventId' has a wrong offset!");
static_assert(offsetof(FGameplayMutatorEventData, EventParam1) == 0x000004, "Member 'FGameplayMutatorEventData::EventParam1' has a wrong offset!");
static_assert(offsetof(FGameplayMutatorEventData, EventParam2) == 0x000008, "Member 'FGameplayMutatorEventData::EventParam2' has a wrong offset!");
static_assert(offsetof(FGameplayMutatorEventData, EventParam3) == 0x00000C, "Member 'FGameplayMutatorEventData::EventParam3' has a wrong offset!");

// ScriptStruct FortniteGame.HeistPostMatchAnalyticsData
// 0x0048 (0x0048 - 0x0000)
struct FHeistPostMatchAnalyticsData final
{
public:
	int32                                         SupplyDropsOpenedPerMatch;                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         JewelsLostToStorm;                                 // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         HeistDropsLostToStorm;                             // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         JewelsEquippedPerMatch;                            // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<float>                                 TimeJewelHeldPerTeam;                              // 0x0010(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 PlayersAlivePerEscape;                             // 0x0020(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         NumSuccessfulEscapes;                              // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 WinningTeams;                                      // 0x0038(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FHeistPostMatchAnalyticsData) == 0x000008, "Wrong alignment on FHeistPostMatchAnalyticsData");
static_assert(sizeof(FHeistPostMatchAnalyticsData) == 0x000048, "Wrong size on FHeistPostMatchAnalyticsData");
static_assert(offsetof(FHeistPostMatchAnalyticsData, SupplyDropsOpenedPerMatch) == 0x000000, "Member 'FHeistPostMatchAnalyticsData::SupplyDropsOpenedPerMatch' has a wrong offset!");
static_assert(offsetof(FHeistPostMatchAnalyticsData, JewelsLostToStorm) == 0x000004, "Member 'FHeistPostMatchAnalyticsData::JewelsLostToStorm' has a wrong offset!");
static_assert(offsetof(FHeistPostMatchAnalyticsData, HeistDropsLostToStorm) == 0x000008, "Member 'FHeistPostMatchAnalyticsData::HeistDropsLostToStorm' has a wrong offset!");
static_assert(offsetof(FHeistPostMatchAnalyticsData, JewelsEquippedPerMatch) == 0x00000C, "Member 'FHeistPostMatchAnalyticsData::JewelsEquippedPerMatch' has a wrong offset!");
static_assert(offsetof(FHeistPostMatchAnalyticsData, TimeJewelHeldPerTeam) == 0x000010, "Member 'FHeistPostMatchAnalyticsData::TimeJewelHeldPerTeam' has a wrong offset!");
static_assert(offsetof(FHeistPostMatchAnalyticsData, PlayersAlivePerEscape) == 0x000020, "Member 'FHeistPostMatchAnalyticsData::PlayersAlivePerEscape' has a wrong offset!");
static_assert(offsetof(FHeistPostMatchAnalyticsData, NumSuccessfulEscapes) == 0x000030, "Member 'FHeistPostMatchAnalyticsData::NumSuccessfulEscapes' has a wrong offset!");
static_assert(offsetof(FHeistPostMatchAnalyticsData, WinningTeams) == 0x000038, "Member 'FHeistPostMatchAnalyticsData::WinningTeams' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveItemGrantInfo
// 0x0048 (0x0048 - 0x0000)
struct FActiveItemGrantInfo final
{
public:
	class UFortWorldItemDefinition*               Item;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AmountToGive;                                      // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxAmount;                                         // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveItemGrantInfo) == 0x000008, "Wrong alignment on FActiveItemGrantInfo");
static_assert(sizeof(FActiveItemGrantInfo) == 0x000048, "Wrong size on FActiveItemGrantInfo");
static_assert(offsetof(FActiveItemGrantInfo, Item) == 0x000000, "Member 'FActiveItemGrantInfo::Item' has a wrong offset!");
static_assert(offsetof(FActiveItemGrantInfo, AmountToGive) == 0x000008, "Member 'FActiveItemGrantInfo::AmountToGive' has a wrong offset!");
static_assert(offsetof(FActiveItemGrantInfo, MaxAmount) == 0x000028, "Member 'FActiveItemGrantInfo::MaxAmount' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerAttributeSets
// 0x0050 (0x0050 - 0x0000)
struct FFortPlayerAttributeSets final
{
public:
	class UFortRegenHealthSet*                    HealthSet;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortControlResistanceSet*              ControlResistanceSet;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortDamageSet*                         DamageSet;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMovementSet*                       MovementSet;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAdvancedMovementSet*               AdvancedMovementSet;                               // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortConstructionSet*                   ConstructionSet;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerAttrSet*                     PlayerAttrSet;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortCharacterAttrSet*                  CharacterAttrSet;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWeaponAttrSet*                     WeaponAttrSet;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortHomebaseSet*                       HomebaseSet;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerAttributeSets) == 0x000008, "Wrong alignment on FFortPlayerAttributeSets");
static_assert(sizeof(FFortPlayerAttributeSets) == 0x000050, "Wrong size on FFortPlayerAttributeSets");
static_assert(offsetof(FFortPlayerAttributeSets, HealthSet) == 0x000000, "Member 'FFortPlayerAttributeSets::HealthSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, ControlResistanceSet) == 0x000008, "Member 'FFortPlayerAttributeSets::ControlResistanceSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, DamageSet) == 0x000010, "Member 'FFortPlayerAttributeSets::DamageSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, MovementSet) == 0x000018, "Member 'FFortPlayerAttributeSets::MovementSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, AdvancedMovementSet) == 0x000020, "Member 'FFortPlayerAttributeSets::AdvancedMovementSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, ConstructionSet) == 0x000028, "Member 'FFortPlayerAttributeSets::ConstructionSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, PlayerAttrSet) == 0x000030, "Member 'FFortPlayerAttributeSets::PlayerAttrSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, CharacterAttrSet) == 0x000038, "Member 'FFortPlayerAttributeSets::CharacterAttrSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, WeaponAttrSet) == 0x000040, "Member 'FFortPlayerAttributeSets::WeaponAttrSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, HomebaseSet) == 0x000048, "Member 'FFortPlayerAttributeSets::HomebaseSet' has a wrong offset!");

// ScriptStruct FortniteGame.VoteData
// 0x0080 (0x0080 - 0x0000)
struct FVoteData final
{
public:
	EFortVoteType                                 VoteType;                                          // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       VoteInstigatorNetId;                               // 0x0008(0x0028)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortVoteConfig                        VoteConfig;                                        // 0x0030(0x0014)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              VoteStartTime;                                     // 0x0048(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              VoteEndTime;                                       // 0x0050(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoter>                         Voters;                                            // 0x0058(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         NumVotersWithMaxVotes;                             // 0x0068(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           EndVoteTimerHandle;                                // 0x0070(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortVoteStatus                               VoteStatus;                                        // 0x0078(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoteData) == 0x000008, "Wrong alignment on FVoteData");
static_assert(sizeof(FVoteData) == 0x000080, "Wrong size on FVoteData");
static_assert(offsetof(FVoteData, VoteType) == 0x000000, "Member 'FVoteData::VoteType' has a wrong offset!");
static_assert(offsetof(FVoteData, VoteInstigatorNetId) == 0x000008, "Member 'FVoteData::VoteInstigatorNetId' has a wrong offset!");
static_assert(offsetof(FVoteData, VoteConfig) == 0x000030, "Member 'FVoteData::VoteConfig' has a wrong offset!");
static_assert(offsetof(FVoteData, VoteStartTime) == 0x000048, "Member 'FVoteData::VoteStartTime' has a wrong offset!");
static_assert(offsetof(FVoteData, VoteEndTime) == 0x000050, "Member 'FVoteData::VoteEndTime' has a wrong offset!");
static_assert(offsetof(FVoteData, Voters) == 0x000058, "Member 'FVoteData::Voters' has a wrong offset!");
static_assert(offsetof(FVoteData, NumVotersWithMaxVotes) == 0x000068, "Member 'FVoteData::NumVotersWithMaxVotes' has a wrong offset!");
static_assert(offsetof(FVoteData, EndVoteTimerHandle) == 0x000070, "Member 'FVoteData::EndVoteTimerHandle' has a wrong offset!");
static_assert(offsetof(FVoteData, VoteStatus) == 0x000078, "Member 'FVoteData::VoteStatus' has a wrong offset!");

// ScriptStruct FortniteGame.FortCosmeticVariantPreviewElement
// 0x0018 (0x0018 - 0x0000)
struct FFortCosmeticVariantPreviewElement final
{
public:
	TArray<struct FMcpVariantChannelInfo>         VariantOptions;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAthenaCosmeticItemDefinition*          Item;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCosmeticVariantPreviewElement) == 0x000008, "Wrong alignment on FFortCosmeticVariantPreviewElement");
static_assert(sizeof(FFortCosmeticVariantPreviewElement) == 0x000018, "Wrong size on FFortCosmeticVariantPreviewElement");
static_assert(offsetof(FFortCosmeticVariantPreviewElement, VariantOptions) == 0x000000, "Member 'FFortCosmeticVariantPreviewElement::VariantOptions' has a wrong offset!");
static_assert(offsetof(FFortCosmeticVariantPreviewElement, Item) == 0x000010, "Member 'FFortCosmeticVariantPreviewElement::Item' has a wrong offset!");

// ScriptStruct FortniteGame.TieredCollectionProgressionDataBase
// 0x0001 (0x0001 - 0x0000)
struct FTieredCollectionProgressionDataBase
{
public:
	ECollectionSelectionMethod                    SelectionMethod;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredCollectionProgressionDataBase) == 0x000001, "Wrong alignment on FTieredCollectionProgressionDataBase");
static_assert(sizeof(FTieredCollectionProgressionDataBase) == 0x000001, "Wrong size on FTieredCollectionProgressionDataBase");
static_assert(offsetof(FTieredCollectionProgressionDataBase, SelectionMethod) == 0x000000, "Member 'FTieredCollectionProgressionDataBase::SelectionMethod' has a wrong offset!");

// ScriptStruct FortniteGame.CollectionLootSetData
// 0x0017 (0x0018 - 0x0001)
struct FCollectionLootSetData final : public FTieredCollectionProgressionDataBase
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LootSetNames;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollectionLootSetData) == 0x000008, "Wrong alignment on FCollectionLootSetData");
static_assert(sizeof(FCollectionLootSetData) == 0x000018, "Wrong size on FCollectionLootSetData");
static_assert(offsetof(FCollectionLootSetData, LootSetNames) == 0x000008, "Member 'FCollectionLootSetData::LootSetNames' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerBuildableClassContainer
// 0x0010 (0x0010 - 0x0000)
struct FPlayerBuildableClassContainer final
{
public:
	TArray<TSubclassOf<class ABuildingSMActor>>   BuildingClasses;                                   // 0x0000(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerBuildableClassContainer) == 0x000008, "Wrong alignment on FPlayerBuildableClassContainer");
static_assert(sizeof(FPlayerBuildableClassContainer) == 0x000010, "Wrong size on FPlayerBuildableClassContainer");
static_assert(offsetof(FPlayerBuildableClassContainer, BuildingClasses) == 0x000000, "Member 'FPlayerBuildableClassContainer::BuildingClasses' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_SkydivingExternalForce
// 0x0084 (0x0084 - 0x0000)
struct FFortAnimInput_SkydivingExternalForce final
{
public:
	bool                                          bUseSkydivingVectorForce;                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SkydivingVectorForce;                              // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HeadToPelvisDirection;                             // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FloatingMultiplier;                                // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FloatingAdditive;                                  // 0x0028(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DivingMultiplier;                                  // 0x0034(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DivingAdditive;                                    // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ParachutingMultiplier;                             // 0x004C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ParachutingAdditive;                               // 0x0058(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseNoisyClothGravity;                             // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyNoiseInActorSpace;                           // 0x0065(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PerlinRangedOutMinX;                               // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerlinRangedOutMaxX;                               // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerlinRangedOutMinY;                               // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerlinRangedOutMaxY;                               // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerlinRangedOutMinZ;                               // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerlinRangedOutMaxZ;                               // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x4];                                       // 0x0080(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimInput_SkydivingExternalForce) == 0x000004, "Wrong alignment on FFortAnimInput_SkydivingExternalForce");
static_assert(sizeof(FFortAnimInput_SkydivingExternalForce) == 0x000084, "Wrong size on FFortAnimInput_SkydivingExternalForce");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, bUseSkydivingVectorForce) == 0x000000, "Member 'FFortAnimInput_SkydivingExternalForce::bUseSkydivingVectorForce' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, SkydivingVectorForce) == 0x000004, "Member 'FFortAnimInput_SkydivingExternalForce::SkydivingVectorForce' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, HeadToPelvisDirection) == 0x000010, "Member 'FFortAnimInput_SkydivingExternalForce::HeadToPelvisDirection' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, FloatingMultiplier) == 0x00001C, "Member 'FFortAnimInput_SkydivingExternalForce::FloatingMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, FloatingAdditive) == 0x000028, "Member 'FFortAnimInput_SkydivingExternalForce::FloatingAdditive' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, DivingMultiplier) == 0x000034, "Member 'FFortAnimInput_SkydivingExternalForce::DivingMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, DivingAdditive) == 0x000040, "Member 'FFortAnimInput_SkydivingExternalForce::DivingAdditive' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, ParachutingMultiplier) == 0x00004C, "Member 'FFortAnimInput_SkydivingExternalForce::ParachutingMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, ParachutingAdditive) == 0x000058, "Member 'FFortAnimInput_SkydivingExternalForce::ParachutingAdditive' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, bUseNoisyClothGravity) == 0x000064, "Member 'FFortAnimInput_SkydivingExternalForce::bUseNoisyClothGravity' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, bApplyNoiseInActorSpace) == 0x000065, "Member 'FFortAnimInput_SkydivingExternalForce::bApplyNoiseInActorSpace' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, PerlinRangedOutMinX) == 0x000068, "Member 'FFortAnimInput_SkydivingExternalForce::PerlinRangedOutMinX' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, PerlinRangedOutMaxX) == 0x00006C, "Member 'FFortAnimInput_SkydivingExternalForce::PerlinRangedOutMaxX' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, PerlinRangedOutMinY) == 0x000070, "Member 'FFortAnimInput_SkydivingExternalForce::PerlinRangedOutMinY' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, PerlinRangedOutMaxY) == 0x000074, "Member 'FFortAnimInput_SkydivingExternalForce::PerlinRangedOutMaxY' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, PerlinRangedOutMinZ) == 0x000078, "Member 'FFortAnimInput_SkydivingExternalForce::PerlinRangedOutMinZ' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_SkydivingExternalForce, PerlinRangedOutMaxZ) == 0x00007C, "Member 'FFortAnimInput_SkydivingExternalForce::PerlinRangedOutMaxZ' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemQuantityPair
// 0x0040 (0x0040 - 0x0000)
struct FFortItemQuantityPair final
{
public:
	struct FPrimaryAssetId                        ItemPrimaryAssetId;                                // 0x0000(0x0010)(Edit, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0010(0x0028)(Deprecated, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Quantity;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemQuantityPair) == 0x000008, "Wrong alignment on FFortItemQuantityPair");
static_assert(sizeof(FFortItemQuantityPair) == 0x000040, "Wrong size on FFortItemQuantityPair");
static_assert(offsetof(FFortItemQuantityPair, ItemPrimaryAssetId) == 0x000000, "Member 'FFortItemQuantityPair::ItemPrimaryAssetId' has a wrong offset!");
static_assert(offsetof(FFortItemQuantityPair, ItemDefinition) == 0x000010, "Member 'FFortItemQuantityPair::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortItemQuantityPair, Quantity) == 0x000038, "Member 'FFortItemQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneMissionAlertData
// 0x0030 (0x0030 - 0x0000)
struct FFortZoneMissionAlertData final
{
public:
	TArray<struct FFortItemQuantityPair>          MissionAlertRewards;                               // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class FString                                 MissionAlertCategoryName;                          // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionAlertID;                                    // 0x0020(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortZoneMissionAlertData) == 0x000008, "Wrong alignment on FFortZoneMissionAlertData");
static_assert(sizeof(FFortZoneMissionAlertData) == 0x000030, "Wrong size on FFortZoneMissionAlertData");
static_assert(offsetof(FFortZoneMissionAlertData, MissionAlertRewards) == 0x000000, "Member 'FFortZoneMissionAlertData::MissionAlertRewards' has a wrong offset!");
static_assert(offsetof(FFortZoneMissionAlertData, MissionAlertCategoryName) == 0x000010, "Member 'FFortZoneMissionAlertData::MissionAlertCategoryName' has a wrong offset!");
static_assert(offsetof(FFortZoneMissionAlertData, MissionAlertID) == 0x000020, "Member 'FFortZoneMissionAlertData::MissionAlertID' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnAIRequest
// 0x0050 (0x0050 - 0x0000)
struct FFortSpawnAIRequest final
{
public:
	struct FGuid                                  SpawnGroupInstanceGuid;                            // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyIndex;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpawnPoint;                                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAbilitySet*>                AbilitySetsToGrantOnSpawn;                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollisionWhenSpawning;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpawnAIRequest) == 0x000008, "Wrong alignment on FFortSpawnAIRequest");
static_assert(sizeof(FFortSpawnAIRequest) == 0x000050, "Wrong size on FFortSpawnAIRequest");
static_assert(offsetof(FFortSpawnAIRequest, SpawnGroupInstanceGuid) == 0x000000, "Member 'FFortSpawnAIRequest::SpawnGroupInstanceGuid' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, EnemyIndex) == 0x000010, "Member 'FFortSpawnAIRequest::EnemyIndex' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnLocation) == 0x000014, "Member 'FFortSpawnAIRequest::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnRotation) == 0x000020, "Member 'FFortSpawnAIRequest::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnPoint) == 0x000030, "Member 'FFortSpawnAIRequest::SpawnPoint' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, AbilitySetsToGrantOnSpawn) == 0x000038, "Member 'FFortSpawnAIRequest::AbilitySetsToGrantOnSpawn' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, bIgnoreCollisionWhenSpawning) == 0x000048, "Member 'FFortSpawnAIRequest::bIgnoreCollisionWhenSpawning' has a wrong offset!");

// ScriptStruct FortniteGame.FortAISpawnerData
// 0x0060 (0x0060 - 0x0000)
struct FFortAISpawnerData final
{
public:
	struct FGuid                                  SpawnGroupInstanceGuid;                            // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortSpawnAIRequest                    ReservedSpawnRequest;                              // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAISpawnerData) == 0x000008, "Wrong alignment on FFortAISpawnerData");
static_assert(sizeof(FFortAISpawnerData) == 0x000060, "Wrong size on FFortAISpawnerData");
static_assert(offsetof(FFortAISpawnerData, SpawnGroupInstanceGuid) == 0x000000, "Member 'FFortAISpawnerData::SpawnGroupInstanceGuid' has a wrong offset!");
static_assert(offsetof(FFortAISpawnerData, ReservedSpawnRequest) == 0x000010, "Member 'FFortAISpawnerData::ReservedSpawnRequest' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIAttributeReplicationProxy
// 0x0004 (0x0004 - 0x0000)
struct FFortAIAttributeReplicationProxy final
{
public:
	int16                                         Health;                                            // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MaxHealth;                                         // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIAttributeReplicationProxy) == 0x000002, "Wrong alignment on FFortAIAttributeReplicationProxy");
static_assert(sizeof(FFortAIAttributeReplicationProxy) == 0x000004, "Wrong size on FFortAIAttributeReplicationProxy");
static_assert(offsetof(FFortAIAttributeReplicationProxy, Health) == 0x000000, "Member 'FFortAIAttributeReplicationProxy::Health' has a wrong offset!");
static_assert(offsetof(FFortAIAttributeReplicationProxy, MaxHealth) == 0x000002, "Member 'FFortAIAttributeReplicationProxy::MaxHealth' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneDifficultyIncreaseRewardData
// 0x0010 (0x0010 - 0x0000)
struct FFortZoneDifficultyIncreaseRewardData final
{
public:
	TArray<struct FFortItemQuantityPair>          Rewards;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortZoneDifficultyIncreaseRewardData) == 0x000008, "Wrong alignment on FFortZoneDifficultyIncreaseRewardData");
static_assert(sizeof(FFortZoneDifficultyIncreaseRewardData) == 0x000010, "Wrong size on FFortZoneDifficultyIncreaseRewardData");
static_assert(offsetof(FFortZoneDifficultyIncreaseRewardData, Rewards) == 0x000000, "Member 'FFortZoneDifficultyIncreaseRewardData::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.IntensityContribution
// 0x0048 (0x0048 - 0x0000)
struct FIntensityContribution final
{
public:
	EFortCombatFactors                            CombatFactor;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactor                         ContributingAIDirectorFactor;                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyContributionByCompletionPercentage;         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   CompletionPercentageInitialMultiplier;             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CompletionPercentageToStartReducingMultiplier;     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CompletionPercentageToStopReducingMultiplier;      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyByNumberOfCriticalEncounterGoals;           // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIntensityContribution) == 0x000008, "Wrong alignment on FIntensityContribution");
static_assert(sizeof(FIntensityContribution) == 0x000048, "Wrong size on FIntensityContribution");
static_assert(offsetof(FIntensityContribution, CombatFactor) == 0x000000, "Member 'FIntensityContribution::CombatFactor' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, ContributingAIDirectorFactor) == 0x000001, "Member 'FIntensityContribution::ContributingAIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, MaxContribution) == 0x000004, "Member 'FIntensityContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, bModifyContributionByCompletionPercentage) == 0x000008, "Member 'FIntensityContribution::bModifyContributionByCompletionPercentage' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageInitialMultiplier) == 0x000010, "Member 'FIntensityContribution::CompletionPercentageInitialMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageToStartReducingMultiplier) == 0x000020, "Member 'FIntensityContribution::CompletionPercentageToStartReducingMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageToStopReducingMultiplier) == 0x000030, "Member 'FIntensityContribution::CompletionPercentageToStopReducingMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, bModifyByNumberOfCriticalEncounterGoals) == 0x000040, "Member 'FIntensityContribution::bModifyByNumberOfCriticalEncounterGoals' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableMissionAlertData
// 0x0098 (0x0098 - 0x0000)
struct FFortAvailableMissionAlertData final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpreadDataName;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionAlertGuid;                                  // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileIndex;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableUntil;                                    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RefreshSpreadAt;                                   // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         MissionAlertRewards;                               // 0x0048(0x0020)(NativeAccessSpecifierPublic)
	struct FMcpLootResult                         MissionAlertModifiers;                             // 0x0068(0x0020)(NativeAccessSpecifierPublic)
	TArray<class UFortItemDefinition*>            ItemDefinitionRefCache;                            // 0x0088(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableMissionAlertData) == 0x000008, "Wrong alignment on FFortAvailableMissionAlertData");
static_assert(sizeof(FFortAvailableMissionAlertData) == 0x000098, "Wrong size on FFortAvailableMissionAlertData");
static_assert(offsetof(FFortAvailableMissionAlertData, CategoryName) == 0x000000, "Member 'FFortAvailableMissionAlertData::CategoryName' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, SpreadDataName) == 0x000010, "Member 'FFortAvailableMissionAlertData::SpreadDataName' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, MissionAlertGuid) == 0x000020, "Member 'FFortAvailableMissionAlertData::MissionAlertGuid' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, TileIndex) == 0x000030, "Member 'FFortAvailableMissionAlertData::TileIndex' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, AvailableUntil) == 0x000038, "Member 'FFortAvailableMissionAlertData::AvailableUntil' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, RefreshSpreadAt) == 0x000040, "Member 'FFortAvailableMissionAlertData::RefreshSpreadAt' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, MissionAlertRewards) == 0x000048, "Member 'FFortAvailableMissionAlertData::MissionAlertRewards' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, MissionAlertModifiers) == 0x000068, "Member 'FFortAvailableMissionAlertData::MissionAlertModifiers' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, ItemDefinitionRefCache) == 0x000088, "Member 'FFortAvailableMissionAlertData::ItemDefinitionRefCache' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableMissionAlerts
// 0x0028 (0x0028 - 0x0000)
struct FFortAvailableMissionAlerts final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableMissionAlertData> AvailableMissionAlerts;                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              NextRefresh;                                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableMissionAlerts) == 0x000008, "Wrong alignment on FFortAvailableMissionAlerts");
static_assert(sizeof(FFortAvailableMissionAlerts) == 0x000028, "Wrong size on FFortAvailableMissionAlerts");
static_assert(offsetof(FFortAvailableMissionAlerts, TheaterId) == 0x000000, "Member 'FFortAvailableMissionAlerts::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlerts, AvailableMissionAlerts) == 0x000010, "Member 'FFortAvailableMissionAlerts::AvailableMissionAlerts' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlerts, NextRefresh) == 0x000020, "Member 'FFortAvailableMissionAlerts::NextRefresh' has a wrong offset!");

// ScriptStruct FortniteGame.ReplicatedMontageIndexPair
// 0x0010 (0x0010 - 0x0000)
struct FReplicatedMontageIndexPair final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedMontageIndexPair) == 0x000008, "Wrong alignment on FReplicatedMontageIndexPair");
static_assert(sizeof(FReplicatedMontageIndexPair) == 0x000010, "Wrong size on FReplicatedMontageIndexPair");
static_assert(offsetof(FReplicatedMontageIndexPair, Montage) == 0x000000, "Member 'FReplicatedMontageIndexPair::Montage' has a wrong offset!");
static_assert(offsetof(FReplicatedMontageIndexPair, Index) == 0x000008, "Member 'FReplicatedMontageIndexPair::Index' has a wrong offset!");

// ScriptStruct FortniteGame.ReplicatedMontageMap
// 0x0018 (0x0018 - 0x0000)
struct FReplicatedMontageMap final
{
public:
	TArray<struct FReplicatedMontageIndexPair>    Mappings;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedMontageMap) == 0x000008, "Wrong alignment on FReplicatedMontageMap");
static_assert(sizeof(FReplicatedMontageMap) == 0x000018, "Wrong size on FReplicatedMontageMap");
static_assert(offsetof(FReplicatedMontageMap, Mappings) == 0x000000, "Member 'FReplicatedMontageMap::Mappings' has a wrong offset!");

// ScriptStruct FortniteGame.FortChallengeBundleRewards
// 0x0018 (0x0018 - 0x0000)
struct FFortChallengeBundleRewards final
{
public:
	int32                                         CompletionCount;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAthenaRewardItemReference>     Rewards;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortChallengeBundleRewards) == 0x000008, "Wrong alignment on FFortChallengeBundleRewards");
static_assert(sizeof(FFortChallengeBundleRewards) == 0x000018, "Wrong size on FFortChallengeBundleRewards");
static_assert(offsetof(FFortChallengeBundleRewards, CompletionCount) == 0x000000, "Member 'FFortChallengeBundleRewards::CompletionCount' has a wrong offset!");
static_assert(offsetof(FFortChallengeBundleRewards, Rewards) == 0x000008, "Member 'FFortChallengeBundleRewards::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortWeaponDurabilityByRarityStats
// 0x0020 (0x0028 - 0x0008)
struct FFortWeaponDurabilityByRarityStats final : public FTableRowBase
{
public:
	int32                                         Common;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Uncommon;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Rare;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Epic;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Legendary;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Mythic;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Transcendent;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Unattainable;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortWeaponDurabilityByRarityStats) == 0x000008, "Wrong alignment on FFortWeaponDurabilityByRarityStats");
static_assert(sizeof(FFortWeaponDurabilityByRarityStats) == 0x000028, "Wrong size on FFortWeaponDurabilityByRarityStats");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Common) == 0x000008, "Member 'FFortWeaponDurabilityByRarityStats::Common' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Uncommon) == 0x00000C, "Member 'FFortWeaponDurabilityByRarityStats::Uncommon' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Rare) == 0x000010, "Member 'FFortWeaponDurabilityByRarityStats::Rare' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Epic) == 0x000014, "Member 'FFortWeaponDurabilityByRarityStats::Epic' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Legendary) == 0x000018, "Member 'FFortWeaponDurabilityByRarityStats::Legendary' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Mythic) == 0x00001C, "Member 'FFortWeaponDurabilityByRarityStats::Mythic' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Transcendent) == 0x000020, "Member 'FFortWeaponDurabilityByRarityStats::Transcendent' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Unattainable) == 0x000024, "Member 'FFortWeaponDurabilityByRarityStats::Unattainable' has a wrong offset!");

// ScriptStruct FortniteGame.FortRiftReservationHandle
// 0x0004 (0x0004 - 0x0000)
struct FFortRiftReservationHandle final
{
public:
	int32                                         RiftReservationID;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortRiftReservationHandle) == 0x000004, "Wrong alignment on FFortRiftReservationHandle");
static_assert(sizeof(FFortRiftReservationHandle) == 0x000004, "Wrong size on FFortRiftReservationHandle");
static_assert(offsetof(FFortRiftReservationHandle, RiftReservationID) == 0x000000, "Member 'FFortRiftReservationHandle::RiftReservationID' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterRift
// 0x0020 (0x0020 - 0x0000)
struct FFortAIEncounterRift final
{
public:
	int32                                         QueryID;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RiftLocation;                                      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingRift*                          RiftActor;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRiftReservationHandle             RiftReservationHandle;                             // 0x0018(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterRift) == 0x000008, "Wrong alignment on FFortAIEncounterRift");
static_assert(sizeof(FFortAIEncounterRift) == 0x000020, "Wrong size on FFortAIEncounterRift");
static_assert(offsetof(FFortAIEncounterRift, QueryID) == 0x000000, "Member 'FFortAIEncounterRift::QueryID' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRift, RiftLocation) == 0x000004, "Member 'FFortAIEncounterRift::RiftLocation' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRift, RiftActor) == 0x000010, "Member 'FFortAIEncounterRift::RiftActor' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRift, RiftReservationHandle) == 0x000018, "Member 'FFortAIEncounterRift::RiftReservationHandle' has a wrong offset!");

// ScriptStruct FortniteGame.CreativeToolObjectInteractionRow
// 0x0010 (0x0018 - 0x0008)
struct FCreativeToolObjectInteractionRow final : public FTableRowBase
{
public:
	class UDataTable*                             AllowedClasses;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ForbiddenClasses;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeToolObjectInteractionRow) == 0x000008, "Wrong alignment on FCreativeToolObjectInteractionRow");
static_assert(sizeof(FCreativeToolObjectInteractionRow) == 0x000018, "Wrong size on FCreativeToolObjectInteractionRow");
static_assert(offsetof(FCreativeToolObjectInteractionRow, AllowedClasses) == 0x000008, "Member 'FCreativeToolObjectInteractionRow::AllowedClasses' has a wrong offset!");
static_assert(offsetof(FCreativeToolObjectInteractionRow, ForbiddenClasses) == 0x000010, "Member 'FCreativeToolObjectInteractionRow::ForbiddenClasses' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnUpgradeData
// 0x0048 (0x0048 - 0x0000)
struct FFortAIPawnUpgradeData final
{
public:
	struct FCurveTableRowHandle                   SpawnPointsMultiplierCurve;                        // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCurveTableRowHandle                   LifespanMultiplierCurve;                           // 0x0010(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCurveTableRowHandle                   ScoreMultiplierCurve;                              // 0x0020(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortGameplayModifierItemDefinition*    ModifierDefinition;                                // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortGameplayModifierItemDefinition*> AdditionalModifiers;                               // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIPawnUpgradeData) == 0x000008, "Wrong alignment on FFortAIPawnUpgradeData");
static_assert(sizeof(FFortAIPawnUpgradeData) == 0x000048, "Wrong size on FFortAIPawnUpgradeData");
static_assert(offsetof(FFortAIPawnUpgradeData, SpawnPointsMultiplierCurve) == 0x000000, "Member 'FFortAIPawnUpgradeData::SpawnPointsMultiplierCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeData, LifespanMultiplierCurve) == 0x000010, "Member 'FFortAIPawnUpgradeData::LifespanMultiplierCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeData, ScoreMultiplierCurve) == 0x000020, "Member 'FFortAIPawnUpgradeData::ScoreMultiplierCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeData, ModifierDefinition) == 0x000030, "Member 'FFortAIPawnUpgradeData::ModifierDefinition' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeData, AdditionalModifiers) == 0x000038, "Member 'FFortAIPawnUpgradeData::AdditionalModifiers' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnMachineRepData
// 0x0018 (0x0024 - 0x000C)
struct FSpawnMachineRepData final : public FFastArraySerializerItem
{
public:
	struct FVector                                Location;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnMachineState                            SpawnMachineState;                                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnMachineCooldownStartTime;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnMachineCooldownEndTime;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnMachineRepData) == 0x000004, "Wrong alignment on FSpawnMachineRepData");
static_assert(sizeof(FSpawnMachineRepData) == 0x000024, "Wrong size on FSpawnMachineRepData");
static_assert(offsetof(FSpawnMachineRepData, Location) == 0x00000C, "Member 'FSpawnMachineRepData::Location' has a wrong offset!");
static_assert(offsetof(FSpawnMachineRepData, SpawnMachineState) == 0x000018, "Member 'FSpawnMachineRepData::SpawnMachineState' has a wrong offset!");
static_assert(offsetof(FSpawnMachineRepData, SpawnMachineCooldownStartTime) == 0x00001C, "Member 'FSpawnMachineRepData::SpawnMachineCooldownStartTime' has a wrong offset!");
static_assert(offsetof(FSpawnMachineRepData, SpawnMachineCooldownEndTime) == 0x000020, "Member 'FSpawnMachineRepData::SpawnMachineCooldownEndTime' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnMachineRepDataArray
// 0x0018 (0x0120 - 0x0108)
struct FSpawnMachineRepDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FSpawnMachineRepData>           SpawnMachineRepDataArray;                          // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AFortGameStateAthena*                   OwningGameState;                                   // 0x0118(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSpawnMachineRepDataArray) == 0x000008, "Wrong alignment on FSpawnMachineRepDataArray");
static_assert(sizeof(FSpawnMachineRepDataArray) == 0x000120, "Wrong size on FSpawnMachineRepDataArray");
static_assert(offsetof(FSpawnMachineRepDataArray, SpawnMachineRepDataArray) == 0x000108, "Member 'FSpawnMachineRepDataArray::SpawnMachineRepDataArray' has a wrong offset!");
static_assert(offsetof(FSpawnMachineRepDataArray, OwningGameState) == 0x000118, "Member 'FSpawnMachineRepDataArray::OwningGameState' has a wrong offset!");

// ScriptStruct FortniteGame.MyFortCategoryData
// 0x0058 (0x0058 - 0x0000)
struct FMyFortCategoryData final
{
public:
	class FText                                   CategoryName;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TooltipTag;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ModifiedTagContainer;                              // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsCore;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayAttribute>             Attributes;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyFortCategoryData) == 0x000008, "Wrong alignment on FMyFortCategoryData");
static_assert(sizeof(FMyFortCategoryData) == 0x000058, "Wrong size on FMyFortCategoryData");
static_assert(offsetof(FMyFortCategoryData, CategoryName) == 0x000000, "Member 'FMyFortCategoryData::CategoryName' has a wrong offset!");
static_assert(offsetof(FMyFortCategoryData, TooltipTag) == 0x000018, "Member 'FMyFortCategoryData::TooltipTag' has a wrong offset!");
static_assert(offsetof(FMyFortCategoryData, ModifiedTagContainer) == 0x000020, "Member 'FMyFortCategoryData::ModifiedTagContainer' has a wrong offset!");
static_assert(offsetof(FMyFortCategoryData, bIsCore) == 0x000040, "Member 'FMyFortCategoryData::bIsCore' has a wrong offset!");
static_assert(offsetof(FMyFortCategoryData, Attributes) == 0x000048, "Member 'FMyFortCategoryData::Attributes' has a wrong offset!");

// ScriptStruct FortniteGame.TimeOfDayEditorViewSettings
// 0x0001 (0x0001 - 0x0000)
struct FTimeOfDayEditorViewSettings final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeOfDayEditorViewSettings) == 0x000001, "Wrong alignment on FTimeOfDayEditorViewSettings");
static_assert(sizeof(FTimeOfDayEditorViewSettings) == 0x000001, "Wrong size on FTimeOfDayEditorViewSettings");

// ScriptStruct FortniteGame.ItemsToSpawn
// 0x0028 (0x0028 - 0x0000)
struct FItemsToSpawn final
{
public:
	class UFortWorldItemDefinition*               ItemToDrop;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         NumberToDrop;                                      // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemsToSpawn) == 0x000008, "Wrong alignment on FItemsToSpawn");
static_assert(sizeof(FItemsToSpawn) == 0x000028, "Wrong size on FItemsToSpawn");
static_assert(offsetof(FItemsToSpawn, ItemToDrop) == 0x000000, "Member 'FItemsToSpawn::ItemToDrop' has a wrong offset!");
static_assert(offsetof(FItemsToSpawn, NumberToDrop) == 0x000008, "Member 'FItemsToSpawn::NumberToDrop' has a wrong offset!");

// ScriptStruct FortniteGame.MeshNetworkStatus
// 0x0003 (0x0003 - 0x0000)
struct FMeshNetworkStatus final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConnectedToRoot;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeshNetworkNodeType                          GameServerNodeType;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshNetworkStatus) == 0x000001, "Wrong alignment on FMeshNetworkStatus");
static_assert(sizeof(FMeshNetworkStatus) == 0x000003, "Wrong size on FMeshNetworkStatus");
static_assert(offsetof(FMeshNetworkStatus, bEnabled) == 0x000000, "Member 'FMeshNetworkStatus::bEnabled' has a wrong offset!");
static_assert(offsetof(FMeshNetworkStatus, bConnectedToRoot) == 0x000001, "Member 'FMeshNetworkStatus::bConnectedToRoot' has a wrong offset!");
static_assert(offsetof(FMeshNetworkStatus, GameServerNodeType) == 0x000002, "Member 'FMeshNetworkStatus::GameServerNodeType' has a wrong offset!");

// ScriptStruct FortniteGame.FortAimAssist2D_InputParams
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FFortAimAssist2D_InputParams final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAimAssist2D_InputParams) == 0x000008, "Wrong alignment on FFortAimAssist2D_InputParams");
static_assert(sizeof(FFortAimAssist2D_InputParams) == 0x000038, "Wrong size on FFortAimAssist2D_InputParams");

// ScriptStruct FortniteGame.GameplayMutatorObjectData
// 0x001C (0x0028 - 0x000C)
struct FGameplayMutatorObjectData final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                TheObject;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectId;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectValue1;                                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectValue2;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayMutatorObjectData) == 0x000008, "Wrong alignment on FGameplayMutatorObjectData");
static_assert(sizeof(FGameplayMutatorObjectData) == 0x000028, "Wrong size on FGameplayMutatorObjectData");
static_assert(offsetof(FGameplayMutatorObjectData, TheObject) == 0x000010, "Member 'FGameplayMutatorObjectData::TheObject' has a wrong offset!");
static_assert(offsetof(FGameplayMutatorObjectData, ObjectId) == 0x000018, "Member 'FGameplayMutatorObjectData::ObjectId' has a wrong offset!");
static_assert(offsetof(FGameplayMutatorObjectData, ObjectValue1) == 0x00001C, "Member 'FGameplayMutatorObjectData::ObjectValue1' has a wrong offset!");
static_assert(offsetof(FGameplayMutatorObjectData, ObjectValue2) == 0x000020, "Member 'FGameplayMutatorObjectData::ObjectValue2' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayMutatorObjectDataArray
// 0x0010 (0x0118 - 0x0108)
struct FGameplayMutatorObjectDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FGameplayMutatorObjectData>     ObjectDataList;                                    // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayMutatorObjectDataArray) == 0x000008, "Wrong alignment on FGameplayMutatorObjectDataArray");
static_assert(sizeof(FGameplayMutatorObjectDataArray) == 0x000118, "Wrong size on FGameplayMutatorObjectDataArray");
static_assert(offsetof(FGameplayMutatorObjectDataArray, ObjectDataList) == 0x000108, "Member 'FGameplayMutatorObjectDataArray::ObjectDataList' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaTutorial_AiTargetInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortAthenaTutorial_AiTargetInfo final
{
public:
	class AActor*                                 TargetMarker;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIPawn*                            TargetActor;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaTutorial_AiTargetInfo) == 0x000008, "Wrong alignment on FFortAthenaTutorial_AiTargetInfo");
static_assert(sizeof(FFortAthenaTutorial_AiTargetInfo) == 0x000018, "Wrong size on FFortAthenaTutorial_AiTargetInfo");
static_assert(offsetof(FFortAthenaTutorial_AiTargetInfo, TargetMarker) == 0x000000, "Member 'FFortAthenaTutorial_AiTargetInfo::TargetMarker' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorial_AiTargetInfo, TargetActor) == 0x000008, "Member 'FFortAthenaTutorial_AiTargetInfo::TargetActor' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterRequirements
// 0x0050 (0x0050 - 0x0000)
struct FFortAIEncounterRequirements final
{
public:
	EFortMissionType                              AssociatedMissionType;                             // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAIEncounterRequirements) == 0x000008, "Wrong alignment on FFortAIEncounterRequirements");
static_assert(sizeof(FFortAIEncounterRequirements) == 0x000050, "Wrong size on FFortAIEncounterRequirements");
static_assert(offsetof(FFortAIEncounterRequirements, AssociatedMissionType) == 0x000000, "Member 'FFortAIEncounterRequirements::AssociatedMissionType' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRequirements, TagQuery) == 0x000008, "Member 'FFortAIEncounterRequirements::TagQuery' has a wrong offset!");

// ScriptStruct FortniteGame.FortAILootDropModifiers
// 0x0060 (0x0060 - 0x0000)
struct FFortAILootDropModifiers final
{
public:
	struct FFortAIEncounterRequirements           Requirements;                                      // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            LootDropModifierRows;                              // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAILootDropModifiers) == 0x000008, "Wrong alignment on FFortAILootDropModifiers");
static_assert(sizeof(FFortAILootDropModifiers) == 0x000060, "Wrong size on FFortAILootDropModifiers");
static_assert(offsetof(FFortAILootDropModifiers, Requirements) == 0x000000, "Member 'FFortAILootDropModifiers::Requirements' has a wrong offset!");
static_assert(offsetof(FFortAILootDropModifiers, LootDropModifierRows) == 0x000050, "Member 'FFortAILootDropModifiers::LootDropModifierRows' has a wrong offset!");

// ScriptStruct FortniteGame.LocationLerpData
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FLocationLerpData final
{
public:
	struct FVector                                PositionLerp_Start;                                // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PositionLerp_End;                                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PositionLerp_Target;                               // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalLerpTime;                                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocationLerpData) == 0x000008, "Wrong alignment on FLocationLerpData");
static_assert(sizeof(FLocationLerpData) == 0x000038, "Wrong size on FLocationLerpData");
static_assert(offsetof(FLocationLerpData, PositionLerp_Start) == 0x000000, "Member 'FLocationLerpData::PositionLerp_Start' has a wrong offset!");
static_assert(offsetof(FLocationLerpData, PositionLerp_End) == 0x00000C, "Member 'FLocationLerpData::PositionLerp_End' has a wrong offset!");
static_assert(offsetof(FLocationLerpData, PositionLerp_Target) == 0x000018, "Member 'FLocationLerpData::PositionLerp_Target' has a wrong offset!");
static_assert(offsetof(FLocationLerpData, TotalLerpTime) == 0x000024, "Member 'FLocationLerpData::TotalLerpTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortLoadingBlockScreen
// 0x0428 (0x0428 - 0x0000)
struct FFortLoadingBlockScreen final
{
public:
	struct FProgressBarStyle                      LoadingProgressBar;                                // 0x0000(0x01A0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMargin                                LoadingProgressBarPadding;                         // 0x01A0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        LoadingTextStyle;                                  // 0x01B0(0x0268)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMargin                                LoadingTextPadding;                                // 0x0418(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLoadingBlockScreen) == 0x000008, "Wrong alignment on FFortLoadingBlockScreen");
static_assert(sizeof(FFortLoadingBlockScreen) == 0x000428, "Wrong size on FFortLoadingBlockScreen");
static_assert(offsetof(FFortLoadingBlockScreen, LoadingProgressBar) == 0x000000, "Member 'FFortLoadingBlockScreen::LoadingProgressBar' has a wrong offset!");
static_assert(offsetof(FFortLoadingBlockScreen, LoadingProgressBarPadding) == 0x0001A0, "Member 'FFortLoadingBlockScreen::LoadingProgressBarPadding' has a wrong offset!");
static_assert(offsetof(FFortLoadingBlockScreen, LoadingTextStyle) == 0x0001B0, "Member 'FFortLoadingBlockScreen::LoadingTextStyle' has a wrong offset!");
static_assert(offsetof(FFortLoadingBlockScreen, LoadingTextPadding) == 0x000418, "Member 'FFortLoadingBlockScreen::LoadingTextPadding' has a wrong offset!");

// ScriptStruct FortniteGame.FortUIFeedback
// 0x0018 (0x0018 - 0x0000)
struct FFortUIFeedback
{
public:
	class USoundBase*                             Audio;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeIn;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUIFeedback) == 0x000008, "Wrong alignment on FFortUIFeedback");
static_assert(sizeof(FFortUIFeedback) == 0x000018, "Wrong size on FFortUIFeedback");
static_assert(offsetof(FFortUIFeedback, Audio) == 0x000000, "Member 'FFortUIFeedback::Audio' has a wrong offset!");
static_assert(offsetof(FFortUIFeedback, bLooping) == 0x000008, "Member 'FFortUIFeedback::bLooping' has a wrong offset!");
static_assert(offsetof(FFortUIFeedback, FadeIn) == 0x00000C, "Member 'FFortUIFeedback::FadeIn' has a wrong offset!");
static_assert(offsetof(FFortUIFeedback, FadeOut) == 0x000010, "Member 'FFortUIFeedback::FadeOut' has a wrong offset!");

// ScriptStruct FortniteGame.FortUIFeedbackBlueprintOnly
// 0x0000 (0x0018 - 0x0018)
struct FFortUIFeedbackBlueprintOnly final : public FFortUIFeedback
{
};
static_assert(alignof(FFortUIFeedbackBlueprintOnly) == 0x000008, "Wrong alignment on FFortUIFeedbackBlueprintOnly");
static_assert(sizeof(FFortUIFeedbackBlueprintOnly) == 0x000018, "Wrong size on FFortUIFeedbackBlueprintOnly");

// ScriptStruct FortniteGame.PlaneSquadInfo
// 0x003C (0x0048 - 0x000C)
struct FPlaneSquadInfo final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerControllerAthena*>    Controllers;                                       // 0x0010(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	class AFortPlayerStateAthena*                 LastDriver;                                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SquadId;                                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlanesRemaining;                                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastCollectedChest;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAthenaVehicle*                     LastCollectedChestVehicle;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastCollectedChestServerTime;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaneSquadInfo) == 0x000008, "Wrong alignment on FPlaneSquadInfo");
static_assert(sizeof(FPlaneSquadInfo) == 0x000048, "Wrong size on FPlaneSquadInfo");
static_assert(offsetof(FPlaneSquadInfo, Controllers) == 0x000010, "Member 'FPlaneSquadInfo::Controllers' has a wrong offset!");
static_assert(offsetof(FPlaneSquadInfo, LastDriver) == 0x000020, "Member 'FPlaneSquadInfo::LastDriver' has a wrong offset!");
static_assert(offsetof(FPlaneSquadInfo, SquadId) == 0x000028, "Member 'FPlaneSquadInfo::SquadId' has a wrong offset!");
static_assert(offsetof(FPlaneSquadInfo, PlanesRemaining) == 0x00002C, "Member 'FPlaneSquadInfo::PlanesRemaining' has a wrong offset!");
static_assert(offsetof(FPlaneSquadInfo, LastCollectedChest) == 0x000030, "Member 'FPlaneSquadInfo::LastCollectedChest' has a wrong offset!");
static_assert(offsetof(FPlaneSquadInfo, LastCollectedChestVehicle) == 0x000038, "Member 'FPlaneSquadInfo::LastCollectedChestVehicle' has a wrong offset!");
static_assert(offsetof(FPlaneSquadInfo, LastCollectedChestServerTime) == 0x000040, "Member 'FPlaneSquadInfo::LastCollectedChestServerTime' has a wrong offset!");

// ScriptStruct FortniteGame.BlackWidowLegSinAnimationScalar
// 0x0020 (0x0020 - 0x0000)
struct FBlackWidowLegSinAnimationScalar final
{
public:
	bool                                          bUseConstantValue;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConstantValue;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOffset;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrequencyOffset;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SinOffset;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResultMultiplier;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MappedRangeOutput;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlackWidowLegSinAnimationScalar) == 0x000004, "Wrong alignment on FBlackWidowLegSinAnimationScalar");
static_assert(sizeof(FBlackWidowLegSinAnimationScalar) == 0x000020, "Wrong size on FBlackWidowLegSinAnimationScalar");
static_assert(offsetof(FBlackWidowLegSinAnimationScalar, bUseConstantValue) == 0x000000, "Member 'FBlackWidowLegSinAnimationScalar::bUseConstantValue' has a wrong offset!");
static_assert(offsetof(FBlackWidowLegSinAnimationScalar, ConstantValue) == 0x000004, "Member 'FBlackWidowLegSinAnimationScalar::ConstantValue' has a wrong offset!");
static_assert(offsetof(FBlackWidowLegSinAnimationScalar, TimeOffset) == 0x000008, "Member 'FBlackWidowLegSinAnimationScalar::TimeOffset' has a wrong offset!");
static_assert(offsetof(FBlackWidowLegSinAnimationScalar, FrequencyOffset) == 0x00000C, "Member 'FBlackWidowLegSinAnimationScalar::FrequencyOffset' has a wrong offset!");
static_assert(offsetof(FBlackWidowLegSinAnimationScalar, SinOffset) == 0x000010, "Member 'FBlackWidowLegSinAnimationScalar::SinOffset' has a wrong offset!");
static_assert(offsetof(FBlackWidowLegSinAnimationScalar, ResultMultiplier) == 0x000014, "Member 'FBlackWidowLegSinAnimationScalar::ResultMultiplier' has a wrong offset!");
static_assert(offsetof(FBlackWidowLegSinAnimationScalar, MappedRangeOutput) == 0x000018, "Member 'FBlackWidowLegSinAnimationScalar::MappedRangeOutput' has a wrong offset!");

// ScriptStruct FortniteGame.BlackWidowLegSinAnimationRotator
// 0x0060 (0x0060 - 0x0000)
struct FBlackWidowLegSinAnimationRotator final
{
public:
	struct FBlackWidowLegSinAnimationScalar       RollAnimation;                                     // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FBlackWidowLegSinAnimationScalar       PitchAnimation;                                    // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FBlackWidowLegSinAnimationScalar       YawAnimation;                                      // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlackWidowLegSinAnimationRotator) == 0x000004, "Wrong alignment on FBlackWidowLegSinAnimationRotator");
static_assert(sizeof(FBlackWidowLegSinAnimationRotator) == 0x000060, "Wrong size on FBlackWidowLegSinAnimationRotator");
static_assert(offsetof(FBlackWidowLegSinAnimationRotator, RollAnimation) == 0x000000, "Member 'FBlackWidowLegSinAnimationRotator::RollAnimation' has a wrong offset!");
static_assert(offsetof(FBlackWidowLegSinAnimationRotator, PitchAnimation) == 0x000020, "Member 'FBlackWidowLegSinAnimationRotator::PitchAnimation' has a wrong offset!");
static_assert(offsetof(FBlackWidowLegSinAnimationRotator, YawAnimation) == 0x000040, "Member 'FBlackWidowLegSinAnimationRotator::YawAnimation' has a wrong offset!");

// ScriptStruct FortniteGame.OverlapRestrictions
// 0x000C (0x000C - 0x0000)
struct FOverlapRestrictions final
{
public:
	int32                                         OverlapsPerActor;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OverlapActorTagRestrictions;                       // 0x0004(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOverlapRestrictions) == 0x000004, "Wrong alignment on FOverlapRestrictions");
static_assert(sizeof(FOverlapRestrictions) == 0x00000C, "Wrong size on FOverlapRestrictions");
static_assert(offsetof(FOverlapRestrictions, OverlapsPerActor) == 0x000000, "Member 'FOverlapRestrictions::OverlapsPerActor' has a wrong offset!");
static_assert(offsetof(FOverlapRestrictions, OverlapActorTagRestrictions) == 0x000004, "Member 'FOverlapRestrictions::OverlapActorTagRestrictions' has a wrong offset!");

// ScriptStruct FortniteGame.AshtonStoneData
// 0x00B8 (0x00B8 - 0x0000)
struct FAshtonStoneData final
{
public:
	EAshtonStoneType                              StoneType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItemDefinition*               StoneItemDefinition;                               // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            StoneIconBrush;                                    // 0x0010(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              MapIconScale;                                      // 0x0098(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x00A0(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PickupTag;                                         // 0x00A8(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAshtonStoneStateType                         InitialStoneState;                                 // 0x00B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAshtonStoneData) == 0x000008, "Wrong alignment on FAshtonStoneData");
static_assert(sizeof(FAshtonStoneData) == 0x0000B8, "Wrong size on FAshtonStoneData");
static_assert(offsetof(FAshtonStoneData, StoneType) == 0x000000, "Member 'FAshtonStoneData::StoneType' has a wrong offset!");
static_assert(offsetof(FAshtonStoneData, StoneItemDefinition) == 0x000008, "Member 'FAshtonStoneData::StoneItemDefinition' has a wrong offset!");
static_assert(offsetof(FAshtonStoneData, StoneIconBrush) == 0x000010, "Member 'FAshtonStoneData::StoneIconBrush' has a wrong offset!");
static_assert(offsetof(FAshtonStoneData, MapIconScale) == 0x000098, "Member 'FAshtonStoneData::MapIconScale' has a wrong offset!");
static_assert(offsetof(FAshtonStoneData, GameplayTag) == 0x0000A0, "Member 'FAshtonStoneData::GameplayTag' has a wrong offset!");
static_assert(offsetof(FAshtonStoneData, PickupTag) == 0x0000A8, "Member 'FAshtonStoneData::PickupTag' has a wrong offset!");
static_assert(offsetof(FAshtonStoneData, InitialStoneState) == 0x0000B0, "Member 'FAshtonStoneData::InitialStoneState' has a wrong offset!");

// ScriptStruct FortniteGame.ChangeTeamInfo
// 0x0028 (0x0028 - 0x0000)
struct FChangeTeamInfo final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ChangeTeamTags;                                    // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChangeTeamInfo) == 0x000008, "Wrong alignment on FChangeTeamInfo");
static_assert(sizeof(FChangeTeamInfo) == 0x000028, "Wrong size on FChangeTeamInfo");
static_assert(offsetof(FChangeTeamInfo, Instigator) == 0x000000, "Member 'FChangeTeamInfo::Instigator' has a wrong offset!");
static_assert(offsetof(FChangeTeamInfo, ChangeTeamTags) == 0x000008, "Member 'FChangeTeamInfo::ChangeTeamTags' has a wrong offset!");

// ScriptStruct FortniteGame.TransmogSacrifice
// 0x0008 (0x0010 - 0x0008)
struct FTransmogSacrifice final : public FTableRowBase
{
public:
	int32                                         TransmogSacrificePoints;                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTransmogSacrifice) == 0x000008, "Wrong alignment on FTransmogSacrifice");
static_assert(sizeof(FTransmogSacrifice) == 0x000010, "Wrong size on FTransmogSacrifice");
static_assert(offsetof(FTransmogSacrifice, TransmogSacrificePoints) == 0x000008, "Member 'FTransmogSacrifice::TransmogSacrificePoints' has a wrong offset!");

// ScriptStruct FortniteGame.DynamicLandData
// 0x00A0 (0x00A0 - 0x0000)
struct FDynamicLandData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            LandBrush;                                         // 0x0018(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicLandData) == 0x000008, "Wrong alignment on FDynamicLandData");
static_assert(sizeof(FDynamicLandData) == 0x0000A0, "Wrong size on FDynamicLandData");
static_assert(offsetof(FDynamicLandData, Name) == 0x000000, "Member 'FDynamicLandData::Name' has a wrong offset!");
static_assert(offsetof(FDynamicLandData, WorldPosition) == 0x000008, "Member 'FDynamicLandData::WorldPosition' has a wrong offset!");
static_assert(offsetof(FDynamicLandData, LandBrush) == 0x000018, "Member 'FDynamicLandData::LandBrush' has a wrong offset!");

// ScriptStruct FortniteGame.GameSummaryInfo
// 0x0018 (0x0018 - 0x0000)
struct FGameSummaryInfo final
{
public:
	class FString                                 GameSessionId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Completed;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameSummaryInfo) == 0x000008, "Wrong alignment on FGameSummaryInfo");
static_assert(sizeof(FGameSummaryInfo) == 0x000018, "Wrong size on FGameSummaryInfo");
static_assert(offsetof(FGameSummaryInfo, GameSessionId) == 0x000000, "Member 'FGameSummaryInfo::GameSessionId' has a wrong offset!");
static_assert(offsetof(FGameSummaryInfo, Completed) == 0x000010, "Member 'FGameSummaryInfo::Completed' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityTagRelationship
// 0x0048 (0x0048 - 0x0000)
struct FFortAbilityTagRelationship final
{
public:
	struct FGameplayTag                           AbilityTag;                                        // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityTagsToBlock;                                // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityTagsToCancel;                               // 0x0028(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAbilityTagRelationship) == 0x000008, "Wrong alignment on FFortAbilityTagRelationship");
static_assert(sizeof(FFortAbilityTagRelationship) == 0x000048, "Wrong size on FFortAbilityTagRelationship");
static_assert(offsetof(FFortAbilityTagRelationship, AbilityTag) == 0x000000, "Member 'FFortAbilityTagRelationship::AbilityTag' has a wrong offset!");
static_assert(offsetof(FFortAbilityTagRelationship, AbilityTagsToBlock) == 0x000008, "Member 'FFortAbilityTagRelationship::AbilityTagsToBlock' has a wrong offset!");
static_assert(offsetof(FFortAbilityTagRelationship, AbilityTagsToCancel) == 0x000028, "Member 'FFortAbilityTagRelationship::AbilityTagsToCancel' has a wrong offset!");

// ScriptStruct FortniteGame.BarrierFlagDisplayData
// 0x0248 (0x0248 - 0x0000)
struct FBarrierFlagDisplayData final
{
public:
	class UStaticMesh*                            HeadMesh;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MiniMap_EnabledBrush;                              // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MiniMap_DisabledBrush;                             // 0x0090(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Compass_EnabledBrush;                              // 0x0118(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Compass_DisabledBrush;                             // 0x01A0(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FVector2D                              MapSize;                                           // 0x0228(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CompassSize;                                       // 0x0230(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshScale;                                         // 0x0238(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBarrierFlagDisplayData) == 0x000008, "Wrong alignment on FBarrierFlagDisplayData");
static_assert(sizeof(FBarrierFlagDisplayData) == 0x000248, "Wrong size on FBarrierFlagDisplayData");
static_assert(offsetof(FBarrierFlagDisplayData, HeadMesh) == 0x000000, "Member 'FBarrierFlagDisplayData::HeadMesh' has a wrong offset!");
static_assert(offsetof(FBarrierFlagDisplayData, MiniMap_EnabledBrush) == 0x000008, "Member 'FBarrierFlagDisplayData::MiniMap_EnabledBrush' has a wrong offset!");
static_assert(offsetof(FBarrierFlagDisplayData, MiniMap_DisabledBrush) == 0x000090, "Member 'FBarrierFlagDisplayData::MiniMap_DisabledBrush' has a wrong offset!");
static_assert(offsetof(FBarrierFlagDisplayData, Compass_EnabledBrush) == 0x000118, "Member 'FBarrierFlagDisplayData::Compass_EnabledBrush' has a wrong offset!");
static_assert(offsetof(FBarrierFlagDisplayData, Compass_DisabledBrush) == 0x0001A0, "Member 'FBarrierFlagDisplayData::Compass_DisabledBrush' has a wrong offset!");
static_assert(offsetof(FBarrierFlagDisplayData, MapSize) == 0x000228, "Member 'FBarrierFlagDisplayData::MapSize' has a wrong offset!");
static_assert(offsetof(FBarrierFlagDisplayData, CompassSize) == 0x000230, "Member 'FBarrierFlagDisplayData::CompassSize' has a wrong offset!");
static_assert(offsetof(FBarrierFlagDisplayData, MeshScale) == 0x000238, "Member 'FBarrierFlagDisplayData::MeshScale' has a wrong offset!");

// ScriptStruct FortniteGame.ClientIdRestrictions
// 0x0020 (0x0020 - 0x0000)
struct FClientIdRestrictions final
{
public:
	class FString                                 ClientId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         RestrictedPlatforms;                               // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientIdRestrictions) == 0x000008, "Wrong alignment on FClientIdRestrictions");
static_assert(sizeof(FClientIdRestrictions) == 0x000020, "Wrong size on FClientIdRestrictions");
static_assert(offsetof(FClientIdRestrictions, ClientId) == 0x000000, "Member 'FClientIdRestrictions::ClientId' has a wrong offset!");
static_assert(offsetof(FClientIdRestrictions, RestrictedPlatforms) == 0x000010, "Member 'FClientIdRestrictions::RestrictedPlatforms' has a wrong offset!");

// ScriptStruct FortniteGame.AircraftFlightInfo
// 0x0028 (0x0028 - 0x0000)
struct FAircraftFlightInfo final
{
public:
	struct FVector_NetQuantize100                 FlightStartLocation;                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               FlightStartRotation;                               // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FlightSpeed;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeTillFlightEnd;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeTillDropStart;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeTillDropEnd;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAircraftFlightInfo) == 0x000004, "Wrong alignment on FAircraftFlightInfo");
static_assert(sizeof(FAircraftFlightInfo) == 0x000028, "Wrong size on FAircraftFlightInfo");
static_assert(offsetof(FAircraftFlightInfo, FlightStartLocation) == 0x000000, "Member 'FAircraftFlightInfo::FlightStartLocation' has a wrong offset!");
static_assert(offsetof(FAircraftFlightInfo, FlightStartRotation) == 0x00000C, "Member 'FAircraftFlightInfo::FlightStartRotation' has a wrong offset!");
static_assert(offsetof(FAircraftFlightInfo, FlightSpeed) == 0x000018, "Member 'FAircraftFlightInfo::FlightSpeed' has a wrong offset!");
static_assert(offsetof(FAircraftFlightInfo, TimeTillFlightEnd) == 0x00001C, "Member 'FAircraftFlightInfo::TimeTillFlightEnd' has a wrong offset!");
static_assert(offsetof(FAircraftFlightInfo, TimeTillDropStart) == 0x000020, "Member 'FAircraftFlightInfo::TimeTillDropStart' has a wrong offset!");
static_assert(offsetof(FAircraftFlightInfo, TimeTillDropEnd) == 0x000024, "Member 'FAircraftFlightInfo::TimeTillDropEnd' has a wrong offset!");

// ScriptStruct FortniteGame.FortCosmeticLockerSlotData
// 0x0020 (0x0020 - 0x0000)
struct FFortCosmeticLockerSlotData final
{
public:
	EAthenaCustomizationCategory                  SlotCategory;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemToSlot;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndexForCategory;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCosmeticLockerSlotData) == 0x000008, "Wrong alignment on FFortCosmeticLockerSlotData");
static_assert(sizeof(FFortCosmeticLockerSlotData) == 0x000020, "Wrong size on FFortCosmeticLockerSlotData");
static_assert(offsetof(FFortCosmeticLockerSlotData, SlotCategory) == 0x000000, "Member 'FFortCosmeticLockerSlotData::SlotCategory' has a wrong offset!");
static_assert(offsetof(FFortCosmeticLockerSlotData, ItemToSlot) == 0x000008, "Member 'FFortCosmeticLockerSlotData::ItemToSlot' has a wrong offset!");
static_assert(offsetof(FFortCosmeticLockerSlotData, SlotIndexForCategory) == 0x000018, "Member 'FFortCosmeticLockerSlotData::SlotIndexForCategory' has a wrong offset!");

// ScriptStruct FortniteGame.FortWinnerPlayerData
// 0x0004 (0x0004 - 0x0000)
struct FFortWinnerPlayerData final
{
public:
	int32                                         PlayerID;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortWinnerPlayerData) == 0x000004, "Wrong alignment on FFortWinnerPlayerData");
static_assert(sizeof(FFortWinnerPlayerData) == 0x000004, "Wrong size on FFortWinnerPlayerData");
static_assert(offsetof(FFortWinnerPlayerData, PlayerID) == 0x000000, "Member 'FFortWinnerPlayerData::PlayerID' has a wrong offset!");

// ScriptStruct FortniteGame.LeaderboardRowData
// 0x0048 (0x0048 - 0x0000)
struct FLeaderboardRowData final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 User;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       PlatformAccountId;                                 // 0x0020(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeaderboardRowData) == 0x000008, "Wrong alignment on FLeaderboardRowData");
static_assert(sizeof(FLeaderboardRowData) == 0x000048, "Wrong size on FLeaderboardRowData");
static_assert(offsetof(FLeaderboardRowData, Rank) == 0x000000, "Member 'FLeaderboardRowData::Rank' has a wrong offset!");
static_assert(offsetof(FLeaderboardRowData, User) == 0x000008, "Member 'FLeaderboardRowData::User' has a wrong offset!");
static_assert(offsetof(FLeaderboardRowData, Value) == 0x000018, "Member 'FLeaderboardRowData::Value' has a wrong offset!");
static_assert(offsetof(FLeaderboardRowData, PlatformAccountId) == 0x000020, "Member 'FLeaderboardRowData::PlatformAccountId' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_ShoppingCart
// 0x005C (0x005C - 0x0000)
struct FFortAnimInput_ShoppingCart final
{
public:
	uint8                                         bIsUsingShoppingCart : 1;                          // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ECoastState                                   CoastState;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsCoastStatePedaling : 1;                         // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsCoastStateCoasting : 1;                         // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsCoastStateDismount : 1;                         // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsCoastStateIdle : 1;                             // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsInAir : 1;                                      // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsCoasting : 1;                                   // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsPedaling : 1;                                   // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsReadyToPedal : 1;                               // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IsReadyToPedal;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bWantsToCoast : 1;                                 // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsCoastIdling : 1;                                // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsStartCoasting : 1;                              // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsEndCoasting : 1;                                // 0x0008(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDismountingFromCoast : 1;                       // 0x0008(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsCoastingOrDismountingFromCoast : 1;             // 0x0008(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsStandingInPlace : 1;                            // 0x0008(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSprinting : 1;                                  // 0x0008(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSprintingAndMovingForward : 1;                  // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMovingForwardNotSprinting : 1;                  // 0x0009(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBraking : 1;                                    // 0x0009(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsReversing : 1;                                  // 0x0009(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMoving : 1;                                     // 0x0009(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMovingForward : 1;                              // 0x0009(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMovingBackwards : 1;                            // 0x0009(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMovingOrTurningInPlace : 1;                     // 0x0009(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsInAirSteady : 1;                                // 0x000A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsOnSlope : 1;                                    // 0x000A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimFWD : 1;                                       // 0x000A(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimBWD : 1;                                       // 0x000A(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimLFT : 1;                                       // 0x000A(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimRGT : 1;                                       // 0x000A(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardVelocity;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardSpeedKmH;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentBrakeForce;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunForwardAlpha;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsAcceleratingForward : 1;                        // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsAccelBreakingOrReversing : 1;                   // 0x001C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteerAngle;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAngleInterpSpeed;                             // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoastSteerAngleInterpSpeed;                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IsReadyToPedalInterpSpeed;                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandingInPlaceSteerAngle;                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopePitchDegreeAngle;                             // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeRollDegreeAngle;                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnToVehicleDeltaYawAngleDegrees;                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimCardDirDeadZoneAngleDegrees;                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimCardDirAngleOffsetDegrees;                      // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimFWDDeltaAngleDegrees;                           // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimBWDDeltaAngleDegrees;                           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimLFTDeltaAngleDegrees;                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimRGTDeltaAngleDegrees;                           // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastCardDirIndex;                                  // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_ShoppingCart) == 0x000004, "Wrong alignment on FFortAnimInput_ShoppingCart");
static_assert(sizeof(FFortAnimInput_ShoppingCart) == 0x00005C, "Wrong size on FFortAnimInput_ShoppingCart");
static_assert(offsetof(FFortAnimInput_ShoppingCart, CoastState) == 0x000001, "Member 'FFortAnimInput_ShoppingCart::CoastState' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, IsReadyToPedal) == 0x000004, "Member 'FFortAnimInput_ShoppingCart::IsReadyToPedal' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, ForwardVelocity) == 0x00000C, "Member 'FFortAnimInput_ShoppingCart::ForwardVelocity' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, ForwardSpeedKmH) == 0x000010, "Member 'FFortAnimInput_ShoppingCart::ForwardSpeedKmH' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, CurrentBrakeForce) == 0x000014, "Member 'FFortAnimInput_ShoppingCart::CurrentBrakeForce' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, RunForwardAlpha) == 0x000018, "Member 'FFortAnimInput_ShoppingCart::RunForwardAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, SteerAngle) == 0x000020, "Member 'FFortAnimInput_ShoppingCart::SteerAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, SteerAngleInterpSpeed) == 0x000024, "Member 'FFortAnimInput_ShoppingCart::SteerAngleInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, CoastSteerAngleInterpSpeed) == 0x000028, "Member 'FFortAnimInput_ShoppingCart::CoastSteerAngleInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, IsReadyToPedalInterpSpeed) == 0x00002C, "Member 'FFortAnimInput_ShoppingCart::IsReadyToPedalInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, StandingInPlaceSteerAngle) == 0x000030, "Member 'FFortAnimInput_ShoppingCart::StandingInPlaceSteerAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, SlopePitchDegreeAngle) == 0x000034, "Member 'FFortAnimInput_ShoppingCart::SlopePitchDegreeAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, SlopeRollDegreeAngle) == 0x000038, "Member 'FFortAnimInput_ShoppingCart::SlopeRollDegreeAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, PawnToVehicleDeltaYawAngleDegrees) == 0x00003C, "Member 'FFortAnimInput_ShoppingCart::PawnToVehicleDeltaYawAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, AimCardDirDeadZoneAngleDegrees) == 0x000040, "Member 'FFortAnimInput_ShoppingCart::AimCardDirDeadZoneAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, AimCardDirAngleOffsetDegrees) == 0x000044, "Member 'FFortAnimInput_ShoppingCart::AimCardDirAngleOffsetDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, AimFWDDeltaAngleDegrees) == 0x000048, "Member 'FFortAnimInput_ShoppingCart::AimFWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, AimBWDDeltaAngleDegrees) == 0x00004C, "Member 'FFortAnimInput_ShoppingCart::AimBWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, AimLFTDeltaAngleDegrees) == 0x000050, "Member 'FFortAnimInput_ShoppingCart::AimLFTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, AimRGTDeltaAngleDegrees) == 0x000054, "Member 'FFortAnimInput_ShoppingCart::AimRGTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_ShoppingCart, LastCardDirIndex) == 0x000058, "Member 'FFortAnimInput_ShoppingCart::LastCardDirIndex' has a wrong offset!");

// ScriptStruct FortniteGame.CachedPlayerFOBInformation
// 0x0030 (0x0030 - 0x0000)
struct FCachedPlayerFOBInformation final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Team;                                              // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCachedPlayerFOBInformation) == 0x000008, "Wrong alignment on FCachedPlayerFOBInformation");
static_assert(sizeof(FCachedPlayerFOBInformation) == 0x000030, "Wrong size on FCachedPlayerFOBInformation");
static_assert(offsetof(FCachedPlayerFOBInformation, PlayerID) == 0x000000, "Member 'FCachedPlayerFOBInformation::PlayerID' has a wrong offset!");
static_assert(offsetof(FCachedPlayerFOBInformation, Team) == 0x000028, "Member 'FCachedPlayerFOBInformation::Team' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingContainerDebugInfo
// 0x0030 (0x0030 - 0x0000)
struct FBuildingContainerDebugInfo final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  LocationTags;                                      // 0x0010(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingContainerDebugInfo) == 0x000008, "Wrong alignment on FBuildingContainerDebugInfo");
static_assert(sizeof(FBuildingContainerDebugInfo) == 0x000030, "Wrong size on FBuildingContainerDebugInfo");
static_assert(offsetof(FBuildingContainerDebugInfo, Location) == 0x000000, "Member 'FBuildingContainerDebugInfo::Location' has a wrong offset!");
static_assert(offsetof(FBuildingContainerDebugInfo, LocationTags) == 0x000010, "Member 'FBuildingContainerDebugInfo::LocationTags' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingActorNavArea
// 0x0004 (0x0004 - 0x0000)
struct FBuildingActorNavArea final
{
public:
	int32                                         AreaBits;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingActorNavArea) == 0x000004, "Wrong alignment on FBuildingActorNavArea");
static_assert(sizeof(FBuildingActorNavArea) == 0x000004, "Wrong size on FBuildingActorNavArea");
static_assert(offsetof(FBuildingActorNavArea, AreaBits) == 0x000000, "Member 'FBuildingActorNavArea::AreaBits' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseSquadSlotId
// 0x000C (0x000C - 0x0000)
struct FHomebaseSquadSlotId final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseSquadSlotId) == 0x000004, "Wrong alignment on FHomebaseSquadSlotId");
static_assert(sizeof(FHomebaseSquadSlotId) == 0x00000C, "Wrong size on FHomebaseSquadSlotId");
static_assert(offsetof(FHomebaseSquadSlotId, SquadId) == 0x000000, "Member 'FHomebaseSquadSlotId::SquadId' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadSlotId, SquadSlotIndex) == 0x000008, "Member 'FHomebaseSquadSlotId::SquadSlotIndex' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseNodeLevel
// 0x0068 (0x0068 - 0x0000)
struct FHomebaseNodeLevel final
{
public:
	class FName                                   DisplayDataId;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinCommanderLevel;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemQuantityPair>          Cost;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           GameplayEffectRowNames;                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortAbilityKit>         AbilityKit;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHomebaseSquadSlotId>           UnlockedSquadSlots;                                // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseNodeLevel) == 0x000008, "Wrong alignment on FHomebaseNodeLevel");
static_assert(sizeof(FHomebaseNodeLevel) == 0x000068, "Wrong size on FHomebaseNodeLevel");
static_assert(offsetof(FHomebaseNodeLevel, DisplayDataId) == 0x000000, "Member 'FHomebaseNodeLevel::DisplayDataId' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeLevel, MinCommanderLevel) == 0x000008, "Member 'FHomebaseNodeLevel::MinCommanderLevel' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeLevel, Cost) == 0x000010, "Member 'FHomebaseNodeLevel::Cost' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeLevel, GameplayEffectRowNames) == 0x000020, "Member 'FHomebaseNodeLevel::GameplayEffectRowNames' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeLevel, AbilityKit) == 0x000030, "Member 'FHomebaseNodeLevel::AbilityKit' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeLevel, UnlockedSquadSlots) == 0x000058, "Member 'FHomebaseNodeLevel::UnlockedSquadSlots' has a wrong offset!");

// ScriptStruct FortniteGame.ProfileGoScenario
// 0x0050 (0x0050 - 0x0000)
struct FProfileGoScenario
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 OnBegin;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnEnd;                                             // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoGenerated;                                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSetupCheats;                                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProfileGoScenario) == 0x000008, "Wrong alignment on FProfileGoScenario");
static_assert(sizeof(FProfileGoScenario) == 0x000050, "Wrong size on FProfileGoScenario");
static_assert(offsetof(FProfileGoScenario, Name) == 0x000000, "Member 'FProfileGoScenario::Name' has a wrong offset!");
static_assert(offsetof(FProfileGoScenario, Position) == 0x000010, "Member 'FProfileGoScenario::Position' has a wrong offset!");
static_assert(offsetof(FProfileGoScenario, Orientation) == 0x00001C, "Member 'FProfileGoScenario::Orientation' has a wrong offset!");
static_assert(offsetof(FProfileGoScenario, OnBegin) == 0x000028, "Member 'FProfileGoScenario::OnBegin' has a wrong offset!");
static_assert(offsetof(FProfileGoScenario, OnEnd) == 0x000038, "Member 'FProfileGoScenario::OnEnd' has a wrong offset!");
static_assert(offsetof(FProfileGoScenario, AutoGenerated) == 0x000048, "Member 'FProfileGoScenario::AutoGenerated' has a wrong offset!");
static_assert(offsetof(FProfileGoScenario, UseSetupCheats) == 0x000049, "Member 'FProfileGoScenario::UseSetupCheats' has a wrong offset!");

// ScriptStruct FortniteGame.FortEarnScoreNotification
// 0x0018 (0x0018 - 0x0000)
struct FFortEarnScoreNotification final
{
public:
	int32                                         BaseXPEarned;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusXPEarned;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostXPEarned;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostXPMissed;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestXPEarned;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupBoostXPEarned;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEarnScoreNotification) == 0x000004, "Wrong alignment on FFortEarnScoreNotification");
static_assert(sizeof(FFortEarnScoreNotification) == 0x000018, "Wrong size on FFortEarnScoreNotification");
static_assert(offsetof(FFortEarnScoreNotification, BaseXPEarned) == 0x000000, "Member 'FFortEarnScoreNotification::BaseXPEarned' has a wrong offset!");
static_assert(offsetof(FFortEarnScoreNotification, BonusXPEarned) == 0x000004, "Member 'FFortEarnScoreNotification::BonusXPEarned' has a wrong offset!");
static_assert(offsetof(FFortEarnScoreNotification, BoostXPEarned) == 0x000008, "Member 'FFortEarnScoreNotification::BoostXPEarned' has a wrong offset!");
static_assert(offsetof(FFortEarnScoreNotification, BoostXPMissed) == 0x00000C, "Member 'FFortEarnScoreNotification::BoostXPMissed' has a wrong offset!");
static_assert(offsetof(FFortEarnScoreNotification, RestXPEarned) == 0x000010, "Member 'FFortEarnScoreNotification::RestXPEarned' has a wrong offset!");
static_assert(offsetof(FFortEarnScoreNotification, GroupBoostXPEarned) == 0x000014, "Member 'FFortEarnScoreNotification::GroupBoostXPEarned' has a wrong offset!");

// ScriptStruct FortniteGame.FortEndMatchScoreNotification
// 0x0050 (0x0050 - 0x0000)
struct FFortEndMatchScoreNotification final
{
public:
	TMap<class FString, struct FFortEarnScoreNotification> ScoreNotifications;                                // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEndMatchScoreNotification) == 0x000008, "Wrong alignment on FFortEndMatchScoreNotification");
static_assert(sizeof(FFortEndMatchScoreNotification) == 0x000050, "Wrong size on FFortEndMatchScoreNotification");
static_assert(offsetof(FFortEndMatchScoreNotification, ScoreNotifications) == 0x000000, "Member 'FFortEndMatchScoreNotification::ScoreNotifications' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerStateEncryptionKey
// 0x0010 (0x0010 - 0x0000)
struct FPlayerStateEncryptionKey final
{
public:
	TArray<uint8>                                 Key;                                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerStateEncryptionKey) == 0x000008, "Wrong alignment on FPlayerStateEncryptionKey");
static_assert(sizeof(FPlayerStateEncryptionKey) == 0x000010, "Wrong size on FPlayerStateEncryptionKey");
static_assert(offsetof(FPlayerStateEncryptionKey, Key) == 0x000000, "Member 'FPlayerStateEncryptionKey::Key' has a wrong offset!");

// ScriptStruct FortniteGame.CreativePublishOptions
// 0x0048 (0x0048 - 0x0000)
struct FCreativePublishOptions final
{
public:
	class FString                                 UserTitle;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserDescription;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserYoutubeVideoId;                                // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateLink;                                     // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserLocale;                                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativePublishOptions) == 0x000008, "Wrong alignment on FCreativePublishOptions");
static_assert(sizeof(FCreativePublishOptions) == 0x000048, "Wrong size on FCreativePublishOptions");
static_assert(offsetof(FCreativePublishOptions, UserTitle) == 0x000000, "Member 'FCreativePublishOptions::UserTitle' has a wrong offset!");
static_assert(offsetof(FCreativePublishOptions, UserDescription) == 0x000010, "Member 'FCreativePublishOptions::UserDescription' has a wrong offset!");
static_assert(offsetof(FCreativePublishOptions, UserYoutubeVideoId) == 0x000020, "Member 'FCreativePublishOptions::UserYoutubeVideoId' has a wrong offset!");
static_assert(offsetof(FCreativePublishOptions, bActivateLink) == 0x000030, "Member 'FCreativePublishOptions::bActivateLink' has a wrong offset!");
static_assert(offsetof(FCreativePublishOptions, UserLocale) == 0x000038, "Member 'FCreativePublishOptions::UserLocale' has a wrong offset!");

// ScriptStruct FortniteGame.ConfirmationDialogAction
// 0x00C8 (0x00C8 - 0x0000)
struct FConfirmationDialogAction final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   HoverText;                                         // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   ResultName;                                        // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0038(0x0088)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x00C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfirmationDialogAction) == 0x000008, "Wrong alignment on FConfirmationDialogAction");
static_assert(sizeof(FConfirmationDialogAction) == 0x0000C8, "Wrong size on FConfirmationDialogAction");
static_assert(offsetof(FConfirmationDialogAction, DisplayName) == 0x000000, "Member 'FConfirmationDialogAction::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfirmationDialogAction, HoverText) == 0x000018, "Member 'FConfirmationDialogAction::HoverText' has a wrong offset!");
static_assert(offsetof(FConfirmationDialogAction, ResultName) == 0x000030, "Member 'FConfirmationDialogAction::ResultName' has a wrong offset!");
static_assert(offsetof(FConfirmationDialogAction, Icon) == 0x000038, "Member 'FConfirmationDialogAction::Icon' has a wrong offset!");
static_assert(offsetof(FConfirmationDialogAction, ActionName) == 0x0000C0, "Member 'FConfirmationDialogAction::ActionName' has a wrong offset!");

// ScriptStruct FortniteGame.FortDialogDescription_NUI
// 0x0120 (0x0120 - 0x0000)
struct FFortDialogDescription_NUI final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0088)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessageHeader;                                     // 0x0088(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessageBody;                                       // 0x00A0(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FConfirmationDialogAction>      ConfirmButtonInputActions;                         // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   DeclineButtonInputAction;                          // 0x00C8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultipleConfirmButtons;                           // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                AdditionalContent;                                 // 0x00D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                LeftAdditionalContent;                             // 0x00E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x00E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Dismissable;                                       // 0x00EC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cancelable;                                        // 0x00ED(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldWaitForLatentActionOnConfirmAction;         // 0x00EE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF[0x1];                                       // 0x00EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortNotificationHandler*               NotificationHandler;                               // 0x00F0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ShowSound;                                         // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x20];                                     // 0x0100(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDialogDescription_NUI) == 0x000008, "Wrong alignment on FFortDialogDescription_NUI");
static_assert(sizeof(FFortDialogDescription_NUI) == 0x000120, "Wrong size on FFortDialogDescription_NUI");
static_assert(offsetof(FFortDialogDescription_NUI, Icon) == 0x000000, "Member 'FFortDialogDescription_NUI::Icon' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, MessageHeader) == 0x000088, "Member 'FFortDialogDescription_NUI::MessageHeader' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, MessageBody) == 0x0000A0, "Member 'FFortDialogDescription_NUI::MessageBody' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, ConfirmButtonInputActions) == 0x0000B8, "Member 'FFortDialogDescription_NUI::ConfirmButtonInputActions' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, DeclineButtonInputAction) == 0x0000C8, "Member 'FFortDialogDescription_NUI::DeclineButtonInputAction' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, bMultipleConfirmButtons) == 0x0000D0, "Member 'FFortDialogDescription_NUI::bMultipleConfirmButtons' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, AdditionalContent) == 0x0000D8, "Member 'FFortDialogDescription_NUI::AdditionalContent' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, LeftAdditionalContent) == 0x0000E0, "Member 'FFortDialogDescription_NUI::LeftAdditionalContent' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, DisplayTime) == 0x0000E8, "Member 'FFortDialogDescription_NUI::DisplayTime' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, Dismissable) == 0x0000EC, "Member 'FFortDialogDescription_NUI::Dismissable' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, Cancelable) == 0x0000ED, "Member 'FFortDialogDescription_NUI::Cancelable' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, bShouldWaitForLatentActionOnConfirmAction) == 0x0000EE, "Member 'FFortDialogDescription_NUI::bShouldWaitForLatentActionOnConfirmAction' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, NotificationHandler) == 0x0000F0, "Member 'FFortDialogDescription_NUI::NotificationHandler' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, ShowSound) == 0x0000F8, "Member 'FFortDialogDescription_NUI::ShowSound' has a wrong offset!");

// ScriptStruct FortniteGame.FortBaseWeaponStats
// 0x0130 (0x0138 - 0x0008)
struct FFortBaseWeaponStats : public FTableRowBase
{
public:
	int32                                         BaseLevel;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   NamedWeightRow;                                    // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgPB;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgMid;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgLong;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgMaxRange;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgPB;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgMid;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgLong;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgMaxRange;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpactDmgPB;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpactDmgMid;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpactDmgLong;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpactDmgMaxRange;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceControl;                                     // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RngPB;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RngMid;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RngLong;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RngMax;                                            // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            DmgScaleTable;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DmgScaleTableRow;                                  // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgScale;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveTable*                            EnvDmgScaleTable;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   EnvDmgScaleTableRow;                               // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgScale;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveTable*                            ImpactDmgScaleTable;                               // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ImpactDmgScaleTableRow;                            // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpactDmgScale;                                    // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SurfaceRatioRowName;                               // 0x009C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Light;                                  // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Normal;                                 // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Critical;                               // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Vulnerability;                          // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackMagnitude;                                // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MidRangeKnockbackMagnitude;                        // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LongRangeKnockbackMagnitude;                       // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackZAngle;                                   // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StunTime;                                          // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StunScale;                                         // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             Durability;                                        // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DurabilityRowName;                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DurabilityScale;                                   // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DurabilityPerUse;                                  // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DiceCritChance;                                    // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DiceCritDamageMultiplier;                          // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReloadTime;                                        // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReloadScale;                                       // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortWeaponReloadType                         ReloadType;                                        // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowReloadInterrupt;                             // 0x00F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReloadInterruptIsImmediate;                       // 0x00FA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FB[0x1];                                       // 0x00FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumIndividualBulletsToReload;                      // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ClipSize;                                          // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClipScale;                                         // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InitialClips;                                      // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CartridgePerFire;                                  // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AmmoCostPerFire;                                   // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxAmmoCostPerFire;                                // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinChargeTime;                                     // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxChargeTime;                                     // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ChargeDownTime;                                    // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinChargeDamageMultiplier;                         // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxChargeDamageMultiplier;                         // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EquipAnimRate;                                     // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         QuickBarSlotCooldownDuration;                      // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBaseWeaponStats) == 0x000008, "Wrong alignment on FFortBaseWeaponStats");
static_assert(sizeof(FFortBaseWeaponStats) == 0x000138, "Wrong size on FFortBaseWeaponStats");
static_assert(offsetof(FFortBaseWeaponStats, BaseLevel) == 0x000008, "Member 'FFortBaseWeaponStats::BaseLevel' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, NamedWeightRow) == 0x00000C, "Member 'FFortBaseWeaponStats::NamedWeightRow' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgPB) == 0x000014, "Member 'FFortBaseWeaponStats::DmgPB' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgMid) == 0x000018, "Member 'FFortBaseWeaponStats::DmgMid' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgLong) == 0x00001C, "Member 'FFortBaseWeaponStats::DmgLong' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgMaxRange) == 0x000020, "Member 'FFortBaseWeaponStats::DmgMaxRange' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgPB) == 0x000024, "Member 'FFortBaseWeaponStats::EnvDmgPB' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgMid) == 0x000028, "Member 'FFortBaseWeaponStats::EnvDmgMid' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgLong) == 0x00002C, "Member 'FFortBaseWeaponStats::EnvDmgLong' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgMaxRange) == 0x000030, "Member 'FFortBaseWeaponStats::EnvDmgMaxRange' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgPB) == 0x000034, "Member 'FFortBaseWeaponStats::ImpactDmgPB' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgMid) == 0x000038, "Member 'FFortBaseWeaponStats::ImpactDmgMid' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgLong) == 0x00003C, "Member 'FFortBaseWeaponStats::ImpactDmgLong' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgMaxRange) == 0x000040, "Member 'FFortBaseWeaponStats::ImpactDmgMaxRange' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, bForceControl) == 0x000044, "Member 'FFortBaseWeaponStats::bForceControl' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngPB) == 0x000048, "Member 'FFortBaseWeaponStats::RngPB' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngMid) == 0x00004C, "Member 'FFortBaseWeaponStats::RngMid' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngLong) == 0x000050, "Member 'FFortBaseWeaponStats::RngLong' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngMax) == 0x000054, "Member 'FFortBaseWeaponStats::RngMax' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgScaleTable) == 0x000058, "Member 'FFortBaseWeaponStats::DmgScaleTable' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgScaleTableRow) == 0x000060, "Member 'FFortBaseWeaponStats::DmgScaleTableRow' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgScale) == 0x000068, "Member 'FFortBaseWeaponStats::DmgScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgScaleTable) == 0x000070, "Member 'FFortBaseWeaponStats::EnvDmgScaleTable' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgScaleTableRow) == 0x000078, "Member 'FFortBaseWeaponStats::EnvDmgScaleTableRow' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgScale) == 0x000080, "Member 'FFortBaseWeaponStats::EnvDmgScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgScaleTable) == 0x000088, "Member 'FFortBaseWeaponStats::ImpactDmgScaleTable' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgScaleTableRow) == 0x000090, "Member 'FFortBaseWeaponStats::ImpactDmgScaleTableRow' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgScale) == 0x000098, "Member 'FFortBaseWeaponStats::ImpactDmgScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, SurfaceRatioRowName) == 0x00009C, "Member 'FFortBaseWeaponStats::SurfaceRatioRowName' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Light) == 0x0000A4, "Member 'FFortBaseWeaponStats::DamageZone_Light' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Normal) == 0x0000A8, "Member 'FFortBaseWeaponStats::DamageZone_Normal' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Critical) == 0x0000AC, "Member 'FFortBaseWeaponStats::DamageZone_Critical' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Vulnerability) == 0x0000B0, "Member 'FFortBaseWeaponStats::DamageZone_Vulnerability' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, KnockbackMagnitude) == 0x0000B4, "Member 'FFortBaseWeaponStats::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MidRangeKnockbackMagnitude) == 0x0000B8, "Member 'FFortBaseWeaponStats::MidRangeKnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, LongRangeKnockbackMagnitude) == 0x0000BC, "Member 'FFortBaseWeaponStats::LongRangeKnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, KnockbackZAngle) == 0x0000C0, "Member 'FFortBaseWeaponStats::KnockbackZAngle' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, StunTime) == 0x0000C4, "Member 'FFortBaseWeaponStats::StunTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, StunScale) == 0x0000C8, "Member 'FFortBaseWeaponStats::StunScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, Durability) == 0x0000D0, "Member 'FFortBaseWeaponStats::Durability' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DurabilityRowName) == 0x0000D8, "Member 'FFortBaseWeaponStats::DurabilityRowName' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DurabilityScale) == 0x0000E0, "Member 'FFortBaseWeaponStats::DurabilityScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DurabilityPerUse) == 0x0000E4, "Member 'FFortBaseWeaponStats::DurabilityPerUse' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DiceCritChance) == 0x0000E8, "Member 'FFortBaseWeaponStats::DiceCritChance' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DiceCritDamageMultiplier) == 0x0000EC, "Member 'FFortBaseWeaponStats::DiceCritDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ReloadTime) == 0x0000F0, "Member 'FFortBaseWeaponStats::ReloadTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ReloadScale) == 0x0000F4, "Member 'FFortBaseWeaponStats::ReloadScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ReloadType) == 0x0000F8, "Member 'FFortBaseWeaponStats::ReloadType' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, bAllowReloadInterrupt) == 0x0000F9, "Member 'FFortBaseWeaponStats::bAllowReloadInterrupt' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, bReloadInterruptIsImmediate) == 0x0000FA, "Member 'FFortBaseWeaponStats::bReloadInterruptIsImmediate' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, NumIndividualBulletsToReload) == 0x0000FC, "Member 'FFortBaseWeaponStats::NumIndividualBulletsToReload' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ClipSize) == 0x000100, "Member 'FFortBaseWeaponStats::ClipSize' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ClipScale) == 0x000104, "Member 'FFortBaseWeaponStats::ClipScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, InitialClips) == 0x000108, "Member 'FFortBaseWeaponStats::InitialClips' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, CartridgePerFire) == 0x00010C, "Member 'FFortBaseWeaponStats::CartridgePerFire' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, AmmoCostPerFire) == 0x000110, "Member 'FFortBaseWeaponStats::AmmoCostPerFire' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MaxAmmoCostPerFire) == 0x000114, "Member 'FFortBaseWeaponStats::MaxAmmoCostPerFire' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MinChargeTime) == 0x000118, "Member 'FFortBaseWeaponStats::MinChargeTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MaxChargeTime) == 0x00011C, "Member 'FFortBaseWeaponStats::MaxChargeTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ChargeDownTime) == 0x000120, "Member 'FFortBaseWeaponStats::ChargeDownTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MinChargeDamageMultiplier) == 0x000124, "Member 'FFortBaseWeaponStats::MinChargeDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MaxChargeDamageMultiplier) == 0x000128, "Member 'FFortBaseWeaponStats::MaxChargeDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EquipAnimRate) == 0x00012C, "Member 'FFortBaseWeaponStats::EquipAnimRate' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, QuickBarSlotCooldownDuration) == 0x000130, "Member 'FFortBaseWeaponStats::QuickBarSlotCooldownDuration' has a wrong offset!");

// ScriptStruct FortniteGame.FortMeleeWeaponStats
// 0x0028 (0x0160 - 0x0138)
struct FFortMeleeWeaponStats final : public FFortBaseWeaponStats
{
public:
	float                                         RangeVSEnemies;                                    // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ConeYawAngle;                                      // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ConePitchAngle;                                    // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SwingPlaySpeed;                                    // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SwingTime;                                         // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BuildingConeAngle;                                 // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BuildingConeAnglePitch;                            // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RangeVSBuildings2D;                                // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RangeVSBuildingsZ;                                 // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RangeVSWeakSpots;                                  // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortMeleeWeaponStats) == 0x000008, "Wrong alignment on FFortMeleeWeaponStats");
static_assert(sizeof(FFortMeleeWeaponStats) == 0x000160, "Wrong size on FFortMeleeWeaponStats");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSEnemies) == 0x000138, "Member 'FFortMeleeWeaponStats::RangeVSEnemies' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, ConeYawAngle) == 0x00013C, "Member 'FFortMeleeWeaponStats::ConeYawAngle' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, ConePitchAngle) == 0x000140, "Member 'FFortMeleeWeaponStats::ConePitchAngle' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, SwingPlaySpeed) == 0x000144, "Member 'FFortMeleeWeaponStats::SwingPlaySpeed' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, SwingTime) == 0x000148, "Member 'FFortMeleeWeaponStats::SwingTime' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, BuildingConeAngle) == 0x00014C, "Member 'FFortMeleeWeaponStats::BuildingConeAngle' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, BuildingConeAnglePitch) == 0x000150, "Member 'FFortMeleeWeaponStats::BuildingConeAnglePitch' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSBuildings2D) == 0x000154, "Member 'FFortMeleeWeaponStats::RangeVSBuildings2D' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSBuildingsZ) == 0x000158, "Member 'FFortMeleeWeaponStats::RangeVSBuildingsZ' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSWeakSpots) == 0x00015C, "Member 'FFortMeleeWeaponStats::RangeVSWeakSpots' has a wrong offset!");

// ScriptStruct FortniteGame.ReplicatedPhysicsPawnState
// 0x0040 (0x0040 - 0x0000)
struct FReplicatedPhysicsPawnState final
{
public:
	struct FVector_NetQuantize100                 Translation;                                       // 0x0000(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0010(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  LinearVelocity;                                    // 0x0020(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  AngularVelocity;                                   // 0x002C(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint16                                        SyncKey;                                           // 0x0038(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedPhysicsPawnState) == 0x000010, "Wrong alignment on FReplicatedPhysicsPawnState");
static_assert(sizeof(FReplicatedPhysicsPawnState) == 0x000040, "Wrong size on FReplicatedPhysicsPawnState");
static_assert(offsetof(FReplicatedPhysicsPawnState, Translation) == 0x000000, "Member 'FReplicatedPhysicsPawnState::Translation' has a wrong offset!");
static_assert(offsetof(FReplicatedPhysicsPawnState, Rotation) == 0x000010, "Member 'FReplicatedPhysicsPawnState::Rotation' has a wrong offset!");
static_assert(offsetof(FReplicatedPhysicsPawnState, LinearVelocity) == 0x000020, "Member 'FReplicatedPhysicsPawnState::LinearVelocity' has a wrong offset!");
static_assert(offsetof(FReplicatedPhysicsPawnState, AngularVelocity) == 0x00002C, "Member 'FReplicatedPhysicsPawnState::AngularVelocity' has a wrong offset!");
static_assert(offsetof(FReplicatedPhysicsPawnState, SyncKey) == 0x000038, "Member 'FReplicatedPhysicsPawnState::SyncKey' has a wrong offset!");

// ScriptStruct FortniteGame.TimeStampedPhysicsPawnState
// 0x0050 (0x0050 - 0x0000)
struct FTimeStampedPhysicsPawnState final
{
public:
	float                                         WorldTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReplicatedPhysicsPawnState            PhysicsPawnState;                                  // 0x0010(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeStampedPhysicsPawnState) == 0x000010, "Wrong alignment on FTimeStampedPhysicsPawnState");
static_assert(sizeof(FTimeStampedPhysicsPawnState) == 0x000050, "Wrong size on FTimeStampedPhysicsPawnState");
static_assert(offsetof(FTimeStampedPhysicsPawnState, WorldTime) == 0x000000, "Member 'FTimeStampedPhysicsPawnState::WorldTime' has a wrong offset!");
static_assert(offsetof(FTimeStampedPhysicsPawnState, PhysicsPawnState) == 0x000010, "Member 'FTimeStampedPhysicsPawnState::PhysicsPawnState' has a wrong offset!");

// ScriptStruct FortniteGame.ChannelData
// 0x0010 (0x0010 - 0x0000)
struct FChannelData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMagnitude;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChannelData) == 0x000004, "Wrong alignment on FChannelData");
static_assert(sizeof(FChannelData) == 0x000010, "Wrong size on FChannelData");
static_assert(offsetof(FChannelData, Name) == 0x000000, "Member 'FChannelData::Name' has a wrong offset!");
static_assert(offsetof(FChannelData, MaxMagnitude) == 0x000008, "Member 'FChannelData::MaxMagnitude' has a wrong offset!");
static_assert(offsetof(FChannelData, Value) == 0x00000C, "Member 'FChannelData::Value' has a wrong offset!");

// ScriptStruct FortniteGame.DefenderNPCStatInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FDefenderNPCStatInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDefenderNPCStatInfo) == 0x000004, "Wrong alignment on FDefenderNPCStatInfo");
static_assert(sizeof(FDefenderNPCStatInfo) == 0x00000C, "Wrong size on FDefenderNPCStatInfo");

// ScriptStruct FortniteGame.FortAnimPlayrateRange
// 0x0008 (0x0008 - 0x0000)
struct FFortAnimPlayrateRange final
{
public:
	float                                         MinPlayrate;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPlayrate;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimPlayrateRange) == 0x000004, "Wrong alignment on FFortAnimPlayrateRange");
static_assert(sizeof(FFortAnimPlayrateRange) == 0x000008, "Wrong size on FFortAnimPlayrateRange");
static_assert(offsetof(FFortAnimPlayrateRange, MinPlayrate) == 0x000000, "Member 'FFortAnimPlayrateRange::MinPlayrate' has a wrong offset!");
static_assert(offsetof(FFortAnimPlayrateRange, MaxPlayrate) == 0x000004, "Member 'FFortAnimPlayrateRange::MaxPlayrate' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_AdjustedAimOffset
// 0x0010 (0x0010 - 0x0000)
struct FFortAnimInput_AdjustedAimOffset final
{
public:
	float                                         YawOffset;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchOffset;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetingYawOffset;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetingPitchOffset;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_AdjustedAimOffset) == 0x000004, "Wrong alignment on FFortAnimInput_AdjustedAimOffset");
static_assert(sizeof(FFortAnimInput_AdjustedAimOffset) == 0x000010, "Wrong size on FFortAnimInput_AdjustedAimOffset");
static_assert(offsetof(FFortAnimInput_AdjustedAimOffset, YawOffset) == 0x000000, "Member 'FFortAnimInput_AdjustedAimOffset::YawOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_AdjustedAimOffset, PitchOffset) == 0x000004, "Member 'FFortAnimInput_AdjustedAimOffset::PitchOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_AdjustedAimOffset, TargetingYawOffset) == 0x000008, "Member 'FFortAnimInput_AdjustedAimOffset::TargetingYawOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_AdjustedAimOffset, TargetingPitchOffset) == 0x00000C, "Member 'FFortAnimInput_AdjustedAimOffset::TargetingPitchOffset' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_PlayerAnimAsset
// 0x0110 (0x0110 - 0x0000)
struct FFortAnimInput_PlayerAnimAsset final
{
public:
	bool                                          bShouldApplyAimOffsetFullBody;                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FullBodyAimOffsetAlpha;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBodyAimOffsetAlpha;                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDisableArmsHeadAdditive;                  // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisableArmsHeadAdditiveOverride;                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAnimPlayrateRange                 SprintPlayrateClampRange;                          // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortAnimPlayrateRange                 SprintTargetingPlayrateClampRange;                 // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortAnimPlayrateRange                 CrouchSprintPlayrateClampRange;                    // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortAnimPlayrateRange                 CrouchSprintTargetingPlayrateClampRange;           // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          TargetingPose;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   TargetingAimOffset;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          NonTargetingPose;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   NonTargetingAimOffset;                             // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RelaxedPose;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RelaxedPoseLevel2;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   RelaxedAimOffset;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        JogAdditiveBlendSpace;                             // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        JogAdditiveBlendSpaceRelaxed;                      // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        JogAdditiveBlendSpaceRelaxedLevel2;                // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SprintAnimation;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SprintTargetingAnimation;                          // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchTargetingPose;                               // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchNonTargetingPose;                            // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchRelaxedPose;                                 // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        CrouchWalkAdditiveBlendSpace;                      // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        CrouchJogAdditiveBlendSpace;                       // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        CrouchJogAdditiveBlendSpaceRelaxed;                // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchSprintAnimation;                             // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchSprintTargetingAnimation;                    // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          IdleNoise;                                         // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          IdleNoise_AR_DownSights;                           // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridePitchAndYawOffsets;                       // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAnimInput_AdjustedAimOffset       AnimSetOffsets;                                    // 0x00EC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BonesToHide;                                       // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_PlayerAnimAsset) == 0x000008, "Wrong alignment on FFortAnimInput_PlayerAnimAsset");
static_assert(sizeof(FFortAnimInput_PlayerAnimAsset) == 0x000110, "Wrong size on FFortAnimInput_PlayerAnimAsset");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, bShouldApplyAimOffsetFullBody) == 0x000000, "Member 'FFortAnimInput_PlayerAnimAsset::bShouldApplyAimOffsetFullBody' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, FullBodyAimOffsetAlpha) == 0x000004, "Member 'FFortAnimInput_PlayerAnimAsset::FullBodyAimOffsetAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, UpperBodyAimOffsetAlpha) == 0x000008, "Member 'FFortAnimInput_PlayerAnimAsset::UpperBodyAimOffsetAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, bOverrideDisableArmsHeadAdditive) == 0x00000C, "Member 'FFortAnimInput_PlayerAnimAsset::bOverrideDisableArmsHeadAdditive' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, DisableArmsHeadAdditiveOverride) == 0x000010, "Member 'FFortAnimInput_PlayerAnimAsset::DisableArmsHeadAdditiveOverride' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, SprintPlayrateClampRange) == 0x000014, "Member 'FFortAnimInput_PlayerAnimAsset::SprintPlayrateClampRange' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, SprintTargetingPlayrateClampRange) == 0x00001C, "Member 'FFortAnimInput_PlayerAnimAsset::SprintTargetingPlayrateClampRange' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, CrouchSprintPlayrateClampRange) == 0x000024, "Member 'FFortAnimInput_PlayerAnimAsset::CrouchSprintPlayrateClampRange' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, CrouchSprintTargetingPlayrateClampRange) == 0x00002C, "Member 'FFortAnimInput_PlayerAnimAsset::CrouchSprintTargetingPlayrateClampRange' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, TargetingPose) == 0x000038, "Member 'FFortAnimInput_PlayerAnimAsset::TargetingPose' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, TargetingAimOffset) == 0x000040, "Member 'FFortAnimInput_PlayerAnimAsset::TargetingAimOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, NonTargetingPose) == 0x000048, "Member 'FFortAnimInput_PlayerAnimAsset::NonTargetingPose' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, NonTargetingAimOffset) == 0x000050, "Member 'FFortAnimInput_PlayerAnimAsset::NonTargetingAimOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, RelaxedPose) == 0x000058, "Member 'FFortAnimInput_PlayerAnimAsset::RelaxedPose' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, RelaxedPoseLevel2) == 0x000060, "Member 'FFortAnimInput_PlayerAnimAsset::RelaxedPoseLevel2' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, RelaxedAimOffset) == 0x000068, "Member 'FFortAnimInput_PlayerAnimAsset::RelaxedAimOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, JogAdditiveBlendSpace) == 0x000070, "Member 'FFortAnimInput_PlayerAnimAsset::JogAdditiveBlendSpace' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, JogAdditiveBlendSpaceRelaxed) == 0x000078, "Member 'FFortAnimInput_PlayerAnimAsset::JogAdditiveBlendSpaceRelaxed' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, JogAdditiveBlendSpaceRelaxedLevel2) == 0x000080, "Member 'FFortAnimInput_PlayerAnimAsset::JogAdditiveBlendSpaceRelaxedLevel2' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, SprintAnimation) == 0x000088, "Member 'FFortAnimInput_PlayerAnimAsset::SprintAnimation' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, SprintTargetingAnimation) == 0x000090, "Member 'FFortAnimInput_PlayerAnimAsset::SprintTargetingAnimation' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, CrouchTargetingPose) == 0x000098, "Member 'FFortAnimInput_PlayerAnimAsset::CrouchTargetingPose' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, CrouchNonTargetingPose) == 0x0000A0, "Member 'FFortAnimInput_PlayerAnimAsset::CrouchNonTargetingPose' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, CrouchRelaxedPose) == 0x0000A8, "Member 'FFortAnimInput_PlayerAnimAsset::CrouchRelaxedPose' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, CrouchWalkAdditiveBlendSpace) == 0x0000B0, "Member 'FFortAnimInput_PlayerAnimAsset::CrouchWalkAdditiveBlendSpace' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, CrouchJogAdditiveBlendSpace) == 0x0000B8, "Member 'FFortAnimInput_PlayerAnimAsset::CrouchJogAdditiveBlendSpace' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, CrouchJogAdditiveBlendSpaceRelaxed) == 0x0000C0, "Member 'FFortAnimInput_PlayerAnimAsset::CrouchJogAdditiveBlendSpaceRelaxed' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, CrouchSprintAnimation) == 0x0000C8, "Member 'FFortAnimInput_PlayerAnimAsset::CrouchSprintAnimation' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, CrouchSprintTargetingAnimation) == 0x0000D0, "Member 'FFortAnimInput_PlayerAnimAsset::CrouchSprintTargetingAnimation' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, IdleNoise) == 0x0000D8, "Member 'FFortAnimInput_PlayerAnimAsset::IdleNoise' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, IdleNoise_AR_DownSights) == 0x0000E0, "Member 'FFortAnimInput_PlayerAnimAsset::IdleNoise_AR_DownSights' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, bOverridePitchAndYawOffsets) == 0x0000E8, "Member 'FFortAnimInput_PlayerAnimAsset::bOverridePitchAndYawOffsets' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, AnimSetOffsets) == 0x0000EC, "Member 'FFortAnimInput_PlayerAnimAsset::AnimSetOffsets' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_PlayerAnimAsset, BonesToHide) == 0x000100, "Member 'FFortAnimInput_PlayerAnimAsset::BonesToHide' has a wrong offset!");

// ScriptStruct FortniteGame.WindVectorMaterialInterpolationData
// 0x002C (0x002C - 0x0000)
struct FWindVectorMaterialInterpolationData final
{
public:
	class FName                                   MaterialParameterName;                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialParameterIndex;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LerpFromValue;                                     // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LerpToValue;                                       // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindVectorMaterialInterpolationData) == 0x000004, "Wrong alignment on FWindVectorMaterialInterpolationData");
static_assert(sizeof(FWindVectorMaterialInterpolationData) == 0x00002C, "Wrong size on FWindVectorMaterialInterpolationData");
static_assert(offsetof(FWindVectorMaterialInterpolationData, MaterialParameterName) == 0x000000, "Member 'FWindVectorMaterialInterpolationData::MaterialParameterName' has a wrong offset!");
static_assert(offsetof(FWindVectorMaterialInterpolationData, MaterialParameterIndex) == 0x000008, "Member 'FWindVectorMaterialInterpolationData::MaterialParameterIndex' has a wrong offset!");
static_assert(offsetof(FWindVectorMaterialInterpolationData, LerpFromValue) == 0x00000C, "Member 'FWindVectorMaterialInterpolationData::LerpFromValue' has a wrong offset!");
static_assert(offsetof(FWindVectorMaterialInterpolationData, LerpToValue) == 0x00001C, "Member 'FWindVectorMaterialInterpolationData::LerpToValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterPIDController
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FFortAIEncounterPIDController final
{
public:
	float                                         ProportionalGain;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntegralGain;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DerivativeGain;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x5C];                                       // 0x000C(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterPIDController) == 0x000008, "Wrong alignment on FFortAIEncounterPIDController");
static_assert(sizeof(FFortAIEncounterPIDController) == 0x000068, "Wrong size on FFortAIEncounterPIDController");
static_assert(offsetof(FFortAIEncounterPIDController, ProportionalGain) == 0x000000, "Member 'FFortAIEncounterPIDController::ProportionalGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDController, IntegralGain) == 0x000004, "Member 'FFortAIEncounterPIDController::IntegralGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDController, DerivativeGain) == 0x000008, "Member 'FFortAIEncounterPIDController::DerivativeGain' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlaysetStreamingData
// 0x002C (0x002C - 0x0000)
struct FFortPlaysetStreamingData final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UniquePackageName;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bValid : 1;                                        // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlaysetStreamingData) == 0x000004, "Wrong alignment on FFortPlaysetStreamingData");
static_assert(sizeof(FFortPlaysetStreamingData) == 0x00002C, "Wrong size on FFortPlaysetStreamingData");
static_assert(offsetof(FFortPlaysetStreamingData, PackageName) == 0x000000, "Member 'FFortPlaysetStreamingData::PackageName' has a wrong offset!");
static_assert(offsetof(FFortPlaysetStreamingData, UniquePackageName) == 0x000008, "Member 'FFortPlaysetStreamingData::UniquePackageName' has a wrong offset!");
static_assert(offsetof(FFortPlaysetStreamingData, Location) == 0x000010, "Member 'FFortPlaysetStreamingData::Location' has a wrong offset!");
static_assert(offsetof(FFortPlaysetStreamingData, Rotation) == 0x00001C, "Member 'FFortPlaysetStreamingData::Rotation' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimNode_AnimSetDrivenRandom
// 0x0010 (0x0078 - 0x0068)
struct FFortAnimNode_AnimSetDrivenRandom final : public FAnimNode_RandomPlayer
{
public:
	struct FGameplayTag                           RandomSlotName;                                    // 0x0068(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAnimSet*                           AnimSet;                                           // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimNode_AnimSetDrivenRandom) == 0x000008, "Wrong alignment on FFortAnimNode_AnimSetDrivenRandom");
static_assert(sizeof(FFortAnimNode_AnimSetDrivenRandom) == 0x000078, "Wrong size on FFortAnimNode_AnimSetDrivenRandom");
static_assert(offsetof(FFortAnimNode_AnimSetDrivenRandom, RandomSlotName) == 0x000068, "Member 'FFortAnimNode_AnimSetDrivenRandom::RandomSlotName' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_AnimSetDrivenRandom, AnimSet) == 0x000070, "Member 'FFortAnimNode_AnimSetDrivenRandom::AnimSet' has a wrong offset!");

// ScriptStruct FortniteGame.CreativeIslandInfo
// 0x0030 (0x0030 - 0x0000)
struct FCreativeIslandInfo final
{
public:
	class FString                                 IslandTitle;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IslandIntroduction;                                // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserLocale;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeIslandInfo) == 0x000008, "Wrong alignment on FCreativeIslandInfo");
static_assert(sizeof(FCreativeIslandInfo) == 0x000030, "Wrong size on FCreativeIslandInfo");
static_assert(offsetof(FCreativeIslandInfo, IslandTitle) == 0x000000, "Member 'FCreativeIslandInfo::IslandTitle' has a wrong offset!");
static_assert(offsetof(FCreativeIslandInfo, IslandIntroduction) == 0x000010, "Member 'FCreativeIslandInfo::IslandIntroduction' has a wrong offset!");
static_assert(offsetof(FCreativeIslandInfo, UserLocale) == 0x000020, "Member 'FCreativeIslandInfo::UserLocale' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookDirectPurchaseData
// 0x0030 (0x0038 - 0x0008)
struct FFortCollectionBookDirectPurchaseData final : public FTableRowBase
{
public:
	TArray<struct FFortItemQuantityPair>          PurchaseCosts;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PurchaseCatalysts;                                 // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookDirectPurchaseData) == 0x000008, "Wrong alignment on FFortCollectionBookDirectPurchaseData");
static_assert(sizeof(FFortCollectionBookDirectPurchaseData) == 0x000038, "Wrong size on FFortCollectionBookDirectPurchaseData");
static_assert(offsetof(FFortCollectionBookDirectPurchaseData, PurchaseCosts) == 0x000008, "Member 'FFortCollectionBookDirectPurchaseData::PurchaseCosts' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookDirectPurchaseData, PurchaseCatalysts) == 0x000018, "Member 'FFortCollectionBookDirectPurchaseData::PurchaseCatalysts' has a wrong offset!");

// ScriptStruct FortniteGame.PickupInstigatorData
// 0x0018 (0x0018 - 0x0000)
struct FPickupInstigatorData final
{
public:
	uint8                                         TeamIndex;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 TargetAttitude;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccentColorParam;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreValue;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AFortPickup>                OverridePickupClass;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPickupInstigatorData) == 0x000008, "Wrong alignment on FPickupInstigatorData");
static_assert(sizeof(FPickupInstigatorData) == 0x000018, "Wrong size on FPickupInstigatorData");
static_assert(offsetof(FPickupInstigatorData, TeamIndex) == 0x000000, "Member 'FPickupInstigatorData::TeamIndex' has a wrong offset!");
static_assert(offsetof(FPickupInstigatorData, TargetAttitude) == 0x000001, "Member 'FPickupInstigatorData::TargetAttitude' has a wrong offset!");
static_assert(offsetof(FPickupInstigatorData, AccentColorParam) == 0x000004, "Member 'FPickupInstigatorData::AccentColorParam' has a wrong offset!");
static_assert(offsetof(FPickupInstigatorData, ScoreValue) == 0x000008, "Member 'FPickupInstigatorData::ScoreValue' has a wrong offset!");
static_assert(offsetof(FPickupInstigatorData, OverridePickupClass) == 0x000010, "Member 'FPickupInstigatorData::OverridePickupClass' has a wrong offset!");

// ScriptStruct FortniteGame.PickupInstigator
// 0x0024 (0x0030 - 0x000C)
struct FPickupInstigator final : public FFastArraySerializerItem
{
public:
	int32                                         TrackedIndex;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPickupInstigatorData                  InstigatorData;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPickupInstigator) == 0x000008, "Wrong alignment on FPickupInstigator");
static_assert(sizeof(FPickupInstigator) == 0x000030, "Wrong size on FPickupInstigator");
static_assert(offsetof(FPickupInstigator, TrackedIndex) == 0x00000C, "Member 'FPickupInstigator::TrackedIndex' has a wrong offset!");
static_assert(offsetof(FPickupInstigator, InstigatorData) == 0x000010, "Member 'FPickupInstigator::InstigatorData' has a wrong offset!");

// ScriptStruct FortniteGame.PickupInstigatorArray
// 0x0020 (0x0128 - 0x0108)
struct FPickupInstigatorArray final : public FFastArraySerializer
{
public:
	TArray<struct FPickupInstigator>              Items;                                             // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	int32                                         NextTrackedIndex;                                  // 0x0118(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0xC];                                      // 0x011C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPickupInstigatorArray) == 0x000008, "Wrong alignment on FPickupInstigatorArray");
static_assert(sizeof(FPickupInstigatorArray) == 0x000128, "Wrong size on FPickupInstigatorArray");
static_assert(offsetof(FPickupInstigatorArray, Items) == 0x000108, "Member 'FPickupInstigatorArray::Items' has a wrong offset!");
static_assert(offsetof(FPickupInstigatorArray, NextTrackedIndex) == 0x000118, "Member 'FPickupInstigatorArray::NextTrackedIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortMinigameStat
// 0x0010 (0x0010 - 0x0000)
struct FFortMinigameStat final
{
public:
	TSubclassOf<class UFortMinigameStatFilter>    Filter;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMinigameStat) == 0x000008, "Wrong alignment on FFortMinigameStat");
static_assert(sizeof(FFortMinigameStat) == 0x000010, "Wrong size on FFortMinigameStat");
static_assert(offsetof(FFortMinigameStat, Filter) == 0x000000, "Member 'FFortMinigameStat::Filter' has a wrong offset!");
static_assert(offsetof(FFortMinigameStat, Count) == 0x000008, "Member 'FFortMinigameStat::Count' has a wrong offset!");

// ScriptStruct FortniteGame.FortMinigameGroupStats
// 0x0010 (0x0010 - 0x0000)
struct FFortMinigameGroupStats
{
public:
	TArray<struct FFortMinigameStat>              Stats;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMinigameGroupStats) == 0x000008, "Wrong alignment on FFortMinigameGroupStats");
static_assert(sizeof(FFortMinigameGroupStats) == 0x000010, "Wrong size on FFortMinigameGroupStats");
static_assert(offsetof(FFortMinigameGroupStats, Stats) == 0x000000, "Member 'FFortMinigameGroupStats::Stats' has a wrong offset!");

// ScriptStruct FortniteGame.FortMinigamePlayerStats
// 0x0028 (0x0038 - 0x0010)
struct FFortMinigamePlayerStats final : public FFortMinigameGroupStats
{
public:
	struct FUniqueNetIdRepl                       Player;                                            // 0x0010(0x0028)(Edit, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMinigamePlayerStats) == 0x000008, "Wrong alignment on FFortMinigamePlayerStats");
static_assert(sizeof(FFortMinigamePlayerStats) == 0x000038, "Wrong size on FFortMinigamePlayerStats");
static_assert(offsetof(FFortMinigamePlayerStats, Player) == 0x000010, "Member 'FFortMinigamePlayerStats::Player' has a wrong offset!");

// ScriptStruct FortniteGame.FortMinigamePlayerBucketStats
// 0x0008 (0x0018 - 0x0010)
struct FFortMinigamePlayerBucketStats final : public FFortMinigameGroupStats
{
public:
	int32                                         BucketIndex;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMinigamePlayerBucketStats) == 0x000008, "Wrong alignment on FFortMinigamePlayerBucketStats");
static_assert(sizeof(FFortMinigamePlayerBucketStats) == 0x000018, "Wrong size on FFortMinigamePlayerBucketStats");
static_assert(offsetof(FFortMinigamePlayerBucketStats, BucketIndex) == 0x000010, "Member 'FFortMinigamePlayerBucketStats::BucketIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortMinigameStatCollection
// 0x0030 (0x0030 - 0x0000)
struct FFortMinigameStatCollection final
{
public:
	struct FFortMinigameGroupStats                GroupStats;                                        // 0x0000(0x0010)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FFortMinigamePlayerStats>       PlayerStats;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FFortMinigamePlayerBucketStats> PlayerBucketStats;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortMinigameStatCollection) == 0x000008, "Wrong alignment on FFortMinigameStatCollection");
static_assert(sizeof(FFortMinigameStatCollection) == 0x000030, "Wrong size on FFortMinigameStatCollection");
static_assert(offsetof(FFortMinigameStatCollection, GroupStats) == 0x000000, "Member 'FFortMinigameStatCollection::GroupStats' has a wrong offset!");
static_assert(offsetof(FFortMinigameStatCollection, PlayerStats) == 0x000010, "Member 'FFortMinigameStatCollection::PlayerStats' has a wrong offset!");
static_assert(offsetof(FFortMinigameStatCollection, PlayerBucketStats) == 0x000020, "Member 'FFortMinigameStatCollection::PlayerBucketStats' has a wrong offset!");

// ScriptStruct FortniteGame.FortAimAssist2D_Settings
// 0x0098 (0x0098 - 0x0000)
struct FFortAimAssist2D_Settings final
{
public:
	float                                         AssistInnerReticleWidth;                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AssistInnerReticleHeight;                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AssistOuterReticleWidth;                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AssistOuterReticleHeight;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetingReticleWidth;                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetingReticleHeight;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetRange;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            TargetWeightCurve;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTargetFilter                      TargetFilter;                                      // 0x0028(0x0038)(Edit, NativeAccessSpecifierPublic)
	float                                         PullInnerStrengthHip;                              // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullInnerStrengthAds;                              // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullOuterStrengthHip;                              // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullOuterStrengthAds;                              // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullLerpInRate;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullLerpOutRate;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullMaxRotationRate;                               // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowInnerStrengthHip;                              // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowInnerStrengthAds;                              // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowOuterStrengthHip;                              // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowOuterStrengthAds;                              // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowLerpInRate;                                    // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowLerpOutRate;                                   // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowMinRotationRate;                               // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAimAssist2D_Settings) == 0x000008, "Wrong alignment on FFortAimAssist2D_Settings");
static_assert(sizeof(FFortAimAssist2D_Settings) == 0x000098, "Wrong size on FFortAimAssist2D_Settings");
static_assert(offsetof(FFortAimAssist2D_Settings, AssistInnerReticleWidth) == 0x000000, "Member 'FFortAimAssist2D_Settings::AssistInnerReticleWidth' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, AssistInnerReticleHeight) == 0x000004, "Member 'FFortAimAssist2D_Settings::AssistInnerReticleHeight' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, AssistOuterReticleWidth) == 0x000008, "Member 'FFortAimAssist2D_Settings::AssistOuterReticleWidth' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, AssistOuterReticleHeight) == 0x00000C, "Member 'FFortAimAssist2D_Settings::AssistOuterReticleHeight' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, TargetingReticleWidth) == 0x000010, "Member 'FFortAimAssist2D_Settings::TargetingReticleWidth' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, TargetingReticleHeight) == 0x000014, "Member 'FFortAimAssist2D_Settings::TargetingReticleHeight' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, TargetRange) == 0x000018, "Member 'FFortAimAssist2D_Settings::TargetRange' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, TargetWeightCurve) == 0x000020, "Member 'FFortAimAssist2D_Settings::TargetWeightCurve' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, TargetFilter) == 0x000028, "Member 'FFortAimAssist2D_Settings::TargetFilter' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, PullInnerStrengthHip) == 0x000060, "Member 'FFortAimAssist2D_Settings::PullInnerStrengthHip' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, PullInnerStrengthAds) == 0x000064, "Member 'FFortAimAssist2D_Settings::PullInnerStrengthAds' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, PullOuterStrengthHip) == 0x000068, "Member 'FFortAimAssist2D_Settings::PullOuterStrengthHip' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, PullOuterStrengthAds) == 0x00006C, "Member 'FFortAimAssist2D_Settings::PullOuterStrengthAds' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, PullLerpInRate) == 0x000070, "Member 'FFortAimAssist2D_Settings::PullLerpInRate' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, PullLerpOutRate) == 0x000074, "Member 'FFortAimAssist2D_Settings::PullLerpOutRate' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, PullMaxRotationRate) == 0x000078, "Member 'FFortAimAssist2D_Settings::PullMaxRotationRate' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, SlowInnerStrengthHip) == 0x00007C, "Member 'FFortAimAssist2D_Settings::SlowInnerStrengthHip' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, SlowInnerStrengthAds) == 0x000080, "Member 'FFortAimAssist2D_Settings::SlowInnerStrengthAds' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, SlowOuterStrengthHip) == 0x000084, "Member 'FFortAimAssist2D_Settings::SlowOuterStrengthHip' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, SlowOuterStrengthAds) == 0x000088, "Member 'FFortAimAssist2D_Settings::SlowOuterStrengthAds' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, SlowLerpInRate) == 0x00008C, "Member 'FFortAimAssist2D_Settings::SlowLerpInRate' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, SlowLerpOutRate) == 0x000090, "Member 'FFortAimAssist2D_Settings::SlowLerpOutRate' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_Settings, SlowMinRotationRate) == 0x000094, "Member 'FFortAimAssist2D_Settings::SlowMinRotationRate' has a wrong offset!");

// ScriptStruct FortniteGame.CrucibleStatValue
// 0x0028 (0x0028 - 0x0000)
struct FCrucibleStatValue final
{
public:
	float                                         BestTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         RawBestTime;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCrucibleStatSource                       Source;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BackendStatName;                                   // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrucibleStatValue) == 0x000008, "Wrong alignment on FCrucibleStatValue");
static_assert(sizeof(FCrucibleStatValue) == 0x000028, "Wrong size on FCrucibleStatValue");
static_assert(offsetof(FCrucibleStatValue, BestTime) == 0x000000, "Member 'FCrucibleStatValue::BestTime' has a wrong offset!");
static_assert(offsetof(FCrucibleStatValue, RawBestTime) == 0x000008, "Member 'FCrucibleStatValue::RawBestTime' has a wrong offset!");
static_assert(offsetof(FCrucibleStatValue, Source) == 0x000010, "Member 'FCrucibleStatValue::Source' has a wrong offset!");
static_assert(offsetof(FCrucibleStatValue, BackendStatName) == 0x000018, "Member 'FCrucibleStatValue::BackendStatName' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertAvailableData
// 0x000C (0x000C - 0x0000)
struct FFortMissionAlertAvailableData final
{
public:
	class FName                                   MissionAlertCategoryName;                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMissionAlertsAvailable;                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertAvailableData) == 0x000004, "Wrong alignment on FFortMissionAlertAvailableData");
static_assert(sizeof(FFortMissionAlertAvailableData) == 0x00000C, "Wrong size on FFortMissionAlertAvailableData");
static_assert(offsetof(FFortMissionAlertAvailableData, MissionAlertCategoryName) == 0x000000, "Member 'FFortMissionAlertAvailableData::MissionAlertCategoryName' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertAvailableData, NumMissionAlertsAvailable) == 0x000008, "Member 'FFortMissionAlertAvailableData::NumMissionAlertsAvailable' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertRegionData
// 0x0020 (0x0020 - 0x0000)
struct FFortMissionAlertRegionData final
{
public:
	TArray<int32>                                 RegionIndices;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionAlertAvailableData> AvailabilityDataPerCategory;                       // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertRegionData) == 0x000008, "Wrong alignment on FFortMissionAlertRegionData");
static_assert(sizeof(FFortMissionAlertRegionData) == 0x000020, "Wrong size on FFortMissionAlertRegionData");
static_assert(offsetof(FFortMissionAlertRegionData, RegionIndices) == 0x000000, "Member 'FFortMissionAlertRegionData::RegionIndices' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertRegionData, AvailabilityDataPerCategory) == 0x000010, "Member 'FFortMissionAlertRegionData::AvailabilityDataPerCategory' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapMissionAlertData
// 0x0010 (0x0010 - 0x0000)
struct FFortTheaterMapMissionAlertData final
{
public:
	TArray<struct FFortMissionAlertRegionData>    AvailabilityDataPerRegion;                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMapMissionAlertData) == 0x000008, "Wrong alignment on FFortTheaterMapMissionAlertData");
static_assert(sizeof(FFortTheaterMapMissionAlertData) == 0x000010, "Wrong size on FFortTheaterMapMissionAlertData");
static_assert(offsetof(FFortTheaterMapMissionAlertData, AvailabilityDataPerRegion) == 0x000000, "Member 'FFortTheaterMapMissionAlertData::AvailabilityDataPerRegion' has a wrong offset!");

// ScriptStruct FortniteGame.TeamStrategicBuildingHandle
// 0x0004 (0x0004 - 0x0000)
struct FTeamStrategicBuildingHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamStrategicBuildingHandle) == 0x000004, "Wrong alignment on FTeamStrategicBuildingHandle");
static_assert(sizeof(FTeamStrategicBuildingHandle) == 0x000004, "Wrong size on FTeamStrategicBuildingHandle");
static_assert(offsetof(FTeamStrategicBuildingHandle, Handle) == 0x000000, "Member 'FTeamStrategicBuildingHandle::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.TeamStrategicBuildingEntry
// 0x000C (0x0018 - 0x000C)
struct FTeamStrategicBuildingEntry final : public FFastArraySerializerItem
{
public:
	struct FTeamStrategicBuildingHandle           StrategicBuildingHandle;                           // 0x000C(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	class AStrategicBuildingActor*                StrategicBuilding;                                 // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamStrategicBuildingEntry) == 0x000008, "Wrong alignment on FTeamStrategicBuildingEntry");
static_assert(sizeof(FTeamStrategicBuildingEntry) == 0x000018, "Wrong size on FTeamStrategicBuildingEntry");
static_assert(offsetof(FTeamStrategicBuildingEntry, StrategicBuildingHandle) == 0x00000C, "Member 'FTeamStrategicBuildingEntry::StrategicBuildingHandle' has a wrong offset!");
static_assert(offsetof(FTeamStrategicBuildingEntry, StrategicBuilding) == 0x000010, "Member 'FTeamStrategicBuildingEntry::StrategicBuilding' has a wrong offset!");

// ScriptStruct FortniteGame.TeamStrategicBuildingEntryArray
// 0x0010 (0x0118 - 0x0108)
struct FTeamStrategicBuildingEntryArray final : public FFastArraySerializer
{
public:
	TArray<struct FTeamStrategicBuildingEntry>    Items;                                             // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTeamStrategicBuildingEntryArray) == 0x000008, "Wrong alignment on FTeamStrategicBuildingEntryArray");
static_assert(sizeof(FTeamStrategicBuildingEntryArray) == 0x000118, "Wrong size on FTeamStrategicBuildingEntryArray");
static_assert(offsetof(FTeamStrategicBuildingEntryArray, Items) == 0x000108, "Member 'FTeamStrategicBuildingEntryArray::Items' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayCueForceFeedbackInfo
// 0x0028 (0x0028 - 0x0000)
struct FFortGameplayCueForceFeedbackInfo final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectRadius;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   FarForceFeedbackEffect;                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarEffectRadius;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectTag;                                         // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysPlayOnTarget;                               // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayCueForceFeedbackInfo) == 0x000008, "Wrong alignment on FFortGameplayCueForceFeedbackInfo");
static_assert(sizeof(FFortGameplayCueForceFeedbackInfo) == 0x000028, "Wrong size on FFortGameplayCueForceFeedbackInfo");
static_assert(offsetof(FFortGameplayCueForceFeedbackInfo, ForceFeedbackEffect) == 0x000000, "Member 'FFortGameplayCueForceFeedbackInfo::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueForceFeedbackInfo, EffectRadius) == 0x000008, "Member 'FFortGameplayCueForceFeedbackInfo::EffectRadius' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueForceFeedbackInfo, FarForceFeedbackEffect) == 0x000010, "Member 'FFortGameplayCueForceFeedbackInfo::FarForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueForceFeedbackInfo, FarEffectRadius) == 0x000018, "Member 'FFortGameplayCueForceFeedbackInfo::FarEffectRadius' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueForceFeedbackInfo, EffectTag) == 0x00001C, "Member 'FFortGameplayCueForceFeedbackInfo::EffectTag' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueForceFeedbackInfo, bAlwaysPlayOnTarget) == 0x000024, "Member 'FFortGameplayCueForceFeedbackInfo::bAlwaysPlayOnTarget' has a wrong offset!");

// ScriptStruct FortniteGame.MinigamePlayer
// 0x0064 (0x0070 - 0x000C)
struct FMinigamePlayer final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       UniquePlayerId;                                    // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasValidResetData;                                // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamBeforeMinigameStarted;                         // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationBeforeMinigameStarted;                     // 0x003C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationBeforeMinigameStarted;                     // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsLocationBeforeGameStartedBlocked;               // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSkydivingBeforeMinigameStarted;                // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFlyingBeforeMinigameStarted;                   // 0x0056(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTeleportingOrRespawningForGameplay;             // 0x0057(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStartCreative*               ClaimedPlayerStart;                                // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinigamePlayer) == 0x000008, "Wrong alignment on FMinigamePlayer");
static_assert(sizeof(FMinigamePlayer) == 0x000070, "Wrong size on FMinigamePlayer");
static_assert(offsetof(FMinigamePlayer, UniquePlayerId) == 0x000010, "Member 'FMinigamePlayer::UniquePlayerId' has a wrong offset!");
static_assert(offsetof(FMinigamePlayer, bHasValidResetData) == 0x000038, "Member 'FMinigamePlayer::bHasValidResetData' has a wrong offset!");
static_assert(offsetof(FMinigamePlayer, TeamBeforeMinigameStarted) == 0x000039, "Member 'FMinigamePlayer::TeamBeforeMinigameStarted' has a wrong offset!");
static_assert(offsetof(FMinigamePlayer, LocationBeforeMinigameStarted) == 0x00003C, "Member 'FMinigamePlayer::LocationBeforeMinigameStarted' has a wrong offset!");
static_assert(offsetof(FMinigamePlayer, RotationBeforeMinigameStarted) == 0x000048, "Member 'FMinigamePlayer::RotationBeforeMinigameStarted' has a wrong offset!");
static_assert(offsetof(FMinigamePlayer, bIsLocationBeforeGameStartedBlocked) == 0x000054, "Member 'FMinigamePlayer::bIsLocationBeforeGameStartedBlocked' has a wrong offset!");
static_assert(offsetof(FMinigamePlayer, bWasSkydivingBeforeMinigameStarted) == 0x000055, "Member 'FMinigamePlayer::bWasSkydivingBeforeMinigameStarted' has a wrong offset!");
static_assert(offsetof(FMinigamePlayer, bWasFlyingBeforeMinigameStarted) == 0x000056, "Member 'FMinigamePlayer::bWasFlyingBeforeMinigameStarted' has a wrong offset!");
static_assert(offsetof(FMinigamePlayer, bIsTeleportingOrRespawningForGameplay) == 0x000057, "Member 'FMinigamePlayer::bIsTeleportingOrRespawningForGameplay' has a wrong offset!");
static_assert(offsetof(FMinigamePlayer, bIsLocalPlayer) == 0x000058, "Member 'FMinigamePlayer::bIsLocalPlayer' has a wrong offset!");
static_assert(offsetof(FMinigamePlayer, ClaimedPlayerStart) == 0x000060, "Member 'FMinigamePlayer::ClaimedPlayerStart' has a wrong offset!");

// ScriptStruct FortniteGame.MinigamePlayers
// 0x0018 (0x0120 - 0x0108)
struct FMinigamePlayers final : public FFastArraySerializer
{
public:
	TArray<struct FMinigamePlayer>                Players;                                           // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	class AFortMinigame*                          Owner;                                             // 0x0118(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinigamePlayers) == 0x000008, "Wrong alignment on FMinigamePlayers");
static_assert(sizeof(FMinigamePlayers) == 0x000120, "Wrong size on FMinigamePlayers");
static_assert(offsetof(FMinigamePlayers, Players) == 0x000108, "Member 'FMinigamePlayers::Players' has a wrong offset!");
static_assert(offsetof(FMinigamePlayers, Owner) == 0x000118, "Member 'FMinigamePlayers::Owner' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaQuickChatLeafEntry
// 0x00D8 (0x00D8 - 0x0000)
struct FAthenaQuickChatLeafEntry final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   FullChatMessage;                                   // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0030(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bPopulateBrushFromContextObject;                   // 0x00B8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaQuickChatFilteringType                 FilterType;                                        // 0x00B9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaEmojiItemDefinition*             EmojiItemDefinition;                               // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamMemberState                              TeamCommType;                                      // 0x00C8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           OptionGameplayTag;                                 // 0x00CC(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaQuickChatLeafEntry) == 0x000008, "Wrong alignment on FAthenaQuickChatLeafEntry");
static_assert(sizeof(FAthenaQuickChatLeafEntry) == 0x0000D8, "Wrong size on FAthenaQuickChatLeafEntry");
static_assert(offsetof(FAthenaQuickChatLeafEntry, Label) == 0x000000, "Member 'FAthenaQuickChatLeafEntry::Label' has a wrong offset!");
static_assert(offsetof(FAthenaQuickChatLeafEntry, FullChatMessage) == 0x000018, "Member 'FAthenaQuickChatLeafEntry::FullChatMessage' has a wrong offset!");
static_assert(offsetof(FAthenaQuickChatLeafEntry, Brush) == 0x000030, "Member 'FAthenaQuickChatLeafEntry::Brush' has a wrong offset!");
static_assert(offsetof(FAthenaQuickChatLeafEntry, bPopulateBrushFromContextObject) == 0x0000B8, "Member 'FAthenaQuickChatLeafEntry::bPopulateBrushFromContextObject' has a wrong offset!");
static_assert(offsetof(FAthenaQuickChatLeafEntry, FilterType) == 0x0000B9, "Member 'FAthenaQuickChatLeafEntry::FilterType' has a wrong offset!");
static_assert(offsetof(FAthenaQuickChatLeafEntry, EmojiItemDefinition) == 0x0000C0, "Member 'FAthenaQuickChatLeafEntry::EmojiItemDefinition' has a wrong offset!");
static_assert(offsetof(FAthenaQuickChatLeafEntry, TeamCommType) == 0x0000C8, "Member 'FAthenaQuickChatLeafEntry::TeamCommType' has a wrong offset!");
static_assert(offsetof(FAthenaQuickChatLeafEntry, OptionGameplayTag) == 0x0000CC, "Member 'FAthenaQuickChatLeafEntry::OptionGameplayTag' has a wrong offset!");

// ScriptStruct FortniteGame.SettingsHUDVisibilityAndText
// 0x0040 (0x0040 - 0x0000)
struct FSettingsHUDVisibilityAndText final
{
public:
	struct FGameplayTag                           HUDVisibilityGameplayTag;                          // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              DefaultHUDVisibility;                              // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ToolTipText;                                       // 0x0028(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSettingsHUDVisibilityAndText) == 0x000008, "Wrong alignment on FSettingsHUDVisibilityAndText");
static_assert(sizeof(FSettingsHUDVisibilityAndText) == 0x000040, "Wrong size on FSettingsHUDVisibilityAndText");
static_assert(offsetof(FSettingsHUDVisibilityAndText, HUDVisibilityGameplayTag) == 0x000000, "Member 'FSettingsHUDVisibilityAndText::HUDVisibilityGameplayTag' has a wrong offset!");
static_assert(offsetof(FSettingsHUDVisibilityAndText, DefaultHUDVisibility) == 0x000008, "Member 'FSettingsHUDVisibilityAndText::DefaultHUDVisibility' has a wrong offset!");
static_assert(offsetof(FSettingsHUDVisibilityAndText, DisplayText) == 0x000010, "Member 'FSettingsHUDVisibilityAndText::DisplayText' has a wrong offset!");
static_assert(offsetof(FSettingsHUDVisibilityAndText, ToolTipText) == 0x000028, "Member 'FSettingsHUDVisibilityAndText::ToolTipText' has a wrong offset!");

// ScriptStruct FortniteGame.FortSearchPassParams
// 0x0028 (0x0028 - 0x0000)
struct FFortSearchPassParams final
{
public:
	int32                                         ControllerId;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SessionName;                                       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BestDatacenterId;                                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProcessedSearchResults;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSearchPassParams) == 0x000008, "Wrong alignment on FFortSearchPassParams");
static_assert(sizeof(FFortSearchPassParams) == 0x000028, "Wrong size on FFortSearchPassParams");
static_assert(offsetof(FFortSearchPassParams, ControllerId) == 0x000000, "Member 'FFortSearchPassParams::ControllerId' has a wrong offset!");
static_assert(offsetof(FFortSearchPassParams, SessionName) == 0x000004, "Member 'FFortSearchPassParams::SessionName' has a wrong offset!");
static_assert(offsetof(FFortSearchPassParams, BestDatacenterId) == 0x000010, "Member 'FFortSearchPassParams::BestDatacenterId' has a wrong offset!");
static_assert(offsetof(FFortSearchPassParams, MaxProcessedSearchResults) == 0x000020, "Member 'FFortSearchPassParams::MaxProcessedSearchResults' has a wrong offset!");

// ScriptStruct FortniteGame.CalloutEntry
// 0x0090 (0x0090 - 0x0000)
struct FCalloutEntry final
{
public:
	struct FGameplayTag                           CalloutTag;                                        // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CalloutIcon;                                       // 0x0008(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCalloutEntry) == 0x000008, "Wrong alignment on FCalloutEntry");
static_assert(sizeof(FCalloutEntry) == 0x000090, "Wrong size on FCalloutEntry");
static_assert(offsetof(FCalloutEntry, CalloutTag) == 0x000000, "Member 'FCalloutEntry::CalloutTag' has a wrong offset!");
static_assert(offsetof(FCalloutEntry, CalloutIcon) == 0x000008, "Member 'FCalloutEntry::CalloutIcon' has a wrong offset!");

// ScriptStruct FortniteGame.RebootCardReplicatedState
// 0x0010 (0x0010 - 0x0000)
struct FRebootCardReplicatedState final
{
public:
	float                                         ChipExpirationServerStartTime;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRebootCardReplicatedState) == 0x000008, "Wrong alignment on FRebootCardReplicatedState");
static_assert(sizeof(FRebootCardReplicatedState) == 0x000010, "Wrong size on FRebootCardReplicatedState");
static_assert(offsetof(FRebootCardReplicatedState, ChipExpirationServerStartTime) == 0x000000, "Member 'FRebootCardReplicatedState::ChipExpirationServerStartTime' has a wrong offset!");
static_assert(offsetof(FRebootCardReplicatedState, PlayerState) == 0x000008, "Member 'FRebootCardReplicatedState::PlayerState' has a wrong offset!");

// ScriptStruct FortniteGame.CumulativeFrameTimeWithoutSleepLimits
// 0x0018 (0x0018 - 0x0000)
struct FCumulativeFrameTimeWithoutSleepLimits final
{
public:
	double                                        FrameTimeWithoutSleep;                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaxCumulativeFrameTimeAboveThreshold;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaxNumberOfFramesAboveThreshold;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCumulativeFrameTimeWithoutSleepLimits) == 0x000008, "Wrong alignment on FCumulativeFrameTimeWithoutSleepLimits");
static_assert(sizeof(FCumulativeFrameTimeWithoutSleepLimits) == 0x000018, "Wrong size on FCumulativeFrameTimeWithoutSleepLimits");
static_assert(offsetof(FCumulativeFrameTimeWithoutSleepLimits, FrameTimeWithoutSleep) == 0x000000, "Member 'FCumulativeFrameTimeWithoutSleepLimits::FrameTimeWithoutSleep' has a wrong offset!");
static_assert(offsetof(FCumulativeFrameTimeWithoutSleepLimits, MaxCumulativeFrameTimeAboveThreshold) == 0x000008, "Member 'FCumulativeFrameTimeWithoutSleepLimits::MaxCumulativeFrameTimeAboveThreshold' has a wrong offset!");
static_assert(offsetof(FCumulativeFrameTimeWithoutSleepLimits, MaxNumberOfFramesAboveThreshold) == 0x000010, "Member 'FCumulativeFrameTimeWithoutSleepLimits::MaxNumberOfFramesAboveThreshold' has a wrong offset!");

// ScriptStruct FortniteGame.TeamFOBRequiredTags
// 0x0028 (0x0028 - 0x0000)
struct FTeamFOBRequiredTags final
{
public:
	struct FGameplayTagContainer                  RequiredFOBSpawnTags;                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Team;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamFOBRequiredTags) == 0x000008, "Wrong alignment on FTeamFOBRequiredTags");
static_assert(sizeof(FTeamFOBRequiredTags) == 0x000028, "Wrong size on FTeamFOBRequiredTags");
static_assert(offsetof(FTeamFOBRequiredTags, RequiredFOBSpawnTags) == 0x000000, "Member 'FTeamFOBRequiredTags::RequiredFOBSpawnTags' has a wrong offset!");
static_assert(offsetof(FTeamFOBRequiredTags, Team) == 0x000020, "Member 'FTeamFOBRequiredTags::Team' has a wrong offset!");

// ScriptStruct FortniteGame.WaypointIndex
// 0x0008 (0x0008 - 0x0000)
struct FWaypointIndex final
{
public:
	int32                                         WaypointGroup;                                     // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaypointIndex;                                     // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaypointIndex) == 0x000004, "Wrong alignment on FWaypointIndex");
static_assert(sizeof(FWaypointIndex) == 0x000008, "Wrong size on FWaypointIndex");
static_assert(offsetof(FWaypointIndex, WaypointGroup) == 0x000000, "Member 'FWaypointIndex::WaypointGroup' has a wrong offset!");
static_assert(offsetof(FWaypointIndex, WaypointIndex) == 0x000004, "Member 'FWaypointIndex::WaypointIndex' has a wrong offset!");

// ScriptStruct FortniteGame.ScreenLabelText
// 0x0030 (0x0030 - 0x0000)
struct FScreenLabelText final
{
public:
	class FText                                   NormalText;                                        // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   RichText;                                          // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScreenLabelText) == 0x000008, "Wrong alignment on FScreenLabelText");
static_assert(sizeof(FScreenLabelText) == 0x000030, "Wrong size on FScreenLabelText");
static_assert(offsetof(FScreenLabelText, NormalText) == 0x000000, "Member 'FScreenLabelText::NormalText' has a wrong offset!");
static_assert(offsetof(FScreenLabelText, RichText) == 0x000018, "Member 'FScreenLabelText::RichText' has a wrong offset!");

// ScriptStruct FortniteGame.FortPreloadLevel
// 0x0018 (0x0018 - 0x0000)
struct FFortPreloadLevel final
{
public:
	bool                                          bOnlyPreloadCity;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PreloadLevels;                                     // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPreloadLevel) == 0x000008, "Wrong alignment on FFortPreloadLevel");
static_assert(sizeof(FFortPreloadLevel) == 0x000018, "Wrong size on FFortPreloadLevel");
static_assert(offsetof(FFortPreloadLevel, bOnlyPreloadCity) == 0x000000, "Member 'FFortPreloadLevel::bOnlyPreloadCity' has a wrong offset!");
static_assert(offsetof(FFortPreloadLevel, PreloadLevels) == 0x000008, "Member 'FFortPreloadLevel::PreloadLevels' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnActorData
// 0x0020 (0x0020 - 0x0000)
struct FFortSpawnActorData final
{
public:
	class UFortSpawnActorInfo*                    SpawnActorInfo;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSpawnsRemaining;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeUntilNextSpawn;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SpawnedFortSpawnActors;                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpawnActorData) == 0x000008, "Wrong alignment on FFortSpawnActorData");
static_assert(sizeof(FFortSpawnActorData) == 0x000020, "Wrong size on FFortSpawnActorData");
static_assert(offsetof(FFortSpawnActorData, SpawnActorInfo) == 0x000000, "Member 'FFortSpawnActorData::SpawnActorInfo' has a wrong offset!");
static_assert(offsetof(FFortSpawnActorData, NumSpawnsRemaining) == 0x000008, "Member 'FFortSpawnActorData::NumSpawnsRemaining' has a wrong offset!");
static_assert(offsetof(FFortSpawnActorData, TimeUntilNextSpawn) == 0x00000C, "Member 'FFortSpawnActorData::TimeUntilNextSpawn' has a wrong offset!");
static_assert(offsetof(FFortSpawnActorData, SpawnedFortSpawnActors) == 0x000010, "Member 'FFortSpawnActorData::SpawnedFortSpawnActors' has a wrong offset!");

// ScriptStruct FortniteGame.FortPieSliceSpawnData
// 0x0080 (0x0080 - 0x0000)
struct FFortPieSliceSpawnData
{
public:
	struct FScalableFloat                         SpawnDirection;                                    // 0x0000(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpawnDirectionDeviation;                           // 0x0020(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinSpawnDistanceFromCenter;                        // 0x0040(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxSpawnDistanceFromCenter;                        // 0x0060(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPieSliceSpawnData) == 0x000008, "Wrong alignment on FFortPieSliceSpawnData");
static_assert(sizeof(FFortPieSliceSpawnData) == 0x000080, "Wrong size on FFortPieSliceSpawnData");
static_assert(offsetof(FFortPieSliceSpawnData, SpawnDirection) == 0x000000, "Member 'FFortPieSliceSpawnData::SpawnDirection' has a wrong offset!");
static_assert(offsetof(FFortPieSliceSpawnData, SpawnDirectionDeviation) == 0x000020, "Member 'FFortPieSliceSpawnData::SpawnDirectionDeviation' has a wrong offset!");
static_assert(offsetof(FFortPieSliceSpawnData, MinSpawnDistanceFromCenter) == 0x000040, "Member 'FFortPieSliceSpawnData::MinSpawnDistanceFromCenter' has a wrong offset!");
static_assert(offsetof(FFortPieSliceSpawnData, MaxSpawnDistanceFromCenter) == 0x000060, "Member 'FFortPieSliceSpawnData::MaxSpawnDistanceFromCenter' has a wrong offset!");

// ScriptStruct FortniteGame.HeistBlingDropSpawnData
// 0x0020 (0x00A0 - 0x0080)
struct FHeistBlingDropSpawnData final : public FFortPieSliceSpawnData
{
public:
	struct FScalableFloat                         SafeZonePhaseWhereToSpawn;                         // 0x0080(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeistBlingDropSpawnData) == 0x000008, "Wrong alignment on FHeistBlingDropSpawnData");
static_assert(sizeof(FHeistBlingDropSpawnData) == 0x0000A0, "Wrong size on FHeistBlingDropSpawnData");
static_assert(offsetof(FHeistBlingDropSpawnData, SafeZonePhaseWhereToSpawn) == 0x000080, "Member 'FHeistBlingDropSpawnData::SafeZonePhaseWhereToSpawn' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameHotfixUpdateResponse
// 0x0010 (0x0010 - 0x0000)
struct FFortGameHotfixUpdateResponse final
{
public:
	class FString                                 Status;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameHotfixUpdateResponse) == 0x000008, "Wrong alignment on FFortGameHotfixUpdateResponse");
static_assert(sizeof(FFortGameHotfixUpdateResponse) == 0x000010, "Wrong size on FFortGameHotfixUpdateResponse");
static_assert(offsetof(FFortGameHotfixUpdateResponse, Status) == 0x000000, "Member 'FFortGameHotfixUpdateResponse::Status' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistData
// 0x0038 (0x0038 - 0x0000)
struct FPlaylistData final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TournamentId;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventWindowId;                                     // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionId;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistData) == 0x000008, "Wrong alignment on FPlaylistData");
static_assert(sizeof(FPlaylistData) == 0x000038, "Wrong size on FPlaylistData");
static_assert(offsetof(FPlaylistData, PlaylistName) == 0x000000, "Member 'FPlaylistData::PlaylistName' has a wrong offset!");
static_assert(offsetof(FPlaylistData, TournamentId) == 0x000008, "Member 'FPlaylistData::TournamentId' has a wrong offset!");
static_assert(offsetof(FPlaylistData, EventWindowId) == 0x000018, "Member 'FPlaylistData::EventWindowId' has a wrong offset!");
static_assert(offsetof(FPlaylistData, RegionId) == 0x000028, "Member 'FPlaylistData::RegionId' has a wrong offset!");

// ScriptStruct FortniteGame.ExitCraftSpawnData
// 0x0008 (0x0008 - 0x0000)
struct FExitCraftSpawnData final
{
public:
	class UFortAthenaExitCraftInfo*               ExitCraftInfo;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExitCraftSpawnData) == 0x000008, "Wrong alignment on FExitCraftSpawnData");
static_assert(sizeof(FExitCraftSpawnData) == 0x000008, "Wrong size on FExitCraftSpawnData");
static_assert(offsetof(FExitCraftSpawnData, ExitCraftInfo) == 0x000000, "Member 'FExitCraftSpawnData::ExitCraftInfo' has a wrong offset!");

// ScriptStruct FortniteGame.FortTokenContextInfo
// 0x0038 (0x0038 - 0x0000)
struct FFortTokenContextInfo final
{
public:
	struct FGameplayTagContainer                  RequiredContextTags;                               // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTokenContextInfo) == 0x000008, "Wrong alignment on FFortTokenContextInfo");
static_assert(sizeof(FFortTokenContextInfo) == 0x000038, "Wrong size on FFortTokenContextInfo");
static_assert(offsetof(FFortTokenContextInfo, RequiredContextTags) == 0x000000, "Member 'FFortTokenContextInfo::RequiredContextTags' has a wrong offset!");
static_assert(offsetof(FFortTokenContextInfo, Text) == 0x000020, "Member 'FFortTokenContextInfo::Text' has a wrong offset!");

// ScriptStruct FortniteGame.AbilityToolSpawnParameters
// 0x0028 (0x0028 - 0x0000)
struct FAbilityToolSpawnParameters final
{
public:
	TSubclassOf<class ABuildingActor>             SpawnClass;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       AttachedToActor;                                   // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityToolSpawnParameters) == 0x000008, "Wrong alignment on FAbilityToolSpawnParameters");
static_assert(sizeof(FAbilityToolSpawnParameters) == 0x000028, "Wrong size on FAbilityToolSpawnParameters");
static_assert(offsetof(FAbilityToolSpawnParameters, SpawnClass) == 0x000000, "Member 'FAbilityToolSpawnParameters::SpawnClass' has a wrong offset!");
static_assert(offsetof(FAbilityToolSpawnParameters, Location) == 0x000008, "Member 'FAbilityToolSpawnParameters::Location' has a wrong offset!");
static_assert(offsetof(FAbilityToolSpawnParameters, Rotation) == 0x000014, "Member 'FAbilityToolSpawnParameters::Rotation' has a wrong offset!");
static_assert(offsetof(FAbilityToolSpawnParameters, AttachedToActor) == 0x000020, "Member 'FAbilityToolSpawnParameters::AttachedToActor' has a wrong offset!");

// ScriptStruct FortniteGame.CombatEventMultiplier
// 0x0008 (0x0008 - 0x0000)
struct FCombatEventMultiplier final
{
public:
	EFortCombatEvents                             CombatEvent;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatEventMultiplier) == 0x000004, "Wrong alignment on FCombatEventMultiplier");
static_assert(sizeof(FCombatEventMultiplier) == 0x000008, "Wrong size on FCombatEventMultiplier");
static_assert(offsetof(FCombatEventMultiplier, CombatEvent) == 0x000000, "Member 'FCombatEventMultiplier::CombatEvent' has a wrong offset!");
static_assert(offsetof(FCombatEventMultiplier, MaxContribution) == 0x000004, "Member 'FCombatEventMultiplier::MaxContribution' has a wrong offset!");

// ScriptStruct FortniteGame.CombatFactorData
// 0x0038 (0x0038 - 0x0000)
struct FCombatFactorData final
{
public:
	TArray<struct FCombatEventMultiplier>         ContributingCombatEvents;                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugFactorName;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatFactorData) == 0x000008, "Wrong alignment on FCombatFactorData");
static_assert(sizeof(FCombatFactorData) == 0x000038, "Wrong size on FCombatFactorData");
static_assert(offsetof(FCombatFactorData, ContributingCombatEvents) == 0x000000, "Member 'FCombatFactorData::ContributingCombatEvents' has a wrong offset!");
static_assert(offsetof(FCombatFactorData, MaxValue) == 0x000010, "Member 'FCombatFactorData::MaxValue' has a wrong offset!");
static_assert(offsetof(FCombatFactorData, DebugFactorName) == 0x000018, "Member 'FCombatFactorData::DebugFactorName' has a wrong offset!");
static_assert(offsetof(FCombatFactorData, DebugGraphColor) == 0x000028, "Member 'FCombatFactorData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaRewardSchedule
// 0x0010 (0x0010 - 0x0000)
struct FAthenaRewardSchedule final
{
public:
	TArray<struct FAthenaRewardScheduleLevel>     Levels;                                            // 0x0000(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaRewardSchedule) == 0x000008, "Wrong alignment on FAthenaRewardSchedule");
static_assert(sizeof(FAthenaRewardSchedule) == 0x000010, "Wrong size on FAthenaRewardSchedule");
static_assert(offsetof(FAthenaRewardSchedule, Levels) == 0x000000, "Member 'FAthenaRewardSchedule::Levels' has a wrong offset!");

// ScriptStruct FortniteGame.MashLootTierOverrideAssetData
// 0x000C (0x000C - 0x0000)
struct FMashLootTierOverrideAssetData final
{
public:
	int32                                         SafeZoneIndex;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TieredGroup;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMashLootTierOverrideAssetData) == 0x000004, "Wrong alignment on FMashLootTierOverrideAssetData");
static_assert(sizeof(FMashLootTierOverrideAssetData) == 0x00000C, "Wrong size on FMashLootTierOverrideAssetData");
static_assert(offsetof(FMashLootTierOverrideAssetData, SafeZoneIndex) == 0x000000, "Member 'FMashLootTierOverrideAssetData::SafeZoneIndex' has a wrong offset!");
static_assert(offsetof(FMashLootTierOverrideAssetData, TieredGroup) == 0x000004, "Member 'FMashLootTierOverrideAssetData::TieredGroup' has a wrong offset!");

// ScriptStruct FortniteGame.ScorePlacementTable
// 0x00E0 (0x00E0 - 0x0000)
struct FScorePlacementTable final
{
public:
	TArray<float>                                 Solo;                                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Duos;                                              // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Squads;                                            // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FiftyFifty;                                        // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 LargeTeam;                                         // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 MediumTeam;                                        // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 QuickSolo;                                         // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 QuickDuo;                                          // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 QuickSquad;                                        // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 QuickLargeTeam;                                    // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 QuickTwoTeam;                                      // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 QuickMediumTeam;                                   // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SinglePlacement;                                   // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Default;                                           // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScorePlacementTable) == 0x000008, "Wrong alignment on FScorePlacementTable");
static_assert(sizeof(FScorePlacementTable) == 0x0000E0, "Wrong size on FScorePlacementTable");
static_assert(offsetof(FScorePlacementTable, Solo) == 0x000000, "Member 'FScorePlacementTable::Solo' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, Duos) == 0x000010, "Member 'FScorePlacementTable::Duos' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, Squads) == 0x000020, "Member 'FScorePlacementTable::Squads' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, FiftyFifty) == 0x000030, "Member 'FScorePlacementTable::FiftyFifty' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, LargeTeam) == 0x000040, "Member 'FScorePlacementTable::LargeTeam' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, MediumTeam) == 0x000050, "Member 'FScorePlacementTable::MediumTeam' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, QuickSolo) == 0x000060, "Member 'FScorePlacementTable::QuickSolo' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, QuickDuo) == 0x000070, "Member 'FScorePlacementTable::QuickDuo' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, QuickSquad) == 0x000080, "Member 'FScorePlacementTable::QuickSquad' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, QuickLargeTeam) == 0x000090, "Member 'FScorePlacementTable::QuickLargeTeam' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, QuickTwoTeam) == 0x0000A0, "Member 'FScorePlacementTable::QuickTwoTeam' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, QuickMediumTeam) == 0x0000B0, "Member 'FScorePlacementTable::QuickMediumTeam' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, SinglePlacement) == 0x0000C0, "Member 'FScorePlacementTable::SinglePlacement' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, Default) == 0x0000D0, "Member 'FScorePlacementTable::Default' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityTargetSelectionList
// 0x0020 (0x0020 - 0x0000)
struct FFortAbilityTargetSelectionList final
{
public:
	TArray<struct FFortAbilityTargetSelection>    List;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bStopAtFirstSuccess : 1;                           // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bKeepCheckingListOnIndestructibleHit : 1;          // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseWeaponRanges : 1;                              // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseMaxYawAngleToTarget : 1;                       // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxYawAngleToTarget;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAbilityTargetSelectionList) == 0x000008, "Wrong alignment on FFortAbilityTargetSelectionList");
static_assert(sizeof(FFortAbilityTargetSelectionList) == 0x000020, "Wrong size on FFortAbilityTargetSelectionList");
static_assert(offsetof(FFortAbilityTargetSelectionList, List) == 0x000000, "Member 'FFortAbilityTargetSelectionList::List' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelectionList, MaxYawAngleToTarget) == 0x000014, "Member 'FFortAbilityTargetSelectionList::MaxYawAngleToTarget' has a wrong offset!");

// ScriptStruct FortniteGame.PurchaseFailureLogSubmitOptions
// 0x0020 (0x0020 - 0x0000)
struct FPurchaseFailureLogSubmitOptions final
{
public:
	bool                                          bSubmitLogs;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LogTailKb;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LogSubmitChance;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         DoNotUploadReasons;                                // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPurchaseFailureLogSubmitOptions) == 0x000008, "Wrong alignment on FPurchaseFailureLogSubmitOptions");
static_assert(sizeof(FPurchaseFailureLogSubmitOptions) == 0x000020, "Wrong size on FPurchaseFailureLogSubmitOptions");
static_assert(offsetof(FPurchaseFailureLogSubmitOptions, bSubmitLogs) == 0x000000, "Member 'FPurchaseFailureLogSubmitOptions::bSubmitLogs' has a wrong offset!");
static_assert(offsetof(FPurchaseFailureLogSubmitOptions, LogTailKb) == 0x000004, "Member 'FPurchaseFailureLogSubmitOptions::LogTailKb' has a wrong offset!");
static_assert(offsetof(FPurchaseFailureLogSubmitOptions, LogSubmitChance) == 0x000008, "Member 'FPurchaseFailureLogSubmitOptions::LogSubmitChance' has a wrong offset!");
static_assert(offsetof(FPurchaseFailureLogSubmitOptions, DoNotUploadReasons) == 0x000010, "Member 'FPurchaseFailureLogSubmitOptions::DoNotUploadReasons' has a wrong offset!");

// ScriptStruct FortniteGame.MMAttemptState
// 0x000C (0x000C - 0x0000)
struct FMMAttemptState final
{
public:
	int32                                         BestSessionIdx;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSearchResults;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingState                             State;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyReservationResult                       LastBeaconResponse;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMMAttemptState) == 0x000004, "Wrong alignment on FMMAttemptState");
static_assert(sizeof(FMMAttemptState) == 0x00000C, "Wrong size on FMMAttemptState");
static_assert(offsetof(FMMAttemptState, BestSessionIdx) == 0x000000, "Member 'FMMAttemptState::BestSessionIdx' has a wrong offset!");
static_assert(offsetof(FMMAttemptState, NumSearchResults) == 0x000004, "Member 'FMMAttemptState::NumSearchResults' has a wrong offset!");
static_assert(offsetof(FMMAttemptState, State) == 0x000008, "Member 'FMMAttemptState::State' has a wrong offset!");
static_assert(offsetof(FMMAttemptState, LastBeaconResponse) == 0x000009, "Member 'FMMAttemptState::LastBeaconResponse' has a wrong offset!");

// ScriptStruct FortniteGame.HotfixVolumePlacement
// 0x001C (0x001C - 0x0000)
struct FHotfixVolumePlacement final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x000C(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeededOnClient;                                   // 0x0018(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHotfixVolumePlacement) == 0x000004, "Wrong alignment on FHotfixVolumePlacement");
static_assert(sizeof(FHotfixVolumePlacement) == 0x00001C, "Wrong size on FHotfixVolumePlacement");
static_assert(offsetof(FHotfixVolumePlacement, Center) == 0x000000, "Member 'FHotfixVolumePlacement::Center' has a wrong offset!");
static_assert(offsetof(FHotfixVolumePlacement, Extent) == 0x00000C, "Member 'FHotfixVolumePlacement::Extent' has a wrong offset!");
static_assert(offsetof(FHotfixVolumePlacement, bNeededOnClient) == 0x000018, "Member 'FHotfixVolumePlacement::bNeededOnClient' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelCriteria
// 0x0020 (0x0020 - 0x0000)
struct FStrategicBuildingLevelCriteria final
{
public:
	class FText                                   UnlockRequirementText;                             // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortStrategicBuildingLevelCriteriaDisplayRepresentation RequirementDisplayRepresentation;                  // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnlockRequirementQuantity;                         // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingLevelCriteria) == 0x000008, "Wrong alignment on FStrategicBuildingLevelCriteria");
static_assert(sizeof(FStrategicBuildingLevelCriteria) == 0x000020, "Wrong size on FStrategicBuildingLevelCriteria");
static_assert(offsetof(FStrategicBuildingLevelCriteria, UnlockRequirementText) == 0x000000, "Member 'FStrategicBuildingLevelCriteria::UnlockRequirementText' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelCriteria, RequirementDisplayRepresentation) == 0x000018, "Member 'FStrategicBuildingLevelCriteria::RequirementDisplayRepresentation' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelCriteria, UnlockRequirementQuantity) == 0x00001C, "Member 'FStrategicBuildingLevelCriteria::UnlockRequirementQuantity' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingUpgradePathInfo
// 0x00C0 (0x00C0 - 0x0000)
struct FStrategicBuildingUpgradePathInfo final
{
public:
	class FText                                   UpgradeDesc;                                       // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UpgradeBrush;                                      // 0x0018(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UpgradeTags;                                       // 0x00A0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingUpgradePathInfo) == 0x000008, "Wrong alignment on FStrategicBuildingUpgradePathInfo");
static_assert(sizeof(FStrategicBuildingUpgradePathInfo) == 0x0000C0, "Wrong size on FStrategicBuildingUpgradePathInfo");
static_assert(offsetof(FStrategicBuildingUpgradePathInfo, UpgradeDesc) == 0x000000, "Member 'FStrategicBuildingUpgradePathInfo::UpgradeDesc' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingUpgradePathInfo, UpgradeBrush) == 0x000018, "Member 'FStrategicBuildingUpgradePathInfo::UpgradeBrush' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingUpgradePathInfo, UpgradeTags) == 0x0000A0, "Member 'FStrategicBuildingUpgradePathInfo::UpgradeTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilitySetDeliveryInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FFortAbilitySetDeliveryInfo final
{
public:
	struct FFortDeliveryInfoRequirementsFilter    DeliveryRequirements;                              // 0x0000(0x0098)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UFortAbilitySet>> AbilitySets;                                       // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAbilitySetDeliveryInfo) == 0x000008, "Wrong alignment on FFortAbilitySetDeliveryInfo");
static_assert(sizeof(FFortAbilitySetDeliveryInfo) == 0x0000A8, "Wrong size on FFortAbilitySetDeliveryInfo");
static_assert(offsetof(FFortAbilitySetDeliveryInfo, DeliveryRequirements) == 0x000000, "Member 'FFortAbilitySetDeliveryInfo::DeliveryRequirements' has a wrong offset!");
static_assert(offsetof(FFortAbilitySetDeliveryInfo, AbilitySets) == 0x000098, "Member 'FFortAbilitySetDeliveryInfo::AbilitySets' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayEffectApplicationInfo
// 0x0030 (0x0030 - 0x0000)
struct FGameplayEffectApplicationInfo final
{
public:
	TSoftClassPtr<class UClass>                   GameplayEffect;                                    // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEffectApplicationInfo) == 0x000008, "Wrong alignment on FGameplayEffectApplicationInfo");
static_assert(sizeof(FGameplayEffectApplicationInfo) == 0x000030, "Wrong size on FGameplayEffectApplicationInfo");
static_assert(offsetof(FGameplayEffectApplicationInfo, GameplayEffect) == 0x000000, "Member 'FGameplayEffectApplicationInfo::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FGameplayEffectApplicationInfo, Level) == 0x000028, "Member 'FGameplayEffectApplicationInfo::Level' has a wrong offset!");

// ScriptStruct FortniteGame.ProximityBasedGEDeliveryInfo
// 0x0010 (0x00B8 - 0x00A8)
struct FProximityBasedGEDeliveryInfo final : public FProximityBasedGEDeliveryInfoBase
{
public:
	TArray<struct FGameplayEffectApplicationInfo> EffectsToApply;                                    // 0x00A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FProximityBasedGEDeliveryInfo) == 0x000008, "Wrong alignment on FProximityBasedGEDeliveryInfo");
static_assert(sizeof(FProximityBasedGEDeliveryInfo) == 0x0000B8, "Wrong size on FProximityBasedGEDeliveryInfo");
static_assert(offsetof(FProximityBasedGEDeliveryInfo, EffectsToApply) == 0x0000A8, "Member 'FProximityBasedGEDeliveryInfo::EffectsToApply' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelUnlocks
// 0x0030 (0x0030 - 0x0000)
struct FStrategicBuildingLevelUnlocks final
{
public:
	TArray<struct FFortAbilitySetDeliveryInfo>    OwnerStrategicBuildingAbilitySetBuckets;           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAbilitySetDeliveryInfo>    PawnPersistentAbilitySetBuckets;                   // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProximityBasedGEDeliveryInfo>  ProximityBasedEffectBuckets;                       // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingLevelUnlocks) == 0x000008, "Wrong alignment on FStrategicBuildingLevelUnlocks");
static_assert(sizeof(FStrategicBuildingLevelUnlocks) == 0x000030, "Wrong size on FStrategicBuildingLevelUnlocks");
static_assert(offsetof(FStrategicBuildingLevelUnlocks, OwnerStrategicBuildingAbilitySetBuckets) == 0x000000, "Member 'FStrategicBuildingLevelUnlocks::OwnerStrategicBuildingAbilitySetBuckets' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelUnlocks, PawnPersistentAbilitySetBuckets) == 0x000010, "Member 'FStrategicBuildingLevelUnlocks::PawnPersistentAbilitySetBuckets' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelUnlocks, ProximityBasedEffectBuckets) == 0x000020, "Member 'FStrategicBuildingLevelUnlocks::ProximityBasedEffectBuckets' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelInformation
// 0x0068 (0x0068 - 0x0000)
struct FStrategicBuildingLevelInformation final
{
public:
	struct FStrategicBuildingLevelCriteria        UpgradeCriteria;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FStrategicBuildingUpgradePathInfo> UpgradePaths;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FStrategicBuildingLevelUnlocks         LevelUnlocks;                                      // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ConstructionTime;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructionRecoveryTime;                           // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingLevelInformation) == 0x000008, "Wrong alignment on FStrategicBuildingLevelInformation");
static_assert(sizeof(FStrategicBuildingLevelInformation) == 0x000068, "Wrong size on FStrategicBuildingLevelInformation");
static_assert(offsetof(FStrategicBuildingLevelInformation, UpgradeCriteria) == 0x000000, "Member 'FStrategicBuildingLevelInformation::UpgradeCriteria' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, UpgradePaths) == 0x000020, "Member 'FStrategicBuildingLevelInformation::UpgradePaths' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, LevelUnlocks) == 0x000030, "Member 'FStrategicBuildingLevelInformation::LevelUnlocks' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, ConstructionTime) == 0x000060, "Member 'FStrategicBuildingLevelInformation::ConstructionTime' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, DestructionRecoveryTime) == 0x000064, "Member 'FStrategicBuildingLevelInformation::DestructionRecoveryTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortMatchmakingErrorInfo
// 0x0028 (0x0028 - 0x0000)
struct FFortMatchmakingErrorInfo final
{
public:
	EMatchmakingErrorV2                           Error;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorCode;                                         // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResponseStr;                                       // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMatchmakingErrorInfo) == 0x000008, "Wrong alignment on FFortMatchmakingErrorInfo");
static_assert(sizeof(FFortMatchmakingErrorInfo) == 0x000028, "Wrong size on FFortMatchmakingErrorInfo");
static_assert(offsetof(FFortMatchmakingErrorInfo, Error) == 0x000000, "Member 'FFortMatchmakingErrorInfo::Error' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingErrorInfo, ErrorCode) == 0x000008, "Member 'FFortMatchmakingErrorInfo::ErrorCode' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingErrorInfo, ResponseStr) == 0x000018, "Member 'FFortMatchmakingErrorInfo::ResponseStr' has a wrong offset!");

// ScriptStruct FortniteGame.TimeOfDayOverride
// 0x0010 (0x0010 - 0x0000)
struct FTimeOfDayOverride final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDay;                                         // 0x0008(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDaySpeed;                                    // 0x000C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeOfDayOverride) == 0x000004, "Wrong alignment on FTimeOfDayOverride");
static_assert(sizeof(FTimeOfDayOverride) == 0x000010, "Wrong size on FTimeOfDayOverride");
static_assert(offsetof(FTimeOfDayOverride, PlaylistName) == 0x000000, "Member 'FTimeOfDayOverride::PlaylistName' has a wrong offset!");
static_assert(offsetof(FTimeOfDayOverride, TimeOfDay) == 0x000008, "Member 'FTimeOfDayOverride::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FTimeOfDayOverride, TimeOfDaySpeed) == 0x00000C, "Member 'FTimeOfDayOverride::TimeOfDaySpeed' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindResponderMaterialVariablePairData
// 0x0024 (0x0024 - 0x0000)
struct FFortWindResponderMaterialVariablePairData final
{
public:
	float                                         PreviousSpeed;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousOffset;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialsPreviousTime;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTimeModifiedByMaterialSpeed;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialVariableIndex;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpeedVariableName;                                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TimeOffsetVariableName;                            // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortWindResponderMaterialVariablePairData) == 0x000004, "Wrong alignment on FFortWindResponderMaterialVariablePairData");
static_assert(sizeof(FFortWindResponderMaterialVariablePairData) == 0x000024, "Wrong size on FFortWindResponderMaterialVariablePairData");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, PreviousSpeed) == 0x000000, "Member 'FFortWindResponderMaterialVariablePairData::PreviousSpeed' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, PreviousOffset) == 0x000004, "Member 'FFortWindResponderMaterialVariablePairData::PreviousOffset' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, MaterialsPreviousTime) == 0x000008, "Member 'FFortWindResponderMaterialVariablePairData::MaterialsPreviousTime' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, DeltaTimeModifiedByMaterialSpeed) == 0x00000C, "Member 'FFortWindResponderMaterialVariablePairData::DeltaTimeModifiedByMaterialSpeed' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, MaterialVariableIndex) == 0x000010, "Member 'FFortWindResponderMaterialVariablePairData::MaterialVariableIndex' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, SpeedVariableName) == 0x000014, "Member 'FFortWindResponderMaterialVariablePairData::SpeedVariableName' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, TimeOffsetVariableName) == 0x00001C, "Member 'FFortWindResponderMaterialVariablePairData::TimeOffsetVariableName' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_BowWeapon
// 0x00A0 (0x00A0 - 0x0000)
struct FFortAnimInput_BowWeapon final
{
public:
	class UCurveFloat*                            BowChargeSpeedModifierCurve;                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RightHandIKExtraOffset;                            // 0x0010(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RightHandIKOffsetLocation;                         // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RightHandIKOffsetRotation;                         // 0x004C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   WeaponAttachmentSocketName;                        // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArrowNockSocketName;                               // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BowAimYaw;                                         // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BowAimPitch;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeBlendSpaceCrouchSpeed;                       // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeBlendSpaceCrouchSpeedInterpRate;             // 0x0074(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeBlendSpaceCrouchSpeedTarget;                 // 0x0078(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargePlayRate;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeBlendInTime;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastChargeThreshold;                               // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeBlendInTimeDefault;                          // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeBlendInTimeFastCharge;                       // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponRaisedAdditiveLeanMultiplier;                // 0x0090(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsBowEquipped : 1;                                // 0x0094(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBowCharging : 1;                                // 0x0094(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBowAtMaxCharge : 1;                             // 0x0094(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableRightHandIK : 1;                            // 0x0094(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_95[0xB];                                       // 0x0095(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimInput_BowWeapon) == 0x000010, "Wrong alignment on FFortAnimInput_BowWeapon");
static_assert(sizeof(FFortAnimInput_BowWeapon) == 0x0000A0, "Wrong size on FFortAnimInput_BowWeapon");
static_assert(offsetof(FFortAnimInput_BowWeapon, BowChargeSpeedModifierCurve) == 0x000000, "Member 'FFortAnimInput_BowWeapon::BowChargeSpeedModifierCurve' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, RightHandIKExtraOffset) == 0x000010, "Member 'FFortAnimInput_BowWeapon::RightHandIKExtraOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, RightHandIKOffsetLocation) == 0x000040, "Member 'FFortAnimInput_BowWeapon::RightHandIKOffsetLocation' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, RightHandIKOffsetRotation) == 0x00004C, "Member 'FFortAnimInput_BowWeapon::RightHandIKOffsetRotation' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, WeaponAttachmentSocketName) == 0x000058, "Member 'FFortAnimInput_BowWeapon::WeaponAttachmentSocketName' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, ArrowNockSocketName) == 0x000060, "Member 'FFortAnimInput_BowWeapon::ArrowNockSocketName' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, BowAimYaw) == 0x000068, "Member 'FFortAnimInput_BowWeapon::BowAimYaw' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, BowAimPitch) == 0x00006C, "Member 'FFortAnimInput_BowWeapon::BowAimPitch' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, ChargeBlendSpaceCrouchSpeed) == 0x000070, "Member 'FFortAnimInput_BowWeapon::ChargeBlendSpaceCrouchSpeed' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, ChargeBlendSpaceCrouchSpeedInterpRate) == 0x000074, "Member 'FFortAnimInput_BowWeapon::ChargeBlendSpaceCrouchSpeedInterpRate' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, ChargeBlendSpaceCrouchSpeedTarget) == 0x000078, "Member 'FFortAnimInput_BowWeapon::ChargeBlendSpaceCrouchSpeedTarget' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, ChargePlayRate) == 0x00007C, "Member 'FFortAnimInput_BowWeapon::ChargePlayRate' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, ChargeBlendInTime) == 0x000080, "Member 'FFortAnimInput_BowWeapon::ChargeBlendInTime' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, FastChargeThreshold) == 0x000084, "Member 'FFortAnimInput_BowWeapon::FastChargeThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, ChargeBlendInTimeDefault) == 0x000088, "Member 'FFortAnimInput_BowWeapon::ChargeBlendInTimeDefault' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, ChargeBlendInTimeFastCharge) == 0x00008C, "Member 'FFortAnimInput_BowWeapon::ChargeBlendInTimeFastCharge' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_BowWeapon, WeaponRaisedAdditiveLeanMultiplier) == 0x000090, "Member 'FFortAnimInput_BowWeapon::WeaponRaisedAdditiveLeanMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.PropertyOverrideMk2
// 0x0048 (0x0048 - 0x0000)
struct FPropertyOverrideMk2 final
{
public:
	class FString                                 PropertyScope;                                     // 0x0000(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyData;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultPropertyData;                               // 0x0030(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropertyOverrideMk2) == 0x000008, "Wrong alignment on FPropertyOverrideMk2");
static_assert(sizeof(FPropertyOverrideMk2) == 0x000048, "Wrong size on FPropertyOverrideMk2");
static_assert(offsetof(FPropertyOverrideMk2, PropertyScope) == 0x000000, "Member 'FPropertyOverrideMk2::PropertyScope' has a wrong offset!");
static_assert(offsetof(FPropertyOverrideMk2, PropertyName) == 0x000010, "Member 'FPropertyOverrideMk2::PropertyName' has a wrong offset!");
static_assert(offsetof(FPropertyOverrideMk2, PropertyData) == 0x000020, "Member 'FPropertyOverrideMk2::PropertyData' has a wrong offset!");
static_assert(offsetof(FPropertyOverrideMk2, DefaultPropertyData) == 0x000030, "Member 'FPropertyOverrideMk2::DefaultPropertyData' has a wrong offset!");

// ScriptStruct FortniteGame.PropertyOverrideId
// 0x0008 (0x0008 - 0x0000)
struct FPropertyOverrideId final
{
public:
	uint64                                        PropertyHashes;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropertyOverrideId) == 0x000008, "Wrong alignment on FPropertyOverrideId");
static_assert(sizeof(FPropertyOverrideId) == 0x000008, "Wrong size on FPropertyOverrideId");
static_assert(offsetof(FPropertyOverrideId, PropertyHashes) == 0x000000, "Member 'FPropertyOverrideId::PropertyHashes' has a wrong offset!");

// ScriptStruct FortniteGame.PropertyOverrideData
// 0x0050 (0x0050 - 0x0000)
struct FPropertyOverrideData final
{
public:
	TArray<struct FPropertyOverrideMk2>           PropertyOverrides;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, SaveGame, RepSkip, NativeAccessSpecifierPublic)
	TArray<struct FPropertyOverrideId>            SharedPropertyIds;                                 // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FPropertyOverrideId>            PendingPropertyIds;                                // 0x0020(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EPropertyOverrideTargetType                   OverrideMode;                                      // 0x0038(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                BaseObject;                                        // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                MutableObject;                                     // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPropertyOverrideData) == 0x000008, "Wrong alignment on FPropertyOverrideData");
static_assert(sizeof(FPropertyOverrideData) == 0x000050, "Wrong size on FPropertyOverrideData");
static_assert(offsetof(FPropertyOverrideData, PropertyOverrides) == 0x000000, "Member 'FPropertyOverrideData::PropertyOverrides' has a wrong offset!");
static_assert(offsetof(FPropertyOverrideData, SharedPropertyIds) == 0x000010, "Member 'FPropertyOverrideData::SharedPropertyIds' has a wrong offset!");
static_assert(offsetof(FPropertyOverrideData, PendingPropertyIds) == 0x000020, "Member 'FPropertyOverrideData::PendingPropertyIds' has a wrong offset!");
static_assert(offsetof(FPropertyOverrideData, OverrideMode) == 0x000038, "Member 'FPropertyOverrideData::OverrideMode' has a wrong offset!");
static_assert(offsetof(FPropertyOverrideData, BaseObject) == 0x000040, "Member 'FPropertyOverrideData::BaseObject' has a wrong offset!");
static_assert(offsetof(FPropertyOverrideData, MutableObject) == 0x000048, "Member 'FPropertyOverrideData::MutableObject' has a wrong offset!");

// ScriptStruct FortniteGame.ReplicatedMontagePair
// 0x0028 (0x0028 - 0x0000)
struct FReplicatedMontagePair final
{
public:
	class UAnimMontage*                           Montage1;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage2;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section1;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section2;                                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          RepIndex;                                          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedMontagePair) == 0x000008, "Wrong alignment on FReplicatedMontagePair");
static_assert(sizeof(FReplicatedMontagePair) == 0x000028, "Wrong size on FReplicatedMontagePair");
static_assert(offsetof(FReplicatedMontagePair, Montage1) == 0x000000, "Member 'FReplicatedMontagePair::Montage1' has a wrong offset!");
static_assert(offsetof(FReplicatedMontagePair, Montage2) == 0x000008, "Member 'FReplicatedMontagePair::Montage2' has a wrong offset!");
static_assert(offsetof(FReplicatedMontagePair, Section1) == 0x000010, "Member 'FReplicatedMontagePair::Section1' has a wrong offset!");
static_assert(offsetof(FReplicatedMontagePair, Section2) == 0x000018, "Member 'FReplicatedMontagePair::Section2' has a wrong offset!");
static_assert(offsetof(FReplicatedMontagePair, RepIndex) == 0x000020, "Member 'FReplicatedMontagePair::RepIndex' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingHitTime
// 0x0018 (0x0018 - 0x0000)
struct FBuildingHitTime final
{
public:
	class ABuildingActor*                         HitBuilding;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingHitTime) == 0x000008, "Wrong alignment on FBuildingHitTime");
static_assert(sizeof(FBuildingHitTime) == 0x000018, "Wrong size on FBuildingHitTime");
static_assert(offsetof(FBuildingHitTime, HitBuilding) == 0x000000, "Member 'FBuildingHitTime::HitBuilding' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaWeaponAlterationRule
// 0x0058 (0x0058 - 0x0000)
struct FAthenaWeaponAlterationRule final
{
public:
	struct FGameplayTagQuery                      MatchCriteria;                                     // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	TArray<class UCosmeticOnlyAlterationItemDefinition*> Alterations;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaWeaponAlterationRule) == 0x000008, "Wrong alignment on FAthenaWeaponAlterationRule");
static_assert(sizeof(FAthenaWeaponAlterationRule) == 0x000058, "Wrong size on FAthenaWeaponAlterationRule");
static_assert(offsetof(FAthenaWeaponAlterationRule, MatchCriteria) == 0x000000, "Member 'FAthenaWeaponAlterationRule::MatchCriteria' has a wrong offset!");
static_assert(offsetof(FAthenaWeaponAlterationRule, Alterations) == 0x000048, "Member 'FAthenaWeaponAlterationRule::Alterations' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemToQuestData
// 0x0028 (0x0030 - 0x0008)
struct FFortItemToQuestData final : public FTableRowBase
{
public:
	class FString                                 ItemTemplateID;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QuestTemplateId;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuestState                               QuestGrantState;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemToQuestData) == 0x000008, "Wrong alignment on FFortItemToQuestData");
static_assert(sizeof(FFortItemToQuestData) == 0x000030, "Wrong size on FFortItemToQuestData");
static_assert(offsetof(FFortItemToQuestData, ItemTemplateID) == 0x000008, "Member 'FFortItemToQuestData::ItemTemplateID' has a wrong offset!");
static_assert(offsetof(FFortItemToQuestData, QuestTemplateId) == 0x000018, "Member 'FFortItemToQuestData::QuestTemplateId' has a wrong offset!");
static_assert(offsetof(FFortItemToQuestData, QuestGrantState) == 0x000028, "Member 'FFortItemToQuestData::QuestGrantState' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayFeedbackEventParams
// 0x0040 (0x0040 - 0x0000)
struct FGameplayFeedbackEventParams final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       InstigatorPlayerId;                                // 0x0008(0x0028)(BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EventLocation;                                     // 0x0030(0x000C)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayFeedbackEventParams) == 0x000008, "Wrong alignment on FGameplayFeedbackEventParams");
static_assert(sizeof(FGameplayFeedbackEventParams) == 0x000040, "Wrong size on FGameplayFeedbackEventParams");
static_assert(offsetof(FGameplayFeedbackEventParams, EventTag) == 0x000000, "Member 'FGameplayFeedbackEventParams::EventTag' has a wrong offset!");
static_assert(offsetof(FGameplayFeedbackEventParams, InstigatorPlayerId) == 0x000008, "Member 'FGameplayFeedbackEventParams::InstigatorPlayerId' has a wrong offset!");
static_assert(offsetof(FGameplayFeedbackEventParams, EventLocation) == 0x000030, "Member 'FGameplayFeedbackEventParams::EventLocation' has a wrong offset!");

// ScriptStruct FortniteGame.FortReplayFXState
// 0x0010 (0x0010 - 0x0000)
struct FFortReplayFXState final
{
public:
	int32                                         DefaultParticleLODBias;                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultDepthOfFieldQuality;                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideParticleLODBias;                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideDepthOfFieldQuality;                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortReplayFXState) == 0x000004, "Wrong alignment on FFortReplayFXState");
static_assert(sizeof(FFortReplayFXState) == 0x000010, "Wrong size on FFortReplayFXState");
static_assert(offsetof(FFortReplayFXState, DefaultParticleLODBias) == 0x000000, "Member 'FFortReplayFXState::DefaultParticleLODBias' has a wrong offset!");
static_assert(offsetof(FFortReplayFXState, DefaultDepthOfFieldQuality) == 0x000004, "Member 'FFortReplayFXState::DefaultDepthOfFieldQuality' has a wrong offset!");
static_assert(offsetof(FFortReplayFXState, OverrideParticleLODBias) == 0x000008, "Member 'FFortReplayFXState::OverrideParticleLODBias' has a wrong offset!");
static_assert(offsetof(FFortReplayFXState, OverrideDepthOfFieldQuality) == 0x00000C, "Member 'FFortReplayFXState::OverrideDepthOfFieldQuality' has a wrong offset!");

// ScriptStruct FortniteGame.NotificationUISettings
// 0x0008 (0x0008 - 0x0000)
struct FNotificationUISettings final
{
public:
	float                                         DisplayTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldOverrideVisibilitySettings;                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNotificationUISettings) == 0x000004, "Wrong alignment on FNotificationUISettings");
static_assert(sizeof(FNotificationUISettings) == 0x000008, "Wrong size on FNotificationUISettings");
static_assert(offsetof(FNotificationUISettings, DisplayTime) == 0x000000, "Member 'FNotificationUISettings::DisplayTime' has a wrong offset!");
static_assert(offsetof(FNotificationUISettings, bShouldOverrideVisibilitySettings) == 0x000004, "Member 'FNotificationUISettings::bShouldOverrideVisibilitySettings' has a wrong offset!");

// ScriptStruct FortniteGame.FortGamepadBasicOptions
// 0x0003 (0x0003 - 0x0000)
struct FFortGamepadBasicOptions final
{
public:
	EFortGamepadSensitivity                       LookSensitivityPreset;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGamepadSensitivity                       LookSensitivityPresetAds;                          // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAdvancedOptions;                               // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGamepadBasicOptions) == 0x000001, "Wrong alignment on FFortGamepadBasicOptions");
static_assert(sizeof(FFortGamepadBasicOptions) == 0x000003, "Wrong size on FFortGamepadBasicOptions");
static_assert(offsetof(FFortGamepadBasicOptions, LookSensitivityPreset) == 0x000000, "Member 'FFortGamepadBasicOptions::LookSensitivityPreset' has a wrong offset!");
static_assert(offsetof(FFortGamepadBasicOptions, LookSensitivityPresetAds) == 0x000001, "Member 'FFortGamepadBasicOptions::LookSensitivityPresetAds' has a wrong offset!");
static_assert(offsetof(FFortGamepadBasicOptions, bUseAdvancedOptions) == 0x000002, "Member 'FFortGamepadBasicOptions::bUseAdvancedOptions' has a wrong offset!");

// ScriptStruct FortniteGame.VisibilityInfo
// 0x001C (0x0028 - 0x000C)
struct FVisibilityInfo final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVisibilityComponent*               VisibilityComponent;                               // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TeamVisibilityFlag;                                // 0x0020(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVisibilityInfo) == 0x000008, "Wrong alignment on FVisibilityInfo");
static_assert(sizeof(FVisibilityInfo) == 0x000028, "Wrong size on FVisibilityInfo");
static_assert(offsetof(FVisibilityInfo, Actor) == 0x000010, "Member 'FVisibilityInfo::Actor' has a wrong offset!");
static_assert(offsetof(FVisibilityInfo, VisibilityComponent) == 0x000018, "Member 'FVisibilityInfo::VisibilityComponent' has a wrong offset!");
static_assert(offsetof(FVisibilityInfo, TeamVisibilityFlag) == 0x000020, "Member 'FVisibilityInfo::TeamVisibilityFlag' has a wrong offset!");

// ScriptStruct FortniteGame.FortNonPrimaryMission
// 0x00B8 (0x00B8 - 0x0000)
struct FFortNonPrimaryMission final
{
public:
	TSoftObjectPtr<class UFortMissionInfo>        MissionInfo;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      ContextTagQuery;                                   // 0x0028(0x0048)(Edit, DisableEditOnInstance, AssetRegistrySearchable, NativeAccessSpecifierPrivate)
	struct FDataTableRowHandle                    MinDifficulty;                                     // 0x0070(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataTableRowHandle                    MaxDifficulty;                                     // 0x0080(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bSatisfiesCurrentRequirement;                      // 0x0090(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RequirementIndicesSatisfied;                       // 0x0098(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<int32>                                 DistributionCategoryIndicesSatisfied;              // 0x00A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortNonPrimaryMission) == 0x000008, "Wrong alignment on FFortNonPrimaryMission");
static_assert(sizeof(FFortNonPrimaryMission) == 0x0000B8, "Wrong size on FFortNonPrimaryMission");
static_assert(offsetof(FFortNonPrimaryMission, MissionInfo) == 0x000000, "Member 'FFortNonPrimaryMission::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortNonPrimaryMission, ContextTagQuery) == 0x000028, "Member 'FFortNonPrimaryMission::ContextTagQuery' has a wrong offset!");
static_assert(offsetof(FFortNonPrimaryMission, MinDifficulty) == 0x000070, "Member 'FFortNonPrimaryMission::MinDifficulty' has a wrong offset!");
static_assert(offsetof(FFortNonPrimaryMission, MaxDifficulty) == 0x000080, "Member 'FFortNonPrimaryMission::MaxDifficulty' has a wrong offset!");
static_assert(offsetof(FFortNonPrimaryMission, bSatisfiesCurrentRequirement) == 0x000090, "Member 'FFortNonPrimaryMission::bSatisfiesCurrentRequirement' has a wrong offset!");
static_assert(offsetof(FFortNonPrimaryMission, RequirementIndicesSatisfied) == 0x000098, "Member 'FFortNonPrimaryMission::RequirementIndicesSatisfied' has a wrong offset!");
static_assert(offsetof(FFortNonPrimaryMission, DistributionCategoryIndicesSatisfied) == 0x0000A8, "Member 'FFortNonPrimaryMission::DistributionCategoryIndicesSatisfied' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIBatchedDamageCues
// 0x0020 (0x0020 - 0x0000)
struct FFortAIBatchedDamageCues final
{
public:
	bool                                          bImpact;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpactWeapon;                                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamage;                                           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageShields;                                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageWeapon;                                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFatal;                                            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeaponActivated;                                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  HitLocation;                                       // 0x0008(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIBatchedDamageCues) == 0x000008, "Wrong alignment on FFortAIBatchedDamageCues");
static_assert(sizeof(FFortAIBatchedDamageCues) == 0x000020, "Wrong size on FFortAIBatchedDamageCues");
static_assert(offsetof(FFortAIBatchedDamageCues, bImpact) == 0x000000, "Member 'FFortAIBatchedDamageCues::bImpact' has a wrong offset!");
static_assert(offsetof(FFortAIBatchedDamageCues, bImpactWeapon) == 0x000001, "Member 'FFortAIBatchedDamageCues::bImpactWeapon' has a wrong offset!");
static_assert(offsetof(FFortAIBatchedDamageCues, bDamage) == 0x000002, "Member 'FFortAIBatchedDamageCues::bDamage' has a wrong offset!");
static_assert(offsetof(FFortAIBatchedDamageCues, bDamageShields) == 0x000003, "Member 'FFortAIBatchedDamageCues::bDamageShields' has a wrong offset!");
static_assert(offsetof(FFortAIBatchedDamageCues, bDamageWeapon) == 0x000004, "Member 'FFortAIBatchedDamageCues::bDamageWeapon' has a wrong offset!");
static_assert(offsetof(FFortAIBatchedDamageCues, bFatal) == 0x000005, "Member 'FFortAIBatchedDamageCues::bFatal' has a wrong offset!");
static_assert(offsetof(FFortAIBatchedDamageCues, bWeaponActivated) == 0x000006, "Member 'FFortAIBatchedDamageCues::bWeaponActivated' has a wrong offset!");
static_assert(offsetof(FFortAIBatchedDamageCues, HitLocation) == 0x000008, "Member 'FFortAIBatchedDamageCues::HitLocation' has a wrong offset!");
static_assert(offsetof(FFortAIBatchedDamageCues, TargetActor) == 0x000018, "Member 'FFortAIBatchedDamageCues::TargetActor' has a wrong offset!");

// ScriptStruct FortniteGame.GroundSplineMovement
// 0x0018 (0x0018 - 0x0000)
struct FGroundSplineMovement final
{
public:
	float                                         DistanceAlongSpline;                               // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       SplineComponent;                                   // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroundSplineMovement) == 0x000008, "Wrong alignment on FGroundSplineMovement");
static_assert(sizeof(FGroundSplineMovement) == 0x000018, "Wrong size on FGroundSplineMovement");
static_assert(offsetof(FGroundSplineMovement, DistanceAlongSpline) == 0x000000, "Member 'FGroundSplineMovement::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FGroundSplineMovement, SplineComponent) == 0x000008, "Member 'FGroundSplineMovement::SplineComponent' has a wrong offset!");
static_assert(offsetof(FGroundSplineMovement, Timestamp) == 0x000010, "Member 'FGroundSplineMovement::Timestamp' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterAIDirectorFactor
// 0x000C (0x000C - 0x0000)
struct FFortEncounterAIDirectorFactor final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedPeriodValue;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPeriodTime;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterAIDirectorFactor) == 0x000004, "Wrong alignment on FFortEncounterAIDirectorFactor");
static_assert(sizeof(FFortEncounterAIDirectorFactor) == 0x00000C, "Wrong size on FFortEncounterAIDirectorFactor");
static_assert(offsetof(FFortEncounterAIDirectorFactor, CurrentValue) == 0x000000, "Member 'FFortEncounterAIDirectorFactor::CurrentValue' has a wrong offset!");
static_assert(offsetof(FFortEncounterAIDirectorFactor, AccumulatedPeriodValue) == 0x000004, "Member 'FFortEncounterAIDirectorFactor::AccumulatedPeriodValue' has a wrong offset!");
static_assert(offsetof(FFortEncounterAIDirectorFactor, TotalPeriodTime) == 0x000008, "Member 'FFortEncounterAIDirectorFactor::TotalPeriodTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortSelectableRewardOption
// 0x0010 (0x0010 - 0x0000)
struct FFortSelectableRewardOption final
{
public:
	TArray<struct FFortItemQuantityPair>          Rewards;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSelectableRewardOption) == 0x000008, "Wrong alignment on FFortSelectableRewardOption");
static_assert(sizeof(FFortSelectableRewardOption) == 0x000010, "Wrong size on FFortSelectableRewardOption");
static_assert(offsetof(FFortSelectableRewardOption, Rewards) == 0x000000, "Member 'FFortSelectableRewardOption::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortHiddenRewardQuantityPair
// 0x000C (0x000C - 0x0000)
struct FFortHiddenRewardQuantityPair final
{
public:
	class FName                                   TemplateId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHiddenRewardQuantityPair) == 0x000004, "Wrong alignment on FFortHiddenRewardQuantityPair");
static_assert(sizeof(FFortHiddenRewardQuantityPair) == 0x00000C, "Wrong size on FFortHiddenRewardQuantityPair");
static_assert(offsetof(FFortHiddenRewardQuantityPair, TemplateId) == 0x000000, "Member 'FFortHiddenRewardQuantityPair::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortHiddenRewardQuantityPair, Quantity) == 0x000008, "Member 'FFortHiddenRewardQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortRewardInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortRewardInfo final
{
public:
	TArray<struct FFortSelectableRewardOption>    SelectableRewards;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          StandardRewards;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortHiddenRewardQuantityPair>  HiddenRewards;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRewardInfo) == 0x000008, "Wrong alignment on FFortRewardInfo");
static_assert(sizeof(FFortRewardInfo) == 0x000030, "Wrong size on FFortRewardInfo");
static_assert(offsetof(FFortRewardInfo, SelectableRewards) == 0x000000, "Member 'FFortRewardInfo::SelectableRewards' has a wrong offset!");
static_assert(offsetof(FFortRewardInfo, StandardRewards) == 0x000010, "Member 'FFortRewardInfo::StandardRewards' has a wrong offset!");
static_assert(offsetof(FFortRewardInfo, HiddenRewards) == 0x000020, "Member 'FFortRewardInfo::HiddenRewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookRewards
// 0x0068 (0x0068 - 0x0000)
struct FFortCollectionBookRewards final
{
public:
	ECollectionBookRewardType                     RewardType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PageId;                                            // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionId;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpRequired;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsMajorReward;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRewardInfo                        Rewards;                                           // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookRewards) == 0x000008, "Wrong alignment on FFortCollectionBookRewards");
static_assert(sizeof(FFortCollectionBookRewards) == 0x000068, "Wrong size on FFortCollectionBookRewards");
static_assert(offsetof(FFortCollectionBookRewards, RewardType) == 0x000000, "Member 'FFortCollectionBookRewards::RewardType' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, PageId) == 0x000004, "Member 'FFortCollectionBookRewards::PageId' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, SectionId) == 0x00000C, "Member 'FFortCollectionBookRewards::SectionId' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, XpRequired) == 0x000014, "Member 'FFortCollectionBookRewards::XpRequired' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, Description) == 0x000018, "Member 'FFortCollectionBookRewards::Description' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, bIsMajorReward) == 0x000030, "Member 'FFortCollectionBookRewards::bIsMajorReward' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, Rewards) == 0x000038, "Member 'FFortCollectionBookRewards::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableMissionData
// 0x00A8 (0x00A8 - 0x0000)
struct FFortAvailableMissionData final
{
public:
	class FString                                 MissionGuid;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         MissionRewards;                                    // 0x0010(0x0020)(NativeAccessSpecifierPublic)
	struct FMcpLootResult                         BonusMissionRewards;                               // 0x0030(0x0020)(NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MissionGenerator;                                  // 0x0050(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    MissionDifficultyInfo;                             // 0x0078(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TileIndex;                                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableUntil;                                    // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItemDefinition*>            ItemDefinitionRefCache;                            // 0x0098(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableMissionData) == 0x000008, "Wrong alignment on FFortAvailableMissionData");
static_assert(sizeof(FFortAvailableMissionData) == 0x0000A8, "Wrong size on FFortAvailableMissionData");
static_assert(offsetof(FFortAvailableMissionData, MissionGuid) == 0x000000, "Member 'FFortAvailableMissionData::MissionGuid' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, MissionRewards) == 0x000010, "Member 'FFortAvailableMissionData::MissionRewards' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, BonusMissionRewards) == 0x000030, "Member 'FFortAvailableMissionData::BonusMissionRewards' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, MissionGenerator) == 0x000050, "Member 'FFortAvailableMissionData::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, MissionDifficultyInfo) == 0x000078, "Member 'FFortAvailableMissionData::MissionDifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, TileIndex) == 0x000088, "Member 'FFortAvailableMissionData::TileIndex' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, AvailableUntil) == 0x000090, "Member 'FFortAvailableMissionData::AvailableUntil' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, ItemDefinitionRefCache) == 0x000098, "Member 'FFortAvailableMissionData::ItemDefinitionRefCache' has a wrong offset!");

// ScriptStruct FortniteGame.FortPOIAmbientAudioLoop
// 0x0010 (0x0010 - 0x0000)
struct FFortPOIAmbientAudioLoop final
{
public:
	class USoundBase*                             LoopingSound;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrossfadeTime;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPOIAmbientAudioLoop) == 0x000008, "Wrong alignment on FFortPOIAmbientAudioLoop");
static_assert(sizeof(FFortPOIAmbientAudioLoop) == 0x000010, "Wrong size on FFortPOIAmbientAudioLoop");
static_assert(offsetof(FFortPOIAmbientAudioLoop, LoopingSound) == 0x000000, "Member 'FFortPOIAmbientAudioLoop::LoopingSound' has a wrong offset!");
static_assert(offsetof(FFortPOIAmbientAudioLoop, CrossfadeTime) == 0x000008, "Member 'FFortPOIAmbientAudioLoop::CrossfadeTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayAttributeData
// 0x0018 (0x0028 - 0x0010)
struct FFortGameplayAttributeData final : public FGameplayAttributeData
{
public:
	float                                         Minimum;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Maximum;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCurrentClamped;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBaseClamped;                                    // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldClampBase;                                  // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnclampedBaseValue;                                // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UnclampedCurrentValue;                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayAttributeData) == 0x000008, "Wrong alignment on FFortGameplayAttributeData");
static_assert(sizeof(FFortGameplayAttributeData) == 0x000028, "Wrong size on FFortGameplayAttributeData");
static_assert(offsetof(FFortGameplayAttributeData, Minimum) == 0x000010, "Member 'FFortGameplayAttributeData::Minimum' has a wrong offset!");
static_assert(offsetof(FFortGameplayAttributeData, Maximum) == 0x000014, "Member 'FFortGameplayAttributeData::Maximum' has a wrong offset!");
static_assert(offsetof(FFortGameplayAttributeData, bIsCurrentClamped) == 0x000018, "Member 'FFortGameplayAttributeData::bIsCurrentClamped' has a wrong offset!");
static_assert(offsetof(FFortGameplayAttributeData, bIsBaseClamped) == 0x000019, "Member 'FFortGameplayAttributeData::bIsBaseClamped' has a wrong offset!");
static_assert(offsetof(FFortGameplayAttributeData, bShouldClampBase) == 0x00001A, "Member 'FFortGameplayAttributeData::bShouldClampBase' has a wrong offset!");
static_assert(offsetof(FFortGameplayAttributeData, UnclampedBaseValue) == 0x00001C, "Member 'FFortGameplayAttributeData::UnclampedBaseValue' has a wrong offset!");
static_assert(offsetof(FFortGameplayAttributeData, UnclampedCurrentValue) == 0x000020, "Member 'FFortGameplayAttributeData::UnclampedCurrentValue' has a wrong offset!");

// ScriptStruct FortniteGame.CreativeOptionData
// 0x0020 (0x0020 - 0x0000)
struct FCreativeOptionData final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreativeOptionData) == 0x000008, "Wrong alignment on FCreativeOptionData");
static_assert(sizeof(FCreativeOptionData) == 0x000020, "Wrong size on FCreativeOptionData");
static_assert(offsetof(FCreativeOptionData, DisplayText) == 0x000000, "Member 'FCreativeOptionData::DisplayText' has a wrong offset!");
static_assert(offsetof(FCreativeOptionData, Value) == 0x000018, "Member 'FCreativeOptionData::Value' has a wrong offset!");

// ScriptStruct FortniteGame.CardPackResultNotification
// 0x0028 (0x0028 - 0x0000)
struct FCardPackResultNotification final
{
public:
	struct FMcpLootResult                         LootGranted;                                       // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	int32                                         DisplayLevel;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCardPackResultNotification) == 0x000008, "Wrong alignment on FCardPackResultNotification");
static_assert(sizeof(FCardPackResultNotification) == 0x000028, "Wrong size on FCardPackResultNotification");
static_assert(offsetof(FCardPackResultNotification, LootGranted) == 0x000000, "Member 'FCardPackResultNotification::LootGranted' has a wrong offset!");
static_assert(offsetof(FCardPackResultNotification, DisplayLevel) == 0x000020, "Member 'FCardPackResultNotification::DisplayLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipDisplayInfo
// 0x0038 (0x0038 - 0x0000)
struct FFortTooltipDisplayInfo final
{
public:
	class UClass*                                 PrimaryObjectClass;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SecondaryObjectClass;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DescriptionStatsTags;                              // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UFortTooltipDisplayStatsList*           TooltipStatsList;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTooltipDisplayInfo) == 0x000008, "Wrong alignment on FFortTooltipDisplayInfo");
static_assert(sizeof(FFortTooltipDisplayInfo) == 0x000038, "Wrong size on FFortTooltipDisplayInfo");
static_assert(offsetof(FFortTooltipDisplayInfo, PrimaryObjectClass) == 0x000000, "Member 'FFortTooltipDisplayInfo::PrimaryObjectClass' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayInfo, SecondaryObjectClass) == 0x000008, "Member 'FFortTooltipDisplayInfo::SecondaryObjectClass' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayInfo, DescriptionStatsTags) == 0x000010, "Member 'FFortTooltipDisplayInfo::DescriptionStatsTags' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayInfo, TooltipStatsList) == 0x000030, "Member 'FFortTooltipDisplayInfo::TooltipStatsList' has a wrong offset!");

// ScriptStruct FortniteGame.FortDifficultyIncreaseRewardRecord
// 0x0010 (0x0010 - 0x0000)
struct FFortDifficultyIncreaseRewardRecord final
{
public:
	TArray<struct FFortDifficultyIncreaseRewardEntry> PendingRewards;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDifficultyIncreaseRewardRecord) == 0x000008, "Wrong alignment on FFortDifficultyIncreaseRewardRecord");
static_assert(sizeof(FFortDifficultyIncreaseRewardRecord) == 0x000010, "Wrong size on FFortDifficultyIncreaseRewardRecord");
static_assert(offsetof(FFortDifficultyIncreaseRewardRecord, PendingRewards) == 0x000000, "Member 'FFortDifficultyIncreaseRewardRecord::PendingRewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortTriggeredGameplayMessage
// 0x0018 (0x0018 - 0x0000)
struct FFortTriggeredGameplayMessage final
{
public:
	class UFortGameplayTriggerMessageComponent*   Sender;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ChannelId;                                         // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AController>             TriggerInstigator;                                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTriggeredGameplayMessage) == 0x000008, "Wrong alignment on FFortTriggeredGameplayMessage");
static_assert(sizeof(FFortTriggeredGameplayMessage) == 0x000018, "Wrong size on FFortTriggeredGameplayMessage");
static_assert(offsetof(FFortTriggeredGameplayMessage, Sender) == 0x000000, "Member 'FFortTriggeredGameplayMessage::Sender' has a wrong offset!");
static_assert(offsetof(FFortTriggeredGameplayMessage, ChannelId) == 0x000008, "Member 'FFortTriggeredGameplayMessage::ChannelId' has a wrong offset!");
static_assert(offsetof(FFortTriggeredGameplayMessage, TriggerInstigator) == 0x000010, "Member 'FFortTriggeredGameplayMessage::TriggerInstigator' has a wrong offset!");

// ScriptStruct FortniteGame.FortVehicleIncrementTrick
// 0x0030 (0x0030 - 0x0000)
struct FFortVehicleIncrementTrick final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         HalfSpinsNeeded;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseScore;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Repeats;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepeatsHalfSpinsPerTrick;                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiplierIncrement;                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortVehicleIncrementTrick) == 0x000008, "Wrong alignment on FFortVehicleIncrementTrick");
static_assert(sizeof(FFortVehicleIncrementTrick) == 0x000030, "Wrong size on FFortVehicleIncrementTrick");
static_assert(offsetof(FFortVehicleIncrementTrick, Name) == 0x000000, "Member 'FFortVehicleIncrementTrick::Name' has a wrong offset!");
static_assert(offsetof(FFortVehicleIncrementTrick, HalfSpinsNeeded) == 0x000018, "Member 'FFortVehicleIncrementTrick::HalfSpinsNeeded' has a wrong offset!");
static_assert(offsetof(FFortVehicleIncrementTrick, BaseScore) == 0x00001C, "Member 'FFortVehicleIncrementTrick::BaseScore' has a wrong offset!");
static_assert(offsetof(FFortVehicleIncrementTrick, Repeats) == 0x000020, "Member 'FFortVehicleIncrementTrick::Repeats' has a wrong offset!");
static_assert(offsetof(FFortVehicleIncrementTrick, RepeatsHalfSpinsPerTrick) == 0x000024, "Member 'FFortVehicleIncrementTrick::RepeatsHalfSpinsPerTrick' has a wrong offset!");
static_assert(offsetof(FFortVehicleIncrementTrick, MultiplierIncrement) == 0x000028, "Member 'FFortVehicleIncrementTrick::MultiplierIncrement' has a wrong offset!");

// ScriptStruct FortniteGame.CrucibleCourseData
// 0x0020 (0x0020 - 0x0000)
struct FCrucibleCourseData final
{
public:
	class FString                                 CalculatedScore_BackendStatName;                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrucibleCourseData) == 0x000008, "Wrong alignment on FCrucibleCourseData");
static_assert(sizeof(FCrucibleCourseData) == 0x000020, "Wrong size on FCrucibleCourseData");
static_assert(offsetof(FCrucibleCourseData, CalculatedScore_BackendStatName) == 0x000000, "Member 'FCrucibleCourseData::CalculatedScore_BackendStatName' has a wrong offset!");

// ScriptStruct FortniteGame.QueryXboxUserXUIDParams
// 0x0010 (0x0010 - 0x0000)
struct FQueryXboxUserXUIDParams final
{
public:
	class FString                                 UserXSTSToken;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueryXboxUserXUIDParams) == 0x000008, "Wrong alignment on FQueryXboxUserXUIDParams");
static_assert(sizeof(FQueryXboxUserXUIDParams) == 0x000010, "Wrong size on FQueryXboxUserXUIDParams");
static_assert(offsetof(FQueryXboxUserXUIDParams, UserXSTSToken) == 0x000000, "Member 'FQueryXboxUserXUIDParams::UserXSTSToken' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameScoreEntry
// 0x0054 (0x0060 - 0x000C)
struct FMinigameScoreEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0010(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              TimeRecorded;                                      // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHasScore : 1;                                     // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinigameScoreEntry) == 0x000008, "Wrong alignment on FMinigameScoreEntry");
static_assert(sizeof(FMinigameScoreEntry) == 0x000060, "Wrong size on FMinigameScoreEntry");
static_assert(offsetof(FMinigameScoreEntry, UniqueId) == 0x000010, "Member 'FMinigameScoreEntry::UniqueId' has a wrong offset!");
static_assert(offsetof(FMinigameScoreEntry, PlayerName) == 0x000038, "Member 'FMinigameScoreEntry::PlayerName' has a wrong offset!");
static_assert(offsetof(FMinigameScoreEntry, Score) == 0x000048, "Member 'FMinigameScoreEntry::Score' has a wrong offset!");
static_assert(offsetof(FMinigameScoreEntry, TimeRecorded) == 0x000050, "Member 'FMinigameScoreEntry::TimeRecorded' has a wrong offset!");

// ScriptStruct FortniteGame.FortDialogDescription
// 0x0130 (0x0130 - 0x0000)
struct FFortDialogDescription final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0088)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessageHeader;                                     // 0x0088(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessageBody;                                       // 0x00A0(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   AcceptButtonText;                                  // 0x00B8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   IgnoreButtonText;                                  // 0x00D0(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DismissButtonText;                                 // 0x00E8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0100(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            AdditionalContent;                                 // 0x0108(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDialogFeedbackType                       FeedBackType;                                      // 0x0110(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Dismissable;                                       // 0x0111(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortNotificationHandler*               NotificationHandler;                               // 0x0118(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0x10];                                     // 0x0120(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDialogDescription) == 0x000008, "Wrong alignment on FFortDialogDescription");
static_assert(sizeof(FFortDialogDescription) == 0x000130, "Wrong size on FFortDialogDescription");
static_assert(offsetof(FFortDialogDescription, Icon) == 0x000000, "Member 'FFortDialogDescription::Icon' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, MessageHeader) == 0x000088, "Member 'FFortDialogDescription::MessageHeader' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, MessageBody) == 0x0000A0, "Member 'FFortDialogDescription::MessageBody' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, AcceptButtonText) == 0x0000B8, "Member 'FFortDialogDescription::AcceptButtonText' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, IgnoreButtonText) == 0x0000D0, "Member 'FFortDialogDescription::IgnoreButtonText' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, DismissButtonText) == 0x0000E8, "Member 'FFortDialogDescription::DismissButtonText' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, DisplayTime) == 0x000100, "Member 'FFortDialogDescription::DisplayTime' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, AdditionalContent) == 0x000108, "Member 'FFortDialogDescription::AdditionalContent' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, FeedBackType) == 0x000110, "Member 'FFortDialogDescription::FeedBackType' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, Dismissable) == 0x000111, "Member 'FFortDialogDescription::Dismissable' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, NotificationHandler) == 0x000118, "Member 'FFortDialogDescription::NotificationHandler' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayCueSpawnCondition
// 0x0030 (0x0030 - 0x0000)
struct FFortGameplayCueSpawnCondition final
{
public:
	EFortGameplayCueSourceCondition               SourceCondition;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPhysicalSurface>                      AllowedSurfaces;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x4];                                       // 0x0018(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChanceToPlay;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EParticleSignificanceLevel                    Significance;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequiredDetailMode;                                // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRequireVisible : 1;                               // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayCueSpawnCondition) == 0x000008, "Wrong alignment on FFortGameplayCueSpawnCondition");
static_assert(sizeof(FFortGameplayCueSpawnCondition) == 0x000030, "Wrong size on FFortGameplayCueSpawnCondition");
static_assert(offsetof(FFortGameplayCueSpawnCondition, SourceCondition) == 0x000000, "Member 'FFortGameplayCueSpawnCondition::SourceCondition' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueSpawnCondition, AllowedSurfaces) == 0x000008, "Member 'FFortGameplayCueSpawnCondition::AllowedSurfaces' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueSpawnCondition, ChanceToPlay) == 0x00001C, "Member 'FFortGameplayCueSpawnCondition::ChanceToPlay' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueSpawnCondition, Significance) == 0x000020, "Member 'FFortGameplayCueSpawnCondition::Significance' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueSpawnCondition, RequiredDetailMode) == 0x000024, "Member 'FFortGameplayCueSpawnCondition::RequiredDetailMode' has a wrong offset!");

// ScriptStruct FortniteGame.EventItemNamedWeight
// 0x000C (0x000C - 0x0000)
struct FEventItemNamedWeight final
{
public:
	class FName                                   WeightName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightValue;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventItemNamedWeight) == 0x000004, "Wrong alignment on FEventItemNamedWeight");
static_assert(sizeof(FEventItemNamedWeight) == 0x00000C, "Wrong size on FEventItemNamedWeight");
static_assert(offsetof(FEventItemNamedWeight, WeightName) == 0x000000, "Member 'FEventItemNamedWeight::WeightName' has a wrong offset!");
static_assert(offsetof(FEventItemNamedWeight, WeightValue) == 0x000008, "Member 'FEventItemNamedWeight::WeightValue' has a wrong offset!");

// ScriptStruct FortniteGame.ItemsForEventData
// 0x0030 (0x0030 - 0x0000)
struct FItemsForEventData final
{
public:
	class FString                                 RequiredEventName;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventItemNamedWeight                  EventItemNamedWeight;                              // 0x0010(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                ItemsToLoad;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemsForEventData) == 0x000008, "Wrong alignment on FItemsForEventData");
static_assert(sizeof(FItemsForEventData) == 0x000030, "Wrong size on FItemsForEventData");
static_assert(offsetof(FItemsForEventData, RequiredEventName) == 0x000000, "Member 'FItemsForEventData::RequiredEventName' has a wrong offset!");
static_assert(offsetof(FItemsForEventData, EventItemNamedWeight) == 0x000010, "Member 'FItemsForEventData::EventItemNamedWeight' has a wrong offset!");
static_assert(offsetof(FItemsForEventData, ItemsToLoad) == 0x000020, "Member 'FItemsForEventData::ItemsToLoad' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameScoreData
// 0x0004 (0x0004 - 0x0000)
struct FMinigameScoreData
{
public:
	float                                         Score;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinigameScoreData) == 0x000004, "Wrong alignment on FMinigameScoreData");
static_assert(sizeof(FMinigameScoreData) == 0x000004, "Wrong size on FMinigameScoreData");
static_assert(offsetof(FMinigameScoreData, Score) == 0x000000, "Member 'FMinigameScoreData::Score' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameSoloScoreData
// 0x000C (0x0010 - 0x0004)
struct FMinigameSoloScoreData final : public FMinigameScoreData
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       PlayerState;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinigameSoloScoreData) == 0x000008, "Wrong alignment on FMinigameSoloScoreData");
static_assert(sizeof(FMinigameSoloScoreData) == 0x000010, "Wrong size on FMinigameSoloScoreData");
static_assert(offsetof(FMinigameSoloScoreData, PlayerState) == 0x000008, "Member 'FMinigameSoloScoreData::PlayerState' has a wrong offset!");

// ScriptStruct FortniteGame.RuntimeOptionTabStateInfo
// 0x000C (0x000C - 0x0000)
struct FRuntimeOptionTabStateInfo final
{
public:
	class FName                                   TabName;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRuntimeOptionTabState                    TabState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRuntimeOptionTabStateInfo) == 0x000004, "Wrong alignment on FRuntimeOptionTabStateInfo");
static_assert(sizeof(FRuntimeOptionTabStateInfo) == 0x00000C, "Wrong size on FRuntimeOptionTabStateInfo");
static_assert(offsetof(FRuntimeOptionTabStateInfo, TabName) == 0x000000, "Member 'FRuntimeOptionTabStateInfo::TabName' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionTabStateInfo, TabState) == 0x000008, "Member 'FRuntimeOptionTabStateInfo::TabState' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyLoginRewardStat_ScheduleClaimed
// 0x0008 (0x0008 - 0x0000)
struct FFortDailyLoginRewardStat_ScheduleClaimed final
{
public:
	int32                                         RewardsClaimed;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClaimedToday;                                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDailyLoginRewardStat_ScheduleClaimed) == 0x000004, "Wrong alignment on FFortDailyLoginRewardStat_ScheduleClaimed");
static_assert(sizeof(FFortDailyLoginRewardStat_ScheduleClaimed) == 0x000008, "Wrong size on FFortDailyLoginRewardStat_ScheduleClaimed");
static_assert(offsetof(FFortDailyLoginRewardStat_ScheduleClaimed, RewardsClaimed) == 0x000000, "Member 'FFortDailyLoginRewardStat_ScheduleClaimed::RewardsClaimed' has a wrong offset!");
static_assert(offsetof(FFortDailyLoginRewardStat_ScheduleClaimed, ClaimedToday) == 0x000004, "Member 'FFortDailyLoginRewardStat_ScheduleClaimed::ClaimedToday' has a wrong offset!");

// ScriptStruct FortniteGame.BCActionInfo
// 0x0008 (0x0008 - 0x0000)
struct FBCActionInfo final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBCActionInfo) == 0x000004, "Wrong alignment on FBCActionInfo");
static_assert(sizeof(FBCActionInfo) == 0x000008, "Wrong size on FBCActionInfo");
static_assert(offsetof(FBCActionInfo, Type) == 0x000000, "Member 'FBCActionInfo::Type' has a wrong offset!");
static_assert(offsetof(FBCActionInfo, Action) == 0x000004, "Member 'FBCActionInfo::Action' has a wrong offset!");

// ScriptStruct FortniteGame.RuntimeOptionScheduledNotification
// 0x0030 (0x0030 - 0x0000)
struct FRuntimeOptionScheduledNotification final
{
public:
	struct FDateTime                              FireDateTime;                                      // 0x0000(0x0008)(ZeroConstructor, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocalTime;                                         // 0x0008(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeOptionLocalizableString        Title;                                             // 0x0010(0x0010)(Config, NativeAccessSpecifierPublic)
	struct FRuntimeOptionLocalizableString        Body;                                              // 0x0020(0x0010)(Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeOptionScheduledNotification) == 0x000008, "Wrong alignment on FRuntimeOptionScheduledNotification");
static_assert(sizeof(FRuntimeOptionScheduledNotification) == 0x000030, "Wrong size on FRuntimeOptionScheduledNotification");
static_assert(offsetof(FRuntimeOptionScheduledNotification, FireDateTime) == 0x000000, "Member 'FRuntimeOptionScheduledNotification::FireDateTime' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionScheduledNotification, LocalTime) == 0x000008, "Member 'FRuntimeOptionScheduledNotification::LocalTime' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionScheduledNotification, Title) == 0x000010, "Member 'FRuntimeOptionScheduledNotification::Title' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionScheduledNotification, Body) == 0x000020, "Member 'FRuntimeOptionScheduledNotification::Body' has a wrong offset!");

// ScriptStruct FortniteGame.TournamentPayoutThresholdData
// 0x0020 (0x0020 - 0x0000)
struct FTournamentPayoutThresholdData final
{
public:
	EPayoutScoringType                            ScoringType;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Threshold;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTournamentPayoutData>          PayoutData;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTournamentPayoutThresholdData) == 0x000008, "Wrong alignment on FTournamentPayoutThresholdData");
static_assert(sizeof(FTournamentPayoutThresholdData) == 0x000020, "Wrong size on FTournamentPayoutThresholdData");
static_assert(offsetof(FTournamentPayoutThresholdData, ScoringType) == 0x000000, "Member 'FTournamentPayoutThresholdData::ScoringType' has a wrong offset!");
static_assert(offsetof(FTournamentPayoutThresholdData, Threshold) == 0x000008, "Member 'FTournamentPayoutThresholdData::Threshold' has a wrong offset!");
static_assert(offsetof(FTournamentPayoutThresholdData, PayoutData) == 0x000010, "Member 'FTournamentPayoutThresholdData::PayoutData' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectContext
// 0x0068 (0x00D8 - 0x0070)
struct FFortGameplayEffectContext final : public FGameplayEffectContext
{
public:
	bool                                          bIsFatalHit;                                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCriticalHit;                                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDiceCritical;                                   // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFullBodyHit;                                    // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackMagnitude;                                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackZAngle;                                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunTime;                                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeMagnitude;                                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectDirectionX;                                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectDirectionY;                                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TooltipTags;                                       // 0x0090(0x0020)(NativeAccessSpecifierPublic)
	int32                                         CartridgeID;                                       // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemGuid;                                          // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UObject>                 DamageSourceObject;                                // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SourceLevel;                                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UnmodifiedDamage;                                  // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayEffectContext) == 0x000008, "Wrong alignment on FFortGameplayEffectContext");
static_assert(sizeof(FFortGameplayEffectContext) == 0x0000D8, "Wrong size on FFortGameplayEffectContext");
static_assert(offsetof(FFortGameplayEffectContext, bIsFatalHit) == 0x000070, "Member 'FFortGameplayEffectContext::bIsFatalHit' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, bIsCriticalHit) == 0x000071, "Member 'FFortGameplayEffectContext::bIsCriticalHit' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, bIsDiceCritical) == 0x000072, "Member 'FFortGameplayEffectContext::bIsDiceCritical' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, bIsFullBodyHit) == 0x000073, "Member 'FFortGameplayEffectContext::bIsFullBodyHit' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, KnockbackMagnitude) == 0x000074, "Member 'FFortGameplayEffectContext::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, KnockbackZAngle) == 0x000078, "Member 'FFortGameplayEffectContext::KnockbackZAngle' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, StunTime) == 0x00007C, "Member 'FFortGameplayEffectContext::StunTime' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, ChargeMagnitude) == 0x000080, "Member 'FFortGameplayEffectContext::ChargeMagnitude' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, EffectDirectionX) == 0x000084, "Member 'FFortGameplayEffectContext::EffectDirectionX' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, EffectDirectionY) == 0x000088, "Member 'FFortGameplayEffectContext::EffectDirectionY' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, TooltipTags) == 0x000090, "Member 'FFortGameplayEffectContext::TooltipTags' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, CartridgeID) == 0x0000B0, "Member 'FFortGameplayEffectContext::CartridgeID' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, ItemGuid) == 0x0000B4, "Member 'FFortGameplayEffectContext::ItemGuid' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, DamageSourceObject) == 0x0000C4, "Member 'FFortGameplayEffectContext::DamageSourceObject' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, SourceLevel) == 0x0000CC, "Member 'FFortGameplayEffectContext::SourceLevel' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, UnmodifiedDamage) == 0x0000D0, "Member 'FFortGameplayEffectContext::UnmodifiedDamage' has a wrong offset!");

// ScriptStruct FortniteGame.FortMultiSizeBrush
// 0x0330 (0x0330 - 0x0000)
struct FFortMultiSizeBrush final
{
public:
	struct FSlateBrush                            Brush_XXS;                                         // 0x0000(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_XS;                                          // 0x0088(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_S;                                           // 0x0110(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_M;                                           // 0x0198(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_L;                                           // 0x0220(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_XL;                                          // 0x02A8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMultiSizeBrush) == 0x000008, "Wrong alignment on FFortMultiSizeBrush");
static_assert(sizeof(FFortMultiSizeBrush) == 0x000330, "Wrong size on FFortMultiSizeBrush");
static_assert(offsetof(FFortMultiSizeBrush, Brush_XXS) == 0x000000, "Member 'FFortMultiSizeBrush::Brush_XXS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_XS) == 0x000088, "Member 'FFortMultiSizeBrush::Brush_XS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_S) == 0x000110, "Member 'FFortMultiSizeBrush::Brush_S' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_M) == 0x000198, "Member 'FFortMultiSizeBrush::Brush_M' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_L) == 0x000220, "Member 'FFortMultiSizeBrush::Brush_L' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_XL) == 0x0002A8, "Member 'FFortMultiSizeBrush::Brush_XL' has a wrong offset!");

// ScriptStruct FortniteGame.ViewOffsetData
// 0x0024 (0x0024 - 0x0000)
struct FViewOffsetData final
{
public:
	struct FVector                                OffsetHigh;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetMid;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLow;                                         // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FViewOffsetData) == 0x000004, "Wrong alignment on FViewOffsetData");
static_assert(sizeof(FViewOffsetData) == 0x000024, "Wrong size on FViewOffsetData");
static_assert(offsetof(FViewOffsetData, OffsetHigh) == 0x000000, "Member 'FViewOffsetData::OffsetHigh' has a wrong offset!");
static_assert(offsetof(FViewOffsetData, OffsetMid) == 0x00000C, "Member 'FViewOffsetData::OffsetMid' has a wrong offset!");
static_assert(offsetof(FViewOffsetData, OffsetLow) == 0x000018, "Member 'FViewOffsetData::OffsetLow' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveSetCollectionData
// 0x0088 (0x0088 - 0x0000)
struct FTieredWaveSetCollectionData final
{
public:
	class FText                                   DefenseText;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FText                                   LevelText;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FText                                   WaveText;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FText                                   BreatherText;                                      // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	int32                                         MinLvl;                                            // 0x0060(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLvl;                                            // 0x0064(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseWaveLengthRowName;                             // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseNumOfKillsRowName;                             // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseNumOfKillPointsRowName;                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WaveSet;                                           // 0x0080(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveSetCollectionData) == 0x000008, "Wrong alignment on FTieredWaveSetCollectionData");
static_assert(sizeof(FTieredWaveSetCollectionData) == 0x000088, "Wrong size on FTieredWaveSetCollectionData");
static_assert(offsetof(FTieredWaveSetCollectionData, DefenseText) == 0x000000, "Member 'FTieredWaveSetCollectionData::DefenseText' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, LevelText) == 0x000018, "Member 'FTieredWaveSetCollectionData::LevelText' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, WaveText) == 0x000030, "Member 'FTieredWaveSetCollectionData::WaveText' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, BreatherText) == 0x000048, "Member 'FTieredWaveSetCollectionData::BreatherText' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, MinLvl) == 0x000060, "Member 'FTieredWaveSetCollectionData::MinLvl' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, MaxLvl) == 0x000064, "Member 'FTieredWaveSetCollectionData::MaxLvl' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, BaseWaveLengthRowName) == 0x000068, "Member 'FTieredWaveSetCollectionData::BaseWaveLengthRowName' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, BaseNumOfKillsRowName) == 0x000070, "Member 'FTieredWaveSetCollectionData::BaseNumOfKillsRowName' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, BaseNumOfKillPointsRowName) == 0x000078, "Member 'FTieredWaveSetCollectionData::BaseNumOfKillPointsRowName' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, WaveSet) == 0x000080, "Member 'FTieredWaveSetCollectionData::WaveSet' has a wrong offset!");

// ScriptStruct FortniteGame.FortInviteSessionParams
// 0x0038 (0x0038 - 0x0000)
struct FFortInviteSessionParams final
{
public:
	EMatchmakingState                             State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FailureReason;                                     // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	EPartyReservationResult                       LastBeaconResponse;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x17];                                      // 0x0021(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortInviteSessionParams) == 0x000008, "Wrong alignment on FFortInviteSessionParams");
static_assert(sizeof(FFortInviteSessionParams) == 0x000038, "Wrong size on FFortInviteSessionParams");
static_assert(offsetof(FFortInviteSessionParams, State) == 0x000000, "Member 'FFortInviteSessionParams::State' has a wrong offset!");
static_assert(offsetof(FFortInviteSessionParams, FailureReason) == 0x000008, "Member 'FFortInviteSessionParams::FailureReason' has a wrong offset!");
static_assert(offsetof(FFortInviteSessionParams, LastBeaconResponse) == 0x000020, "Member 'FFortInviteSessionParams::LastBeaconResponse' has a wrong offset!");

// ScriptStruct FortniteGame.WaxPlayerDataEntry
// 0x003C (0x0048 - 0x000C)
struct FWaxPlayerDataEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermanentlyWaxed;                                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerWasLeader;                                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TokenBasedPlacement;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentTokens;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousTokens;                                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentTeamTokens;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousTeamTokens;                                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentKills;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousKills;                                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLives;                                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousVictimLocation;                            // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaxPlayerDataEntry) == 0x000008, "Wrong alignment on FWaxPlayerDataEntry");
static_assert(sizeof(FWaxPlayerDataEntry) == 0x000048, "Wrong size on FWaxPlayerDataEntry");
static_assert(offsetof(FWaxPlayerDataEntry, PlayerState) == 0x000010, "Member 'FWaxPlayerDataEntry::PlayerState' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataEntry, bPermanentlyWaxed) == 0x000018, "Member 'FWaxPlayerDataEntry::bPermanentlyWaxed' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataEntry, bPlayerWasLeader) == 0x000019, "Member 'FWaxPlayerDataEntry::bPlayerWasLeader' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataEntry, TokenBasedPlacement) == 0x00001C, "Member 'FWaxPlayerDataEntry::TokenBasedPlacement' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataEntry, CurrentTokens) == 0x000020, "Member 'FWaxPlayerDataEntry::CurrentTokens' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataEntry, PreviousTokens) == 0x000024, "Member 'FWaxPlayerDataEntry::PreviousTokens' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataEntry, CurrentTeamTokens) == 0x000028, "Member 'FWaxPlayerDataEntry::CurrentTeamTokens' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataEntry, PreviousTeamTokens) == 0x00002C, "Member 'FWaxPlayerDataEntry::PreviousTeamTokens' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataEntry, CurrentKills) == 0x000030, "Member 'FWaxPlayerDataEntry::CurrentKills' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataEntry, PreviousKills) == 0x000034, "Member 'FWaxPlayerDataEntry::PreviousKills' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataEntry, CurrentLives) == 0x000038, "Member 'FWaxPlayerDataEntry::CurrentLives' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataEntry, PreviousVictimLocation) == 0x00003C, "Member 'FWaxPlayerDataEntry::PreviousVictimLocation' has a wrong offset!");

// ScriptStruct FortniteGame.MarkerID
// 0x0008 (0x0008 - 0x0000)
struct FMarkerID final
{
public:
	int32                                         PlayerID;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceId;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarkerID) == 0x000004, "Wrong alignment on FMarkerID");
static_assert(sizeof(FMarkerID) == 0x000008, "Wrong size on FMarkerID");
static_assert(offsetof(FMarkerID, PlayerID) == 0x000000, "Member 'FMarkerID::PlayerID' has a wrong offset!");
static_assert(offsetof(FMarkerID, InstanceId) == 0x000004, "Member 'FMarkerID::InstanceId' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerMarkerConfig
// 0x0040 (0x0040 - 0x0000)
struct FPlayerMarkerConfig final
{
public:
	float                                         DoubleClickTime;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowMarkerDetailsWidget;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateMarkerActors;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateMarkerWidgets;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampEnemyMarkers;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampItemMarkers;                                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLocationMarkersOnCompass;                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LocalPlaceableMarkersPerRate;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalPlaceableMarkersRechargeRate;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemotePlayableMarkerSoundsPerRate;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemotePlayableMarkerSoundsRechargeRate;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemotePlayableMarkerSoundsByPlayerIDPerRate;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemotePlayableMarkerSoundsByPlayerIDRechargeRate;  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemotePlayableMarkerSoundsByPlayerIDRechargeRateCap; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableDoubleClickAction;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableItemMarking;                                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableInteractionMarking;                          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenPercentageDistanceToShowMarkerInfo;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyMarkerTLL;                                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemMarkerTTL;                                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxItemMarkers;                                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEnemyMarkers;                                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerMarkerConfig) == 0x000004, "Wrong alignment on FPlayerMarkerConfig");
static_assert(sizeof(FPlayerMarkerConfig) == 0x000040, "Wrong size on FPlayerMarkerConfig");
static_assert(offsetof(FPlayerMarkerConfig, DoubleClickTime) == 0x000000, "Member 'FPlayerMarkerConfig::DoubleClickTime' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, bShowMarkerDetailsWidget) == 0x000004, "Member 'FPlayerMarkerConfig::bShowMarkerDetailsWidget' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, bCreateMarkerActors) == 0x000005, "Member 'FPlayerMarkerConfig::bCreateMarkerActors' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, bCreateMarkerWidgets) == 0x000006, "Member 'FPlayerMarkerConfig::bCreateMarkerWidgets' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, bClampEnemyMarkers) == 0x000007, "Member 'FPlayerMarkerConfig::bClampEnemyMarkers' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, bClampItemMarkers) == 0x000008, "Member 'FPlayerMarkerConfig::bClampItemMarkers' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, bShowLocationMarkersOnCompass) == 0x000009, "Member 'FPlayerMarkerConfig::bShowLocationMarkersOnCompass' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, LocalPlaceableMarkersPerRate) == 0x00000C, "Member 'FPlayerMarkerConfig::LocalPlaceableMarkersPerRate' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, LocalPlaceableMarkersRechargeRate) == 0x000010, "Member 'FPlayerMarkerConfig::LocalPlaceableMarkersRechargeRate' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, RemotePlayableMarkerSoundsPerRate) == 0x000014, "Member 'FPlayerMarkerConfig::RemotePlayableMarkerSoundsPerRate' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, RemotePlayableMarkerSoundsRechargeRate) == 0x000018, "Member 'FPlayerMarkerConfig::RemotePlayableMarkerSoundsRechargeRate' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, RemotePlayableMarkerSoundsByPlayerIDPerRate) == 0x00001C, "Member 'FPlayerMarkerConfig::RemotePlayableMarkerSoundsByPlayerIDPerRate' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, RemotePlayableMarkerSoundsByPlayerIDRechargeRate) == 0x000020, "Member 'FPlayerMarkerConfig::RemotePlayableMarkerSoundsByPlayerIDRechargeRate' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, RemotePlayableMarkerSoundsByPlayerIDRechargeRateCap) == 0x000024, "Member 'FPlayerMarkerConfig::RemotePlayableMarkerSoundsByPlayerIDRechargeRateCap' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, EnableDoubleClickAction) == 0x000028, "Member 'FPlayerMarkerConfig::EnableDoubleClickAction' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, EnableItemMarking) == 0x000029, "Member 'FPlayerMarkerConfig::EnableItemMarking' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, EnableInteractionMarking) == 0x00002A, "Member 'FPlayerMarkerConfig::EnableInteractionMarking' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, ScreenPercentageDistanceToShowMarkerInfo) == 0x00002C, "Member 'FPlayerMarkerConfig::ScreenPercentageDistanceToShowMarkerInfo' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, EnemyMarkerTLL) == 0x000030, "Member 'FPlayerMarkerConfig::EnemyMarkerTLL' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, ItemMarkerTTL) == 0x000034, "Member 'FPlayerMarkerConfig::ItemMarkerTTL' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, MaxItemMarkers) == 0x000038, "Member 'FPlayerMarkerConfig::MaxItemMarkers' has a wrong offset!");
static_assert(offsetof(FPlayerMarkerConfig, MaxEnemyMarkers) == 0x00003C, "Member 'FPlayerMarkerConfig::MaxEnemyMarkers' has a wrong offset!");

// ScriptStruct FortniteGame.RuntimeOptionDisabledGameplayMessage
// 0x0010 (0x0010 - 0x0000)
struct FRuntimeOptionDisabledGameplayMessage final
{
public:
	class FName                                   MessageOwnerClassName;                             // 0x0000(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MessageName;                                       // 0x0008(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeOptionDisabledGameplayMessage) == 0x000004, "Wrong alignment on FRuntimeOptionDisabledGameplayMessage");
static_assert(sizeof(FRuntimeOptionDisabledGameplayMessage) == 0x000010, "Wrong size on FRuntimeOptionDisabledGameplayMessage");
static_assert(offsetof(FRuntimeOptionDisabledGameplayMessage, MessageOwnerClassName) == 0x000000, "Member 'FRuntimeOptionDisabledGameplayMessage::MessageOwnerClassName' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionDisabledGameplayMessage, MessageName) == 0x000008, "Member 'FRuntimeOptionDisabledGameplayMessage::MessageName' has a wrong offset!");

// ScriptStruct FortniteGame.BoxNavInvoker
// 0x0020 (0x0020 - 0x0000)
struct FBoxNavInvoker final
{
public:
	class AAthenaNavInvokerBox*                   Invoker;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoxNavInvoker) == 0x000008, "Wrong alignment on FBoxNavInvoker");
static_assert(sizeof(FBoxNavInvoker) == 0x000020, "Wrong size on FBoxNavInvoker");
static_assert(offsetof(FBoxNavInvoker, Invoker) == 0x000000, "Member 'FBoxNavInvoker::Invoker' has a wrong offset!");

// ScriptStruct FortniteGame.RemoteViewRotSnapshotManager
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FRemoteViewRotSnapshotManager final
{
public:
	int32                                         BufferSize;                                        // 0x0000(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDelay;                                         // 0x0004(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVariableTimeDelay;                             // 0x0008(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VariableTimeDelayMultiplier;                       // 0x000C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBeforeDormant;                                 // 0x0010(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeedWhenNoSample;                           // 0x0014(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x30];                                      // 0x0018(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRemoteViewRotSnapshotManager) == 0x000008, "Wrong alignment on FRemoteViewRotSnapshotManager");
static_assert(sizeof(FRemoteViewRotSnapshotManager) == 0x000048, "Wrong size on FRemoteViewRotSnapshotManager");
static_assert(offsetof(FRemoteViewRotSnapshotManager, BufferSize) == 0x000000, "Member 'FRemoteViewRotSnapshotManager::BufferSize' has a wrong offset!");
static_assert(offsetof(FRemoteViewRotSnapshotManager, TimeDelay) == 0x000004, "Member 'FRemoteViewRotSnapshotManager::TimeDelay' has a wrong offset!");
static_assert(offsetof(FRemoteViewRotSnapshotManager, bUseVariableTimeDelay) == 0x000008, "Member 'FRemoteViewRotSnapshotManager::bUseVariableTimeDelay' has a wrong offset!");
static_assert(offsetof(FRemoteViewRotSnapshotManager, VariableTimeDelayMultiplier) == 0x00000C, "Member 'FRemoteViewRotSnapshotManager::VariableTimeDelayMultiplier' has a wrong offset!");
static_assert(offsetof(FRemoteViewRotSnapshotManager, TimeBeforeDormant) == 0x000010, "Member 'FRemoteViewRotSnapshotManager::TimeBeforeDormant' has a wrong offset!");
static_assert(offsetof(FRemoteViewRotSnapshotManager, InterpSpeedWhenNoSample) == 0x000014, "Member 'FRemoteViewRotSnapshotManager::InterpSpeedWhenNoSample' has a wrong offset!");

// ScriptStruct FortniteGame.GunGameGunEntry
// 0x0048 (0x0048 - 0x0000)
struct FGunGameGunEntry final
{
public:
	class UFortWeaponItemDefinition*              Weapon;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Enabled;                                           // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AwardAtElim;                                       // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunGameGunEntry) == 0x000008, "Wrong alignment on FGunGameGunEntry");
static_assert(sizeof(FGunGameGunEntry) == 0x000048, "Wrong size on FGunGameGunEntry");
static_assert(offsetof(FGunGameGunEntry, Weapon) == 0x000000, "Member 'FGunGameGunEntry::Weapon' has a wrong offset!");
static_assert(offsetof(FGunGameGunEntry, Enabled) == 0x000008, "Member 'FGunGameGunEntry::Enabled' has a wrong offset!");
static_assert(offsetof(FGunGameGunEntry, AwardAtElim) == 0x000028, "Member 'FGunGameGunEntry::AwardAtElim' has a wrong offset!");

// ScriptStruct FortniteGame.SavedSpectatorCameraState
// 0x0120 (0x0120 - 0x0000)
struct FSavedSpectatorCameraState final
{
public:
	bool                                          bDataIsValid;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpectatorCameraType                          CameraType;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       FollowedPlayerUniqueId;                            // 0x0008(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraFilmbackSettings                FilmbackSettings;                                  // 0x0030(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraLensSettings                    LensSettings;                                      // 0x003C(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraFocusSettings                   FocusSettings;                                     // 0x0058(0x0058)(NativeAccessSpecifierPublic)
	float                                         CurrentFocalLength;                                // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAperture;                                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoFocus;                                        // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentFocusDistance;                              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoExposure;                                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualExposureBias;                                // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x00D0(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ControlRotation;                                   // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ThirdPersonNormalizedDistance;                     // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EThirdPersonAutoFollowMode                    ThirdPersonAutoFollowMode;                         // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DroneSpeedIndex;                                   // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplayPlaybackSpeed;                               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNamePlatesEnabled;                                // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerOutlinesEnabled;                            // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThirdPersonCamCollide;                            // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollowDroneDoTest;                                // 0x011F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedSpectatorCameraState) == 0x000010, "Wrong alignment on FSavedSpectatorCameraState");
static_assert(sizeof(FSavedSpectatorCameraState) == 0x000120, "Wrong size on FSavedSpectatorCameraState");
static_assert(offsetof(FSavedSpectatorCameraState, bDataIsValid) == 0x000000, "Member 'FSavedSpectatorCameraState::bDataIsValid' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, CameraType) == 0x000001, "Member 'FSavedSpectatorCameraState::CameraType' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, FollowedPlayerUniqueId) == 0x000008, "Member 'FSavedSpectatorCameraState::FollowedPlayerUniqueId' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, FilmbackSettings) == 0x000030, "Member 'FSavedSpectatorCameraState::FilmbackSettings' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, LensSettings) == 0x00003C, "Member 'FSavedSpectatorCameraState::LensSettings' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, FocusSettings) == 0x000058, "Member 'FSavedSpectatorCameraState::FocusSettings' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, CurrentFocalLength) == 0x0000B0, "Member 'FSavedSpectatorCameraState::CurrentFocalLength' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, CurrentAperture) == 0x0000B4, "Member 'FSavedSpectatorCameraState::CurrentAperture' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, bAutoFocus) == 0x0000B8, "Member 'FSavedSpectatorCameraState::bAutoFocus' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, CurrentFocusDistance) == 0x0000BC, "Member 'FSavedSpectatorCameraState::CurrentFocusDistance' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, bAutoExposure) == 0x0000C0, "Member 'FSavedSpectatorCameraState::bAutoExposure' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, ManualExposureBias) == 0x0000C4, "Member 'FSavedSpectatorCameraState::ManualExposureBias' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, Transform) == 0x0000D0, "Member 'FSavedSpectatorCameraState::Transform' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, ControlRotation) == 0x000100, "Member 'FSavedSpectatorCameraState::ControlRotation' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, ThirdPersonNormalizedDistance) == 0x00010C, "Member 'FSavedSpectatorCameraState::ThirdPersonNormalizedDistance' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, ThirdPersonAutoFollowMode) == 0x000110, "Member 'FSavedSpectatorCameraState::ThirdPersonAutoFollowMode' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, DroneSpeedIndex) == 0x000114, "Member 'FSavedSpectatorCameraState::DroneSpeedIndex' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, ReplayPlaybackSpeed) == 0x000118, "Member 'FSavedSpectatorCameraState::ReplayPlaybackSpeed' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, bNamePlatesEnabled) == 0x00011C, "Member 'FSavedSpectatorCameraState::bNamePlatesEnabled' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, bPlayerOutlinesEnabled) == 0x00011D, "Member 'FSavedSpectatorCameraState::bPlayerOutlinesEnabled' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, bThirdPersonCamCollide) == 0x00011E, "Member 'FSavedSpectatorCameraState::bThirdPersonCamCollide' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraState, bFollowDroneDoTest) == 0x00011F, "Member 'FSavedSpectatorCameraState::bFollowDroneDoTest' has a wrong offset!");

// ScriptStruct FortniteGame.SavedSpectatorCameraShot
// 0x0160 (0x0160 - 0x0000)
struct FSavedSpectatorCameraShot final
{
public:
	struct FSavedSpectatorCameraState             CameraState;                                       // 0x0000(0x0120)(NativeAccessSpecifierPublic)
	bool                                          bIsShotStart;                                      // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timestamp;                                         // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotLength;                                        // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MESSAGE;                                           // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LocalisedMessage;                                  // 0x0140(0x0018)(Transient, NativeAccessSpecifierPublic)
	struct FNotificationUISettings                MessageUISettings;                                 // 0x0158(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedSpectatorCameraShot) == 0x000010, "Wrong alignment on FSavedSpectatorCameraShot");
static_assert(sizeof(FSavedSpectatorCameraShot) == 0x000160, "Wrong size on FSavedSpectatorCameraShot");
static_assert(offsetof(FSavedSpectatorCameraShot, CameraState) == 0x000000, "Member 'FSavedSpectatorCameraShot::CameraState' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraShot, bIsShotStart) == 0x000120, "Member 'FSavedSpectatorCameraShot::bIsShotStart' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraShot, Timestamp) == 0x000124, "Member 'FSavedSpectatorCameraShot::Timestamp' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraShot, ShotLength) == 0x000128, "Member 'FSavedSpectatorCameraShot::ShotLength' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraShot, MESSAGE) == 0x000130, "Member 'FSavedSpectatorCameraShot::MESSAGE' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraShot, LocalisedMessage) == 0x000140, "Member 'FSavedSpectatorCameraShot::LocalisedMessage' has a wrong offset!");
static_assert(offsetof(FSavedSpectatorCameraShot, MessageUISettings) == 0x000158, "Member 'FSavedSpectatorCameraShot::MessageUISettings' has a wrong offset!");

// ScriptStruct FortniteGame.SavedSpectatorCameras
// 0x0010 (0x0010 - 0x0000)
struct FSavedSpectatorCameras final
{
public:
	TArray<struct FSavedSpectatorCameraShot>      Shots;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedSpectatorCameras) == 0x000008, "Wrong alignment on FSavedSpectatorCameras");
static_assert(sizeof(FSavedSpectatorCameras) == 0x000010, "Wrong size on FSavedSpectatorCameras");
static_assert(offsetof(FSavedSpectatorCameras, Shots) == 0x000000, "Member 'FSavedSpectatorCameras::Shots' has a wrong offset!");

// ScriptStruct FortniteGame.CreativeSelectedActorInfo
// 0x0060 (0x0060 - 0x0000)
struct FCreativeSelectedActorInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorToSelectionAtDragStart;                       // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DragStartGridSnapPoint;                            // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalRelevancyDistance;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasCollisionEnabled;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasDormant;                                       // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0xE];                                       // 0x0052(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreativeSelectedActorInfo) == 0x000010, "Wrong alignment on FCreativeSelectedActorInfo");
static_assert(sizeof(FCreativeSelectedActorInfo) == 0x000060, "Wrong size on FCreativeSelectedActorInfo");
static_assert(offsetof(FCreativeSelectedActorInfo, Actor) == 0x000000, "Member 'FCreativeSelectedActorInfo::Actor' has a wrong offset!");
static_assert(offsetof(FCreativeSelectedActorInfo, ActorToSelectionAtDragStart) == 0x000010, "Member 'FCreativeSelectedActorInfo::ActorToSelectionAtDragStart' has a wrong offset!");
static_assert(offsetof(FCreativeSelectedActorInfo, DragStartGridSnapPoint) == 0x000040, "Member 'FCreativeSelectedActorInfo::DragStartGridSnapPoint' has a wrong offset!");
static_assert(offsetof(FCreativeSelectedActorInfo, OriginalRelevancyDistance) == 0x00004C, "Member 'FCreativeSelectedActorInfo::OriginalRelevancyDistance' has a wrong offset!");
static_assert(offsetof(FCreativeSelectedActorInfo, bWasCollisionEnabled) == 0x000050, "Member 'FCreativeSelectedActorInfo::bWasCollisionEnabled' has a wrong offset!");
static_assert(offsetof(FCreativeSelectedActorInfo, bWasDormant) == 0x000051, "Member 'FCreativeSelectedActorInfo::bWasDormant' has a wrong offset!");

// ScriptStruct FortniteGame.FlashCountedActorInfo
// 0x0018 (0x0018 - 0x0000)
struct FFlashCountedActorInfo final
{
public:
	TArray<struct FCreativeSelectedActorInfo>     Actors;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int8                                          FlashCounter;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlashCountedActorInfo) == 0x000008, "Wrong alignment on FFlashCountedActorInfo");
static_assert(sizeof(FFlashCountedActorInfo) == 0x000018, "Wrong size on FFlashCountedActorInfo");
static_assert(offsetof(FFlashCountedActorInfo, Actors) == 0x000000, "Member 'FFlashCountedActorInfo::Actors' has a wrong offset!");
static_assert(offsetof(FFlashCountedActorInfo, FlashCounter) == 0x000010, "Member 'FFlashCountedActorInfo::FlashCounter' has a wrong offset!");

// ScriptStruct FortniteGame.AlterationNamedExclusions
// 0x0010 (0x0018 - 0x0008)
struct FAlterationNamedExclusions final : public FTableRowBase
{
public:
	TArray<class FString>                         ExclusionNames;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlterationNamedExclusions) == 0x000008, "Wrong alignment on FAlterationNamedExclusions");
static_assert(sizeof(FAlterationNamedExclusions) == 0x000018, "Wrong size on FAlterationNamedExclusions");
static_assert(offsetof(FAlterationNamedExclusions, ExclusionNames) == 0x000008, "Member 'FAlterationNamedExclusions::ExclusionNames' has a wrong offset!");

// ScriptStruct FortniteGame.FortCurveSequenceInstanceInfo
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FFortCurveSequenceInstanceInfo
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCurveSequenceInstanceInfo) == 0x000004, "Wrong alignment on FFortCurveSequenceInstanceInfo");
static_assert(sizeof(FFortCurveSequenceInstanceInfo) == 0x000004, "Wrong size on FFortCurveSequenceInstanceInfo");

// ScriptStruct FortniteGame.BuildingSupportCellIndex
// 0x000C (0x000C - 0x0000)
struct FBuildingSupportCellIndex final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingSupportCellIndex) == 0x000004, "Wrong alignment on FBuildingSupportCellIndex");
static_assert(sizeof(FBuildingSupportCellIndex) == 0x00000C, "Wrong size on FBuildingSupportCellIndex");
static_assert(offsetof(FBuildingSupportCellIndex, X) == 0x000000, "Member 'FBuildingSupportCellIndex::X' has a wrong offset!");
static_assert(offsetof(FBuildingSupportCellIndex, Y) == 0x000004, "Member 'FBuildingSupportCellIndex::Y' has a wrong offset!");
static_assert(offsetof(FBuildingSupportCellIndex, Z) == 0x000008, "Member 'FBuildingSupportCellIndex::Z' has a wrong offset!");

// ScriptStruct FortniteGame.NeighboringWallInfo
// 0x0018 (0x0018 - 0x0000)
struct FNeighboringWallInfo final
{
public:
	TWeakObjectPtr<class ABuildingSMActor>        NeighboringActor;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuildingSupportCellIndex              NeighboringCellIdx;                                // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStructuralWallPosition                       WallPosition;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNeighboringWallInfo) == 0x000004, "Wrong alignment on FNeighboringWallInfo");
static_assert(sizeof(FNeighboringWallInfo) == 0x000018, "Wrong size on FNeighboringWallInfo");
static_assert(offsetof(FNeighboringWallInfo, NeighboringActor) == 0x000000, "Member 'FNeighboringWallInfo::NeighboringActor' has a wrong offset!");
static_assert(offsetof(FNeighboringWallInfo, NeighboringCellIdx) == 0x000008, "Member 'FNeighboringWallInfo::NeighboringCellIdx' has a wrong offset!");
static_assert(offsetof(FNeighboringWallInfo, WallPosition) == 0x000014, "Member 'FNeighboringWallInfo::WallPosition' has a wrong offset!");

// ScriptStruct FortniteGame.FortCreativeWhitelistUserEntry
// 0x0020 (0x0020 - 0x0000)
struct FFortCreativeWhitelistUserEntry final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCreativeWhitelistUserEntry) == 0x000008, "Wrong alignment on FFortCreativeWhitelistUserEntry");
static_assert(sizeof(FFortCreativeWhitelistUserEntry) == 0x000020, "Wrong size on FFortCreativeWhitelistUserEntry");
static_assert(offsetof(FFortCreativeWhitelistUserEntry, UniqueId) == 0x000000, "Member 'FFortCreativeWhitelistUserEntry::UniqueId' has a wrong offset!");
static_assert(offsetof(FFortCreativeWhitelistUserEntry, UserName) == 0x000010, "Member 'FFortCreativeWhitelistUserEntry::UserName' has a wrong offset!");

// ScriptStruct FortniteGame.FortMoveConfig
// 0x0028 (0x0028 - 0x0000)
struct FFortMoveConfig final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FocusTarget;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortPawn>                  PushPawnClassOnBump;                               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMoveConfig) == 0x000008, "Wrong alignment on FFortMoveConfig");
static_assert(sizeof(FFortMoveConfig) == 0x000028, "Wrong size on FFortMoveConfig");
static_assert(offsetof(FFortMoveConfig, FocusTarget) == 0x000018, "Member 'FFortMoveConfig::FocusTarget' has a wrong offset!");
static_assert(offsetof(FFortMoveConfig, PushPawnClassOnBump) == 0x000020, "Member 'FFortMoveConfig::PushPawnClassOnBump' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyCMSSurveyKey
// 0x0010 (0x0010 - 0x0000)
struct FFortPlayerSurveyCMSSurveyKey final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortPlayerSurveyCMSSurveyKey) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSSurveyKey");
static_assert(sizeof(FFortPlayerSurveyCMSSurveyKey) == 0x000010, "Wrong size on FFortPlayerSurveyCMSSurveyKey");
static_assert(offsetof(FFortPlayerSurveyCMSSurveyKey, ID) == 0x000000, "Member 'FFortPlayerSurveyCMSSurveyKey::ID' has a wrong offset!");

// ScriptStruct FortniteGame.SavedPlayerSpectatorCameraData
// 0x0050 (0x0050 - 0x0000)
struct FSavedPlayerSpectatorCameraData final
{
public:
	TMap<struct FUniqueNetIdRepl, struct FSavedSpectatorCameraState> PlayerToCameraStateMap;                            // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedPlayerSpectatorCameraData) == 0x000008, "Wrong alignment on FSavedPlayerSpectatorCameraData");
static_assert(sizeof(FSavedPlayerSpectatorCameraData) == 0x000050, "Wrong size on FSavedPlayerSpectatorCameraData");
static_assert(offsetof(FSavedPlayerSpectatorCameraData, PlayerToCameraStateMap) == 0x000000, "Member 'FSavedPlayerSpectatorCameraData::PlayerToCameraStateMap' has a wrong offset!");

// ScriptStruct FortniteGame.FortActorRecord
// 0x0070 (0x0070 - 0x0000)
struct FFortActorRecord final
{
public:
	struct FGuid                                  ActorGuid;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingPersistentState                  ActorState;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ABuildingActor>             ActorClass;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ActorTransform;                                    // 0x0020(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSpawnedActor;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ActorData;                                         // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActorRecord) == 0x000010, "Wrong alignment on FFortActorRecord");
static_assert(sizeof(FFortActorRecord) == 0x000070, "Wrong size on FFortActorRecord");
static_assert(offsetof(FFortActorRecord, ActorGuid) == 0x000000, "Member 'FFortActorRecord::ActorGuid' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorState) == 0x000010, "Member 'FFortActorRecord::ActorState' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorClass) == 0x000018, "Member 'FFortActorRecord::ActorClass' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorTransform) == 0x000020, "Member 'FFortActorRecord::ActorTransform' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, bSpawnedActor) == 0x000050, "Member 'FFortActorRecord::bSpawnedActor' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorData) == 0x000058, "Member 'FFortActorRecord::ActorData' has a wrong offset!");

// ScriptStruct FortniteGame.PartyFailureLogSubmitReason
// 0x0020 (0x0020 - 0x0000)
struct FPartyFailureLogSubmitReason final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubReason;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyFailureLogSubmitReason) == 0x000008, "Wrong alignment on FPartyFailureLogSubmitReason");
static_assert(sizeof(FPartyFailureLogSubmitReason) == 0x000020, "Wrong size on FPartyFailureLogSubmitReason");
static_assert(offsetof(FPartyFailureLogSubmitReason, Reason) == 0x000000, "Member 'FPartyFailureLogSubmitReason::Reason' has a wrong offset!");
static_assert(offsetof(FPartyFailureLogSubmitReason, SubReason) == 0x000010, "Member 'FPartyFailureLogSubmitReason::SubReason' has a wrong offset!");

// ScriptStruct FortniteGame.PartyFailureLogSubmit
// 0x0020 (0x0020 - 0x0000)
struct FPartyFailureLogSubmit final
{
public:
	bool                                          bSubmitLogs;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LogTailKb;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogSubmitChance;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPartyFailureLogSubmitReason>   Reasons;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyFailureLogSubmit) == 0x000008, "Wrong alignment on FPartyFailureLogSubmit");
static_assert(sizeof(FPartyFailureLogSubmit) == 0x000020, "Wrong size on FPartyFailureLogSubmit");
static_assert(offsetof(FPartyFailureLogSubmit, bSubmitLogs) == 0x000000, "Member 'FPartyFailureLogSubmit::bSubmitLogs' has a wrong offset!");
static_assert(offsetof(FPartyFailureLogSubmit, LogTailKb) == 0x000004, "Member 'FPartyFailureLogSubmit::LogTailKb' has a wrong offset!");
static_assert(offsetof(FPartyFailureLogSubmit, LogSubmitChance) == 0x000008, "Member 'FPartyFailureLogSubmit::LogSubmitChance' has a wrong offset!");
static_assert(offsetof(FPartyFailureLogSubmit, Reasons) == 0x000010, "Member 'FPartyFailureLogSubmit::Reasons' has a wrong offset!");

// ScriptStruct FortniteGame.TrackConnectorMeshConfig
// 0x0010 (0x0010 - 0x0000)
struct FTrackConnectorMeshConfig final
{
public:
	ETrackIncline                                 InclineSideA;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackIncline                                 InclineSideB;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackConnectorMeshConfig) == 0x000008, "Wrong alignment on FTrackConnectorMeshConfig");
static_assert(sizeof(FTrackConnectorMeshConfig) == 0x000010, "Wrong size on FTrackConnectorMeshConfig");
static_assert(offsetof(FTrackConnectorMeshConfig, InclineSideA) == 0x000000, "Member 'FTrackConnectorMeshConfig::InclineSideA' has a wrong offset!");
static_assert(offsetof(FTrackConnectorMeshConfig, InclineSideB) == 0x000001, "Member 'FTrackConnectorMeshConfig::InclineSideB' has a wrong offset!");
static_assert(offsetof(FTrackConnectorMeshConfig, Mesh) == 0x000008, "Member 'FTrackConnectorMeshConfig::Mesh' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnLootDropData
// 0x001C (0x001C - 0x0000)
struct FFortAIPawnLootDropData final
{
public:
	float                                         LootDropChance;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldItemTierGroup;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldItemInstancedTierGroup;                       // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccountItemTierGroup;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIPawnLootDropData) == 0x000004, "Wrong alignment on FFortAIPawnLootDropData");
static_assert(sizeof(FFortAIPawnLootDropData) == 0x00001C, "Wrong size on FFortAIPawnLootDropData");
static_assert(offsetof(FFortAIPawnLootDropData, LootDropChance) == 0x000000, "Member 'FFortAIPawnLootDropData::LootDropChance' has a wrong offset!");
static_assert(offsetof(FFortAIPawnLootDropData, WorldItemTierGroup) == 0x000004, "Member 'FFortAIPawnLootDropData::WorldItemTierGroup' has a wrong offset!");
static_assert(offsetof(FFortAIPawnLootDropData, WorldItemInstancedTierGroup) == 0x00000C, "Member 'FFortAIPawnLootDropData::WorldItemInstancedTierGroup' has a wrong offset!");
static_assert(offsetof(FFortAIPawnLootDropData, AccountItemTierGroup) == 0x000014, "Member 'FFortAIPawnLootDropData::AccountItemTierGroup' has a wrong offset!");

// ScriptStruct FortniteGame.PendingSpawnInfo
// 0x0158 (0x0158 - 0x0000)
struct FPendingSpawnInfo final
{
public:
	TSubclassOf<class AFortAIPawn>                PawnClassToSpawn;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnPoint;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnSource;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnedFromExternalSpawner;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnSetIndex;                                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortressAIType                               AIType;                                            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  TargetPlayer;                                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   EncounterInfo;                                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyLevel;                                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SpawnGroupGuid;                                    // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyIndexInSpawnGroup;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToSpawn;                                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PendingSpawnInfoGuid;                              // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollision;                                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKillBuildingActorsAtSpawnLocation;                // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EncounterAILifespan;                               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreMultiplier;                                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugSpawnedAI;                                   // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAbilitySet*>                AbilitySetsToGrantOnSpawn;                         // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortGameplayModifierItemDefinition*> ModifiersToApplyOnSpawn;                           // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortAISpawnGroupUpgradeUIData         UpgradeUIData;                                     // 0x00B8(0x0080)(NativeAccessSpecifierPublic)
	struct FFortAIPawnLootDropData                LootDropData;                                      // 0x0138(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPendingSpawnInfo) == 0x000008, "Wrong alignment on FPendingSpawnInfo");
static_assert(sizeof(FPendingSpawnInfo) == 0x000158, "Wrong size on FPendingSpawnInfo");
static_assert(offsetof(FPendingSpawnInfo, PawnClassToSpawn) == 0x000000, "Member 'FPendingSpawnInfo::PawnClassToSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnPoint) == 0x000008, "Member 'FPendingSpawnInfo::SpawnPoint' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnLocation) == 0x000010, "Member 'FPendingSpawnInfo::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnRotation) == 0x00001C, "Member 'FPendingSpawnInfo::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnSource) == 0x000028, "Member 'FPendingSpawnInfo::SpawnSource' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bSpawnedFromExternalSpawner) == 0x000030, "Member 'FPendingSpawnInfo::bSpawnedFromExternalSpawner' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnSetIndex) == 0x000034, "Member 'FPendingSpawnInfo::SpawnSetIndex' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, AIType) == 0x000038, "Member 'FPendingSpawnInfo::AIType' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, TargetPlayer) == 0x000040, "Member 'FPendingSpawnInfo::TargetPlayer' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EncounterInfo) == 0x000048, "Member 'FPendingSpawnInfo::EncounterInfo' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, DifficultyLevel) == 0x000050, "Member 'FPendingSpawnInfo::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnGroup) == 0x000058, "Member 'FPendingSpawnInfo::SpawnGroup' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnGroupGuid) == 0x000060, "Member 'FPendingSpawnInfo::SpawnGroupGuid' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EnemyIndexInSpawnGroup) == 0x000070, "Member 'FPendingSpawnInfo::EnemyIndexInSpawnGroup' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, TimeToSpawn) == 0x000074, "Member 'FPendingSpawnInfo::TimeToSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, PendingSpawnInfoGuid) == 0x000078, "Member 'FPendingSpawnInfo::PendingSpawnInfoGuid' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bIgnoreCollision) == 0x000088, "Member 'FPendingSpawnInfo::bIgnoreCollision' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bKillBuildingActorsAtSpawnLocation) == 0x000089, "Member 'FPendingSpawnInfo::bKillBuildingActorsAtSpawnLocation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EncounterAILifespan) == 0x00008C, "Member 'FPendingSpawnInfo::EncounterAILifespan' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, ScoreMultiplier) == 0x000090, "Member 'FPendingSpawnInfo::ScoreMultiplier' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bDebugSpawnedAI) == 0x000094, "Member 'FPendingSpawnInfo::bDebugSpawnedAI' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, AbilitySetsToGrantOnSpawn) == 0x000098, "Member 'FPendingSpawnInfo::AbilitySetsToGrantOnSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, ModifiersToApplyOnSpawn) == 0x0000A8, "Member 'FPendingSpawnInfo::ModifiersToApplyOnSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, UpgradeUIData) == 0x0000B8, "Member 'FPendingSpawnInfo::UpgradeUIData' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, LootDropData) == 0x000138, "Member 'FPendingSpawnInfo::LootDropData' has a wrong offset!");

// ScriptStruct FortniteGame.SubGameAccess
// 0x0003 (0x0003 - 0x0000)
struct FSubGameAccess final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubGameAccessStatus                          AccessStatus;                                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubGameMatchmakingStatus                     MatchmakingStatus;                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubGameAccess) == 0x000001, "Wrong alignment on FSubGameAccess");
static_assert(sizeof(FSubGameAccess) == 0x000003, "Wrong size on FSubGameAccess");
static_assert(offsetof(FSubGameAccess, SubGame) == 0x000000, "Member 'FSubGameAccess::SubGame' has a wrong offset!");
static_assert(offsetof(FSubGameAccess, AccessStatus) == 0x000001, "Member 'FSubGameAccess::AccessStatus' has a wrong offset!");
static_assert(offsetof(FSubGameAccess, MatchmakingStatus) == 0x000002, "Member 'FSubGameAccess::MatchmakingStatus' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyAnswerContainerChangeEventInfo
// 0x0001 (0x0001 - 0x0000)
struct FFortPlayerSurveyAnswerContainerChangeEventInfo final
{
public:
	EFortPlayerSurveyAnswerContainerChangeReason  Reason;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnswerContainerChangeEventInfo) == 0x000001, "Wrong alignment on FFortPlayerSurveyAnswerContainerChangeEventInfo");
static_assert(sizeof(FFortPlayerSurveyAnswerContainerChangeEventInfo) == 0x000001, "Wrong size on FFortPlayerSurveyAnswerContainerChangeEventInfo");
static_assert(offsetof(FFortPlayerSurveyAnswerContainerChangeEventInfo, Reason) == 0x000000, "Member 'FFortPlayerSurveyAnswerContainerChangeEventInfo::Reason' has a wrong offset!");

// ScriptStruct FortniteGame.GlyphRewardInfo
// 0x0010 (0x0018 - 0x0008)
struct FGlyphRewardInfo final : public FTableRowBase
{
public:
	class UFortChallengeBundleItemDefinition*     BundleDef;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortQuestItemDefinition*               QuestDef;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlyphRewardInfo) == 0x000008, "Wrong alignment on FGlyphRewardInfo");
static_assert(sizeof(FGlyphRewardInfo) == 0x000018, "Wrong size on FGlyphRewardInfo");
static_assert(offsetof(FGlyphRewardInfo, BundleDef) == 0x000008, "Member 'FGlyphRewardInfo::BundleDef' has a wrong offset!");
static_assert(offsetof(FGlyphRewardInfo, QuestDef) == 0x000010, "Member 'FGlyphRewardInfo::QuestDef' has a wrong offset!");

// ScriptStruct FortniteGame.NeighboringCenterCellInfo
// 0x0014 (0x0014 - 0x0000)
struct FNeighboringCenterCellInfo final
{
public:
	TWeakObjectPtr<class ABuildingSMActor>        NeighboringActor;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuildingSupportCellIndex              NeighboringCellIdx;                                // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNeighboringCenterCellInfo) == 0x000004, "Wrong alignment on FNeighboringCenterCellInfo");
static_assert(sizeof(FNeighboringCenterCellInfo) == 0x000014, "Wrong size on FNeighboringCenterCellInfo");
static_assert(offsetof(FNeighboringCenterCellInfo, NeighboringActor) == 0x000000, "Member 'FNeighboringCenterCellInfo::NeighboringActor' has a wrong offset!");
static_assert(offsetof(FNeighboringCenterCellInfo, NeighboringCellIdx) == 0x000008, "Member 'FNeighboringCenterCellInfo::NeighboringCellIdx' has a wrong offset!");

// ScriptStruct FortniteGame.NeighboringFloorInfo
// 0x0018 (0x0018 - 0x0000)
struct FNeighboringFloorInfo final
{
public:
	TWeakObjectPtr<class ABuildingSMActor>        NeighboringActor;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuildingSupportCellIndex              NeighboringCellIdx;                                // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStructuralFloorPosition                      FloorPosition;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNeighboringFloorInfo) == 0x000004, "Wrong alignment on FNeighboringFloorInfo");
static_assert(sizeof(FNeighboringFloorInfo) == 0x000018, "Wrong size on FNeighboringFloorInfo");
static_assert(offsetof(FNeighboringFloorInfo, NeighboringActor) == 0x000000, "Member 'FNeighboringFloorInfo::NeighboringActor' has a wrong offset!");
static_assert(offsetof(FNeighboringFloorInfo, NeighboringCellIdx) == 0x000008, "Member 'FNeighboringFloorInfo::NeighboringCellIdx' has a wrong offset!");
static_assert(offsetof(FNeighboringFloorInfo, FloorPosition) == 0x000014, "Member 'FNeighboringFloorInfo::FloorPosition' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingNeighboringActorInfo
// 0x0030 (0x0030 - 0x0000)
struct FBuildingNeighboringActorInfo final
{
public:
	TArray<struct FNeighboringWallInfo>           NeighboringWallInfos;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNeighboringFloorInfo>          NeighboringFloorInfos;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNeighboringCenterCellInfo>     NeighboringCenterCellInfos;                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingNeighboringActorInfo) == 0x000008, "Wrong alignment on FBuildingNeighboringActorInfo");
static_assert(sizeof(FBuildingNeighboringActorInfo) == 0x000030, "Wrong size on FBuildingNeighboringActorInfo");
static_assert(offsetof(FBuildingNeighboringActorInfo, NeighboringWallInfos) == 0x000000, "Member 'FBuildingNeighboringActorInfo::NeighboringWallInfos' has a wrong offset!");
static_assert(offsetof(FBuildingNeighboringActorInfo, NeighboringFloorInfos) == 0x000010, "Member 'FBuildingNeighboringActorInfo::NeighboringFloorInfos' has a wrong offset!");
static_assert(offsetof(FBuildingNeighboringActorInfo, NeighboringCenterCellInfos) == 0x000020, "Member 'FBuildingNeighboringActorInfo::NeighboringCenterCellInfos' has a wrong offset!");

// ScriptStruct FortniteGame.SpectatorCameraSettings
// 0x0018 (0x0018 - 0x0000)
struct FSpectatorCameraSettings final
{
public:
	bool                                          bPlayerOutlinesEnabled;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStormEffectsEnabled;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SafeZoneOpacity;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevancyZoneVisible;                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighQualityFxEnabled;                             // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageFxEnabled;                                  // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EThirdPersonAutoFollowMode                    ThirdPersonAutoFollowMode;                         // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThirdPersonDistanceToSubject;                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThirdPersonCameraCollision;                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShareLensSettings;                                // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDroneIgnoreJump;                                  // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleMapShowTimeIndicator;                       // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleMapShowNearbyChests;                        // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleMapShowAllSquadMembers;                     // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleMapAutomaticCameraPlacement;                // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpectatorCameraSettings) == 0x000004, "Wrong alignment on FSpectatorCameraSettings");
static_assert(sizeof(FSpectatorCameraSettings) == 0x000018, "Wrong size on FSpectatorCameraSettings");
static_assert(offsetof(FSpectatorCameraSettings, bPlayerOutlinesEnabled) == 0x000000, "Member 'FSpectatorCameraSettings::bPlayerOutlinesEnabled' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, bStormEffectsEnabled) == 0x000001, "Member 'FSpectatorCameraSettings::bStormEffectsEnabled' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, SafeZoneOpacity) == 0x000004, "Member 'FSpectatorCameraSettings::SafeZoneOpacity' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, bRelevancyZoneVisible) == 0x000008, "Member 'FSpectatorCameraSettings::bRelevancyZoneVisible' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, bHighQualityFxEnabled) == 0x000009, "Member 'FSpectatorCameraSettings::bHighQualityFxEnabled' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, bDamageFxEnabled) == 0x00000A, "Member 'FSpectatorCameraSettings::bDamageFxEnabled' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, ThirdPersonAutoFollowMode) == 0x00000B, "Member 'FSpectatorCameraSettings::ThirdPersonAutoFollowMode' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, ThirdPersonDistanceToSubject) == 0x00000C, "Member 'FSpectatorCameraSettings::ThirdPersonDistanceToSubject' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, bThirdPersonCameraCollision) == 0x000010, "Member 'FSpectatorCameraSettings::bThirdPersonCameraCollision' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, bShareLensSettings) == 0x000011, "Member 'FSpectatorCameraSettings::bShareLensSettings' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, bDroneIgnoreJump) == 0x000012, "Member 'FSpectatorCameraSettings::bDroneIgnoreJump' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, bBattleMapShowTimeIndicator) == 0x000013, "Member 'FSpectatorCameraSettings::bBattleMapShowTimeIndicator' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, bBattleMapShowNearbyChests) == 0x000014, "Member 'FSpectatorCameraSettings::bBattleMapShowNearbyChests' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, bBattleMapShowAllSquadMembers) == 0x000015, "Member 'FSpectatorCameraSettings::bBattleMapShowAllSquadMembers' has a wrong offset!");
static_assert(offsetof(FSpectatorCameraSettings, bBattleMapAutomaticCameraPlacement) == 0x000016, "Member 'FSpectatorCameraSettings::bBattleMapAutomaticCameraPlacement' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyAnswer
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFortPlayerSurveyAnswer final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyAnswer) == 0x000008, "Wrong alignment on FFortPlayerSurveyAnswer");
static_assert(sizeof(FFortPlayerSurveyAnswer) == 0x000020, "Wrong size on FFortPlayerSurveyAnswer");

// ScriptStruct FortniteGame.PartyMemberCampaignHero
// 0x0038 (0x0038 - 0x0000)
struct FPartyMemberCampaignHero final
{
public:
	class FString                                 HeroItemInstanceId;                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortHeroType>           HeroType;                                          // 0x0010(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyMemberCampaignHero) == 0x000008, "Wrong alignment on FPartyMemberCampaignHero");
static_assert(sizeof(FPartyMemberCampaignHero) == 0x000038, "Wrong size on FPartyMemberCampaignHero");
static_assert(offsetof(FPartyMemberCampaignHero, HeroItemInstanceId) == 0x000000, "Member 'FPartyMemberCampaignHero::HeroItemInstanceId' has a wrong offset!");
static_assert(offsetof(FPartyMemberCampaignHero, HeroType) == 0x000010, "Member 'FPartyMemberCampaignHero::HeroType' has a wrong offset!");

// ScriptStruct FortniteGame.PartyMemberFrontendEmote
// 0x0040 (0x0040 - 0x0000)
struct FPartyMemberFrontendEmote final
{
public:
	TSoftObjectPtr<class UFortMontageItemDefinitionBase> EmoteItemDef;                                      // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmoteEKey;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          EmoteSection;                                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyMemberFrontendEmote) == 0x000008, "Wrong alignment on FPartyMemberFrontendEmote");
static_assert(sizeof(FPartyMemberFrontendEmote) == 0x000040, "Wrong size on FPartyMemberFrontendEmote");
static_assert(offsetof(FPartyMemberFrontendEmote, EmoteItemDef) == 0x000000, "Member 'FPartyMemberFrontendEmote::EmoteItemDef' has a wrong offset!");
static_assert(offsetof(FPartyMemberFrontendEmote, EmoteEKey) == 0x000028, "Member 'FPartyMemberFrontendEmote::EmoteEKey' has a wrong offset!");
static_assert(offsetof(FPartyMemberFrontendEmote, EmoteSection) == 0x000038, "Member 'FPartyMemberFrontendEmote::EmoteSection' has a wrong offset!");

// ScriptStruct FortniteGame.PartyMemberAssistedChallengeInfo
// 0x0010 (0x0010 - 0x0000)
struct FPartyMemberAssistedChallengeInfo final
{
public:
	class UFortQuestItemDefinition*               QuestItemDef;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectivesCompleted;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyMemberAssistedChallengeInfo) == 0x000008, "Wrong alignment on FPartyMemberAssistedChallengeInfo");
static_assert(sizeof(FPartyMemberAssistedChallengeInfo) == 0x000010, "Wrong size on FPartyMemberAssistedChallengeInfo");
static_assert(offsetof(FPartyMemberAssistedChallengeInfo, QuestItemDef) == 0x000000, "Member 'FPartyMemberAssistedChallengeInfo::QuestItemDef' has a wrong offset!");
static_assert(offsetof(FPartyMemberAssistedChallengeInfo, ObjectivesCompleted) == 0x000008, "Member 'FPartyMemberAssistedChallengeInfo::ObjectivesCompleted' has a wrong offset!");

// ScriptStruct FortniteGame.PartyMemberSquadAssignmentRequest
// 0x0038 (0x0038 - 0x0000)
struct FPartyMemberSquadAssignmentRequest final
{
public:
	int32                                         StartingAbsoluteIdx;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TargetAbsoluteIdx;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FUniqueNetIdRepl                       SwapTargetMemberId;                                // 0x0008(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Version;                                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyMemberSquadAssignmentRequest) == 0x000008, "Wrong alignment on FPartyMemberSquadAssignmentRequest");
static_assert(sizeof(FPartyMemberSquadAssignmentRequest) == 0x000038, "Wrong size on FPartyMemberSquadAssignmentRequest");
static_assert(offsetof(FPartyMemberSquadAssignmentRequest, StartingAbsoluteIdx) == 0x000000, "Member 'FPartyMemberSquadAssignmentRequest::StartingAbsoluteIdx' has a wrong offset!");
static_assert(offsetof(FPartyMemberSquadAssignmentRequest, TargetAbsoluteIdx) == 0x000004, "Member 'FPartyMemberSquadAssignmentRequest::TargetAbsoluteIdx' has a wrong offset!");
static_assert(offsetof(FPartyMemberSquadAssignmentRequest, SwapTargetMemberId) == 0x000008, "Member 'FPartyMemberSquadAssignmentRequest::SwapTargetMemberId' has a wrong offset!");
static_assert(offsetof(FPartyMemberSquadAssignmentRequest, Version) == 0x000030, "Member 'FPartyMemberSquadAssignmentRequest::Version' has a wrong offset!");

// ScriptStruct FortniteGame.PartyVariantRep
// 0x0028 (0x0028 - 0x0000)
struct FPartyVariantRep final
{
public:
	EFortItemType                                 Item;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Channel;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Variant;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyVariantRep) == 0x000008, "Wrong alignment on FPartyVariantRep");
static_assert(sizeof(FPartyVariantRep) == 0x000028, "Wrong size on FPartyVariantRep");
static_assert(offsetof(FPartyVariantRep, Item) == 0x000000, "Member 'FPartyVariantRep::Item' has a wrong offset!");
static_assert(offsetof(FPartyVariantRep, Channel) == 0x000008, "Member 'FPartyVariantRep::Channel' has a wrong offset!");
static_assert(offsetof(FPartyVariantRep, Variant) == 0x000018, "Member 'FPartyVariantRep::Variant' has a wrong offset!");

// ScriptStruct FortniteGame.PartyMemberCosmeticLoadout
// 0x00C8 (0x00C8 - 0x0000)
struct FPartyMemberCosmeticLoadout final
{
public:
	TSoftObjectPtr<class UAthenaCharacterItemDefinition> CharacterDef;                                      // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterEKey;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAthenaBackpackItemDefinition> BackpackDef;                                       // 0x0038(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackpackEKey;                                      // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAthenaPickaxeItemDefinition> PickaxeDef;                                        // 0x0070(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PickaxeEKey;                                       // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMcpVariantChannelInfo>         CosmeticVariants;                                  // 0x00A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FPartyVariantRep>               Variants;                                          // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPartyMemberCosmeticLoadout) == 0x000008, "Wrong alignment on FPartyMemberCosmeticLoadout");
static_assert(sizeof(FPartyMemberCosmeticLoadout) == 0x0000C8, "Wrong size on FPartyMemberCosmeticLoadout");
static_assert(offsetof(FPartyMemberCosmeticLoadout, CharacterDef) == 0x000000, "Member 'FPartyMemberCosmeticLoadout::CharacterDef' has a wrong offset!");
static_assert(offsetof(FPartyMemberCosmeticLoadout, CharacterEKey) == 0x000028, "Member 'FPartyMemberCosmeticLoadout::CharacterEKey' has a wrong offset!");
static_assert(offsetof(FPartyMemberCosmeticLoadout, BackpackDef) == 0x000038, "Member 'FPartyMemberCosmeticLoadout::BackpackDef' has a wrong offset!");
static_assert(offsetof(FPartyMemberCosmeticLoadout, BackpackEKey) == 0x000060, "Member 'FPartyMemberCosmeticLoadout::BackpackEKey' has a wrong offset!");
static_assert(offsetof(FPartyMemberCosmeticLoadout, PickaxeDef) == 0x000070, "Member 'FPartyMemberCosmeticLoadout::PickaxeDef' has a wrong offset!");
static_assert(offsetof(FPartyMemberCosmeticLoadout, PickaxeEKey) == 0x000098, "Member 'FPartyMemberCosmeticLoadout::PickaxeEKey' has a wrong offset!");
static_assert(offsetof(FPartyMemberCosmeticLoadout, CosmeticVariants) == 0x0000A8, "Member 'FPartyMemberCosmeticLoadout::CosmeticVariants' has a wrong offset!");
static_assert(offsetof(FPartyMemberCosmeticLoadout, Variants) == 0x0000B8, "Member 'FPartyMemberCosmeticLoadout::Variants' has a wrong offset!");

// ScriptStruct FortniteGame.PartyMemberAthenaBannerInfo
// 0x0028 (0x0028 - 0x0000)
struct FPartyMemberAthenaBannerInfo final
{
public:
	class FString                                 BannerIconId;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerColorId;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonLevel;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyMemberAthenaBannerInfo) == 0x000008, "Wrong alignment on FPartyMemberAthenaBannerInfo");
static_assert(sizeof(FPartyMemberAthenaBannerInfo) == 0x000028, "Wrong size on FPartyMemberAthenaBannerInfo");
static_assert(offsetof(FPartyMemberAthenaBannerInfo, BannerIconId) == 0x000000, "Member 'FPartyMemberAthenaBannerInfo::BannerIconId' has a wrong offset!");
static_assert(offsetof(FPartyMemberAthenaBannerInfo, BannerColorId) == 0x000010, "Member 'FPartyMemberAthenaBannerInfo::BannerColorId' has a wrong offset!");
static_assert(offsetof(FPartyMemberAthenaBannerInfo, SeasonLevel) == 0x000020, "Member 'FPartyMemberAthenaBannerInfo::SeasonLevel' has a wrong offset!");

// ScriptStruct FortniteGame.PartyMemberBattlePassInfo
// 0x0010 (0x0010 - 0x0000)
struct FPartyMemberBattlePassInfo final
{
public:
	bool                                          bHasPurchasedPass;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PassLevel;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelfBoostXp;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendBoostXp;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyMemberBattlePassInfo) == 0x000004, "Wrong alignment on FPartyMemberBattlePassInfo");
static_assert(sizeof(FPartyMemberBattlePassInfo) == 0x000010, "Wrong size on FPartyMemberBattlePassInfo");
static_assert(offsetof(FPartyMemberBattlePassInfo, bHasPurchasedPass) == 0x000000, "Member 'FPartyMemberBattlePassInfo::bHasPurchasedPass' has a wrong offset!");
static_assert(offsetof(FPartyMemberBattlePassInfo, PassLevel) == 0x000004, "Member 'FPartyMemberBattlePassInfo::PassLevel' has a wrong offset!");
static_assert(offsetof(FPartyMemberBattlePassInfo, SelfBoostXp) == 0x000008, "Member 'FPartyMemberBattlePassInfo::SelfBoostXp' has a wrong offset!");
static_assert(offsetof(FPartyMemberBattlePassInfo, FriendBoostXp) == 0x00000C, "Member 'FPartyMemberBattlePassInfo::FriendBoostXp' has a wrong offset!");

// ScriptStruct FortniteGame.FortPartyMemberRepData
// 0x05B8 (0x06E8 - 0x0130)
struct FFortPartyMemberRepData : public FPartyMemberRepData
{
public:
	EFortPartyMemberLocation                      Location;                                          // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x37];                                     // 0x0131(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyMemberCampaignHero               CampaignHero;                                      // 0x0168(0x0038)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A0[0x30];                                     // 0x01A0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MatchmakingLevel;                                  // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D4[0x34];                                     // 0x01D4(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ZoneInstanceId;                                    // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_218[0x30];                                     // 0x0218(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         HomeBaseVersion;                                   // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x30];                                     // 0x0250(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          HasPreloadedAthena;                                // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_281[0x37];                                     // 0x0281(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyMemberFrontendEmote              FrontendEmote;                                     // 0x02B8(0x0040)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x30];                                     // 0x02F8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         NumAthenaPlayersLeft;                              // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_329[0x37];                                     // 0x0329(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              UtcTimeStartedMatchAthena;                         // 0x0360(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_368[0x30];                                     // 0x0368(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	EGameReadiness                                GameReadiness;                                     // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_399[0x37];                                     // 0x0399(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HiddenMatchmakingDelayMax;                         // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D4[0x34];                                     // 0x03D4(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	ECommonInputType                              ReadyInputType;                                    // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_409[0x37];                                     // 0x0409(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	ECommonInputType                              CurrentInputType;                                  // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_441[0x37];                                     // 0x0441(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyMemberAssistedChallengeInfo      AssistedChallengeInfo;                             // 0x0478(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_488[0x30];                                     // 0x0488(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyMemberSquadAssignmentRequest     MemberSquadAssignmentRequest;                      // 0x04B8(0x0038)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F0[0x30];                                     // 0x04F0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	EPartyMemberVoiceChatStatus                   VoiceChatStatus;                                   // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_521[0x37];                                     // 0x0521(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyMemberCosmeticLoadout            AthenaCosmeticLoadout;                             // 0x0558(0x00C8)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_620[0x30];                                     // 0x0620(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyMemberAthenaBannerInfo           AthenaBannerInfo;                                  // 0x0650(0x0028)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_678[0x30];                                     // 0x0678(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyMemberBattlePassInfo             BattlePassInfo;                                    // 0x06A8(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6B8[0x30];                                     // 0x06B8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPartyMemberRepData) == 0x000008, "Wrong alignment on FFortPartyMemberRepData");
static_assert(sizeof(FFortPartyMemberRepData) == 0x0006E8, "Wrong size on FFortPartyMemberRepData");
static_assert(offsetof(FFortPartyMemberRepData, Location) == 0x000130, "Member 'FFortPartyMemberRepData::Location' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, CampaignHero) == 0x000168, "Member 'FFortPartyMemberRepData::CampaignHero' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, MatchmakingLevel) == 0x0001D0, "Member 'FFortPartyMemberRepData::MatchmakingLevel' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, ZoneInstanceId) == 0x000208, "Member 'FFortPartyMemberRepData::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, HomeBaseVersion) == 0x000248, "Member 'FFortPartyMemberRepData::HomeBaseVersion' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, HasPreloadedAthena) == 0x000280, "Member 'FFortPartyMemberRepData::HasPreloadedAthena' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, FrontendEmote) == 0x0002B8, "Member 'FFortPartyMemberRepData::FrontendEmote' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, NumAthenaPlayersLeft) == 0x000328, "Member 'FFortPartyMemberRepData::NumAthenaPlayersLeft' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, UtcTimeStartedMatchAthena) == 0x000360, "Member 'FFortPartyMemberRepData::UtcTimeStartedMatchAthena' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, GameReadiness) == 0x000398, "Member 'FFortPartyMemberRepData::GameReadiness' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, HiddenMatchmakingDelayMax) == 0x0003D0, "Member 'FFortPartyMemberRepData::HiddenMatchmakingDelayMax' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, ReadyInputType) == 0x000408, "Member 'FFortPartyMemberRepData::ReadyInputType' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, CurrentInputType) == 0x000440, "Member 'FFortPartyMemberRepData::CurrentInputType' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, AssistedChallengeInfo) == 0x000478, "Member 'FFortPartyMemberRepData::AssistedChallengeInfo' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, MemberSquadAssignmentRequest) == 0x0004B8, "Member 'FFortPartyMemberRepData::MemberSquadAssignmentRequest' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, VoiceChatStatus) == 0x000520, "Member 'FFortPartyMemberRepData::VoiceChatStatus' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, AthenaCosmeticLoadout) == 0x000558, "Member 'FFortPartyMemberRepData::AthenaCosmeticLoadout' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, AthenaBannerInfo) == 0x000650, "Member 'FFortPartyMemberRepData::AthenaBannerInfo' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepData, BattlePassInfo) == 0x0006A8, "Member 'FFortPartyMemberRepData::BattlePassInfo' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterSettings
// 0x0090 (0x0090 - 0x0000)
struct FFortEncounterSettings final
{
public:
	TArray<EFortEncounterDirection>               ForbiddenSpawnDirections;                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRiftsDestroyPlayerBuiltBuildings;                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustFindSpawnPoints;                              // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopIfCantFindSpawnPoint;                         // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackCombatParticipation;                         // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayThreatVisuals;                             // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BurstSpawnThreatVisualsEndDelayOverride;           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRiftsToUseOverride;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEQSQueryToFindAISpawnLocations;                // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevantForTotalAICap;                            // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRecreateRift;                               // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespawnRiftWhenRiftDead;                          // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomiseQueryRiftLocations;                      // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreSpawnRequeryTime;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnAIIntervalTime;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRiftIntervalTime;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnFirstRiftNoDelay;                            // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvQuery*                              RiftSelectionQuery;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvQuery*                              RiftSlotsEQSQueryOverride;                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ScriptedSpawnPoints;                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingRift>              RiftClassOverride;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         WorkingScriptedSpawnPoints;                        // 0x0060(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         EncounterGroupID;                                  // 0x0070(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZoneIndex;                                         // 0x0074(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyIndex;                                   // 0x0078(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AIDespawnDistanceOverride;                         // 0x007C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortDifficultyOptionCategoryEncounter*> InjectedOverrideCategories;                        // 0x0080(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterSettings) == 0x000008, "Wrong alignment on FFortEncounterSettings");
static_assert(sizeof(FFortEncounterSettings) == 0x000090, "Wrong size on FFortEncounterSettings");
static_assert(offsetof(FFortEncounterSettings, ForbiddenSpawnDirections) == 0x000000, "Member 'FFortEncounterSettings::ForbiddenSpawnDirections' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bRiftsDestroyPlayerBuiltBuildings) == 0x000010, "Member 'FFortEncounterSettings::bRiftsDestroyPlayerBuiltBuildings' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bMustFindSpawnPoints) == 0x000011, "Member 'FFortEncounterSettings::bMustFindSpawnPoints' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bStopIfCantFindSpawnPoint) == 0x000012, "Member 'FFortEncounterSettings::bStopIfCantFindSpawnPoint' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bTrackCombatParticipation) == 0x000013, "Member 'FFortEncounterSettings::bTrackCombatParticipation' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bDisplayThreatVisuals) == 0x000014, "Member 'FFortEncounterSettings::bDisplayThreatVisuals' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, BurstSpawnThreatVisualsEndDelayOverride) == 0x000018, "Member 'FFortEncounterSettings::BurstSpawnThreatVisualsEndDelayOverride' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, NumRiftsToUseOverride) == 0x00001C, "Member 'FFortEncounterSettings::NumRiftsToUseOverride' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bUseEQSQueryToFindAISpawnLocations) == 0x000020, "Member 'FFortEncounterSettings::bUseEQSQueryToFindAISpawnLocations' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bRelevantForTotalAICap) == 0x000021, "Member 'FFortEncounterSettings::bRelevantForTotalAICap' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bEnableRecreateRift) == 0x000022, "Member 'FFortEncounterSettings::bEnableRecreateRift' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bRespawnRiftWhenRiftDead) == 0x000023, "Member 'FFortEncounterSettings::bRespawnRiftWhenRiftDead' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bRandomiseQueryRiftLocations) == 0x000024, "Member 'FFortEncounterSettings::bRandomiseQueryRiftLocations' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, PreSpawnRequeryTime) == 0x000028, "Member 'FFortEncounterSettings::PreSpawnRequeryTime' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, SpawnAIIntervalTime) == 0x00002C, "Member 'FFortEncounterSettings::SpawnAIIntervalTime' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, SpawnRiftIntervalTime) == 0x000030, "Member 'FFortEncounterSettings::SpawnRiftIntervalTime' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bSpawnFirstRiftNoDelay) == 0x000034, "Member 'FFortEncounterSettings::bSpawnFirstRiftNoDelay' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, RiftSelectionQuery) == 0x000038, "Member 'FFortEncounterSettings::RiftSelectionQuery' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, RiftSlotsEQSQueryOverride) == 0x000040, "Member 'FFortEncounterSettings::RiftSlotsEQSQueryOverride' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, ScriptedSpawnPoints) == 0x000048, "Member 'FFortEncounterSettings::ScriptedSpawnPoints' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, RiftClassOverride) == 0x000058, "Member 'FFortEncounterSettings::RiftClassOverride' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, WorkingScriptedSpawnPoints) == 0x000060, "Member 'FFortEncounterSettings::WorkingScriptedSpawnPoints' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, EncounterGroupID) == 0x000070, "Member 'FFortEncounterSettings::EncounterGroupID' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, ZoneIndex) == 0x000074, "Member 'FFortEncounterSettings::ZoneIndex' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, DifficultyIndex) == 0x000078, "Member 'FFortEncounterSettings::DifficultyIndex' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, AIDespawnDistanceOverride) == 0x00007C, "Member 'FFortEncounterSettings::AIDespawnDistanceOverride' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, InjectedOverrideCategories) == 0x000080, "Member 'FFortEncounterSettings::InjectedOverrideCategories' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_CommonVehicle
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FFortAnimInput_CommonVehicle final
{
public:
	uint8                                         bIsUsingVehicle : 1;                               // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsJumpingVehicle : 1;                             // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanChargeJump : 1;                                // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsChargingJump : 1;                               // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_0_4 : 4;                                    // 0x0000(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bIsJumping : 1;                                    // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsOnGround : 1;                                   // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanDriverAimWeapon : 1;                           // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimInput_CommonVehicle) == 0x000004, "Wrong alignment on FFortAnimInput_CommonVehicle");
static_assert(sizeof(FFortAnimInput_CommonVehicle) == 0x00000C, "Wrong size on FFortAnimInput_CommonVehicle");

// ScriptStruct FortniteGame.AttributeInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FAttributeInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttributeInfo) == 0x000008, "Wrong alignment on FAttributeInfo");
static_assert(sizeof(FAttributeInfo) == 0x000010, "Wrong size on FAttributeInfo");

// ScriptStruct FortniteGame.PooledDamageNumberComponents
// 0x0010 (0x0010 - 0x0000)
struct FPooledDamageNumberComponents final
{
public:
	TArray<class UStaticMeshComponent*>           Components;                                        // 0x0000(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPooledDamageNumberComponents) == 0x000008, "Wrong alignment on FPooledDamageNumberComponents");
static_assert(sizeof(FPooledDamageNumberComponents) == 0x000010, "Wrong size on FPooledDamageNumberComponents");
static_assert(offsetof(FPooledDamageNumberComponents, Components) == 0x000000, "Member 'FPooledDamageNumberComponents::Components' has a wrong offset!");

// ScriptStruct FortniteGame.FortStatManagerTag
// 0x0000 (0x0008 - 0x0008)
struct FFortStatManagerTag final : public FGameplayTag
{
};
static_assert(alignof(FFortStatManagerTag) == 0x000004, "Wrong alignment on FFortStatManagerTag");
static_assert(sizeof(FFortStatManagerTag) == 0x000008, "Wrong size on FFortStatManagerTag");

// ScriptStruct FortniteGame.FortPSALoadingScreen
// 0x0030 (0x0030 - 0x0000)
struct FFortPSALoadingScreen final
{
public:
	int32                                         PercentChance;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumGames;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPSALoadingScreen) == 0x000008, "Wrong alignment on FFortPSALoadingScreen");
static_assert(sizeof(FFortPSALoadingScreen) == 0x000030, "Wrong size on FFortPSALoadingScreen");
static_assert(offsetof(FFortPSALoadingScreen, PercentChance) == 0x000000, "Member 'FFortPSALoadingScreen::PercentChance' has a wrong offset!");
static_assert(offsetof(FFortPSALoadingScreen, MinimumGames) == 0x000004, "Member 'FFortPSALoadingScreen::MinimumGames' has a wrong offset!");
static_assert(offsetof(FFortPSALoadingScreen, WidgetClass) == 0x000008, "Member 'FFortPSALoadingScreen::WidgetClass' has a wrong offset!");

// ScriptStruct FortniteGame.ReplayDataMoveSnapshotContainer
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FReplayDataMoveSnapshotContainer final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplayDataMoveSnapshotContainer) == 0x000008, "Wrong alignment on FReplayDataMoveSnapshotContainer");
static_assert(sizeof(FReplayDataMoveSnapshotContainer) == 0x000010, "Wrong size on FReplayDataMoveSnapshotContainer");

// ScriptStruct FortniteGame.FortEncounterPawnNumberCaps
// 0x0018 (0x0018 - 0x0000)
struct FFortEncounterPawnNumberCaps final
{
public:
	bool                                          bApplyPawnNumberCaps;                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCurveTableRowHandle>           PawnCapsPerPlayerCount;                            // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterPawnNumberCaps) == 0x000008, "Wrong alignment on FFortEncounterPawnNumberCaps");
static_assert(sizeof(FFortEncounterPawnNumberCaps) == 0x000018, "Wrong size on FFortEncounterPawnNumberCaps");
static_assert(offsetof(FFortEncounterPawnNumberCaps, bApplyPawnNumberCaps) == 0x000000, "Member 'FFortEncounterPawnNumberCaps::bApplyPawnNumberCaps' has a wrong offset!");
static_assert(offsetof(FFortEncounterPawnNumberCaps, PawnCapsPerPlayerCount) == 0x000008, "Member 'FFortEncounterPawnNumberCaps::PawnCapsPerPlayerCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyRewardScheduleDisplayData
// 0x0060 (0x0060 - 0x0000)
struct FFortDailyRewardScheduleDisplayData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ItemDescription;                                   // 0x0030(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   EpicItemDescription;                               // 0x0048(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyRewardScheduleDisplayData) == 0x000008, "Wrong alignment on FFortDailyRewardScheduleDisplayData");
static_assert(sizeof(FFortDailyRewardScheduleDisplayData) == 0x000060, "Wrong size on FFortDailyRewardScheduleDisplayData");
static_assert(offsetof(FFortDailyRewardScheduleDisplayData, Title) == 0x000000, "Member 'FFortDailyRewardScheduleDisplayData::Title' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDisplayData, Description) == 0x000018, "Member 'FFortDailyRewardScheduleDisplayData::Description' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDisplayData, ItemDescription) == 0x000030, "Member 'FFortDailyRewardScheduleDisplayData::ItemDescription' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDisplayData, EpicItemDescription) == 0x000048, "Member 'FFortDailyRewardScheduleDisplayData::EpicItemDescription' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyRewardScheduleDefinition
// 0x00A8 (0x00A8 - 0x0000)
struct FFortDailyRewardScheduleDefinition final
{
public:
	class FName                                   ScheduleName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortDailyRewardScheduleTokenDefinition> EnablingToken;                                     // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             Rewards;                                           // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortDailyRewardScheduleDisplayData    DisplayData;                                       // 0x0038(0x0060)(Edit, NativeAccessSpecifierPublic)
	struct FDateTime                              BeginDate;                                         // 0x0098(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x00A0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyRewardScheduleDefinition) == 0x000008, "Wrong alignment on FFortDailyRewardScheduleDefinition");
static_assert(sizeof(FFortDailyRewardScheduleDefinition) == 0x0000A8, "Wrong size on FFortDailyRewardScheduleDefinition");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, ScheduleName) == 0x000000, "Member 'FFortDailyRewardScheduleDefinition::ScheduleName' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, EnablingToken) == 0x000008, "Member 'FFortDailyRewardScheduleDefinition::EnablingToken' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, Rewards) == 0x000030, "Member 'FFortDailyRewardScheduleDefinition::Rewards' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, DisplayData) == 0x000038, "Member 'FFortDailyRewardScheduleDefinition::DisplayData' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, BeginDate) == 0x000098, "Member 'FFortDailyRewardScheduleDefinition::BeginDate' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, EndDate) == 0x0000A0, "Member 'FFortDailyRewardScheduleDefinition::EndDate' has a wrong offset!");

// ScriptStruct FortniteGame.FortVariantSpawnPoints
// 0x0008 (0x0010 - 0x0008)
struct FFortVariantSpawnPoints final : public FTableRowBase
{
public:
	int32                                         BudgetPoints;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortVariantSpawnPoints) == 0x000008, "Wrong alignment on FFortVariantSpawnPoints");
static_assert(sizeof(FFortVariantSpawnPoints) == 0x000010, "Wrong size on FFortVariantSpawnPoints");
static_assert(offsetof(FFortVariantSpawnPoints, BudgetPoints) == 0x000008, "Member 'FFortVariantSpawnPoints::BudgetPoints' has a wrong offset!");

// ScriptStruct FortniteGame.NameplatePreset
// 0x0030 (0x0030 - 0x0000)
struct FNameplatePreset final
{
public:
	bool                                          bNamePlatesEnabled;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ViewDistance;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowDetailDistance;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowDistance;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScalingOptionsEnabled;                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HighDetailScaleMin;                                // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighDetailScaleMax;                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowDetailScaleMin;                                 // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowDetailScaleMax;                                 // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowScaleMin;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowScaleMax;                                     // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bArrowColorEnabled;                                // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNameplatePreset) == 0x000004, "Wrong alignment on FNameplatePreset");
static_assert(sizeof(FNameplatePreset) == 0x000030, "Wrong size on FNameplatePreset");
static_assert(offsetof(FNameplatePreset, bNamePlatesEnabled) == 0x000000, "Member 'FNameplatePreset::bNamePlatesEnabled' has a wrong offset!");
static_assert(offsetof(FNameplatePreset, ViewDistance) == 0x000004, "Member 'FNameplatePreset::ViewDistance' has a wrong offset!");
static_assert(offsetof(FNameplatePreset, LowDetailDistance) == 0x000008, "Member 'FNameplatePreset::LowDetailDistance' has a wrong offset!");
static_assert(offsetof(FNameplatePreset, ArrowDistance) == 0x00000C, "Member 'FNameplatePreset::ArrowDistance' has a wrong offset!");
static_assert(offsetof(FNameplatePreset, bScalingOptionsEnabled) == 0x000010, "Member 'FNameplatePreset::bScalingOptionsEnabled' has a wrong offset!");
static_assert(offsetof(FNameplatePreset, HighDetailScaleMin) == 0x000014, "Member 'FNameplatePreset::HighDetailScaleMin' has a wrong offset!");
static_assert(offsetof(FNameplatePreset, HighDetailScaleMax) == 0x000018, "Member 'FNameplatePreset::HighDetailScaleMax' has a wrong offset!");
static_assert(offsetof(FNameplatePreset, LowDetailScaleMin) == 0x00001C, "Member 'FNameplatePreset::LowDetailScaleMin' has a wrong offset!");
static_assert(offsetof(FNameplatePreset, LowDetailScaleMax) == 0x000020, "Member 'FNameplatePreset::LowDetailScaleMax' has a wrong offset!");
static_assert(offsetof(FNameplatePreset, ArrowScaleMin) == 0x000024, "Member 'FNameplatePreset::ArrowScaleMin' has a wrong offset!");
static_assert(offsetof(FNameplatePreset, ArrowScaleMax) == 0x000028, "Member 'FNameplatePreset::ArrowScaleMax' has a wrong offset!");
static_assert(offsetof(FNameplatePreset, bArrowColorEnabled) == 0x00002C, "Member 'FNameplatePreset::bArrowColorEnabled' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemViewSettings
// 0x0034 (0x0034 - 0x0000)
struct FFortItemViewSettings final
{
public:
	bool                                          UsesPlacementActor;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsesFixedCamera;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SupportsZooming;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultZoomLevel;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            ZoomRange;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemViewRotationMode                     RotationMode;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CameraRotationOffset;                              // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                MeshBoundsCenterOffset;                            // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemViewSettings) == 0x000004, "Wrong alignment on FFortItemViewSettings");
static_assert(sizeof(FFortItemViewSettings) == 0x000034, "Wrong size on FFortItemViewSettings");
static_assert(offsetof(FFortItemViewSettings, UsesPlacementActor) == 0x000000, "Member 'FFortItemViewSettings::UsesPlacementActor' has a wrong offset!");
static_assert(offsetof(FFortItemViewSettings, UsesFixedCamera) == 0x000001, "Member 'FFortItemViewSettings::UsesFixedCamera' has a wrong offset!");
static_assert(offsetof(FFortItemViewSettings, SupportsZooming) == 0x000002, "Member 'FFortItemViewSettings::SupportsZooming' has a wrong offset!");
static_assert(offsetof(FFortItemViewSettings, DefaultZoomLevel) == 0x000004, "Member 'FFortItemViewSettings::DefaultZoomLevel' has a wrong offset!");
static_assert(offsetof(FFortItemViewSettings, ZoomRange) == 0x000008, "Member 'FFortItemViewSettings::ZoomRange' has a wrong offset!");
static_assert(offsetof(FFortItemViewSettings, RotationMode) == 0x000018, "Member 'FFortItemViewSettings::RotationMode' has a wrong offset!");
static_assert(offsetof(FFortItemViewSettings, CameraRotationOffset) == 0x00001C, "Member 'FFortItemViewSettings::CameraRotationOffset' has a wrong offset!");
static_assert(offsetof(FFortItemViewSettings, MeshBoundsCenterOffset) == 0x000028, "Member 'FFortItemViewSettings::MeshBoundsCenterOffset' has a wrong offset!");

// ScriptStruct FortniteGame.NamedNameplatePreset
// 0x0040 (0x0040 - 0x0000)
struct FNamedNameplatePreset final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNameplatePreset                       NameplatePreset;                                   // 0x0010(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNamedNameplatePreset) == 0x000008, "Wrong alignment on FNamedNameplatePreset");
static_assert(sizeof(FNamedNameplatePreset) == 0x000040, "Wrong size on FNamedNameplatePreset");
static_assert(offsetof(FNamedNameplatePreset, Name) == 0x000000, "Member 'FNamedNameplatePreset::Name' has a wrong offset!");
static_assert(offsetof(FNamedNameplatePreset, NameplatePreset) == 0x000010, "Member 'FNamedNameplatePreset::NameplatePreset' has a wrong offset!");

// ScriptStruct FortniteGame.FortCreativeBudgetClassInstanceLimit
// 0x0030 (0x0030 - 0x0000)
struct FFortCreativeBudgetClassInstanceLimit final
{
public:
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0000(0x0028)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumberOfInstances;                              // 0x0028(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCreativeBudgetClassInstanceLimit) == 0x000008, "Wrong alignment on FFortCreativeBudgetClassInstanceLimit");
static_assert(sizeof(FFortCreativeBudgetClassInstanceLimit) == 0x000030, "Wrong size on FFortCreativeBudgetClassInstanceLimit");
static_assert(offsetof(FFortCreativeBudgetClassInstanceLimit, ActorClass) == 0x000000, "Member 'FFortCreativeBudgetClassInstanceLimit::ActorClass' has a wrong offset!");
static_assert(offsetof(FFortCreativeBudgetClassInstanceLimit, MaxNumberOfInstances) == 0x000028, "Member 'FFortCreativeBudgetClassInstanceLimit::MaxNumberOfInstances' has a wrong offset!");

// ScriptStruct FortniteGame.FOBCoreChoice
// 0x002C (0x0038 - 0x000C)
struct FFOBCoreChoice final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortFOBCoreDecoItemDefinition*         FOBCoreDef;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFOBFileHeaderStatus                          FileHeaderStatus;                                  // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CoreFilename;                                      // 0x0020(0x0010)(ZeroConstructor, Transient, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortBuildingInstructions*              BuildingInstructions;                              // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFOBCoreChoice) == 0x000008, "Wrong alignment on FFOBCoreChoice");
static_assert(sizeof(FFOBCoreChoice) == 0x000038, "Wrong size on FFOBCoreChoice");
static_assert(offsetof(FFOBCoreChoice, FOBCoreDef) == 0x000010, "Member 'FFOBCoreChoice::FOBCoreDef' has a wrong offset!");
static_assert(offsetof(FFOBCoreChoice, FileHeaderStatus) == 0x000018, "Member 'FFOBCoreChoice::FileHeaderStatus' has a wrong offset!");
static_assert(offsetof(FFOBCoreChoice, CoreFilename) == 0x000020, "Member 'FFOBCoreChoice::CoreFilename' has a wrong offset!");
static_assert(offsetof(FFOBCoreChoice, BuildingInstructions) == 0x000030, "Member 'FFOBCoreChoice::BuildingInstructions' has a wrong offset!");

// ScriptStruct FortniteGame.FOBCoreChoiceArray
// 0x0010 (0x0118 - 0x0108)
struct FFOBCoreChoiceArray final : public FFastArraySerializer
{
public:
	TArray<struct FFOBCoreChoice>                 Items;                                             // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFOBCoreChoiceArray) == 0x000008, "Wrong alignment on FFOBCoreChoiceArray");
static_assert(sizeof(FFOBCoreChoiceArray) == 0x000118, "Wrong size on FFOBCoreChoiceArray");
static_assert(offsetof(FFOBCoreChoiceArray, Items) == 0x000108, "Member 'FFOBCoreChoiceArray::Items' has a wrong offset!");

// ScriptStruct FortniteGame.FortBadgeCount
// 0x0014 (0x0020 - 0x000C)
struct FFortBadgeCount final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortBadgeItemDefinition*               Badge;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBadgeCount) == 0x000008, "Wrong alignment on FFortBadgeCount");
static_assert(sizeof(FFortBadgeCount) == 0x000020, "Wrong size on FFortBadgeCount");
static_assert(offsetof(FFortBadgeCount, Badge) == 0x000010, "Member 'FFortBadgeCount::Badge' has a wrong offset!");
static_assert(offsetof(FFortBadgeCount, Count) == 0x000018, "Member 'FFortBadgeCount::Count' has a wrong offset!");

// ScriptStruct FortniteGame.AutoAcquireSlot
// 0x0010 (0x0020 - 0x0010)
struct FAutoAcquireSlot final : public FAIHotSpotSlotInfo
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAutoAcquireSlot) == 0x000008, "Wrong alignment on FAutoAcquireSlot");
static_assert(sizeof(FAutoAcquireSlot) == 0x000020, "Wrong size on FAutoAcquireSlot");

// ScriptStruct FortniteGame.FortCollectionBookSlotData
// 0x0048 (0x0050 - 0x0008)
struct FFortCollectionBookSlotData final : public FTableRowBase
{
public:
	class FName                                   SlotXpWeightName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotSourceId;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotSourceId2;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortItemDefinition>> AllowedItems;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   AllowedWorkerPersonalities;                        // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    PurchaseCosts;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookSlotData) == 0x000008, "Wrong alignment on FFortCollectionBookSlotData");
static_assert(sizeof(FFortCollectionBookSlotData) == 0x000050, "Wrong size on FFortCollectionBookSlotData");
static_assert(offsetof(FFortCollectionBookSlotData, SlotXpWeightName) == 0x000008, "Member 'FFortCollectionBookSlotData::SlotXpWeightName' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotData, SlotSourceId) == 0x000010, "Member 'FFortCollectionBookSlotData::SlotSourceId' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotData, SlotSourceId2) == 0x000018, "Member 'FFortCollectionBookSlotData::SlotSourceId2' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotData, AllowedItems) == 0x000020, "Member 'FFortCollectionBookSlotData::AllowedItems' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotData, AllowedWorkerPersonalities) == 0x000030, "Member 'FFortCollectionBookSlotData::AllowedWorkerPersonalities' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotData, PurchaseCosts) == 0x000040, "Member 'FFortCollectionBookSlotData::PurchaseCosts' has a wrong offset!");

// ScriptStruct FortniteGame.MinimapGoalByTagColorsData
// 0x0030 (0x0030 - 0x0000)
struct FMinimapGoalByTagColorsData final
{
public:
	struct FGameplayTagContainer                  GoalTags;                                          // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           MinimapColor;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinimapGoalByTagColorsData) == 0x000008, "Wrong alignment on FMinimapGoalByTagColorsData");
static_assert(sizeof(FMinimapGoalByTagColorsData) == 0x000030, "Wrong size on FMinimapGoalByTagColorsData");
static_assert(offsetof(FMinimapGoalByTagColorsData, GoalTags) == 0x000000, "Member 'FMinimapGoalByTagColorsData::GoalTags' has a wrong offset!");
static_assert(offsetof(FMinimapGoalByTagColorsData, MinimapColor) == 0x000020, "Member 'FMinimapGoalByTagColorsData::MinimapColor' has a wrong offset!");

// ScriptStruct FortniteGame.SpecialActorSingleStatData
// 0x000C (0x000C - 0x0000)
struct FSpecialActorSingleStatData final
{
public:
	ESpecialActorStatType                         StatType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StatLogicValue;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialActorSingleStatData) == 0x000004, "Wrong alignment on FSpecialActorSingleStatData");
static_assert(sizeof(FSpecialActorSingleStatData) == 0x00000C, "Wrong size on FSpecialActorSingleStatData");
static_assert(offsetof(FSpecialActorSingleStatData, StatType) == 0x000000, "Member 'FSpecialActorSingleStatData::StatType' has a wrong offset!");
static_assert(offsetof(FSpecialActorSingleStatData, Value) == 0x000004, "Member 'FSpecialActorSingleStatData::Value' has a wrong offset!");
static_assert(offsetof(FSpecialActorSingleStatData, StatLogicValue) == 0x000008, "Member 'FSpecialActorSingleStatData::StatLogicValue' has a wrong offset!");

// ScriptStruct FortniteGame.SpecialActorRepData
// 0x01FC (0x0208 - 0x000C)
struct FSpecialActorRepData final : public FFastArraySerializerItem
{
public:
	class FName                                   SpecialActorID;                                    // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CategoryTag;                                       // 0x0014(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpecialActor;                                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerState;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplicationInterval;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplicationIntervalDeviation;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextReplicationTime;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastActorNotRelevantTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActorIsRelevant;                                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasActorRelevantLastUpdate;                       // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentLocation;                                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentYaw;                                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            MainIconBrush;                                     // 0x0058(0x0088)(NativeAccessSpecifierPublic)
	struct FVector2D                              MinimapScale;                                      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CompassIconBrush;                                  // 0x00E8(0x0088)(NativeAccessSpecifierPublic)
	struct FVector2D                              CompassScale;                                      // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawCompassIcon;                                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentHealth;                                     // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentShield;                                     // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxShield;                                         // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0190(0x0018)(NativeAccessSpecifierPublic)
	float                                         RenderDistance;                                    // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddedToClientTime;                                 // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSpecialActorSingleStatData>    TrackedStats;                                      // 0x01B0(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	float                                         LastLocationReplicationTime;                       // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevLocationReplicatedTime;                        // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector_NetQuantize100                 LastRepLocation;                                   // 0x01C8(0x000C)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector_NetQuantize100                 PrevRepLocation;                                   // 0x01D4(0x000C)(RepSkip, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                LerpStartLocation;                                 // 0x01E0(0x000C)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastYawReplicationTime;                            // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevYawReplicatedTime;                             // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastRepYaw;                                        // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevRepYaw;                                        // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LerpStartYaw;                                      // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bReplicateHealth;                                  // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bReplicateShield;                                  // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_202[0x6];                                      // 0x0202(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialActorRepData) == 0x000008, "Wrong alignment on FSpecialActorRepData");
static_assert(sizeof(FSpecialActorRepData) == 0x000208, "Wrong size on FSpecialActorRepData");
static_assert(offsetof(FSpecialActorRepData, SpecialActorID) == 0x00000C, "Member 'FSpecialActorRepData::SpecialActorID' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, CategoryTag) == 0x000014, "Member 'FSpecialActorRepData::CategoryTag' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, SpecialActor) == 0x000020, "Member 'FSpecialActorRepData::SpecialActor' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, PlayerState) == 0x000028, "Member 'FSpecialActorRepData::PlayerState' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, ReplicationInterval) == 0x000030, "Member 'FSpecialActorRepData::ReplicationInterval' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, ReplicationIntervalDeviation) == 0x000034, "Member 'FSpecialActorRepData::ReplicationIntervalDeviation' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, NextReplicationTime) == 0x000038, "Member 'FSpecialActorRepData::NextReplicationTime' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, LastActorNotRelevantTime) == 0x00003C, "Member 'FSpecialActorRepData::LastActorNotRelevantTime' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, bActorIsRelevant) == 0x000040, "Member 'FSpecialActorRepData::bActorIsRelevant' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, bWasActorRelevantLastUpdate) == 0x000041, "Member 'FSpecialActorRepData::bWasActorRelevantLastUpdate' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, CurrentLocation) == 0x000044, "Member 'FSpecialActorRepData::CurrentLocation' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, CurrentYaw) == 0x000050, "Member 'FSpecialActorRepData::CurrentYaw' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, MainIconBrush) == 0x000058, "Member 'FSpecialActorRepData::MainIconBrush' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, MinimapScale) == 0x0000E0, "Member 'FSpecialActorRepData::MinimapScale' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, CompassIconBrush) == 0x0000E8, "Member 'FSpecialActorRepData::CompassIconBrush' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, CompassScale) == 0x000170, "Member 'FSpecialActorRepData::CompassScale' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, bDrawCompassIcon) == 0x000178, "Member 'FSpecialActorRepData::bDrawCompassIcon' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, CurrentHealth) == 0x00017C, "Member 'FSpecialActorRepData::CurrentHealth' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, MaxHealth) == 0x000180, "Member 'FSpecialActorRepData::MaxHealth' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, CurrentShield) == 0x000184, "Member 'FSpecialActorRepData::CurrentShield' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, MaxShield) == 0x000188, "Member 'FSpecialActorRepData::MaxShield' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, DisplayName) == 0x000190, "Member 'FSpecialActorRepData::DisplayName' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, RenderDistance) == 0x0001A8, "Member 'FSpecialActorRepData::RenderDistance' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, AddedToClientTime) == 0x0001AC, "Member 'FSpecialActorRepData::AddedToClientTime' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, TrackedStats) == 0x0001B0, "Member 'FSpecialActorRepData::TrackedStats' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, LastLocationReplicationTime) == 0x0001C0, "Member 'FSpecialActorRepData::LastLocationReplicationTime' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, PrevLocationReplicatedTime) == 0x0001C4, "Member 'FSpecialActorRepData::PrevLocationReplicatedTime' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, LastRepLocation) == 0x0001C8, "Member 'FSpecialActorRepData::LastRepLocation' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, PrevRepLocation) == 0x0001D4, "Member 'FSpecialActorRepData::PrevRepLocation' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, LerpStartLocation) == 0x0001E0, "Member 'FSpecialActorRepData::LerpStartLocation' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, LastYawReplicationTime) == 0x0001EC, "Member 'FSpecialActorRepData::LastYawReplicationTime' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, PrevYawReplicatedTime) == 0x0001F0, "Member 'FSpecialActorRepData::PrevYawReplicatedTime' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, LastRepYaw) == 0x0001F4, "Member 'FSpecialActorRepData::LastRepYaw' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, PrevRepYaw) == 0x0001F8, "Member 'FSpecialActorRepData::PrevRepYaw' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, LerpStartYaw) == 0x0001FC, "Member 'FSpecialActorRepData::LerpStartYaw' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, bReplicateHealth) == 0x000200, "Member 'FSpecialActorRepData::bReplicateHealth' has a wrong offset!");
static_assert(offsetof(FSpecialActorRepData, bReplicateShield) == 0x000201, "Member 'FSpecialActorRepData::bReplicateShield' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingDuplicationData
// 0x0028 (0x0028 - 0x0000)
struct FBuildingDuplicationData final
{
public:
	class UClass*                                 ClassData;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuildingTextureData*                   TextureData[0x4];                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingDuplicationData) == 0x000008, "Wrong alignment on FBuildingDuplicationData");
static_assert(sizeof(FBuildingDuplicationData) == 0x000028, "Wrong size on FBuildingDuplicationData");
static_assert(offsetof(FBuildingDuplicationData, ClassData) == 0x000000, "Member 'FBuildingDuplicationData::ClassData' has a wrong offset!");
static_assert(offsetof(FBuildingDuplicationData, TextureData) == 0x000008, "Member 'FBuildingDuplicationData::TextureData' has a wrong offset!");

// ScriptStruct FortniteGame.FortGlobalActionDetails
// 0x000C (0x000C - 0x0000)
struct FFortGlobalActionDetails final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HoldStatus;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGlobalActionDetails) == 0x000004, "Wrong alignment on FFortGlobalActionDetails");
static_assert(sizeof(FFortGlobalActionDetails) == 0x00000C, "Wrong size on FFortGlobalActionDetails");
static_assert(offsetof(FFortGlobalActionDetails, ActionName) == 0x000000, "Member 'FFortGlobalActionDetails::ActionName' has a wrong offset!");
static_assert(offsetof(FFortGlobalActionDetails, HoldStatus) == 0x000008, "Member 'FFortGlobalActionDetails::HoldStatus' has a wrong offset!");

// ScriptStruct FortniteGame.EarnedBadgePlayerData
// 0x0030 (0x0030 - 0x0000)
struct FEarnedBadgePlayerData final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEarnedBadgePlayerData) == 0x000008, "Wrong alignment on FEarnedBadgePlayerData");
static_assert(sizeof(FEarnedBadgePlayerData) == 0x000030, "Wrong size on FEarnedBadgePlayerData");
static_assert(offsetof(FEarnedBadgePlayerData, PlayerID) == 0x000000, "Member 'FEarnedBadgePlayerData::PlayerID' has a wrong offset!");
static_assert(offsetof(FEarnedBadgePlayerData, Count) == 0x000028, "Member 'FEarnedBadgePlayerData::Count' has a wrong offset!");

// ScriptStruct FortniteGame.EarnedBadgeEntry
// 0x0024 (0x0030 - 0x000C)
struct FEarnedBadgeEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortBadgeItemDefinition*               Badge;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEarnedBadgePlayerData>         PlayerData;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	EFortRewardType                               RewardType;                                        // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEarnedBadgeEntry) == 0x000008, "Wrong alignment on FEarnedBadgeEntry");
static_assert(sizeof(FEarnedBadgeEntry) == 0x000030, "Wrong size on FEarnedBadgeEntry");
static_assert(offsetof(FEarnedBadgeEntry, Badge) == 0x000010, "Member 'FEarnedBadgeEntry::Badge' has a wrong offset!");
static_assert(offsetof(FEarnedBadgeEntry, PlayerData) == 0x000018, "Member 'FEarnedBadgeEntry::PlayerData' has a wrong offset!");
static_assert(offsetof(FEarnedBadgeEntry, RewardType) == 0x000028, "Member 'FEarnedBadgeEntry::RewardType' has a wrong offset!");

// ScriptStruct FortniteGame.AlterationSlotDefinition
// 0x0018 (0x0020 - 0x0008)
struct FAlterationSlotDefinition final : public FTableRowBase
{
public:
	class FName                                   InitTierGroup;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          BaseRespecCosts;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlterationSlotDefinition) == 0x000008, "Wrong alignment on FAlterationSlotDefinition");
static_assert(sizeof(FAlterationSlotDefinition) == 0x000020, "Wrong size on FAlterationSlotDefinition");
static_assert(offsetof(FAlterationSlotDefinition, InitTierGroup) == 0x000008, "Member 'FAlterationSlotDefinition::InitTierGroup' has a wrong offset!");
static_assert(offsetof(FAlterationSlotDefinition, BaseRespecCosts) == 0x000010, "Member 'FAlterationSlotDefinition::BaseRespecCosts' has a wrong offset!");

// ScriptStruct FortniteGame.FortGlobalActionDetailsFunctionContext
// 0x0001 (0x0001 - 0x0000)
struct FFortGlobalActionDetailsFunctionContext final
{
public:
	ECommonInputType                              OverrideInputType;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGlobalActionDetailsFunctionContext) == 0x000001, "Wrong alignment on FFortGlobalActionDetailsFunctionContext");
static_assert(sizeof(FFortGlobalActionDetailsFunctionContext) == 0x000001, "Wrong size on FFortGlobalActionDetailsFunctionContext");
static_assert(offsetof(FFortGlobalActionDetailsFunctionContext, OverrideInputType) == 0x000000, "Member 'FFortGlobalActionDetailsFunctionContext::OverrideInputType' has a wrong offset!");

// ScriptStruct FortniteGame.FortInputActionDetails
// 0x0020 (0x0020 - 0x0000)
struct FFortInputActionDetails final
{
public:
	EFortInputActionType                          InputActionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ActionKey;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortInputActionDetails) == 0x000008, "Wrong alignment on FFortInputActionDetails");
static_assert(sizeof(FFortInputActionDetails) == 0x000020, "Wrong size on FFortInputActionDetails");
static_assert(offsetof(FFortInputActionDetails, InputActionType) == 0x000000, "Member 'FFortInputActionDetails::InputActionType' has a wrong offset!");
static_assert(offsetof(FFortInputActionDetails, ActionKey) == 0x000008, "Member 'FFortInputActionDetails::ActionKey' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_Quad
// 0x0070 (0x0070 - 0x0000)
struct FFortAnimInput_Quad final
{
public:
	uint8                                         bIsUsingQuad : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDriver : 1;                                     // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFrontPassenger : 1;                             // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBackPassenger : 1;                              // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBackPassengerAndLeaning : 1;                    // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDrifting : 1;                                   // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBoosting : 1;                                   // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsReversing : 1;                                  // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBraking : 1;                                    // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMoving : 1;                                     // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMovingForward : 1;                              // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsLeaning : 1;                                    // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsLeaningOrBouncing : 1;                          // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceCrouching : 1;                            // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceCrouched : 1;                             // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceJumping : 1;                              // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceRecoiling : 1;                            // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSteeringRight : 1;                              // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSteeringLeft : 1;                               // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RunForwardAlpha;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceCompression;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeanPosition;                                      // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanPositionX;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanPositionY;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanPositionZ;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalVelocity;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalAcceleration;                              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAimFWD : 1;                                       // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimBWD : 1;                                       // 0x002C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimLFT : 1;                                       // 0x002C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimRGT : 1;                                       // 0x002C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PawnToVehicleDeltaYawAngleDegrees;                 // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimCardDirDeadZoneAngleDegrees;                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimCardDirAngleOffsetDegrees;                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastCardDirIndex;                                  // 0x003C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimFWDDeltaAngleDegrees;                           // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimBWDDeltaAngleDegrees;                           // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimLFTDeltaAngleDegrees;                           // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimRGTDeltaAngleDegrees;                           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopePitchDegreeAngle;                             // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeRollDegreeAngle;                              // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAngle;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAlpha;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAngleDeadZoneDegrees;                         // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringRotation;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehiclePitch;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleRoll;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_Quad) == 0x000004, "Wrong alignment on FFortAnimInput_Quad");
static_assert(sizeof(FFortAnimInput_Quad) == 0x000070, "Wrong size on FFortAnimInput_Quad");
static_assert(offsetof(FFortAnimInput_Quad, RunForwardAlpha) == 0x000004, "Member 'FFortAnimInput_Quad::RunForwardAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, BounceCompression) == 0x000008, "Member 'FFortAnimInput_Quad::BounceCompression' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, LeanPosition) == 0x00000C, "Member 'FFortAnimInput_Quad::LeanPosition' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, LeanPositionX) == 0x000018, "Member 'FFortAnimInput_Quad::LeanPositionX' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, LeanPositionY) == 0x00001C, "Member 'FFortAnimInput_Quad::LeanPositionY' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, LeanPositionZ) == 0x000020, "Member 'FFortAnimInput_Quad::LeanPositionZ' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, VerticalVelocity) == 0x000024, "Member 'FFortAnimInput_Quad::VerticalVelocity' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, VerticalAcceleration) == 0x000028, "Member 'FFortAnimInput_Quad::VerticalAcceleration' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, PawnToVehicleDeltaYawAngleDegrees) == 0x000030, "Member 'FFortAnimInput_Quad::PawnToVehicleDeltaYawAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, AimCardDirDeadZoneAngleDegrees) == 0x000034, "Member 'FFortAnimInput_Quad::AimCardDirDeadZoneAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, AimCardDirAngleOffsetDegrees) == 0x000038, "Member 'FFortAnimInput_Quad::AimCardDirAngleOffsetDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, LastCardDirIndex) == 0x00003C, "Member 'FFortAnimInput_Quad::LastCardDirIndex' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, AimFWDDeltaAngleDegrees) == 0x000040, "Member 'FFortAnimInput_Quad::AimFWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, AimBWDDeltaAngleDegrees) == 0x000044, "Member 'FFortAnimInput_Quad::AimBWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, AimLFTDeltaAngleDegrees) == 0x000048, "Member 'FFortAnimInput_Quad::AimLFTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, AimRGTDeltaAngleDegrees) == 0x00004C, "Member 'FFortAnimInput_Quad::AimRGTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, SlopePitchDegreeAngle) == 0x000050, "Member 'FFortAnimInput_Quad::SlopePitchDegreeAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, SlopeRollDegreeAngle) == 0x000054, "Member 'FFortAnimInput_Quad::SlopeRollDegreeAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, SteerAngle) == 0x000058, "Member 'FFortAnimInput_Quad::SteerAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, SteerAlpha) == 0x00005C, "Member 'FFortAnimInput_Quad::SteerAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, SteerAngleDeadZoneDegrees) == 0x000060, "Member 'FFortAnimInput_Quad::SteerAngleDeadZoneDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, SteeringRotation) == 0x000064, "Member 'FFortAnimInput_Quad::SteeringRotation' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, VehiclePitch) == 0x000068, "Member 'FFortAnimInput_Quad::VehiclePitch' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Quad, VehicleRoll) == 0x00006C, "Member 'FFortAnimInput_Quad::VehicleRoll' has a wrong offset!");

// ScriptStruct FortniteGame.Recipe
// 0x0050 (0x0058 - 0x0008)
struct FRecipe final : public FTableRowBase
{
public:
	TArray<struct FFortItemQuantityPair>          RecipeResults;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsConsumed;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemQuantityPair>          RecipeCosts;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredCatalysts;                                 // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipe) == 0x000008, "Wrong alignment on FRecipe");
static_assert(sizeof(FRecipe) == 0x000058, "Wrong size on FRecipe");
static_assert(offsetof(FRecipe, RecipeResults) == 0x000008, "Member 'FRecipe::RecipeResults' has a wrong offset!");
static_assert(offsetof(FRecipe, bIsConsumed) == 0x000018, "Member 'FRecipe::bIsConsumed' has a wrong offset!");
static_assert(offsetof(FRecipe, RecipeCosts) == 0x000020, "Member 'FRecipe::RecipeCosts' has a wrong offset!");
static_assert(offsetof(FRecipe, RequiredCatalysts) == 0x000030, "Member 'FRecipe::RequiredCatalysts' has a wrong offset!");
static_assert(offsetof(FRecipe, Score) == 0x000050, "Member 'FRecipe::Score' has a wrong offset!");

// ScriptStruct FortniteGame.HeroSpecializationAttributeRequirement
// 0x0028 (0x0028 - 0x0000)
struct FHeroSpecializationAttributeRequirement final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumValue;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroSpecializationAttributeRequirement) == 0x000008, "Wrong alignment on FHeroSpecializationAttributeRequirement");
static_assert(sizeof(FHeroSpecializationAttributeRequirement) == 0x000028, "Wrong size on FHeroSpecializationAttributeRequirement");
static_assert(offsetof(FHeroSpecializationAttributeRequirement, Attribute) == 0x000000, "Member 'FHeroSpecializationAttributeRequirement::Attribute' has a wrong offset!");
static_assert(offsetof(FHeroSpecializationAttributeRequirement, MinimumValue) == 0x000020, "Member 'FHeroSpecializationAttributeRequirement::MinimumValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpecializationSlot
// 0x0088 (0x0088 - 0x0000)
struct FFortSpecializationSlot final
{
public:
	TSoftObjectPtr<class UFortAbilityKit>         GrantedAbilityKit;                                 // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortAbilityKit>         RemovedAbilityKit;                                 // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHeroSpecializationAttributeRequirement> AttributeRequirements;                             // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MinimumHeroLevel;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpecializationSlot) == 0x000008, "Wrong alignment on FFortSpecializationSlot");
static_assert(sizeof(FFortSpecializationSlot) == 0x000088, "Wrong size on FFortSpecializationSlot");
static_assert(offsetof(FFortSpecializationSlot, GrantedAbilityKit) == 0x000000, "Member 'FFortSpecializationSlot::GrantedAbilityKit' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, RemovedAbilityKit) == 0x000028, "Member 'FFortSpecializationSlot::RemovedAbilityKit' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, AttributeRequirements) == 0x000050, "Member 'FFortSpecializationSlot::AttributeRequirements' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, RequiredTags) == 0x000060, "Member 'FFortSpecializationSlot::RequiredTags' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, MinimumHeroLevel) == 0x000080, "Member 'FFortSpecializationSlot::MinimumHeroLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortCurrencyData
// 0x0040 (0x0048 - 0x0008)
struct FFortCurrencyData final : public FTableRowBase
{
public:
	class FString                                 TemplateName;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxStackSize;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxNumStacks;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ProfileType;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Platform;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPrivate;                                          // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCurrencyData) == 0x000008, "Wrong alignment on FFortCurrencyData");
static_assert(sizeof(FFortCurrencyData) == 0x000048, "Wrong size on FFortCurrencyData");
static_assert(offsetof(FFortCurrencyData, TemplateName) == 0x000008, "Member 'FFortCurrencyData::TemplateName' has a wrong offset!");
static_assert(offsetof(FFortCurrencyData, MaxStackSize) == 0x000018, "Member 'FFortCurrencyData::MaxStackSize' has a wrong offset!");
static_assert(offsetof(FFortCurrencyData, MaxNumStacks) == 0x00001C, "Member 'FFortCurrencyData::MaxNumStacks' has a wrong offset!");
static_assert(offsetof(FFortCurrencyData, ProfileType) == 0x000020, "Member 'FFortCurrencyData::ProfileType' has a wrong offset!");
static_assert(offsetof(FFortCurrencyData, Platform) == 0x000030, "Member 'FFortCurrencyData::Platform' has a wrong offset!");
static_assert(offsetof(FFortCurrencyData, bPrivate) == 0x000040, "Member 'FFortCurrencyData::bPrivate' has a wrong offset!");

// ScriptStruct FortniteGame.ChosenQuotaInfo
// 0x000C (0x000C - 0x0000)
struct FChosenQuotaInfo final
{
public:
	int32                                         LootTier;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootTierKey;                                       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChosenQuotaInfo) == 0x000004, "Wrong alignment on FChosenQuotaInfo");
static_assert(sizeof(FChosenQuotaInfo) == 0x00000C, "Wrong size on FChosenQuotaInfo");
static_assert(offsetof(FChosenQuotaInfo, LootTier) == 0x000000, "Member 'FChosenQuotaInfo::LootTier' has a wrong offset!");
static_assert(offsetof(FChosenQuotaInfo, LootTierKey) == 0x000004, "Member 'FChosenQuotaInfo::LootTierKey' has a wrong offset!");

// ScriptStruct FortniteGame.SlopeWarpingFootData
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x10) FSlopeWarpingFootData final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlopeWarpingFootData) == 0x000010, "Wrong alignment on FSlopeWarpingFootData");
static_assert(sizeof(FSlopeWarpingFootData) == 0x0000A0, "Wrong size on FSlopeWarpingFootData");

// ScriptStruct FortniteGame.FortSurvivorNameData
// 0x0018 (0x0020 - 0x0008)
struct FFortSurvivorNameData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSurvivorNameData) == 0x000008, "Wrong alignment on FFortSurvivorNameData");
static_assert(sizeof(FFortSurvivorNameData) == 0x000020, "Wrong size on FFortSurvivorNameData");
static_assert(offsetof(FFortSurvivorNameData, Name) == 0x000008, "Member 'FFortSurvivorNameData::Name' has a wrong offset!");

// ScriptStruct FortniteGame.CombatEventData
// 0x0038 (0x0038 - 0x0000)
struct FCombatEventData final
{
public:
	float                                         Heat;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeatContribution;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolDownRate;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCombatEventContribution                  ContributionType;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCombatEventData) == 0x000008, "Wrong alignment on FCombatEventData");
static_assert(sizeof(FCombatEventData) == 0x000038, "Wrong size on FCombatEventData");
static_assert(offsetof(FCombatEventData, Heat) == 0x000000, "Member 'FCombatEventData::Heat' has a wrong offset!");
static_assert(offsetof(FCombatEventData, MaxHeatContribution) == 0x000004, "Member 'FCombatEventData::MaxHeatContribution' has a wrong offset!");
static_assert(offsetof(FCombatEventData, CoolDownRate) == 0x000008, "Member 'FCombatEventData::CoolDownRate' has a wrong offset!");
static_assert(offsetof(FCombatEventData, EventName) == 0x000010, "Member 'FCombatEventData::EventName' has a wrong offset!");
static_assert(offsetof(FCombatEventData, DebugGraphColor) == 0x000020, "Member 'FCombatEventData::DebugGraphColor' has a wrong offset!");
static_assert(offsetof(FCombatEventData, ContributionType) == 0x000030, "Member 'FCombatEventData::ContributionType' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameHighScoreRow
// 0x0008 (0x0010 - 0x0008)
struct FMinigameHighScoreRow final : public FTableRowBase
{
public:
	class UDataTable*                             HighScoresTable;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinigameHighScoreRow) == 0x000008, "Wrong alignment on FMinigameHighScoreRow");
static_assert(sizeof(FMinigameHighScoreRow) == 0x000010, "Wrong size on FMinigameHighScoreRow");
static_assert(offsetof(FMinigameHighScoreRow, HighScoresTable) == 0x000008, "Member 'FMinigameHighScoreRow::HighScoresTable' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnGroupProgression
// 0x0008 (0x0008 - 0x0000)
struct FSpawnGroupProgression final
{
public:
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupProgression) == 0x000008, "Wrong alignment on FSpawnGroupProgression");
static_assert(sizeof(FSpawnGroupProgression) == 0x000008, "Wrong size on FSpawnGroupProgression");
static_assert(offsetof(FSpawnGroupProgression, SpawnGroup) == 0x000000, "Member 'FSpawnGroupProgression::SpawnGroup' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementData_Tutorial
// 0x0050 (0x0138 - 0x00E8)
struct FFortClientAnnouncementData_Tutorial final : public FFortClientAnnouncementData_Basic
{
public:
	float                                         AutoContinueDelay;                                 // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NameText;                                          // 0x00F0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SystemText;                                        // 0x0108(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bButtonEnabled;                                    // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightboxEnabled;                                  // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightboxDisableInputOnly;                         // 0x0122(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x0124(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VAlign;                                            // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HAlign;                                            // 0x0135(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortClientAnnouncementData_Tutorial) == 0x000008, "Wrong alignment on FFortClientAnnouncementData_Tutorial");
static_assert(sizeof(FFortClientAnnouncementData_Tutorial) == 0x000138, "Wrong size on FFortClientAnnouncementData_Tutorial");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, AutoContinueDelay) == 0x0000E8, "Member 'FFortClientAnnouncementData_Tutorial::AutoContinueDelay' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, NameText) == 0x0000F0, "Member 'FFortClientAnnouncementData_Tutorial::NameText' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, SystemText) == 0x000108, "Member 'FFortClientAnnouncementData_Tutorial::SystemText' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, bButtonEnabled) == 0x000120, "Member 'FFortClientAnnouncementData_Tutorial::bButtonEnabled' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, bLightboxEnabled) == 0x000121, "Member 'FFortClientAnnouncementData_Tutorial::bLightboxEnabled' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, bLightboxDisableInputOnly) == 0x000122, "Member 'FFortClientAnnouncementData_Tutorial::bLightboxDisableInputOnly' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, Padding) == 0x000124, "Member 'FFortClientAnnouncementData_Tutorial::Padding' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, VAlign) == 0x000134, "Member 'FFortClientAnnouncementData_Tutorial::VAlign' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, HAlign) == 0x000135, "Member 'FFortClientAnnouncementData_Tutorial::HAlign' has a wrong offset!");

// ScriptStruct FortniteGame.SphericalDriveParams
// 0x0048 (0x0048 - 0x0000)
struct FSphericalDriveParams final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowSpeedAccelerationForce;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighSpeedAccelerationForce;                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedKmh;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInclineDeg;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAirControlForce;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAirControlSpeedKmh;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoBrakeSpeedKmh;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficient;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficientAutoBrake;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAutoBrakeSpeedKmh;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactRepulsionForce;                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactThreshold;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MassDirectionMaxAngleDeg;                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MassDirectionStiffness;                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMassDirectionInvert;                              // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShellAngularDrag;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TractionMultiplier;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSphericalDriveParams) == 0x000004, "Wrong alignment on FSphericalDriveParams");
static_assert(sizeof(FSphericalDriveParams) == 0x000048, "Wrong size on FSphericalDriveParams");
static_assert(offsetof(FSphericalDriveParams, Radius) == 0x000000, "Member 'FSphericalDriveParams::Radius' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, LowSpeedAccelerationForce) == 0x000004, "Member 'FSphericalDriveParams::LowSpeedAccelerationForce' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, HighSpeedAccelerationForce) == 0x000008, "Member 'FSphericalDriveParams::HighSpeedAccelerationForce' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, MaxSpeedKmh) == 0x00000C, "Member 'FSphericalDriveParams::MaxSpeedKmh' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, MaxInclineDeg) == 0x000010, "Member 'FSphericalDriveParams::MaxInclineDeg' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, MaxAirControlForce) == 0x000014, "Member 'FSphericalDriveParams::MaxAirControlForce' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, MaxAirControlSpeedKmh) == 0x000018, "Member 'FSphericalDriveParams::MaxAirControlSpeedKmh' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, AutoBrakeSpeedKmh) == 0x00001C, "Member 'FSphericalDriveParams::AutoBrakeSpeedKmh' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, DragCoefficient) == 0x000020, "Member 'FSphericalDriveParams::DragCoefficient' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, DragCoefficientAutoBrake) == 0x000024, "Member 'FSphericalDriveParams::DragCoefficientAutoBrake' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, MaxAutoBrakeSpeedKmh) == 0x000028, "Member 'FSphericalDriveParams::MaxAutoBrakeSpeedKmh' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, ContactRepulsionForce) == 0x00002C, "Member 'FSphericalDriveParams::ContactRepulsionForce' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, ContactThreshold) == 0x000030, "Member 'FSphericalDriveParams::ContactThreshold' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, MassDirectionMaxAngleDeg) == 0x000034, "Member 'FSphericalDriveParams::MassDirectionMaxAngleDeg' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, MassDirectionStiffness) == 0x000038, "Member 'FSphericalDriveParams::MassDirectionStiffness' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, bMassDirectionInvert) == 0x00003C, "Member 'FSphericalDriveParams::bMassDirectionInvert' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, ShellAngularDrag) == 0x000040, "Member 'FSphericalDriveParams::ShellAngularDrag' has a wrong offset!");
static_assert(offsetof(FSphericalDriveParams, TractionMultiplier) == 0x000044, "Member 'FSphericalDriveParams::TractionMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingGridActorFilter
// 0x0004 (0x0004 - 0x0000)
struct FBuildingGridActorFilter final
{
public:
	bool                                          bIncludeWalls;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeFloors;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeFloorInTop;                                // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeCenterCell;                                // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingGridActorFilter) == 0x000001, "Wrong alignment on FBuildingGridActorFilter");
static_assert(sizeof(FBuildingGridActorFilter) == 0x000004, "Wrong size on FBuildingGridActorFilter");
static_assert(offsetof(FBuildingGridActorFilter, bIncludeWalls) == 0x000000, "Member 'FBuildingGridActorFilter::bIncludeWalls' has a wrong offset!");
static_assert(offsetof(FBuildingGridActorFilter, bIncludeFloors) == 0x000001, "Member 'FBuildingGridActorFilter::bIncludeFloors' has a wrong offset!");
static_assert(offsetof(FBuildingGridActorFilter, bIncludeFloorInTop) == 0x000002, "Member 'FBuildingGridActorFilter::bIncludeFloorInTop' has a wrong offset!");
static_assert(offsetof(FBuildingGridActorFilter, bIncludeCenterCell) == 0x000003, "Member 'FBuildingGridActorFilter::bIncludeCenterCell' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseSquad
// 0x0080 (0x0088 - 0x0008)
struct FHomebaseSquad final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ShortDisplayName;                                  // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EFortHomebaseSquadType                        SquadType;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ManagerSynergyTag;                                 // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHomebaseSquadSlot>             CrewSlots;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTheaterTags;                               // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         MaxNumDefendersAllowedInLevel;                     // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumDefendersAllowedInGroupLevel;                // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsiderNumPlayersForMaxNumDefenders;             // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysRemoveOldestDefenderWhenReplacing;          // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHomebaseSquad) == 0x000008, "Wrong alignment on FHomebaseSquad");
static_assert(sizeof(FHomebaseSquad) == 0x000088, "Wrong size on FHomebaseSquad");
static_assert(offsetof(FHomebaseSquad, DisplayName) == 0x000008, "Member 'FHomebaseSquad::DisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, ShortDisplayName) == 0x000020, "Member 'FHomebaseSquad::ShortDisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, SquadType) == 0x000038, "Member 'FHomebaseSquad::SquadType' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, ManagerSynergyTag) == 0x00003C, "Member 'FHomebaseSquad::ManagerSynergyTag' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, CrewSlots) == 0x000048, "Member 'FHomebaseSquad::CrewSlots' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, RequiredTheaterTags) == 0x000058, "Member 'FHomebaseSquad::RequiredTheaterTags' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, MaxNumDefendersAllowedInLevel) == 0x000078, "Member 'FHomebaseSquad::MaxNumDefendersAllowedInLevel' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, MaxNumDefendersAllowedInGroupLevel) == 0x00007C, "Member 'FHomebaseSquad::MaxNumDefendersAllowedInGroupLevel' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, bConsiderNumPlayersForMaxNumDefenders) == 0x000080, "Member 'FHomebaseSquad::bConsiderNumPlayersForMaxNumDefenders' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, bAlwaysRemoveOldestDefenderWhenReplacing) == 0x000081, "Member 'FHomebaseSquad::bAlwaysRemoveOldestDefenderWhenReplacing' has a wrong offset!");

// ScriptStruct FortniteGame.McpVariantReader
// 0x0030 (0x0030 - 0x0000)
struct FMcpVariantReader final
{
public:
	class FString                                 Channel;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Active;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Owned;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMcpVariantReader) == 0x000008, "Wrong alignment on FMcpVariantReader");
static_assert(sizeof(FMcpVariantReader) == 0x000030, "Wrong size on FMcpVariantReader");
static_assert(offsetof(FMcpVariantReader, Channel) == 0x000000, "Member 'FMcpVariantReader::Channel' has a wrong offset!");
static_assert(offsetof(FMcpVariantReader, Active) == 0x000010, "Member 'FMcpVariantReader::Active' has a wrong offset!");
static_assert(offsetof(FMcpVariantReader, Owned) == 0x000020, "Member 'FMcpVariantReader::Owned' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientObservedStat
// 0x0014 (0x0020 - 0x000C)
struct alignas(0x08) FFortClientObservedStat final : public FFastArraySerializerItem
{
public:
	class FName                                   StatName;                                          // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortClientObservedStat) == 0x000008, "Wrong alignment on FFortClientObservedStat");
static_assert(sizeof(FFortClientObservedStat) == 0x000020, "Wrong size on FFortClientObservedStat");
static_assert(offsetof(FFortClientObservedStat, StatName) == 0x00000C, "Member 'FFortClientObservedStat::StatName' has a wrong offset!");
static_assert(offsetof(FFortClientObservedStat, StatValue) == 0x000014, "Member 'FFortClientObservedStat::StatValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientObservedStatArray
// 0x0030 (0x0138 - 0x0108)
struct FFortClientObservedStatArray final : public FFastArraySerializer
{
public:
	class UStatManager*                           MyStatManager;                                     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FFortClientObservedStat>        ObservedStats;                                     // 0x0110(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x18];                                     // 0x0120(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortClientObservedStatArray) == 0x000008, "Wrong alignment on FFortClientObservedStatArray");
static_assert(sizeof(FFortClientObservedStatArray) == 0x000138, "Wrong size on FFortClientObservedStatArray");
static_assert(offsetof(FFortClientObservedStatArray, MyStatManager) == 0x000108, "Member 'FFortClientObservedStatArray::MyStatManager' has a wrong offset!");
static_assert(offsetof(FFortClientObservedStatArray, ObservedStats) == 0x000110, "Member 'FFortClientObservedStatArray::ObservedStats' has a wrong offset!");

// ScriptStruct FortniteGame.VerifyProfileTokenPayload
// 0x0050 (0x0050 - 0x0000)
struct FVerifyProfileTokenPayload final
{
public:
	TMap<class FString, class FString>            ProfileTokens;                                     // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVerifyProfileTokenPayload) == 0x000008, "Wrong alignment on FVerifyProfileTokenPayload");
static_assert(sizeof(FVerifyProfileTokenPayload) == 0x000050, "Wrong size on FVerifyProfileTokenPayload");
static_assert(offsetof(FVerifyProfileTokenPayload, ProfileTokens) == 0x000000, "Member 'FVerifyProfileTokenPayload::ProfileTokens' has a wrong offset!");

// ScriptStruct FortniteGame.FortProjectileCues
// 0x0030 (0x0030 - 0x0000)
struct FFortProjectileCues final
{
public:
	struct FGameplayCueTag                        Spawn;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayCueTag                        HitPawn;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayCueTag                        HitWorld;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOrientHitGCsToProjectileVelocity;                 // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSurfaceNormalDeviationAngle;                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueTag                        Bounce;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayCueTag                        Explosion;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortProjectileCues) == 0x000004, "Wrong alignment on FFortProjectileCues");
static_assert(sizeof(FFortProjectileCues) == 0x000030, "Wrong size on FFortProjectileCues");
static_assert(offsetof(FFortProjectileCues, Spawn) == 0x000000, "Member 'FFortProjectileCues::Spawn' has a wrong offset!");
static_assert(offsetof(FFortProjectileCues, HitPawn) == 0x000008, "Member 'FFortProjectileCues::HitPawn' has a wrong offset!");
static_assert(offsetof(FFortProjectileCues, HitWorld) == 0x000010, "Member 'FFortProjectileCues::HitWorld' has a wrong offset!");
static_assert(offsetof(FFortProjectileCues, bOrientHitGCsToProjectileVelocity) == 0x000018, "Member 'FFortProjectileCues::bOrientHitGCsToProjectileVelocity' has a wrong offset!");
static_assert(offsetof(FFortProjectileCues, MaxSurfaceNormalDeviationAngle) == 0x00001C, "Member 'FFortProjectileCues::MaxSurfaceNormalDeviationAngle' has a wrong offset!");
static_assert(offsetof(FFortProjectileCues, Bounce) == 0x000020, "Member 'FFortProjectileCues::Bounce' has a wrong offset!");
static_assert(offsetof(FFortProjectileCues, Explosion) == 0x000028, "Member 'FFortProjectileCues::Explosion' has a wrong offset!");

// ScriptStruct FortniteGame.AIDiscouragedGoalTimer
// 0x0028 (0x0028 - 0x0000)
struct FAIDiscouragedGoalTimer final
{
public:
	struct FFortAIGoalInfo                        DiscouragedGoalInfo;                               // 0x0000(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	double                                        ExpirationTime;                                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumberOfTimesMarkedForDiscouragement;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIDiscouragedGoalTimer) == 0x000008, "Wrong alignment on FAIDiscouragedGoalTimer");
static_assert(sizeof(FAIDiscouragedGoalTimer) == 0x000028, "Wrong size on FAIDiscouragedGoalTimer");
static_assert(offsetof(FAIDiscouragedGoalTimer, DiscouragedGoalInfo) == 0x000000, "Member 'FAIDiscouragedGoalTimer::DiscouragedGoalInfo' has a wrong offset!");
static_assert(offsetof(FAIDiscouragedGoalTimer, ExpirationTime) == 0x000018, "Member 'FAIDiscouragedGoalTimer::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FAIDiscouragedGoalTimer, NumberOfTimesMarkedForDiscouragement) == 0x000020, "Member 'FAIDiscouragedGoalTimer::NumberOfTimesMarkedForDiscouragement' has a wrong offset!");

// ScriptStruct FortniteGame.DroppingAgentData
// 0x0018 (0x0018 - 0x0000)
struct FDroppingAgentData final
{
public:
	class AAthenaAIController*                    AIController;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingActor*                         MovementBase;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDroppingAgentData) == 0x000008, "Wrong alignment on FDroppingAgentData");
static_assert(sizeof(FDroppingAgentData) == 0x000018, "Wrong size on FDroppingAgentData");
static_assert(offsetof(FDroppingAgentData, AIController) == 0x000000, "Member 'FDroppingAgentData::AIController' has a wrong offset!");
static_assert(offsetof(FDroppingAgentData, MovementBase) == 0x000008, "Member 'FDroppingAgentData::MovementBase' has a wrong offset!");

// ScriptStruct FortniteGame.BarrierObjectiveDisplayData
// 0x0030 (0x0030 - 0x0000)
struct FBarrierObjectiveDisplayData final
{
public:
	class UStaticMesh*                            HeadMesh;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshScale;                                         // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshRelativeOffset;                                // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MaterialsToSwap;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBarrierObjectiveDisplayData) == 0x000008, "Wrong alignment on FBarrierObjectiveDisplayData");
static_assert(sizeof(FBarrierObjectiveDisplayData) == 0x000030, "Wrong size on FBarrierObjectiveDisplayData");
static_assert(offsetof(FBarrierObjectiveDisplayData, HeadMesh) == 0x000000, "Member 'FBarrierObjectiveDisplayData::HeadMesh' has a wrong offset!");
static_assert(offsetof(FBarrierObjectiveDisplayData, MeshScale) == 0x000008, "Member 'FBarrierObjectiveDisplayData::MeshScale' has a wrong offset!");
static_assert(offsetof(FBarrierObjectiveDisplayData, MeshRelativeOffset) == 0x000014, "Member 'FBarrierObjectiveDisplayData::MeshRelativeOffset' has a wrong offset!");
static_assert(offsetof(FBarrierObjectiveDisplayData, MaterialsToSwap) == 0x000020, "Member 'FBarrierObjectiveDisplayData::MaterialsToSwap' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaBroadcastKillFeedEntryInfo
// 0x0050 (0x0050 - 0x0000)
struct FAthenaBroadcastKillFeedEntryInfo final
{
public:
	class FText                                   InstigatorPlayerName;                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   VictimPlayerName;                                  // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DistanceText;                                      // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EAthenaBroadcastKillFeedEntryType             EntryType;                                         // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaBroadcastKillFeedEntryInfo) == 0x000008, "Wrong alignment on FAthenaBroadcastKillFeedEntryInfo");
static_assert(sizeof(FAthenaBroadcastKillFeedEntryInfo) == 0x000050, "Wrong size on FAthenaBroadcastKillFeedEntryInfo");
static_assert(offsetof(FAthenaBroadcastKillFeedEntryInfo, InstigatorPlayerName) == 0x000000, "Member 'FAthenaBroadcastKillFeedEntryInfo::InstigatorPlayerName' has a wrong offset!");
static_assert(offsetof(FAthenaBroadcastKillFeedEntryInfo, VictimPlayerName) == 0x000018, "Member 'FAthenaBroadcastKillFeedEntryInfo::VictimPlayerName' has a wrong offset!");
static_assert(offsetof(FAthenaBroadcastKillFeedEntryInfo, DistanceText) == 0x000030, "Member 'FAthenaBroadcastKillFeedEntryInfo::DistanceText' has a wrong offset!");
static_assert(offsetof(FAthenaBroadcastKillFeedEntryInfo, EntryType) == 0x000048, "Member 'FAthenaBroadcastKillFeedEntryInfo::EntryType' has a wrong offset!");

// ScriptStruct FortniteGame.PointConfiguration
// 0x0010 (0x0010 - 0x0000)
struct FPointConfiguration final
{
public:
	TArray<struct FVector>                        PointLocations;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPointConfiguration) == 0x000008, "Wrong alignment on FPointConfiguration");
static_assert(sizeof(FPointConfiguration) == 0x000010, "Wrong size on FPointConfiguration");
static_assert(offsetof(FPointConfiguration, PointLocations) == 0x000000, "Member 'FPointConfiguration::PointLocations' has a wrong offset!");

// ScriptStruct FortniteGame.FortCosmeticAdaptiveStatPair
// 0x000C (0x000C - 0x0000)
struct FFortCosmeticAdaptiveStatPair final
{
public:
	struct FFortStatManagerTag                    StatTag;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCosmeticAdaptiveStatPair) == 0x000004, "Wrong alignment on FFortCosmeticAdaptiveStatPair");
static_assert(sizeof(FFortCosmeticAdaptiveStatPair) == 0x00000C, "Wrong size on FFortCosmeticAdaptiveStatPair");
static_assert(offsetof(FFortCosmeticAdaptiveStatPair, StatTag) == 0x000000, "Member 'FFortCosmeticAdaptiveStatPair::StatTag' has a wrong offset!");
static_assert(offsetof(FFortCosmeticAdaptiveStatPair, StatValue) == 0x000008, "Member 'FFortCosmeticAdaptiveStatPair::StatValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortCosmeticAdaptiveStatPreview
// 0x0028 (0x0028 - 0x0000)
struct FFortCosmeticAdaptiveStatPreview final
{
public:
	class FText                                   UnlockCondition;                                   // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortCosmeticAdaptiveStatPair>  StatValues;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCosmeticAdaptiveStatPreview) == 0x000008, "Wrong alignment on FFortCosmeticAdaptiveStatPreview");
static_assert(sizeof(FFortCosmeticAdaptiveStatPreview) == 0x000028, "Wrong size on FFortCosmeticAdaptiveStatPreview");
static_assert(offsetof(FFortCosmeticAdaptiveStatPreview, UnlockCondition) == 0x000000, "Member 'FFortCosmeticAdaptiveStatPreview::UnlockCondition' has a wrong offset!");
static_assert(offsetof(FFortCosmeticAdaptiveStatPreview, StatValues) == 0x000018, "Member 'FFortCosmeticAdaptiveStatPreview::StatValues' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameSpawnerSpawnParams
// 0x0060 (0x0060 - 0x0000)
struct FMinigameSpawnerSpawnParams final
{
public:
	TSoftObjectPtr<class UFortWorldItemDefinition> PickupToSpawn;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, SaveGame, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickupQuantity;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0030(0x0030)(BlueprintVisible, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinigameSpawnerSpawnParams) == 0x000010, "Wrong alignment on FMinigameSpawnerSpawnParams");
static_assert(sizeof(FMinigameSpawnerSpawnParams) == 0x000060, "Wrong size on FMinigameSpawnerSpawnParams");
static_assert(offsetof(FMinigameSpawnerSpawnParams, PickupToSpawn) == 0x000000, "Member 'FMinigameSpawnerSpawnParams::PickupToSpawn' has a wrong offset!");
static_assert(offsetof(FMinigameSpawnerSpawnParams, PickupQuantity) == 0x000028, "Member 'FMinigameSpawnerSpawnParams::PickupQuantity' has a wrong offset!");
static_assert(offsetof(FMinigameSpawnerSpawnParams, SpawnTransform) == 0x000030, "Member 'FMinigameSpawnerSpawnParams::SpawnTransform' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterQueryDirectionTracker
// 0x0048 (0x0048 - 0x0000)
struct FFortAIEncounterQueryDirectionTracker final
{
public:
	bool                                          bHasTriedPreviousDirections;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFortEncounterDirection>               PreviousQueryDirections;                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               ChosenDirections;                                  // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               FailedDirections;                                  // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               AvailableDirections;                               // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterQueryDirectionTracker) == 0x000008, "Wrong alignment on FFortAIEncounterQueryDirectionTracker");
static_assert(sizeof(FFortAIEncounterQueryDirectionTracker) == 0x000048, "Wrong size on FFortAIEncounterQueryDirectionTracker");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, bHasTriedPreviousDirections) == 0x000000, "Member 'FFortAIEncounterQueryDirectionTracker::bHasTriedPreviousDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, PreviousQueryDirections) == 0x000008, "Member 'FFortAIEncounterQueryDirectionTracker::PreviousQueryDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, ChosenDirections) == 0x000018, "Member 'FFortAIEncounterQueryDirectionTracker::ChosenDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, FailedDirections) == 0x000028, "Member 'FFortAIEncounterQueryDirectionTracker::FailedDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, AvailableDirections) == 0x000038, "Member 'FFortAIEncounterQueryDirectionTracker::AvailableDirections' has a wrong offset!");

// ScriptStruct FortniteGame.FortCharacterPartMontageInfo
// 0x0010 (0x0010 - 0x0000)
struct FFortCharacterPartMontageInfo final
{
public:
	EFortCustomPartType                           CharacterPart;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCharacterPartMontageInfo) == 0x000008, "Wrong alignment on FFortCharacterPartMontageInfo");
static_assert(sizeof(FFortCharacterPartMontageInfo) == 0x000010, "Wrong size on FFortCharacterPartMontageInfo");
static_assert(offsetof(FFortCharacterPartMontageInfo, CharacterPart) == 0x000000, "Member 'FFortCharacterPartMontageInfo::CharacterPart' has a wrong offset!");
static_assert(offsetof(FFortCharacterPartMontageInfo, AnimMontage) == 0x000008, "Member 'FFortCharacterPartMontageInfo::AnimMontage' has a wrong offset!");

// ScriptStruct FortniteGame.VehicleCosmeticInfo
// 0x0038 (0x0038 - 0x0000)
struct FVehicleCosmeticInfo final
{
public:
	class AFortPlayerPawn*                        MostRecentCosmeticSourcePawn;                      // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaVehicleCosmeticItemDefinition*   ActiveCosmeticItem;                                // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        PawnAssociatedWithWrap;                            // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaItemWrapDefinition*              ActiveCosmeticWrap;                                // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                SpawnedCosmeticComponents;                         // 0x0020(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ACustomItemWrapModifier*                ItemWrapModifier;                                  // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleCosmeticInfo) == 0x000008, "Wrong alignment on FVehicleCosmeticInfo");
static_assert(sizeof(FVehicleCosmeticInfo) == 0x000038, "Wrong size on FVehicleCosmeticInfo");
static_assert(offsetof(FVehicleCosmeticInfo, MostRecentCosmeticSourcePawn) == 0x000000, "Member 'FVehicleCosmeticInfo::MostRecentCosmeticSourcePawn' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticInfo, ActiveCosmeticItem) == 0x000008, "Member 'FVehicleCosmeticInfo::ActiveCosmeticItem' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticInfo, PawnAssociatedWithWrap) == 0x000010, "Member 'FVehicleCosmeticInfo::PawnAssociatedWithWrap' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticInfo, ActiveCosmeticWrap) == 0x000018, "Member 'FVehicleCosmeticInfo::ActiveCosmeticWrap' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticInfo, SpawnedCosmeticComponents) == 0x000020, "Member 'FVehicleCosmeticInfo::SpawnedCosmeticComponents' has a wrong offset!");
static_assert(offsetof(FVehicleCosmeticInfo, ItemWrapModifier) == 0x000030, "Member 'FVehicleCosmeticInfo::ItemWrapModifier' has a wrong offset!");

// ScriptStruct FortniteGame.FortCosmeticVariantPreview
// 0x0040 (0x0040 - 0x0000)
struct FFortCosmeticVariantPreview final
{
public:
	class FText                                   UnlockCondition;                                   // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         PreviewTime;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMcpVariantChannelInfo>         VariantOptions;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortCosmeticVariantPreviewElement> AdditionalItems;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCosmeticVariantPreview) == 0x000008, "Wrong alignment on FFortCosmeticVariantPreview");
static_assert(sizeof(FFortCosmeticVariantPreview) == 0x000040, "Wrong size on FFortCosmeticVariantPreview");
static_assert(offsetof(FFortCosmeticVariantPreview, UnlockCondition) == 0x000000, "Member 'FFortCosmeticVariantPreview::UnlockCondition' has a wrong offset!");
static_assert(offsetof(FFortCosmeticVariantPreview, PreviewTime) == 0x000018, "Member 'FFortCosmeticVariantPreview::PreviewTime' has a wrong offset!");
static_assert(offsetof(FFortCosmeticVariantPreview, VariantOptions) == 0x000020, "Member 'FFortCosmeticVariantPreview::VariantOptions' has a wrong offset!");
static_assert(offsetof(FFortCosmeticVariantPreview, AdditionalItems) == 0x000030, "Member 'FFortCosmeticVariantPreview::AdditionalItems' has a wrong offset!");

// ScriptStruct FortniteGame.FortGamepadSensitivityPreset
// 0x0020 (0x0020 - 0x0000)
struct FFortGamepadSensitivityPreset final
{
public:
	uint32                                        LookHorizontalSpeed;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookVerticalSpeed;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookHorizontalSpeedAds;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookVerticalSpeedAds;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookHorizontalBoostSpeed;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookVerticalBoostSpeed;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookHorizontalBoostSpeedAds;                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookVerticalBoostSpeedAds;                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGamepadSensitivityPreset) == 0x000004, "Wrong alignment on FFortGamepadSensitivityPreset");
static_assert(sizeof(FFortGamepadSensitivityPreset) == 0x000020, "Wrong size on FFortGamepadSensitivityPreset");
static_assert(offsetof(FFortGamepadSensitivityPreset, LookHorizontalSpeed) == 0x000000, "Member 'FFortGamepadSensitivityPreset::LookHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FFortGamepadSensitivityPreset, LookVerticalSpeed) == 0x000004, "Member 'FFortGamepadSensitivityPreset::LookVerticalSpeed' has a wrong offset!");
static_assert(offsetof(FFortGamepadSensitivityPreset, LookHorizontalSpeedAds) == 0x000008, "Member 'FFortGamepadSensitivityPreset::LookHorizontalSpeedAds' has a wrong offset!");
static_assert(offsetof(FFortGamepadSensitivityPreset, LookVerticalSpeedAds) == 0x00000C, "Member 'FFortGamepadSensitivityPreset::LookVerticalSpeedAds' has a wrong offset!");
static_assert(offsetof(FFortGamepadSensitivityPreset, LookHorizontalBoostSpeed) == 0x000010, "Member 'FFortGamepadSensitivityPreset::LookHorizontalBoostSpeed' has a wrong offset!");
static_assert(offsetof(FFortGamepadSensitivityPreset, LookVerticalBoostSpeed) == 0x000014, "Member 'FFortGamepadSensitivityPreset::LookVerticalBoostSpeed' has a wrong offset!");
static_assert(offsetof(FFortGamepadSensitivityPreset, LookHorizontalBoostSpeedAds) == 0x000018, "Member 'FFortGamepadSensitivityPreset::LookHorizontalBoostSpeedAds' has a wrong offset!");
static_assert(offsetof(FFortGamepadSensitivityPreset, LookVerticalBoostSpeedAds) == 0x00001C, "Member 'FFortGamepadSensitivityPreset::LookVerticalBoostSpeedAds' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaCosmeticMaterialOverride
// 0x0038 (0x0038 - 0x0000)
struct FAthenaCosmeticMaterialOverride final
{
public:
	class FName                                   ComponentName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialOverrideIndex;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      OverrideMaterial;                                  // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaCosmeticMaterialOverride) == 0x000008, "Wrong alignment on FAthenaCosmeticMaterialOverride");
static_assert(sizeof(FAthenaCosmeticMaterialOverride) == 0x000038, "Wrong size on FAthenaCosmeticMaterialOverride");
static_assert(offsetof(FAthenaCosmeticMaterialOverride, ComponentName) == 0x000000, "Member 'FAthenaCosmeticMaterialOverride::ComponentName' has a wrong offset!");
static_assert(offsetof(FAthenaCosmeticMaterialOverride, MaterialOverrideIndex) == 0x000008, "Member 'FAthenaCosmeticMaterialOverride::MaterialOverrideIndex' has a wrong offset!");
static_assert(offsetof(FAthenaCosmeticMaterialOverride, OverrideMaterial) == 0x000010, "Member 'FAthenaCosmeticMaterialOverride::OverrideMaterial' has a wrong offset!");

// ScriptStruct FortniteGame.FillFloorPositionData
// 0x0068 (0x0068 - 0x0000)
struct FFillFloorPositionData final
{
public:
	struct FScalableFloat                         MoveTime;                                          // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Height;                                            // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         WaitTime;                                          // 0x0040(0x0020)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFillFloorPositionData) == 0x000008, "Wrong alignment on FFillFloorPositionData");
static_assert(sizeof(FFillFloorPositionData) == 0x000068, "Wrong size on FFillFloorPositionData");
static_assert(offsetof(FFillFloorPositionData, MoveTime) == 0x000000, "Member 'FFillFloorPositionData::MoveTime' has a wrong offset!");
static_assert(offsetof(FFillFloorPositionData, Height) == 0x000020, "Member 'FFillFloorPositionData::Height' has a wrong offset!");
static_assert(offsetof(FFillFloorPositionData, WaitTime) == 0x000040, "Member 'FFillFloorPositionData::WaitTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackEvent
// 0x0030 (0x0030 - 0x0000)
struct FFortFeedbackEvent final
{
public:
	class AFortPawn*                              Instigator;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Recipient;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortFeedbackHandle                    Handle;                                            // 0x0010(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverriddenQueuing;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackEvent) == 0x000008, "Wrong alignment on FFortFeedbackEvent");
static_assert(sizeof(FFortFeedbackEvent) == 0x000030, "Wrong size on FFortFeedbackEvent");
static_assert(offsetof(FFortFeedbackEvent, Instigator) == 0x000000, "Member 'FFortFeedbackEvent::Instigator' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEvent, Recipient) == 0x000008, "Member 'FFortFeedbackEvent::Recipient' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEvent, Handle) == 0x000010, "Member 'FFortFeedbackEvent::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEvent, Delay) == 0x000028, "Member 'FFortFeedbackEvent::Delay' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEvent, bOverriddenQueuing) == 0x00002C, "Member 'FFortFeedbackEvent::bOverriddenQueuing' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_CreativeMoveTool
// 0x0001 (0x0001 - 0x0000)
struct FFortAnimInput_CreativeMoveTool final
{
public:
	bool                                          bIsFlying;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_CreativeMoveTool) == 0x000001, "Wrong alignment on FFortAnimInput_CreativeMoveTool");
static_assert(sizeof(FFortAnimInput_CreativeMoveTool) == 0x000001, "Wrong size on FFortAnimInput_CreativeMoveTool");
static_assert(offsetof(FFortAnimInput_CreativeMoveTool, bIsFlying) == 0x000000, "Member 'FFortAnimInput_CreativeMoveTool::bIsFlying' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayTagMessage
// 0x0038 (0x0038 - 0x0000)
struct FGameplayTagMessage final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayTagMessage) == 0x000008, "Wrong alignment on FGameplayTagMessage");
static_assert(sizeof(FGameplayTagMessage) == 0x000038, "Wrong size on FGameplayTagMessage");
static_assert(offsetof(FGameplayTagMessage, Tags) == 0x000000, "Member 'FGameplayTagMessage::Tags' has a wrong offset!");
static_assert(offsetof(FGameplayTagMessage, Text) == 0x000020, "Member 'FGameplayTagMessage::Text' has a wrong offset!");

// ScriptStruct FortniteGame.FortDelayRTMMData
// 0x000C (0x000C - 0x0000)
struct FFortDelayRTMMData final
{
public:
	bool                                          bDelayRTTM;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinRTTMDelay;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRTTMDelay;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDelayRTMMData) == 0x000004, "Wrong alignment on FFortDelayRTMMData");
static_assert(sizeof(FFortDelayRTMMData) == 0x00000C, "Wrong size on FFortDelayRTMMData");
static_assert(offsetof(FFortDelayRTMMData, bDelayRTTM) == 0x000000, "Member 'FFortDelayRTMMData::bDelayRTTM' has a wrong offset!");
static_assert(offsetof(FFortDelayRTMMData, MinRTTMDelay) == 0x000004, "Member 'FFortDelayRTMMData::MinRTTMDelay' has a wrong offset!");
static_assert(offsetof(FFortDelayRTMMData, MaxRTTMDelay) == 0x000008, "Member 'FFortDelayRTMMData::MaxRTTMDelay' has a wrong offset!");

// ScriptStruct FortniteGame.BulletWhipTrackerData
// 0x0040 (0x0040 - 0x0000)
struct FBulletWhipTrackerData final
{
public:
	bool                                          bAttachSoundToOwner;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PassByRadiusMax;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassByRadiusMin;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             PassByFarSound;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             PassByCloseSound;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumTriggerDistance;                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerAheadDistance;                              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        CurrentAudioComp;                                  // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousPlaneDotProd;                              // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedPassDistance;                                // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassByClosenessIntensity;                          // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x003C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBulletWhipTrackerData) == 0x000008, "Wrong alignment on FBulletWhipTrackerData");
static_assert(sizeof(FBulletWhipTrackerData) == 0x000040, "Wrong size on FBulletWhipTrackerData");
static_assert(offsetof(FBulletWhipTrackerData, bAttachSoundToOwner) == 0x000000, "Member 'FBulletWhipTrackerData::bAttachSoundToOwner' has a wrong offset!");
static_assert(offsetof(FBulletWhipTrackerData, PassByRadiusMax) == 0x000004, "Member 'FBulletWhipTrackerData::PassByRadiusMax' has a wrong offset!");
static_assert(offsetof(FBulletWhipTrackerData, PassByRadiusMin) == 0x000008, "Member 'FBulletWhipTrackerData::PassByRadiusMin' has a wrong offset!");
static_assert(offsetof(FBulletWhipTrackerData, PassByFarSound) == 0x000010, "Member 'FBulletWhipTrackerData::PassByFarSound' has a wrong offset!");
static_assert(offsetof(FBulletWhipTrackerData, PassByCloseSound) == 0x000018, "Member 'FBulletWhipTrackerData::PassByCloseSound' has a wrong offset!");
static_assert(offsetof(FBulletWhipTrackerData, MinimumTriggerDistance) == 0x000020, "Member 'FBulletWhipTrackerData::MinimumTriggerDistance' has a wrong offset!");
static_assert(offsetof(FBulletWhipTrackerData, TriggerAheadDistance) == 0x000024, "Member 'FBulletWhipTrackerData::TriggerAheadDistance' has a wrong offset!");
static_assert(offsetof(FBulletWhipTrackerData, CurrentAudioComp) == 0x000028, "Member 'FBulletWhipTrackerData::CurrentAudioComp' has a wrong offset!");
static_assert(offsetof(FBulletWhipTrackerData, PreviousPlaneDotProd) == 0x000030, "Member 'FBulletWhipTrackerData::PreviousPlaneDotProd' has a wrong offset!");
static_assert(offsetof(FBulletWhipTrackerData, CachedPassDistance) == 0x000034, "Member 'FBulletWhipTrackerData::CachedPassDistance' has a wrong offset!");
static_assert(offsetof(FBulletWhipTrackerData, PassByClosenessIntensity) == 0x000038, "Member 'FBulletWhipTrackerData::PassByClosenessIntensity' has a wrong offset!");
static_assert(offsetof(FBulletWhipTrackerData, bActive) == 0x00003C, "Member 'FBulletWhipTrackerData::bActive' has a wrong offset!");

// ScriptStruct FortniteGame.SlipperySlopeParams
// 0x0160 (0x0160 - 0x0000)
struct FSlipperySlopeParams final
{
public:
	struct FScalableFloat                         SlopeForceAcceleration;                            // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxLateralSpeed;                                   // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxLateralSpeedMultiplierInWater;                  // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         BrakingDecelerationInWater;                        // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxVerticalLaunchSpeed;                            // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SlopeLandingForceScalar;                           // 0x00A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SlopeLandingMaxHorizontalForce;                    // 0x00C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SlopeLaunchMinRequiredSpeed;                       // 0x00E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SlopeLaunchMinRequiredAngleChange;                 // 0x0100(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SlopeLaunchVerticalVelocityBoost;                  // 0x0120(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SlopeLaunchVerticalVelocityBoostMultiplierJumping; // 0x0140(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlipperySlopeParams) == 0x000008, "Wrong alignment on FSlipperySlopeParams");
static_assert(sizeof(FSlipperySlopeParams) == 0x000160, "Wrong size on FSlipperySlopeParams");
static_assert(offsetof(FSlipperySlopeParams, SlopeForceAcceleration) == 0x000000, "Member 'FSlipperySlopeParams::SlopeForceAcceleration' has a wrong offset!");
static_assert(offsetof(FSlipperySlopeParams, MaxLateralSpeed) == 0x000020, "Member 'FSlipperySlopeParams::MaxLateralSpeed' has a wrong offset!");
static_assert(offsetof(FSlipperySlopeParams, MaxLateralSpeedMultiplierInWater) == 0x000040, "Member 'FSlipperySlopeParams::MaxLateralSpeedMultiplierInWater' has a wrong offset!");
static_assert(offsetof(FSlipperySlopeParams, BrakingDecelerationInWater) == 0x000060, "Member 'FSlipperySlopeParams::BrakingDecelerationInWater' has a wrong offset!");
static_assert(offsetof(FSlipperySlopeParams, MaxVerticalLaunchSpeed) == 0x000080, "Member 'FSlipperySlopeParams::MaxVerticalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(FSlipperySlopeParams, SlopeLandingForceScalar) == 0x0000A0, "Member 'FSlipperySlopeParams::SlopeLandingForceScalar' has a wrong offset!");
static_assert(offsetof(FSlipperySlopeParams, SlopeLandingMaxHorizontalForce) == 0x0000C0, "Member 'FSlipperySlopeParams::SlopeLandingMaxHorizontalForce' has a wrong offset!");
static_assert(offsetof(FSlipperySlopeParams, SlopeLaunchMinRequiredSpeed) == 0x0000E0, "Member 'FSlipperySlopeParams::SlopeLaunchMinRequiredSpeed' has a wrong offset!");
static_assert(offsetof(FSlipperySlopeParams, SlopeLaunchMinRequiredAngleChange) == 0x000100, "Member 'FSlipperySlopeParams::SlopeLaunchMinRequiredAngleChange' has a wrong offset!");
static_assert(offsetof(FSlipperySlopeParams, SlopeLaunchVerticalVelocityBoost) == 0x000120, "Member 'FSlipperySlopeParams::SlopeLaunchVerticalVelocityBoost' has a wrong offset!");
static_assert(offsetof(FSlipperySlopeParams, SlopeLaunchVerticalVelocityBoostMultiplierJumping) == 0x000140, "Member 'FSlipperySlopeParams::SlopeLaunchVerticalVelocityBoostMultiplierJumping' has a wrong offset!");

// ScriptStruct FortniteGame.UtilityContribution
// 0x000C (0x000C - 0x0000)
struct FUtilityContribution final
{
public:
	EFortCombatFactors                            ContributingFactor;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactor                         ContributingAIDirectorFactor;                      // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFactorContributionType                   ContributionType;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUtilityContribution) == 0x000004, "Wrong alignment on FUtilityContribution");
static_assert(sizeof(FUtilityContribution) == 0x00000C, "Wrong size on FUtilityContribution");
static_assert(offsetof(FUtilityContribution, ContributingFactor) == 0x000000, "Member 'FUtilityContribution::ContributingFactor' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, ContributingAIDirectorFactor) == 0x000001, "Member 'FUtilityContribution::ContributingAIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, MaxContribution) == 0x000004, "Member 'FUtilityContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, ContributionType) == 0x000008, "Member 'FUtilityContribution::ContributionType' has a wrong offset!");

// ScriptStruct FortniteGame.UtilityData
// 0x0040 (0x0040 - 0x0000)
struct FUtilityData final
{
public:
	TArray<struct FUtilityContribution>           ContributingFactors;                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ContributionsTotal;                                // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyRecentSelectionPenalty;                      // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecentlySelectedPenaltyPercentage;                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PenaltyFallOffRate;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugGraphName;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUtilityData) == 0x000008, "Wrong alignment on FUtilityData");
static_assert(sizeof(FUtilityData) == 0x000040, "Wrong size on FUtilityData");
static_assert(offsetof(FUtilityData, ContributingFactors) == 0x000000, "Member 'FUtilityData::ContributingFactors' has a wrong offset!");
static_assert(offsetof(FUtilityData, ContributionsTotal) == 0x000010, "Member 'FUtilityData::ContributionsTotal' has a wrong offset!");
static_assert(offsetof(FUtilityData, bApplyRecentSelectionPenalty) == 0x000014, "Member 'FUtilityData::bApplyRecentSelectionPenalty' has a wrong offset!");
static_assert(offsetof(FUtilityData, RecentlySelectedPenaltyPercentage) == 0x000018, "Member 'FUtilityData::RecentlySelectedPenaltyPercentage' has a wrong offset!");
static_assert(offsetof(FUtilityData, PenaltyFallOffRate) == 0x00001C, "Member 'FUtilityData::PenaltyFallOffRate' has a wrong offset!");
static_assert(offsetof(FUtilityData, DebugGraphName) == 0x000020, "Member 'FUtilityData::DebugGraphName' has a wrong offset!");
static_assert(offsetof(FUtilityData, DebugGraphColor) == 0x000030, "Member 'FUtilityData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpectatorZoneItem
// 0x000C (0x0018 - 0x000C)
struct FFortSpectatorZoneItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateZone*                   PlayerState;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpectatorZoneItem) == 0x000008, "Wrong alignment on FFortSpectatorZoneItem");
static_assert(sizeof(FFortSpectatorZoneItem) == 0x000018, "Wrong size on FFortSpectatorZoneItem");
static_assert(offsetof(FFortSpectatorZoneItem, PlayerState) == 0x000010, "Member 'FFortSpectatorZoneItem::PlayerState' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaLevelUpData
// 0x0020 (0x0028 - 0x0008)
struct FAthenaLevelUpData final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpToNextLevel;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpTotal;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyReward;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChaseRewardTemplateId;                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaLevelUpData) == 0x000008, "Wrong alignment on FAthenaLevelUpData");
static_assert(sizeof(FAthenaLevelUpData) == 0x000028, "Wrong size on FAthenaLevelUpData");
static_assert(offsetof(FAthenaLevelUpData, Level) == 0x000008, "Member 'FAthenaLevelUpData::Level' has a wrong offset!");
static_assert(offsetof(FAthenaLevelUpData, XpToNextLevel) == 0x00000C, "Member 'FAthenaLevelUpData::XpToNextLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelUpData, XpTotal) == 0x000010, "Member 'FAthenaLevelUpData::XpTotal' has a wrong offset!");
static_assert(offsetof(FAthenaLevelUpData, CurrencyReward) == 0x000014, "Member 'FAthenaLevelUpData::CurrencyReward' has a wrong offset!");
static_assert(offsetof(FAthenaLevelUpData, ChaseRewardTemplateId) == 0x000018, "Member 'FAthenaLevelUpData::ChaseRewardTemplateId' has a wrong offset!");

// ScriptStruct FortniteGame.GooseWeaponTierData
// 0x0010 (0x0010 - 0x0000)
struct FGooseWeaponTierData final
{
public:
	TArray<class UFortWeaponItemDefinition*>      WeaponItemDefinitions;                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGooseWeaponTierData) == 0x000008, "Wrong alignment on FGooseWeaponTierData");
static_assert(sizeof(FGooseWeaponTierData) == 0x000010, "Wrong size on FGooseWeaponTierData");
static_assert(offsetof(FGooseWeaponTierData, WeaponItemDefinitions) == 0x000000, "Member 'FGooseWeaponTierData::WeaponItemDefinitions' has a wrong offset!");

// ScriptStruct FortniteGame.EmotePropMaterialScalarParam
// 0x000C (0x000C - 0x0000)
struct FEmotePropMaterialScalarParam final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamValue;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmotePropMaterialScalarParam) == 0x000004, "Wrong alignment on FEmotePropMaterialScalarParam");
static_assert(sizeof(FEmotePropMaterialScalarParam) == 0x00000C, "Wrong size on FEmotePropMaterialScalarParam");
static_assert(offsetof(FEmotePropMaterialScalarParam, ParamName) == 0x000000, "Member 'FEmotePropMaterialScalarParam::ParamName' has a wrong offset!");
static_assert(offsetof(FEmotePropMaterialScalarParam, ParamValue) == 0x000008, "Member 'FEmotePropMaterialScalarParam::ParamValue' has a wrong offset!");

// ScriptStruct FortniteGame.PlanePickupSpawnData
// 0x0030 (0x0030 - 0x0000)
struct FPlanePickupSpawnData final
{
public:
	TSubclassOf<class AAthenaGoosePickup>         PickupClass;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x28];                                       // 0x0008(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlanePickupSpawnData) == 0x000008, "Wrong alignment on FPlanePickupSpawnData");
static_assert(sizeof(FPlanePickupSpawnData) == 0x000030, "Wrong size on FPlanePickupSpawnData");
static_assert(offsetof(FPlanePickupSpawnData, PickupClass) == 0x000000, "Member 'FPlanePickupSpawnData::PickupClass' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerWithIndicatorState
// 0x000C (0x000C - 0x0000)
struct FPlayerWithIndicatorState final
{
public:
	TWeakObjectPtr<class AFortPlayerStateAthena>  PlayerState;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerIndicatorFlags                         IndicatorState;                                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerWithIndicatorState) == 0x000004, "Wrong alignment on FPlayerWithIndicatorState");
static_assert(sizeof(FPlayerWithIndicatorState) == 0x00000C, "Wrong size on FPlayerWithIndicatorState");
static_assert(offsetof(FPlayerWithIndicatorState, PlayerState) == 0x000000, "Member 'FPlayerWithIndicatorState::PlayerState' has a wrong offset!");
static_assert(offsetof(FPlayerWithIndicatorState, IndicatorState) == 0x000008, "Member 'FPlayerWithIndicatorState::IndicatorState' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaSeasonRewardLevelInfo
// 0x0020 (0x0020 - 0x0000)
struct FAthenaSeasonRewardLevelInfo final
{
public:
	EAthenaSeasonRewardTrack                      Track;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpToNextLevel;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAthenaRewardItemReference>     Rewards;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaSeasonRewardLevelInfo) == 0x000008, "Wrong alignment on FAthenaSeasonRewardLevelInfo");
static_assert(sizeof(FAthenaSeasonRewardLevelInfo) == 0x000020, "Wrong size on FAthenaSeasonRewardLevelInfo");
static_assert(offsetof(FAthenaSeasonRewardLevelInfo, Track) == 0x000000, "Member 'FAthenaSeasonRewardLevelInfo::Track' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonRewardLevelInfo, Level) == 0x000004, "Member 'FAthenaSeasonRewardLevelInfo::Level' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonRewardLevelInfo, XpToNextLevel) == 0x000008, "Member 'FAthenaSeasonRewardLevelInfo::XpToNextLevel' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonRewardLevelInfo, Rewards) == 0x000010, "Member 'FAthenaSeasonRewardLevelInfo::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayCueParticleInfo
// 0x0068 (0x0068 - 0x0000)
struct FFortGameplayCueParticleInfo final
{
public:
	struct FFortGameplayCueSpawnCondition         Condition;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortGameplayCueAttachInfo             Attachment;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ParticleSystem;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCastShadow : 1;                                   // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideCondition : 1;                            // 0x0060(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideAttachment : 1;                           // 0x0060(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayCueParticleInfo) == 0x000008, "Wrong alignment on FFortGameplayCueParticleInfo");
static_assert(sizeof(FFortGameplayCueParticleInfo) == 0x000068, "Wrong size on FFortGameplayCueParticleInfo");
static_assert(offsetof(FFortGameplayCueParticleInfo, Condition) == 0x000000, "Member 'FFortGameplayCueParticleInfo::Condition' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueParticleInfo, Attachment) == 0x000030, "Member 'FFortGameplayCueParticleInfo::Attachment' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueParticleInfo, ParticleSystem) == 0x000058, "Member 'FFortGameplayCueParticleInfo::ParticleSystem' has a wrong offset!");

// ScriptStruct FortniteGame.ItemsToDropOnDeath
// 0x0028 (0x0028 - 0x0000)
struct FItemsToDropOnDeath final
{
public:
	class UFortWorldItemDefinition*               ItemToDrop;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         NumberToDrop;                                      // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemsToDropOnDeath) == 0x000008, "Wrong alignment on FItemsToDropOnDeath");
static_assert(sizeof(FItemsToDropOnDeath) == 0x000028, "Wrong size on FItemsToDropOnDeath");
static_assert(offsetof(FItemsToDropOnDeath, ItemToDrop) == 0x000000, "Member 'FItemsToDropOnDeath::ItemToDrop' has a wrong offset!");
static_assert(offsetof(FItemsToDropOnDeath, NumberToDrop) == 0x000008, "Member 'FItemsToDropOnDeath::NumberToDrop' has a wrong offset!");

// ScriptStruct FortniteGame.VehicleTrickSequenceBasics
// 0x0018 (0x0020 - 0x0008)
struct FVehicleTrickSequenceBasics final : public FTableRowBase
{
public:
	float                                         TrickStartTime;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrickStartDistance;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrickStartHeight;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrickPointsPerAirSecond;                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrickPointsPerAirDistance;                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrickPointsPerAirHeight;                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleTrickSequenceBasics) == 0x000008, "Wrong alignment on FVehicleTrickSequenceBasics");
static_assert(sizeof(FVehicleTrickSequenceBasics) == 0x000020, "Wrong size on FVehicleTrickSequenceBasics");
static_assert(offsetof(FVehicleTrickSequenceBasics, TrickStartTime) == 0x000008, "Member 'FVehicleTrickSequenceBasics::TrickStartTime' has a wrong offset!");
static_assert(offsetof(FVehicleTrickSequenceBasics, TrickStartDistance) == 0x00000C, "Member 'FVehicleTrickSequenceBasics::TrickStartDistance' has a wrong offset!");
static_assert(offsetof(FVehicleTrickSequenceBasics, TrickStartHeight) == 0x000010, "Member 'FVehicleTrickSequenceBasics::TrickStartHeight' has a wrong offset!");
static_assert(offsetof(FVehicleTrickSequenceBasics, TrickPointsPerAirSecond) == 0x000014, "Member 'FVehicleTrickSequenceBasics::TrickPointsPerAirSecond' has a wrong offset!");
static_assert(offsetof(FVehicleTrickSequenceBasics, TrickPointsPerAirDistance) == 0x000018, "Member 'FVehicleTrickSequenceBasics::TrickPointsPerAirDistance' has a wrong offset!");
static_assert(offsetof(FVehicleTrickSequenceBasics, TrickPointsPerAirHeight) == 0x00001C, "Member 'FVehicleTrickSequenceBasics::TrickPointsPerAirHeight' has a wrong offset!");

// ScriptStruct FortniteGame.AlterationOption
// 0x0038 (0x0038 - 0x0000)
struct FAlterationOption final
{
public:
	TSoftObjectPtr<class UFortAlterationItemDefinition> AlterationDef;                                     // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          Costs;                                             // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlterationOption) == 0x000008, "Wrong alignment on FAlterationOption");
static_assert(sizeof(FAlterationOption) == 0x000038, "Wrong size on FAlterationOption");
static_assert(offsetof(FAlterationOption, AlterationDef) == 0x000000, "Member 'FAlterationOption::AlterationDef' has a wrong offset!");
static_assert(offsetof(FAlterationOption, Costs) == 0x000028, "Member 'FAlterationOption::Costs' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaSeasonalXPCurveEntry
// 0x0010 (0x0018 - 0x0008)
struct FAthenaSeasonalXPCurveEntry final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpToNextLevel;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpTotal;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaSeasonalXPCurveEntry) == 0x000008, "Wrong alignment on FAthenaSeasonalXPCurveEntry");
static_assert(sizeof(FAthenaSeasonalXPCurveEntry) == 0x000018, "Wrong size on FAthenaSeasonalXPCurveEntry");
static_assert(offsetof(FAthenaSeasonalXPCurveEntry, Level) == 0x000008, "Member 'FAthenaSeasonalXPCurveEntry::Level' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonalXPCurveEntry, XpToNextLevel) == 0x00000C, "Member 'FAthenaSeasonalXPCurveEntry::XpToNextLevel' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonalXPCurveEntry, XpTotal) == 0x000010, "Member 'FAthenaSeasonalXPCurveEntry::XpTotal' has a wrong offset!");

// ScriptStruct FortniteGame.SupplyDropSubPhaseModifier
// 0x000C (0x000C - 0x0000)
struct FSupplyDropSubPhaseModifier final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubPhaseIndex;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnInPreviousZonePercentChance;                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupplyDropSubPhaseModifier) == 0x000004, "Wrong alignment on FSupplyDropSubPhaseModifier");
static_assert(sizeof(FSupplyDropSubPhaseModifier) == 0x00000C, "Wrong size on FSupplyDropSubPhaseModifier");
static_assert(offsetof(FSupplyDropSubPhaseModifier, GamePhase) == 0x000000, "Member 'FSupplyDropSubPhaseModifier::GamePhase' has a wrong offset!");
static_assert(offsetof(FSupplyDropSubPhaseModifier, SubPhaseIndex) == 0x000004, "Member 'FSupplyDropSubPhaseModifier::SubPhaseIndex' has a wrong offset!");
static_assert(offsetof(FSupplyDropSubPhaseModifier, SpawnInPreviousZonePercentChance) == 0x000008, "Member 'FSupplyDropSubPhaseModifier::SpawnInPreviousZonePercentChance' has a wrong offset!");

// ScriptStruct FortniteGame.SupplyDropModifierData
// 0x0018 (0x0018 - 0x0000)
struct FSupplyDropModifierData final
{
public:
	class FName                                   SupplyDropID;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSupplyDropSubPhaseModifier>    ModifierList;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupplyDropModifierData) == 0x000008, "Wrong alignment on FSupplyDropModifierData");
static_assert(sizeof(FSupplyDropModifierData) == 0x000018, "Wrong size on FSupplyDropModifierData");
static_assert(offsetof(FSupplyDropModifierData, SupplyDropID) == 0x000000, "Member 'FSupplyDropModifierData::SupplyDropID' has a wrong offset!");
static_assert(offsetof(FSupplyDropModifierData, ModifierList) == 0x000008, "Member 'FSupplyDropModifierData::ModifierList' has a wrong offset!");

// ScriptStruct FortniteGame.BacchusActionIconMapping
// 0x0010 (0x0010 - 0x0000)
struct FBacchusActionIconMapping final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           Sprite;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBacchusActionIconMapping) == 0x000008, "Wrong alignment on FBacchusActionIconMapping");
static_assert(sizeof(FBacchusActionIconMapping) == 0x000010, "Wrong size on FBacchusActionIconMapping");
static_assert(offsetof(FBacchusActionIconMapping, Action) == 0x000000, "Member 'FBacchusActionIconMapping::Action' has a wrong offset!");
static_assert(offsetof(FBacchusActionIconMapping, Sprite) == 0x000008, "Member 'FBacchusActionIconMapping::Sprite' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientPilotMovementTestDefinition
// 0x0020 (0x0020 - 0x0000)
struct FFortClientPilotMovementTestDefinition final
{
public:
	float                                         ForwardMoveStrength;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideMoveStrength;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TestName;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientPilotMovementTestDefinition) == 0x000008, "Wrong alignment on FFortClientPilotMovementTestDefinition");
static_assert(sizeof(FFortClientPilotMovementTestDefinition) == 0x000020, "Wrong size on FFortClientPilotMovementTestDefinition");
static_assert(offsetof(FFortClientPilotMovementTestDefinition, ForwardMoveStrength) == 0x000000, "Member 'FFortClientPilotMovementTestDefinition::ForwardMoveStrength' has a wrong offset!");
static_assert(offsetof(FFortClientPilotMovementTestDefinition, SideMoveStrength) == 0x000004, "Member 'FFortClientPilotMovementTestDefinition::SideMoveStrength' has a wrong offset!");
static_assert(offsetof(FFortClientPilotMovementTestDefinition, Duration) == 0x000008, "Member 'FFortClientPilotMovementTestDefinition::Duration' has a wrong offset!");
static_assert(offsetof(FFortClientPilotMovementTestDefinition, TestName) == 0x000010, "Member 'FFortClientPilotMovementTestDefinition::TestName' has a wrong offset!");

// ScriptStruct FortniteGame.AlterationIntrinsicMapping
// 0x0010 (0x0018 - 0x0008)
struct FAlterationIntrinsicMapping final : public FTableRowBase
{
public:
	class FString                                 NewAlteration;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlterationIntrinsicMapping) == 0x000008, "Wrong alignment on FAlterationIntrinsicMapping");
static_assert(sizeof(FAlterationIntrinsicMapping) == 0x000018, "Wrong size on FAlterationIntrinsicMapping");
static_assert(offsetof(FAlterationIntrinsicMapping, NewAlteration) == 0x000008, "Member 'FAlterationIntrinsicMapping::NewAlteration' has a wrong offset!");

// ScriptStruct FortniteGame.BattleMapSharedData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FBattleMapSharedData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleMapSharedData) == 0x000008, "Wrong alignment on FBattleMapSharedData");
static_assert(sizeof(FBattleMapSharedData) == 0x000028, "Wrong size on FBattleMapSharedData");

// ScriptStruct FortniteGame.FortPlacementLocationTagHandler
// 0x0030 (0x0030 - 0x0000)
struct FFortPlacementLocationTagHandler final
{
public:
	class ABuildingActor*                         SpawnLocationBuildingActor;                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnedActor;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToRemove;                                      // 0x0010(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlacementLocationTagHandler) == 0x000008, "Wrong alignment on FFortPlacementLocationTagHandler");
static_assert(sizeof(FFortPlacementLocationTagHandler) == 0x000030, "Wrong size on FFortPlacementLocationTagHandler");
static_assert(offsetof(FFortPlacementLocationTagHandler, SpawnLocationBuildingActor) == 0x000000, "Member 'FFortPlacementLocationTagHandler::SpawnLocationBuildingActor' has a wrong offset!");
static_assert(offsetof(FFortPlacementLocationTagHandler, SpawnedActor) == 0x000008, "Member 'FFortPlacementLocationTagHandler::SpawnedActor' has a wrong offset!");
static_assert(offsetof(FFortPlacementLocationTagHandler, TagsToRemove) == 0x000010, "Member 'FFortPlacementLocationTagHandler::TagsToRemove' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingActorHotSpotDirection
// 0x0020 (0x0020 - 0x0000)
struct FBuildingActorHotSpotDirection final
{
public:
	class UAIHotSpotConfig*                       HotSpotConfig;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bMirrorX : 1;                                      // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMirrorY : 1;                                      // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EFortHotSpotDirection                         Direction;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHotspotTypeConfigMode                        TypeConfigUsage;                                   // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingActorHotSpotDirection) == 0x000008, "Wrong alignment on FBuildingActorHotSpotDirection");
static_assert(sizeof(FBuildingActorHotSpotDirection) == 0x000020, "Wrong size on FBuildingActorHotSpotDirection");
static_assert(offsetof(FBuildingActorHotSpotDirection, HotSpotConfig) == 0x000000, "Member 'FBuildingActorHotSpotDirection::HotSpotConfig' has a wrong offset!");
static_assert(offsetof(FBuildingActorHotSpotDirection, Offset) == 0x000008, "Member 'FBuildingActorHotSpotDirection::Offset' has a wrong offset!");
static_assert(offsetof(FBuildingActorHotSpotDirection, Direction) == 0x000018, "Member 'FBuildingActorHotSpotDirection::Direction' has a wrong offset!");
static_assert(offsetof(FBuildingActorHotSpotDirection, TypeConfigUsage) == 0x000019, "Member 'FBuildingActorHotSpotDirection::TypeConfigUsage' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostBuildingData
// 0x0028 (0x0028 - 0x0000)
struct FOutpostBuildingData
{
public:
	TSoftObjectPtr<class UFortOutpostItemDefinition> ItemDefinition;                                    // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostBuildingData) == 0x000008, "Wrong alignment on FOutpostBuildingData");
static_assert(sizeof(FOutpostBuildingData) == 0x000028, "Wrong size on FOutpostBuildingData");
static_assert(offsetof(FOutpostBuildingData, ItemDefinition) == 0x000000, "Member 'FOutpostBuildingData::ItemDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.CraftingTableBuildingData
// 0x0010 (0x0038 - 0x0028)
struct FCraftingTableBuildingData final : public FOutpostBuildingData
{
public:
	class UDataTable*                             ActivationCostData;                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            ActivationEffect;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingTableBuildingData) == 0x000008, "Wrong alignment on FCraftingTableBuildingData");
static_assert(sizeof(FCraftingTableBuildingData) == 0x000038, "Wrong size on FCraftingTableBuildingData");
static_assert(offsetof(FCraftingTableBuildingData, ActivationCostData) == 0x000028, "Member 'FCraftingTableBuildingData::ActivationCostData' has a wrong offset!");
static_assert(offsetof(FCraftingTableBuildingData, ActivationEffect) == 0x000030, "Member 'FCraftingTableBuildingData::ActivationEffect' has a wrong offset!");

// ScriptStruct FortniteGame.FortSearchBounceData
// 0x0010 (0x0010 - 0x0000)
struct FFortSearchBounceData final
{
public:
	struct FVector                                BounceNormal;                                      // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SearchAnimationCount;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSearchBounceData) == 0x000004, "Wrong alignment on FFortSearchBounceData");
static_assert(sizeof(FFortSearchBounceData) == 0x000010, "Wrong size on FFortSearchBounceData");
static_assert(offsetof(FFortSearchBounceData, BounceNormal) == 0x000000, "Member 'FFortSearchBounceData::BounceNormal' has a wrong offset!");
static_assert(offsetof(FFortSearchBounceData, SearchAnimationCount) == 0x00000C, "Member 'FFortSearchBounceData::SearchAnimationCount' has a wrong offset!");

// ScriptStruct FortniteGame.SavedPosition
// 0x002C (0x002C - 0x0000)
struct alignas(0x04) FSavedPosition final
{
public:
	uint8                                         Pad_0[0x2C];                                       // 0x0000(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedPosition) == 0x000004, "Wrong alignment on FSavedPosition");
static_assert(sizeof(FSavedPosition) == 0x00002C, "Wrong size on FSavedPosition");

// ScriptStruct FortniteGame.ConnectivityCube
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x08) FConnectivityCube final
{
public:
	uint8                                         Pad_0[0xC0];                                       // 0x0000(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConnectivityCube) == 0x000008, "Wrong alignment on FConnectivityCube");
static_assert(sizeof(FConnectivityCube) == 0x0000C0, "Wrong size on FConnectivityCube");

// ScriptStruct FortniteGame.LocalizedStringPair
// 0x0020 (0x0020 - 0x0000)
struct FLocalizedStringPair final
{
public:
	class FString                                 Locale;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextLiteral;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizedStringPair) == 0x000008, "Wrong alignment on FLocalizedStringPair");
static_assert(sizeof(FLocalizedStringPair) == 0x000020, "Wrong size on FLocalizedStringPair");
static_assert(offsetof(FLocalizedStringPair, Locale) == 0x000000, "Member 'FLocalizedStringPair::Locale' has a wrong offset!");
static_assert(offsetof(FLocalizedStringPair, TextLiteral) == 0x000010, "Member 'FLocalizedStringPair::TextLiteral' has a wrong offset!");

// ScriptStruct FortniteGame.WindScalarMaterialInterpolationData
// 0x0014 (0x0014 - 0x0000)
struct FWindScalarMaterialInterpolationData final
{
public:
	class FName                                   MaterialParameterName;                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialParameterIndex;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpFromValue;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpToValue;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindScalarMaterialInterpolationData) == 0x000004, "Wrong alignment on FWindScalarMaterialInterpolationData");
static_assert(sizeof(FWindScalarMaterialInterpolationData) == 0x000014, "Wrong size on FWindScalarMaterialInterpolationData");
static_assert(offsetof(FWindScalarMaterialInterpolationData, MaterialParameterName) == 0x000000, "Member 'FWindScalarMaterialInterpolationData::MaterialParameterName' has a wrong offset!");
static_assert(offsetof(FWindScalarMaterialInterpolationData, MaterialParameterIndex) == 0x000008, "Member 'FWindScalarMaterialInterpolationData::MaterialParameterIndex' has a wrong offset!");
static_assert(offsetof(FWindScalarMaterialInterpolationData, LerpFromValue) == 0x00000C, "Member 'FWindScalarMaterialInterpolationData::LerpFromValue' has a wrong offset!");
static_assert(offsetof(FWindScalarMaterialInterpolationData, LerpToValue) == 0x000010, "Member 'FWindScalarMaterialInterpolationData::LerpToValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindMaterialParameterPairID
// 0x001C (0x001C - 0x0000)
struct FFortWindMaterialParameterPairID final
{
public:
	int32                                         PairIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMaterialParameterID               SpeedParameter;                                    // 0x0004(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FFortMaterialParameterID               OffsetParameter;                                   // 0x0010(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortWindMaterialParameterPairID) == 0x000004, "Wrong alignment on FFortWindMaterialParameterPairID");
static_assert(sizeof(FFortWindMaterialParameterPairID) == 0x00001C, "Wrong size on FFortWindMaterialParameterPairID");
static_assert(offsetof(FFortWindMaterialParameterPairID, PairIndex) == 0x000000, "Member 'FFortWindMaterialParameterPairID::PairIndex' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialParameterPairID, SpeedParameter) == 0x000004, "Member 'FFortWindMaterialParameterPairID::SpeedParameter' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialParameterPairID, OffsetParameter) == 0x000010, "Member 'FFortWindMaterialParameterPairID::OffsetParameter' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindMaterialData
// 0x0048 (0x0048 - 0x0000)
struct FFortWindMaterialData final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               IntenseStateMID;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialParameterPairIndices;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindVectorParameterIndex;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWindScalarMaterialInterpolationData> ScalarInterpolationData;                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWindVectorMaterialInterpolationData> VectorInterpolationData;                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortWindMaterialParameterPairID> ParametersToSet;                                   // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortWindMaterialData) == 0x000008, "Wrong alignment on FFortWindMaterialData");
static_assert(sizeof(FFortWindMaterialData) == 0x000048, "Wrong size on FFortWindMaterialData");
static_assert(offsetof(FFortWindMaterialData, Mid) == 0x000000, "Member 'FFortWindMaterialData::Mid' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, IntenseStateMID) == 0x000008, "Member 'FFortWindMaterialData::IntenseStateMID' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, MaterialParameterPairIndices) == 0x000010, "Member 'FFortWindMaterialData::MaterialParameterPairIndices' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, WindVectorParameterIndex) == 0x000014, "Member 'FFortWindMaterialData::WindVectorParameterIndex' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, ScalarInterpolationData) == 0x000018, "Member 'FFortWindMaterialData::ScalarInterpolationData' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, VectorInterpolationData) == 0x000028, "Member 'FFortWindMaterialData::VectorInterpolationData' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, ParametersToSet) == 0x000038, "Member 'FFortWindMaterialData::ParametersToSet' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindResponder
// 0x0090 (0x0090 - 0x0000)
struct FFortWindResponder final
{
public:
	class ABuildingSMActor*                       WindUpdatingBuildingSMActor;                       // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      WindSpeedCurve;                                    // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      WindPannerSpeedCurve;                              // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             WindAudio;                                         // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MildWindMaterialInstances;                         // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             IntenseWindMaterialInstances;                      // 0x0030(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FFortWindMaterialData>          MaterialsData;                                     // 0x0040(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         MaterialParameterPairIndices;                      // 0x0050(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortWindResponderMaterialVariablePairData> PairedVariablesData;                               // 0x0058(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x1C];                                      // 0x0068(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindSpeed;                                         // 0x0084(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x4];                                       // 0x0088(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasSetupAnimatingMaterials;                       // 0x008C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWindResponder) == 0x000008, "Wrong alignment on FFortWindResponder");
static_assert(sizeof(FFortWindResponder) == 0x000090, "Wrong size on FFortWindResponder");
static_assert(offsetof(FFortWindResponder, WindUpdatingBuildingSMActor) == 0x000000, "Member 'FFortWindResponder::WindUpdatingBuildingSMActor' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, WindSpeedCurve) == 0x000008, "Member 'FFortWindResponder::WindSpeedCurve' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, WindPannerSpeedCurve) == 0x000010, "Member 'FFortWindResponder::WindPannerSpeedCurve' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, WindAudio) == 0x000018, "Member 'FFortWindResponder::WindAudio' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, MildWindMaterialInstances) == 0x000020, "Member 'FFortWindResponder::MildWindMaterialInstances' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, IntenseWindMaterialInstances) == 0x000030, "Member 'FFortWindResponder::IntenseWindMaterialInstances' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, MaterialsData) == 0x000040, "Member 'FFortWindResponder::MaterialsData' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, MaterialParameterPairIndices) == 0x000050, "Member 'FFortWindResponder::MaterialParameterPairIndices' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, PairedVariablesData) == 0x000058, "Member 'FFortWindResponder::PairedVariablesData' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, WindSpeed) == 0x000084, "Member 'FFortWindResponder::WindSpeed' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, bHasSetupAnimatingMaterials) == 0x00008C, "Member 'FFortWindResponder::bHasSetupAnimatingMaterials' has a wrong offset!");

// ScriptStruct FortniteGame.AshtonStoneState
// 0x0018 (0x0018 - 0x0000)
struct FAshtonStoneState final
{
public:
	EAshtonStoneType                              StoneType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAshtonStoneStateType                         StoneState;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GameplayTag;                                       // 0x0004(0x0008)(Edit, DisableEditOnInstance, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnTime;                                         // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasEverSpawned;                                   // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnDataIdx;                                      // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAshtonStoneState) == 0x000004, "Wrong alignment on FAshtonStoneState");
static_assert(sizeof(FAshtonStoneState) == 0x000018, "Wrong size on FAshtonStoneState");
static_assert(offsetof(FAshtonStoneState, StoneType) == 0x000000, "Member 'FAshtonStoneState::StoneType' has a wrong offset!");
static_assert(offsetof(FAshtonStoneState, StoneState) == 0x000001, "Member 'FAshtonStoneState::StoneState' has a wrong offset!");
static_assert(offsetof(FAshtonStoneState, GameplayTag) == 0x000004, "Member 'FAshtonStoneState::GameplayTag' has a wrong offset!");
static_assert(offsetof(FAshtonStoneState, SpawnTime) == 0x00000C, "Member 'FAshtonStoneState::SpawnTime' has a wrong offset!");
static_assert(offsetof(FAshtonStoneState, bHasEverSpawned) == 0x000010, "Member 'FAshtonStoneState::bHasEverSpawned' has a wrong offset!");
static_assert(offsetof(FAshtonStoneState, SpawnDataIdx) == 0x000014, "Member 'FAshtonStoneState::SpawnDataIdx' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnUpgrade
// 0x0058 (0x0058 - 0x0000)
struct FFortAIPawnUpgrade final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAIPawnUpgradeData>         PawnUpgradeDataPerPlayerCount;                     // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIPawnUpgrade) == 0x000008, "Wrong alignment on FFortAIPawnUpgrade");
static_assert(sizeof(FFortAIPawnUpgrade) == 0x000058, "Wrong size on FFortAIPawnUpgrade");
static_assert(offsetof(FFortAIPawnUpgrade, TagQuery) == 0x000000, "Member 'FFortAIPawnUpgrade::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgrade, PawnUpgradeDataPerPlayerCount) == 0x000048, "Member 'FFortAIPawnUpgrade::PawnUpgradeDataPerPlayerCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortPossibleMission
// 0x0038 (0x0038 - 0x0000)
struct FFortPossibleMission final
{
public:
	TSoftObjectPtr<class UFortMissionInfo>        MissionInfo;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinAlwaysGenerated;                                // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrototype;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPossibleMission) == 0x000008, "Wrong alignment on FFortPossibleMission");
static_assert(sizeof(FFortPossibleMission) == 0x000038, "Wrong size on FFortPossibleMission");
static_assert(offsetof(FFortPossibleMission, MissionInfo) == 0x000000, "Member 'FFortPossibleMission::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortPossibleMission, Weight) == 0x000028, "Member 'FFortPossibleMission::Weight' has a wrong offset!");
static_assert(offsetof(FFortPossibleMission, MinAlwaysGenerated) == 0x00002C, "Member 'FFortPossibleMission::MinAlwaysGenerated' has a wrong offset!");
static_assert(offsetof(FFortPossibleMission, bIsPrototype) == 0x000030, "Member 'FFortPossibleMission::bIsPrototype' has a wrong offset!");

// ScriptStruct FortniteGame.EditModeState
// 0x0010 (0x0010 - 0x0000)
struct FEditModeState final
{
public:
	TSubclassOf<class ABuildingSMActor>           EditClass;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotationIterations;                                // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrentlyValid;                                   // 0x000D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEditModeState) == 0x000008, "Wrong alignment on FEditModeState");
static_assert(sizeof(FEditModeState) == 0x000010, "Wrong size on FEditModeState");
static_assert(offsetof(FEditModeState, EditClass) == 0x000000, "Member 'FEditModeState::EditClass' has a wrong offset!");
static_assert(offsetof(FEditModeState, RotationIterations) == 0x000008, "Member 'FEditModeState::RotationIterations' has a wrong offset!");
static_assert(offsetof(FEditModeState, bMirrored) == 0x00000C, "Member 'FEditModeState::bMirrored' has a wrong offset!");
static_assert(offsetof(FEditModeState, bCurrentlyValid) == 0x00000D, "Member 'FEditModeState::bCurrentlyValid' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseBannerIconData
// 0x0090 (0x0098 - 0x0008)
struct FHomebaseBannerIconData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              SmallImage;                                        // 0x0008(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              LargeImage;                                        // 0x0030(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CategoryRowName;                                   // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   DisplayName;                                       // 0x0060(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   DisplayDescription;                                // 0x0078(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         bFullUsageRights : 1;                              // 0x0090(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHomebaseBannerIconData) == 0x000008, "Wrong alignment on FHomebaseBannerIconData");
static_assert(sizeof(FHomebaseBannerIconData) == 0x000098, "Wrong size on FHomebaseBannerIconData");
static_assert(offsetof(FHomebaseBannerIconData, SmallImage) == 0x000008, "Member 'FHomebaseBannerIconData::SmallImage' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerIconData, LargeImage) == 0x000030, "Member 'FHomebaseBannerIconData::LargeImage' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerIconData, CategoryRowName) == 0x000058, "Member 'FHomebaseBannerIconData::CategoryRowName' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerIconData, DisplayName) == 0x000060, "Member 'FHomebaseBannerIconData::DisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerIconData, DisplayDescription) == 0x000078, "Member 'FHomebaseBannerIconData::DisplayDescription' has a wrong offset!");

// ScriptStruct FortniteGame.SpecialActorRepDataArray
// 0x0010 (0x0118 - 0x0108)
struct FSpecialActorRepDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FSpecialActorRepData>           SpecialActorList;                                  // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialActorRepDataArray) == 0x000008, "Wrong alignment on FSpecialActorRepDataArray");
static_assert(sizeof(FSpecialActorRepDataArray) == 0x000118, "Wrong size on FSpecialActorRepDataArray");
static_assert(offsetof(FSpecialActorRepDataArray, SpecialActorList) == 0x000108, "Member 'FSpecialActorRepDataArray::SpecialActorList' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingFoundationLODActorData
// 0x0030 (0x0030 - 0x0000)
struct FBuildingFoundationLODActorData final
{
public:
	TWeakObjectPtr<class ALODActor>               LODActor;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               VisibilityMaterial;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      VisibilityTexture;                                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingFoundationLODActorData) == 0x000008, "Wrong alignment on FBuildingFoundationLODActorData");
static_assert(sizeof(FBuildingFoundationLODActorData) == 0x000030, "Wrong size on FBuildingFoundationLODActorData");
static_assert(offsetof(FBuildingFoundationLODActorData, LODActor) == 0x000000, "Member 'FBuildingFoundationLODActorData::LODActor' has a wrong offset!");
static_assert(offsetof(FBuildingFoundationLODActorData, VisibilityMaterial) == 0x000020, "Member 'FBuildingFoundationLODActorData::VisibilityMaterial' has a wrong offset!");
static_assert(offsetof(FBuildingFoundationLODActorData, VisibilityTexture) == 0x000028, "Member 'FBuildingFoundationLODActorData::VisibilityTexture' has a wrong offset!");

// ScriptStruct FortniteGame.WorkerPortraitData
// 0x0028 (0x0028 - 0x0000)
struct FWorkerPortraitData final
{
public:
	TSoftObjectPtr<class UFortItemIconDefinition> Portrait;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkerPortraitData) == 0x000008, "Wrong alignment on FWorkerPortraitData");
static_assert(sizeof(FWorkerPortraitData) == 0x000028, "Wrong size on FWorkerPortraitData");
static_assert(offsetof(FWorkerPortraitData, Portrait) == 0x000000, "Member 'FWorkerPortraitData::Portrait' has a wrong offset!");

// ScriptStruct FortniteGame.WorkerGenderData
// 0x0018 (0x0018 - 0x0000)
struct FWorkerGenderData final
{
public:
	EFortCustomGender                             Gender;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorkerPortraitData>            PotraitData;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkerGenderData) == 0x000008, "Wrong alignment on FWorkerGenderData");
static_assert(sizeof(FWorkerGenderData) == 0x000018, "Wrong size on FWorkerGenderData");
static_assert(offsetof(FWorkerGenderData, Gender) == 0x000000, "Member 'FWorkerGenderData::Gender' has a wrong offset!");
static_assert(offsetof(FWorkerGenderData, PotraitData) == 0x000008, "Member 'FWorkerGenderData::PotraitData' has a wrong offset!");

// ScriptStruct FortniteGame.ManagerSynergyData
// 0x0018 (0x0018 - 0x0000)
struct FManagerSynergyData final
{
public:
	struct FGameplayTag                           SynergyTypeTag;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWorkerGenderData>              GenderData;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManagerSynergyData) == 0x000008, "Wrong alignment on FManagerSynergyData");
static_assert(sizeof(FManagerSynergyData) == 0x000018, "Wrong size on FManagerSynergyData");
static_assert(offsetof(FManagerSynergyData, SynergyTypeTag) == 0x000000, "Member 'FManagerSynergyData::SynergyTypeTag' has a wrong offset!");
static_assert(offsetof(FManagerSynergyData, GenderData) == 0x000008, "Member 'FManagerSynergyData::GenderData' has a wrong offset!");

// ScriptStruct FortniteGame.SlopeWarpingFootDefinition
// 0x0038 (0x0038 - 0x0000)
struct FSlopeWarpingFootDefinition final
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToeSocketName;                                     // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeelSocketName;                                    // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootSize;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlopeWarpingFootDefinition) == 0x000004, "Wrong alignment on FSlopeWarpingFootDefinition");
static_assert(sizeof(FSlopeWarpingFootDefinition) == 0x000038, "Wrong size on FSlopeWarpingFootDefinition");
static_assert(offsetof(FSlopeWarpingFootDefinition, IKFootBone) == 0x000000, "Member 'FSlopeWarpingFootDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, FKFootBone) == 0x000010, "Member 'FSlopeWarpingFootDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, NumBonesInLimb) == 0x000020, "Member 'FSlopeWarpingFootDefinition::NumBonesInLimb' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, ToeSocketName) == 0x000024, "Member 'FSlopeWarpingFootDefinition::ToeSocketName' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, HeelSocketName) == 0x00002C, "Member 'FSlopeWarpingFootDefinition::HeelSocketName' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, FootSize) == 0x000034, "Member 'FSlopeWarpingFootDefinition::FootSize' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyMcpDataSurveyMetadata
// 0x0010 (0x0010 - 0x0000)
struct FFortPlayerSurveyMcpDataSurveyMetadata final
{
public:
	int32                                         NumTimesCompleted;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastTimeCompleted;                                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyMcpDataSurveyMetadata) == 0x000008, "Wrong alignment on FFortPlayerSurveyMcpDataSurveyMetadata");
static_assert(sizeof(FFortPlayerSurveyMcpDataSurveyMetadata) == 0x000010, "Wrong size on FFortPlayerSurveyMcpDataSurveyMetadata");
static_assert(offsetof(FFortPlayerSurveyMcpDataSurveyMetadata, NumTimesCompleted) == 0x000000, "Member 'FFortPlayerSurveyMcpDataSurveyMetadata::NumTimesCompleted' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyMcpDataSurveyMetadata, LastTimeCompleted) == 0x000008, "Member 'FFortPlayerSurveyMcpDataSurveyMetadata::LastTimeCompleted' has a wrong offset!");

// ScriptStruct FortniteGame.FortActiveMontageDecisionWindow
// 0x0018 (0x0018 - 0x0000)
struct FFortActiveMontageDecisionWindow final
{
public:
	class UFortAnimNotifyState_AbilityDecisionWindow* DecisionWindow;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      DecisionAnimation;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceivedPrimaryInput;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceivedSecondaryInput;                           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlreadyProcessedInput;                            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActiveMontageDecisionWindow) == 0x000008, "Wrong alignment on FFortActiveMontageDecisionWindow");
static_assert(sizeof(FFortActiveMontageDecisionWindow) == 0x000018, "Wrong size on FFortActiveMontageDecisionWindow");
static_assert(offsetof(FFortActiveMontageDecisionWindow, DecisionWindow) == 0x000000, "Member 'FFortActiveMontageDecisionWindow::DecisionWindow' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, DecisionAnimation) == 0x000008, "Member 'FFortActiveMontageDecisionWindow::DecisionAnimation' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, bReceivedPrimaryInput) == 0x000010, "Member 'FFortActiveMontageDecisionWindow::bReceivedPrimaryInput' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, bReceivedSecondaryInput) == 0x000011, "Member 'FFortActiveMontageDecisionWindow::bReceivedSecondaryInput' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, bAlreadyProcessedInput) == 0x000012, "Member 'FFortActiveMontageDecisionWindow::bAlreadyProcessedInput' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIDirectorFactorContribution
// 0x000C (0x000C - 0x0000)
struct FFortAIDirectorFactorContribution final
{
public:
	EFortAIDirectorEvent                          AIDirectorEvent;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactorContribution             ContributionType;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIDirectorFactorContribution) == 0x000004, "Wrong alignment on FFortAIDirectorFactorContribution");
static_assert(sizeof(FFortAIDirectorFactorContribution) == 0x00000C, "Wrong size on FFortAIDirectorFactorContribution");
static_assert(offsetof(FFortAIDirectorFactorContribution, AIDirectorEvent) == 0x000000, "Member 'FFortAIDirectorFactorContribution::AIDirectorEvent' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorContribution, MaxContribution) == 0x000004, "Member 'FFortAIDirectorFactorContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorContribution, ContributionType) == 0x000008, "Member 'FFortAIDirectorFactorContribution::ContributionType' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIDirectorFactorData
// 0x0020 (0x0020 - 0x0000)
struct FFortAIDirectorFactorData final
{
public:
	EFortAIDirectorFactor                         AIDirectorFactor;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAIDirectorFactorContribution> ContributingEvents;                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIDirectorFactorData) == 0x000008, "Wrong alignment on FFortAIDirectorFactorData");
static_assert(sizeof(FFortAIDirectorFactorData) == 0x000020, "Wrong size on FFortAIDirectorFactorData");
static_assert(offsetof(FFortAIDirectorFactorData, AIDirectorFactor) == 0x000000, "Member 'FFortAIDirectorFactorData::AIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorData, ContributingEvents) == 0x000008, "Member 'FFortAIDirectorFactorData::ContributingEvents' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorData, MaxValue) == 0x000018, "Member 'FFortAIDirectorFactorData::MaxValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyMcpDataRoot
// 0x0060 (0x0060 - 0x0000)
struct FFortPlayerSurveyMcpDataRoot final
{
public:
	struct FFortPlayerSurveyMcpDataSurveyMetadata AllSurveysMetadata;                                // 0x0000(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FFortPlayerSurveyMcpDataSurveyMetadata> MetaData;                                          // 0x0010(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyMcpDataRoot) == 0x000008, "Wrong alignment on FFortPlayerSurveyMcpDataRoot");
static_assert(sizeof(FFortPlayerSurveyMcpDataRoot) == 0x000060, "Wrong size on FFortPlayerSurveyMcpDataRoot");
static_assert(offsetof(FFortPlayerSurveyMcpDataRoot, AllSurveysMetadata) == 0x000000, "Member 'FFortPlayerSurveyMcpDataRoot::AllSurveysMetadata' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyMcpDataRoot, MetaData) == 0x000010, "Member 'FFortPlayerSurveyMcpDataRoot::MetaData' has a wrong offset!");

// ScriptStruct FortniteGame.DynamicBuildingFoundationRepData
// 0x0030 (0x0030 - 0x0000)
struct FDynamicBuildingFoundationRepData final
{
public:
	struct FVector                                Translation;                                       // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0010(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EDynamicFoundationEnabledState                EnabledState;                                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicBuildingFoundationRepData) == 0x000010, "Wrong alignment on FDynamicBuildingFoundationRepData");
static_assert(sizeof(FDynamicBuildingFoundationRepData) == 0x000030, "Wrong size on FDynamicBuildingFoundationRepData");
static_assert(offsetof(FDynamicBuildingFoundationRepData, Translation) == 0x000000, "Member 'FDynamicBuildingFoundationRepData::Translation' has a wrong offset!");
static_assert(offsetof(FDynamicBuildingFoundationRepData, Rotation) == 0x000010, "Member 'FDynamicBuildingFoundationRepData::Rotation' has a wrong offset!");
static_assert(offsetof(FDynamicBuildingFoundationRepData, EnabledState) == 0x000020, "Member 'FDynamicBuildingFoundationRepData::EnabledState' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_TurnInPlace
// 0x0060 (0x0060 - 0x0000)
struct FFortAnimInput_TurnInPlace final
{
public:
	struct FCachedAnimStateArray                  TurnInitiatingStates;                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FCachedAnimStateArray                  TurnTransitionStates;                              // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FName                                   TurnRotationAmountCurveName;                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AllowTurnInPlaceCurveName;                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnThreshold90;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialTurnCurveValue;                             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAllowedRootYawOffset;                           // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootYawOffset;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootYawOffsetAlpha;                                // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bWantsToTurn : 1;                                  // 0x0054(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWantsToTurnInVehicle : 1;                         // 0x0054(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWantsToTurnAgain : 1;                             // 0x0054(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTurningLeft : 1;                                  // 0x0054(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastTurnRotationAmount;                            // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimInput_TurnInPlace) == 0x000008, "Wrong alignment on FFortAnimInput_TurnInPlace");
static_assert(sizeof(FFortAnimInput_TurnInPlace) == 0x000060, "Wrong size on FFortAnimInput_TurnInPlace");
static_assert(offsetof(FFortAnimInput_TurnInPlace, TurnInitiatingStates) == 0x000000, "Member 'FFortAnimInput_TurnInPlace::TurnInitiatingStates' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_TurnInPlace, TurnTransitionStates) == 0x000018, "Member 'FFortAnimInput_TurnInPlace::TurnTransitionStates' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_TurnInPlace, TurnRotationAmountCurveName) == 0x000030, "Member 'FFortAnimInput_TurnInPlace::TurnRotationAmountCurveName' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_TurnInPlace, AllowTurnInPlaceCurveName) == 0x000038, "Member 'FFortAnimInput_TurnInPlace::AllowTurnInPlaceCurveName' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_TurnInPlace, TurnThreshold90) == 0x000040, "Member 'FFortAnimInput_TurnInPlace::TurnThreshold90' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_TurnInPlace, InitialTurnCurveValue) == 0x000044, "Member 'FFortAnimInput_TurnInPlace::InitialTurnCurveValue' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_TurnInPlace, MaxAllowedRootYawOffset) == 0x000048, "Member 'FFortAnimInput_TurnInPlace::MaxAllowedRootYawOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_TurnInPlace, RootYawOffset) == 0x00004C, "Member 'FFortAnimInput_TurnInPlace::RootYawOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_TurnInPlace, RootYawOffsetAlpha) == 0x000050, "Member 'FFortAnimInput_TurnInPlace::RootYawOffsetAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_TurnInPlace, LastTurnRotationAmount) == 0x000058, "Member 'FFortAnimInput_TurnInPlace::LastTurnRotationAmount' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingFoundationStreamingData
// 0x0080 (0x0080 - 0x0000)
struct FBuildingFoundationStreamingData final
{
public:
	class FName                                   FoundationName;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FoundationLocation;                                // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   BoundingBox;                                       // 0x0014(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0030(0x0020)(NativeAccessSpecifierPublic)
	struct FIntPoint                              GridCoordinates;                                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TLazyObjectPtr<class AFortHLODSMActor>> ProxyInfo;                                         // 0x0058(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<int32>                                 ChildStreamingDataIndices;                         // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         PersistentHLODLevelIndex;                          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingFoundationStreamingData) == 0x000008, "Wrong alignment on FBuildingFoundationStreamingData");
static_assert(sizeof(FBuildingFoundationStreamingData) == 0x000080, "Wrong size on FBuildingFoundationStreamingData");
static_assert(offsetof(FBuildingFoundationStreamingData, FoundationName) == 0x000000, "Member 'FBuildingFoundationStreamingData::FoundationName' has a wrong offset!");
static_assert(offsetof(FBuildingFoundationStreamingData, FoundationLocation) == 0x000008, "Member 'FBuildingFoundationStreamingData::FoundationLocation' has a wrong offset!");
static_assert(offsetof(FBuildingFoundationStreamingData, BoundingBox) == 0x000014, "Member 'FBuildingFoundationStreamingData::BoundingBox' has a wrong offset!");
static_assert(offsetof(FBuildingFoundationStreamingData, GameplayTags) == 0x000030, "Member 'FBuildingFoundationStreamingData::GameplayTags' has a wrong offset!");
static_assert(offsetof(FBuildingFoundationStreamingData, GridCoordinates) == 0x000050, "Member 'FBuildingFoundationStreamingData::GridCoordinates' has a wrong offset!");
static_assert(offsetof(FBuildingFoundationStreamingData, ProxyInfo) == 0x000058, "Member 'FBuildingFoundationStreamingData::ProxyInfo' has a wrong offset!");
static_assert(offsetof(FBuildingFoundationStreamingData, ChildStreamingDataIndices) == 0x000068, "Member 'FBuildingFoundationStreamingData::ChildStreamingDataIndices' has a wrong offset!");
static_assert(offsetof(FBuildingFoundationStreamingData, PersistentHLODLevelIndex) == 0x000078, "Member 'FBuildingFoundationStreamingData::PersistentHLODLevelIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortLogoLoadingScreen
// 0x0024 (0x0024 - 0x0000)
struct FFortLogoLoadingScreen final
{
public:
	struct FLinearColor                           LogoColor;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                LogoPadding;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LogoSize;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLogoLoadingScreen) == 0x000004, "Wrong alignment on FFortLogoLoadingScreen");
static_assert(sizeof(FFortLogoLoadingScreen) == 0x000024, "Wrong size on FFortLogoLoadingScreen");
static_assert(offsetof(FFortLogoLoadingScreen, LogoColor) == 0x000000, "Member 'FFortLogoLoadingScreen::LogoColor' has a wrong offset!");
static_assert(offsetof(FFortLogoLoadingScreen, LogoPadding) == 0x000010, "Member 'FFortLogoLoadingScreen::LogoPadding' has a wrong offset!");
static_assert(offsetof(FFortLogoLoadingScreen, LogoSize) == 0x000020, "Member 'FFortLogoLoadingScreen::LogoSize' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestMapCosmetic
// 0x00D0 (0x00D0 - 0x0000)
struct FFortQuestMapCosmetic final
{
public:
	ECosmeticType                                 CosmeticType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CosmeticBrush;                                     // 0x0008(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItemDefinition*>            CosmeticDataList;                                  // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              CosmeticPosition;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetTransform                       CosmeticTransform;                                 // 0x00B0(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestMapCosmetic) == 0x000008, "Wrong alignment on FFortQuestMapCosmetic");
static_assert(sizeof(FFortQuestMapCosmetic) == 0x0000D0, "Wrong size on FFortQuestMapCosmetic");
static_assert(offsetof(FFortQuestMapCosmetic, CosmeticType) == 0x000000, "Member 'FFortQuestMapCosmetic::CosmeticType' has a wrong offset!");
static_assert(offsetof(FFortQuestMapCosmetic, CosmeticBrush) == 0x000008, "Member 'FFortQuestMapCosmetic::CosmeticBrush' has a wrong offset!");
static_assert(offsetof(FFortQuestMapCosmetic, WidgetClass) == 0x000090, "Member 'FFortQuestMapCosmetic::WidgetClass' has a wrong offset!");
static_assert(offsetof(FFortQuestMapCosmetic, CosmeticDataList) == 0x000098, "Member 'FFortQuestMapCosmetic::CosmeticDataList' has a wrong offset!");
static_assert(offsetof(FFortQuestMapCosmetic, CosmeticPosition) == 0x0000A8, "Member 'FFortQuestMapCosmetic::CosmeticPosition' has a wrong offset!");
static_assert(offsetof(FFortQuestMapCosmetic, CosmeticTransform) == 0x0000B0, "Member 'FFortQuestMapCosmetic::CosmeticTransform' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestMapPageCosmetics
// 0x0048 (0x0050 - 0x0008)
struct FFortQuestMapPageCosmetics final : public FTableRowBase
{
public:
	bool                                          bUseNodeArrowColorOverride;                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            NodeArrowColorOverride;                            // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortQuestMapCosmetic>          CosmeticList;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bStartArrowDisabled;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndArrowDisabled;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestMapPageCosmetics) == 0x000008, "Wrong alignment on FFortQuestMapPageCosmetics");
static_assert(sizeof(FFortQuestMapPageCosmetics) == 0x000050, "Wrong size on FFortQuestMapPageCosmetics");
static_assert(offsetof(FFortQuestMapPageCosmetics, bUseNodeArrowColorOverride) == 0x000008, "Member 'FFortQuestMapPageCosmetics::bUseNodeArrowColorOverride' has a wrong offset!");
static_assert(offsetof(FFortQuestMapPageCosmetics, NodeArrowColorOverride) == 0x000010, "Member 'FFortQuestMapPageCosmetics::NodeArrowColorOverride' has a wrong offset!");
static_assert(offsetof(FFortQuestMapPageCosmetics, CosmeticList) == 0x000038, "Member 'FFortQuestMapPageCosmetics::CosmeticList' has a wrong offset!");
static_assert(offsetof(FFortQuestMapPageCosmetics, bStartArrowDisabled) == 0x000048, "Member 'FFortQuestMapPageCosmetics::bStartArrowDisabled' has a wrong offset!");
static_assert(offsetof(FFortQuestMapPageCosmetics, bEndArrowDisabled) == 0x000049, "Member 'FFortQuestMapPageCosmetics::bEndArrowDisabled' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingGameplayActorAbilityDeliveryBucket
// 0x0090 (0x0090 - 0x0000)
struct FBuildingGameplayActorAbilityDeliveryBucket final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FProximityBasedGEDeliveryInfoHard> ProximityEffectBuckets;                            // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortAbilitySetDeliveryInfo>    PawnPersistentAbilitySetBuckets;                   // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortAbilitySetHandle>          PersistentlyAppliedAbilitySets;                    // 0x0028(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         bEnabled : 1;                                      // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bEnabledByDefault : 1;                             // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasGEsToApplyOnTouch : 1;                         // 0x0038(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasGEsToApplyOnPulseTimer : 1;                    // 0x0038(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasPersistentEffects : 1;                         // 0x0038(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_39[0x57];                                      // 0x0039(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingGameplayActorAbilityDeliveryBucket) == 0x000008, "Wrong alignment on FBuildingGameplayActorAbilityDeliveryBucket");
static_assert(sizeof(FBuildingGameplayActorAbilityDeliveryBucket) == 0x000090, "Wrong size on FBuildingGameplayActorAbilityDeliveryBucket");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, Tag) == 0x000000, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::Tag' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, ProximityEffectBuckets) == 0x000008, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::ProximityEffectBuckets' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, PawnPersistentAbilitySetBuckets) == 0x000018, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::PawnPersistentAbilitySetBuckets' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, PersistentlyAppliedAbilitySets) == 0x000028, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::PersistentlyAppliedAbilitySets' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingGameplayActorAbilityDeliveryInfo
// 0x0048 (0x0048 - 0x0000)
struct FBuildingGameplayActorAbilityDeliveryInfo final
{
public:
	TArray<struct FBuildingGameplayActorAbilityDeliveryBucket> DeliveryBuckets;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         ProximityPulseInterval;                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bHasGEsToApplyOnTouch : 1;                         // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasGEsToApplyOnPulseTimer : 1;                    // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasPersistentEffects : 1;                         // 0x0014(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuildingGameplayActor*                 OwningActor;                                       // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         DeferredTouchActorsToProcess;                      // 0x0020(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingGameplayActorAbilityDeliveryInfo) == 0x000008, "Wrong alignment on FBuildingGameplayActorAbilityDeliveryInfo");
static_assert(sizeof(FBuildingGameplayActorAbilityDeliveryInfo) == 0x000048, "Wrong size on FBuildingGameplayActorAbilityDeliveryInfo");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, DeliveryBuckets) == 0x000000, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::DeliveryBuckets' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, ProximityPulseInterval) == 0x000010, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::ProximityPulseInterval' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, OwningActor) == 0x000018, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::OwningActor' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, DeferredTouchActorsToProcess) == 0x000020, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::DeferredTouchActorsToProcess' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterTimedModifierTags
// 0x0028 (0x0028 - 0x0000)
struct FFortAIEncounterTimedModifierTags final
{
public:
	float                                         TimeSeconds;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterTimedModifierTags) == 0x000008, "Wrong alignment on FFortAIEncounterTimedModifierTags");
static_assert(sizeof(FFortAIEncounterTimedModifierTags) == 0x000028, "Wrong size on FFortAIEncounterTimedModifierTags");
static_assert(offsetof(FFortAIEncounterTimedModifierTags, TimeSeconds) == 0x000000, "Member 'FFortAIEncounterTimedModifierTags::TimeSeconds' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterTimedModifierTags, GameplayTags) == 0x000008, "Member 'FFortAIEncounterTimedModifierTags::GameplayTags' has a wrong offset!");

// ScriptStruct FortniteGame.ConditionalFoundationQuotaTier
// 0x0018 (0x0018 - 0x0000)
struct FConditionalFoundationQuotaTier final
{
public:
	TArray<TSoftClassPtr<class UClass>>           FoundationClasses;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         MinFoundations;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFoundations;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConditionalFoundationQuotaTier) == 0x000008, "Wrong alignment on FConditionalFoundationQuotaTier");
static_assert(sizeof(FConditionalFoundationQuotaTier) == 0x000018, "Wrong size on FConditionalFoundationQuotaTier");
static_assert(offsetof(FConditionalFoundationQuotaTier, FoundationClasses) == 0x000000, "Member 'FConditionalFoundationQuotaTier::FoundationClasses' has a wrong offset!");
static_assert(offsetof(FConditionalFoundationQuotaTier, MinFoundations) == 0x000010, "Member 'FConditionalFoundationQuotaTier::MinFoundations' has a wrong offset!");
static_assert(offsetof(FConditionalFoundationQuotaTier, MaxFoundations) == 0x000014, "Member 'FConditionalFoundationQuotaTier::MaxFoundations' has a wrong offset!");

// ScriptStruct FortniteGame.RunVariationData
// 0x000C (0x000C - 0x0000)
struct FRunVariationData final
{
public:
	TWeakObjectPtr<class AFortAIPawn>             FortAIPawn;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRunVariationData) == 0x000004, "Wrong alignment on FRunVariationData");
static_assert(sizeof(FRunVariationData) == 0x00000C, "Wrong size on FRunVariationData");
static_assert(offsetof(FRunVariationData, FortAIPawn) == 0x000000, "Member 'FRunVariationData::FortAIPawn' has a wrong offset!");
static_assert(offsetof(FRunVariationData, Distance) == 0x000008, "Member 'FRunVariationData::Distance' has a wrong offset!");

// ScriptStruct FortniteGame.FortTaggedDeployableBasePlotExpansionUnlock
// 0x000C (0x0014 - 0x0008)
struct FFortTaggedDeployableBasePlotExpansionUnlock final : public FFortTaggedUnlockBase
{
public:
	struct FIntVector                             CellExpansionVector;                               // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTaggedDeployableBasePlotExpansionUnlock) == 0x000004, "Wrong alignment on FFortTaggedDeployableBasePlotExpansionUnlock");
static_assert(sizeof(FFortTaggedDeployableBasePlotExpansionUnlock) == 0x000014, "Wrong size on FFortTaggedDeployableBasePlotExpansionUnlock");
static_assert(offsetof(FFortTaggedDeployableBasePlotExpansionUnlock, CellExpansionVector) == 0x000008, "Member 'FFortTaggedDeployableBasePlotExpansionUnlock::CellExpansionVector' has a wrong offset!");

// ScriptStruct FortniteGame.ItemWrapPreviewEntry
// 0x0070 (0x0070 - 0x0000)
struct FItemWrapPreviewEntry final
{
public:
	TSoftObjectPtr<class UObject>                 PreviewObject;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PreviewTransform;                                  // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         WrapSectionLimit;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPreviewUsingVehicleShader : 1;                    // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_65[0xB];                                       // 0x0065(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemWrapPreviewEntry) == 0x000010, "Wrong alignment on FItemWrapPreviewEntry");
static_assert(sizeof(FItemWrapPreviewEntry) == 0x000070, "Wrong size on FItemWrapPreviewEntry");
static_assert(offsetof(FItemWrapPreviewEntry, PreviewObject) == 0x000000, "Member 'FItemWrapPreviewEntry::PreviewObject' has a wrong offset!");
static_assert(offsetof(FItemWrapPreviewEntry, PreviewTransform) == 0x000030, "Member 'FItemWrapPreviewEntry::PreviewTransform' has a wrong offset!");
static_assert(offsetof(FItemWrapPreviewEntry, WrapSectionLimit) == 0x000060, "Member 'FItemWrapPreviewEntry::WrapSectionLimit' has a wrong offset!");

// ScriptStruct FortniteGame.ItemWrapSlotMetadata
// 0x0058 (0x0058 - 0x0000)
struct FItemWrapSlotMetadata final
{
public:
	struct FGameplayTagQuery                      MatchCriteria;                                     // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FItemWrapPreviewEntry>          PreviewList;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemWrapSlotMetadata) == 0x000008, "Wrong alignment on FItemWrapSlotMetadata");
static_assert(sizeof(FItemWrapSlotMetadata) == 0x000058, "Wrong size on FItemWrapSlotMetadata");
static_assert(offsetof(FItemWrapSlotMetadata, MatchCriteria) == 0x000000, "Member 'FItemWrapSlotMetadata::MatchCriteria' has a wrong offset!");
static_assert(offsetof(FItemWrapSlotMetadata, PreviewList) == 0x000048, "Member 'FItemWrapSlotMetadata::PreviewList' has a wrong offset!");

// ScriptStruct FortniteGame.MashLeaderboardQuery
// 0x0088 (0x0088 - 0x0000)
struct FMashLeaderboardQuery final
{
public:
	struct FUniqueNetIdRepl                       RequestingId;                                      // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMashLeaderboardQuery) == 0x000008, "Wrong alignment on FMashLeaderboardQuery");
static_assert(sizeof(FMashLeaderboardQuery) == 0x000088, "Wrong size on FMashLeaderboardQuery");
static_assert(offsetof(FMashLeaderboardQuery, RequestingId) == 0x000000, "Member 'FMashLeaderboardQuery::RequestingId' has a wrong offset!");

// ScriptStruct FortniteGame.FortMapData
// 0x0048 (0x0048 - 0x0000)
struct FFortMapData final
{
public:
	TSoftObjectPtr<class UWorld>                  BuildingWorld;                                     // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  BuildingLevelTags;                                 // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMapData) == 0x000008, "Wrong alignment on FFortMapData");
static_assert(sizeof(FFortMapData) == 0x000048, "Wrong size on FFortMapData");
static_assert(offsetof(FFortMapData, BuildingWorld) == 0x000000, "Member 'FFortMapData::BuildingWorld' has a wrong offset!");
static_assert(offsetof(FFortMapData, BuildingLevelTags) == 0x000028, "Member 'FFortMapData::BuildingLevelTags' has a wrong offset!");

// ScriptStruct FortniteGame.BaseReplayEventInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FBaseReplayEventInfo
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EventTime;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VersionNumber;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseReplayEventInfo) == 0x000008, "Wrong alignment on FBaseReplayEventInfo");
static_assert(sizeof(FBaseReplayEventInfo) == 0x000018, "Wrong size on FBaseReplayEventInfo");
static_assert(offsetof(FBaseReplayEventInfo, EventTime) == 0x000008, "Member 'FBaseReplayEventInfo::EventTime' has a wrong offset!");
static_assert(offsetof(FBaseReplayEventInfo, VersionNumber) == 0x000010, "Member 'FBaseReplayEventInfo::VersionNumber' has a wrong offset!");

// ScriptStruct FortniteGame.ReplayZoneEventInfo
// 0x0010 (0x0028 - 0x0018)
struct FReplayZoneEventInfo final : public FBaseReplayEventInfo
{
public:
	struct FVector                                ZoneCenter;                                        // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoneRadius;                                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayZoneEventInfo) == 0x000008, "Wrong alignment on FReplayZoneEventInfo");
static_assert(sizeof(FReplayZoneEventInfo) == 0x000028, "Wrong size on FReplayZoneEventInfo");
static_assert(offsetof(FReplayZoneEventInfo, ZoneCenter) == 0x000018, "Member 'FReplayZoneEventInfo::ZoneCenter' has a wrong offset!");
static_assert(offsetof(FReplayZoneEventInfo, ZoneRadius) == 0x000024, "Member 'FReplayZoneEventInfo::ZoneRadius' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnSlotData
// 0x0020 (0x0020 - 0x0000)
struct FFortSpawnSlotData final
{
public:
	struct FVector                                SpawnSlotLocation;                                 // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAIPawn*                            OccupyingAI;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRiftSlotStatus                           SlotStatus;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpawnSlotData) == 0x000008, "Wrong alignment on FFortSpawnSlotData");
static_assert(sizeof(FFortSpawnSlotData) == 0x000020, "Wrong size on FFortSpawnSlotData");
static_assert(offsetof(FFortSpawnSlotData, SpawnSlotLocation) == 0x000000, "Member 'FFortSpawnSlotData::SpawnSlotLocation' has a wrong offset!");
static_assert(offsetof(FFortSpawnSlotData, OccupyingAI) == 0x000010, "Member 'FFortSpawnSlotData::OccupyingAI' has a wrong offset!");
static_assert(offsetof(FFortSpawnSlotData, SlotStatus) == 0x000018, "Member 'FFortSpawnSlotData::SlotStatus' has a wrong offset!");

// ScriptStruct FortniteGame.ItemCollectorOverrideItemRow
// 0x0018 (0x0020 - 0x0008)
struct FItemCollectorOverrideItemRow final : public FTableRowBase
{
public:
	struct FPrimaryAssetId                        ItemPrimaryAssetId;                                // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemCollectorOverrideItemRow) == 0x000008, "Wrong alignment on FItemCollectorOverrideItemRow");
static_assert(sizeof(FItemCollectorOverrideItemRow) == 0x000020, "Wrong size on FItemCollectorOverrideItemRow");
static_assert(offsetof(FItemCollectorOverrideItemRow, ItemPrimaryAssetId) == 0x000008, "Member 'FItemCollectorOverrideItemRow::ItemPrimaryAssetId' has a wrong offset!");
static_assert(offsetof(FItemCollectorOverrideItemRow, Quantity) == 0x000018, "Member 'FItemCollectorOverrideItemRow::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.ItemCollectorRow
// 0x0018 (0x0020 - 0x0008)
struct FItemCollectorRow final : public FTableRowBase
{
public:
	class UDataTable*                             OverrideItemsTable;                                // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   OverrideRarity;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverrideGoal;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bOverrideLootRules;                                // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bUseOverrideRarity;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCollectorRow) == 0x000008, "Wrong alignment on FItemCollectorRow");
static_assert(sizeof(FItemCollectorRow) == 0x000020, "Wrong size on FItemCollectorRow");
static_assert(offsetof(FItemCollectorRow, OverrideItemsTable) == 0x000008, "Member 'FItemCollectorRow::OverrideItemsTable' has a wrong offset!");
static_assert(offsetof(FItemCollectorRow, OverrideRarity) == 0x000010, "Member 'FItemCollectorRow::OverrideRarity' has a wrong offset!");
static_assert(offsetof(FItemCollectorRow, OverrideGoal) == 0x000014, "Member 'FItemCollectorRow::OverrideGoal' has a wrong offset!");
static_assert(offsetof(FItemCollectorRow, bOverrideLootRules) == 0x000018, "Member 'FItemCollectorRow::bOverrideLootRules' has a wrong offset!");
static_assert(offsetof(FItemCollectorRow, bUseOverrideRarity) == 0x00001C, "Member 'FItemCollectorRow::bUseOverrideRarity' has a wrong offset!");

// ScriptStruct FortniteGame.CrucibleParticipantData
// 0x00A0 (0x00A0 - 0x0000)
struct FCrucibleParticipantData final
{
public:
	TWeakObjectPtr<class AFortPlayerControllerAthena> AthenaPC;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       AccountId;                                         // 0x0008(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, int64>                    LatestRetrievedRawStats;                           // 0x0030(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x20];                                      // 0x0080(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrucibleParticipantData) == 0x000008, "Wrong alignment on FCrucibleParticipantData");
static_assert(sizeof(FCrucibleParticipantData) == 0x0000A0, "Wrong size on FCrucibleParticipantData");
static_assert(offsetof(FCrucibleParticipantData, AthenaPC) == 0x000000, "Member 'FCrucibleParticipantData::AthenaPC' has a wrong offset!");
static_assert(offsetof(FCrucibleParticipantData, AccountId) == 0x000008, "Member 'FCrucibleParticipantData::AccountId' has a wrong offset!");
static_assert(offsetof(FCrucibleParticipantData, LatestRetrievedRawStats) == 0x000030, "Member 'FCrucibleParticipantData::LatestRetrievedRawStats' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingNavigationCellInfo
// 0x0001 (0x0001 - 0x0000)
struct FBuildingNavigationCellInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingNavigationCellInfo) == 0x000001, "Wrong alignment on FBuildingNavigationCellInfo");
static_assert(sizeof(FBuildingNavigationCellInfo) == 0x000001, "Wrong size on FBuildingNavigationCellInfo");

// ScriptStruct FortniteGame.McpMatchResults
// 0x000C (0x000C - 0x0000)
struct FMcpMatchResults final
{
public:
	int32                                         Placement;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kills;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Deaths;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMcpMatchResults) == 0x000004, "Wrong alignment on FMcpMatchResults");
static_assert(sizeof(FMcpMatchResults) == 0x00000C, "Wrong size on FMcpMatchResults");
static_assert(offsetof(FMcpMatchResults, Placement) == 0x000000, "Member 'FMcpMatchResults::Placement' has a wrong offset!");
static_assert(offsetof(FMcpMatchResults, Kills) == 0x000004, "Member 'FMcpMatchResults::Kills' has a wrong offset!");
static_assert(offsetof(FMcpMatchResults, Deaths) == 0x000008, "Member 'FMcpMatchResults::Deaths' has a wrong offset!");

// ScriptStruct FortniteGame.CollectorTrackedData
// 0x0020 (0x0020 - 0x0000)
struct FCollectorTrackedData final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       Player;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCollectorTrackedData) == 0x000008, "Wrong alignment on FCollectorTrackedData");
static_assert(sizeof(FCollectorTrackedData) == 0x000020, "Wrong size on FCollectorTrackedData");
static_assert(offsetof(FCollectorTrackedData, Team) == 0x000000, "Member 'FCollectorTrackedData::Team' has a wrong offset!");
static_assert(offsetof(FCollectorTrackedData, Player) == 0x000008, "Member 'FCollectorTrackedData::Player' has a wrong offset!");

// ScriptStruct FortniteGame.CollectedItemValue
// 0x0018 (0x0018 - 0x0000)
struct FCollectedItemValue final
{
public:
	class UFortWorldItemDefinition*               CollectedItem;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DepositAmount;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DepositGoal;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureCount;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCollectedItemValue) == 0x000008, "Wrong alignment on FCollectedItemValue");
static_assert(sizeof(FCollectedItemValue) == 0x000018, "Wrong size on FCollectedItemValue");
static_assert(offsetof(FCollectedItemValue, CollectedItem) == 0x000000, "Member 'FCollectedItemValue::CollectedItem' has a wrong offset!");
static_assert(offsetof(FCollectedItemValue, DepositAmount) == 0x000008, "Member 'FCollectedItemValue::DepositAmount' has a wrong offset!");
static_assert(offsetof(FCollectedItemValue, DepositGoal) == 0x00000C, "Member 'FCollectedItemValue::DepositGoal' has a wrong offset!");
static_assert(offsetof(FCollectedItemValue, CaptureCount) == 0x000010, "Member 'FCollectedItemValue::CaptureCount' has a wrong offset!");

// ScriptStruct FortniteGame.CameraPair
// 0x0010 (0x0010 - 0x0000)
struct FCameraPair final
{
public:
	EFrontEndCamera                               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortCameraBase*                        Camera;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraPair) == 0x000008, "Wrong alignment on FCameraPair");
static_assert(sizeof(FCameraPair) == 0x000010, "Wrong size on FCameraPair");
static_assert(offsetof(FCameraPair, Type) == 0x000000, "Member 'FCameraPair::Type' has a wrong offset!");
static_assert(offsetof(FCameraPair, Camera) == 0x000008, "Member 'FCameraPair::Camera' has a wrong offset!");

// ScriptStruct FortniteGame.ItemCategoryMappingData
// 0x0020 (0x0020 - 0x0000)
struct FItemCategoryMappingData final
{
public:
	EFortItemType                                 CategoryType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CategoryName;                                      // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCategoryMappingData) == 0x000008, "Wrong alignment on FItemCategoryMappingData");
static_assert(sizeof(FItemCategoryMappingData) == 0x000020, "Wrong size on FItemCategoryMappingData");
static_assert(offsetof(FItemCategoryMappingData, CategoryType) == 0x000000, "Member 'FItemCategoryMappingData::CategoryType' has a wrong offset!");
static_assert(offsetof(FItemCategoryMappingData, CategoryName) == 0x000008, "Member 'FItemCategoryMappingData::CategoryName' has a wrong offset!");

// ScriptStruct FortniteGame.PlaneSquadInfoArray
// 0x0028 (0x0130 - 0x0108)
struct FPlaneSquadInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FPlaneSquadInfo>                SquadData;                                         // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AFortPlayerControllerAthena*>    RemovedControllers;                                // 0x0118(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaneSquadInfoArray) == 0x000008, "Wrong alignment on FPlaneSquadInfoArray");
static_assert(sizeof(FPlaneSquadInfoArray) == 0x000130, "Wrong size on FPlaneSquadInfoArray");
static_assert(offsetof(FPlaneSquadInfoArray, SquadData) == 0x000108, "Member 'FPlaneSquadInfoArray::SquadData' has a wrong offset!");
static_assert(offsetof(FPlaneSquadInfoArray, RemovedControllers) == 0x000118, "Member 'FPlaneSquadInfoArray::RemovedControllers' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnVariantDefinition
// 0x0068 (0x0068 - 0x0000)
struct FFortAIPawnVariantDefinition final
{
public:
	TSubclassOf<class AFortAIPawn>                PawnClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   VariantWeightCurve;                                // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentWeight;                                     // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      RequiredTagsQuery;                                 // 0x0020(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIPawnVariantDefinition) == 0x000008, "Wrong alignment on FFortAIPawnVariantDefinition");
static_assert(sizeof(FFortAIPawnVariantDefinition) == 0x000068, "Wrong size on FFortAIPawnVariantDefinition");
static_assert(offsetof(FFortAIPawnVariantDefinition, PawnClass) == 0x000000, "Member 'FFortAIPawnVariantDefinition::PawnClass' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, VariantWeightCurve) == 0x000008, "Member 'FFortAIPawnVariantDefinition::VariantWeightCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, CurrentWeight) == 0x000018, "Member 'FFortAIPawnVariantDefinition::CurrentWeight' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, RequiredTagsQuery) == 0x000020, "Member 'FFortAIPawnVariantDefinition::RequiredTagsQuery' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectDeliveryInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FFortGameplayEffectDeliveryInfo final
{
public:
	struct FFortDeliveryInfoRequirementsFilter    DeliveryRequirements;                              // 0x0000(0x0098)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayEffectApplicationInfo> GameplayEffects;                                   // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortGameplayEffectDeliveryInfo) == 0x000008, "Wrong alignment on FFortGameplayEffectDeliveryInfo");
static_assert(sizeof(FFortGameplayEffectDeliveryInfo) == 0x0000A8, "Wrong size on FFortGameplayEffectDeliveryInfo");
static_assert(offsetof(FFortGameplayEffectDeliveryInfo, DeliveryRequirements) == 0x000000, "Member 'FFortGameplayEffectDeliveryInfo::DeliveryRequirements' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectDeliveryInfo, GameplayEffects) == 0x000098, "Member 'FFortGameplayEffectDeliveryInfo::GameplayEffects' has a wrong offset!");

// ScriptStruct FortniteGame.CollectorUnitInfo
// 0x0108 (0x0108 - 0x0000)
struct FCollectorUnitInfo final
{
public:
	class UFortWorldItemDefinition*               InputItem;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         InputCount;                                        // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture*                               OverrideInputItemTexture;                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseDefinedOutputItem : 1;                         // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItemDefinition*               OutputItem;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemEntry>                 OutputItemEntry;                                   // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class FName                                   OverrideOutputItemLootTierGroupName;               // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectDeliveryInfo        OutputGameplayEffect;                              // 0x0058(0x00A8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture*                               OverrideOutputItemTexture;                         // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollectorUnitInfo) == 0x000008, "Wrong alignment on FCollectorUnitInfo");
static_assert(sizeof(FCollectorUnitInfo) == 0x000108, "Wrong size on FCollectorUnitInfo");
static_assert(offsetof(FCollectorUnitInfo, InputItem) == 0x000000, "Member 'FCollectorUnitInfo::InputItem' has a wrong offset!");
static_assert(offsetof(FCollectorUnitInfo, InputCount) == 0x000008, "Member 'FCollectorUnitInfo::InputCount' has a wrong offset!");
static_assert(offsetof(FCollectorUnitInfo, OverrideInputItemTexture) == 0x000028, "Member 'FCollectorUnitInfo::OverrideInputItemTexture' has a wrong offset!");
static_assert(offsetof(FCollectorUnitInfo, OutputItem) == 0x000038, "Member 'FCollectorUnitInfo::OutputItem' has a wrong offset!");
static_assert(offsetof(FCollectorUnitInfo, OutputItemEntry) == 0x000040, "Member 'FCollectorUnitInfo::OutputItemEntry' has a wrong offset!");
static_assert(offsetof(FCollectorUnitInfo, OverrideOutputItemLootTierGroupName) == 0x000050, "Member 'FCollectorUnitInfo::OverrideOutputItemLootTierGroupName' has a wrong offset!");
static_assert(offsetof(FCollectorUnitInfo, OutputGameplayEffect) == 0x000058, "Member 'FCollectorUnitInfo::OutputGameplayEffect' has a wrong offset!");
static_assert(offsetof(FCollectorUnitInfo, OverrideOutputItemTexture) == 0x000100, "Member 'FCollectorUnitInfo::OverrideOutputItemTexture' has a wrong offset!");

// ScriptStruct FortniteGame.PhysicsObjectInitialParameters
// 0x0024 (0x0024 - 0x0000)
struct FPhysicsObjectInitialParameters final
{
public:
	struct FVector                                InitialVelocity;                                   // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideMassInKG;                                  // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideAngularDampening;                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideLinearDampening;                           // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerForceMultiplier;                             // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnKnockbackMultiplier;                           // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableGravity : 1;                                // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableGravityOnHit : 1;                           // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldKillPawnOnHit : 1;                          // 0x0020(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhysicsObjectInitialParameters) == 0x000004, "Wrong alignment on FPhysicsObjectInitialParameters");
static_assert(sizeof(FPhysicsObjectInitialParameters) == 0x000024, "Wrong size on FPhysicsObjectInitialParameters");
static_assert(offsetof(FPhysicsObjectInitialParameters, InitialVelocity) == 0x000000, "Member 'FPhysicsObjectInitialParameters::InitialVelocity' has a wrong offset!");
static_assert(offsetof(FPhysicsObjectInitialParameters, OverrideMassInKG) == 0x00000C, "Member 'FPhysicsObjectInitialParameters::OverrideMassInKG' has a wrong offset!");
static_assert(offsetof(FPhysicsObjectInitialParameters, OverrideAngularDampening) == 0x000010, "Member 'FPhysicsObjectInitialParameters::OverrideAngularDampening' has a wrong offset!");
static_assert(offsetof(FPhysicsObjectInitialParameters, OverrideLinearDampening) == 0x000014, "Member 'FPhysicsObjectInitialParameters::OverrideLinearDampening' has a wrong offset!");
static_assert(offsetof(FPhysicsObjectInitialParameters, PlayerForceMultiplier) == 0x000018, "Member 'FPhysicsObjectInitialParameters::PlayerForceMultiplier' has a wrong offset!");
static_assert(offsetof(FPhysicsObjectInitialParameters, PawnKnockbackMultiplier) == 0x00001C, "Member 'FPhysicsObjectInitialParameters::PawnKnockbackMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.MusicTrackData
// 0x0048 (0x0050 - 0x0008)
struct FMusicTrackData final : public FTableRowBase
{
public:
	bool                                          Enabled;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundBase>              MusicTrackPath;                                    // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TrackName;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicTrackData) == 0x000008, "Wrong alignment on FMusicTrackData");
static_assert(sizeof(FMusicTrackData) == 0x000050, "Wrong size on FMusicTrackData");
static_assert(offsetof(FMusicTrackData, Enabled) == 0x000008, "Member 'FMusicTrackData::Enabled' has a wrong offset!");
static_assert(offsetof(FMusicTrackData, MusicTrackPath) == 0x000010, "Member 'FMusicTrackData::MusicTrackPath' has a wrong offset!");
static_assert(offsetof(FMusicTrackData, TrackName) == 0x000038, "Member 'FMusicTrackData::TrackName' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaTutorial_TargetInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortAthenaTutorial_TargetInfo final
{
public:
	class AActor*                                 TargetMarker;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingProp*                          TargetActor;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaTutorial_TargetInfo) == 0x000008, "Wrong alignment on FFortAthenaTutorial_TargetInfo");
static_assert(sizeof(FFortAthenaTutorial_TargetInfo) == 0x000018, "Wrong size on FFortAthenaTutorial_TargetInfo");
static_assert(offsetof(FFortAthenaTutorial_TargetInfo, TargetMarker) == 0x000000, "Member 'FFortAthenaTutorial_TargetInfo::TargetMarker' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorial_TargetInfo, TargetActor) == 0x000008, "Member 'FFortAthenaTutorial_TargetInfo::TargetActor' has a wrong offset!");

// ScriptStruct FortniteGame.MusicPlayerData
// 0x0008 (0x0008 - 0x0000)
struct FMusicPlayerData final
{
public:
	int32                                         SongIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTimeSongStarted;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicPlayerData) == 0x000004, "Wrong alignment on FMusicPlayerData");
static_assert(sizeof(FMusicPlayerData) == 0x000008, "Wrong size on FMusicPlayerData");
static_assert(offsetof(FMusicPlayerData, SongIndex) == 0x000000, "Member 'FMusicPlayerData::SongIndex' has a wrong offset!");
static_assert(offsetof(FMusicPlayerData, ServerTimeSongStarted) == 0x000004, "Member 'FMusicPlayerData::ServerTimeSongStarted' has a wrong offset!");

// ScriptStruct FortniteGame.FortRiftReservation
// 0x0008 (0x0008 - 0x0000)
struct FFortRiftReservation final
{
public:
	uint8                                         bDesiredVisible : 1;                               // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDesiredActive : 1;                                // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRiftReservationHandle             ReservationHandle;                                 // 0x0004(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRiftReservation) == 0x000004, "Wrong alignment on FFortRiftReservation");
static_assert(sizeof(FFortRiftReservation) == 0x000008, "Wrong size on FFortRiftReservation");
static_assert(offsetof(FFortRiftReservation, ReservationHandle) == 0x000004, "Member 'FFortRiftReservation::ReservationHandle' has a wrong offset!");

// ScriptStruct FortniteGame.WorkerSetBonusData
// 0x0038 (0x0038 - 0x0000)
struct FWorkerSetBonusData final
{
public:
	struct FGameplayTag                           SetBonusTypeTag;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RequiredWorkersCount;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            SetBonusEffect;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PowerPoints;                                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkerSetBonusData) == 0x000008, "Wrong alignment on FWorkerSetBonusData");
static_assert(sizeof(FWorkerSetBonusData) == 0x000038, "Wrong size on FWorkerSetBonusData");
static_assert(offsetof(FWorkerSetBonusData, SetBonusTypeTag) == 0x000000, "Member 'FWorkerSetBonusData::SetBonusTypeTag' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusData, DisplayName) == 0x000008, "Member 'FWorkerSetBonusData::DisplayName' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusData, RequiredWorkersCount) == 0x000020, "Member 'FWorkerSetBonusData::RequiredWorkersCount' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusData, SetBonusEffect) == 0x000028, "Member 'FWorkerSetBonusData::SetBonusEffect' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusData, SelectionWeight) == 0x000030, "Member 'FWorkerSetBonusData::SelectionWeight' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusData, PowerPoints) == 0x000034, "Member 'FWorkerSetBonusData::PowerPoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaMutator_SurvivalObjectiveData
// 0x01D8 (0x01D8 - 0x0000)
struct FFortAthenaMutator_SurvivalObjectiveData final
{
public:
	TSubclassOf<class ABuildingActor>             BuildingActorObjectiveClass;                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         SpawnDistanceFromGround;                           // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int32                                         ActivationSafezoneIndex;                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEndMatchOnDestroy : 1;                            // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bSpawnOnPOI : 1;                                   // 0x002C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	bool                                          bClearAreaOnSpawn;                                 // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClearAreaRadiusOverride;                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ClearAreaHalfHeightOverride;                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsSpecialActor : 1;                               // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      POIFilterQuery;                                    // 0x0040(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int32                                         RandomizedPOICount;                                // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ExtraSafezoneIndexes;                              // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class ABuildingActor*                         SpawnedBuildingActorObjective;                     // 0x00A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           SpecialActorTag;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateBrush                            SpecialActorMinimapIconBrush;                      // 0x00B0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	struct FVector2D                              SpecialActorMinimapIconScale;                      // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateBrush                            SpecialActorCompassIconBrush;                      // 0x0140(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	struct FVector2D                              SpecialActorCompassIconScale;                      // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   SpecialActorID;                                    // 0x01D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAthenaMutator_SurvivalObjectiveData) == 0x000008, "Wrong alignment on FFortAthenaMutator_SurvivalObjectiveData");
static_assert(sizeof(FFortAthenaMutator_SurvivalObjectiveData) == 0x0001D8, "Wrong size on FFortAthenaMutator_SurvivalObjectiveData");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, BuildingActorObjectiveClass) == 0x000000, "Member 'FFortAthenaMutator_SurvivalObjectiveData::BuildingActorObjectiveClass' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, SpawnDistanceFromGround) == 0x000008, "Member 'FFortAthenaMutator_SurvivalObjectiveData::SpawnDistanceFromGround' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, ActivationSafezoneIndex) == 0x000028, "Member 'FFortAthenaMutator_SurvivalObjectiveData::ActivationSafezoneIndex' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, bClearAreaOnSpawn) == 0x00002D, "Member 'FFortAthenaMutator_SurvivalObjectiveData::bClearAreaOnSpawn' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, ClearAreaRadiusOverride) == 0x000030, "Member 'FFortAthenaMutator_SurvivalObjectiveData::ClearAreaRadiusOverride' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, ClearAreaHalfHeightOverride) == 0x000034, "Member 'FFortAthenaMutator_SurvivalObjectiveData::ClearAreaHalfHeightOverride' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, POIFilterQuery) == 0x000040, "Member 'FFortAthenaMutator_SurvivalObjectiveData::POIFilterQuery' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, RandomizedPOICount) == 0x000088, "Member 'FFortAthenaMutator_SurvivalObjectiveData::RandomizedPOICount' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, ExtraSafezoneIndexes) == 0x000090, "Member 'FFortAthenaMutator_SurvivalObjectiveData::ExtraSafezoneIndexes' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, SpawnedBuildingActorObjective) == 0x0000A0, "Member 'FFortAthenaMutator_SurvivalObjectiveData::SpawnedBuildingActorObjective' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, SpecialActorTag) == 0x0000A8, "Member 'FFortAthenaMutator_SurvivalObjectiveData::SpecialActorTag' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, SpecialActorMinimapIconBrush) == 0x0000B0, "Member 'FFortAthenaMutator_SurvivalObjectiveData::SpecialActorMinimapIconBrush' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, SpecialActorMinimapIconScale) == 0x000138, "Member 'FFortAthenaMutator_SurvivalObjectiveData::SpecialActorMinimapIconScale' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, SpecialActorCompassIconBrush) == 0x000140, "Member 'FFortAthenaMutator_SurvivalObjectiveData::SpecialActorCompassIconBrush' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, SpecialActorCompassIconScale) == 0x0001C8, "Member 'FFortAthenaMutator_SurvivalObjectiveData::SpecialActorCompassIconScale' has a wrong offset!");
static_assert(offsetof(FFortAthenaMutator_SurvivalObjectiveData, SpecialActorID) == 0x0001D0, "Member 'FFortAthenaMutator_SurvivalObjectiveData::SpecialActorID' has a wrong offset!");

// ScriptStruct FortniteGame.VehicleClassDetails
// 0x0068 (0x0068 - 0x0000)
struct FVehicleClassDetails final
{
public:
	TSoftClassPtr<class UClass>                   VehicleClass;                                      // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         VehicleMinSpawnPercent;                            // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         VehicleMaxSpawnPercent;                            // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleClassDetails) == 0x000008, "Wrong alignment on FVehicleClassDetails");
static_assert(sizeof(FVehicleClassDetails) == 0x000068, "Wrong size on FVehicleClassDetails");
static_assert(offsetof(FVehicleClassDetails, VehicleClass) == 0x000000, "Member 'FVehicleClassDetails::VehicleClass' has a wrong offset!");
static_assert(offsetof(FVehicleClassDetails, VehicleMinSpawnPercent) == 0x000028, "Member 'FVehicleClassDetails::VehicleMinSpawnPercent' has a wrong offset!");
static_assert(offsetof(FVehicleClassDetails, VehicleMaxSpawnPercent) == 0x000048, "Member 'FVehicleClassDetails::VehicleMaxSpawnPercent' has a wrong offset!");

// ScriptStruct FortniteGame.ProxyGameplayCueDamagePhysical
// 0x0020 (0x0020 - 0x0000)
struct FProxyGameplayCueDamagePhysical final
{
public:
	float                                         ProxyGameplayCueDamagePhysicalMagnitude;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0008(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FProxyGameplayCueDamagePhysical) == 0x000008, "Wrong alignment on FProxyGameplayCueDamagePhysical");
static_assert(sizeof(FProxyGameplayCueDamagePhysical) == 0x000020, "Wrong size on FProxyGameplayCueDamagePhysical");
static_assert(offsetof(FProxyGameplayCueDamagePhysical, ProxyGameplayCueDamagePhysicalMagnitude) == 0x000000, "Member 'FProxyGameplayCueDamagePhysical::ProxyGameplayCueDamagePhysicalMagnitude' has a wrong offset!");
static_assert(offsetof(FProxyGameplayCueDamagePhysical, EffectContext) == 0x000008, "Member 'FProxyGameplayCueDamagePhysical::EffectContext' has a wrong offset!");

// ScriptStruct FortniteGame.ActionTextPair
// 0x0020 (0x0020 - 0x0000)
struct FActionTextPair final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionTextPair) == 0x000008, "Wrong alignment on FActionTextPair");
static_assert(sizeof(FActionTextPair) == 0x000020, "Wrong size on FActionTextPair");
static_assert(offsetof(FActionTextPair, Action) == 0x000000, "Member 'FActionTextPair::Action' has a wrong offset!");
static_assert(offsetof(FActionTextPair, Text) == 0x000008, "Member 'FActionTextPair::Text' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementData_Keybinding
// 0x0010 (0x00F8 - 0x00E8)
struct FFortClientAnnouncementData_Keybinding final : public FFortClientAnnouncementData_Basic
{
public:
	TArray<struct FActionTextPair>                GamapadActionTextList;                             // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientAnnouncementData_Keybinding) == 0x000008, "Wrong alignment on FFortClientAnnouncementData_Keybinding");
static_assert(sizeof(FFortClientAnnouncementData_Keybinding) == 0x0000F8, "Wrong size on FFortClientAnnouncementData_Keybinding");
static_assert(offsetof(FFortClientAnnouncementData_Keybinding, GamapadActionTextList) == 0x0000E8, "Member 'FFortClientAnnouncementData_Keybinding::GamapadActionTextList' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterPawnDifficultyLevelModifier
// 0x0058 (0x0058 - 0x0000)
struct FFortAIEncounterPawnDifficultyLevelModifier final
{
public:
	struct FGameplayTagQuery                      EncounterTagRequirementsQuery;                     // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   DifficultyLevelModifierCurve;                      // 0x0048(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterPawnDifficultyLevelModifier) == 0x000008, "Wrong alignment on FFortAIEncounterPawnDifficultyLevelModifier");
static_assert(sizeof(FFortAIEncounterPawnDifficultyLevelModifier) == 0x000058, "Wrong size on FFortAIEncounterPawnDifficultyLevelModifier");
static_assert(offsetof(FFortAIEncounterPawnDifficultyLevelModifier, EncounterTagRequirementsQuery) == 0x000000, "Member 'FFortAIEncounterPawnDifficultyLevelModifier::EncounterTagRequirementsQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPawnDifficultyLevelModifier, DifficultyLevelModifierCurve) == 0x000048, "Member 'FFortAIEncounterPawnDifficultyLevelModifier::DifficultyLevelModifierCurve' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingActorMinimalReplicationProxy
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FBuildingActorMinimalReplicationProxy final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuantizedBuildingAttribute            BuildTime;                                         // 0x0008(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FQuantizedBuildingAttribute            RepairTime;                                        // 0x000C(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	int16                                         Health;                                            // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MaxHealth;                                         // 0x0012(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingActorMinimalReplicationProxy) == 0x000008, "Wrong alignment on FBuildingActorMinimalReplicationProxy");
static_assert(sizeof(FBuildingActorMinimalReplicationProxy) == 0x000018, "Wrong size on FBuildingActorMinimalReplicationProxy");
static_assert(offsetof(FBuildingActorMinimalReplicationProxy, BuildTime) == 0x000008, "Member 'FBuildingActorMinimalReplicationProxy::BuildTime' has a wrong offset!");
static_assert(offsetof(FBuildingActorMinimalReplicationProxy, RepairTime) == 0x00000C, "Member 'FBuildingActorMinimalReplicationProxy::RepairTime' has a wrong offset!");
static_assert(offsetof(FBuildingActorMinimalReplicationProxy, Health) == 0x000010, "Member 'FBuildingActorMinimalReplicationProxy::Health' has a wrong offset!");
static_assert(offsetof(FBuildingActorMinimalReplicationProxy, MaxHealth) == 0x000012, "Member 'FBuildingActorMinimalReplicationProxy::MaxHealth' has a wrong offset!");

// ScriptStruct FortniteGame.FortCategoryTableRow
// 0x0020 (0x0028 - 0x0008)
struct FFortCategoryTableRow final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCategoryTableRow) == 0x000008, "Wrong alignment on FFortCategoryTableRow");
static_assert(sizeof(FFortCategoryTableRow) == 0x000028, "Wrong size on FFortCategoryTableRow");
static_assert(offsetof(FFortCategoryTableRow, Name) == 0x000008, "Member 'FFortCategoryTableRow::Name' has a wrong offset!");
static_assert(offsetof(FFortCategoryTableRow, SortPriority) == 0x000020, "Member 'FFortCategoryTableRow::SortPriority' has a wrong offset!");

// ScriptStruct FortniteGame.EditorOnlyBuildingInstanceMaterialParameters
// 0x0030 (0x0030 - 0x0000)
struct FEditorOnlyBuildingInstanceMaterialParameters final
{
public:
	TArray<struct FScalarParameterValue>          ScalarParams;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVectorParameterValue>          VectorParams;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTextureParameterValue>         TextureParams;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEditorOnlyBuildingInstanceMaterialParameters) == 0x000008, "Wrong alignment on FEditorOnlyBuildingInstanceMaterialParameters");
static_assert(sizeof(FEditorOnlyBuildingInstanceMaterialParameters) == 0x000030, "Wrong size on FEditorOnlyBuildingInstanceMaterialParameters");
static_assert(offsetof(FEditorOnlyBuildingInstanceMaterialParameters, ScalarParams) == 0x000000, "Member 'FEditorOnlyBuildingInstanceMaterialParameters::ScalarParams' has a wrong offset!");
static_assert(offsetof(FEditorOnlyBuildingInstanceMaterialParameters, VectorParams) == 0x000010, "Member 'FEditorOnlyBuildingInstanceMaterialParameters::VectorParams' has a wrong offset!");
static_assert(offsetof(FEditorOnlyBuildingInstanceMaterialParameters, TextureParams) == 0x000020, "Member 'FEditorOnlyBuildingInstanceMaterialParameters::TextureParams' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingNavObstacle
// 0x0020 (0x0020 - 0x0000)
struct FBuildingNavObstacle final
{
public:
	struct FBox                                   LocalBounds;                                       // 0x0000(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBuildingNavObstacleType                      ObstacleType;                                      // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingNavObstacle) == 0x000004, "Wrong alignment on FBuildingNavObstacle");
static_assert(sizeof(FBuildingNavObstacle) == 0x000020, "Wrong size on FBuildingNavObstacle");
static_assert(offsetof(FBuildingNavObstacle, LocalBounds) == 0x000000, "Member 'FBuildingNavObstacle::LocalBounds' has a wrong offset!");
static_assert(offsetof(FBuildingNavObstacle, ObstacleType) == 0x00001C, "Member 'FBuildingNavObstacle::ObstacleType' has a wrong offset!");

// ScriptStruct FortniteGame.PotentiallyDestroyedBuilding
// 0x0010 (0x0010 - 0x0000)
struct FPotentiallyDestroyedBuilding final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceCollision;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPotentiallyDestroyedBuilding) == 0x000008, "Wrong alignment on FPotentiallyDestroyedBuilding");
static_assert(sizeof(FPotentiallyDestroyedBuilding) == 0x000010, "Wrong size on FPotentiallyDestroyedBuilding");
static_assert(offsetof(FPotentiallyDestroyedBuilding, BuildingActor) == 0x000000, "Member 'FPotentiallyDestroyedBuilding::BuildingActor' has a wrong offset!");
static_assert(offsetof(FPotentiallyDestroyedBuilding, TimeSinceCollision) == 0x000008, "Member 'FPotentiallyDestroyedBuilding::TimeSinceCollision' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyAnswerBase
// 0x0008 (0x0008 - 0x0000)
struct FFortPlayerSurveyAnswerBase
{
public:
	struct FTimespan                              TimeSpentAnswering;                                // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnswerBase) == 0x000008, "Wrong alignment on FFortPlayerSurveyAnswerBase");
static_assert(sizeof(FFortPlayerSurveyAnswerBase) == 0x000008, "Wrong size on FFortPlayerSurveyAnswerBase");
static_assert(offsetof(FFortPlayerSurveyAnswerBase, TimeSpentAnswering) == 0x000000, "Member 'FFortPlayerSurveyAnswerBase::TimeSpentAnswering' has a wrong offset!");

// ScriptStruct FortniteGame.AnimatingMaterialPair
// 0x0010 (0x0010 - 0x0000)
struct FAnimatingMaterialPair final
{
public:
	class UMaterialInterface*                     Original;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Override;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimatingMaterialPair) == 0x000008, "Wrong alignment on FAnimatingMaterialPair");
static_assert(sizeof(FAnimatingMaterialPair) == 0x000010, "Wrong size on FAnimatingMaterialPair");
static_assert(offsetof(FAnimatingMaterialPair, Original) == 0x000000, "Member 'FAnimatingMaterialPair::Original' has a wrong offset!");
static_assert(offsetof(FAnimatingMaterialPair, Override) == 0x000008, "Member 'FAnimatingMaterialPair::Override' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaVehicleInputState
// 0x002C (0x002C - 0x0000)
struct FFortAthenaVehicleInputState final
{
public:
	float                                         ForwardAlpha;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightAlpha;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAlpha;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookUpDelta;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnDelta;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAlpha;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityOffset;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovementDir;                                       // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsSprinting : 1;                                  // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsJumping : 1;                                    // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBraking : 1;                                    // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsHonking : 1;                                    // 0x0028(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreForwardInAir : 1;                           // 0x0028(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMovementModifier0 : 1;                            // 0x0028(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMovementModifier1 : 1;                            // 0x0028(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMovementModifier2 : 1;                            // 0x0028(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaVehicleInputState) == 0x000004, "Wrong alignment on FFortAthenaVehicleInputState");
static_assert(sizeof(FFortAthenaVehicleInputState) == 0x00002C, "Wrong size on FFortAthenaVehicleInputState");
static_assert(offsetof(FFortAthenaVehicleInputState, ForwardAlpha) == 0x000000, "Member 'FFortAthenaVehicleInputState::ForwardAlpha' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputState, RightAlpha) == 0x000004, "Member 'FFortAthenaVehicleInputState::RightAlpha' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputState, PitchAlpha) == 0x000008, "Member 'FFortAthenaVehicleInputState::PitchAlpha' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputState, LookUpDelta) == 0x00000C, "Member 'FFortAthenaVehicleInputState::LookUpDelta' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputState, TurnDelta) == 0x000010, "Member 'FFortAthenaVehicleInputState::TurnDelta' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputState, SteerAlpha) == 0x000014, "Member 'FFortAthenaVehicleInputState::SteerAlpha' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputState, GravityOffset) == 0x000018, "Member 'FFortAthenaVehicleInputState::GravityOffset' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputState, MovementDir) == 0x00001C, "Member 'FFortAthenaVehicleInputState::MovementDir' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerPerformanceEstimateSettings
// 0x0040 (0x0040 - 0x0000)
struct FFortPlayerPerformanceEstimateSettings final
{
public:
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformMin;             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformOrigin;          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformMax;             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EncounterPlayerPerformanceWeight;                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousWavePlayerPerformanceWeight;               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CampaignPlayerPerformanceWeight;                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerPerformanceEstimateSettings) == 0x000008, "Wrong alignment on FFortPlayerPerformanceEstimateSettings");
static_assert(sizeof(FFortPlayerPerformanceEstimateSettings) == 0x000040, "Wrong size on FFortPlayerPerformanceEstimateSettings");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformMin) == 0x000000, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformMin' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformOrigin) == 0x000010, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformOrigin' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformMax) == 0x000020, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformMax' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, EncounterPlayerPerformanceWeight) == 0x000030, "Member 'FFortPlayerPerformanceEstimateSettings::EncounterPlayerPerformanceWeight' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PreviousWavePlayerPerformanceWeight) == 0x000034, "Member 'FFortPlayerPerformanceEstimateSettings::PreviousWavePlayerPerformanceWeight' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, CampaignPlayerPerformanceWeight) == 0x000038, "Member 'FFortPlayerPerformanceEstimateSettings::CampaignPlayerPerformanceWeight' has a wrong offset!");

// ScriptStruct FortniteGame.TierMeshSets
// 0x0018 (0x0018 - 0x0000)
struct FTierMeshSets final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMeshSet>                       MeshSets;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTierMeshSets) == 0x000008, "Wrong alignment on FTierMeshSets");
static_assert(sizeof(FTierMeshSets) == 0x000018, "Wrong size on FTierMeshSets");
static_assert(offsetof(FTierMeshSets, Tier) == 0x000000, "Member 'FTierMeshSets::Tier' has a wrong offset!");
static_assert(offsetof(FTierMeshSets, MeshSets) == 0x000008, "Member 'FTierMeshSets::MeshSets' has a wrong offset!");

// ScriptStruct FortniteGame.GeneralChatReturn
// 0x0028 (0x0028 - 0x0000)
struct FGeneralChatReturn final
{
public:
	TArray<struct FGeneralChatRoom>               GlobalChatRooms;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGeneralChatRoom>               FounderChatRooms;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNeedsPaidAccessForGlobalChat;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedsPaidAccessForFounderChat;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGlobalChatDisabled;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFounderChatDisabled;                            // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubGameGlobalChatDisabled;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeneralChatReturn) == 0x000008, "Wrong alignment on FGeneralChatReturn");
static_assert(sizeof(FGeneralChatReturn) == 0x000028, "Wrong size on FGeneralChatReturn");
static_assert(offsetof(FGeneralChatReturn, GlobalChatRooms) == 0x000000, "Member 'FGeneralChatReturn::GlobalChatRooms' has a wrong offset!");
static_assert(offsetof(FGeneralChatReturn, FounderChatRooms) == 0x000010, "Member 'FGeneralChatReturn::FounderChatRooms' has a wrong offset!");
static_assert(offsetof(FGeneralChatReturn, bNeedsPaidAccessForGlobalChat) == 0x000020, "Member 'FGeneralChatReturn::bNeedsPaidAccessForGlobalChat' has a wrong offset!");
static_assert(offsetof(FGeneralChatReturn, bNeedsPaidAccessForFounderChat) == 0x000021, "Member 'FGeneralChatReturn::bNeedsPaidAccessForFounderChat' has a wrong offset!");
static_assert(offsetof(FGeneralChatReturn, bIsGlobalChatDisabled) == 0x000022, "Member 'FGeneralChatReturn::bIsGlobalChatDisabled' has a wrong offset!");
static_assert(offsetof(FGeneralChatReturn, bIsFounderChatDisabled) == 0x000023, "Member 'FGeneralChatReturn::bIsFounderChatDisabled' has a wrong offset!");
static_assert(offsetof(FGeneralChatReturn, bIsSubGameGlobalChatDisabled) == 0x000024, "Member 'FGeneralChatReturn::bIsSubGameGlobalChatDisabled' has a wrong offset!");

// ScriptStruct FortniteGame.CrucibleSegmentResults
// 0x0020 (0x0020 - 0x0000)
struct FCrucibleSegmentResults final
{
public:
	int32                                         SegmentId;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalculatedScore;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalculatedPenalty;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CalculatedMissedTargets;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinishTime;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAIElims;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTargetElims;                                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrucibleSegmentResults) == 0x000004, "Wrong alignment on FCrucibleSegmentResults");
static_assert(sizeof(FCrucibleSegmentResults) == 0x000020, "Wrong size on FCrucibleSegmentResults");
static_assert(offsetof(FCrucibleSegmentResults, SegmentId) == 0x000000, "Member 'FCrucibleSegmentResults::SegmentId' has a wrong offset!");
static_assert(offsetof(FCrucibleSegmentResults, CalculatedScore) == 0x000004, "Member 'FCrucibleSegmentResults::CalculatedScore' has a wrong offset!");
static_assert(offsetof(FCrucibleSegmentResults, CalculatedPenalty) == 0x000008, "Member 'FCrucibleSegmentResults::CalculatedPenalty' has a wrong offset!");
static_assert(offsetof(FCrucibleSegmentResults, CalculatedMissedTargets) == 0x00000C, "Member 'FCrucibleSegmentResults::CalculatedMissedTargets' has a wrong offset!");
static_assert(offsetof(FCrucibleSegmentResults, StartTime) == 0x000010, "Member 'FCrucibleSegmentResults::StartTime' has a wrong offset!");
static_assert(offsetof(FCrucibleSegmentResults, FinishTime) == 0x000014, "Member 'FCrucibleSegmentResults::FinishTime' has a wrong offset!");
static_assert(offsetof(FCrucibleSegmentResults, NumAIElims) == 0x000018, "Member 'FCrucibleSegmentResults::NumAIElims' has a wrong offset!");
static_assert(offsetof(FCrucibleSegmentResults, NumTargetElims) == 0x00001C, "Member 'FCrucibleSegmentResults::NumTargetElims' has a wrong offset!");

// ScriptStruct FortniteGame.CrucibleCourseResults
// 0x0030 (0x0030 - 0x0000)
struct FCrucibleCourseResults final
{
public:
	float                                         CalculatedScore;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalculatedTotalPenalty;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CalculatedMissedTargets;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CalculatedSpawnedTargets;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCrucibleSegmentResults>        SegmentResults;                                    // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinishTime;                                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CancelTime;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCrucibleRunMode                          RunMode;                                           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrucibleCourseResults) == 0x000008, "Wrong alignment on FCrucibleCourseResults");
static_assert(sizeof(FCrucibleCourseResults) == 0x000030, "Wrong size on FCrucibleCourseResults");
static_assert(offsetof(FCrucibleCourseResults, CalculatedScore) == 0x000000, "Member 'FCrucibleCourseResults::CalculatedScore' has a wrong offset!");
static_assert(offsetof(FCrucibleCourseResults, CalculatedTotalPenalty) == 0x000004, "Member 'FCrucibleCourseResults::CalculatedTotalPenalty' has a wrong offset!");
static_assert(offsetof(FCrucibleCourseResults, CalculatedMissedTargets) == 0x000008, "Member 'FCrucibleCourseResults::CalculatedMissedTargets' has a wrong offset!");
static_assert(offsetof(FCrucibleCourseResults, CalculatedSpawnedTargets) == 0x00000C, "Member 'FCrucibleCourseResults::CalculatedSpawnedTargets' has a wrong offset!");
static_assert(offsetof(FCrucibleCourseResults, SegmentResults) == 0x000010, "Member 'FCrucibleCourseResults::SegmentResults' has a wrong offset!");
static_assert(offsetof(FCrucibleCourseResults, StartTime) == 0x000020, "Member 'FCrucibleCourseResults::StartTime' has a wrong offset!");
static_assert(offsetof(FCrucibleCourseResults, FinishTime) == 0x000024, "Member 'FCrucibleCourseResults::FinishTime' has a wrong offset!");
static_assert(offsetof(FCrucibleCourseResults, CancelTime) == 0x000028, "Member 'FCrucibleCourseResults::CancelTime' has a wrong offset!");
static_assert(offsetof(FCrucibleCourseResults, RunMode) == 0x00002C, "Member 'FCrucibleCourseResults::RunMode' has a wrong offset!");

// ScriptStruct FortniteGame.LogicalBuilding
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FLogicalBuilding final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLogicalBuilding) == 0x000008, "Wrong alignment on FLogicalBuilding");
static_assert(sizeof(FLogicalBuilding) == 0x0000A8, "Wrong size on FLogicalBuilding");

// ScriptStruct FortniteGame.FortCompetitiveIdentityInfo
// 0x0050 (0x0058 - 0x0008)
struct FFortCompetitiveIdentityInfo final : public FTableRowBase
{
public:
	class FString                                 RegionId;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FlagAsset;                                         // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCompetitiveIdentityInfo) == 0x000008, "Wrong alignment on FFortCompetitiveIdentityInfo");
static_assert(sizeof(FFortCompetitiveIdentityInfo) == 0x000058, "Wrong size on FFortCompetitiveIdentityInfo");
static_assert(offsetof(FFortCompetitiveIdentityInfo, RegionId) == 0x000008, "Member 'FFortCompetitiveIdentityInfo::RegionId' has a wrong offset!");
static_assert(offsetof(FFortCompetitiveIdentityInfo, DisplayName) == 0x000018, "Member 'FFortCompetitiveIdentityInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortCompetitiveIdentityInfo, FlagAsset) == 0x000030, "Member 'FFortCompetitiveIdentityInfo::FlagAsset' has a wrong offset!");

// ScriptStruct FortniteGame.RecipeDataTableRowHandleQuantityData
// 0x0018 (0x0018 - 0x0000)
struct FRecipeDataTableRowHandleQuantityData final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConvertRemainderUp;                                // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipeDataTableRowHandleQuantityData) == 0x000008, "Wrong alignment on FRecipeDataTableRowHandleQuantityData");
static_assert(sizeof(FRecipeDataTableRowHandleQuantityData) == 0x000018, "Wrong size on FRecipeDataTableRowHandleQuantityData");
static_assert(offsetof(FRecipeDataTableRowHandleQuantityData, DataTableRowHandle) == 0x000000, "Member 'FRecipeDataTableRowHandleQuantityData::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FRecipeDataTableRowHandleQuantityData, Quantity) == 0x000010, "Member 'FRecipeDataTableRowHandleQuantityData::Quantity' has a wrong offset!");
static_assert(offsetof(FRecipeDataTableRowHandleQuantityData, ConvertRemainderUp) == 0x000014, "Member 'FRecipeDataTableRowHandleQuantityData::ConvertRemainderUp' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingValueRules
// 0x001C (0x001C - 0x0000)
struct FBuildingValueRules final
{
public:
	int32                                         CellsAbove;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellsBelow;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellHorizontalRadius;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromObjectiveWeight;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackWeight;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StructuralWeight;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrapWeight;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingValueRules) == 0x000004, "Wrong alignment on FBuildingValueRules");
static_assert(sizeof(FBuildingValueRules) == 0x00001C, "Wrong size on FBuildingValueRules");
static_assert(offsetof(FBuildingValueRules, CellsAbove) == 0x000000, "Member 'FBuildingValueRules::CellsAbove' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, CellsBelow) == 0x000004, "Member 'FBuildingValueRules::CellsBelow' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, CellHorizontalRadius) == 0x000008, "Member 'FBuildingValueRules::CellHorizontalRadius' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, DistanceFromObjectiveWeight) == 0x00000C, "Member 'FBuildingValueRules::DistanceFromObjectiveWeight' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, AttackWeight) == 0x000010, "Member 'FBuildingValueRules::AttackWeight' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, StructuralWeight) == 0x000014, "Member 'FBuildingValueRules::StructuralWeight' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, TrapWeight) == 0x000018, "Member 'FBuildingValueRules::TrapWeight' has a wrong offset!");

// ScriptStruct FortniteGame.TimeOfDayBlueprintDefaultVariables
// 0x0010 (0x0010 - 0x0000)
struct FTimeOfDayBlueprintDefaultVariables final
{
public:
	class UStaticMesh*                            AlternateShadowStaticMesh;                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricLightScatteringIntensity;                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableTODLightsAndMaterialEmissiveValues;        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableStaticMeshShadowCastingWhenLightsAreActive; // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAnAlternateShadowMeshWhenTheLightIsOff;        // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastVolumetricShadows;                            // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeOfDayBlueprintDefaultVariables) == 0x000008, "Wrong alignment on FTimeOfDayBlueprintDefaultVariables");
static_assert(sizeof(FTimeOfDayBlueprintDefaultVariables) == 0x000010, "Wrong size on FTimeOfDayBlueprintDefaultVariables");
static_assert(offsetof(FTimeOfDayBlueprintDefaultVariables, AlternateShadowStaticMesh) == 0x000000, "Member 'FTimeOfDayBlueprintDefaultVariables::AlternateShadowStaticMesh' has a wrong offset!");
static_assert(offsetof(FTimeOfDayBlueprintDefaultVariables, VolumetricLightScatteringIntensity) == 0x000008, "Member 'FTimeOfDayBlueprintDefaultVariables::VolumetricLightScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FTimeOfDayBlueprintDefaultVariables, bDisableTODLightsAndMaterialEmissiveValues) == 0x00000C, "Member 'FTimeOfDayBlueprintDefaultVariables::bDisableTODLightsAndMaterialEmissiveValues' has a wrong offset!");
static_assert(offsetof(FTimeOfDayBlueprintDefaultVariables, bDisableStaticMeshShadowCastingWhenLightsAreActive) == 0x00000D, "Member 'FTimeOfDayBlueprintDefaultVariables::bDisableStaticMeshShadowCastingWhenLightsAreActive' has a wrong offset!");
static_assert(offsetof(FTimeOfDayBlueprintDefaultVariables, bUseAnAlternateShadowMeshWhenTheLightIsOff) == 0x00000E, "Member 'FTimeOfDayBlueprintDefaultVariables::bUseAnAlternateShadowMeshWhenTheLightIsOff' has a wrong offset!");
static_assert(offsetof(FTimeOfDayBlueprintDefaultVariables, bCastVolumetricShadows) == 0x00000F, "Member 'FTimeOfDayBlueprintDefaultVariables::bCastVolumetricShadows' has a wrong offset!");

// ScriptStruct FortniteGame.FortConnectionData
// 0x0030 (0x0030 - 0x0000)
struct FFortConnectionData final
{
public:
	class ABuildingSMActor*                       ConnectedActor;                                    // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ConnectedActorGuid;                                // 0x0008(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MySocketName;                                      // 0x0018(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TheirSocketName;                                   // 0x0020(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortConnectionData) == 0x000008, "Wrong alignment on FFortConnectionData");
static_assert(sizeof(FFortConnectionData) == 0x000030, "Wrong size on FFortConnectionData");
static_assert(offsetof(FFortConnectionData, ConnectedActor) == 0x000000, "Member 'FFortConnectionData::ConnectedActor' has a wrong offset!");
static_assert(offsetof(FFortConnectionData, ConnectedActorGuid) == 0x000008, "Member 'FFortConnectionData::ConnectedActorGuid' has a wrong offset!");
static_assert(offsetof(FFortConnectionData, MySocketName) == 0x000018, "Member 'FFortConnectionData::MySocketName' has a wrong offset!");
static_assert(offsetof(FFortConnectionData, TheirSocketName) == 0x000020, "Member 'FFortConnectionData::TheirSocketName' has a wrong offset!");

// ScriptStruct FortniteGame.FortConnectivityComponentData
// 0x0018 (0x0018 - 0x0000)
struct FFortConnectivityComponentData final
{
public:
	TArray<struct FFortConnectionData>            Connections;                                       // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	bool                                          bIsPowered;                                        // 0x0010(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsProvidingPower;                                 // 0x0011(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowConnections;                                 // 0x0012(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsPowerToPassThrough;                         // 0x0013(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortConnectivityComponentData) == 0x000008, "Wrong alignment on FFortConnectivityComponentData");
static_assert(sizeof(FFortConnectivityComponentData) == 0x000018, "Wrong size on FFortConnectivityComponentData");
static_assert(offsetof(FFortConnectivityComponentData, Connections) == 0x000000, "Member 'FFortConnectivityComponentData::Connections' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bIsPowered) == 0x000010, "Member 'FFortConnectivityComponentData::bIsPowered' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bIsProvidingPower) == 0x000011, "Member 'FFortConnectivityComponentData::bIsProvidingPower' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bAllowConnections) == 0x000012, "Member 'FFortConnectivityComponentData::bAllowConnections' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bAllowsPowerToPassThrough) == 0x000013, "Member 'FFortConnectivityComponentData::bAllowsPowerToPassThrough' has a wrong offset!");

// ScriptStruct FortniteGame.MOBATurretPrioritySetting
// 0x000C (0x000C - 0x0000)
struct FMOBATurretPrioritySetting final
{
public:
	int32                                         AIPriority;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerPriority;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingPriority;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMOBATurretPrioritySetting) == 0x000004, "Wrong alignment on FMOBATurretPrioritySetting");
static_assert(sizeof(FMOBATurretPrioritySetting) == 0x00000C, "Wrong size on FMOBATurretPrioritySetting");
static_assert(offsetof(FMOBATurretPrioritySetting, AIPriority) == 0x000000, "Member 'FMOBATurretPrioritySetting::AIPriority' has a wrong offset!");
static_assert(offsetof(FMOBATurretPrioritySetting, PlayerPriority) == 0x000004, "Member 'FMOBATurretPrioritySetting::PlayerPriority' has a wrong offset!");
static_assert(offsetof(FMOBATurretPrioritySetting, BuildingPriority) == 0x000008, "Member 'FMOBATurretPrioritySetting::BuildingPriority' has a wrong offset!");

// ScriptStruct FortniteGame.FortMatchmakingConfig
// 0x0010 (0x0010 - 0x0000)
struct FFortMatchmakingConfig final
{
public:
	float                                         ChanceToHostOverride;                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceToHostIncrease;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSearchResultsOverride;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProcessedSearchResults;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMatchmakingConfig) == 0x000004, "Wrong alignment on FFortMatchmakingConfig");
static_assert(sizeof(FFortMatchmakingConfig) == 0x000010, "Wrong size on FFortMatchmakingConfig");
static_assert(offsetof(FFortMatchmakingConfig, ChanceToHostOverride) == 0x000000, "Member 'FFortMatchmakingConfig::ChanceToHostOverride' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingConfig, ChanceToHostIncrease) == 0x000004, "Member 'FFortMatchmakingConfig::ChanceToHostIncrease' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingConfig, MaxSearchResultsOverride) == 0x000008, "Member 'FFortMatchmakingConfig::MaxSearchResultsOverride' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingConfig, MaxProcessedSearchResults) == 0x00000C, "Member 'FFortMatchmakingConfig::MaxProcessedSearchResults' has a wrong offset!");

// ScriptStruct FortniteGame.ReplayTeamFlightEventInfo
// 0x0028 (0x0040 - 0x0018)
struct FReplayTeamFlightEventInfo final : public FBaseReplayEventInfo
{
public:
	struct FVector                                StartLocation;                                     // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRotation;                                     // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IndexNum;                                          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplayTeamFlightEventInfo) == 0x000008, "Wrong alignment on FReplayTeamFlightEventInfo");
static_assert(sizeof(FReplayTeamFlightEventInfo) == 0x000040, "Wrong size on FReplayTeamFlightEventInfo");
static_assert(offsetof(FReplayTeamFlightEventInfo, StartLocation) == 0x000018, "Member 'FReplayTeamFlightEventInfo::StartLocation' has a wrong offset!");
static_assert(offsetof(FReplayTeamFlightEventInfo, StartRotation) == 0x000024, "Member 'FReplayTeamFlightEventInfo::StartRotation' has a wrong offset!");
static_assert(offsetof(FReplayTeamFlightEventInfo, EndLocation) == 0x000030, "Member 'FReplayTeamFlightEventInfo::EndLocation' has a wrong offset!");
static_assert(offsetof(FReplayTeamFlightEventInfo, IndexNum) == 0x00003C, "Member 'FReplayTeamFlightEventInfo::IndexNum' has a wrong offset!");

// ScriptStruct FortniteGame.FortBounceData
// 0x0030 (0x0030 - 0x0000)
struct FFortBounceData final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DeformationVector;                                 // 0x000C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DeformationCenter;                                 // 0x001C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBounceType                               BounceType;                                        // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalInstigator;                                  // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBounceData) == 0x000004, "Wrong alignment on FFortBounceData");
static_assert(sizeof(FFortBounceData) == 0x000030, "Wrong size on FFortBounceData");
static_assert(offsetof(FFortBounceData, StartTime) == 0x000000, "Member 'FFortBounceData::StartTime' has a wrong offset!");
static_assert(offsetof(FFortBounceData, BounceValue) == 0x000004, "Member 'FFortBounceData::BounceValue' has a wrong offset!");
static_assert(offsetof(FFortBounceData, Radius) == 0x000008, "Member 'FFortBounceData::Radius' has a wrong offset!");
static_assert(offsetof(FFortBounceData, DeformationVector) == 0x00000C, "Member 'FFortBounceData::DeformationVector' has a wrong offset!");
static_assert(offsetof(FFortBounceData, DeformationCenter) == 0x00001C, "Member 'FFortBounceData::DeformationCenter' has a wrong offset!");
static_assert(offsetof(FFortBounceData, BounceType) == 0x00002C, "Member 'FFortBounceData::BounceType' has a wrong offset!");
static_assert(offsetof(FFortBounceData, bLocalInstigator) == 0x00002D, "Member 'FFortBounceData::bLocalInstigator' has a wrong offset!");

// ScriptStruct FortniteGame.TimeOfDaySpeed
// 0x0020 (0x0020 - 0x0000)
struct FTimeOfDaySpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeOfDaySpeed) == 0x000008, "Wrong alignment on FTimeOfDaySpeed");
static_assert(sizeof(FTimeOfDaySpeed) == 0x000020, "Wrong size on FTimeOfDaySpeed");
static_assert(offsetof(FTimeOfDaySpeed, Speed) == 0x000000, "Member 'FTimeOfDaySpeed::Speed' has a wrong offset!");
static_assert(offsetof(FTimeOfDaySpeed, DisplayName) == 0x000008, "Member 'FTimeOfDaySpeed::DisplayName' has a wrong offset!");

// ScriptStruct FortniteGame.MissionTimerData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FMissionTimerData final
{
public:
	bool                                          bTimerIsPaused;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OriginalTimePeriod;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplicatedRemainingTime;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeAddedOrRemoved;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastTimeAddedOrRemoved;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientRemainingTime;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x18];                                      // 0x0018(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMissionTimerData) == 0x000008, "Wrong alignment on FMissionTimerData");
static_assert(sizeof(FMissionTimerData) == 0x000030, "Wrong size on FMissionTimerData");
static_assert(offsetof(FMissionTimerData, bTimerIsPaused) == 0x000000, "Member 'FMissionTimerData::bTimerIsPaused' has a wrong offset!");
static_assert(offsetof(FMissionTimerData, OriginalTimePeriod) == 0x000004, "Member 'FMissionTimerData::OriginalTimePeriod' has a wrong offset!");
static_assert(offsetof(FMissionTimerData, ReplicatedRemainingTime) == 0x000008, "Member 'FMissionTimerData::ReplicatedRemainingTime' has a wrong offset!");
static_assert(offsetof(FMissionTimerData, TimeAddedOrRemoved) == 0x00000C, "Member 'FMissionTimerData::TimeAddedOrRemoved' has a wrong offset!");
static_assert(offsetof(FMissionTimerData, LastTimeAddedOrRemoved) == 0x000010, "Member 'FMissionTimerData::LastTimeAddedOrRemoved' has a wrong offset!");
static_assert(offsetof(FMissionTimerData, ClientRemainingTime) == 0x000014, "Member 'FMissionTimerData::ClientRemainingTime' has a wrong offset!");

// ScriptStruct FortniteGame.ClimbLinkData
// 0x0028 (0x0028 - 0x0000)
struct FClimbLinkData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        UniqueLinkId;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClimbLinkData) == 0x000004, "Wrong alignment on FClimbLinkData");
static_assert(sizeof(FClimbLinkData) == 0x000028, "Wrong size on FClimbLinkData");
static_assert(offsetof(FClimbLinkData, UniqueLinkId) == 0x000020, "Member 'FClimbLinkData::UniqueLinkId' has a wrong offset!");

// ScriptStruct FortniteGame.FortVehicleAudioParam
// 0x0020 (0x0020 - 0x0000)
struct FFortVehicleAudioParam final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleAudioInterpolationType                InterpType;                                        // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackSpeed;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReleaseSpeed;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortVehicleAudioParam) == 0x000008, "Wrong alignment on FFortVehicleAudioParam");
static_assert(sizeof(FFortVehicleAudioParam) == 0x000020, "Wrong size on FFortVehicleAudioParam");
static_assert(offsetof(FFortVehicleAudioParam, Value) == 0x000000, "Member 'FFortVehicleAudioParam::Value' has a wrong offset!");
static_assert(offsetof(FFortVehicleAudioParam, InterpType) == 0x000004, "Member 'FFortVehicleAudioParam::InterpType' has a wrong offset!");
static_assert(offsetof(FFortVehicleAudioParam, Curve) == 0x000008, "Member 'FFortVehicleAudioParam::Curve' has a wrong offset!");
static_assert(offsetof(FFortVehicleAudioParam, AttackSpeed) == 0x000010, "Member 'FFortVehicleAudioParam::AttackSpeed' has a wrong offset!");
static_assert(offsetof(FFortVehicleAudioParam, ReleaseSpeed) == 0x000014, "Member 'FFortVehicleAudioParam::ReleaseSpeed' has a wrong offset!");

// ScriptStruct FortniteGame.AlterationWeightSet
// 0x0010 (0x0010 - 0x0000)
struct FAlterationWeightSet final
{
public:
	TArray<struct FAlterationWeightData>          WeightData;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlterationWeightSet) == 0x000008, "Wrong alignment on FAlterationWeightSet");
static_assert(sizeof(FAlterationWeightSet) == 0x000010, "Wrong size on FAlterationWeightSet");
static_assert(offsetof(FAlterationWeightSet, WeightData) == 0x000000, "Member 'FAlterationWeightSet::WeightData' has a wrong offset!");

// ScriptStruct FortniteGame.AlterationGroup
// 0x0050 (0x0058 - 0x0008)
struct FAlterationGroup final : public FTableRowBase
{
public:
	TMap<EFortRarity, struct FAlterationWeightSet> RarityMapping;                                     // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlterationGroup) == 0x000008, "Wrong alignment on FAlterationGroup");
static_assert(sizeof(FAlterationGroup) == 0x000058, "Wrong size on FAlterationGroup");
static_assert(offsetof(FAlterationGroup, RarityMapping) == 0x000008, "Member 'FAlterationGroup::RarityMapping' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectModifierDescription
// 0x0040 (0x0040 - 0x0000)
struct FFortGameplayEffectModifierDescription final
{
public:
	struct FGameplayAttribute                     ModAttribute;                                      // 0x0000(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ModDescription;                                    // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsBuff;                                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAttributeDisplay                         MagnitudeFormat;                                   // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortStatDisplayType                          DisplayType;                                       // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Magnitude;                                         // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayEffectModifierDescription) == 0x000008, "Wrong alignment on FFortGameplayEffectModifierDescription");
static_assert(sizeof(FFortGameplayEffectModifierDescription) == 0x000040, "Wrong size on FFortGameplayEffectModifierDescription");
static_assert(offsetof(FFortGameplayEffectModifierDescription, ModAttribute) == 0x000000, "Member 'FFortGameplayEffectModifierDescription::ModAttribute' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, ModDescription) == 0x000020, "Member 'FFortGameplayEffectModifierDescription::ModDescription' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, bIsBuff) == 0x000038, "Member 'FFortGameplayEffectModifierDescription::bIsBuff' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, MagnitudeFormat) == 0x000039, "Member 'FFortGameplayEffectModifierDescription::MagnitudeFormat' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, DisplayType) == 0x00003A, "Member 'FFortGameplayEffectModifierDescription::DisplayType' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, Magnitude) == 0x00003C, "Member 'FFortGameplayEffectModifierDescription::Magnitude' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectDescription
// 0x0050 (0x0050 - 0x0000)
struct FFortGameplayEffectDescription final
{
public:
	class FText                                   EffectDisplayName;                                 // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   EffectWrittenDescription;                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortGameplayEffectModifierDescription> ModDescriptions;                                   // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           GrantedTagDescriptions;                            // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayEffectDescription) == 0x000008, "Wrong alignment on FFortGameplayEffectDescription");
static_assert(sizeof(FFortGameplayEffectDescription) == 0x000050, "Wrong size on FFortGameplayEffectDescription");
static_assert(offsetof(FFortGameplayEffectDescription, EffectDisplayName) == 0x000000, "Member 'FFortGameplayEffectDescription::EffectDisplayName' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectDescription, EffectWrittenDescription) == 0x000018, "Member 'FFortGameplayEffectDescription::EffectWrittenDescription' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectDescription, ModDescriptions) == 0x000030, "Member 'FFortGameplayEffectDescription::ModDescriptions' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectDescription, GrantedTagDescriptions) == 0x000040, "Member 'FFortGameplayEffectDescription::GrantedTagDescriptions' has a wrong offset!");

// ScriptStruct FortniteGame.CreativeThumbnailCacheData
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FCreativeThumbnailCacheData final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreativeThumbnailCacheData) == 0x000008, "Wrong alignment on FCreativeThumbnailCacheData");
static_assert(sizeof(FCreativeThumbnailCacheData) == 0x000078, "Wrong size on FCreativeThumbnailCacheData");

// ScriptStruct FortniteGame.CustomPartMaterialOverrideData
// 0x0030 (0x0030 - 0x0000)
struct FCustomPartMaterialOverrideData final
{
public:
	int32                                         MaterialOverrideIndex;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      OverrideMaterial;                                  // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomPartMaterialOverrideData) == 0x000008, "Wrong alignment on FCustomPartMaterialOverrideData");
static_assert(sizeof(FCustomPartMaterialOverrideData) == 0x000030, "Wrong size on FCustomPartMaterialOverrideData");
static_assert(offsetof(FCustomPartMaterialOverrideData, MaterialOverrideIndex) == 0x000000, "Member 'FCustomPartMaterialOverrideData::MaterialOverrideIndex' has a wrong offset!");
static_assert(offsetof(FCustomPartMaterialOverrideData, OverrideMaterial) == 0x000008, "Member 'FCustomPartMaterialOverrideData::OverrideMaterial' has a wrong offset!");

// ScriptStruct FortniteGame.CustomPartVectorParameter
// 0x001C (0x001C - 0x0000)
struct FCustomPartVectorParameter final
{
public:
	int32                                         MaterialIndexForVectorParameter;                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VectorParameterNameForMaterial;                    // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VectorOverride;                                    // 0x000C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomPartVectorParameter) == 0x000004, "Wrong alignment on FCustomPartVectorParameter");
static_assert(sizeof(FCustomPartVectorParameter) == 0x00001C, "Wrong size on FCustomPartVectorParameter");
static_assert(offsetof(FCustomPartVectorParameter, MaterialIndexForVectorParameter) == 0x000000, "Member 'FCustomPartVectorParameter::MaterialIndexForVectorParameter' has a wrong offset!");
static_assert(offsetof(FCustomPartVectorParameter, VectorParameterNameForMaterial) == 0x000004, "Member 'FCustomPartVectorParameter::VectorParameterNameForMaterial' has a wrong offset!");
static_assert(offsetof(FCustomPartVectorParameter, VectorOverride) == 0x00000C, "Member 'FCustomPartVectorParameter::VectorOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortCraftingResultNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortCraftingResultNotification final
{
public:
	TArray<struct FMcpLootEntry>                  ItemsCrafted;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCraftingResultNotification) == 0x000008, "Wrong alignment on FFortCraftingResultNotification");
static_assert(sizeof(FFortCraftingResultNotification) == 0x000010, "Wrong size on FFortCraftingResultNotification");
static_assert(offsetof(FFortCraftingResultNotification, ItemsCrafted) == 0x000000, "Member 'FFortCraftingResultNotification::ItemsCrafted' has a wrong offset!");

// ScriptStruct FortniteGame.CustomPartScalarParameter
// 0x0010 (0x0010 - 0x0000)
struct FCustomPartScalarParameter final
{
public:
	int32                                         MaterialIndexForScalarParameter;                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScalarParameterNameForMaterial;                    // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScalarOverride;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomPartScalarParameter) == 0x000004, "Wrong alignment on FCustomPartScalarParameter");
static_assert(sizeof(FCustomPartScalarParameter) == 0x000010, "Wrong size on FCustomPartScalarParameter");
static_assert(offsetof(FCustomPartScalarParameter, MaterialIndexForScalarParameter) == 0x000000, "Member 'FCustomPartScalarParameter::MaterialIndexForScalarParameter' has a wrong offset!");
static_assert(offsetof(FCustomPartScalarParameter, ScalarParameterNameForMaterial) == 0x000004, "Member 'FCustomPartScalarParameter::ScalarParameterNameForMaterial' has a wrong offset!");
static_assert(offsetof(FCustomPartScalarParameter, ScalarOverride) == 0x00000C, "Member 'FCustomPartScalarParameter::ScalarOverride' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayTagAnimationData
// 0x0050 (0x0050 - 0x0000)
struct FGameplayTagAnimationData final
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0000(0x0020)(Edit, NativeAccessSpecifierPrivate)
	EFortCustomGender                             ValidGenders;                                      // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGameplayTagAnimationData) == 0x000008, "Wrong alignment on FGameplayTagAnimationData");
static_assert(sizeof(FGameplayTagAnimationData) == 0x000050, "Wrong size on FGameplayTagAnimationData");
static_assert(offsetof(FGameplayTagAnimationData, GameplayTags) == 0x000000, "Member 'FGameplayTagAnimationData::GameplayTags' has a wrong offset!");
static_assert(offsetof(FGameplayTagAnimationData, ValidGenders) == 0x000020, "Member 'FGameplayTagAnimationData::ValidGenders' has a wrong offset!");
static_assert(offsetof(FGameplayTagAnimationData, AnimMontage) == 0x000028, "Member 'FGameplayTagAnimationData::AnimMontage' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayTagAnimations
// 0x0010 (0x0010 - 0x0000)
struct FGameplayTagAnimations final
{
public:
	TArray<struct FGameplayTagAnimationData>      GameplayTagAnimData;                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGameplayTagAnimations) == 0x000008, "Wrong alignment on FGameplayTagAnimations");
static_assert(sizeof(FGameplayTagAnimations) == 0x000010, "Wrong size on FGameplayTagAnimations");
static_assert(offsetof(FGameplayTagAnimations, GameplayTagAnimData) == 0x000000, "Member 'FGameplayTagAnimations::GameplayTagAnimData' has a wrong offset!");

// ScriptStruct FortniteGame.FortExpeditionResultNotification
// 0x0018 (0x0018 - 0x0000)
struct FFortExpeditionResultNotification final
{
public:
	bool                                          bExpeditionSucceeded;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMcpLootEntry>                  ExpeditionRewards;                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortExpeditionResultNotification) == 0x000008, "Wrong alignment on FFortExpeditionResultNotification");
static_assert(sizeof(FFortExpeditionResultNotification) == 0x000018, "Wrong size on FFortExpeditionResultNotification");
static_assert(offsetof(FFortExpeditionResultNotification, bExpeditionSucceeded) == 0x000000, "Member 'FFortExpeditionResultNotification::bExpeditionSucceeded' has a wrong offset!");
static_assert(offsetof(FFortExpeditionResultNotification, ExpeditionRewards) == 0x000008, "Member 'FFortExpeditionResultNotification::ExpeditionRewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortCreativeAssetCostData
// 0x0050 (0x0050 - 0x0000)
struct FFortCreativeAssetCostData final
{
public:
	TMap<class FString, struct FCreativeActorMetaData> MetaDataMap;                                       // 0x0000(0x0050)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCreativeAssetCostData) == 0x000008, "Wrong alignment on FFortCreativeAssetCostData");
static_assert(sizeof(FFortCreativeAssetCostData) == 0x000050, "Wrong size on FFortCreativeAssetCostData");
static_assert(offsetof(FFortCreativeAssetCostData, MetaDataMap) == 0x000000, "Member 'FFortCreativeAssetCostData::MetaDataMap' has a wrong offset!");

// ScriptStruct FortniteGame.FortDamageNumberColorInfo
// 0x0050 (0x0050 - 0x0000)
struct FFortDamageNumberColorInfo final
{
public:
	class FString                                 DisplayText;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CriticalColor;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0030(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDamageNumberColorInfo) == 0x000008, "Wrong alignment on FFortDamageNumberColorInfo");
static_assert(sizeof(FFortDamageNumberColorInfo) == 0x000050, "Wrong size on FFortDamageNumberColorInfo");
static_assert(offsetof(FFortDamageNumberColorInfo, DisplayText) == 0x000000, "Member 'FFortDamageNumberColorInfo::DisplayText' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberColorInfo, Color) == 0x000010, "Member 'FFortDamageNumberColorInfo::Color' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberColorInfo, CriticalColor) == 0x000020, "Member 'FFortDamageNumberColorInfo::CriticalColor' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberColorInfo, Tags) == 0x000030, "Member 'FFortDamageNumberColorInfo::Tags' has a wrong offset!");

// ScriptStruct FortniteGame.ColorSwatchPair
// 0x0018 (0x0018 - 0x0000)
struct FColorSwatchPair final
{
public:
	class FName                                   ColorName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorValue;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorSwatchPair) == 0x000004, "Wrong alignment on FColorSwatchPair");
static_assert(sizeof(FColorSwatchPair) == 0x000018, "Wrong size on FColorSwatchPair");
static_assert(offsetof(FColorSwatchPair, ColorName) == 0x000000, "Member 'FColorSwatchPair::ColorName' has a wrong offset!");
static_assert(offsetof(FColorSwatchPair, ColorValue) == 0x000008, "Member 'FColorSwatchPair::ColorValue' has a wrong offset!");

// ScriptStruct FortniteGame.DeferredActorData
// 0x0040 (0x0040 - 0x0000)
struct FDeferredActorData final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActorRecordIndex;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BuildingTransform;                                 // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeferredActorData) == 0x000010, "Wrong alignment on FDeferredActorData");
static_assert(sizeof(FDeferredActorData) == 0x000040, "Wrong size on FDeferredActorData");
static_assert(offsetof(FDeferredActorData, BuildingActor) == 0x000000, "Member 'FDeferredActorData::BuildingActor' has a wrong offset!");
static_assert(offsetof(FDeferredActorData, ActorRecordIndex) == 0x000008, "Member 'FDeferredActorData::ActorRecordIndex' has a wrong offset!");
static_assert(offsetof(FDeferredActorData, BuildingTransform) == 0x000010, "Member 'FDeferredActorData::BuildingTransform' has a wrong offset!");

// ScriptStruct FortniteGame.AbilityKitItem
// 0x0010 (0x0010 - 0x0000)
struct FAbilityKitItem final
{
public:
	class UFortItemDefinition*                    Item;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortReplenishmentType                        Replenishment;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityKitItem) == 0x000008, "Wrong alignment on FAbilityKitItem");
static_assert(sizeof(FAbilityKitItem) == 0x000010, "Wrong size on FAbilityKitItem");
static_assert(offsetof(FAbilityKitItem, Item) == 0x000000, "Member 'FAbilityKitItem::Item' has a wrong offset!");
static_assert(offsetof(FAbilityKitItem, Quantity) == 0x000008, "Member 'FAbilityKitItem::Quantity' has a wrong offset!");
static_assert(offsetof(FAbilityKitItem, Replenishment) == 0x00000C, "Member 'FAbilityKitItem::Replenishment' has a wrong offset!");

// ScriptStruct FortniteGame.DebugNativeActionInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDebugNativeActionInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugNativeActionInfo) == 0x000008, "Wrong alignment on FDebugNativeActionInfo");
static_assert(sizeof(FDebugNativeActionInfo) == 0x000018, "Wrong size on FDebugNativeActionInfo");

// ScriptStruct FortniteGame.FortCollectedResourceNotification
// 0x0020 (0x0020 - 0x0000)
struct FFortCollectedResourceNotification final
{
public:
	struct FMcpLootResult                         Loot;                                              // 0x0000(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectedResourceNotification) == 0x000008, "Wrong alignment on FFortCollectedResourceNotification");
static_assert(sizeof(FFortCollectedResourceNotification) == 0x000020, "Wrong size on FFortCollectedResourceNotification");
static_assert(offsetof(FFortCollectedResourceNotification, Loot) == 0x000000, "Member 'FFortCollectedResourceNotification::Loot' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterTransitionSettings
// 0x0001 (0x0001 - 0x0000)
struct FFortEncounterTransitionSettings final
{
public:
	bool                                          bShouldMaintainEncounterState;                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterTransitionSettings) == 0x000001, "Wrong alignment on FFortEncounterTransitionSettings");
static_assert(sizeof(FFortEncounterTransitionSettings) == 0x000001, "Wrong size on FFortEncounterTransitionSettings");
static_assert(offsetof(FFortEncounterTransitionSettings, bShouldMaintainEncounterState) == 0x000000, "Member 'FFortEncounterTransitionSettings::bShouldMaintainEncounterState' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedEncounterSequence
// 0x0030 (0x0030 - 0x0000)
struct FFortGeneratedEncounterSequence final
{
public:
	struct FFortEncounterTransitionSettings       TransitionSettings;                                // 0x0000(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartingGeneratedEncounterProfileIndex;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEncountersInSequence;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  EncounterSequenceTags;                             // 0x0010(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGeneratedEncounterSequence) == 0x000008, "Wrong alignment on FFortGeneratedEncounterSequence");
static_assert(sizeof(FFortGeneratedEncounterSequence) == 0x000030, "Wrong size on FFortGeneratedEncounterSequence");
static_assert(offsetof(FFortGeneratedEncounterSequence, TransitionSettings) == 0x000000, "Member 'FFortGeneratedEncounterSequence::TransitionSettings' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterSequence, StartingGeneratedEncounterProfileIndex) == 0x000004, "Member 'FFortGeneratedEncounterSequence::StartingGeneratedEncounterProfileIndex' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterSequence, NumEncountersInSequence) == 0x000008, "Member 'FFortGeneratedEncounterSequence::NumEncountersInSequence' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterSequence, EncounterSequenceTags) == 0x000010, "Member 'FFortGeneratedEncounterSequence::EncounterSequenceTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedMissionOption
// 0x0018 (0x0018 - 0x0000)
struct FFortGeneratedMissionOption final
{
public:
	class UFortDifficultyOptionCategoryMission*   MissionOptionCategory;                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortDifficultyOptionMission> MissionOption;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeLerpValue;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGeneratedMissionOption) == 0x000008, "Wrong alignment on FFortGeneratedMissionOption");
static_assert(sizeof(FFortGeneratedMissionOption) == 0x000018, "Wrong size on FFortGeneratedMissionOption");
static_assert(offsetof(FFortGeneratedMissionOption, MissionOptionCategory) == 0x000000, "Member 'FFortGeneratedMissionOption::MissionOptionCategory' has a wrong offset!");
static_assert(offsetof(FFortGeneratedMissionOption, MissionOption) == 0x000008, "Member 'FFortGeneratedMissionOption::MissionOption' has a wrong offset!");
static_assert(offsetof(FFortGeneratedMissionOption, RangeLerpValue) == 0x000010, "Member 'FFortGeneratedMissionOption::RangeLerpValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedEncounterOption
// 0x0020 (0x0020 - 0x0000)
struct FFortGeneratedEncounterOption final
{
public:
	class UFortDifficultyOptionCategoryEncounter* EncounterOptionCategory;                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortDifficultyOptionEncounter> EncounterOption;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortDifficultyOptionEncounter*         EncounterOptionInstance;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeLerpValue;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangedSinceLastVLog;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGeneratedEncounterOption) == 0x000008, "Wrong alignment on FFortGeneratedEncounterOption");
static_assert(sizeof(FFortGeneratedEncounterOption) == 0x000020, "Wrong size on FFortGeneratedEncounterOption");
static_assert(offsetof(FFortGeneratedEncounterOption, EncounterOptionCategory) == 0x000000, "Member 'FFortGeneratedEncounterOption::EncounterOptionCategory' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterOption, EncounterOption) == 0x000008, "Member 'FFortGeneratedEncounterOption::EncounterOption' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterOption, EncounterOptionInstance) == 0x000010, "Member 'FFortGeneratedEncounterOption::EncounterOptionInstance' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterOption, RangeLerpValue) == 0x000018, "Member 'FFortGeneratedEncounterOption::RangeLerpValue' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterOption, bChangedSinceLastVLog) == 0x00001C, "Member 'FFortGeneratedEncounterOption::bChangedSinceLastVLog' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterModeSettings
// 0x0005 (0x0005 - 0x0000)
struct FFortEncounterModeSettings final
{
public:
	EFortEncounterPacingMode                      PacingMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterSpawnLocationManagementMode     SpawnLocationManagementMode;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterSpawnLocationPlacementMode      SpawnLocationMode;                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterUtilitiesMode                   UtilitiesMode;                                     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterSpawnLimitType                  SpawnLimitMode;                                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterModeSettings) == 0x000001, "Wrong alignment on FFortEncounterModeSettings");
static_assert(sizeof(FFortEncounterModeSettings) == 0x000005, "Wrong size on FFortEncounterModeSettings");
static_assert(offsetof(FFortEncounterModeSettings, PacingMode) == 0x000000, "Member 'FFortEncounterModeSettings::PacingMode' has a wrong offset!");
static_assert(offsetof(FFortEncounterModeSettings, SpawnLocationManagementMode) == 0x000001, "Member 'FFortEncounterModeSettings::SpawnLocationManagementMode' has a wrong offset!");
static_assert(offsetof(FFortEncounterModeSettings, SpawnLocationMode) == 0x000002, "Member 'FFortEncounterModeSettings::SpawnLocationMode' has a wrong offset!");
static_assert(offsetof(FFortEncounterModeSettings, UtilitiesMode) == 0x000003, "Member 'FFortEncounterModeSettings::UtilitiesMode' has a wrong offset!");
static_assert(offsetof(FFortEncounterModeSettings, SpawnLimitMode) == 0x000004, "Member 'FFortEncounterModeSettings::SpawnLimitMode' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedEncounterProfile
// 0x0050 (0x0050 - 0x0000)
struct FFortGeneratedEncounterProfile final
{
public:
	float                                         EncounterDifficultyLevel;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortGeneratedEncounterOption>  EncounterOptions;                                  // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortEncounterModeSettings             EncounterModeSettings;                             // 0x0018(0x0005)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0020(0x0020)(NativeAccessSpecifierPublic)
	int32                                         DifficultyOptionPointsAvailableAtGeneration;       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDifficultyOptionPointsToUse;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReselectOptionsPerInstance;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GeneratedEncounterIndex;                           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGeneratedEncounterProfile) == 0x000008, "Wrong alignment on FFortGeneratedEncounterProfile");
static_assert(sizeof(FFortGeneratedEncounterProfile) == 0x000050, "Wrong size on FFortGeneratedEncounterProfile");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterDifficultyLevel) == 0x000000, "Member 'FFortGeneratedEncounterProfile::EncounterDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterOptions) == 0x000008, "Member 'FFortGeneratedEncounterProfile::EncounterOptions' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterModeSettings) == 0x000018, "Member 'FFortGeneratedEncounterProfile::EncounterModeSettings' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterTypeTags) == 0x000020, "Member 'FFortGeneratedEncounterProfile::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, DifficultyOptionPointsAvailableAtGeneration) == 0x000040, "Member 'FFortGeneratedEncounterProfile::DifficultyOptionPointsAvailableAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, MinDifficultyOptionPointsToUse) == 0x000044, "Member 'FFortGeneratedEncounterProfile::MinDifficultyOptionPointsToUse' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, bShouldReselectOptionsPerInstance) == 0x000048, "Member 'FFortGeneratedEncounterProfile::bShouldReselectOptionsPerInstance' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, GeneratedEncounterIndex) == 0x00004C, "Member 'FFortGeneratedEncounterProfile::GeneratedEncounterIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedDifficultyOptions
// 0x0040 (0x0040 - 0x0000)
struct FFortGeneratedDifficultyOptions final
{
public:
	float                                         GameDifficultyAtGeneration;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyOptionPointsAvailableAtGeneration;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEncounterSpawnPointsAtGeneration;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDifficultyOptionPointsToUse;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortGeneratedEncounterSequence> GeneratedEncounterSequences;                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortGeneratedMissionOption>    MissionOptions;                                    // 0x0020(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortGeneratedEncounterProfile> GeneratedEncounterProfiles;                        // 0x0030(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortGeneratedDifficultyOptions) == 0x000008, "Wrong alignment on FFortGeneratedDifficultyOptions");
static_assert(sizeof(FFortGeneratedDifficultyOptions) == 0x000040, "Wrong size on FFortGeneratedDifficultyOptions");
static_assert(offsetof(FFortGeneratedDifficultyOptions, GameDifficultyAtGeneration) == 0x000000, "Member 'FFortGeneratedDifficultyOptions::GameDifficultyAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, DifficultyOptionPointsAvailableAtGeneration) == 0x000004, "Member 'FFortGeneratedDifficultyOptions::DifficultyOptionPointsAvailableAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, MaxEncounterSpawnPointsAtGeneration) == 0x000008, "Member 'FFortGeneratedDifficultyOptions::MaxEncounterSpawnPointsAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, MinDifficultyOptionPointsToUse) == 0x00000C, "Member 'FFortGeneratedDifficultyOptions::MinDifficultyOptionPointsToUse' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, GeneratedEncounterSequences) == 0x000010, "Member 'FFortGeneratedDifficultyOptions::GeneratedEncounterSequences' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, MissionOptions) == 0x000020, "Member 'FFortGeneratedDifficultyOptions::MissionOptions' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, GeneratedEncounterProfiles) == 0x000030, "Member 'FFortGeneratedDifficultyOptions::GeneratedEncounterProfiles' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPlacementItemLookupData
// 0x0078 (0x0078 - 0x0000)
struct FFortMissionPlacementItemLookupData final
{
public:
	struct FGameplayTagContainer                  ItemIdentifyingTags;                               // 0x0000(0x0020)(Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsAddedToPlacementActors;                        // 0x0020(0x0020)(Transient, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorToPlace;                                      // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToUseForSpawnLocation;                        // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnedActor;                                      // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0058(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0064(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bDontCreateSpawnRiftsNearby : 1;                   // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldFreeLocationsOnDeath : 1;                   // 0x0070(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionPlacementItemLookupData) == 0x000008, "Wrong alignment on FFortMissionPlacementItemLookupData");
static_assert(sizeof(FFortMissionPlacementItemLookupData) == 0x000078, "Wrong size on FFortMissionPlacementItemLookupData");
static_assert(offsetof(FFortMissionPlacementItemLookupData, ItemIdentifyingTags) == 0x000000, "Member 'FFortMissionPlacementItemLookupData::ItemIdentifyingTags' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, TagsAddedToPlacementActors) == 0x000020, "Member 'FFortMissionPlacementItemLookupData::TagsAddedToPlacementActors' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, ActorToPlace) == 0x000040, "Member 'FFortMissionPlacementItemLookupData::ActorToPlace' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, ActorToUseForSpawnLocation) == 0x000048, "Member 'FFortMissionPlacementItemLookupData::ActorToUseForSpawnLocation' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, SpawnedActor) == 0x000050, "Member 'FFortMissionPlacementItemLookupData::SpawnedActor' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, SpawnLocation) == 0x000058, "Member 'FFortMissionPlacementItemLookupData::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, SpawnRotation) == 0x000064, "Member 'FFortMissionPlacementItemLookupData::SpawnRotation' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionEntry
// 0x0088 (0x0088 - 0x0000)
struct FFortMissionEntry final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldMinLevel;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldMaxLevel;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    MinDifficultyInfoRow;                              // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UFortMissionGenerator*                  MissionGenerator;                                  // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionInfo*                       MissionInfo;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionGenerationCategory                    GenerationCategory;                                // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGeneratedDifficultyOptions        GeneratedDifficultyOptions;                        // 0x0038(0x0040)(NativeAccessSpecifierPublic)
	TArray<struct FFortMissionPlacementItemLookupData> BlueprintLookupData;                               // 0x0078(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortMissionEntry) == 0x000008, "Wrong alignment on FFortMissionEntry");
static_assert(sizeof(FFortMissionEntry) == 0x000088, "Wrong size on FFortMissionEntry");
static_assert(offsetof(FFortMissionEntry, Weight) == 0x000000, "Member 'FFortMissionEntry::Weight' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, WorldMinLevel) == 0x000004, "Member 'FFortMissionEntry::WorldMinLevel' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, WorldMaxLevel) == 0x000008, "Member 'FFortMissionEntry::WorldMaxLevel' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, MinDifficultyInfoRow) == 0x000010, "Member 'FFortMissionEntry::MinDifficultyInfoRow' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, MissionGenerator) == 0x000020, "Member 'FFortMissionEntry::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, MissionInfo) == 0x000028, "Member 'FFortMissionEntry::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, GenerationCategory) == 0x000030, "Member 'FFortMissionEntry::GenerationCategory' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, GeneratedDifficultyOptions) == 0x000038, "Member 'FFortMissionEntry::GeneratedDifficultyOptions' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, BlueprintLookupData) == 0x000078, "Member 'FFortMissionEntry::BlueprintLookupData' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayAbilityRepSharedAnim_Base
// 0x0002 (0x0002 - 0x0000)
struct FGameplayAbilityRepSharedAnim_Base
{
public:
	EFortSharedAnimationState                     AnimState;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MontageSectionToPlay;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityRepSharedAnim_Base) == 0x000001, "Wrong alignment on FGameplayAbilityRepSharedAnim_Base");
static_assert(sizeof(FGameplayAbilityRepSharedAnim_Base) == 0x000002, "Wrong size on FGameplayAbilityRepSharedAnim_Base");
static_assert(offsetof(FGameplayAbilityRepSharedAnim_Base, AnimState) == 0x000000, "Member 'FGameplayAbilityRepSharedAnim_Base::AnimState' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityRepSharedAnim_Base, MontageSectionToPlay) == 0x000001, "Member 'FGameplayAbilityRepSharedAnim_Base::MontageSectionToPlay' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayAbilityRepSharedAnim_Index
// 0x0006 (0x0008 - 0x0002)
struct FGameplayAbilityRepSharedAnim_Index final : public FGameplayAbilityRepSharedAnim_Base
{
public:
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MontageIndex;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityRepSharedAnim_Index) == 0x000004, "Wrong alignment on FGameplayAbilityRepSharedAnim_Index");
static_assert(sizeof(FGameplayAbilityRepSharedAnim_Index) == 0x000008, "Wrong size on FGameplayAbilityRepSharedAnim_Index");
static_assert(offsetof(FGameplayAbilityRepSharedAnim_Index, MontageIndex) == 0x000004, "Member 'FGameplayAbilityRepSharedAnim_Index::MontageIndex' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayAbilityRepSharedAnim
// 0x000E (0x0010 - 0x0002)
struct FGameplayAbilityRepSharedAnim final : public FGameplayAbilityRepSharedAnim_Base
{
public:
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityRepSharedAnim) == 0x000008, "Wrong alignment on FGameplayAbilityRepSharedAnim");
static_assert(sizeof(FGameplayAbilityRepSharedAnim) == 0x000010, "Wrong size on FGameplayAbilityRepSharedAnim");
static_assert(offsetof(FGameplayAbilityRepSharedAnim, AnimMontage) == 0x000008, "Member 'FGameplayAbilityRepSharedAnim::AnimMontage' has a wrong offset!");

// ScriptStruct FortniteGame.ClientBotBuildStep
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FClientBotBuildStep final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientBotBuildStep) == 0x000008, "Wrong alignment on FClientBotBuildStep");
static_assert(sizeof(FClientBotBuildStep) == 0x000040, "Wrong size on FClientBotBuildStep");

// ScriptStruct FortniteGame.FortAnimInput_AdjustedAim
// 0x0240 (0x0240 - 0x0000)
struct FFortAnimInput_AdjustedAim final
{
public:
	struct FFortAnimInput_AdjustedAimOffset       WeaponOffsets[0x22];                               // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         YawOffset;                                         // 0x0220(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchOffset;                                       // 0x0224(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawScale;                                          // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchScale;                                        // 0x022C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResultingYaw;                                      // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResultingPitch;                                    // 0x0234(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ZeroOutPitchWeightCurveName;                       // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_AdjustedAim) == 0x000004, "Wrong alignment on FFortAnimInput_AdjustedAim");
static_assert(sizeof(FFortAnimInput_AdjustedAim) == 0x000240, "Wrong size on FFortAnimInput_AdjustedAim");
static_assert(offsetof(FFortAnimInput_AdjustedAim, WeaponOffsets) == 0x000000, "Member 'FFortAnimInput_AdjustedAim::WeaponOffsets' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_AdjustedAim, YawOffset) == 0x000220, "Member 'FFortAnimInput_AdjustedAim::YawOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_AdjustedAim, PitchOffset) == 0x000224, "Member 'FFortAnimInput_AdjustedAim::PitchOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_AdjustedAim, YawScale) == 0x000228, "Member 'FFortAnimInput_AdjustedAim::YawScale' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_AdjustedAim, PitchScale) == 0x00022C, "Member 'FFortAnimInput_AdjustedAim::PitchScale' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_AdjustedAim, ResultingYaw) == 0x000230, "Member 'FFortAnimInput_AdjustedAim::ResultingYaw' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_AdjustedAim, ResultingPitch) == 0x000234, "Member 'FFortAnimInput_AdjustedAim::ResultingPitch' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_AdjustedAim, ZeroOutPitchWeightCurveName) == 0x000238, "Member 'FFortAnimInput_AdjustedAim::ZeroOutPitchWeightCurveName' has a wrong offset!");

// ScriptStruct FortniteGame.TokenAttributePair
// 0x0028 (0x0028 - 0x0000)
struct FTokenAttributePair final
{
public:
	struct FGameplayTag                           Token;                                             // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0020)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTokenAttributePair) == 0x000008, "Wrong alignment on FTokenAttributePair");
static_assert(sizeof(FTokenAttributePair) == 0x000028, "Wrong size on FTokenAttributePair");
static_assert(offsetof(FTokenAttributePair, Token) == 0x000000, "Member 'FTokenAttributePair::Token' has a wrong offset!");
static_assert(offsetof(FTokenAttributePair, Attribute) == 0x000008, "Member 'FTokenAttributePair::Attribute' has a wrong offset!");

// ScriptStruct FortniteGame.CenterOnTaggedPOI
// 0x0048 (0x0048 - 0x0000)
struct FCenterOnTaggedPOI final
{
public:
	struct FScalableFloat                         Enabled;                                           // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagForPOI;                                         // 0x0020(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         WithinRadius;                                      // 0x0028(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCenterOnTaggedPOI) == 0x000008, "Wrong alignment on FCenterOnTaggedPOI");
static_assert(sizeof(FCenterOnTaggedPOI) == 0x000048, "Wrong size on FCenterOnTaggedPOI");
static_assert(offsetof(FCenterOnTaggedPOI, Enabled) == 0x000000, "Member 'FCenterOnTaggedPOI::Enabled' has a wrong offset!");
static_assert(offsetof(FCenterOnTaggedPOI, TagForPOI) == 0x000020, "Member 'FCenterOnTaggedPOI::TagForPOI' has a wrong offset!");
static_assert(offsetof(FCenterOnTaggedPOI, WithinRadius) == 0x000028, "Member 'FCenterOnTaggedPOI::WithinRadius' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityCanHitParameters
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFortAbilityCanHitParameters final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAbilityCanHitParameters) == 0x000008, "Wrong alignment on FFortAbilityCanHitParameters");
static_assert(sizeof(FFortAbilityCanHitParameters) == 0x000018, "Wrong size on FFortAbilityCanHitParameters");

// ScriptStruct FortniteGame.ItemIdAndQuantityPair
// 0x0018 (0x0018 - 0x0000)
struct FItemIdAndQuantityPair final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemIdAndQuantityPair) == 0x000008, "Wrong alignment on FItemIdAndQuantityPair");
static_assert(sizeof(FItemIdAndQuantityPair) == 0x000018, "Wrong size on FItemIdAndQuantityPair");
static_assert(offsetof(FItemIdAndQuantityPair, ItemId) == 0x000000, "Member 'FItemIdAndQuantityPair::ItemId' has a wrong offset!");
static_assert(offsetof(FItemIdAndQuantityPair, Quantity) == 0x000010, "Member 'FItemIdAndQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.CarriedObjectAttachmentInfo
// 0x0028 (0x0028 - 0x0000)
struct FCarriedObjectAttachmentInfo final
{
public:
	class AActor*                                 AttachParent;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeTranslation;                               // 0x0010(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x001C(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCarriedObjectAttachmentInfo) == 0x000008, "Wrong alignment on FCarriedObjectAttachmentInfo");
static_assert(sizeof(FCarriedObjectAttachmentInfo) == 0x000028, "Wrong size on FCarriedObjectAttachmentInfo");
static_assert(offsetof(FCarriedObjectAttachmentInfo, AttachParent) == 0x000000, "Member 'FCarriedObjectAttachmentInfo::AttachParent' has a wrong offset!");
static_assert(offsetof(FCarriedObjectAttachmentInfo, SocketName) == 0x000008, "Member 'FCarriedObjectAttachmentInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FCarriedObjectAttachmentInfo, RelativeTranslation) == 0x000010, "Member 'FCarriedObjectAttachmentInfo::RelativeTranslation' has a wrong offset!");
static_assert(offsetof(FCarriedObjectAttachmentInfo, RelativeRotation) == 0x00001C, "Member 'FCarriedObjectAttachmentInfo::RelativeRotation' has a wrong offset!");

// ScriptStruct FortniteGame.AbilityTrackedActorSettings
// 0x0020 (0x0020 - 0x0000)
struct FAbilityTrackedActorSettings final
{
public:
	struct FScalableFloat                         MaximumTrackedActors;                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityTrackedActorSettings) == 0x000008, "Wrong alignment on FAbilityTrackedActorSettings");
static_assert(sizeof(FAbilityTrackedActorSettings) == 0x000020, "Wrong size on FAbilityTrackedActorSettings");
static_assert(offsetof(FAbilityTrackedActorSettings, MaximumTrackedActors) == 0x000000, "Member 'FAbilityTrackedActorSettings::MaximumTrackedActors' has a wrong offset!");

// ScriptStruct FortniteGame.FortMinigameTimes
// 0x0014 (0x0014 - 0x0000)
struct FFortMinigameTimes final
{
public:
	float                                         SetupTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarmupTime;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResetTime;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMinigameTimes) == 0x000004, "Wrong alignment on FFortMinigameTimes");
static_assert(sizeof(FFortMinigameTimes) == 0x000014, "Wrong size on FFortMinigameTimes");
static_assert(offsetof(FFortMinigameTimes, SetupTime) == 0x000000, "Member 'FFortMinigameTimes::SetupTime' has a wrong offset!");
static_assert(offsetof(FFortMinigameTimes, WarmupTime) == 0x000004, "Member 'FFortMinigameTimes::WarmupTime' has a wrong offset!");
static_assert(offsetof(FFortMinigameTimes, StartTime) == 0x000008, "Member 'FFortMinigameTimes::StartTime' has a wrong offset!");
static_assert(offsetof(FFortMinigameTimes, EndTime) == 0x00000C, "Member 'FFortMinigameTimes::EndTime' has a wrong offset!");
static_assert(offsetof(FFortMinigameTimes, ResetTime) == 0x000010, "Member 'FFortMinigameTimes::ResetTime' has a wrong offset!");

// ScriptStruct FortniteGame.AbilityTrackedActorEntry
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FAbilityTrackedActorEntry final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityTrackedActorEntry) == 0x000004, "Wrong alignment on FAbilityTrackedActorEntry");
static_assert(sizeof(FAbilityTrackedActorEntry) == 0x00000C, "Wrong size on FAbilityTrackedActorEntry");

// ScriptStruct FortniteGame.FortProfileAndQuestSaveIdPair
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FFortProfileAndQuestSaveIdPair final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortProfileAndQuestSaveIdPair) == 0x000008, "Wrong alignment on FFortProfileAndQuestSaveIdPair");
static_assert(sizeof(FFortProfileAndQuestSaveIdPair) == 0x000030, "Wrong size on FFortProfileAndQuestSaveIdPair");

// ScriptStruct FortniteGame.OutpostFabricatorPerTheaterData
// 0x0008 (0x0008 - 0x0000)
struct FOutpostFabricatorPerTheaterData final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 MaxAllowedTier;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOutpostFabricatorPerTheaterData) == 0x000004, "Wrong alignment on FOutpostFabricatorPerTheaterData");
static_assert(sizeof(FOutpostFabricatorPerTheaterData) == 0x000008, "Wrong size on FOutpostFabricatorPerTheaterData");
static_assert(offsetof(FOutpostFabricatorPerTheaterData, TheaterSlot) == 0x000000, "Member 'FOutpostFabricatorPerTheaterData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostFabricatorPerTheaterData, MaxAllowedTier) == 0x000004, "Member 'FOutpostFabricatorPerTheaterData::MaxAllowedTier' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayAbilityTargetData_SingleTargetHit
// 0x0008 (0x00A0 - 0x0098)
struct FFortGameplayAbilityTargetData_SingleTargetHit final : public FGameplayAbilityTargetData_SingleTargetHit
{
public:
	int32                                         CartridgeID;                                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponInfo;                                        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayAbilityTargetData_SingleTargetHit) == 0x000008, "Wrong alignment on FFortGameplayAbilityTargetData_SingleTargetHit");
static_assert(sizeof(FFortGameplayAbilityTargetData_SingleTargetHit) == 0x0000A0, "Wrong size on FFortGameplayAbilityTargetData_SingleTargetHit");
static_assert(offsetof(FFortGameplayAbilityTargetData_SingleTargetHit, CartridgeID) == 0x000098, "Member 'FFortGameplayAbilityTargetData_SingleTargetHit::CartridgeID' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityTargetData_SingleTargetHit, WeaponInfo) == 0x00009C, "Member 'FFortGameplayAbilityTargetData_SingleTargetHit::WeaponInfo' has a wrong offset!");

// ScriptStruct FortniteGame.FortBatchUpdatePlayer_DeployableBaseUpdate
// 0x0050 (0x0050 - 0x0000)
struct FFortBatchUpdatePlayer_DeployableBaseUpdate final
{
public:
	struct FUniqueNetIdRepl                       AccountId;                                         // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeployableBaseItemId;                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortCloudSaveInfo                     CloudSaveInfo;                                     // 0x0038(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBatchUpdatePlayer_DeployableBaseUpdate) == 0x000008, "Wrong alignment on FFortBatchUpdatePlayer_DeployableBaseUpdate");
static_assert(sizeof(FFortBatchUpdatePlayer_DeployableBaseUpdate) == 0x000050, "Wrong size on FFortBatchUpdatePlayer_DeployableBaseUpdate");
static_assert(offsetof(FFortBatchUpdatePlayer_DeployableBaseUpdate, AccountId) == 0x000000, "Member 'FFortBatchUpdatePlayer_DeployableBaseUpdate::AccountId' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_DeployableBaseUpdate, DeployableBaseItemId) == 0x000028, "Member 'FFortBatchUpdatePlayer_DeployableBaseUpdate::DeployableBaseItemId' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_DeployableBaseUpdate, CloudSaveInfo) == 0x000038, "Member 'FFortBatchUpdatePlayer_DeployableBaseUpdate::CloudSaveInfo' has a wrong offset!");

// ScriptStruct FortniteGame.VolumePlayerStateInfo
// 0x0034 (0x0040 - 0x000C)
struct FVolumePlayerStateInfo final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       UniquePlayerId;                                    // 0x0010(0x0028)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortVolume*                            Volume;                                            // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVolumePlayerStateInfo) == 0x000008, "Wrong alignment on FVolumePlayerStateInfo");
static_assert(sizeof(FVolumePlayerStateInfo) == 0x000040, "Wrong size on FVolumePlayerStateInfo");
static_assert(offsetof(FVolumePlayerStateInfo, UniquePlayerId) == 0x000010, "Member 'FVolumePlayerStateInfo::UniquePlayerId' has a wrong offset!");
static_assert(offsetof(FVolumePlayerStateInfo, Volume) == 0x000038, "Member 'FVolumePlayerStateInfo::Volume' has a wrong offset!");

// ScriptStruct FortniteGame.FortRechargingActionTimer
// 0x00D8 (0x00D8 - 0x0000)
struct alignas(0x08) FFortRechargingActionTimer final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeRate;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveExpenseRate;                                 // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassiveExpenseRate;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinActiveDuration;                                 // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinActivationCharge;                               // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveCooldownTime;                                // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeThreshold;                                   // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Charge;                                            // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsActive;                                         // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCharging;                                       // 0x00C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPassive;                                        // 0x00CA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CB[0xD];                                       // 0x00CB(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRechargingActionTimer) == 0x000008, "Wrong alignment on FFortRechargingActionTimer");
static_assert(sizeof(FFortRechargingActionTimer) == 0x0000D8, "Wrong size on FFortRechargingActionTimer");
static_assert(offsetof(FFortRechargingActionTimer, ChargeRate) == 0x0000A8, "Member 'FFortRechargingActionTimer::ChargeRate' has a wrong offset!");
static_assert(offsetof(FFortRechargingActionTimer, ActiveExpenseRate) == 0x0000AC, "Member 'FFortRechargingActionTimer::ActiveExpenseRate' has a wrong offset!");
static_assert(offsetof(FFortRechargingActionTimer, PassiveExpenseRate) == 0x0000B0, "Member 'FFortRechargingActionTimer::PassiveExpenseRate' has a wrong offset!");
static_assert(offsetof(FFortRechargingActionTimer, MinActiveDuration) == 0x0000B4, "Member 'FFortRechargingActionTimer::MinActiveDuration' has a wrong offset!");
static_assert(offsetof(FFortRechargingActionTimer, MinActivationCharge) == 0x0000B8, "Member 'FFortRechargingActionTimer::MinActivationCharge' has a wrong offset!");
static_assert(offsetof(FFortRechargingActionTimer, ActiveCooldownTime) == 0x0000BC, "Member 'FFortRechargingActionTimer::ActiveCooldownTime' has a wrong offset!");
static_assert(offsetof(FFortRechargingActionTimer, ChargeThreshold) == 0x0000C0, "Member 'FFortRechargingActionTimer::ChargeThreshold' has a wrong offset!");
static_assert(offsetof(FFortRechargingActionTimer, Charge) == 0x0000C4, "Member 'FFortRechargingActionTimer::Charge' has a wrong offset!");
static_assert(offsetof(FFortRechargingActionTimer, bIsActive) == 0x0000C8, "Member 'FFortRechargingActionTimer::bIsActive' has a wrong offset!");
static_assert(offsetof(FFortRechargingActionTimer, bIsCharging) == 0x0000C9, "Member 'FFortRechargingActionTimer::bIsCharging' has a wrong offset!");
static_assert(offsetof(FFortRechargingActionTimer, bIsPassive) == 0x0000CA, "Member 'FFortRechargingActionTimer::bIsPassive' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingActiveConstructionInfo
// 0x0010 (0x0010 - 0x0000)
struct FStrategicBuildingActiveConstructionInfo final
{
public:
	float                                         ConstructionStartTime;                             // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstructionEndTime;                               // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConstructionLevel;                                 // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUnderConstruction : 1;                            // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStrategicBuildingActiveConstructionInfo) == 0x000004, "Wrong alignment on FStrategicBuildingActiveConstructionInfo");
static_assert(sizeof(FStrategicBuildingActiveConstructionInfo) == 0x000010, "Wrong size on FStrategicBuildingActiveConstructionInfo");
static_assert(offsetof(FStrategicBuildingActiveConstructionInfo, ConstructionStartTime) == 0x000000, "Member 'FStrategicBuildingActiveConstructionInfo::ConstructionStartTime' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingActiveConstructionInfo, ConstructionEndTime) == 0x000004, "Member 'FStrategicBuildingActiveConstructionInfo::ConstructionEndTime' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingActiveConstructionInfo, ConstructionLevel) == 0x000008, "Member 'FStrategicBuildingActiveConstructionInfo::ConstructionLevel' has a wrong offset!");

// ScriptStruct FortniteGame.HighlightReel
// 0x0038 (0x0038 - 0x0000)
struct FHighlightReel final
{
public:
	int32                                         TotalDurationSeconds;                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	EHighlightReelTypes                           HighlightType;                                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x17];                                      // 0x0021(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHighlightReel) == 0x000008, "Wrong alignment on FHighlightReel");
static_assert(sizeof(FHighlightReel) == 0x000038, "Wrong size on FHighlightReel");
static_assert(offsetof(FHighlightReel, TotalDurationSeconds) == 0x000000, "Member 'FHighlightReel::TotalDurationSeconds' has a wrong offset!");
static_assert(offsetof(FHighlightReel, Description) == 0x000008, "Member 'FHighlightReel::Description' has a wrong offset!");
static_assert(offsetof(FHighlightReel, HighlightType) == 0x000020, "Member 'FHighlightReel::HighlightType' has a wrong offset!");

// ScriptStruct FortniteGame.FortConditionalIncludeTags
// 0x0040 (0x0040 - 0x0000)
struct FFortConditionalIncludeTags final
{
public:
	struct FGameplayTagContainer                  ConditionTags;                                     // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IncludeTags;                                       // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConditionalIncludeTags) == 0x000008, "Wrong alignment on FFortConditionalIncludeTags");
static_assert(sizeof(FFortConditionalIncludeTags) == 0x000040, "Wrong size on FFortConditionalIncludeTags");
static_assert(offsetof(FFortConditionalIncludeTags, ConditionTags) == 0x000000, "Member 'FFortConditionalIncludeTags::ConditionTags' has a wrong offset!");
static_assert(offsetof(FFortConditionalIncludeTags, IncludeTags) == 0x000020, "Member 'FFortConditionalIncludeTags::IncludeTags' has a wrong offset!");

// ScriptStruct FortniteGame.GoalSelectionQueryInfo
// 0x0028 (0x0028 - 0x0000)
struct FGoalSelectionQueryInfo final
{
public:
	class UEnvQuery*                              GoalSelectionQuery;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalSelectionQueryInfo) == 0x000008, "Wrong alignment on FGoalSelectionQueryInfo");
static_assert(sizeof(FGoalSelectionQueryInfo) == 0x000028, "Wrong size on FGoalSelectionQueryInfo");
static_assert(offsetof(FGoalSelectionQueryInfo, GoalSelectionQuery) == 0x000000, "Member 'FGoalSelectionQueryInfo::GoalSelectionQuery' has a wrong offset!");
static_assert(offsetof(FGoalSelectionQueryInfo, RequiredGameplayTags) == 0x000008, "Member 'FGoalSelectionQueryInfo::RequiredGameplayTags' has a wrong offset!");

// ScriptStruct FortniteGame.AIPawnUpdateInfo
// 0x0010 (0x0010 - 0x0000)
struct FAIPawnUpdateInfo final
{
public:
	class AFortAIPawn*                            AIPawn;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIPawnUpdateInfo) == 0x000008, "Wrong alignment on FAIPawnUpdateInfo");
static_assert(sizeof(FAIPawnUpdateInfo) == 0x000010, "Wrong size on FAIPawnUpdateInfo");
static_assert(offsetof(FAIPawnUpdateInfo, AIPawn) == 0x000000, "Member 'FAIPawnUpdateInfo::AIPawn' has a wrong offset!");

// ScriptStruct FortniteGame.FortUICameraFrameTargetBounds
// 0x0014 (0x0014 - 0x0000)
struct FFortUICameraFrameTargetBounds final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CylinderHalfHeight;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CylinderRadius;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUICameraFrameTargetBounds) == 0x000004, "Wrong alignment on FFortUICameraFrameTargetBounds");
static_assert(sizeof(FFortUICameraFrameTargetBounds) == 0x000014, "Wrong size on FFortUICameraFrameTargetBounds");
static_assert(offsetof(FFortUICameraFrameTargetBounds, Origin) == 0x000000, "Member 'FFortUICameraFrameTargetBounds::Origin' has a wrong offset!");
static_assert(offsetof(FFortUICameraFrameTargetBounds, CylinderHalfHeight) == 0x00000C, "Member 'FFortUICameraFrameTargetBounds::CylinderHalfHeight' has a wrong offset!");
static_assert(offsetof(FFortUICameraFrameTargetBounds, CylinderRadius) == 0x000010, "Member 'FFortUICameraFrameTargetBounds::CylinderRadius' has a wrong offset!");

// ScriptStruct FortniteGame.FortUICameraFrameTargetSettings
// 0x0030 (0x0030 - 0x0000)
struct FFortUICameraFrameTargetSettings final
{
public:
	struct FVector                                FocusPointToCenter;                                // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUICameraFrameTargetBoundingBehavior      BoundingBehavior;                                  // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortUICameraFrameTargetBounds         BoundsToFrame;                                     // 0x0010(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               FocusObjectRotation;                               // 0x0024(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUICameraFrameTargetSettings) == 0x000004, "Wrong alignment on FFortUICameraFrameTargetSettings");
static_assert(sizeof(FFortUICameraFrameTargetSettings) == 0x000030, "Wrong size on FFortUICameraFrameTargetSettings");
static_assert(offsetof(FFortUICameraFrameTargetSettings, FocusPointToCenter) == 0x000000, "Member 'FFortUICameraFrameTargetSettings::FocusPointToCenter' has a wrong offset!");
static_assert(offsetof(FFortUICameraFrameTargetSettings, BoundingBehavior) == 0x00000C, "Member 'FFortUICameraFrameTargetSettings::BoundingBehavior' has a wrong offset!");
static_assert(offsetof(FFortUICameraFrameTargetSettings, BoundsToFrame) == 0x000010, "Member 'FFortUICameraFrameTargetSettings::BoundsToFrame' has a wrong offset!");
static_assert(offsetof(FFortUICameraFrameTargetSettings, FocusObjectRotation) == 0x000024, "Member 'FFortUICameraFrameTargetSettings::FocusObjectRotation' has a wrong offset!");

// ScriptStruct FortniteGame.FortReleaseVersion
// 0x0008 (0x0008 - 0x0000)
struct FFortReleaseVersion final
{
public:
	class FName                                   VersionName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortReleaseVersion) == 0x000004, "Wrong alignment on FFortReleaseVersion");
static_assert(sizeof(FFortReleaseVersion) == 0x000008, "Wrong size on FFortReleaseVersion");
static_assert(offsetof(FFortReleaseVersion, VersionName) == 0x000000, "Member 'FFortReleaseVersion::VersionName' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_CommonWeapon
// 0x0002 (0x0002 - 0x0000)
struct FFortAnimInput_CommonWeapon final
{
public:
	uint8                                         bIsWeaponEquipped : 1;                             // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceUpperBodyTargeting : 1;                      // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimInput_CommonWeapon) == 0x000001, "Wrong alignment on FFortAnimInput_CommonWeapon");
static_assert(sizeof(FFortAnimInput_CommonWeapon) == 0x000002, "Wrong size on FFortAnimInput_CommonWeapon");

// ScriptStruct FortniteGame.FortAILootDropModifierRow
// 0x0030 (0x0038 - 0x0008)
struct FFortAILootDropModifierRow final : public FTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemDropChanceMultiplier;                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldItemLootTierGroup;                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AITagsContainer;                                   // 0x0018(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAILootDropModifierRow) == 0x000008, "Wrong alignment on FFortAILootDropModifierRow");
static_assert(sizeof(FFortAILootDropModifierRow) == 0x000038, "Wrong size on FFortAILootDropModifierRow");
static_assert(offsetof(FFortAILootDropModifierRow, Priority) == 0x000008, "Member 'FFortAILootDropModifierRow::Priority' has a wrong offset!");
static_assert(offsetof(FFortAILootDropModifierRow, ItemDropChanceMultiplier) == 0x00000C, "Member 'FFortAILootDropModifierRow::ItemDropChanceMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAILootDropModifierRow, WorldItemLootTierGroup) == 0x000010, "Member 'FFortAILootDropModifierRow::WorldItemLootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortAILootDropModifierRow, AITagsContainer) == 0x000018, "Member 'FFortAILootDropModifierRow::AITagsContainer' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIBaseLootDropRow
// 0x0040 (0x0048 - 0x0008)
struct FFortAIBaseLootDropRow final : public FTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemDropChance;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldItemLootTierGroup;                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldItemInstancedLootTierGroup;                   // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccountItemLootTierGroup;                          // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AITagsContainer;                                   // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIBaseLootDropRow) == 0x000008, "Wrong alignment on FFortAIBaseLootDropRow");
static_assert(sizeof(FFortAIBaseLootDropRow) == 0x000048, "Wrong size on FFortAIBaseLootDropRow");
static_assert(offsetof(FFortAIBaseLootDropRow, Priority) == 0x000008, "Member 'FFortAIBaseLootDropRow::Priority' has a wrong offset!");
static_assert(offsetof(FFortAIBaseLootDropRow, ItemDropChance) == 0x00000C, "Member 'FFortAIBaseLootDropRow::ItemDropChance' has a wrong offset!");
static_assert(offsetof(FFortAIBaseLootDropRow, WorldItemLootTierGroup) == 0x000010, "Member 'FFortAIBaseLootDropRow::WorldItemLootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortAIBaseLootDropRow, WorldItemInstancedLootTierGroup) == 0x000018, "Member 'FFortAIBaseLootDropRow::WorldItemInstancedLootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortAIBaseLootDropRow, AccountItemLootTierGroup) == 0x000020, "Member 'FFortAIBaseLootDropRow::AccountItemLootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortAIBaseLootDropRow, AITagsContainer) == 0x000028, "Member 'FFortAIBaseLootDropRow::AITagsContainer' has a wrong offset!");

// ScriptStruct FortniteGame.FortAISpawnGroupUpgradeData
// 0x0060 (0x0060 - 0x0000)
struct FFortAISpawnGroupUpgradeData final
{
public:
	TSubclassOf<class UFortAISpawnGroupUpgrade>   SpawnGroupUpgrade;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAISpawnGroupUpgradeProbabilities> UpgradeProbabilities;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAISpawnGroupCapsCategorySet> SpawnGroupCapsCategories;                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                      EncounterTagRequirementsQuery;                     // 0x0018(0x0048)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAISpawnGroupUpgradeData) == 0x000008, "Wrong alignment on FFortAISpawnGroupUpgradeData");
static_assert(sizeof(FFortAISpawnGroupUpgradeData) == 0x000060, "Wrong size on FFortAISpawnGroupUpgradeData");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, SpawnGroupUpgrade) == 0x000000, "Member 'FFortAISpawnGroupUpgradeData::SpawnGroupUpgrade' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, UpgradeProbabilities) == 0x000008, "Member 'FFortAISpawnGroupUpgradeData::UpgradeProbabilities' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, SpawnGroupCapsCategories) == 0x000010, "Member 'FFortAISpawnGroupUpgradeData::SpawnGroupCapsCategories' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, EncounterTagRequirementsQuery) == 0x000018, "Member 'FFortAISpawnGroupUpgradeData::EncounterTagRequirementsQuery' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnUpgradeProbability
// 0x0058 (0x0058 - 0x0000)
struct FFortAIPawnUpgradeProbability final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   UpgradeProbability;                                // 0x0048(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIPawnUpgradeProbability) == 0x000008, "Wrong alignment on FFortAIPawnUpgradeProbability");
static_assert(sizeof(FFortAIPawnUpgradeProbability) == 0x000058, "Wrong size on FFortAIPawnUpgradeProbability");
static_assert(offsetof(FFortAIPawnUpgradeProbability, TagQuery) == 0x000000, "Member 'FFortAIPawnUpgradeProbability::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeProbability, UpgradeProbability) == 0x000048, "Member 'FFortAIPawnUpgradeProbability::UpgradeProbability' has a wrong offset!");

// ScriptStruct FortniteGame.FortBatchUpdatePlayer_Update
// 0x00F8 (0x00F8 - 0x0000)
struct FFortBatchUpdatePlayer_Update final
{
public:
	struct FUniqueNetIdRepl                       AccountId;                                         // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TheaterNum;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMcpProfileChangeRequest               TheaterItemUpdate;                                 // 0x0030(0x0058)(NativeAccessSpecifierPublic)
	int32                                         OutpostNum;                                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMcpProfileChangeRequest               OutpostItemUpdate;                                 // 0x0090(0x0058)(NativeAccessSpecifierPublic)
	TArray<struct FFortQuestObjectiveCompletion>  QuestObjectiveUpdates;                             // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBatchUpdatePlayer_Update) == 0x000008, "Wrong alignment on FFortBatchUpdatePlayer_Update");
static_assert(sizeof(FFortBatchUpdatePlayer_Update) == 0x0000F8, "Wrong size on FFortBatchUpdatePlayer_Update");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, AccountId) == 0x000000, "Member 'FFortBatchUpdatePlayer_Update::AccountId' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, TheaterNum) == 0x000028, "Member 'FFortBatchUpdatePlayer_Update::TheaterNum' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, TheaterItemUpdate) == 0x000030, "Member 'FFortBatchUpdatePlayer_Update::TheaterItemUpdate' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, OutpostNum) == 0x000088, "Member 'FFortBatchUpdatePlayer_Update::OutpostNum' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, OutpostItemUpdate) == 0x000090, "Member 'FFortBatchUpdatePlayer_Update::OutpostItemUpdate' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, QuestObjectiveUpdates) == 0x0000E8, "Member 'FFortBatchUpdatePlayer_Update::QuestObjectiveUpdates' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnPointsProfile
// 0x0040 (0x0040 - 0x0000)
struct FFortAIEncounterSpawnPointsProfile final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCurveTableRowHandle>           MaxSpawnPointsPerPlayerCount;                      // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCurveTableRowHandle>           MinSpawnPointsPerPlayerCount;                      // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnPointsProfile) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnPointsProfile");
static_assert(sizeof(FFortAIEncounterSpawnPointsProfile) == 0x000040, "Wrong size on FFortAIEncounterSpawnPointsProfile");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, EncounterTypeTags) == 0x000000, "Member 'FFortAIEncounterSpawnPointsProfile::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, MaxSpawnPointsPerPlayerCount) == 0x000020, "Member 'FFortAIEncounterSpawnPointsProfile::MaxSpawnPointsPerPlayerCount' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, MinSpawnPointsPerPlayerCount) == 0x000030, "Member 'FFortAIEncounterSpawnPointsProfile::MinSpawnPointsPerPlayerCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertClaimData
// 0x0020 (0x0020 - 0x0000)
struct FFortMissionAlertClaimData final
{
public:
	class FString                                 MissionAlertID;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RedemptionDateUtc;                                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EvictClaimDataAfterUtc;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertClaimData) == 0x000008, "Wrong alignment on FFortMissionAlertClaimData");
static_assert(sizeof(FFortMissionAlertClaimData) == 0x000020, "Wrong size on FFortMissionAlertClaimData");
static_assert(offsetof(FFortMissionAlertClaimData, MissionAlertID) == 0x000000, "Member 'FFortMissionAlertClaimData::MissionAlertID' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertClaimData, RedemptionDateUtc) == 0x000010, "Member 'FFortMissionAlertClaimData::RedemptionDateUtc' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertClaimData, EvictClaimDataAfterUtc) == 0x000018, "Member 'FFortMissionAlertClaimData::EvictClaimDataAfterUtc' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertRecord
// 0x0030 (0x0030 - 0x0000)
struct FFortMissionAlertRecord final
{
public:
	TArray<struct FFortMissionAlertClaimData>     ClaimData;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         PendingMissionAlertRewards;                        // 0x0010(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertRecord) == 0x000008, "Wrong alignment on FFortMissionAlertRecord");
static_assert(sizeof(FFortMissionAlertRecord) == 0x000030, "Wrong size on FFortMissionAlertRecord");
static_assert(offsetof(FFortMissionAlertRecord, ClaimData) == 0x000000, "Member 'FFortMissionAlertRecord::ClaimData' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertRecord, PendingMissionAlertRewards) == 0x000010, "Member 'FFortMissionAlertRecord::PendingMissionAlertRewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnGroupCapsProfile
// 0x0030 (0x0030 - 0x0000)
struct FFortAIEncounterSpawnGroupCapsProfile final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterSpawnGroupCapsCategory> PopulationCategories;                              // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnGroupCapsProfile) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnGroupCapsProfile");
static_assert(sizeof(FFortAIEncounterSpawnGroupCapsProfile) == 0x000030, "Wrong size on FFortAIEncounterSpawnGroupCapsProfile");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsProfile, EncounterTypeTags) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCapsProfile::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsProfile, PopulationCategories) == 0x000020, "Member 'FFortAIEncounterSpawnGroupCapsProfile::PopulationCategories' has a wrong offset!");

// ScriptStruct FortniteGame.DeleteActorRecord
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FDeleteActorRecord final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeleteActorRecord) == 0x000008, "Wrong alignment on FDeleteActorRecord");
static_assert(sizeof(FDeleteActorRecord) == 0x000038, "Wrong size on FDeleteActorRecord");

// ScriptStruct FortniteGame.FortAnimNode_SlopeWarping
// 0x0160 (0x0228 - 0x00C8)
struct FFortAnimNode_SlopeWarping final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_C8[0x18];                                      // 0x00C8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         IKFootRootBone;                                    // 0x00E0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x00F0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSlopeWarpingFootDefinition>    FeetDefinitions;                                   // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlopeWarpingFootData>          FeetData;                                          // 0x0110(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           PelvisOffsetInterpolator;                          // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x34];                                     // 0x0128(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GravityDir;                                        // 0x015C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CustomFloorOffset;                                 // 0x0168(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedDeltaTime;                                   // 0x0174(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetFloorNormalWorldSpace;                       // 0x0178(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           FloorNormalInterpolator;                           // 0x0184(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x34];                                     // 0x018C(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetFloorOffsetLocalSpace;                       // 0x01C0(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           FloorOffsetInterpolator;                           // 0x01CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0x34];                                     // 0x01D4(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxStepHeight;                                     // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bKeepMeshInsideOfCapsule : 1;                      // 0x020C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPullPelvisDown : 1;                               // 0x020C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseCustomFloorOffset : 1;                         // 0x020C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseCapsuleInfoInsteadOfFootTraces : 1;            // 0x020C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWasOnGround : 1;                                  // 0x020C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowDebug : 1;                                    // 0x020C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFloorSmoothingInitialized : 1;                    // 0x020C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActorLocation;                                     // 0x0210(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GravityDirCompSpace;                               // 0x021C(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAnimNode_SlopeWarping) == 0x000008, "Wrong alignment on FFortAnimNode_SlopeWarping");
static_assert(sizeof(FFortAnimNode_SlopeWarping) == 0x000228, "Wrong size on FFortAnimNode_SlopeWarping");
static_assert(offsetof(FFortAnimNode_SlopeWarping, IKFootRootBone) == 0x0000E0, "Member 'FFortAnimNode_SlopeWarping::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, PelvisBone) == 0x0000F0, "Member 'FFortAnimNode_SlopeWarping::PelvisBone' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, FeetDefinitions) == 0x000100, "Member 'FFortAnimNode_SlopeWarping::FeetDefinitions' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, FeetData) == 0x000110, "Member 'FFortAnimNode_SlopeWarping::FeetData' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, PelvisOffsetInterpolator) == 0x000120, "Member 'FFortAnimNode_SlopeWarping::PelvisOffsetInterpolator' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, GravityDir) == 0x00015C, "Member 'FFortAnimNode_SlopeWarping::GravityDir' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, CustomFloorOffset) == 0x000168, "Member 'FFortAnimNode_SlopeWarping::CustomFloorOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, CachedDeltaTime) == 0x000174, "Member 'FFortAnimNode_SlopeWarping::CachedDeltaTime' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, TargetFloorNormalWorldSpace) == 0x000178, "Member 'FFortAnimNode_SlopeWarping::TargetFloorNormalWorldSpace' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, FloorNormalInterpolator) == 0x000184, "Member 'FFortAnimNode_SlopeWarping::FloorNormalInterpolator' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, TargetFloorOffsetLocalSpace) == 0x0001C0, "Member 'FFortAnimNode_SlopeWarping::TargetFloorOffsetLocalSpace' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, FloorOffsetInterpolator) == 0x0001CC, "Member 'FFortAnimNode_SlopeWarping::FloorOffsetInterpolator' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, MaxStepHeight) == 0x000208, "Member 'FFortAnimNode_SlopeWarping::MaxStepHeight' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, ActorLocation) == 0x000210, "Member 'FFortAnimNode_SlopeWarping::ActorLocation' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, GravityDirCompSpace) == 0x00021C, "Member 'FFortAnimNode_SlopeWarping::GravityDirCompSpace' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatLocationInfo
// 0x0054 (0x0060 - 0x000C)
struct FThreatLocationInfo final : public FFastArraySerializerItem
{
public:
	struct FVector                                CloudLocation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ThreatVolume;                                      // 0x0018(0x001C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortThreatVisualsManager*              ThreatVisualsManager;                              // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AThreatCloud>            CloudActor;                                        // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x1];                                       // 0x0048(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bThreatActivated;                                  // 0x0049(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortThreatDeactivationType                   DeactivationType;                                  // 0x004A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x15];                                      // 0x004B(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThreatLocationInfo) == 0x000008, "Wrong alignment on FThreatLocationInfo");
static_assert(sizeof(FThreatLocationInfo) == 0x000060, "Wrong size on FThreatLocationInfo");
static_assert(offsetof(FThreatLocationInfo, CloudLocation) == 0x00000C, "Member 'FThreatLocationInfo::CloudLocation' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, ThreatVolume) == 0x000018, "Member 'FThreatLocationInfo::ThreatVolume' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, ThreatVisualsManager) == 0x000038, "Member 'FThreatLocationInfo::ThreatVisualsManager' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, CloudActor) == 0x000040, "Member 'FThreatLocationInfo::CloudActor' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, bThreatActivated) == 0x000049, "Member 'FThreatLocationInfo::bThreatActivated' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, DeactivationType) == 0x00004A, "Member 'FThreatLocationInfo::DeactivationType' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatLocationArray
// 0x0010 (0x0118 - 0x0108)
struct FThreatLocationArray final : public FFastArraySerializer
{
public:
	TArray<struct FThreatLocationInfo>            Locations;                                         // 0x0108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatLocationArray) == 0x000008, "Wrong alignment on FThreatLocationArray");
static_assert(sizeof(FThreatLocationArray) == 0x000118, "Wrong size on FThreatLocationArray");
static_assert(offsetof(FThreatLocationArray, Locations) == 0x000108, "Member 'FThreatLocationArray::Locations' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterPIDControllerSettings
// 0x0030 (0x0030 - 0x0000)
struct FFortAIEncounterPIDControllerSettings final
{
public:
	struct FCurveTableRowHandle                   ProportionalGain;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   IntegralGain;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   DerivativeGain;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterPIDControllerSettings) == 0x000008, "Wrong alignment on FFortAIEncounterPIDControllerSettings");
static_assert(sizeof(FFortAIEncounterPIDControllerSettings) == 0x000030, "Wrong size on FFortAIEncounterPIDControllerSettings");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, ProportionalGain) == 0x000000, "Member 'FFortAIEncounterPIDControllerSettings::ProportionalGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, IntegralGain) == 0x000010, "Member 'FFortAIEncounterPIDControllerSettings::IntegralGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, DerivativeGain) == 0x000020, "Member 'FFortAIEncounterPIDControllerSettings::DerivativeGain' has a wrong offset!");

// ScriptStruct FortniteGame.LoginFailureLogSubmitOptions
// 0x0020 (0x0020 - 0x0000)
struct FLoginFailureLogSubmitOptions final
{
public:
	bool                                          bSubmitLogs;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LogTailKb;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogSubmitChance;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELoginResult>                          DoNotUploadReasons;                                // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoginFailureLogSubmitOptions) == 0x000008, "Wrong alignment on FLoginFailureLogSubmitOptions");
static_assert(sizeof(FLoginFailureLogSubmitOptions) == 0x000020, "Wrong size on FLoginFailureLogSubmitOptions");
static_assert(offsetof(FLoginFailureLogSubmitOptions, bSubmitLogs) == 0x000000, "Member 'FLoginFailureLogSubmitOptions::bSubmitLogs' has a wrong offset!");
static_assert(offsetof(FLoginFailureLogSubmitOptions, LogTailKb) == 0x000004, "Member 'FLoginFailureLogSubmitOptions::LogTailKb' has a wrong offset!");
static_assert(offsetof(FLoginFailureLogSubmitOptions, LogSubmitChance) == 0x000008, "Member 'FLoginFailureLogSubmitOptions::LogSubmitChance' has a wrong offset!");
static_assert(offsetof(FLoginFailureLogSubmitOptions, DoNotUploadReasons) == 0x000010, "Member 'FLoginFailureLogSubmitOptions::DoNotUploadReasons' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseBannerColorData
// 0x0010 (0x0018 - 0x0008)
struct FHomebaseBannerColorData final : public FTableRowBase
{
public:
	class FName                                   ColorKeyName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CategoryRowName;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FHomebaseBannerColorData) == 0x000008, "Wrong alignment on FHomebaseBannerColorData");
static_assert(sizeof(FHomebaseBannerColorData) == 0x000018, "Wrong size on FHomebaseBannerColorData");
static_assert(offsetof(FHomebaseBannerColorData, ColorKeyName) == 0x000008, "Member 'FHomebaseBannerColorData::ColorKeyName' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerColorData, CategoryRowName) == 0x000010, "Member 'FHomebaseBannerColorData::CategoryRowName' has a wrong offset!");

// ScriptStruct FortniteGame.GunGameGunEntries
// 0x0010 (0x0010 - 0x0000)
struct FGunGameGunEntries final
{
public:
	TArray<struct FGunGameGunEntry>               Entries;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunGameGunEntries) == 0x000008, "Wrong alignment on FGunGameGunEntries");
static_assert(sizeof(FGunGameGunEntries) == 0x000010, "Wrong size on FGunGameGunEntries");
static_assert(offsetof(FGunGameGunEntries, Entries) == 0x000000, "Member 'FGunGameGunEntries::Entries' has a wrong offset!");

// ScriptStruct FortniteGame.MeshVariant
// 0x0058 (0x0058 - 0x0000)
struct FMeshVariant final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           MeshToSwap;                                        // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentToOverride;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           OverrideMesh;                                      // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshVariant) == 0x000008, "Wrong alignment on FMeshVariant");
static_assert(sizeof(FMeshVariant) == 0x000058, "Wrong size on FMeshVariant");
static_assert(offsetof(FMeshVariant, MeshToSwap) == 0x000000, "Member 'FMeshVariant::MeshToSwap' has a wrong offset!");
static_assert(offsetof(FMeshVariant, ComponentToOverride) == 0x000028, "Member 'FMeshVariant::ComponentToOverride' has a wrong offset!");
static_assert(offsetof(FMeshVariant, OverrideMesh) == 0x000030, "Member 'FMeshVariant::OverrideMesh' has a wrong offset!");

// ScriptStruct FortniteGame.FortPawnStats
// 0x00A0 (0x00A8 - 0x0008)
struct FFortPawnStats : public FTableRowBase
{
public:
	float                                         MaximumHealth;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedWalk;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedRun;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedSprint;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedFly;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedCrouchedRun;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedCrouchedSprint;                               // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedBackwardsMultiplier;                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedDBNO;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AccelerationStrafeMultiplierSprint;                // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinAnalogWalkSpeed;                                // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GroundFriction;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BrakingDecelerationWalking;                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BrakingDecelerationFalling;                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BrakingDecelerationFlying;                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BrakingFrictionFactor;                             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAcceleration;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAccelerationFlying;                             // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JumpZVelocity;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveTable*                            FallingDamageTable;                                // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FallingDamageTableRow;                             // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            VehicleEjectDamageTable;                           // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthRegenRate;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthRegenDelay;                                  // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthRegenThreshold;                              // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxShield;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShieldRegenRate;                                   // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShieldRegenDelay;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShieldRegenThreshold;                              // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxControlResistance;                              // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ControlResistanceRegenRate;                        // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ControlResistanceRegenDelay;                       // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ControlResistanceRegenThreshold;                   // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackMultiplier;                               // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackThreshold;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowChainStun;                                   // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortControlRecoveryBehavior                  ControlRecoveryBehavior;                           // 0x00A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPawnStats) == 0x000008, "Wrong alignment on FFortPawnStats");
static_assert(sizeof(FFortPawnStats) == 0x0000A8, "Wrong size on FFortPawnStats");
static_assert(offsetof(FFortPawnStats, MaximumHealth) == 0x000008, "Member 'FFortPawnStats::MaximumHealth' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedWalk) == 0x00000C, "Member 'FFortPawnStats::SpeedWalk' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedRun) == 0x000010, "Member 'FFortPawnStats::SpeedRun' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedSprint) == 0x000014, "Member 'FFortPawnStats::SpeedSprint' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedFly) == 0x000018, "Member 'FFortPawnStats::SpeedFly' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedCrouchedRun) == 0x00001C, "Member 'FFortPawnStats::SpeedCrouchedRun' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedCrouchedSprint) == 0x000020, "Member 'FFortPawnStats::SpeedCrouchedSprint' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedBackwardsMultiplier) == 0x000024, "Member 'FFortPawnStats::SpeedBackwardsMultiplier' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedDBNO) == 0x000028, "Member 'FFortPawnStats::SpeedDBNO' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, AccelerationStrafeMultiplierSprint) == 0x00002C, "Member 'FFortPawnStats::AccelerationStrafeMultiplierSprint' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, MinAnalogWalkSpeed) == 0x000030, "Member 'FFortPawnStats::MinAnalogWalkSpeed' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, GroundFriction) == 0x000034, "Member 'FFortPawnStats::GroundFriction' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, BrakingDecelerationWalking) == 0x000038, "Member 'FFortPawnStats::BrakingDecelerationWalking' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, BrakingDecelerationFalling) == 0x00003C, "Member 'FFortPawnStats::BrakingDecelerationFalling' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, BrakingDecelerationFlying) == 0x000040, "Member 'FFortPawnStats::BrakingDecelerationFlying' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, BrakingFrictionFactor) == 0x000044, "Member 'FFortPawnStats::BrakingFrictionFactor' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, MaxAcceleration) == 0x000048, "Member 'FFortPawnStats::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, MaxAccelerationFlying) == 0x00004C, "Member 'FFortPawnStats::MaxAccelerationFlying' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, JumpZVelocity) == 0x000050, "Member 'FFortPawnStats::JumpZVelocity' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, FallingDamageTable) == 0x000058, "Member 'FFortPawnStats::FallingDamageTable' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, FallingDamageTableRow) == 0x000060, "Member 'FFortPawnStats::FallingDamageTableRow' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, VehicleEjectDamageTable) == 0x000068, "Member 'FFortPawnStats::VehicleEjectDamageTable' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, HealthRegenRate) == 0x000070, "Member 'FFortPawnStats::HealthRegenRate' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, HealthRegenDelay) == 0x000074, "Member 'FFortPawnStats::HealthRegenDelay' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, HealthRegenThreshold) == 0x000078, "Member 'FFortPawnStats::HealthRegenThreshold' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, MaxShield) == 0x00007C, "Member 'FFortPawnStats::MaxShield' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ShieldRegenRate) == 0x000080, "Member 'FFortPawnStats::ShieldRegenRate' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ShieldRegenDelay) == 0x000084, "Member 'FFortPawnStats::ShieldRegenDelay' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ShieldRegenThreshold) == 0x000088, "Member 'FFortPawnStats::ShieldRegenThreshold' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, MaxControlResistance) == 0x00008C, "Member 'FFortPawnStats::MaxControlResistance' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ControlResistanceRegenRate) == 0x000090, "Member 'FFortPawnStats::ControlResistanceRegenRate' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ControlResistanceRegenDelay) == 0x000094, "Member 'FFortPawnStats::ControlResistanceRegenDelay' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ControlResistanceRegenThreshold) == 0x000098, "Member 'FFortPawnStats::ControlResistanceRegenThreshold' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, KnockbackMultiplier) == 0x00009C, "Member 'FFortPawnStats::KnockbackMultiplier' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, KnockbackThreshold) == 0x0000A0, "Member 'FFortPawnStats::KnockbackThreshold' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, bAllowChainStun) == 0x0000A4, "Member 'FFortPawnStats::bAllowChainStun' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ControlRecoveryBehavior) == 0x0000A5, "Member 'FFortPawnStats::ControlRecoveryBehavior' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnStats
// 0x0058 (0x0100 - 0x00A8)
struct FFortAIPawnStats final : public FFortPawnStats
{
public:
	int32                                         ScoreValue;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantSightRadius;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantHearingThreshold;                           // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantLOSHearingThreshold;                        // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantPeripheralVisionAngle;                      // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertSightRadius;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertHearingThreshold;                             // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertLOSHearingThreshold;                          // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertPeripheralVisionAngle;                        // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoSuccessRangeFromLastSeenLocation;              // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            HealthScalingTable;                                // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HealthScalingTableRow;                             // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            ControlResistanceScalingTable;                     // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ControlResistanceScalingTableRow;                  // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            DifficultyRatingTable;                             // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DifficultyRatingTableRow;                          // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIPawnStats) == 0x000008, "Wrong alignment on FFortAIPawnStats");
static_assert(sizeof(FFortAIPawnStats) == 0x000100, "Wrong size on FFortAIPawnStats");
static_assert(offsetof(FFortAIPawnStats, ScoreValue) == 0x0000A8, "Member 'FFortAIPawnStats::ScoreValue' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantSightRadius) == 0x0000AC, "Member 'FFortAIPawnStats::DormantSightRadius' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantHearingThreshold) == 0x0000B0, "Member 'FFortAIPawnStats::DormantHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantLOSHearingThreshold) == 0x0000B4, "Member 'FFortAIPawnStats::DormantLOSHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantPeripheralVisionAngle) == 0x0000B8, "Member 'FFortAIPawnStats::DormantPeripheralVisionAngle' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertSightRadius) == 0x0000BC, "Member 'FFortAIPawnStats::AlertSightRadius' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertHearingThreshold) == 0x0000C0, "Member 'FFortAIPawnStats::AlertHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertLOSHearingThreshold) == 0x0000C4, "Member 'FFortAIPawnStats::AlertLOSHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertPeripheralVisionAngle) == 0x0000C8, "Member 'FFortAIPawnStats::AlertPeripheralVisionAngle' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AutoSuccessRangeFromLastSeenLocation) == 0x0000CC, "Member 'FFortAIPawnStats::AutoSuccessRangeFromLastSeenLocation' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, HealthScalingTable) == 0x0000D0, "Member 'FFortAIPawnStats::HealthScalingTable' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, HealthScalingTableRow) == 0x0000D8, "Member 'FFortAIPawnStats::HealthScalingTableRow' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, ControlResistanceScalingTable) == 0x0000E0, "Member 'FFortAIPawnStats::ControlResistanceScalingTable' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, ControlResistanceScalingTableRow) == 0x0000E8, "Member 'FFortAIPawnStats::ControlResistanceScalingTableRow' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DifficultyRatingTable) == 0x0000F0, "Member 'FFortAIPawnStats::DifficultyRatingTable' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DifficultyRatingTableRow) == 0x0000F8, "Member 'FFortAIPawnStats::DifficultyRatingTableRow' has a wrong offset!");

// ScriptStruct FortniteGame.TrackMovement
// 0x0010 (0x0010 - 0x0000)
struct FTrackMovement
{
public:
	class USplineComponent*                       CurrentSpline;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseDirectionAlongSpline;                      // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackMovement) == 0x000008, "Wrong alignment on FTrackMovement");
static_assert(sizeof(FTrackMovement) == 0x000010, "Wrong size on FTrackMovement");
static_assert(offsetof(FTrackMovement, CurrentSpline) == 0x000000, "Member 'FTrackMovement::CurrentSpline' has a wrong offset!");
static_assert(offsetof(FTrackMovement, DistanceAlongSpline) == 0x000008, "Member 'FTrackMovement::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FTrackMovement, bReverseDirectionAlongSpline) == 0x00000C, "Member 'FTrackMovement::bReverseDirectionAlongSpline' has a wrong offset!");

// ScriptStruct FortniteGame.ReplayEliminationEventInfo
// 0x00C8 (0x00E0 - 0x0018)
struct FReplayEliminationEventInfo final : public FBaseReplayEventInfo
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             EventLocation;                                     // 0x0020(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             InstigatorLocation;                                // 0x0050(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       Victim;                                            // 0x0080(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       Instigator;                                        // 0x00A8(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeathCause                                   DeathCause;                                        // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDBNO;                                             // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortReplayEventType                          EventType;                                         // 0x00D2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3[0xD];                                       // 0x00D3(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplayEliminationEventInfo) == 0x000010, "Wrong alignment on FReplayEliminationEventInfo");
static_assert(sizeof(FReplayEliminationEventInfo) == 0x0000E0, "Wrong size on FReplayEliminationEventInfo");
static_assert(offsetof(FReplayEliminationEventInfo, EventLocation) == 0x000020, "Member 'FReplayEliminationEventInfo::EventLocation' has a wrong offset!");
static_assert(offsetof(FReplayEliminationEventInfo, InstigatorLocation) == 0x000050, "Member 'FReplayEliminationEventInfo::InstigatorLocation' has a wrong offset!");
static_assert(offsetof(FReplayEliminationEventInfo, Victim) == 0x000080, "Member 'FReplayEliminationEventInfo::Victim' has a wrong offset!");
static_assert(offsetof(FReplayEliminationEventInfo, Instigator) == 0x0000A8, "Member 'FReplayEliminationEventInfo::Instigator' has a wrong offset!");
static_assert(offsetof(FReplayEliminationEventInfo, DeathCause) == 0x0000D0, "Member 'FReplayEliminationEventInfo::DeathCause' has a wrong offset!");
static_assert(offsetof(FReplayEliminationEventInfo, bDBNO) == 0x0000D1, "Member 'FReplayEliminationEventInfo::bDBNO' has a wrong offset!");
static_assert(offsetof(FReplayEliminationEventInfo, EventType) == 0x0000D2, "Member 'FReplayEliminationEventInfo::EventType' has a wrong offset!");

// ScriptStruct FortniteGame.FilledGadgetSlot
// 0x0018 (0x0018 - 0x0000)
struct FFilledGadgetSlot final
{
public:
	class FString                                 Gadget;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot_index;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFilledGadgetSlot) == 0x000008, "Wrong alignment on FFilledGadgetSlot");
static_assert(sizeof(FFilledGadgetSlot) == 0x000018, "Wrong size on FFilledGadgetSlot");
static_assert(offsetof(FFilledGadgetSlot, Gadget) == 0x000000, "Member 'FFilledGadgetSlot::Gadget' has a wrong offset!");
static_assert(offsetof(FFilledGadgetSlot, Slot_index) == 0x000010, "Member 'FFilledGadgetSlot::Slot_index' has a wrong offset!");

// ScriptStruct FortniteGame.UtilityTypeFloatPair
// 0x0008 (0x0008 - 0x0000)
struct FUtilityTypeFloatPair final
{
public:
	EFortAIUtility                                Utility;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUtilityTypeFloatPair) == 0x000004, "Wrong alignment on FUtilityTypeFloatPair");
static_assert(sizeof(FUtilityTypeFloatPair) == 0x000008, "Wrong size on FUtilityTypeFloatPair");
static_assert(offsetof(FUtilityTypeFloatPair, Utility) == 0x000000, "Member 'FUtilityTypeFloatPair::Utility' has a wrong offset!");
static_assert(offsetof(FUtilityTypeFloatPair, Value) == 0x000004, "Member 'FUtilityTypeFloatPair::Value' has a wrong offset!");

// ScriptStruct FortniteGame.SimulatedAttributeEntry
// 0x0028 (0x0028 - 0x0000)
struct FSimulatedAttributeEntry final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentValue;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimulatedAttributeEntry) == 0x000008, "Wrong alignment on FSimulatedAttributeEntry");
static_assert(sizeof(FSimulatedAttributeEntry) == 0x000028, "Wrong size on FSimulatedAttributeEntry");
static_assert(offsetof(FSimulatedAttributeEntry, Attribute) == 0x000000, "Member 'FSimulatedAttributeEntry::Attribute' has a wrong offset!");
static_assert(offsetof(FSimulatedAttributeEntry, CurrentValue) == 0x000020, "Member 'FSimulatedAttributeEntry::CurrentValue' has a wrong offset!");

// ScriptStruct FortniteGame.IntensityData
// 0x0030 (0x0030 - 0x0000)
struct FIntensityData final
{
public:
	TArray<struct FIntensityContribution>         ContributingFactors;                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ContributionsTotal;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBuildingEditModeMetadata*>      ExceptionEditModes;                                // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ExceptionEditModeWeight;                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIntensityData) == 0x000008, "Wrong alignment on FIntensityData");
static_assert(sizeof(FIntensityData) == 0x000030, "Wrong size on FIntensityData");
static_assert(offsetof(FIntensityData, ContributingFactors) == 0x000000, "Member 'FIntensityData::ContributingFactors' has a wrong offset!");
static_assert(offsetof(FIntensityData, ContributionsTotal) == 0x000010, "Member 'FIntensityData::ContributionsTotal' has a wrong offset!");
static_assert(offsetof(FIntensityData, ExceptionEditModes) == 0x000018, "Member 'FIntensityData::ExceptionEditModes' has a wrong offset!");
static_assert(offsetof(FIntensityData, ExceptionEditModeWeight) == 0x000028, "Member 'FIntensityData::ExceptionEditModeWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortNotificationLevelUp
// 0x0058 (0x0058 - 0x0000)
struct FFortNotificationLevelUp final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HeroId;                                            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortLootNotification                  Loot;                                              // 0x0018(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortNotificationLevelUp) == 0x000008, "Wrong alignment on FFortNotificationLevelUp");
static_assert(sizeof(FFortNotificationLevelUp) == 0x000058, "Wrong size on FFortNotificationLevelUp");
static_assert(offsetof(FFortNotificationLevelUp, Level) == 0x000000, "Member 'FFortNotificationLevelUp::Level' has a wrong offset!");
static_assert(offsetof(FFortNotificationLevelUp, HeroId) == 0x000008, "Member 'FFortNotificationLevelUp::HeroId' has a wrong offset!");
static_assert(offsetof(FFortNotificationLevelUp, Loot) == 0x000018, "Member 'FFortNotificationLevelUp::Loot' has a wrong offset!");

// ScriptStruct FortniteGame.FortCrewSlotInformation
// 0x0048 (0x0048 - 0x0000)
struct FFortCrewSlotInformation final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SlotTags;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SlotStatContribution;                              // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCrewSlotInformation) == 0x000008, "Wrong alignment on FFortCrewSlotInformation");
static_assert(sizeof(FFortCrewSlotInformation) == 0x000048, "Wrong size on FFortCrewSlotInformation");
static_assert(offsetof(FFortCrewSlotInformation, DisplayName) == 0x000000, "Member 'FFortCrewSlotInformation::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortCrewSlotInformation, SlotName) == 0x000018, "Member 'FFortCrewSlotInformation::SlotName' has a wrong offset!");
static_assert(offsetof(FFortCrewSlotInformation, SlotTags) == 0x000020, "Member 'FFortCrewSlotInformation::SlotTags' has a wrong offset!");
static_assert(offsetof(FFortCrewSlotInformation, SlotStatContribution) == 0x000040, "Member 'FFortCrewSlotInformation::SlotStatContribution' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaCarPlayerSlotUnreplicated
// 0x0008 (0x0008 - 0x0000)
struct FAthenaCarPlayerSlotUnreplicated final
{
public:
	class UInputComponent*                        Input;                                             // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaCarPlayerSlotUnreplicated) == 0x000008, "Wrong alignment on FAthenaCarPlayerSlotUnreplicated");
static_assert(sizeof(FAthenaCarPlayerSlotUnreplicated) == 0x000008, "Wrong size on FAthenaCarPlayerSlotUnreplicated");
static_assert(offsetof(FAthenaCarPlayerSlotUnreplicated, Input) == 0x000000, "Member 'FAthenaCarPlayerSlotUnreplicated::Input' has a wrong offset!");

// ScriptStruct FortniteGame.ContextTutorialTrigger
// 0x0058 (0x0058 - 0x0000)
struct FContextTutorialTrigger final
{
public:
	EFortContextTutorialTypes                     Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DirectiveMessage;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   InformativeMessage;                                // 0x0020(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         RecallNumber;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideTriggerDelay;                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideTriggerDisplayTime;                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoolPriority;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortContextTutorialTypes                     Dependency;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideRecallCooldownInSeconds;                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortContextTutorialPlatform                  Platform;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActionLevel;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextTutorialTrigger) == 0x000008, "Wrong alignment on FContextTutorialTrigger");
static_assert(sizeof(FContextTutorialTrigger) == 0x000058, "Wrong size on FContextTutorialTrigger");
static_assert(offsetof(FContextTutorialTrigger, Type) == 0x000000, "Member 'FContextTutorialTrigger::Type' has a wrong offset!");
static_assert(offsetof(FContextTutorialTrigger, DirectiveMessage) == 0x000008, "Member 'FContextTutorialTrigger::DirectiveMessage' has a wrong offset!");
static_assert(offsetof(FContextTutorialTrigger, InformativeMessage) == 0x000020, "Member 'FContextTutorialTrigger::InformativeMessage' has a wrong offset!");
static_assert(offsetof(FContextTutorialTrigger, RecallNumber) == 0x000038, "Member 'FContextTutorialTrigger::RecallNumber' has a wrong offset!");
static_assert(offsetof(FContextTutorialTrigger, OverrideTriggerDelay) == 0x00003C, "Member 'FContextTutorialTrigger::OverrideTriggerDelay' has a wrong offset!");
static_assert(offsetof(FContextTutorialTrigger, OverrideTriggerDisplayTime) == 0x000040, "Member 'FContextTutorialTrigger::OverrideTriggerDisplayTime' has a wrong offset!");
static_assert(offsetof(FContextTutorialTrigger, PoolPriority) == 0x000044, "Member 'FContextTutorialTrigger::PoolPriority' has a wrong offset!");
static_assert(offsetof(FContextTutorialTrigger, Dependency) == 0x000048, "Member 'FContextTutorialTrigger::Dependency' has a wrong offset!");
static_assert(offsetof(FContextTutorialTrigger, OverrideRecallCooldownInSeconds) == 0x00004C, "Member 'FContextTutorialTrigger::OverrideRecallCooldownInSeconds' has a wrong offset!");
static_assert(offsetof(FContextTutorialTrigger, Platform) == 0x000050, "Member 'FContextTutorialTrigger::Platform' has a wrong offset!");
static_assert(offsetof(FContextTutorialTrigger, Enabled) == 0x000051, "Member 'FContextTutorialTrigger::Enabled' has a wrong offset!");
static_assert(offsetof(FContextTutorialTrigger, ActionLevel) == 0x000054, "Member 'FContextTutorialTrigger::ActionLevel' has a wrong offset!");

// ScriptStruct FortniteGame.WeaponAccuracy
// 0x0028 (0x0028 - 0x0000)
struct FWeaponAccuracy final
{
public:
	int32                                         WeaponTypes;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxTrackingOffsetError;                            // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FWeaponAccuracy) == 0x000008, "Wrong alignment on FWeaponAccuracy");
static_assert(sizeof(FWeaponAccuracy) == 0x000028, "Wrong size on FWeaponAccuracy");
static_assert(offsetof(FWeaponAccuracy, WeaponTypes) == 0x000000, "Member 'FWeaponAccuracy::WeaponTypes' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, MaxTrackingOffsetError) == 0x000008, "Member 'FWeaponAccuracy::MaxTrackingOffsetError' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerWaypointContext
// 0x0010 (0x0010 - 0x0000)
struct FPlayerWaypointContext final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingTrapFloor_Waypoint*            Waypoint;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerWaypointContext) == 0x000008, "Wrong alignment on FPlayerWaypointContext");
static_assert(sizeof(FPlayerWaypointContext) == 0x000010, "Wrong size on FPlayerWaypointContext");
static_assert(offsetof(FPlayerWaypointContext, PlayerState) == 0x000000, "Member 'FPlayerWaypointContext::PlayerState' has a wrong offset!");
static_assert(offsetof(FPlayerWaypointContext, Waypoint) == 0x000008, "Member 'FPlayerWaypointContext::Waypoint' has a wrong offset!");

// ScriptStruct FortniteGame.BarrierHeadData
// 0x0010 (0x0010 - 0x0000)
struct FBarrierHeadData final
{
public:
	TArray<class UCustomCharacterPart*>           PartsToSwapIn;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBarrierHeadData) == 0x000008, "Wrong alignment on FBarrierHeadData");
static_assert(sizeof(FBarrierHeadData) == 0x000010, "Wrong size on FBarrierHeadData");
static_assert(offsetof(FBarrierHeadData, PartsToSwapIn) == 0x000000, "Member 'FBarrierHeadData::PartsToSwapIn' has a wrong offset!");

// ScriptStruct FortniteGame.PetResponseFromQuestSystem
// 0x0020 (0x0020 - 0x0000)
struct FPetResponseFromQuestSystem final
{
public:
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ResponseTag;                                       // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResponseDuration;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPetResponseFromQuestSystem) == 0x000008, "Wrong alignment on FPetResponseFromQuestSystem");
static_assert(sizeof(FPetResponseFromQuestSystem) == 0x000020, "Wrong size on FPetResponseFromQuestSystem");
static_assert(offsetof(FPetResponseFromQuestSystem, ObjectiveStatHandle) == 0x000000, "Member 'FPetResponseFromQuestSystem::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FPetResponseFromQuestSystem, ResponseTag) == 0x000010, "Member 'FPetResponseFromQuestSystem::ResponseTag' has a wrong offset!");
static_assert(offsetof(FPetResponseFromQuestSystem, ResponseDuration) == 0x000018, "Member 'FPetResponseFromQuestSystem::ResponseDuration' has a wrong offset!");

// ScriptStruct FortniteGame.AIDirectorEventData
// 0x0030 (0x0030 - 0x0000)
struct FAIDirectorEventData final
{
public:
	EFortAIDirectorEvent                          Event;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   DataMax;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CoolDownRate;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorEventContribution              ContributionType;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorEventParticipant               OwnerParticipantType;                              // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIDirectorEventData) == 0x000008, "Wrong alignment on FAIDirectorEventData");
static_assert(sizeof(FAIDirectorEventData) == 0x000030, "Wrong size on FAIDirectorEventData");
static_assert(offsetof(FAIDirectorEventData, Event) == 0x000000, "Member 'FAIDirectorEventData::Event' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, DataMax) == 0x000008, "Member 'FAIDirectorEventData::DataMax' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, CoolDownRate) == 0x000018, "Member 'FAIDirectorEventData::CoolDownRate' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, ContributionType) == 0x000028, "Member 'FAIDirectorEventData::ContributionType' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, OwnerParticipantType) == 0x000029, "Member 'FAIDirectorEventData::OwnerParticipantType' has a wrong offset!");

// ScriptStruct FortniteGame.FortGoalActorEncounterDataManagerPair
// 0x0010 (0x0010 - 0x0000)
struct FFortGoalActorEncounterDataManagerPair final
{
public:
	class AActor*                                 GoalActor;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIDirectorDataManager*             EncounterDataManager;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGoalActorEncounterDataManagerPair) == 0x000008, "Wrong alignment on FFortGoalActorEncounterDataManagerPair");
static_assert(sizeof(FFortGoalActorEncounterDataManagerPair) == 0x000010, "Wrong size on FFortGoalActorEncounterDataManagerPair");
static_assert(offsetof(FFortGoalActorEncounterDataManagerPair, GoalActor) == 0x000000, "Member 'FFortGoalActorEncounterDataManagerPair::GoalActor' has a wrong offset!");
static_assert(offsetof(FFortGoalActorEncounterDataManagerPair, EncounterDataManager) == 0x000008, "Member 'FFortGoalActorEncounterDataManagerPair::EncounterDataManager' has a wrong offset!");

// ScriptStruct FortniteGame.VehicleSpringInfo
// 0x0160 (0x0160 - 0x0000)
struct alignas(0x10) FVehicleSpringInfo final
{
public:
	class FName                                   SpringStart;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpringStartLocalOffset;                            // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ForceApplicationPoint;                             // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringLength;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringStiff;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDamp;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringRadius;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAccelChange;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SeatSocketIndex;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsLookAhead : 1;                                  // 0x0031(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNormalToGroundTriangle : 1;                       // 0x0031(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceAlongSpringNormal : 1;                       // 0x0031(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookAheadMinSpeed;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAheadMaxSpeed;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAheadMinStiff;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAheadMaxStiff;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x11C];                                     // 0x0044(0x011C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleSpringInfo) == 0x000010, "Wrong alignment on FVehicleSpringInfo");
static_assert(sizeof(FVehicleSpringInfo) == 0x000160, "Wrong size on FVehicleSpringInfo");
static_assert(offsetof(FVehicleSpringInfo, SpringStart) == 0x000000, "Member 'FVehicleSpringInfo::SpringStart' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, SpringStartLocalOffset) == 0x000008, "Member 'FVehicleSpringInfo::SpringStartLocalOffset' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, ForceApplicationPoint) == 0x000014, "Member 'FVehicleSpringInfo::ForceApplicationPoint' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, SpringLength) == 0x00001C, "Member 'FVehicleSpringInfo::SpringLength' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, SpringStiff) == 0x000020, "Member 'FVehicleSpringInfo::SpringStiff' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, SpringDamp) == 0x000024, "Member 'FVehicleSpringInfo::SpringDamp' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, SpringRadius) == 0x000028, "Member 'FVehicleSpringInfo::SpringRadius' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, MaxAccelChange) == 0x00002C, "Member 'FVehicleSpringInfo::MaxAccelChange' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, SeatSocketIndex) == 0x000030, "Member 'FVehicleSpringInfo::SeatSocketIndex' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, LookAheadMinSpeed) == 0x000034, "Member 'FVehicleSpringInfo::LookAheadMinSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, LookAheadMaxSpeed) == 0x000038, "Member 'FVehicleSpringInfo::LookAheadMaxSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, LookAheadMinStiff) == 0x00003C, "Member 'FVehicleSpringInfo::LookAheadMinStiff' has a wrong offset!");
static_assert(offsetof(FVehicleSpringInfo, LookAheadMaxStiff) == 0x000040, "Member 'FVehicleSpringInfo::LookAheadMaxStiff' has a wrong offset!");

// ScriptStruct FortniteGame.FortChangeMonitoringStruct
// 0x0001 (0x0001 - 0x0000)
struct FFortChangeMonitoringStruct
{
public:
	bool                                          bAnyValueDirty;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortChangeMonitoringStruct) == 0x000001, "Wrong alignment on FFortChangeMonitoringStruct");
static_assert(sizeof(FFortChangeMonitoringStruct) == 0x000001, "Wrong size on FFortChangeMonitoringStruct");
static_assert(offsetof(FFortChangeMonitoringStruct, bAnyValueDirty) == 0x000000, "Member 'FFortChangeMonitoringStruct::bAnyValueDirty' has a wrong offset!");

// ScriptStruct FortniteGame.EncounterEnvironmentQueryInfo
// 0x0028 (0x0028 - 0x0000)
struct FEncounterEnvironmentQueryInfo final
{
public:
	class UEnvQuery*                              EnvironmentQuery;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEnvNamedValue>                 QueryParams;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDirectional;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterEnvironmentQueryInfo) == 0x000008, "Wrong alignment on FEncounterEnvironmentQueryInfo");
static_assert(sizeof(FEncounterEnvironmentQueryInfo) == 0x000028, "Wrong size on FEncounterEnvironmentQueryInfo");
static_assert(offsetof(FEncounterEnvironmentQueryInfo, EnvironmentQuery) == 0x000000, "Member 'FEncounterEnvironmentQueryInfo::EnvironmentQuery' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInfo, QueryParams) == 0x000008, "Member 'FEncounterEnvironmentQueryInfo::QueryParams' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInfo, bIsDirectional) == 0x000020, "Member 'FEncounterEnvironmentQueryInfo::bIsDirectional' has a wrong offset!");

// ScriptStruct FortniteGame.EncounterEnvironmentQueryInstance
// 0x0058 (0x0058 - 0x0000)
struct FEncounterEnvironmentQueryInstance final
{
public:
	struct FEncounterEnvironmentQueryInfo         EnvironmentQueryInfo;                              // 0x0000(0x0028)(NativeAccessSpecifierPublic)
	int32                                         QueryID;                                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWaitingForQueryResults;                         // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterDirection                       ChosenDirection;                                   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        QueryLocations;                                    // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ABuildingRift*>                  FoundRifts;                                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumTimesUsed;                                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterEnvironmentQueryInstance) == 0x000008, "Wrong alignment on FEncounterEnvironmentQueryInstance");
static_assert(sizeof(FEncounterEnvironmentQueryInstance) == 0x000058, "Wrong size on FEncounterEnvironmentQueryInstance");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, EnvironmentQueryInfo) == 0x000000, "Member 'FEncounterEnvironmentQueryInstance::EnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, QueryID) == 0x000028, "Member 'FEncounterEnvironmentQueryInstance::QueryID' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, bIsWaitingForQueryResults) == 0x00002C, "Member 'FEncounterEnvironmentQueryInstance::bIsWaitingForQueryResults' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, ChosenDirection) == 0x00002D, "Member 'FEncounterEnvironmentQueryInstance::ChosenDirection' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, QueryLocations) == 0x000030, "Member 'FEncounterEnvironmentQueryInstance::QueryLocations' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, FoundRifts) == 0x000040, "Member 'FEncounterEnvironmentQueryInstance::FoundRifts' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, NumTimesUsed) == 0x000050, "Member 'FEncounterEnvironmentQueryInstance::NumTimesUsed' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackAction
// 0x0030 (0x0030 - 0x0000)
struct FFortFeedbackAction
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortFeedbackHandle                    Handle;                                            // 0x0008(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FFortFeedbackLine>              Lines;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFeedbackAction) == 0x000008, "Wrong alignment on FFortFeedbackAction");
static_assert(sizeof(FFortFeedbackAction) == 0x000030, "Wrong size on FFortFeedbackAction");
static_assert(offsetof(FFortFeedbackAction, Handle) == 0x000008, "Member 'FFortFeedbackAction::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackAction, Lines) == 0x000020, "Member 'FFortFeedbackAction::Lines' has a wrong offset!");

// ScriptStruct FortniteGame.TieredModifierSetData
// 0x0010 (0x0010 - 0x0000)
struct FTieredModifierSetData final
{
public:
	int32                                         WaveNumber;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifierDuration;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModifierLootTierGroup;                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredModifierSetData) == 0x000004, "Wrong alignment on FTieredModifierSetData");
static_assert(sizeof(FTieredModifierSetData) == 0x000010, "Wrong size on FTieredModifierSetData");
static_assert(offsetof(FTieredModifierSetData, WaveNumber) == 0x000000, "Member 'FTieredModifierSetData::WaveNumber' has a wrong offset!");
static_assert(offsetof(FTieredModifierSetData, ModifierDuration) == 0x000004, "Member 'FTieredModifierSetData::ModifierDuration' has a wrong offset!");
static_assert(offsetof(FTieredModifierSetData, ModifierLootTierGroup) == 0x000008, "Member 'FTieredModifierSetData::ModifierLootTierGroup' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipTokenInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortTooltipTokenInfo final
{
public:
	struct FGameplayTag                           Token;                                             // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortTokenContextInfo>          ContextDetails;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTooltipTokenInfo) == 0x000008, "Wrong alignment on FFortTooltipTokenInfo");
static_assert(sizeof(FFortTooltipTokenInfo) == 0x000018, "Wrong size on FFortTooltipTokenInfo");
static_assert(offsetof(FFortTooltipTokenInfo, Token) == 0x000000, "Member 'FFortTooltipTokenInfo::Token' has a wrong offset!");
static_assert(offsetof(FFortTooltipTokenInfo, ContextDetails) == 0x000008, "Member 'FFortTooltipTokenInfo::ContextDetails' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnGroupInstanceInfo
// 0x0108 (0x0108 - 0x0000)
struct FSpawnGroupInstanceInfo final
{
public:
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumActiveAlive;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalGroupCost;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnPointsUsed;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEngaged;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadyToSpawn;                                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishedSpawning;                                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  GroupGuid;                                         // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemySpawnDataIndex;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSelected;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextEnemyToSpawnIndex;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UpgradeTags;                                       // 0x0038(0x0020)(NativeAccessSpecifierPublic)
	struct FFortAISpawnGroupUpgradeUIData         UpgradeUIData;                                     // 0x0058(0x0080)(NativeAccessSpecifierPublic)
	TArray<struct FFortAIPawnUpgradeData>         PawnUpgrades;                                      // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortGameplayModifierItemDefinition*> ModifiersForAllPawns;                              // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AFortAIPawn*>                    PawnList;                                          // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupInstanceInfo) == 0x000008, "Wrong alignment on FSpawnGroupInstanceInfo");
static_assert(sizeof(FSpawnGroupInstanceInfo) == 0x000108, "Wrong size on FSpawnGroupInstanceInfo");
static_assert(offsetof(FSpawnGroupInstanceInfo, SpawnGroup) == 0x000000, "Member 'FSpawnGroupInstanceInfo::SpawnGroup' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NumActiveAlive) == 0x000008, "Member 'FSpawnGroupInstanceInfo::NumActiveAlive' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, TotalGroupCost) == 0x00000C, "Member 'FSpawnGroupInstanceInfo::TotalGroupCost' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, SpawnPointsUsed) == 0x000010, "Member 'FSpawnGroupInstanceInfo::SpawnPointsUsed' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NumEngaged) == 0x000014, "Member 'FSpawnGroupInstanceInfo::NumEngaged' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, bReadyToSpawn) == 0x000018, "Member 'FSpawnGroupInstanceInfo::bReadyToSpawn' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, bFinishedSpawning) == 0x000019, "Member 'FSpawnGroupInstanceInfo::bFinishedSpawning' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, GroupGuid) == 0x00001C, "Member 'FSpawnGroupInstanceInfo::GroupGuid' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, EnemySpawnDataIndex) == 0x00002C, "Member 'FSpawnGroupInstanceInfo::EnemySpawnDataIndex' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, TimeSelected) == 0x000030, "Member 'FSpawnGroupInstanceInfo::TimeSelected' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NextEnemyToSpawnIndex) == 0x000034, "Member 'FSpawnGroupInstanceInfo::NextEnemyToSpawnIndex' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, UpgradeTags) == 0x000038, "Member 'FSpawnGroupInstanceInfo::UpgradeTags' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, UpgradeUIData) == 0x000058, "Member 'FSpawnGroupInstanceInfo::UpgradeUIData' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, PawnUpgrades) == 0x0000D8, "Member 'FSpawnGroupInstanceInfo::PawnUpgrades' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, ModifiersForAllPawns) == 0x0000E8, "Member 'FSpawnGroupInstanceInfo::ModifiersForAllPawns' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, PawnList) == 0x0000F8, "Member 'FSpawnGroupInstanceInfo::PawnList' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownWorkerPortraitData
// 0x0030 (0x0030 - 0x0000)
struct FMyTownWorkerPortraitData final
{
public:
	TSoftObjectPtr<class UFortItemIconDefinition> Portrait;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMyTownWorkerPortraitData) == 0x000008, "Wrong alignment on FMyTownWorkerPortraitData");
static_assert(sizeof(FMyTownWorkerPortraitData) == 0x000030, "Wrong size on FMyTownWorkerPortraitData");
static_assert(offsetof(FMyTownWorkerPortraitData, Portrait) == 0x000000, "Member 'FMyTownWorkerPortraitData::Portrait' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerPortraitData, SelectionWeight) == 0x000028, "Member 'FMyTownWorkerPortraitData::SelectionWeight' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownWorkerGenderData
// 0x0018 (0x0018 - 0x0000)
struct FMyTownWorkerGenderData final
{
public:
	EFortCustomGender                             Gender;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectionWeight;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMyTownWorkerPortraitData>      PotraitData;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownWorkerGenderData) == 0x000008, "Wrong alignment on FMyTownWorkerGenderData");
static_assert(sizeof(FMyTownWorkerGenderData) == 0x000018, "Wrong size on FMyTownWorkerGenderData");
static_assert(offsetof(FMyTownWorkerGenderData, Gender) == 0x000000, "Member 'FMyTownWorkerGenderData::Gender' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerGenderData, SelectionWeight) == 0x000004, "Member 'FMyTownWorkerGenderData::SelectionWeight' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerGenderData, PotraitData) == 0x000008, "Member 'FMyTownWorkerGenderData::PotraitData' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownWorkerPersonalityData
// 0x0050 (0x0050 - 0x0000)
struct FMyTownWorkerPersonalityData final
{
public:
	struct FGameplayTagContainer                  PersonalityTypeTag;                                // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   PersonalityName;                                   // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMyTownWorkerGenderData>        GenderData;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownWorkerPersonalityData) == 0x000008, "Wrong alignment on FMyTownWorkerPersonalityData");
static_assert(sizeof(FMyTownWorkerPersonalityData) == 0x000050, "Wrong size on FMyTownWorkerPersonalityData");
static_assert(offsetof(FMyTownWorkerPersonalityData, PersonalityTypeTag) == 0x000000, "Member 'FMyTownWorkerPersonalityData::PersonalityTypeTag' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerPersonalityData, PersonalityName) == 0x000020, "Member 'FMyTownWorkerPersonalityData::PersonalityName' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerPersonalityData, SelectionWeight) == 0x000038, "Member 'FMyTownWorkerPersonalityData::SelectionWeight' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerPersonalityData, GenderData) == 0x000040, "Member 'FMyTownWorkerPersonalityData::GenderData' has a wrong offset!");

// ScriptStruct FortniteGame.FortIntensityCurveSequenceInstanceInfo
// 0x000C (0x0010 - 0x0004)
struct FFortIntensityCurveSequenceInstanceInfo final : public FFortCurveSequenceInstanceInfo
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortIntensityCurveSequence*            IntensityCurveSequence;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortIntensityCurveSequenceInstanceInfo) == 0x000008, "Wrong alignment on FFortIntensityCurveSequenceInstanceInfo");
static_assert(sizeof(FFortIntensityCurveSequenceInstanceInfo) == 0x000010, "Wrong size on FFortIntensityCurveSequenceInstanceInfo");
static_assert(offsetof(FFortIntensityCurveSequenceInstanceInfo, IntensityCurveSequence) == 0x000008, "Member 'FFortIntensityCurveSequenceInstanceInfo::IntensityCurveSequence' has a wrong offset!");

// ScriptStruct FortniteGame.FortHighlightColorsContainer
// 0x0060 (0x0060 - 0x0000)
struct FFortHighlightColorsContainer final
{
public:
	struct FFortHighlightColors                   ValidHighlight;                                    // 0x0000(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortHighlightColors                   InvalidHighlight;                                  // 0x0030(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHighlightColorsContainer) == 0x000004, "Wrong alignment on FFortHighlightColorsContainer");
static_assert(sizeof(FFortHighlightColorsContainer) == 0x000060, "Wrong size on FFortHighlightColorsContainer");
static_assert(offsetof(FFortHighlightColorsContainer, ValidHighlight) == 0x000000, "Member 'FFortHighlightColorsContainer::ValidHighlight' has a wrong offset!");
static_assert(offsetof(FFortHighlightColorsContainer, InvalidHighlight) == 0x000030, "Member 'FFortHighlightColorsContainer::InvalidHighlight' has a wrong offset!");

// ScriptStruct FortniteGame.PurchasedBattlePassInfo
// 0x0018 (0x0018 - 0x0000)
struct FPurchasedBattlePassInfo final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPurchasedBattlePassInfo) == 0x000008, "Wrong alignment on FPurchasedBattlePassInfo");
static_assert(sizeof(FPurchasedBattlePassInfo) == 0x000018, "Wrong size on FPurchasedBattlePassInfo");
static_assert(offsetof(FPurchasedBattlePassInfo, Count) == 0x000000, "Member 'FPurchasedBattlePassInfo::Count' has a wrong offset!");
static_assert(offsetof(FPurchasedBattlePassInfo, ID) == 0x000008, "Member 'FPurchasedBattlePassInfo::ID' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnPointsPercentageCurveSequenceInstanceInfo
// 0x000C (0x0010 - 0x0004)
struct FFortSpawnPointsPercentageCurveSequenceInstanceInfo final : public FFortCurveSequenceInstanceInfo
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSpawnPointsPercentageCurveSequence* SpawnPointsPercentageCurveSequence;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo) == 0x000008, "Wrong alignment on FFortSpawnPointsPercentageCurveSequenceInstanceInfo");
static_assert(sizeof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo) == 0x000010, "Wrong size on FFortSpawnPointsPercentageCurveSequenceInstanceInfo");
static_assert(offsetof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo, SpawnPointsPercentageCurveSequence) == 0x000008, "Member 'FFortSpawnPointsPercentageCurveSequenceInstanceInfo::SpawnPointsPercentageCurveSequence' has a wrong offset!");

// ScriptStruct FortniteGame.MutatorContext
// 0x0018 (0x0018 - 0x0000)
struct FMutatorContext final
{
public:
	TArray<class AActor*>                         MutatorOwners;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMutatorContext) == 0x000008, "Wrong alignment on FMutatorContext");
static_assert(sizeof(FMutatorContext) == 0x000018, "Wrong size on FMutatorContext");
static_assert(offsetof(FMutatorContext, MutatorOwners) == 0x000000, "Member 'FMutatorContext::MutatorOwners' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSpawnPadPlacementData
// 0x0058 (0x0058 - 0x0000)
struct FFortPlayerSpawnPadPlacementData final
{
public:
	class UEnvQuery*                              PlacementQuery;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   ActorToPlace;                                      // 0x0008(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSnapToGrid;                                       // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAdjustPlacementForFloors;                         // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TagsToAddToChosenPlacementActor;                   // 0x0038(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortPlayerSpawnPadPlacementData) == 0x000008, "Wrong alignment on FFortPlayerSpawnPadPlacementData");
static_assert(sizeof(FFortPlayerSpawnPadPlacementData) == 0x000058, "Wrong size on FFortPlayerSpawnPadPlacementData");
static_assert(offsetof(FFortPlayerSpawnPadPlacementData, PlacementQuery) == 0x000000, "Member 'FFortPlayerSpawnPadPlacementData::PlacementQuery' has a wrong offset!");
static_assert(offsetof(FFortPlayerSpawnPadPlacementData, ActorToPlace) == 0x000008, "Member 'FFortPlayerSpawnPadPlacementData::ActorToPlace' has a wrong offset!");
static_assert(offsetof(FFortPlayerSpawnPadPlacementData, bSnapToGrid) == 0x000030, "Member 'FFortPlayerSpawnPadPlacementData::bSnapToGrid' has a wrong offset!");
static_assert(offsetof(FFortPlayerSpawnPadPlacementData, bAdjustPlacementForFloors) == 0x000031, "Member 'FFortPlayerSpawnPadPlacementData::bAdjustPlacementForFloors' has a wrong offset!");
static_assert(offsetof(FFortPlayerSpawnPadPlacementData, TagsToAddToChosenPlacementActor) == 0x000038, "Member 'FFortPlayerSpawnPadPlacementData::TagsToAddToChosenPlacementActor' has a wrong offset!");

// ScriptStruct FortniteGame.FortIntensityCurve
// 0x0038 (0x0040 - 0x0008)
struct FFortIntensityCurve final : public FTableRowBase
{
public:
	class UCurveTable*                            IntensityCurveTable;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   IntensityCurveTableRow;                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LowPlayerPerformancePeakIntensityThreshold;        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NormalPlayerPerformancePeakIntensityThreshold;     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HighPlayerPerformancePeakIntensityThreshold;       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRampTime;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeEndIntensityThreshold;                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartIntensityOffsetFloor;                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndIntensityOffsetFloor;                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartIntensityOffsetCeiling;                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndIntensityOffsetCeiling;                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortIntensityCurve) == 0x000008, "Wrong alignment on FFortIntensityCurve");
static_assert(sizeof(FFortIntensityCurve) == 0x000040, "Wrong size on FFortIntensityCurve");
static_assert(offsetof(FFortIntensityCurve, IntensityCurveTable) == 0x000008, "Member 'FFortIntensityCurve::IntensityCurveTable' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, IntensityCurveTableRow) == 0x000010, "Member 'FFortIntensityCurve::IntensityCurveTableRow' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, LowPlayerPerformancePeakIntensityThreshold) == 0x000018, "Member 'FFortIntensityCurve::LowPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, NormalPlayerPerformancePeakIntensityThreshold) == 0x00001C, "Member 'FFortIntensityCurve::NormalPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, HighPlayerPerformancePeakIntensityThreshold) == 0x000020, "Member 'FFortIntensityCurve::HighPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, MaxRampTime) == 0x000024, "Member 'FFortIntensityCurve::MaxRampTime' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, FadeEndIntensityThreshold) == 0x000028, "Member 'FFortIntensityCurve::FadeEndIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, StartIntensityOffsetFloor) == 0x00002C, "Member 'FFortIntensityCurve::StartIntensityOffsetFloor' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, EndIntensityOffsetFloor) == 0x000030, "Member 'FFortIntensityCurve::EndIntensityOffsetFloor' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, StartIntensityOffsetCeiling) == 0x000034, "Member 'FFortIntensityCurve::StartIntensityOffsetCeiling' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, EndIntensityOffsetCeiling) == 0x000038, "Member 'FFortIntensityCurve::EndIntensityOffsetCeiling' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnPointsPercentageCurve
// 0x0018 (0x0020 - 0x0008)
struct FFortSpawnPointsPercentageCurve final : public FTableRowBase
{
public:
	class UCurveTable*                            SpawnPointsPercentageCurveTable;                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SpawnPointsPercentageCurveTableRow;                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRampTime;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpawnPointsPercentageCurve) == 0x000008, "Wrong alignment on FFortSpawnPointsPercentageCurve");
static_assert(sizeof(FFortSpawnPointsPercentageCurve) == 0x000020, "Wrong size on FFortSpawnPointsPercentageCurve");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, SpawnPointsPercentageCurveTable) == 0x000008, "Member 'FFortSpawnPointsPercentageCurve::SpawnPointsPercentageCurveTable' has a wrong offset!");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, SpawnPointsPercentageCurveTableRow) == 0x000010, "Member 'FFortSpawnPointsPercentageCurve::SpawnPointsPercentageCurveTableRow' has a wrong offset!");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, MaxRampTime) == 0x000018, "Member 'FFortSpawnPointsPercentageCurve::MaxRampTime' has a wrong offset!");

// ScriptStruct FortniteGame.AIEncounterSpawnGroupWeights
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FAIEncounterSpawnGroupWeights final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIEncounterSpawnGroupWeights) == 0x000008, "Wrong alignment on FAIEncounterSpawnGroupWeights");
static_assert(sizeof(FAIEncounterSpawnGroupWeights) == 0x000018, "Wrong size on FAIEncounterSpawnGroupWeights");

// ScriptStruct FortniteGame.FortMissionPlacementFoundationItem
// 0x0078 (0x0078 - 0x0000)
struct FFortMissionPlacementFoundationItem final
{
public:
	struct FGameplayTagContainer                  ItemIdentifyingTags;                               // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToAddToChosenPlacementActorOrFoundationActor;  // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UEnvQuery*                              PlacementQuery;                                    // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   BuildingFoundationToPlace;                         // 0x0048(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumLocationsToFind;                                // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAdjustFoundationPlacementForFloors;               // 0x0074(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionPlacementFoundationItem) == 0x000008, "Wrong alignment on FFortMissionPlacementFoundationItem");
static_assert(sizeof(FFortMissionPlacementFoundationItem) == 0x000078, "Wrong size on FFortMissionPlacementFoundationItem");
static_assert(offsetof(FFortMissionPlacementFoundationItem, ItemIdentifyingTags) == 0x000000, "Member 'FFortMissionPlacementFoundationItem::ItemIdentifyingTags' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementFoundationItem, TagsToAddToChosenPlacementActorOrFoundationActor) == 0x000020, "Member 'FFortMissionPlacementFoundationItem::TagsToAddToChosenPlacementActorOrFoundationActor' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementFoundationItem, PlacementQuery) == 0x000040, "Member 'FFortMissionPlacementFoundationItem::PlacementQuery' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementFoundationItem, BuildingFoundationToPlace) == 0x000048, "Member 'FFortMissionPlacementFoundationItem::BuildingFoundationToPlace' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementFoundationItem, NumLocationsToFind) == 0x000070, "Member 'FFortMissionPlacementFoundationItem::NumLocationsToFind' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementFoundationItem, bAdjustFoundationPlacementForFloors) == 0x000074, "Member 'FFortMissionPlacementFoundationItem::bAdjustFoundationPlacementForFloors' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPlacementItems
// 0x0040 (0x0040 - 0x0000)
struct FFortMissionPlacementItems final
{
public:
	struct FGameplayTagContainer                  TagsToAddToChosenPlacementActors;                  // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionPlacementFoundationItem> AdditionalWorldFoundations;                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionPlacementActorItem> ActorsAndLocations;                                // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionPlacementItems) == 0x000008, "Wrong alignment on FFortMissionPlacementItems");
static_assert(sizeof(FFortMissionPlacementItems) == 0x000040, "Wrong size on FFortMissionPlacementItems");
static_assert(offsetof(FFortMissionPlacementItems, TagsToAddToChosenPlacementActors) == 0x000000, "Member 'FFortMissionPlacementItems::TagsToAddToChosenPlacementActors' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItems, AdditionalWorldFoundations) == 0x000020, "Member 'FFortMissionPlacementItems::AdditionalWorldFoundations' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItems, ActorsAndLocations) == 0x000030, "Member 'FFortMissionPlacementItems::ActorsAndLocations' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterRiftManagerInitializationData
// 0x0100 (0x0100 - 0x0000)
struct FFortAIEncounterRiftManagerInitializationData final
{
public:
	class UFortAIEncounterInfo*                   EncounterInfo;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x0008(0x0090)(NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         CurrentEnvironmentQueryInfo;                       // 0x0098(0x0028)(NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         FallbackEnvironmentQueryInfo;                      // 0x00C0(0x0028)(NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingRift>              RiftClassTemplate;                                 // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRiftsToUse;                                     // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinRiftsToUse;                                     // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateIntervalTimeSeconds;                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterRiftManagerInitializationData) == 0x000008, "Wrong alignment on FFortAIEncounterRiftManagerInitializationData");
static_assert(sizeof(FFortAIEncounterRiftManagerInitializationData) == 0x000100, "Wrong size on FFortAIEncounterRiftManagerInitializationData");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, EncounterInfo) == 0x000000, "Member 'FFortAIEncounterRiftManagerInitializationData::EncounterInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, EncounterSettings) == 0x000008, "Member 'FFortAIEncounterRiftManagerInitializationData::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, CurrentEnvironmentQueryInfo) == 0x000098, "Member 'FFortAIEncounterRiftManagerInitializationData::CurrentEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, FallbackEnvironmentQueryInfo) == 0x0000C0, "Member 'FFortAIEncounterRiftManagerInitializationData::FallbackEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, RiftClassTemplate) == 0x0000E8, "Member 'FFortAIEncounterRiftManagerInitializationData::RiftClassTemplate' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, NumRiftsToUse) == 0x0000F0, "Member 'FFortAIEncounterRiftManagerInitializationData::NumRiftsToUse' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, MinRiftsToUse) == 0x0000F4, "Member 'FFortAIEncounterRiftManagerInitializationData::MinRiftsToUse' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, UpdateIntervalTimeSeconds) == 0x0000F8, "Member 'FFortAIEncounterRiftManagerInitializationData::UpdateIntervalTimeSeconds' has a wrong offset!");

// ScriptStruct FortniteGame.HeistExitCraftData
// 0x0030 (0x0030 - 0x0000)
struct FHeistExitCraftData final
{
public:
	class AFortAthenaExitCraftSpawner*            ExitCraftSpawner;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAthenaExitCraft*                   SpawnedExitCraft;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeistExitCraftState                          ExitCraftState;                                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerPawnAthena*>          DepartedPawns;                                     // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SpawnTime;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsed;                                           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDeparted;                                      // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeistExitCraftData) == 0x000008, "Wrong alignment on FHeistExitCraftData");
static_assert(sizeof(FHeistExitCraftData) == 0x000030, "Wrong size on FHeistExitCraftData");
static_assert(offsetof(FHeistExitCraftData, ExitCraftSpawner) == 0x000000, "Member 'FHeistExitCraftData::ExitCraftSpawner' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftData, SpawnedExitCraft) == 0x000008, "Member 'FHeistExitCraftData::SpawnedExitCraft' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftData, ExitCraftState) == 0x000010, "Member 'FHeistExitCraftData::ExitCraftState' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftData, DepartedPawns) == 0x000018, "Member 'FHeistExitCraftData::DepartedPawns' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftData, SpawnTime) == 0x000028, "Member 'FHeistExitCraftData::SpawnTime' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftData, bIsUsed) == 0x00002C, "Member 'FHeistExitCraftData::bIsUsed' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftData, bHasDeparted) == 0x00002D, "Member 'FHeistExitCraftData::bHasDeparted' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnArea
// 0x0048 (0x0048 - 0x0000)
struct FFortAIEncounterSpawnArea final
{
public:
	TArray<struct FEncounterEnvironmentQueryInstance> QueryInstances;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterRift>           PendingRifts;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterRift>           Rifts;                                             // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortPathCostEstimator*>         PathEstimators;                                    // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingFallbackQuery;                               // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterSpawnLocationManagementMode     SpawnLocationManagementMode;                       // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterSpawnArea) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnArea");
static_assert(sizeof(FFortAIEncounterSpawnArea) == 0x000048, "Wrong size on FFortAIEncounterSpawnArea");
static_assert(offsetof(FFortAIEncounterSpawnArea, QueryInstances) == 0x000000, "Member 'FFortAIEncounterSpawnArea::QueryInstances' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, PendingRifts) == 0x000010, "Member 'FFortAIEncounterSpawnArea::PendingRifts' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, Rifts) == 0x000020, "Member 'FFortAIEncounterSpawnArea::Rifts' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, PathEstimators) == 0x000030, "Member 'FFortAIEncounterSpawnArea::PathEstimators' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, bIsActive) == 0x000040, "Member 'FFortAIEncounterSpawnArea::bIsActive' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, bUsingFallbackQuery) == 0x000041, "Member 'FFortAIEncounterSpawnArea::bUsingFallbackQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, SpawnLocationManagementMode) == 0x000042, "Member 'FFortAIEncounterSpawnArea::SpawnLocationManagementMode' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncryptionKey
// 0x0030 (0x0030 - 0x0000)
struct FFortEncryptionKey final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Bytes;                                             // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EFortEncryptionStatus                         Status;                                            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortEncryptionKey) == 0x000008, "Wrong alignment on FFortEncryptionKey");
static_assert(sizeof(FFortEncryptionKey) == 0x000030, "Wrong size on FFortEncryptionKey");
static_assert(offsetof(FFortEncryptionKey, Name) == 0x000000, "Member 'FFortEncryptionKey::Name' has a wrong offset!");
static_assert(offsetof(FFortEncryptionKey, Guid) == 0x000008, "Member 'FFortEncryptionKey::Guid' has a wrong offset!");
static_assert(offsetof(FFortEncryptionKey, Bytes) == 0x000018, "Member 'FFortEncryptionKey::Bytes' has a wrong offset!");
static_assert(offsetof(FFortEncryptionKey, Status) == 0x000028, "Member 'FFortEncryptionKey::Status' has a wrong offset!");

// ScriptStruct FortniteGame.FortTierProgressionInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortTierProgressionInfo final
{
public:
	class FString                                 ProgressionLayoutGuid;                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighestDefeatedTier;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTierProgressionInfo) == 0x000008, "Wrong alignment on FFortTierProgressionInfo");
static_assert(sizeof(FFortTierProgressionInfo) == 0x000018, "Wrong size on FFortTierProgressionInfo");
static_assert(offsetof(FFortTierProgressionInfo, ProgressionLayoutGuid) == 0x000000, "Member 'FFortTierProgressionInfo::ProgressionLayoutGuid' has a wrong offset!");
static_assert(offsetof(FFortTierProgressionInfo, HighestDefeatedTier) == 0x000010, "Member 'FFortTierProgressionInfo::HighestDefeatedTier' has a wrong offset!");

// ScriptStruct FortniteGame.FortTierProgression
// 0x0010 (0x0010 - 0x0000)
struct FFortTierProgression final
{
public:
	TArray<struct FFortTierProgressionInfo>       ProgressionInfo;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTierProgression) == 0x000008, "Wrong alignment on FFortTierProgression");
static_assert(sizeof(FFortTierProgression) == 0x000010, "Wrong size on FFortTierProgression");
static_assert(offsetof(FFortTierProgression, ProgressionInfo) == 0x000000, "Member 'FFortTierProgression::ProgressionInfo' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIGoal
// 0x0010 (0x0028 - 0x0018)
struct FFortAIGoal final : public FFortAIGoalInfo
{
public:
	TArray<class AFortAIController*>              ControllersAssignedToGoal;                         // 0x0018(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIGoal) == 0x000008, "Wrong alignment on FFortAIGoal");
static_assert(sizeof(FFortAIGoal) == 0x000028, "Wrong size on FFortAIGoal");
static_assert(offsetof(FFortAIGoal, ControllersAssignedToGoal) == 0x000018, "Member 'FFortAIGoal::ControllersAssignedToGoal' has a wrong offset!");

// ScriptStruct FortniteGame.AIAssignmentInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FAIAssignmentInfo final
{
public:
	TWeakObjectPtr<class UFortAIAssignment>       CurrentAssignment;                                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortAIGoalInfo                        CurrentGoal;                                       // 0x0008(0x0018)(NoDestructor, NativeAccessSpecifierPrivate)
	float                                         TimeCurrentGoalWasChosen;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeExitedLastAssignmentOfType[0x4];               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFortAIAssignment>       PreviousAssignment;                                // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortAIGoalInfo                        PreviousGoal;                                      // 0x003C(0x0018)(NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bWaitingForQueryResponse;                          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSuppressGoalUpdates;                              // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bReportEnemyGoalSelection;                         // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_57[0x29];                                      // 0x0057(0x0029)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIAssignmentInfo) == 0x000008, "Wrong alignment on FAIAssignmentInfo");
static_assert(sizeof(FAIAssignmentInfo) == 0x000080, "Wrong size on FAIAssignmentInfo");
static_assert(offsetof(FAIAssignmentInfo, CurrentAssignment) == 0x000000, "Member 'FAIAssignmentInfo::CurrentAssignment' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, CurrentGoal) == 0x000008, "Member 'FAIAssignmentInfo::CurrentGoal' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, TimeCurrentGoalWasChosen) == 0x000020, "Member 'FAIAssignmentInfo::TimeCurrentGoalWasChosen' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, TimeExitedLastAssignmentOfType) == 0x000024, "Member 'FAIAssignmentInfo::TimeExitedLastAssignmentOfType' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, PreviousAssignment) == 0x000034, "Member 'FAIAssignmentInfo::PreviousAssignment' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, PreviousGoal) == 0x00003C, "Member 'FAIAssignmentInfo::PreviousGoal' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, bWaitingForQueryResponse) == 0x000054, "Member 'FAIAssignmentInfo::bWaitingForQueryResponse' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, bSuppressGoalUpdates) == 0x000055, "Member 'FAIAssignmentInfo::bSuppressGoalUpdates' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, bReportEnemyGoalSelection) == 0x000056, "Member 'FAIAssignmentInfo::bReportEnemyGoalSelection' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootTierData
// 0x00D8 (0x00E0 - 0x0008)
struct FFortLootTierData final : public FTableRowBase
{
public:
	class FName                                   TierGroup;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELootQuotaLevel                               QuotaLevel;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootTier;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinWorldLevel;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWorldLevel;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StreakBreakerCurrency;                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreakBreakerPointsMin;                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreakBreakerPointsMax;                            // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreakBreakerPointsSpend;                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootPackage;                                       // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootPreviewPackage;                                // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumLootPackageDrops;                               // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 LootPackageCategoryWeightArray;                    // 0x0058(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LootPackageCategoryMinArray;                       // 0x0068(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LootPackageCategoryMaxArray;                       // 0x0078(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0088(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x00A8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bAllowBonusLootDrops;                              // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Annotation;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootTierData) == 0x000008, "Wrong alignment on FFortLootTierData");
static_assert(sizeof(FFortLootTierData) == 0x0000E0, "Wrong size on FFortLootTierData");
static_assert(offsetof(FFortLootTierData, TierGroup) == 0x000008, "Member 'FFortLootTierData::TierGroup' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, Weight) == 0x000010, "Member 'FFortLootTierData::Weight' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, QuotaLevel) == 0x000014, "Member 'FFortLootTierData::QuotaLevel' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootTier) == 0x000018, "Member 'FFortLootTierData::LootTier' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, MinWorldLevel) == 0x00001C, "Member 'FFortLootTierData::MinWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, MaxWorldLevel) == 0x000020, "Member 'FFortLootTierData::MaxWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerCurrency) == 0x000028, "Member 'FFortLootTierData::StreakBreakerCurrency' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerPointsMin) == 0x000038, "Member 'FFortLootTierData::StreakBreakerPointsMin' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerPointsMax) == 0x00003C, "Member 'FFortLootTierData::StreakBreakerPointsMax' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerPointsSpend) == 0x000040, "Member 'FFortLootTierData::StreakBreakerPointsSpend' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackage) == 0x000044, "Member 'FFortLootTierData::LootPackage' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPreviewPackage) == 0x00004C, "Member 'FFortLootTierData::LootPreviewPackage' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, NumLootPackageDrops) == 0x000054, "Member 'FFortLootTierData::NumLootPackageDrops' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackageCategoryWeightArray) == 0x000058, "Member 'FFortLootTierData::LootPackageCategoryWeightArray' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackageCategoryMinArray) == 0x000068, "Member 'FFortLootTierData::LootPackageCategoryMinArray' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackageCategoryMaxArray) == 0x000078, "Member 'FFortLootTierData::LootPackageCategoryMaxArray' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, GameplayTags) == 0x000088, "Member 'FFortLootTierData::GameplayTags' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, RequiredGameplayTags) == 0x0000A8, "Member 'FFortLootTierData::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, bAllowBonusLootDrops) == 0x0000C8, "Member 'FFortLootTierData::bAllowBonusLootDrops' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, Annotation) == 0x0000D0, "Member 'FFortLootTierData::Annotation' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarAndSlot
// 0x0008 (0x0008 - 0x0000)
struct FQuickBarAndSlot final
{
public:
	EFortQuickBars                                QuickBarType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuickBarSlot;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuickBarAndSlot) == 0x000004, "Wrong alignment on FQuickBarAndSlot");
static_assert(sizeof(FQuickBarAndSlot) == 0x000008, "Wrong size on FQuickBarAndSlot");
static_assert(offsetof(FQuickBarAndSlot, QuickBarType) == 0x000000, "Member 'FQuickBarAndSlot::QuickBarType' has a wrong offset!");
static_assert(offsetof(FQuickBarAndSlot, QuickBarSlot) == 0x000004, "Member 'FQuickBarAndSlot::QuickBarSlot' has a wrong offset!");

// ScriptStruct FortniteGame.FortZiplineSessionTelemetryInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortZiplineSessionTelemetryInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortZiplineSessionTelemetryInfo) == 0x000008, "Wrong alignment on FFortZiplineSessionTelemetryInfo");
static_assert(sizeof(FFortZiplineSessionTelemetryInfo) == 0x000010, "Wrong size on FFortZiplineSessionTelemetryInfo");

// ScriptStruct FortniteGame.FortBadgeCountArray
// 0x0010 (0x0118 - 0x0108)
struct FFortBadgeCountArray final : public FFastArraySerializer
{
public:
	TArray<struct FFortBadgeCount>                Badges;                                            // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortBadgeCountArray) == 0x000008, "Wrong alignment on FFortBadgeCountArray");
static_assert(sizeof(FFortBadgeCountArray) == 0x000118, "Wrong size on FFortBadgeCountArray");
static_assert(offsetof(FFortBadgeCountArray, Badges) == 0x000108, "Member 'FFortBadgeCountArray::Badges' has a wrong offset!");

// ScriptStruct FortniteGame.EncounterGoalSelectionTableEntry
// 0x0028 (0x0028 - 0x0000)
struct FEncounterGoalSelectionTableEntry final
{
public:
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGoalSelectionCriteria                 GoalSelectionCriteria;                             // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGoalSelectionTableEntry) == 0x000008, "Wrong alignment on FEncounterGoalSelectionTableEntry");
static_assert(sizeof(FEncounterGoalSelectionTableEntry) == 0x000028, "Wrong size on FEncounterGoalSelectionTableEntry");
static_assert(offsetof(FEncounterGoalSelectionTableEntry, RequiredGameplayTags) == 0x000000, "Member 'FEncounterGoalSelectionTableEntry::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FEncounterGoalSelectionTableEntry, GoalSelectionCriteria) == 0x000020, "Member 'FEncounterGoalSelectionTableEntry::GoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteGame.FortAimAssist2D_OwnerInfo
// 0x0170 (0x0170 - 0x0000)
struct alignas(0x10) FFortAimAssist2D_OwnerInfo final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerInput*                       FortPI;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        FortPawn;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x158];                                     // 0x0018(0x0158)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAimAssist2D_OwnerInfo) == 0x000010, "Wrong alignment on FFortAimAssist2D_OwnerInfo");
static_assert(sizeof(FFortAimAssist2D_OwnerInfo) == 0x000170, "Wrong size on FFortAimAssist2D_OwnerInfo");
static_assert(offsetof(FFortAimAssist2D_OwnerInfo, FortPC) == 0x000000, "Member 'FFortAimAssist2D_OwnerInfo::FortPC' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_OwnerInfo, FortPI) == 0x000008, "Member 'FFortAimAssist2D_OwnerInfo::FortPI' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D_OwnerInfo, FortPawn) == 0x000010, "Member 'FFortAimAssist2D_OwnerInfo::FortPawn' has a wrong offset!");

// ScriptStruct FortniteGame.FortAimAssist2D_Target
// 0x0048 (0x0048 - 0x0000)
struct FFortAimAssist2D_Target final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x40];                                       // 0x0008(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAimAssist2D_Target) == 0x000008, "Wrong alignment on FFortAimAssist2D_Target");
static_assert(sizeof(FFortAimAssist2D_Target) == 0x000048, "Wrong size on FFortAimAssist2D_Target");
static_assert(offsetof(FFortAimAssist2D_Target, Actor) == 0x000000, "Member 'FFortAimAssist2D_Target::Actor' has a wrong offset!");

// ScriptStruct FortniteGame.FortAimAssist2D
// 0x0220 (0x0220 - 0x0000)
struct FFortAimAssist2D final
{
public:
	struct FFortAimAssist2D_InputParams           InputParams;                                       // 0x0000(0x0038)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAimAssist2D_OwnerInfo             OwnerInfo;                                         // 0x0040(0x0170)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortAimAssist2D_Target>        TargetCache0;                                      // 0x01B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortAimAssist2D_Target>        TargetCache1;                                      // 0x01C0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D0[0x50];                                     // 0x01D0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAimAssist2D) == 0x000010, "Wrong alignment on FFortAimAssist2D");
static_assert(sizeof(FFortAimAssist2D) == 0x000220, "Wrong size on FFortAimAssist2D");
static_assert(offsetof(FFortAimAssist2D, InputParams) == 0x000000, "Member 'FFortAimAssist2D::InputParams' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D, OwnerInfo) == 0x000040, "Member 'FFortAimAssist2D::OwnerInfo' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D, TargetCache0) == 0x0001B0, "Member 'FFortAimAssist2D::TargetCache0' has a wrong offset!");
static_assert(offsetof(FFortAimAssist2D, TargetCache1) == 0x0001C0, "Member 'FFortAimAssist2D::TargetCache1' has a wrong offset!");

// ScriptStruct FortniteGame.RemoteViewRotSnapshot
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FRemoteViewRotSnapshot final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRemoteViewRotSnapshot) == 0x000004, "Wrong alignment on FRemoteViewRotSnapshot");
static_assert(sizeof(FRemoteViewRotSnapshot) == 0x000010, "Wrong size on FRemoteViewRotSnapshot");

// ScriptStruct FortniteGame.ServerLaunchInfo
// 0x0010 (0x0010 - 0x0000)
struct FServerLaunchInfo final
{
public:
	float                                         LaunchServerTime;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  LaunchedPawn;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLaunchInfo) == 0x000008, "Wrong alignment on FServerLaunchInfo");
static_assert(sizeof(FServerLaunchInfo) == 0x000010, "Wrong size on FServerLaunchInfo");
static_assert(offsetof(FServerLaunchInfo, LaunchServerTime) == 0x000000, "Member 'FServerLaunchInfo::LaunchServerTime' has a wrong offset!");
static_assert(offsetof(FServerLaunchInfo, LaunchedPawn) == 0x000008, "Member 'FServerLaunchInfo::LaunchedPawn' has a wrong offset!");

// ScriptStruct FortniteGame.FortAISharedRepMovement
// 0x0044 (0x0044 - 0x0000)
struct FFortAISharedRepMovement final
{
public:
	struct FRepMovement                           RepMovement;                                       // 0x0000(0x0034)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RepTimeStamp;                                      // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepMovementMode;                                   // 0x0038(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAILODLevel                               RepCurrentFortAILODLevel;                          // 0x0039(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityRepSharedAnim_Index    RepSharedAnimInfo;                                 // 0x003C(0x0008)(Transient, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAISharedRepMovement) == 0x000004, "Wrong alignment on FFortAISharedRepMovement");
static_assert(sizeof(FFortAISharedRepMovement) == 0x000044, "Wrong size on FFortAISharedRepMovement");
static_assert(offsetof(FFortAISharedRepMovement, RepMovement) == 0x000000, "Member 'FFortAISharedRepMovement::RepMovement' has a wrong offset!");
static_assert(offsetof(FFortAISharedRepMovement, RepTimeStamp) == 0x000034, "Member 'FFortAISharedRepMovement::RepTimeStamp' has a wrong offset!");
static_assert(offsetof(FFortAISharedRepMovement, RepMovementMode) == 0x000038, "Member 'FFortAISharedRepMovement::RepMovementMode' has a wrong offset!");
static_assert(offsetof(FFortAISharedRepMovement, RepCurrentFortAILODLevel) == 0x000039, "Member 'FFortAISharedRepMovement::RepCurrentFortAILODLevel' has a wrong offset!");
static_assert(offsetof(FFortAISharedRepMovement, RepSharedAnimInfo) == 0x00003C, "Member 'FFortAISharedRepMovement::RepSharedAnimInfo' has a wrong offset!");

// ScriptStruct FortniteGame.MemoryBudget
// 0x0010 (0x0010 - 0x0000)
struct FMemoryBudget final
{
public:
	int32                                         TotalMemory;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InUseMemory;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMemoryBudget) == 0x000004, "Wrong alignment on FMemoryBudget");
static_assert(sizeof(FMemoryBudget) == 0x000010, "Wrong size on FMemoryBudget");
static_assert(offsetof(FMemoryBudget, TotalMemory) == 0x000000, "Member 'FMemoryBudget::TotalMemory' has a wrong offset!");
static_assert(offsetof(FMemoryBudget, InUseMemory) == 0x000004, "Member 'FMemoryBudget::InUseMemory' has a wrong offset!");

// ScriptStruct FortniteGame.FortCreativeClassInstanceTracker
// 0x0070 (0x0070 - 0x0000)
struct FFortCreativeClassInstanceTracker final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ChildClassesAtLimit;                               // 0x0050(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UClass*>                         ParentClassesAtLimit;                              // 0x0060(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortCreativeClassInstanceTracker) == 0x000008, "Wrong alignment on FFortCreativeClassInstanceTracker");
static_assert(sizeof(FFortCreativeClassInstanceTracker) == 0x000070, "Wrong size on FFortCreativeClassInstanceTracker");
static_assert(offsetof(FFortCreativeClassInstanceTracker, ChildClassesAtLimit) == 0x000050, "Member 'FFortCreativeClassInstanceTracker::ChildClassesAtLimit' has a wrong offset!");
static_assert(offsetof(FFortCreativeClassInstanceTracker, ParentClassesAtLimit) == 0x000060, "Member 'FFortCreativeClassInstanceTracker::ParentClassesAtLimit' has a wrong offset!");

// ScriptStruct FortniteGame.FortCreativeBudgetTracker
// 0x00F0 (0x00F0 - 0x0000)
struct FFortCreativeBudgetTracker final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMemoryBudget                          GlobalBudget;                                      // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_20[0x50];                                      // 0x0020(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           AssetInstances;                                    // 0x0070(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FFortCreativeClassInstanceTracker      ClassTracker;                                      // 0x0080(0x0070)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortCreativeBudgetTracker) == 0x000008, "Wrong alignment on FFortCreativeBudgetTracker");
static_assert(sizeof(FFortCreativeBudgetTracker) == 0x0000F0, "Wrong size on FFortCreativeBudgetTracker");
static_assert(offsetof(FFortCreativeBudgetTracker, GlobalBudget) == 0x000010, "Member 'FFortCreativeBudgetTracker::GlobalBudget' has a wrong offset!");
static_assert(offsetof(FFortCreativeBudgetTracker, AssetInstances) == 0x000070, "Member 'FFortCreativeBudgetTracker::AssetInstances' has a wrong offset!");
static_assert(offsetof(FFortCreativeBudgetTracker, ClassTracker) == 0x000080, "Member 'FFortCreativeBudgetTracker::ClassTracker' has a wrong offset!");

// ScriptStruct FortniteGame.DamagerInfoAnalytics
// 0x0018 (0x0018 - 0x0000)
struct FDamagerInfoAnalytics final
{
public:
	class FString                                 DamageCauser;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageAmount;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamagerInfoAnalytics) == 0x000008, "Wrong alignment on FDamagerInfoAnalytics");
static_assert(sizeof(FDamagerInfoAnalytics) == 0x000018, "Wrong size on FDamagerInfoAnalytics");
static_assert(offsetof(FDamagerInfoAnalytics, DamageCauser) == 0x000000, "Member 'FDamagerInfoAnalytics::DamageCauser' has a wrong offset!");
static_assert(offsetof(FDamagerInfoAnalytics, DamageAmount) == 0x000010, "Member 'FDamagerInfoAnalytics::DamageAmount' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIAppearanceOverrideEntry
// 0x0060 (0x0060 - 0x0000)
struct FFortAIAppearanceOverrideEntry final
{
public:
	class FName                                   AppearanceName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFemale;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UFortFeedbackBank>       FeedbackBank;                                      // 0x0038(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAIAppearanceOverrideEntry) == 0x000008, "Wrong alignment on FFortAIAppearanceOverrideEntry");
static_assert(sizeof(FFortAIAppearanceOverrideEntry) == 0x000060, "Wrong size on FFortAIAppearanceOverrideEntry");
static_assert(offsetof(FFortAIAppearanceOverrideEntry, AppearanceName) == 0x000000, "Member 'FFortAIAppearanceOverrideEntry::AppearanceName' has a wrong offset!");
static_assert(offsetof(FFortAIAppearanceOverrideEntry, bIsFemale) == 0x000008, "Member 'FFortAIAppearanceOverrideEntry::bIsFemale' has a wrong offset!");
static_assert(offsetof(FFortAIAppearanceOverrideEntry, SkeletalMesh) == 0x000010, "Member 'FFortAIAppearanceOverrideEntry::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FFortAIAppearanceOverrideEntry, FeedbackBank) == 0x000038, "Member 'FFortAIAppearanceOverrideEntry::FeedbackBank' has a wrong offset!");

// ScriptStruct FortniteGame.MoveToolSettings
// 0x0002 (0x0002 - 0x0000)
struct FMoveToolSettings final
{
public:
	bool                                          bAllowGravityOnPlace;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsScalingInsteadOfRotating;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoveToolSettings) == 0x000001, "Wrong alignment on FMoveToolSettings");
static_assert(sizeof(FMoveToolSettings) == 0x000002, "Wrong size on FMoveToolSettings");
static_assert(offsetof(FMoveToolSettings, bAllowGravityOnPlace) == 0x000000, "Member 'FMoveToolSettings::bAllowGravityOnPlace' has a wrong offset!");
static_assert(offsetof(FMoveToolSettings, bIsScalingInsteadOfRotating) == 0x000001, "Member 'FMoveToolSettings::bIsScalingInsteadOfRotating' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnGroupEncounterTypeData
// 0x0040 (0x0040 - 0x0000)
struct FFortSpawnGroupEncounterTypeData final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxGroupCategoryPopulationDensityCurve;            // 0x0020(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   RespawnDelayCurve;                                 // 0x0030(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpawnGroupEncounterTypeData) == 0x000008, "Wrong alignment on FFortSpawnGroupEncounterTypeData");
static_assert(sizeof(FFortSpawnGroupEncounterTypeData) == 0x000040, "Wrong size on FFortSpawnGroupEncounterTypeData");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, EncounterTypeTags) == 0x000000, "Member 'FFortSpawnGroupEncounterTypeData::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, MaxGroupCategoryPopulationDensityCurve) == 0x000020, "Member 'FFortSpawnGroupEncounterTypeData::MaxGroupCategoryPopulationDensityCurve' has a wrong offset!");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, RespawnDelayCurve) == 0x000030, "Member 'FFortSpawnGroupEncounterTypeData::RespawnDelayCurve' has a wrong offset!");

// ScriptStruct FortniteGame.ControlPointSpawnData
// 0x0148 (0x01C8 - 0x0080)
struct FControlPointSpawnData final : public FFortPieSliceSpawnData
{
public:
	struct FScalableFloat                         SpawnDelayTime;                                    // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SafeZonePhaseWhenToSpawn;                          // 0x00A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SafeZonePhaseWhereToSpawn;                         // 0x00C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         EnableDelayTime;                                   // 0x00E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         EnableInSafeZonePhase;                             // 0x0100(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DisableDelayTime;                                  // 0x0120(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DisableInSafeZonePhase;                            // 0x0140(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         PointsEarnedPerSecond;                             // 0x0160(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         BonusPointsEarnedPerSecond;                        // 0x0180(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         bIgnoreForOrderMessaging;                          // 0x01A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         IconMaterialIndex;                                 // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysInPlay;                                     // 0x01C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControlPointSpawnData) == 0x000008, "Wrong alignment on FControlPointSpawnData");
static_assert(sizeof(FControlPointSpawnData) == 0x0001C8, "Wrong size on FControlPointSpawnData");
static_assert(offsetof(FControlPointSpawnData, SpawnDelayTime) == 0x000080, "Member 'FControlPointSpawnData::SpawnDelayTime' has a wrong offset!");
static_assert(offsetof(FControlPointSpawnData, SafeZonePhaseWhenToSpawn) == 0x0000A0, "Member 'FControlPointSpawnData::SafeZonePhaseWhenToSpawn' has a wrong offset!");
static_assert(offsetof(FControlPointSpawnData, SafeZonePhaseWhereToSpawn) == 0x0000C0, "Member 'FControlPointSpawnData::SafeZonePhaseWhereToSpawn' has a wrong offset!");
static_assert(offsetof(FControlPointSpawnData, EnableDelayTime) == 0x0000E0, "Member 'FControlPointSpawnData::EnableDelayTime' has a wrong offset!");
static_assert(offsetof(FControlPointSpawnData, EnableInSafeZonePhase) == 0x000100, "Member 'FControlPointSpawnData::EnableInSafeZonePhase' has a wrong offset!");
static_assert(offsetof(FControlPointSpawnData, DisableDelayTime) == 0x000120, "Member 'FControlPointSpawnData::DisableDelayTime' has a wrong offset!");
static_assert(offsetof(FControlPointSpawnData, DisableInSafeZonePhase) == 0x000140, "Member 'FControlPointSpawnData::DisableInSafeZonePhase' has a wrong offset!");
static_assert(offsetof(FControlPointSpawnData, PointsEarnedPerSecond) == 0x000160, "Member 'FControlPointSpawnData::PointsEarnedPerSecond' has a wrong offset!");
static_assert(offsetof(FControlPointSpawnData, BonusPointsEarnedPerSecond) == 0x000180, "Member 'FControlPointSpawnData::BonusPointsEarnedPerSecond' has a wrong offset!");
static_assert(offsetof(FControlPointSpawnData, bIgnoreForOrderMessaging) == 0x0001A0, "Member 'FControlPointSpawnData::bIgnoreForOrderMessaging' has a wrong offset!");
static_assert(offsetof(FControlPointSpawnData, IconMaterialIndex) == 0x0001C0, "Member 'FControlPointSpawnData::IconMaterialIndex' has a wrong offset!");
static_assert(offsetof(FControlPointSpawnData, bAlwaysInPlay) == 0x0001C4, "Member 'FControlPointSpawnData::bAlwaysInPlay' has a wrong offset!");

// ScriptStruct FortniteGame.FortLinearSpline
// 0x0001 (0x0001 - 0x0000)
struct FFortLinearSpline final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLinearSpline) == 0x000001, "Wrong alignment on FFortLinearSpline");
static_assert(sizeof(FFortLinearSpline) == 0x000001, "Wrong size on FFortLinearSpline");

// ScriptStruct FortniteGame.FortBanHammerStrike
// 0x0060 (0x0060 - 0x0000)
struct FFortBanHammerStrike final
{
public:
	struct FUniqueNetIdRepl                       AccountId;                                         // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBanHammerNotificationAction              Action;                                            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Source;                                            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Offense;                                           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBanHammerStrike) == 0x000008, "Wrong alignment on FFortBanHammerStrike");
static_assert(sizeof(FFortBanHammerStrike) == 0x000060, "Wrong size on FFortBanHammerStrike");
static_assert(offsetof(FFortBanHammerStrike, AccountId) == 0x000000, "Member 'FFortBanHammerStrike::AccountId' has a wrong offset!");
static_assert(offsetof(FFortBanHammerStrike, Reason) == 0x000028, "Member 'FFortBanHammerStrike::Reason' has a wrong offset!");
static_assert(offsetof(FFortBanHammerStrike, Action) == 0x000038, "Member 'FFortBanHammerStrike::Action' has a wrong offset!");
static_assert(offsetof(FFortBanHammerStrike, Source) == 0x000040, "Member 'FFortBanHammerStrike::Source' has a wrong offset!");
static_assert(offsetof(FFortBanHammerStrike, Offense) == 0x000050, "Member 'FFortBanHammerStrike::Offense' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnGroupEnemy
// 0x0010 (0x0010 - 0x0000)
struct FSpawnGroupEnemy final
{
public:
	TSubclassOf<class UFortAIPawnVariant>         EnemyVariantClass;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideVariantSpawnPointValue;                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnValue;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupEnemy) == 0x000008, "Wrong alignment on FSpawnGroupEnemy");
static_assert(sizeof(FSpawnGroupEnemy) == 0x000010, "Wrong size on FSpawnGroupEnemy");
static_assert(offsetof(FSpawnGroupEnemy, EnemyVariantClass) == 0x000000, "Member 'FSpawnGroupEnemy::EnemyVariantClass' has a wrong offset!");
static_assert(offsetof(FSpawnGroupEnemy, bOverrideVariantSpawnPointValue) == 0x000008, "Member 'FSpawnGroupEnemy::bOverrideVariantSpawnPointValue' has a wrong offset!");
static_assert(offsetof(FSpawnGroupEnemy, SpawnValue) == 0x00000C, "Member 'FSpawnGroupEnemy::SpawnValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortNavLinkPattern
// 0x0008 (0x0008 - 0x0000)
struct FFortNavLinkPattern final
{
public:
	int32                                         PatternBits;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WildcardBits;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortNavLinkPattern) == 0x000004, "Wrong alignment on FFortNavLinkPattern");
static_assert(sizeof(FFortNavLinkPattern) == 0x000008, "Wrong size on FFortNavLinkPattern");
static_assert(offsetof(FFortNavLinkPattern, PatternBits) == 0x000000, "Member 'FFortNavLinkPattern::PatternBits' has a wrong offset!");
static_assert(offsetof(FFortNavLinkPattern, WildcardBits) == 0x000004, "Member 'FFortNavLinkPattern::WildcardBits' has a wrong offset!");

// ScriptStruct FortniteGame.FortChallengeBundleInfoLockedReason
// 0x0028 (0x0028 - 0x0000)
struct FFortChallengeBundleInfoLockedReason final
{
public:
	EFortChallengeBundleInfoLockedReasonCode      ReasonCode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredTier;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              UnlockTimespanAfterStart;                          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortChallengeBundleInfoLockedReason) == 0x000008, "Wrong alignment on FFortChallengeBundleInfoLockedReason");
static_assert(sizeof(FFortChallengeBundleInfoLockedReason) == 0x000028, "Wrong size on FFortChallengeBundleInfoLockedReason");
static_assert(offsetof(FFortChallengeBundleInfoLockedReason, ReasonCode) == 0x000000, "Member 'FFortChallengeBundleInfoLockedReason::ReasonCode' has a wrong offset!");
static_assert(offsetof(FFortChallengeBundleInfoLockedReason, EventName) == 0x000008, "Member 'FFortChallengeBundleInfoLockedReason::EventName' has a wrong offset!");
static_assert(offsetof(FFortChallengeBundleInfoLockedReason, RequiredTier) == 0x000018, "Member 'FFortChallengeBundleInfoLockedReason::RequiredTier' has a wrong offset!");
static_assert(offsetof(FFortChallengeBundleInfoLockedReason, UnlockTimespanAfterStart) == 0x000020, "Member 'FFortChallengeBundleInfoLockedReason::UnlockTimespanAfterStart' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameTeamScoreData
// 0x0004 (0x0008 - 0x0004)
struct FMinigameTeamScoreData final : public FMinigameScoreData
{
public:
	uint8                                         Team;                                              // 0x0004(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinigameTeamScoreData) == 0x000004, "Wrong alignment on FMinigameTeamScoreData");
static_assert(sizeof(FMinigameTeamScoreData) == 0x000008, "Wrong size on FMinigameTeamScoreData");
static_assert(offsetof(FMinigameTeamScoreData, Team) == 0x000004, "Member 'FMinigameTeamScoreData::Team' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIAssignmentIdentifier
// 0x0030 (0x0030 - 0x0000)
struct FFortAIAssignmentIdentifier final
{
public:
	EAssignmentType                               AssignmentType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AssignmentGameplayTags;                            // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EFortTeam                                     AssignmentTeam;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIAssignmentIdentifier) == 0x000008, "Wrong alignment on FFortAIAssignmentIdentifier");
static_assert(sizeof(FFortAIAssignmentIdentifier) == 0x000030, "Wrong size on FFortAIAssignmentIdentifier");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentType) == 0x000000, "Member 'FFortAIAssignmentIdentifier::AssignmentType' has a wrong offset!");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentGameplayTags) == 0x000008, "Member 'FFortAIAssignmentIdentifier::AssignmentGameplayTags' has a wrong offset!");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentTeam) == 0x000028, "Member 'FFortAIAssignmentIdentifier::AssignmentTeam' has a wrong offset!");

// ScriptStruct FortniteGame.LiveDamageNumberComponent
// 0x0018 (0x0018 - 0x0000)
struct FLiveDamageNumberComponent final
{
public:
	class UStaticMeshComponent*                   Component;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveDamageNumberComponent) == 0x000008, "Wrong alignment on FLiveDamageNumberComponent");
static_assert(sizeof(FLiveDamageNumberComponent) == 0x000018, "Wrong size on FLiveDamageNumberComponent");
static_assert(offsetof(FLiveDamageNumberComponent, Component) == 0x000000, "Member 'FLiveDamageNumberComponent::Component' has a wrong offset!");

// ScriptStruct FortniteGame.AlterationMapping
// 0x0020 (0x0028 - 0x0008)
struct FAlterationMapping final : public FTableRowBase
{
public:
	class FString                                 NewAlteration;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdditionalAlteration;                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlterationMapping) == 0x000008, "Wrong alignment on FAlterationMapping");
static_assert(sizeof(FAlterationMapping) == 0x000028, "Wrong size on FAlterationMapping");
static_assert(offsetof(FAlterationMapping, NewAlteration) == 0x000008, "Member 'FAlterationMapping::NewAlteration' has a wrong offset!");
static_assert(offsetof(FAlterationMapping, AdditionalAlteration) == 0x000018, "Member 'FAlterationMapping::AdditionalAlteration' has a wrong offset!");

// ScriptStruct FortniteGame.FortCosmeticModification
// 0x0558 (0x0558 - 0x0000)
struct FFortCosmeticModification final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      CosmeticMaterial;                                  // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         AmbientParticleSystem;                             // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         MuzzleParticleSystem;                              // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         ReloadParticleSystem;                              // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         BeamParticleSystem;                                // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         ImpactPhysicalSurfaceEffects[0x1A];                // 0x00C8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TracerTemplate;                                    // 0x04D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyColor;                                      // 0x0500(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_501[0x3];                                      // 0x0501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorAlteration;                                   // 0x0504(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorParameterName;                                // 0x0514(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyDecalColour;                                // 0x051C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51D[0x3];                                      // 0x051D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DecalColourAlterationStart;                        // 0x0520(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DecalColourAlterationEnd;                          // 0x0530(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyShellColour;                                // 0x0540(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_541[0x3];                                      // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ShellColourAlteration;                             // 0x0544(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_554[0x4];                                      // 0x0554(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCosmeticModification) == 0x000008, "Wrong alignment on FFortCosmeticModification");
static_assert(sizeof(FFortCosmeticModification) == 0x000558, "Wrong size on FFortCosmeticModification");
static_assert(offsetof(FFortCosmeticModification, CosmeticMaterial) == 0x000000, "Member 'FFortCosmeticModification::CosmeticMaterial' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, AmbientParticleSystem) == 0x000028, "Member 'FFortCosmeticModification::AmbientParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, MuzzleParticleSystem) == 0x000050, "Member 'FFortCosmeticModification::MuzzleParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ReloadParticleSystem) == 0x000078, "Member 'FFortCosmeticModification::ReloadParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, BeamParticleSystem) == 0x0000A0, "Member 'FFortCosmeticModification::BeamParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ImpactPhysicalSurfaceEffects) == 0x0000C8, "Member 'FFortCosmeticModification::ImpactPhysicalSurfaceEffects' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, TracerTemplate) == 0x0004D8, "Member 'FFortCosmeticModification::TracerTemplate' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, bModifyColor) == 0x000500, "Member 'FFortCosmeticModification::bModifyColor' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ColorAlteration) == 0x000504, "Member 'FFortCosmeticModification::ColorAlteration' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ColorParameterName) == 0x000514, "Member 'FFortCosmeticModification::ColorParameterName' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, bModifyDecalColour) == 0x00051C, "Member 'FFortCosmeticModification::bModifyDecalColour' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, DecalColourAlterationStart) == 0x000520, "Member 'FFortCosmeticModification::DecalColourAlterationStart' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, DecalColourAlterationEnd) == 0x000530, "Member 'FFortCosmeticModification::DecalColourAlterationEnd' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, bModifyShellColour) == 0x000540, "Member 'FFortCosmeticModification::bModifyShellColour' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ShellColourAlteration) == 0x000544, "Member 'FFortCosmeticModification::ShellColourAlteration' has a wrong offset!");

// ScriptStruct FortniteGame.FortConditionalCosmeticModification
// 0x0578 (0x0578 - 0x0000)
struct FFortConditionalCosmeticModification final
{
public:
	struct FFortCosmeticModification              CosmeticModification;                              // 0x0000(0x0558)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ConditionalTags;                                   // 0x0558(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConditionalCosmeticModification) == 0x000008, "Wrong alignment on FFortConditionalCosmeticModification");
static_assert(sizeof(FFortConditionalCosmeticModification) == 0x000578, "Wrong size on FFortConditionalCosmeticModification");
static_assert(offsetof(FFortConditionalCosmeticModification, CosmeticModification) == 0x000000, "Member 'FFortConditionalCosmeticModification::CosmeticModification' has a wrong offset!");
static_assert(offsetof(FFortConditionalCosmeticModification, ConditionalTags) == 0x000558, "Member 'FFortConditionalCosmeticModification::ConditionalTags' has a wrong offset!");

// ScriptStruct FortniteGame.OriginalAndSpawnedPair
// 0x0010 (0x0010 - 0x0000)
struct FOriginalAndSpawnedPair final
{
public:
	class AActor*                                 OriginalActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnedActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOriginalAndSpawnedPair) == 0x000008, "Wrong alignment on FOriginalAndSpawnedPair");
static_assert(sizeof(FOriginalAndSpawnedPair) == 0x000010, "Wrong size on FOriginalAndSpawnedPair");
static_assert(offsetof(FOriginalAndSpawnedPair, OriginalActor) == 0x000000, "Member 'FOriginalAndSpawnedPair::OriginalActor' has a wrong offset!");
static_assert(offsetof(FOriginalAndSpawnedPair, SpawnedActor) == 0x000008, "Member 'FOriginalAndSpawnedPair::SpawnedActor' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnalyticsClientEngagement
// 0x0188 (0x0188 - 0x0000)
struct alignas(0x08) FFortAnalyticsClientEngagement final
{
public:
	uint8                                         Pad_0[0x188];                                      // 0x0000(0x0188)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnalyticsClientEngagement) == 0x000008, "Wrong alignment on FFortAnalyticsClientEngagement");
static_assert(sizeof(FFortAnalyticsClientEngagement) == 0x000188, "Wrong size on FFortAnalyticsClientEngagement");

// ScriptStruct FortniteGame.BaseSample
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FBaseSample
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timestamp;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseSample) == 0x000008, "Wrong alignment on FBaseSample");
static_assert(sizeof(FBaseSample) == 0x000018, "Wrong size on FBaseSample");
static_assert(offsetof(FBaseSample, Timestamp) == 0x000008, "Member 'FBaseSample::Timestamp' has a wrong offset!");
static_assert(offsetof(FBaseSample, Location) == 0x00000C, "Member 'FBaseSample::Location' has a wrong offset!");

// ScriptStruct FortniteGame.DeathEvent
// 0x0060 (0x0078 - 0x0018)
struct FDeathEvent final : public FBaseSample
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       Instigator;                                        // 0x0020(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       Victim;                                            // 0x0048(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDBNO;                                           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeathCause                                   DeathCause;                                        // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeathDistance;                                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeathEvent) == 0x000008, "Wrong alignment on FDeathEvent");
static_assert(sizeof(FDeathEvent) == 0x000078, "Wrong size on FDeathEvent");
static_assert(offsetof(FDeathEvent, Instigator) == 0x000020, "Member 'FDeathEvent::Instigator' has a wrong offset!");
static_assert(offsetof(FDeathEvent, Victim) == 0x000048, "Member 'FDeathEvent::Victim' has a wrong offset!");
static_assert(offsetof(FDeathEvent, bIsDBNO) == 0x000070, "Member 'FDeathEvent::bIsDBNO' has a wrong offset!");
static_assert(offsetof(FDeathEvent, DeathCause) == 0x000071, "Member 'FDeathEvent::DeathCause' has a wrong offset!");
static_assert(offsetof(FDeathEvent, DeathDistance) == 0x000074, "Member 'FDeathEvent::DeathDistance' has a wrong offset!");

// ScriptStruct FortniteGame.GameLogPlayerSampleBase
// 0x0028 (0x0028 - 0x0000)
struct FGameLogPlayerSampleBase
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameLogPlayerSampleBase) == 0x000008, "Wrong alignment on FGameLogPlayerSampleBase");
static_assert(sizeof(FGameLogPlayerSampleBase) == 0x000028, "Wrong size on FGameLogPlayerSampleBase");
static_assert(offsetof(FGameLogPlayerSampleBase, PlayerID) == 0x000000, "Member 'FGameLogPlayerSampleBase::PlayerID' has a wrong offset!");

// ScriptStruct FortniteGame.PawnSample
// 0x0018 (0x0030 - 0x0018)
struct FPawnSample final : public FBaseSample
{
public:
	struct FRotator                               Rotation;                                          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Shield;                                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsJumping : 1;                                    // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsInVehicle : 1;                                  // 0x002C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUsingUmbrella : 1;                              // 0x002C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPawnSample) == 0x000008, "Wrong alignment on FPawnSample");
static_assert(sizeof(FPawnSample) == 0x000030, "Wrong size on FPawnSample");
static_assert(offsetof(FPawnSample, Rotation) == 0x000018, "Member 'FPawnSample::Rotation' has a wrong offset!");
static_assert(offsetof(FPawnSample, Health) == 0x000024, "Member 'FPawnSample::Health' has a wrong offset!");
static_assert(offsetof(FPawnSample, Shield) == 0x000028, "Member 'FPawnSample::Shield' has a wrong offset!");

// ScriptStruct FortniteGame.GameLogPawnSample
// 0x0030 (0x0058 - 0x0028)
struct FGameLogPawnSample final : public FGameLogPlayerSampleBase
{
public:
	struct FPawnSample                            TheSample;                                         // 0x0028(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameLogPawnSample) == 0x000008, "Wrong alignment on FGameLogPawnSample");
static_assert(sizeof(FGameLogPawnSample) == 0x000058, "Wrong size on FGameLogPawnSample");
static_assert(offsetof(FGameLogPawnSample, TheSample) == 0x000028, "Member 'FGameLogPawnSample::TheSample' has a wrong offset!");

// ScriptStruct FortniteGame.BuildEvent
// 0x0008 (0x0020 - 0x0018)
struct FBuildEvent final : public FBaseSample
{
public:
	bool                                          bIsEdit;                                           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildEvent) == 0x000008, "Wrong alignment on FBuildEvent");
static_assert(sizeof(FBuildEvent) == 0x000020, "Wrong size on FBuildEvent");
static_assert(offsetof(FBuildEvent, bIsEdit) == 0x000018, "Member 'FBuildEvent::bIsEdit' has a wrong offset!");

// ScriptStruct FortniteGame.GameLogBuildSample
// 0x0020 (0x0048 - 0x0028)
struct FGameLogBuildSample final : public FGameLogPlayerSampleBase
{
public:
	struct FBuildEvent                            TheSample;                                         // 0x0028(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameLogBuildSample) == 0x000008, "Wrong alignment on FGameLogBuildSample");
static_assert(sizeof(FGameLogBuildSample) == 0x000048, "Wrong size on FGameLogBuildSample");
static_assert(offsetof(FGameLogBuildSample, TheSample) == 0x000028, "Member 'FGameLogBuildSample::TheSample' has a wrong offset!");

// ScriptStruct FortniteGame.StormSample
// 0x0008 (0x0020 - 0x0018)
struct FStormSample final : public FBaseSample
{
public:
	float                                         Radius;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStormSample) == 0x000008, "Wrong alignment on FStormSample");
static_assert(sizeof(FStormSample) == 0x000020, "Wrong size on FStormSample");
static_assert(offsetof(FStormSample, Radius) == 0x000018, "Member 'FStormSample::Radius' has a wrong offset!");
static_assert(offsetof(FStormSample, bIsValid) == 0x00001C, "Member 'FStormSample::bIsValid' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerMetaInfo
// 0x0008 (0x0020 - 0x0018)
struct FPlayerMetaInfo final : public FBaseSample
{
public:
	int32                                         MatchPlacement;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerMetaInfo) == 0x000008, "Wrong alignment on FPlayerMetaInfo");
static_assert(sizeof(FPlayerMetaInfo) == 0x000020, "Wrong size on FPlayerMetaInfo");
static_assert(offsetof(FPlayerMetaInfo, MatchPlacement) == 0x000018, "Member 'FPlayerMetaInfo::MatchPlacement' has a wrong offset!");

// ScriptStruct FortniteGame.GameLogPlayerMetaSample
// 0x0020 (0x0048 - 0x0028)
struct FGameLogPlayerMetaSample final : public FGameLogPlayerSampleBase
{
public:
	struct FPlayerMetaInfo                        TheSample;                                         // 0x0028(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameLogPlayerMetaSample) == 0x000008, "Wrong alignment on FGameLogPlayerMetaSample");
static_assert(sizeof(FGameLogPlayerMetaSample) == 0x000048, "Wrong size on FGameLogPlayerMetaSample");
static_assert(offsetof(FGameLogPlayerMetaSample, TheSample) == 0x000028, "Member 'FGameLogPlayerMetaSample::TheSample' has a wrong offset!");

// ScriptStruct FortniteGame.GameLogStream
// 0x0078 (0x0078 - 0x0000)
struct FGameLogStream final
{
public:
	TArray<struct FDeathEvent>                    DeathEvents;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameLogPawnSample>             PawnSamples;                                       // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameLogBuildSample>            BuildEvents;                                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStormSample>                   StormSamples;                                      // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameLogPlayerMetaSample>       PlayerMetaInfoSamples;                             // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameLogStream) == 0x000008, "Wrong alignment on FGameLogStream");
static_assert(sizeof(FGameLogStream) == 0x000078, "Wrong size on FGameLogStream");
static_assert(offsetof(FGameLogStream, DeathEvents) == 0x000000, "Member 'FGameLogStream::DeathEvents' has a wrong offset!");
static_assert(offsetof(FGameLogStream, PawnSamples) == 0x000018, "Member 'FGameLogStream::PawnSamples' has a wrong offset!");
static_assert(offsetof(FGameLogStream, BuildEvents) == 0x000030, "Member 'FGameLogStream::BuildEvents' has a wrong offset!");
static_assert(offsetof(FGameLogStream, StormSamples) == 0x000048, "Member 'FGameLogStream::StormSamples' has a wrong offset!");
static_assert(offsetof(FGameLogStream, PlayerMetaInfoSamples) == 0x000060, "Member 'FGameLogStream::PlayerMetaInfoSamples' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_Skydiving
// 0x0048 (0x0048 - 0x0000)
struct FFortAnimInput_Skydiving final
{
public:
	uint8                                         bIsSkydivingFromLaunchPad : 1;                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSkydivingFromBus : 1;                           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsInVortex : 1;                                   // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUsingUmbrella : 1;                              // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsActivelyStrafingInAir : 1;                      // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDiving : 1;                                     // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDivingUpInVortex : 1;                           // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsParachuteOpen : 1;                              // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSkydiving : 1;                                  // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsParachuteLeaning : 1;                           // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSkydiveLeaning : 1;                             // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsLeaning : 1;                                    // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSkydiveDiveMode : 1;                            // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bParachuteLeanTransition : 1;                      // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayedParachuteLeanTransition : 1;                // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlaySkydiveDrift : 1;                             // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSkydiveDriftDelayActive : 1;                      // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSkydiveDriftAnimAllowed : 1;                      // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocalAccelForward;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalAccelRight;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalVelocityRight;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkydiveAimPitch;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkydiveAimPitchInterpSpeed;                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkydiveAimYaw;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeployChuteAnimRate;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkydiveDriftAnimRate;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkydiveDriftAnimRateCurrent;                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkydiveFidgetAnimRate;                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkydiveFidgetAnimRateCurrent;                      // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkydiveAdditiveAlpha;                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkydiveDriftDelay;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkydiveDriftAnim;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkydiveDriftAnimMax;                               // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LaunchpadAnim;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkydivingDirection                           LocalAccelDir;                                     // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkydivingDirection                           DirectionLast;                                     // 0x0045(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimInput_Skydiving) == 0x000004, "Wrong alignment on FFortAnimInput_Skydiving");
static_assert(sizeof(FFortAnimInput_Skydiving) == 0x000048, "Wrong size on FFortAnimInput_Skydiving");
static_assert(offsetof(FFortAnimInput_Skydiving, LocalAccelForward) == 0x000004, "Member 'FFortAnimInput_Skydiving::LocalAccelForward' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, LocalAccelRight) == 0x000008, "Member 'FFortAnimInput_Skydiving::LocalAccelRight' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, LocalVelocityRight) == 0x00000C, "Member 'FFortAnimInput_Skydiving::LocalVelocityRight' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, SkydiveAimPitch) == 0x000010, "Member 'FFortAnimInput_Skydiving::SkydiveAimPitch' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, SkydiveAimPitchInterpSpeed) == 0x000014, "Member 'FFortAnimInput_Skydiving::SkydiveAimPitchInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, SkydiveAimYaw) == 0x000018, "Member 'FFortAnimInput_Skydiving::SkydiveAimYaw' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, DeployChuteAnimRate) == 0x00001C, "Member 'FFortAnimInput_Skydiving::DeployChuteAnimRate' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, SkydiveDriftAnimRate) == 0x000020, "Member 'FFortAnimInput_Skydiving::SkydiveDriftAnimRate' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, SkydiveDriftAnimRateCurrent) == 0x000024, "Member 'FFortAnimInput_Skydiving::SkydiveDriftAnimRateCurrent' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, SkydiveFidgetAnimRate) == 0x000028, "Member 'FFortAnimInput_Skydiving::SkydiveFidgetAnimRate' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, SkydiveFidgetAnimRateCurrent) == 0x00002C, "Member 'FFortAnimInput_Skydiving::SkydiveFidgetAnimRateCurrent' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, SkydiveAdditiveAlpha) == 0x000030, "Member 'FFortAnimInput_Skydiving::SkydiveAdditiveAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, SkydiveDriftDelay) == 0x000034, "Member 'FFortAnimInput_Skydiving::SkydiveDriftDelay' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, SkydiveDriftAnim) == 0x000038, "Member 'FFortAnimInput_Skydiving::SkydiveDriftAnim' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, SkydiveDriftAnimMax) == 0x00003C, "Member 'FFortAnimInput_Skydiving::SkydiveDriftAnimMax' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, LaunchpadAnim) == 0x000040, "Member 'FFortAnimInput_Skydiving::LaunchpadAnim' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, LocalAccelDir) == 0x000044, "Member 'FFortAnimInput_Skydiving::LocalAccelDir' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Skydiving, DirectionLast) == 0x000045, "Member 'FFortAnimInput_Skydiving::DirectionLast' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_FerretVehicle
// 0x0064 (0x0064 - 0x0000)
struct FFortAnimInput_FerretVehicle final
{
public:
	uint8                                         bIsUsingFerretVehicle : 1;                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDriver : 1;                                     // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFrontPassenger : 1;                             // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBackLeftPassenger : 1;                          // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBackRightPassenger : 1;                         // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFrontPassengerAndLeaning : 1;                   // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBackPassengerAndLeaning : 1;                    // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDrifting : 1;                                   // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBoosting : 1;                                   // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsReversing : 1;                                  // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBraking : 1;                                    // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMoving : 1;                                     // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMovingForward : 1;                              // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsLeaning : 1;                                    // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsLeaningOrBouncing : 1;                          // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceCrouching : 1;                            // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceCrouched : 1;                             // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceJumping : 1;                              // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBounceRecoiling : 1;                            // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSteeringRight;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsSteeringLeft;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsShooting;                                       // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsFerretPassengerRotating;                        // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RunForwardAlpha;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceCompression;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeanPosition;                                      // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanPositionX;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanPositionY;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanPositionZ;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAimFWD : 1;                                       // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimBWD : 1;                                       // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimLFT : 1;                                       // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAimRGT : 1;                                       // 0x0028(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PawnToVehicleDeltaYawAngleDegrees;                 // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimCardDirDeadZoneAngleDegrees;                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimCardDirAngleOffsetDegrees;                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastCardDirIndex;                                  // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimFWDDeltaAngleDegrees;                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimBWDDeltaAngleDegrees;                           // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimLFTDeltaAngleDegrees;                           // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimRGTDeltaAngleDegrees;                           // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopePitchDegreeAngle;                             // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeRollDegreeAngle;                              // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAngle;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SeatSwitchDirection;                               // 0x0058(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_FerretVehicle) == 0x000004, "Wrong alignment on FFortAnimInput_FerretVehicle");
static_assert(sizeof(FFortAnimInput_FerretVehicle) == 0x000064, "Wrong size on FFortAnimInput_FerretVehicle");
static_assert(offsetof(FFortAnimInput_FerretVehicle, bIsSteeringRight) == 0x000003, "Member 'FFortAnimInput_FerretVehicle::bIsSteeringRight' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, bIsSteeringLeft) == 0x000004, "Member 'FFortAnimInput_FerretVehicle::bIsSteeringLeft' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, bIsShooting) == 0x000005, "Member 'FFortAnimInput_FerretVehicle::bIsShooting' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, bIsFerretPassengerRotating) == 0x000006, "Member 'FFortAnimInput_FerretVehicle::bIsFerretPassengerRotating' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, RunForwardAlpha) == 0x000008, "Member 'FFortAnimInput_FerretVehicle::RunForwardAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, BounceCompression) == 0x00000C, "Member 'FFortAnimInput_FerretVehicle::BounceCompression' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, LeanPosition) == 0x000010, "Member 'FFortAnimInput_FerretVehicle::LeanPosition' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, LeanPositionX) == 0x00001C, "Member 'FFortAnimInput_FerretVehicle::LeanPositionX' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, LeanPositionY) == 0x000020, "Member 'FFortAnimInput_FerretVehicle::LeanPositionY' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, LeanPositionZ) == 0x000024, "Member 'FFortAnimInput_FerretVehicle::LeanPositionZ' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, PawnToVehicleDeltaYawAngleDegrees) == 0x00002C, "Member 'FFortAnimInput_FerretVehicle::PawnToVehicleDeltaYawAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, AimCardDirDeadZoneAngleDegrees) == 0x000030, "Member 'FFortAnimInput_FerretVehicle::AimCardDirDeadZoneAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, AimCardDirAngleOffsetDegrees) == 0x000034, "Member 'FFortAnimInput_FerretVehicle::AimCardDirAngleOffsetDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, LastCardDirIndex) == 0x000038, "Member 'FFortAnimInput_FerretVehicle::LastCardDirIndex' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, AimFWDDeltaAngleDegrees) == 0x00003C, "Member 'FFortAnimInput_FerretVehicle::AimFWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, AimBWDDeltaAngleDegrees) == 0x000040, "Member 'FFortAnimInput_FerretVehicle::AimBWDDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, AimLFTDeltaAngleDegrees) == 0x000044, "Member 'FFortAnimInput_FerretVehicle::AimLFTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, AimRGTDeltaAngleDegrees) == 0x000048, "Member 'FFortAnimInput_FerretVehicle::AimRGTDeltaAngleDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, SlopePitchDegreeAngle) == 0x00004C, "Member 'FFortAnimInput_FerretVehicle::SlopePitchDegreeAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, SlopeRollDegreeAngle) == 0x000050, "Member 'FFortAnimInput_FerretVehicle::SlopeRollDegreeAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, SteerAngle) == 0x000054, "Member 'FFortAnimInput_FerretVehicle::SteerAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_FerretVehicle, SeatSwitchDirection) == 0x000058, "Member 'FFortAnimInput_FerretVehicle::SeatSwitchDirection' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_VelocityImpact
// 0x00BC (0x00BC - 0x0000)
struct FFortAnimInput_VelocityImpact final
{
public:
	struct FVector                                LastVelocity;                                      // 0x0000(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeltaVelocityThreshold;                            // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactScale;                                       // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputRange                            ImpactLimitX;                                      // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputRange                            ImpactLimitY;                                      // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputRange                            ImpactLimitZ;                                      // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatRK4SpringInterpolator            SpringInterpolatorX;                               // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x1C];                                      // 0x0044(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRK4SpringInterpolator            SpringInterpolatorY;                               // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x1C];                                      // 0x0068(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRK4SpringInterpolator            SpringInterpolatorZ;                               // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x1C];                                      // 0x008C(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bTestVelocity : 1;                                 // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TestVelocity;                                      // 0x00AC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsForwardImpact : 1;                              // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBackwardImpact : 1;                             // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsLeftImpact : 1;                                 // 0x00B8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsRightImpact : 1;                                // 0x00B8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUpImpact : 1;                                   // 0x00B8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDownImpact : 1;                                 // 0x00B8(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimInput_VelocityImpact) == 0x000004, "Wrong alignment on FFortAnimInput_VelocityImpact");
static_assert(sizeof(FFortAnimInput_VelocityImpact) == 0x0000BC, "Wrong size on FFortAnimInput_VelocityImpact");
static_assert(offsetof(FFortAnimInput_VelocityImpact, LastVelocity) == 0x000000, "Member 'FFortAnimInput_VelocityImpact::LastVelocity' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_VelocityImpact, DeltaVelocityThreshold) == 0x00000C, "Member 'FFortAnimInput_VelocityImpact::DeltaVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_VelocityImpact, ImpactScale) == 0x000018, "Member 'FFortAnimInput_VelocityImpact::ImpactScale' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_VelocityImpact, ImpactLimitX) == 0x000024, "Member 'FFortAnimInput_VelocityImpact::ImpactLimitX' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_VelocityImpact, ImpactLimitY) == 0x00002C, "Member 'FFortAnimInput_VelocityImpact::ImpactLimitY' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_VelocityImpact, ImpactLimitZ) == 0x000034, "Member 'FFortAnimInput_VelocityImpact::ImpactLimitZ' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_VelocityImpact, SpringInterpolatorX) == 0x00003C, "Member 'FFortAnimInput_VelocityImpact::SpringInterpolatorX' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_VelocityImpact, SpringInterpolatorY) == 0x000060, "Member 'FFortAnimInput_VelocityImpact::SpringInterpolatorY' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_VelocityImpact, SpringInterpolatorZ) == 0x000084, "Member 'FFortAnimInput_VelocityImpact::SpringInterpolatorZ' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_VelocityImpact, TestVelocity) == 0x0000AC, "Member 'FFortAnimInput_VelocityImpact::TestVelocity' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_JackalVehicle
// 0x01AC (0x01AC - 0x0000)
struct FFortAnimInput_JackalVehicle final
{
public:
	uint8                                         bIsUsingJackalVehicle : 1;                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSteeringLeft : 1;                               // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSteeringRight : 1;                              // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteerAngleDeadZoneDegrees;                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAngle;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanYaw;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QuantizedSteerAngle;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAlpha;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunForwardAlpha;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopePitchDegreeAngle;                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeRollDegreeAngle;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromGround;                                // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PivotPlayRate;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsReversing : 1;                                  // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBraking : 1;                                    // 0x002C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMoving : 1;                                     // 0x002C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMovingForward : 1;                              // 0x002C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSprinting : 1;                                  // 0x002C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInAir : 1;                                        // 0x002C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFalling : 1;                                    // 0x002C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsJumping : 1;                                    // 0x002C(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsRelaxed : 1;                                    // 0x002D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBoosting : 1;                                   // 0x002D(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasReachedJumpChargeStartThreshold : 1;           // 0x002D(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasReachedJumpChargeMidThreshold : 1;             // 0x002D(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasReachedJumpChargeFullThreshold : 1;            // 0x002D(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAdjustRootForFemaleRider : 1;                     // 0x002D(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsPlayingEmoteOnHoverboard : 1;                   // 0x002D(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldApplyAdditive : 1;                          // 0x002D(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayPivotOnGroundAndNotBoosting : 1;              // 0x002E(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsOnLowerHill : 1;                                // 0x002E(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLowerBodyIdleToLoopTransition : 1;                // 0x002E(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInterruptHoverboardFullybody : 1;                 // 0x002E(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnterFullBodyHoverboardState : 1;                 // 0x002E(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDefaultToJumpStartTransition : 1;                 // 0x002E(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLocomotionPoseToJumpTransition : 1;               // 0x002E(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBoostingToBoostingJumpTransition : 1;             // 0x002E(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bJumpToLocomotionPoseTransition : 1;               // 0x002F(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bJumpApexToJumpFallTransition : 1;                 // 0x002F(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIdleToMovementStartTransition : 1;                // 0x002F(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIdleToMovementLoopTransition : 1;                 // 0x002F(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMovementLoopToMovementStopTransition : 1;         // 0x002F(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMovementLoopToPivotTransition : 1;                // 0x002F(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMovementLoopToIdleTransition : 1;                 // 0x002F(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIdleAdditiveToCollisionNTransition : 1;           // 0x002F(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSplitBodyToHoverboardBRTransition : 1;            // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHoverboardBRToSplitBodyTransition : 1;            // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHoverboardBRMovementToJumpChargeTransition : 1;   // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIdlesToJackalVehicleTransition : 1;               // 0x0030(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayAdditiveLeans : 1;                            // 0x0030(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayBalloonLeans : 1;                             // 0x0030(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayJumpTrickVertical : 1;                        // 0x0030(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayJumpTrick : 1;                                // 0x0030(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayMovingFast : 1;                               // 0x0031(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayHipAdjustmentAdditive : 1;                    // 0x0031(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayDriveSouth : 1;                               // 0x0031(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayHeadAimOffset : 1;                            // 0x0031(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlaySlopeAimOffset : 1;                           // 0x0031(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpCombatAdditiveWeight;                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeTwistIdle;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeTwistLocomotionLoop;                          // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAnimInput_VelocityImpact          VelocityImpact;                                    // 0x0040(0x00BC)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ImpactDisplacement;                                // 0x00FC(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteerYaw;                                          // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EmoteHoverboardPosition;                           // 0x0114(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               EmoteHoverboardRotation;                           // 0x0120(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bShouldAttachFeetToHoverboard : 1;                 // 0x012C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FootLeftLocationOffset;                            // 0x0130(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FootLeftRotationOffset;                            // 0x013C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                FootRightLocationOffset;                           // 0x0148(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FootRightRotationOffset;                           // 0x0154(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StoppedThreshold;                                  // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingForwardThreshold;                            // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingFowardFastThreshold;                         // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultToJumpStartTransitionThreshold;             // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpTrickAngularVelocityThreshold;                 // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDistanceFromGroundThreshold;                   // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityStartThreshold;                            // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingFastThreshold;                               // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelaxedSpeedThreshold;                             // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpChargeStartThreshold;                          // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpChargeMidThreshold;                            // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpChargeFullThreshold;                           // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotatingAngularVelocityThreshold;                  // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleToLoopTransitionSpeedThreshold;                // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleToMovementLoopTransitionThreshold;             // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeTwistIdleMultiplier;                          // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeTwistLocomotionLoopMultiplier;                // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanYawForMaxPivotPlayRate;                        // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAlphaForMaxPivotPlayRate;                     // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_JackalVehicle) == 0x000004, "Wrong alignment on FFortAnimInput_JackalVehicle");
static_assert(sizeof(FFortAnimInput_JackalVehicle) == 0x0001AC, "Wrong size on FFortAnimInput_JackalVehicle");
static_assert(offsetof(FFortAnimInput_JackalVehicle, SteerAngleDeadZoneDegrees) == 0x000004, "Member 'FFortAnimInput_JackalVehicle::SteerAngleDeadZoneDegrees' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, SteerAngle) == 0x000008, "Member 'FFortAnimInput_JackalVehicle::SteerAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, LeanYaw) == 0x00000C, "Member 'FFortAnimInput_JackalVehicle::LeanYaw' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, QuantizedSteerAngle) == 0x000010, "Member 'FFortAnimInput_JackalVehicle::QuantizedSteerAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, SteerAlpha) == 0x000014, "Member 'FFortAnimInput_JackalVehicle::SteerAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, RunForwardAlpha) == 0x000018, "Member 'FFortAnimInput_JackalVehicle::RunForwardAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, SlopePitchDegreeAngle) == 0x00001C, "Member 'FFortAnimInput_JackalVehicle::SlopePitchDegreeAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, SlopeRollDegreeAngle) == 0x000020, "Member 'FFortAnimInput_JackalVehicle::SlopeRollDegreeAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, DistanceFromGround) == 0x000024, "Member 'FFortAnimInput_JackalVehicle::DistanceFromGround' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, PivotPlayRate) == 0x000028, "Member 'FFortAnimInput_JackalVehicle::PivotPlayRate' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, JumpCombatAdditiveWeight) == 0x000034, "Member 'FFortAnimInput_JackalVehicle::JumpCombatAdditiveWeight' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, MeleeTwistIdle) == 0x000038, "Member 'FFortAnimInput_JackalVehicle::MeleeTwistIdle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, MeleeTwistLocomotionLoop) == 0x00003C, "Member 'FFortAnimInput_JackalVehicle::MeleeTwistLocomotionLoop' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, VelocityImpact) == 0x000040, "Member 'FFortAnimInput_JackalVehicle::VelocityImpact' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, ImpactDisplacement) == 0x0000FC, "Member 'FFortAnimInput_JackalVehicle::ImpactDisplacement' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, SteerYaw) == 0x000110, "Member 'FFortAnimInput_JackalVehicle::SteerYaw' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, EmoteHoverboardPosition) == 0x000114, "Member 'FFortAnimInput_JackalVehicle::EmoteHoverboardPosition' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, EmoteHoverboardRotation) == 0x000120, "Member 'FFortAnimInput_JackalVehicle::EmoteHoverboardRotation' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, FootLeftLocationOffset) == 0x000130, "Member 'FFortAnimInput_JackalVehicle::FootLeftLocationOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, FootLeftRotationOffset) == 0x00013C, "Member 'FFortAnimInput_JackalVehicle::FootLeftRotationOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, FootRightLocationOffset) == 0x000148, "Member 'FFortAnimInput_JackalVehicle::FootRightLocationOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, FootRightRotationOffset) == 0x000154, "Member 'FFortAnimInput_JackalVehicle::FootRightRotationOffset' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, StoppedThreshold) == 0x000160, "Member 'FFortAnimInput_JackalVehicle::StoppedThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, MovingForwardThreshold) == 0x000164, "Member 'FFortAnimInput_JackalVehicle::MovingForwardThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, MovingFowardFastThreshold) == 0x000168, "Member 'FFortAnimInput_JackalVehicle::MovingFowardFastThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, DefaultToJumpStartTransitionThreshold) == 0x00016C, "Member 'FFortAnimInput_JackalVehicle::DefaultToJumpStartTransitionThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, JumpTrickAngularVelocityThreshold) == 0x000170, "Member 'FFortAnimInput_JackalVehicle::JumpTrickAngularVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, JumpDistanceFromGroundThreshold) == 0x000174, "Member 'FFortAnimInput_JackalVehicle::JumpDistanceFromGroundThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, VelocityStartThreshold) == 0x000178, "Member 'FFortAnimInput_JackalVehicle::VelocityStartThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, MovingFastThreshold) == 0x00017C, "Member 'FFortAnimInput_JackalVehicle::MovingFastThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, RelaxedSpeedThreshold) == 0x000180, "Member 'FFortAnimInput_JackalVehicle::RelaxedSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, JumpChargeStartThreshold) == 0x000184, "Member 'FFortAnimInput_JackalVehicle::JumpChargeStartThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, JumpChargeMidThreshold) == 0x000188, "Member 'FFortAnimInput_JackalVehicle::JumpChargeMidThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, JumpChargeFullThreshold) == 0x00018C, "Member 'FFortAnimInput_JackalVehicle::JumpChargeFullThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, RotatingAngularVelocityThreshold) == 0x000190, "Member 'FFortAnimInput_JackalVehicle::RotatingAngularVelocityThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, IdleToLoopTransitionSpeedThreshold) == 0x000194, "Member 'FFortAnimInput_JackalVehicle::IdleToLoopTransitionSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, IdleToMovementLoopTransitionThreshold) == 0x000198, "Member 'FFortAnimInput_JackalVehicle::IdleToMovementLoopTransitionThreshold' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, MeleeTwistIdleMultiplier) == 0x00019C, "Member 'FFortAnimInput_JackalVehicle::MeleeTwistIdleMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, MeleeTwistLocomotionLoopMultiplier) == 0x0001A0, "Member 'FFortAnimInput_JackalVehicle::MeleeTwistLocomotionLoopMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, LeanYawForMaxPivotPlayRate) == 0x0001A4, "Member 'FFortAnimInput_JackalVehicle::LeanYawForMaxPivotPlayRate' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_JackalVehicle, SteerAlphaForMaxPivotPlayRate) == 0x0001A8, "Member 'FFortAnimInput_JackalVehicle::SteerAlphaForMaxPivotPlayRate' has a wrong offset!");

// ScriptStruct FortniteGame.McpVariantWriter
// 0x0050 (0x0050 - 0x0000)
struct FMcpVariantWriter final
{
public:
	struct FGameplayTag                           VariantChannel;                                    // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActiveVariant;                                     // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomActiveVariant;                               // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UnlockedVariants;                                  // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	class FString                                 CustomUnlockedVariants;                            // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMcpVariantWriter) == 0x000008, "Wrong alignment on FMcpVariantWriter");
static_assert(sizeof(FMcpVariantWriter) == 0x000050, "Wrong size on FMcpVariantWriter");
static_assert(offsetof(FMcpVariantWriter, VariantChannel) == 0x000000, "Member 'FMcpVariantWriter::VariantChannel' has a wrong offset!");
static_assert(offsetof(FMcpVariantWriter, ActiveVariant) == 0x000008, "Member 'FMcpVariantWriter::ActiveVariant' has a wrong offset!");
static_assert(offsetof(FMcpVariantWriter, CustomActiveVariant) == 0x000010, "Member 'FMcpVariantWriter::CustomActiveVariant' has a wrong offset!");
static_assert(offsetof(FMcpVariantWriter, UnlockedVariants) == 0x000020, "Member 'FMcpVariantWriter::UnlockedVariants' has a wrong offset!");
static_assert(offsetof(FMcpVariantWriter, CustomUnlockedVariants) == 0x000040, "Member 'FMcpVariantWriter::CustomUnlockedVariants' has a wrong offset!");

// ScriptStruct FortniteGame.AnimClassStats
// 0x0060 (0x0060 - 0x0000)
struct FAnimClassStats final
{
public:
	class FString                                 AnimClassName;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    StatValues;                                        // 0x0010(0x0050)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimClassStats) == 0x000008, "Wrong alignment on FAnimClassStats");
static_assert(sizeof(FAnimClassStats) == 0x000060, "Wrong size on FAnimClassStats");
static_assert(offsetof(FAnimClassStats, AnimClassName) == 0x000000, "Member 'FAnimClassStats::AnimClassName' has a wrong offset!");
static_assert(offsetof(FAnimClassStats, StatValues) == 0x000010, "Member 'FAnimClassStats::StatValues' has a wrong offset!");

// ScriptStruct FortniteGame.FortRewardQuantityPair
// 0x0018 (0x0018 - 0x0000)
struct FFortRewardQuantityPair final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRewardQuantityPair) == 0x000008, "Wrong alignment on FFortRewardQuantityPair");
static_assert(sizeof(FFortRewardQuantityPair) == 0x000018, "Wrong size on FFortRewardQuantityPair");
static_assert(offsetof(FFortRewardQuantityPair, TemplateId) == 0x000000, "Member 'FFortRewardQuantityPair::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortRewardQuantityPair, Quantity) == 0x000010, "Member 'FFortRewardQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortLevelUpDataV2
// 0x0030 (0x0038 - 0x0008)
struct FFortLevelUpDataV2 final : public FTableRowBase
{
public:
	int32                                         Xp;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyLevel;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XPDisplayMultiplier;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortRewardQuantityPair>        Rewards;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RestXPCap;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestXPRechargeRate;                                // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostXPPerConsumable;                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLevelUpDataV2) == 0x000008, "Wrong alignment on FFortLevelUpDataV2");
static_assert(sizeof(FFortLevelUpDataV2) == 0x000038, "Wrong size on FFortLevelUpDataV2");
static_assert(offsetof(FFortLevelUpDataV2, Xp) == 0x000008, "Member 'FFortLevelUpDataV2::Xp' has a wrong offset!");
static_assert(offsetof(FFortLevelUpDataV2, DifficultyLevel) == 0x00000C, "Member 'FFortLevelUpDataV2::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFortLevelUpDataV2, XPDisplayMultiplier) == 0x000010, "Member 'FFortLevelUpDataV2::XPDisplayMultiplier' has a wrong offset!");
static_assert(offsetof(FFortLevelUpDataV2, Rewards) == 0x000018, "Member 'FFortLevelUpDataV2::Rewards' has a wrong offset!");
static_assert(offsetof(FFortLevelUpDataV2, RestXPCap) == 0x000028, "Member 'FFortLevelUpDataV2::RestXPCap' has a wrong offset!");
static_assert(offsetof(FFortLevelUpDataV2, RestXPRechargeRate) == 0x00002C, "Member 'FFortLevelUpDataV2::RestXPRechargeRate' has a wrong offset!");
static_assert(offsetof(FFortLevelUpDataV2, BoostXPPerConsumable) == 0x000030, "Member 'FFortLevelUpDataV2::BoostXPPerConsumable' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_HoverBoard
// 0x0068 (0x0068 - 0x0000)
struct FFortAnimInput_HoverBoard final
{
public:
	bool                                          bIsUsingHoverboard;                                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoverTransformAlpha;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               HoverTransformRotation;                            // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                HoverTransformTranslation;                         // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoverCycle;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            HoverCycleVelocityCurve;                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoverHeight;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            HoverHeightCurve;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoverLeanAngle;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            HoverLeanCurve;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoverPitchAngle;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoverYaw;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoverYawCurrent;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoverIdleLeanAlpha;                                // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            HoverPitchCurve;                                   // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_HoverBoard) == 0x000008, "Wrong alignment on FFortAnimInput_HoverBoard");
static_assert(sizeof(FFortAnimInput_HoverBoard) == 0x000068, "Wrong size on FFortAnimInput_HoverBoard");
static_assert(offsetof(FFortAnimInput_HoverBoard, bIsUsingHoverboard) == 0x000000, "Member 'FFortAnimInput_HoverBoard::bIsUsingHoverboard' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverTransformAlpha) == 0x000004, "Member 'FFortAnimInput_HoverBoard::HoverTransformAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverTransformRotation) == 0x000008, "Member 'FFortAnimInput_HoverBoard::HoverTransformRotation' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverTransformTranslation) == 0x000014, "Member 'FFortAnimInput_HoverBoard::HoverTransformTranslation' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverCycle) == 0x000020, "Member 'FFortAnimInput_HoverBoard::HoverCycle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverCycleVelocityCurve) == 0x000028, "Member 'FFortAnimInput_HoverBoard::HoverCycleVelocityCurve' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverHeight) == 0x000030, "Member 'FFortAnimInput_HoverBoard::HoverHeight' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverHeightCurve) == 0x000038, "Member 'FFortAnimInput_HoverBoard::HoverHeightCurve' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverLeanAngle) == 0x000040, "Member 'FFortAnimInput_HoverBoard::HoverLeanAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverLeanCurve) == 0x000048, "Member 'FFortAnimInput_HoverBoard::HoverLeanCurve' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverPitchAngle) == 0x000050, "Member 'FFortAnimInput_HoverBoard::HoverPitchAngle' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverYaw) == 0x000054, "Member 'FFortAnimInput_HoverBoard::HoverYaw' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverYawCurrent) == 0x000058, "Member 'FFortAnimInput_HoverBoard::HoverYawCurrent' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverIdleLeanAlpha) == 0x00005C, "Member 'FFortAnimInput_HoverBoard::HoverIdleLeanAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_HoverBoard, HoverPitchCurve) == 0x000060, "Member 'FFortAnimInput_HoverBoard::HoverPitchCurve' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_Zipline
// 0x0020 (0x0020 - 0x0000)
struct FFortAnimInput_Zipline final
{
public:
	uint8                                         bIsZiplining : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldPlayPivotTransition : 1;                    // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeanYaw;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PivotBlendDelayRemaining;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PivotBlendDelay;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCardinalDirection                        PivotCardinalDirection;                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldVelocityLastTick;                             // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimInput_Zipline) == 0x000004, "Wrong alignment on FFortAnimInput_Zipline");
static_assert(sizeof(FFortAnimInput_Zipline) == 0x000020, "Wrong size on FFortAnimInput_Zipline");
static_assert(offsetof(FFortAnimInput_Zipline, LeanYaw) == 0x000004, "Member 'FFortAnimInput_Zipline::LeanYaw' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Zipline, PivotBlendDelayRemaining) == 0x000008, "Member 'FFortAnimInput_Zipline::PivotBlendDelayRemaining' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Zipline, PivotBlendDelay) == 0x00000C, "Member 'FFortAnimInput_Zipline::PivotBlendDelay' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Zipline, PivotCardinalDirection) == 0x000010, "Member 'FFortAnimInput_Zipline::PivotCardinalDirection' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Zipline, WorldVelocityLastTick) == 0x000014, "Member 'FFortAnimInput_Zipline::WorldVelocityLastTick' has a wrong offset!");

// ScriptStruct FortniteGame.ItemDefinitionAndCount
// 0x0030 (0x0030 - 0x0000)
struct FItemDefinitionAndCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDefinitionAndCount) == 0x000008, "Wrong alignment on FItemDefinitionAndCount");
static_assert(sizeof(FItemDefinitionAndCount) == 0x000030, "Wrong size on FItemDefinitionAndCount");
static_assert(offsetof(FItemDefinitionAndCount, Count) == 0x000000, "Member 'FItemDefinitionAndCount::Count' has a wrong offset!");
static_assert(offsetof(FItemDefinitionAndCount, ItemDefinition) == 0x000008, "Member 'FItemDefinitionAndCount::ItemDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.AnimTagProperty
// 0x0028 (0x0028 - 0x0000)
struct FAnimTagProperty final
{
public:
	struct FGameplayTag                           BackingGameplayTag;                                // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProperty*                              PropertyToEdit;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PropertyGuid;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimTagProperty) == 0x000008, "Wrong alignment on FAnimTagProperty");
static_assert(sizeof(FAnimTagProperty) == 0x000028, "Wrong size on FAnimTagProperty");
static_assert(offsetof(FAnimTagProperty, BackingGameplayTag) == 0x000000, "Member 'FAnimTagProperty::BackingGameplayTag' has a wrong offset!");
static_assert(offsetof(FAnimTagProperty, PropertyToEdit) == 0x000008, "Member 'FAnimTagProperty::PropertyToEdit' has a wrong offset!");
static_assert(offsetof(FAnimTagProperty, PropertyName) == 0x000010, "Member 'FAnimTagProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(FAnimTagProperty, PropertyGuid) == 0x000018, "Member 'FAnimTagProperty::PropertyGuid' has a wrong offset!");

// ScriptStruct FortniteGame.TurnFloatRange
// 0x0008 (0x0008 - 0x0000)
struct FTurnFloatRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTurnFloatRange) == 0x000004, "Wrong alignment on FTurnFloatRange");
static_assert(sizeof(FTurnFloatRange) == 0x000008, "Wrong size on FTurnFloatRange");
static_assert(offsetof(FTurnFloatRange, Min) == 0x000000, "Member 'FTurnFloatRange::Min' has a wrong offset!");
static_assert(offsetof(FTurnFloatRange, Max) == 0x000004, "Member 'FTurnFloatRange::Max' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimSetRandomAnimation
// 0x0098 (0x0098 - 0x0000)
struct FFortAnimSetRandomAnimation final
{
public:
	struct FGameplayTagQuery                      Requirements;                                      // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FRandomPlayerSequenceEntry             RandomEntry;                                       // 0x0048(0x0050)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAnimSetRandomAnimation) == 0x000008, "Wrong alignment on FFortAnimSetRandomAnimation");
static_assert(sizeof(FFortAnimSetRandomAnimation) == 0x000098, "Wrong size on FFortAnimSetRandomAnimation");
static_assert(offsetof(FFortAnimSetRandomAnimation, Requirements) == 0x000000, "Member 'FFortAnimSetRandomAnimation::Requirements' has a wrong offset!");
static_assert(offsetof(FFortAnimSetRandomAnimation, RandomEntry) == 0x000048, "Member 'FFortAnimSetRandomAnimation::RandomEntry' has a wrong offset!");

// ScriptStruct FortniteGame.FortObjectiveRecord
// 0x0018 (0x0018 - 0x0000)
struct FFortObjectiveRecord final
{
public:
	TSubclassOf<class AFortObjectiveBase>         ObjectiveClass;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ObjectiveData;                                     // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortObjectiveRecord) == 0x000008, "Wrong alignment on FFortObjectiveRecord");
static_assert(sizeof(FFortObjectiveRecord) == 0x000018, "Wrong size on FFortObjectiveRecord");
static_assert(offsetof(FFortObjectiveRecord, ObjectiveClass) == 0x000000, "Member 'FFortObjectiveRecord::ObjectiveClass' has a wrong offset!");
static_assert(offsetof(FFortObjectiveRecord, ObjectiveData) == 0x000008, "Member 'FFortObjectiveRecord::ObjectiveData' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimInput_Facial
// 0x0014 (0x0014 - 0x0000)
struct FFortAnimInput_Facial final
{
public:
	class FName                                   SubjectName_Provider;                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SubjectName_Player;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFacialAnimTypes                          CurrentAnimType;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimInput_Facial) == 0x000004, "Wrong alignment on FFortAnimInput_Facial");
static_assert(sizeof(FFortAnimInput_Facial) == 0x000014, "Wrong size on FFortAnimInput_Facial");
static_assert(offsetof(FFortAnimInput_Facial, SubjectName_Provider) == 0x000000, "Member 'FFortAnimInput_Facial::SubjectName_Provider' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Facial, SubjectName_Player) == 0x000008, "Member 'FFortAnimInput_Facial::SubjectName_Player' has a wrong offset!");
static_assert(offsetof(FFortAnimInput_Facial, CurrentAnimType) == 0x000010, "Member 'FFortAnimInput_Facial::CurrentAnimType' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaConsumableRecord
// 0x0010 (0x0010 - 0x0000)
struct FFortAthenaConsumableRecord final
{
public:
	class UFortAccountItemDefinition*             ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalQuantity;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaConsumableRecord) == 0x000008, "Wrong alignment on FFortAthenaConsumableRecord");
static_assert(sizeof(FFortAthenaConsumableRecord) == 0x000010, "Wrong size on FFortAthenaConsumableRecord");
static_assert(offsetof(FFortAthenaConsumableRecord, ItemType) == 0x000000, "Member 'FFortAthenaConsumableRecord::ItemType' has a wrong offset!");
static_assert(offsetof(FFortAthenaConsumableRecord, TotalQuantity) == 0x000008, "Member 'FFortAthenaConsumableRecord::TotalQuantity' has a wrong offset!");

// ScriptStruct FortniteGame.AntelopeVehicleBoostLevel
// 0x0008 (0x0008 - 0x0000)
struct FAntelopeVehicleBoostLevel final
{
public:
	float                                         AccumulationPercent;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTime;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAntelopeVehicleBoostLevel) == 0x000004, "Wrong alignment on FAntelopeVehicleBoostLevel");
static_assert(sizeof(FAntelopeVehicleBoostLevel) == 0x000008, "Wrong size on FAntelopeVehicleBoostLevel");
static_assert(offsetof(FAntelopeVehicleBoostLevel, AccumulationPercent) == 0x000000, "Member 'FAntelopeVehicleBoostLevel::AccumulationPercent' has a wrong offset!");
static_assert(offsetof(FAntelopeVehicleBoostLevel, BoostTime) == 0x000004, "Member 'FAntelopeVehicleBoostLevel::BoostTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaVehicleInputStateReliable
// 0x0001 (0x0001 - 0x0000)
struct FFortAthenaVehicleInputStateReliable final
{
public:
	uint8                                         bIsSprinting : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsJumping : 1;                                    // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBraking : 1;                                    // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsHonking : 1;                                    // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreForwardInAir : 1;                           // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMovementModifier0 : 1;                            // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMovementModifier1 : 1;                            // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMovementModifier2 : 1;                            // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FFortAthenaVehicleInputStateReliable) == 0x000001, "Wrong alignment on FFortAthenaVehicleInputStateReliable");
static_assert(sizeof(FFortAthenaVehicleInputStateReliable) == 0x000001, "Wrong size on FFortAthenaVehicleInputStateReliable");

// ScriptStruct FortniteGame.InventoryInfo
// 0x0010 (0x0010 - 0x0000)
struct FInventoryInfo final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortWorldItem*                         FortItem;                                          // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FInventoryInfo) == 0x000008, "Wrong alignment on FInventoryInfo");
static_assert(sizeof(FInventoryInfo) == 0x000010, "Wrong size on FInventoryInfo");
static_assert(offsetof(FInventoryInfo, ItemDefinition) == 0x000000, "Member 'FInventoryInfo::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FInventoryInfo, FortItem) == 0x000008, "Member 'FInventoryInfo::FortItem' has a wrong offset!");

// ScriptStruct FortniteGame.DamageDistanceTagEval
// 0x000C (0x000C - 0x0000)
struct FDamageDistanceTagEval final
{
public:
	float                                         DistanceLimit;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DistanceTag;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageDistanceTagEval) == 0x000004, "Wrong alignment on FDamageDistanceTagEval");
static_assert(sizeof(FDamageDistanceTagEval) == 0x00000C, "Wrong size on FDamageDistanceTagEval");
static_assert(offsetof(FDamageDistanceTagEval, DistanceLimit) == 0x000000, "Member 'FDamageDistanceTagEval::DistanceLimit' has a wrong offset!");
static_assert(offsetof(FDamageDistanceTagEval, DistanceTag) == 0x000004, "Member 'FDamageDistanceTagEval::DistanceTag' has a wrong offset!");

// ScriptStruct FortniteGame.AileronRoll
// 0x00E0 (0x00E0 - 0x0000)
struct FAileronRoll final
{
public:
	struct FFortRechargingActionTimer             Action;                                            // 0x0000(0x00D8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EAileronRollDirection                         Direction;                                         // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAileronRoll) == 0x000008, "Wrong alignment on FAileronRoll");
static_assert(sizeof(FAileronRoll) == 0x0000E0, "Wrong size on FAileronRoll");
static_assert(offsetof(FAileronRoll, Action) == 0x000000, "Member 'FAileronRoll::Action' has a wrong offset!");
static_assert(offsetof(FAileronRoll, Direction) == 0x0000D8, "Member 'FAileronRoll::Direction' has a wrong offset!");

// ScriptStruct FortniteGame.FlightControlSurfaces
// 0x0010 (0x0010 - 0x0000)
struct FFlightControlSurfaces final
{
public:
	float                                         RudderAngle;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AileronAngle;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElevatorAngle;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlapAngle;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlightControlSurfaces) == 0x000004, "Wrong alignment on FFlightControlSurfaces");
static_assert(sizeof(FFlightControlSurfaces) == 0x000010, "Wrong size on FFlightControlSurfaces");
static_assert(offsetof(FFlightControlSurfaces, RudderAngle) == 0x000000, "Member 'FFlightControlSurfaces::RudderAngle' has a wrong offset!");
static_assert(offsetof(FFlightControlSurfaces, AileronAngle) == 0x000004, "Member 'FFlightControlSurfaces::AileronAngle' has a wrong offset!");
static_assert(offsetof(FFlightControlSurfaces, ElevatorAngle) == 0x000008, "Member 'FFlightControlSurfaces::ElevatorAngle' has a wrong offset!");
static_assert(offsetof(FFlightControlSurfaces, FlapAngle) == 0x00000C, "Member 'FFlightControlSurfaces::FlapAngle' has a wrong offset!");

// ScriptStruct FortniteGame.ClientPilotBuildStep
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FClientPilotBuildStep final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientPilotBuildStep) == 0x000008, "Wrong alignment on FClientPilotBuildStep");
static_assert(sizeof(FClientPilotBuildStep) == 0x000040, "Wrong size on FClientPilotBuildStep");

// ScriptStruct FortniteGame.FortPIEMissionOverrideData
// 0x0001 (0x0001 - 0x0000)
struct FFortPIEMissionOverrideData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPIEMissionOverrideData) == 0x000001, "Wrong alignment on FFortPIEMissionOverrideData");
static_assert(sizeof(FFortPIEMissionOverrideData) == 0x000001, "Wrong size on FFortPIEMissionOverrideData");

// ScriptStruct FortniteGame.ExitCraftInfo
// 0x0188 (0x0188 - 0x0000)
struct FExitCraftInfo final
{
public:
	struct FGameplayTag                           RequiredExitCraftTag;                              // 0x0000(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ExitCraftSpawnerZOffset;                           // 0x0008(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ExitCraftSpawnDelay;                               // 0x0028(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpawnDestructionInitialDelay;                      // 0x0048(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpawnDestructionDelayBetweenPieces;                // 0x0068(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ExitCraftZOffset;                                  // 0x0088(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ExitCraftTargetZOffset;                            // 0x00A8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ExitCraftTimeToHoverLocation;                      // 0x00C8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ExitCraftTimeToHoverRotation;                      // 0x00E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinLandingSpeed;                                   // 0x0108(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ExitZOffset;                                       // 0x0128(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ExitTime;                                          // 0x0148(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         InteractionTime;                                   // 0x0168(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExitCraftInfo) == 0x000008, "Wrong alignment on FExitCraftInfo");
static_assert(sizeof(FExitCraftInfo) == 0x000188, "Wrong size on FExitCraftInfo");
static_assert(offsetof(FExitCraftInfo, RequiredExitCraftTag) == 0x000000, "Member 'FExitCraftInfo::RequiredExitCraftTag' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, ExitCraftSpawnerZOffset) == 0x000008, "Member 'FExitCraftInfo::ExitCraftSpawnerZOffset' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, ExitCraftSpawnDelay) == 0x000028, "Member 'FExitCraftInfo::ExitCraftSpawnDelay' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, SpawnDestructionInitialDelay) == 0x000048, "Member 'FExitCraftInfo::SpawnDestructionInitialDelay' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, SpawnDestructionDelayBetweenPieces) == 0x000068, "Member 'FExitCraftInfo::SpawnDestructionDelayBetweenPieces' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, ExitCraftZOffset) == 0x000088, "Member 'FExitCraftInfo::ExitCraftZOffset' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, ExitCraftTargetZOffset) == 0x0000A8, "Member 'FExitCraftInfo::ExitCraftTargetZOffset' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, ExitCraftTimeToHoverLocation) == 0x0000C8, "Member 'FExitCraftInfo::ExitCraftTimeToHoverLocation' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, ExitCraftTimeToHoverRotation) == 0x0000E8, "Member 'FExitCraftInfo::ExitCraftTimeToHoverRotation' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, MinLandingSpeed) == 0x000108, "Member 'FExitCraftInfo::MinLandingSpeed' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, ExitZOffset) == 0x000128, "Member 'FExitCraftInfo::ExitZOffset' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, ExitTime) == 0x000148, "Member 'FExitCraftInfo::ExitTime' has a wrong offset!");
static_assert(offsetof(FExitCraftInfo, InteractionTime) == 0x000168, "Member 'FExitCraftInfo::InteractionTime' has a wrong offset!");

// ScriptStruct FortniteGame.DisplayManagerVariantData
// 0x0018 (0x0018 - 0x0000)
struct FDisplayManagerVariantData final
{
public:
	class UAthenaCosmeticItemDefinition*          CosmeticItemDef;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMcpVariantChannelInfo>         CosmeticVariantChannels;                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDisplayManagerVariantData) == 0x000008, "Wrong alignment on FDisplayManagerVariantData");
static_assert(sizeof(FDisplayManagerVariantData) == 0x000018, "Wrong size on FDisplayManagerVariantData");
static_assert(offsetof(FDisplayManagerVariantData, CosmeticItemDef) == 0x000000, "Member 'FDisplayManagerVariantData::CosmeticItemDef' has a wrong offset!");
static_assert(offsetof(FDisplayManagerVariantData, CosmeticVariantChannels) == 0x000008, "Member 'FDisplayManagerVariantData::CosmeticVariantChannels' has a wrong offset!");

// ScriptStruct FortniteGame.CosmeticLoadoutPartyReplState
// 0x0058 (0x0058 - 0x0000)
struct FCosmeticLoadoutPartyReplState final
{
public:
	class FString                                 BackpackPersistentName;                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerIconId;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerColorId;                                     // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePassLevel;                                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePassSelfBoostXp;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattlePassFriendBoostXp;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDisplayManagerVariantData             AthenaCharacterVariantInfo;                        // 0x0040(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmeticLoadoutPartyReplState) == 0x000008, "Wrong alignment on FCosmeticLoadoutPartyReplState");
static_assert(sizeof(FCosmeticLoadoutPartyReplState) == 0x000058, "Wrong size on FCosmeticLoadoutPartyReplState");
static_assert(offsetof(FCosmeticLoadoutPartyReplState, BackpackPersistentName) == 0x000000, "Member 'FCosmeticLoadoutPartyReplState::BackpackPersistentName' has a wrong offset!");
static_assert(offsetof(FCosmeticLoadoutPartyReplState, BannerIconId) == 0x000010, "Member 'FCosmeticLoadoutPartyReplState::BannerIconId' has a wrong offset!");
static_assert(offsetof(FCosmeticLoadoutPartyReplState, BannerColorId) == 0x000020, "Member 'FCosmeticLoadoutPartyReplState::BannerColorId' has a wrong offset!");
static_assert(offsetof(FCosmeticLoadoutPartyReplState, BattlePassLevel) == 0x000030, "Member 'FCosmeticLoadoutPartyReplState::BattlePassLevel' has a wrong offset!");
static_assert(offsetof(FCosmeticLoadoutPartyReplState, BattlePassSelfBoostXp) == 0x000034, "Member 'FCosmeticLoadoutPartyReplState::BattlePassSelfBoostXp' has a wrong offset!");
static_assert(offsetof(FCosmeticLoadoutPartyReplState, BattlePassFriendBoostXp) == 0x000038, "Member 'FCosmeticLoadoutPartyReplState::BattlePassFriendBoostXp' has a wrong offset!");
static_assert(offsetof(FCosmeticLoadoutPartyReplState, AthenaCharacterVariantInfo) == 0x000040, "Member 'FCosmeticLoadoutPartyReplState::AthenaCharacterVariantInfo' has a wrong offset!");

// ScriptStruct FortniteGame.FortRespawnLogicData
// 0x0100 (0x0100 - 0x0000)
struct FFortRespawnLogicData
{
public:
	struct FScalableFloat                         DirectionDeviation;                                // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinDistFromCenterPercent;                          // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxDistFromCenterPercent;                          // 0x0040(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SingleBusRespawnNearDeathLocation;                 // 0x0060(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinHeightFromGround;                               // 0x0080(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinHeightFromZero;                                 // 0x00A0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CameraDistance;                                    // 0x00C0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RespawnTraceHeight;                                // 0x00E0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRespawnLogicData) == 0x000008, "Wrong alignment on FFortRespawnLogicData");
static_assert(sizeof(FFortRespawnLogicData) == 0x000100, "Wrong size on FFortRespawnLogicData");
static_assert(offsetof(FFortRespawnLogicData, DirectionDeviation) == 0x000000, "Member 'FFortRespawnLogicData::DirectionDeviation' has a wrong offset!");
static_assert(offsetof(FFortRespawnLogicData, MinDistFromCenterPercent) == 0x000020, "Member 'FFortRespawnLogicData::MinDistFromCenterPercent' has a wrong offset!");
static_assert(offsetof(FFortRespawnLogicData, MaxDistFromCenterPercent) == 0x000040, "Member 'FFortRespawnLogicData::MaxDistFromCenterPercent' has a wrong offset!");
static_assert(offsetof(FFortRespawnLogicData, SingleBusRespawnNearDeathLocation) == 0x000060, "Member 'FFortRespawnLogicData::SingleBusRespawnNearDeathLocation' has a wrong offset!");
static_assert(offsetof(FFortRespawnLogicData, MinHeightFromGround) == 0x000080, "Member 'FFortRespawnLogicData::MinHeightFromGround' has a wrong offset!");
static_assert(offsetof(FFortRespawnLogicData, MinHeightFromZero) == 0x0000A0, "Member 'FFortRespawnLogicData::MinHeightFromZero' has a wrong offset!");
static_assert(offsetof(FFortRespawnLogicData, CameraDistance) == 0x0000C0, "Member 'FFortRespawnLogicData::CameraDistance' has a wrong offset!");
static_assert(offsetof(FFortRespawnLogicData, RespawnTraceHeight) == 0x0000E0, "Member 'FFortRespawnLogicData::RespawnTraceHeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortPointOnCurveRange
// 0x0008 (0x0008 - 0x0000)
struct FFortPointOnCurveRange final
{
public:
	float                                         MinPercentage;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPercentage;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPointOnCurveRange) == 0x000004, "Wrong alignment on FFortPointOnCurveRange");
static_assert(sizeof(FFortPointOnCurveRange) == 0x000008, "Wrong size on FFortPointOnCurveRange");
static_assert(offsetof(FFortPointOnCurveRange, MinPercentage) == 0x000000, "Member 'FFortPointOnCurveRange::MinPercentage' has a wrong offset!");
static_assert(offsetof(FFortPointOnCurveRange, MaxPercentage) == 0x000004, "Member 'FFortPointOnCurveRange::MaxPercentage' has a wrong offset!");

// ScriptStruct FortniteGame.FortPointsOnCurve
// 0x0038 (0x0038 - 0x0000)
struct FFortPointsOnCurve final
{
public:
	TSoftObjectPtr<class UCurveFloat>             Curve;                                             // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortPointOnCurveRange>         RangesForPointsOnCurve;                            // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPointsOnCurve) == 0x000008, "Wrong alignment on FFortPointsOnCurve");
static_assert(sizeof(FFortPointsOnCurve) == 0x000038, "Wrong size on FFortPointsOnCurve");
static_assert(offsetof(FFortPointsOnCurve, Curve) == 0x000000, "Member 'FFortPointsOnCurve::Curve' has a wrong offset!");
static_assert(offsetof(FFortPointsOnCurve, RangesForPointsOnCurve) == 0x000028, "Member 'FFortPointsOnCurve::RangesForPointsOnCurve' has a wrong offset!");

// ScriptStruct FortniteGame.FortRespawnLogicData_Teams
// 0x0080 (0x0180 - 0x0100)
struct FFortRespawnLogicData_Teams final : public FFortRespawnLogicData
{
public:
	struct FScalableFloat                         TryPlaceByTeammates;                               // 0x0100(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AlsoPlaceBehindTeammates;                          // 0x0120(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxDistanceFromTeammates;                          // 0x0140(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinDistanceFromTeammates;                          // 0x0160(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRespawnLogicData_Teams) == 0x000008, "Wrong alignment on FFortRespawnLogicData_Teams");
static_assert(sizeof(FFortRespawnLogicData_Teams) == 0x000180, "Wrong size on FFortRespawnLogicData_Teams");
static_assert(offsetof(FFortRespawnLogicData_Teams, TryPlaceByTeammates) == 0x000100, "Member 'FFortRespawnLogicData_Teams::TryPlaceByTeammates' has a wrong offset!");
static_assert(offsetof(FFortRespawnLogicData_Teams, AlsoPlaceBehindTeammates) == 0x000120, "Member 'FFortRespawnLogicData_Teams::AlsoPlaceBehindTeammates' has a wrong offset!");
static_assert(offsetof(FFortRespawnLogicData_Teams, MaxDistanceFromTeammates) == 0x000140, "Member 'FFortRespawnLogicData_Teams::MaxDistanceFromTeammates' has a wrong offset!");
static_assert(offsetof(FFortRespawnLogicData_Teams, MinDistanceFromTeammates) == 0x000160, "Member 'FFortRespawnLogicData_Teams::MinDistanceFromTeammates' has a wrong offset!");

// ScriptStruct FortniteGame.AshtonStoneSpawnData
// 0x0040 (0x00C0 - 0x0080)
struct FAshtonStoneSpawnData final : public FFortPieSliceSpawnData
{
public:
	struct FScalableFloat                         SpawnDelay;                                        // 0x0080(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpawnSafeZoneIndex;                                // 0x00A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAshtonStoneSpawnData) == 0x000008, "Wrong alignment on FAshtonStoneSpawnData");
static_assert(sizeof(FAshtonStoneSpawnData) == 0x0000C0, "Wrong size on FAshtonStoneSpawnData");
static_assert(offsetof(FAshtonStoneSpawnData, SpawnDelay) == 0x000080, "Member 'FAshtonStoneSpawnData::SpawnDelay' has a wrong offset!");
static_assert(offsetof(FAshtonStoneSpawnData, SpawnSafeZoneIndex) == 0x0000A0, "Member 'FAshtonStoneSpawnData::SpawnSafeZoneIndex' has a wrong offset!");

// ScriptStruct FortniteGame.BarrierMountedTurretData
// 0x0018 (0x0018 - 0x0000)
struct FBarrierMountedTurretData final
{
public:
	TArray<class UMaterialInterface*>             MaterialOverrides;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BaseMaterialOverride;                              // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBarrierMountedTurretData) == 0x000008, "Wrong alignment on FBarrierMountedTurretData");
static_assert(sizeof(FBarrierMountedTurretData) == 0x000018, "Wrong size on FBarrierMountedTurretData");
static_assert(offsetof(FBarrierMountedTurretData, MaterialOverrides) == 0x000000, "Member 'FBarrierMountedTurretData::MaterialOverrides' has a wrong offset!");
static_assert(offsetof(FBarrierMountedTurretData, BaseMaterialOverride) == 0x000010, "Member 'FBarrierMountedTurretData::BaseMaterialOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterColorInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortTheaterColorInfo final
{
public:
	bool                                          bUseDifficultyToDetermineColor;                    // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            Color;                                             // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterColorInfo) == 0x000008, "Wrong alignment on FFortTheaterColorInfo");
static_assert(sizeof(FFortTheaterColorInfo) == 0x000030, "Wrong size on FFortTheaterColorInfo");
static_assert(offsetof(FFortTheaterColorInfo, bUseDifficultyToDetermineColor) == 0x000000, "Member 'FFortTheaterColorInfo::bUseDifficultyToDetermineColor' has a wrong offset!");
static_assert(offsetof(FFortTheaterColorInfo, Color) == 0x000008, "Member 'FFortTheaterColorInfo::Color' has a wrong offset!");

// ScriptStruct FortniteGame.BarrierTeamState
// 0x0028 (0x0028 - 0x0000)
struct FBarrierTeamState final
{
public:
	uint8                                         TeamNum;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarrierFoodTeam                              FoodTeam;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAthenaBarrierFlag*                     ObjectiveFlag;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAthenaBarrierObjective*                ObjectiveObject;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespawnEnabled;                                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0xF];                                       // 0x0019(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBarrierTeamState) == 0x000008, "Wrong alignment on FBarrierTeamState");
static_assert(sizeof(FBarrierTeamState) == 0x000028, "Wrong size on FBarrierTeamState");
static_assert(offsetof(FBarrierTeamState, TeamNum) == 0x000000, "Member 'FBarrierTeamState::TeamNum' has a wrong offset!");
static_assert(offsetof(FBarrierTeamState, FoodTeam) == 0x000001, "Member 'FBarrierTeamState::FoodTeam' has a wrong offset!");
static_assert(offsetof(FBarrierTeamState, ObjectiveFlag) == 0x000008, "Member 'FBarrierTeamState::ObjectiveFlag' has a wrong offset!");
static_assert(offsetof(FBarrierTeamState, ObjectiveObject) == 0x000010, "Member 'FBarrierTeamState::ObjectiveObject' has a wrong offset!");
static_assert(offsetof(FBarrierTeamState, bRespawnEnabled) == 0x000018, "Member 'FBarrierTeamState::bRespawnEnabled' has a wrong offset!");

// ScriptStruct FortniteGame.LocationPOIList
// 0x0050 (0x0050 - 0x0000)
struct FLocationPOIList final
{
public:
	struct FScalableFloat                         Enabled;                                           // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ChanceToApply;                                     // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FCenterOnLocationPOI>           List;                                              // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocationPOIList) == 0x000008, "Wrong alignment on FLocationPOIList");
static_assert(sizeof(FLocationPOIList) == 0x000050, "Wrong size on FLocationPOIList");
static_assert(offsetof(FLocationPOIList, Enabled) == 0x000000, "Member 'FLocationPOIList::Enabled' has a wrong offset!");
static_assert(offsetof(FLocationPOIList, ChanceToApply) == 0x000020, "Member 'FLocationPOIList::ChanceToApply' has a wrong offset!");
static_assert(offsetof(FLocationPOIList, List) == 0x000040, "Member 'FLocationPOIList::List' has a wrong offset!");

// ScriptStruct FortniteGame.TaggedPOIList
// 0x0050 (0x0050 - 0x0000)
struct FTaggedPOIList final
{
public:
	struct FScalableFloat                         Enabled;                                           // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ChanceToApply;                                     // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FCenterOnTaggedPOI>             List;                                              // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaggedPOIList) == 0x000008, "Wrong alignment on FTaggedPOIList");
static_assert(sizeof(FTaggedPOIList) == 0x000050, "Wrong size on FTaggedPOIList");
static_assert(offsetof(FTaggedPOIList, Enabled) == 0x000000, "Member 'FTaggedPOIList::Enabled' has a wrong offset!");
static_assert(offsetof(FTaggedPOIList, ChanceToApply) == 0x000020, "Member 'FTaggedPOIList::ChanceToApply' has a wrong offset!");
static_assert(offsetof(FTaggedPOIList, List) == 0x000040, "Member 'FTaggedPOIList::List' has a wrong offset!");

// ScriptStruct FortniteGame.CrucibleSegmentData
// 0x0020 (0x0020 - 0x0000)
struct FCrucibleSegmentData final
{
public:
	int32                                         NumAI;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTargets;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MissedTargetPenalty;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BackendStatName;                                   // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrucibleSegmentData) == 0x000008, "Wrong alignment on FCrucibleSegmentData");
static_assert(sizeof(FCrucibleSegmentData) == 0x000020, "Wrong size on FCrucibleSegmentData");
static_assert(offsetof(FCrucibleSegmentData, NumAI) == 0x000000, "Member 'FCrucibleSegmentData::NumAI' has a wrong offset!");
static_assert(offsetof(FCrucibleSegmentData, NumTargets) == 0x000004, "Member 'FCrucibleSegmentData::NumTargets' has a wrong offset!");
static_assert(offsetof(FCrucibleSegmentData, MissedTargetPenalty) == 0x000008, "Member 'FCrucibleSegmentData::MissedTargetPenalty' has a wrong offset!");
static_assert(offsetof(FCrucibleSegmentData, BackendStatName) == 0x000010, "Member 'FCrucibleSegmentData::BackendStatName' has a wrong offset!");

// ScriptStruct FortniteGame.FortTeamPerkSlotFilteringData
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FFortTeamPerkSlotFilteringData final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTeamPerkSlotFilteringData) == 0x000004, "Wrong alignment on FFortTeamPerkSlotFilteringData");
static_assert(sizeof(FFortTeamPerkSlotFilteringData) == 0x00000C, "Wrong size on FFortTeamPerkSlotFilteringData");

// ScriptStruct FortniteGame.ControlPointInstanceData
// 0x0050 (0x0050 - 0x0000)
struct FControlPointInstanceData final
{
public:
	class AAthenaCapturePoint*                    ControlPoint;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlPointState                            ControlPointState;                                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnDataIdx;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnTime;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableTime;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisableTime;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrevOwningTeam;                                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortTeamInfoAthena*                    CachedOwningTeamInfo;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointAccrualTime;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsRemainder;                                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusPointAccrualTime;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusPointsRemainder;                              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedPointAccrualValue;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedBonusPointAccrualValue;                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPointFinished;                                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CachedSafeZonePhaseWhenToSpawn;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreForOrderMessaging;                          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysInPlay;                                     // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeOfShutdown;                                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlPointInstanceData) == 0x000008, "Wrong alignment on FControlPointInstanceData");
static_assert(sizeof(FControlPointInstanceData) == 0x000050, "Wrong size on FControlPointInstanceData");
static_assert(offsetof(FControlPointInstanceData, ControlPoint) == 0x000000, "Member 'FControlPointInstanceData::ControlPoint' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, ControlPointState) == 0x000008, "Member 'FControlPointInstanceData::ControlPointState' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, SpawnDataIdx) == 0x00000C, "Member 'FControlPointInstanceData::SpawnDataIdx' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, SpawnTime) == 0x000010, "Member 'FControlPointInstanceData::SpawnTime' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, EnableTime) == 0x000014, "Member 'FControlPointInstanceData::EnableTime' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, DisableTime) == 0x000018, "Member 'FControlPointInstanceData::DisableTime' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, PrevOwningTeam) == 0x00001C, "Member 'FControlPointInstanceData::PrevOwningTeam' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, CachedOwningTeamInfo) == 0x000020, "Member 'FControlPointInstanceData::CachedOwningTeamInfo' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, PointAccrualTime) == 0x000028, "Member 'FControlPointInstanceData::PointAccrualTime' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, PointsRemainder) == 0x00002C, "Member 'FControlPointInstanceData::PointsRemainder' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, BonusPointAccrualTime) == 0x000030, "Member 'FControlPointInstanceData::BonusPointAccrualTime' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, BonusPointsRemainder) == 0x000034, "Member 'FControlPointInstanceData::BonusPointsRemainder' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, CachedPointAccrualValue) == 0x000038, "Member 'FControlPointInstanceData::CachedPointAccrualValue' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, CachedBonusPointAccrualValue) == 0x00003C, "Member 'FControlPointInstanceData::CachedBonusPointAccrualValue' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, bPointFinished) == 0x000040, "Member 'FControlPointInstanceData::bPointFinished' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, CachedSafeZonePhaseWhenToSpawn) == 0x000044, "Member 'FControlPointInstanceData::CachedSafeZonePhaseWhenToSpawn' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, bIgnoreForOrderMessaging) == 0x000048, "Member 'FControlPointInstanceData::bIgnoreForOrderMessaging' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, bAlwaysInPlay) == 0x000049, "Member 'FControlPointInstanceData::bAlwaysInPlay' has a wrong offset!");
static_assert(offsetof(FControlPointInstanceData, TimeOfShutdown) == 0x00004C, "Member 'FControlPointInstanceData::TimeOfShutdown' has a wrong offset!");

// ScriptStruct FortniteGame.FortSplineMeshScaleAnimationInfo
// 0x0010 (0x0028 - 0x0018)
struct FFortSplineMeshScaleAnimationInfo final : public FFortFXAnimationInfoBase
{
public:
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSplineMeshScaleAnimationInfo) == 0x000008, "Wrong alignment on FFortSplineMeshScaleAnimationInfo");
static_assert(sizeof(FFortSplineMeshScaleAnimationInfo) == 0x000028, "Wrong size on FFortSplineMeshScaleAnimationInfo");

// ScriptStruct FortniteGame.FortSplineMeshSnapAnimationInfo
// 0x0010 (0x0028 - 0x0018)
struct FFortSplineMeshSnapAnimationInfo final : public FFortFXAnimationInfoBase
{
public:
	class USplineComponent*                       TargetSpline;                                      // 0x0018(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSplineMeshSnapAnimationInfo) == 0x000008, "Wrong alignment on FFortSplineMeshSnapAnimationInfo");
static_assert(sizeof(FFortSplineMeshSnapAnimationInfo) == 0x000028, "Wrong size on FFortSplineMeshSnapAnimationInfo");
static_assert(offsetof(FFortSplineMeshSnapAnimationInfo, TargetSpline) == 0x000018, "Member 'FFortSplineMeshSnapAnimationInfo::TargetSpline' has a wrong offset!");

// ScriptStruct FortniteGame.FortSplineMeshAnimSet
// 0x0030 (0x0030 - 0x0000)
struct FFortSplineMeshAnimSet final
{
public:
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortSplineMeshScaleAnimationInfo> ScaleAnims;                                        // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FFortSplineMeshSnapAnimationInfo> SnapAnims;                                         // 0x0018(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSplineMeshAnimSet) == 0x000008, "Wrong alignment on FFortSplineMeshAnimSet");
static_assert(sizeof(FFortSplineMeshAnimSet) == 0x000030, "Wrong size on FFortSplineMeshAnimSet");
static_assert(offsetof(FFortSplineMeshAnimSet, SplineMesh) == 0x000000, "Member 'FFortSplineMeshAnimSet::SplineMesh' has a wrong offset!");
static_assert(offsetof(FFortSplineMeshAnimSet, ScaleAnims) == 0x000008, "Member 'FFortSplineMeshAnimSet::ScaleAnims' has a wrong offset!");
static_assert(offsetof(FFortSplineMeshAnimSet, SnapAnims) == 0x000018, "Member 'FFortSplineMeshAnimSet::SnapAnims' has a wrong offset!");

// ScriptStruct FortniteGame.ControlPointAssetData
// 0x0038 (0x0038 - 0x0000)
struct FControlPointAssetData final
{
public:
	TSubclassOf<class AAthenaCapturePoint>        CapturePointClass;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpawnDistanceFromGround;                           // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              MiniMapIconScale;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CompassIconScale;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlPointAssetData) == 0x000008, "Wrong alignment on FControlPointAssetData");
static_assert(sizeof(FControlPointAssetData) == 0x000038, "Wrong size on FControlPointAssetData");
static_assert(offsetof(FControlPointAssetData, CapturePointClass) == 0x000000, "Member 'FControlPointAssetData::CapturePointClass' has a wrong offset!");
static_assert(offsetof(FControlPointAssetData, SpawnDistanceFromGround) == 0x000008, "Member 'FControlPointAssetData::SpawnDistanceFromGround' has a wrong offset!");
static_assert(offsetof(FControlPointAssetData, MiniMapIconScale) == 0x000028, "Member 'FControlPointAssetData::MiniMapIconScale' has a wrong offset!");
static_assert(offsetof(FControlPointAssetData, CompassIconScale) == 0x000030, "Member 'FControlPointAssetData::CompassIconScale' has a wrong offset!");

// ScriptStruct FortniteGame.GunGamePlayerData
// 0x0010 (0x0010 - 0x0000)
struct FGunGamePlayerData final
{
public:
	TArray<class UFortWeaponItemDefinition*>      CurrentlyAssignedWeapons;                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunGamePlayerData) == 0x000008, "Wrong alignment on FGunGamePlayerData");
static_assert(sizeof(FGunGamePlayerData) == 0x000010, "Wrong size on FGunGamePlayerData");
static_assert(offsetof(FGunGamePlayerData, CurrentlyAssignedWeapons) == 0x000000, "Member 'FGunGamePlayerData::CurrentlyAssignedWeapons' has a wrong offset!");

// ScriptStruct FortniteGame.FortCosmeticLockerSlotInformation
// 0x000C (0x000C - 0x0000)
struct FFortCosmeticLockerSlotInformation final
{
public:
	EAthenaCustomizationCategory                  CustomizationCategory;                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSlotsOfCategory;                                // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeBlank;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCosmeticLockerSlotInformation) == 0x000004, "Wrong alignment on FFortCosmeticLockerSlotInformation");
static_assert(sizeof(FFortCosmeticLockerSlotInformation) == 0x00000C, "Wrong size on FFortCosmeticLockerSlotInformation");
static_assert(offsetof(FFortCosmeticLockerSlotInformation, CustomizationCategory) == 0x000000, "Member 'FFortCosmeticLockerSlotInformation::CustomizationCategory' has a wrong offset!");
static_assert(offsetof(FFortCosmeticLockerSlotInformation, NumSlotsOfCategory) == 0x000004, "Member 'FFortCosmeticLockerSlotInformation::NumSlotsOfCategory' has a wrong offset!");
static_assert(offsetof(FFortCosmeticLockerSlotInformation, bCanBeBlank) == 0x000008, "Member 'FFortCosmeticLockerSlotInformation::bCanBeBlank' has a wrong offset!");

// ScriptStruct FortniteGame.ItemsToGive
// 0x0028 (0x0028 - 0x0000)
struct FItemsToGive final
{
public:
	class UFortWorldItemDefinition*               ItemToDrop;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         NumberToGive;                                      // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemsToGive) == 0x000008, "Wrong alignment on FItemsToGive");
static_assert(sizeof(FItemsToGive) == 0x000028, "Wrong size on FItemsToGive");
static_assert(offsetof(FItemsToGive, ItemToDrop) == 0x000000, "Member 'FItemsToGive::ItemToDrop' has a wrong offset!");
static_assert(offsetof(FItemsToGive, NumberToGive) == 0x000008, "Member 'FItemsToGive::NumberToGive' has a wrong offset!");

// ScriptStruct FortniteGame.FortChaseCameraHelper
// 0x0150 (0x0150 - 0x0000)
struct FFortChaseCameraHelper final
{
public:
	struct FTransform                             PivotToViewTarget;                                 // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             PivotToViewTarget_Crouching;                       // 0x0030(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             MinCameraToPivot;                                  // 0x0060(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             MaxCameraToPivot;                                  // 0x0090(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraToPivotAlphaInterpSpeed;                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraCollisionSphereRadius;                       // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PivotLocationInterpSpeed;                          // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PivotRotationInterpSpeed;                          // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x1];                                       // 0x00D8(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EThirdPersonAutoFollowMode                    AutoFollowMode;                                    // 0x00D9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraTruckRate;                                   // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoFollowPitch;                                   // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LazyAutoFollowPitchMin;                            // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LazyAutoFollowPitchMax;                            // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x64];                                      // 0x00EC(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortChaseCameraHelper) == 0x000010, "Wrong alignment on FFortChaseCameraHelper");
static_assert(sizeof(FFortChaseCameraHelper) == 0x000150, "Wrong size on FFortChaseCameraHelper");
static_assert(offsetof(FFortChaseCameraHelper, PivotToViewTarget) == 0x000000, "Member 'FFortChaseCameraHelper::PivotToViewTarget' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, PivotToViewTarget_Crouching) == 0x000030, "Member 'FFortChaseCameraHelper::PivotToViewTarget_Crouching' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, MinCameraToPivot) == 0x000060, "Member 'FFortChaseCameraHelper::MinCameraToPivot' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, MaxCameraToPivot) == 0x000090, "Member 'FFortChaseCameraHelper::MaxCameraToPivot' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, CameraToPivotAlphaInterpSpeed) == 0x0000C8, "Member 'FFortChaseCameraHelper::CameraToPivotAlphaInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, CameraCollisionSphereRadius) == 0x0000CC, "Member 'FFortChaseCameraHelper::CameraCollisionSphereRadius' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, PivotLocationInterpSpeed) == 0x0000D0, "Member 'FFortChaseCameraHelper::PivotLocationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, PivotRotationInterpSpeed) == 0x0000D4, "Member 'FFortChaseCameraHelper::PivotRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, AutoFollowMode) == 0x0000D9, "Member 'FFortChaseCameraHelper::AutoFollowMode' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, CameraTruckRate) == 0x0000DC, "Member 'FFortChaseCameraHelper::CameraTruckRate' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, AutoFollowPitch) == 0x0000E0, "Member 'FFortChaseCameraHelper::AutoFollowPitch' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, LazyAutoFollowPitchMin) == 0x0000E4, "Member 'FFortChaseCameraHelper::LazyAutoFollowPitchMin' has a wrong offset!");
static_assert(offsetof(FFortChaseCameraHelper, LazyAutoFollowPitchMax) == 0x0000E8, "Member 'FFortChaseCameraHelper::LazyAutoFollowPitchMax' has a wrong offset!");

// ScriptStruct FortniteGame.PlaneSpawnData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FPlaneSpawnData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaneSpawnData) == 0x000004, "Wrong alignment on FPlaneSpawnData");
static_assert(sizeof(FPlaneSpawnData) == 0x000018, "Wrong size on FPlaneSpawnData");

// ScriptStruct FortniteGame.GravityMovementData
// 0x0014 (0x0014 - 0x0000)
struct FGravityMovementData final
{
public:
	float                                         GravityZScale;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleGravityZScale;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpZVelocityOverride;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpHorizontalAccelerationOverride;                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpHorizontalVelocityOverride;                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGravityMovementData) == 0x000004, "Wrong alignment on FGravityMovementData");
static_assert(sizeof(FGravityMovementData) == 0x000014, "Wrong size on FGravityMovementData");
static_assert(offsetof(FGravityMovementData, GravityZScale) == 0x000000, "Member 'FGravityMovementData::GravityZScale' has a wrong offset!");
static_assert(offsetof(FGravityMovementData, VehicleGravityZScale) == 0x000004, "Member 'FGravityMovementData::VehicleGravityZScale' has a wrong offset!");
static_assert(offsetof(FGravityMovementData, JumpZVelocityOverride) == 0x000008, "Member 'FGravityMovementData::JumpZVelocityOverride' has a wrong offset!");
static_assert(offsetof(FGravityMovementData, JumpHorizontalAccelerationOverride) == 0x00000C, "Member 'FGravityMovementData::JumpHorizontalAccelerationOverride' has a wrong offset!");
static_assert(offsetof(FGravityMovementData, JumpHorizontalVelocityOverride) == 0x000010, "Member 'FGravityMovementData::JumpHorizontalVelocityOverride' has a wrong offset!");

// ScriptStruct FortniteGame.VortexParams
// 0x0010 (0x0010 - 0x0000)
struct FVortexParams final
{
public:
	float                                         GravityFloorAltitude;                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityFloorWidth;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityFloorGravityScalar;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityFloorTerminalVelocity;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVortexParams) == 0x000004, "Wrong alignment on FVortexParams");
static_assert(sizeof(FVortexParams) == 0x000010, "Wrong size on FVortexParams");
static_assert(offsetof(FVortexParams, GravityFloorAltitude) == 0x000000, "Member 'FVortexParams::GravityFloorAltitude' has a wrong offset!");
static_assert(offsetof(FVortexParams, GravityFloorWidth) == 0x000004, "Member 'FVortexParams::GravityFloorWidth' has a wrong offset!");
static_assert(offsetof(FVortexParams, GravityFloorGravityScalar) == 0x000008, "Member 'FVortexParams::GravityFloorGravityScalar' has a wrong offset!");
static_assert(offsetof(FVortexParams, GravityFloorTerminalVelocity) == 0x00000C, "Member 'FVortexParams::GravityFloorTerminalVelocity' has a wrong offset!");

// ScriptStruct FortniteGame.HeistTeamHoldingJewelInfo
// 0x000C (0x000C - 0x0000)
struct FHeistTeamHoldingJewelInfo final
{
public:
	int32                                         JewelsHeld;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeStartedHoldingJewel;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedTotalTime;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeistTeamHoldingJewelInfo) == 0x000004, "Wrong alignment on FHeistTeamHoldingJewelInfo");
static_assert(sizeof(FHeistTeamHoldingJewelInfo) == 0x00000C, "Wrong size on FHeistTeamHoldingJewelInfo");
static_assert(offsetof(FHeistTeamHoldingJewelInfo, JewelsHeld) == 0x000000, "Member 'FHeistTeamHoldingJewelInfo::JewelsHeld' has a wrong offset!");
static_assert(offsetof(FHeistTeamHoldingJewelInfo, TimeStartedHoldingJewel) == 0x000004, "Member 'FHeistTeamHoldingJewelInfo::TimeStartedHoldingJewel' has a wrong offset!");
static_assert(offsetof(FHeistTeamHoldingJewelInfo, AccumulatedTotalTime) == 0x000008, "Member 'FHeistTeamHoldingJewelInfo::AccumulatedTotalTime' has a wrong offset!");

// ScriptStruct FortniteGame.RewardBadgesProgression
// 0x0010 (0x0010 - 0x0000)
struct FRewardBadgesProgression final
{
public:
	TArray<class UFortBadgeItemDefinition*>       RewardBadges;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardBadgesProgression) == 0x000008, "Wrong alignment on FRewardBadgesProgression");
static_assert(sizeof(FRewardBadgesProgression) == 0x000010, "Wrong size on FRewardBadgesProgression");
static_assert(offsetof(FRewardBadgesProgression, RewardBadges) == 0x000000, "Member 'FRewardBadgesProgression::RewardBadges' has a wrong offset!");

// ScriptStruct FortniteGame.HeistExitCraftSpawnData
// 0x0060 (0x00E0 - 0x0080)
struct FHeistExitCraftSpawnData final : public FFortPieSliceSpawnData
{
public:
	struct FScalableFloat                         SpawnDelayTime;                                    // 0x0080(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SafeZonePhaseWhenToSpawn;                          // 0x00A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SafeZonePhaseWhereToSpawn;                         // 0x00C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeistExitCraftSpawnData) == 0x000008, "Wrong alignment on FHeistExitCraftSpawnData");
static_assert(sizeof(FHeistExitCraftSpawnData) == 0x0000E0, "Wrong size on FHeistExitCraftSpawnData");
static_assert(offsetof(FHeistExitCraftSpawnData, SpawnDelayTime) == 0x000080, "Member 'FHeistExitCraftSpawnData::SpawnDelayTime' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftSpawnData, SafeZonePhaseWhenToSpawn) == 0x0000A0, "Member 'FHeistExitCraftSpawnData::SafeZonePhaseWhenToSpawn' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftSpawnData, SafeZonePhaseWhereToSpawn) == 0x0000C0, "Member 'FHeistExitCraftSpawnData::SafeZonePhaseWhereToSpawn' has a wrong offset!");

// ScriptStruct FortniteGame.FortMontageInputAction
// 0x0014 (0x0014 - 0x0000)
struct FFortMontageInputAction final
{
public:
	struct FGameplayTag                           TriggerAbilityTag;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextSection;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMontageInputType                         InputType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMontageInputAction) == 0x000004, "Wrong alignment on FFortMontageInputAction");
static_assert(sizeof(FFortMontageInputAction) == 0x000014, "Wrong size on FFortMontageInputAction");
static_assert(offsetof(FFortMontageInputAction, TriggerAbilityTag) == 0x000000, "Member 'FFortMontageInputAction::TriggerAbilityTag' has a wrong offset!");
static_assert(offsetof(FFortMontageInputAction, NextSection) == 0x000008, "Member 'FFortMontageInputAction::NextSection' has a wrong offset!");
static_assert(offsetof(FFortMontageInputAction, InputType) == 0x000010, "Member 'FFortMontageInputAction::InputType' has a wrong offset!");

// ScriptStruct FortniteGame.InteractionType
// 0x0038 (0x0038 - 0x0000)
struct FInteractionType final
{
public:
	ETInteractionType                             InteractionType;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AFortPlayerPawn>         RequestingPawn;                                    // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPlayerController>   RequestingPlayerController;                        // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x8];                                       // 0x0014(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UPrimitiveComponent>     InteractComponent;                                 // 0x001C(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 OptionalObjectData;                                // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InteractPoint;                                     // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionType) == 0x000004, "Wrong alignment on FInteractionType");
static_assert(sizeof(FInteractionType) == 0x000038, "Wrong size on FInteractionType");
static_assert(offsetof(FInteractionType, InteractionType) == 0x000000, "Member 'FInteractionType::InteractionType' has a wrong offset!");
static_assert(offsetof(FInteractionType, RequestingPawn) == 0x000004, "Member 'FInteractionType::RequestingPawn' has a wrong offset!");
static_assert(offsetof(FInteractionType, RequestingPlayerController) == 0x00000C, "Member 'FInteractionType::RequestingPlayerController' has a wrong offset!");
static_assert(offsetof(FInteractionType, InteractComponent) == 0x00001C, "Member 'FInteractionType::InteractComponent' has a wrong offset!");
static_assert(offsetof(FInteractionType, OptionalObjectData) == 0x000024, "Member 'FInteractionType::OptionalObjectData' has a wrong offset!");
static_assert(offsetof(FInteractionType, InteractPoint) == 0x00002C, "Member 'FInteractionType::InteractPoint' has a wrong offset!");

// ScriptStruct FortniteGame.ItemLoadoutTeamMap
// 0x0004 (0x0004 - 0x0000)
struct FItemLoadoutTeamMap final
{
public:
	uint8                                         TeamIndex;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LoadoutIndex;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaInventorySpawnOverride                 UpdateOverrideType;                                // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaLootDropOverride                       DropAllItemsOverride;                              // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemLoadoutTeamMap) == 0x000001, "Wrong alignment on FItemLoadoutTeamMap");
static_assert(sizeof(FItemLoadoutTeamMap) == 0x000004, "Wrong size on FItemLoadoutTeamMap");
static_assert(offsetof(FItemLoadoutTeamMap, TeamIndex) == 0x000000, "Member 'FItemLoadoutTeamMap::TeamIndex' has a wrong offset!");
static_assert(offsetof(FItemLoadoutTeamMap, LoadoutIndex) == 0x000001, "Member 'FItemLoadoutTeamMap::LoadoutIndex' has a wrong offset!");
static_assert(offsetof(FItemLoadoutTeamMap, UpdateOverrideType) == 0x000002, "Member 'FItemLoadoutTeamMap::UpdateOverrideType' has a wrong offset!");
static_assert(offsetof(FItemLoadoutTeamMap, DropAllItemsOverride) == 0x000003, "Member 'FItemLoadoutTeamMap::DropAllItemsOverride' has a wrong offset!");

// ScriptStruct FortniteGame.MashLeaderboardEntry
// 0x0048 (0x0048 - 0x0000)
struct FMashLeaderboardEntry final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UserNetId;                                         // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpecialEntry;                                   // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMashLeaderboardEntry) == 0x000008, "Wrong alignment on FMashLeaderboardEntry");
static_assert(sizeof(FMashLeaderboardEntry) == 0x000048, "Wrong size on FMashLeaderboardEntry");
static_assert(offsetof(FMashLeaderboardEntry, DisplayName) == 0x000000, "Member 'FMashLeaderboardEntry::DisplayName' has a wrong offset!");
static_assert(offsetof(FMashLeaderboardEntry, Value) == 0x000010, "Member 'FMashLeaderboardEntry::Value' has a wrong offset!");
static_assert(offsetof(FMashLeaderboardEntry, Rank) == 0x000014, "Member 'FMashLeaderboardEntry::Rank' has a wrong offset!");
static_assert(offsetof(FMashLeaderboardEntry, UserNetId) == 0x000018, "Member 'FMashLeaderboardEntry::UserNetId' has a wrong offset!");
static_assert(offsetof(FMashLeaderboardEntry, bIsSpecialEntry) == 0x000040, "Member 'FMashLeaderboardEntry::bIsSpecialEntry' has a wrong offset!");
static_assert(offsetof(FMashLeaderboardEntry, bIsLocalPlayer) == 0x000041, "Member 'FMashLeaderboardEntry::bIsLocalPlayer' has a wrong offset!");

// ScriptStruct FortniteGame.MashFriendsLeaderboard
// 0x0020 (0x0020 - 0x0000)
struct FMashFriendsLeaderboard final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMashLeaderboardEntry>          LeaderBoard;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMashFriendsLeaderboard) == 0x000008, "Wrong alignment on FMashFriendsLeaderboard");
static_assert(sizeof(FMashFriendsLeaderboard) == 0x000020, "Wrong size on FMashFriendsLeaderboard");
static_assert(offsetof(FMashFriendsLeaderboard, Name) == 0x000000, "Member 'FMashFriendsLeaderboard::Name' has a wrong offset!");
static_assert(offsetof(FMashFriendsLeaderboard, LeaderBoard) == 0x000010, "Member 'FMashFriendsLeaderboard::LeaderBoard' has a wrong offset!");

// ScriptStruct FortniteGame.MashDifficultySettings
// 0x0088 (0x0088 - 0x0000)
struct FMashDifficultySettings final
{
public:
	struct FScalableFloat                         SpawnCountPlayerCountMultiplier;                   // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpawnCountDifficultyMultiplier;                    // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AIEffectPlayerCountMultiplier;                     // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AIEffectDifficultyMultiplier;                      // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SpawnCountMultiplier;                              // 0x0080(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AIEffectMultiplier;                                // 0x0084(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMashDifficultySettings) == 0x000008, "Wrong alignment on FMashDifficultySettings");
static_assert(sizeof(FMashDifficultySettings) == 0x000088, "Wrong size on FMashDifficultySettings");
static_assert(offsetof(FMashDifficultySettings, SpawnCountPlayerCountMultiplier) == 0x000000, "Member 'FMashDifficultySettings::SpawnCountPlayerCountMultiplier' has a wrong offset!");
static_assert(offsetof(FMashDifficultySettings, SpawnCountDifficultyMultiplier) == 0x000020, "Member 'FMashDifficultySettings::SpawnCountDifficultyMultiplier' has a wrong offset!");
static_assert(offsetof(FMashDifficultySettings, AIEffectPlayerCountMultiplier) == 0x000040, "Member 'FMashDifficultySettings::AIEffectPlayerCountMultiplier' has a wrong offset!");
static_assert(offsetof(FMashDifficultySettings, AIEffectDifficultyMultiplier) == 0x000060, "Member 'FMashDifficultySettings::AIEffectDifficultyMultiplier' has a wrong offset!");
static_assert(offsetof(FMashDifficultySettings, SpawnCountMultiplier) == 0x000080, "Member 'FMashDifficultySettings::SpawnCountMultiplier' has a wrong offset!");
static_assert(offsetof(FMashDifficultySettings, AIEffectMultiplier) == 0x000084, "Member 'FMashDifficultySettings::AIEffectMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.RiftDamagerInfo
// 0x0018 (0x0018 - 0x0000)
struct FRiftDamagerInfo final
{
public:
	class ABuildingRift*                          Rift;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AController*>                    Damagers;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRiftDamagerInfo) == 0x000008, "Wrong alignment on FRiftDamagerInfo");
static_assert(sizeof(FRiftDamagerInfo) == 0x000018, "Wrong size on FRiftDamagerInfo");
static_assert(offsetof(FRiftDamagerInfo, Rift) == 0x000000, "Member 'FRiftDamagerInfo::Rift' has a wrong offset!");
static_assert(offsetof(FRiftDamagerInfo, Damagers) == 0x000008, "Member 'FRiftDamagerInfo::Damagers' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnContext
// 0x0028 (0x0028 - 0x0000)
struct FFortSpawnContext final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpawnContext) == 0x000008, "Wrong alignment on FFortSpawnContext");
static_assert(sizeof(FFortSpawnContext) == 0x000028, "Wrong size on FFortSpawnContext");
static_assert(offsetof(FFortSpawnContext, Team) == 0x000000, "Member 'FFortSpawnContext::Team' has a wrong offset!");
static_assert(offsetof(FFortSpawnContext, Tags) == 0x000008, "Member 'FFortSpawnContext::Tags' has a wrong offset!");

// ScriptStruct FortniteGame.MashScoreData
// 0x0080 (0x0080 - 0x0000)
struct FMashScoreData final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExclusionTags;                                     // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ScoreValue;                                        // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ScoreText;                                         // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMashScoreData) == 0x000008, "Wrong alignment on FMashScoreData");
static_assert(sizeof(FMashScoreData) == 0x000080, "Wrong size on FMashScoreData");
static_assert(offsetof(FMashScoreData, ActorClass) == 0x000000, "Member 'FMashScoreData::ActorClass' has a wrong offset!");
static_assert(offsetof(FMashScoreData, Tags) == 0x000008, "Member 'FMashScoreData::Tags' has a wrong offset!");
static_assert(offsetof(FMashScoreData, ExclusionTags) == 0x000028, "Member 'FMashScoreData::ExclusionTags' has a wrong offset!");
static_assert(offsetof(FMashScoreData, ScoreValue) == 0x000048, "Member 'FMashScoreData::ScoreValue' has a wrong offset!");
static_assert(offsetof(FMashScoreData, ScoreText) == 0x000068, "Member 'FMashScoreData::ScoreText' has a wrong offset!");

// ScriptStruct FortniteGame.MashPlayerDataEntry
// 0x0074 (0x0080 - 0x000C)
struct FMashPlayerDataEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Scores[0xE];                                       // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalScore;                                        // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StreakScoreLevel;                                  // 0x0054(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StreakMultiplierCurrentKillCount;                  // 0x0055(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastAIKillTime;                                    // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AIKillTimes;                                       // 0x0060(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	struct FTimerHandle                           ResetStreakScoreMultiplierTimerHandle;             // 0x0070(0x0008)(Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalAIKillCount;                                  // 0x0078(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMashPlayerDataEntry) == 0x000008, "Wrong alignment on FMashPlayerDataEntry");
static_assert(sizeof(FMashPlayerDataEntry) == 0x000080, "Wrong size on FMashPlayerDataEntry");
static_assert(offsetof(FMashPlayerDataEntry, PlayerState) == 0x000010, "Member 'FMashPlayerDataEntry::PlayerState' has a wrong offset!");
static_assert(offsetof(FMashPlayerDataEntry, Scores) == 0x000018, "Member 'FMashPlayerDataEntry::Scores' has a wrong offset!");
static_assert(offsetof(FMashPlayerDataEntry, TotalScore) == 0x000050, "Member 'FMashPlayerDataEntry::TotalScore' has a wrong offset!");
static_assert(offsetof(FMashPlayerDataEntry, StreakScoreLevel) == 0x000054, "Member 'FMashPlayerDataEntry::StreakScoreLevel' has a wrong offset!");
static_assert(offsetof(FMashPlayerDataEntry, StreakMultiplierCurrentKillCount) == 0x000055, "Member 'FMashPlayerDataEntry::StreakMultiplierCurrentKillCount' has a wrong offset!");
static_assert(offsetof(FMashPlayerDataEntry, LastAIKillTime) == 0x000058, "Member 'FMashPlayerDataEntry::LastAIKillTime' has a wrong offset!");
static_assert(offsetof(FMashPlayerDataEntry, AIKillTimes) == 0x000060, "Member 'FMashPlayerDataEntry::AIKillTimes' has a wrong offset!");
static_assert(offsetof(FMashPlayerDataEntry, ResetStreakScoreMultiplierTimerHandle) == 0x000070, "Member 'FMashPlayerDataEntry::ResetStreakScoreMultiplierTimerHandle' has a wrong offset!");
static_assert(offsetof(FMashPlayerDataEntry, TotalAIKillCount) == 0x000078, "Member 'FMashPlayerDataEntry::TotalAIKillCount' has a wrong offset!");

// ScriptStruct FortniteGame.MashPlayerDataArray
// 0x0010 (0x0118 - 0x0108)
struct FMashPlayerDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FMashPlayerDataEntry>           Entries;                                           // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMashPlayerDataArray) == 0x000008, "Wrong alignment on FMashPlayerDataArray");
static_assert(sizeof(FMashPlayerDataArray) == 0x000118, "Wrong size on FMashPlayerDataArray");
static_assert(offsetof(FMashPlayerDataArray, Entries) == 0x000108, "Member 'FMashPlayerDataArray::Entries' has a wrong offset!");

// ScriptStruct FortniteGame.DeployableBaseSupportSettings
// 0x0098 (0x0098 - 0x0000)
struct FDeployableBaseSupportSettings final
{
public:
	bool                                          bUseDeployableBases;                               // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortDeployableBaseCloudSaveItemDefinition> DeployableBaseCloudSaveItemDef;                    // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DeployableBasePlot;                                // 0x0030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortDeployableBaseSkillTreeUnlocks> SupportedUnlocks;                                  // 0x0058(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeployableBasesReadOnly;                          // 0x0080(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeployableBaseUseType                        SupportedUseType;                                  // 0x0081(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortTieredCollectionLayout*>    TieredCollectionLayouts;                           // 0x0088(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeployableBaseSupportSettings) == 0x000008, "Wrong alignment on FDeployableBaseSupportSettings");
static_assert(sizeof(FDeployableBaseSupportSettings) == 0x000098, "Wrong size on FDeployableBaseSupportSettings");
static_assert(offsetof(FDeployableBaseSupportSettings, bUseDeployableBases) == 0x000000, "Member 'FDeployableBaseSupportSettings::bUseDeployableBases' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, DeployableBaseCloudSaveItemDef) == 0x000008, "Member 'FDeployableBaseSupportSettings::DeployableBaseCloudSaveItemDef' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, DeployableBasePlot) == 0x000030, "Member 'FDeployableBaseSupportSettings::DeployableBasePlot' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, SupportedUnlocks) == 0x000058, "Member 'FDeployableBaseSupportSettings::SupportedUnlocks' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, bDeployableBasesReadOnly) == 0x000080, "Member 'FDeployableBaseSupportSettings::bDeployableBasesReadOnly' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, SupportedUseType) == 0x000081, "Member 'FDeployableBaseSupportSettings::SupportedUseType' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, TieredCollectionLayouts) == 0x000088, "Member 'FDeployableBaseSupportSettings::TieredCollectionLayouts' has a wrong offset!");

// ScriptStruct FortniteGame.MashScoreMultiplierInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FMashScoreMultiplierInstanceData final
{
public:
	class ABuildingActor*                         Actor;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecialActorID;                                    // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMashScoreMultiplierInstanceData) == 0x000008, "Wrong alignment on FMashScoreMultiplierInstanceData");
static_assert(sizeof(FMashScoreMultiplierInstanceData) == 0x000010, "Wrong size on FMashScoreMultiplierInstanceData");
static_assert(offsetof(FMashScoreMultiplierInstanceData, Actor) == 0x000000, "Member 'FMashScoreMultiplierInstanceData::Actor' has a wrong offset!");
static_assert(offsetof(FMashScoreMultiplierInstanceData, SpecialActorID) == 0x000008, "Member 'FMashScoreMultiplierInstanceData::SpecialActorID' has a wrong offset!");

// ScriptStruct FortniteGame.MashObjectiveAreaInstanceData
// 0x0030 (0x0030 - 0x0000)
struct FMashObjectiveAreaInstanceData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AreaActor;                                         // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecialActorID;                                    // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMashScoreMultiplierInstanceData> ScoreMultipliers;                                  // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMashObjectiveAreaInstanceData) == 0x000008, "Wrong alignment on FMashObjectiveAreaInstanceData");
static_assert(sizeof(FMashObjectiveAreaInstanceData) == 0x000030, "Wrong size on FMashObjectiveAreaInstanceData");
static_assert(offsetof(FMashObjectiveAreaInstanceData, Location) == 0x000000, "Member 'FMashObjectiveAreaInstanceData::Location' has a wrong offset!");
static_assert(offsetof(FMashObjectiveAreaInstanceData, AreaActor) == 0x000010, "Member 'FMashObjectiveAreaInstanceData::AreaActor' has a wrong offset!");
static_assert(offsetof(FMashObjectiveAreaInstanceData, SpecialActorID) == 0x000018, "Member 'FMashObjectiveAreaInstanceData::SpecialActorID' has a wrong offset!");
static_assert(offsetof(FMashObjectiveAreaInstanceData, ScoreMultipliers) == 0x000020, "Member 'FMashObjectiveAreaInstanceData::ScoreMultipliers' has a wrong offset!");

// ScriptStruct FortniteGame.MashScoreMultiplierSpawnData
// 0x01B8 (0x0238 - 0x0080)
struct FMashScoreMultiplierSpawnData final : public FFortPieSliceSpawnData
{
public:
	struct FScalableFloat                         ScoreMultiplier;                                   // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpawnCount;                                        // 0x00A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinSpawnTime;                                      // 0x00C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxSpawnTime;                                      // 0x00E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingActor>             ObjectClass;                                       // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SpecialActorTag;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SpecialActorMinimapIconBrush;                      // 0x0110(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              SpecialActorMinimapIconScale;                      // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SpecialActorCompassIconBrush;                      // 0x01A0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              SpecialActorCompassIconScale;                      // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldDrawCompassIcon;                            // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMashScoreMultiplierSpawnData) == 0x000008, "Wrong alignment on FMashScoreMultiplierSpawnData");
static_assert(sizeof(FMashScoreMultiplierSpawnData) == 0x000238, "Wrong size on FMashScoreMultiplierSpawnData");
static_assert(offsetof(FMashScoreMultiplierSpawnData, ScoreMultiplier) == 0x000080, "Member 'FMashScoreMultiplierSpawnData::ScoreMultiplier' has a wrong offset!");
static_assert(offsetof(FMashScoreMultiplierSpawnData, SpawnCount) == 0x0000A0, "Member 'FMashScoreMultiplierSpawnData::SpawnCount' has a wrong offset!");
static_assert(offsetof(FMashScoreMultiplierSpawnData, MinSpawnTime) == 0x0000C0, "Member 'FMashScoreMultiplierSpawnData::MinSpawnTime' has a wrong offset!");
static_assert(offsetof(FMashScoreMultiplierSpawnData, MaxSpawnTime) == 0x0000E0, "Member 'FMashScoreMultiplierSpawnData::MaxSpawnTime' has a wrong offset!");
static_assert(offsetof(FMashScoreMultiplierSpawnData, ObjectClass) == 0x000100, "Member 'FMashScoreMultiplierSpawnData::ObjectClass' has a wrong offset!");
static_assert(offsetof(FMashScoreMultiplierSpawnData, SpecialActorTag) == 0x000108, "Member 'FMashScoreMultiplierSpawnData::SpecialActorTag' has a wrong offset!");
static_assert(offsetof(FMashScoreMultiplierSpawnData, SpecialActorMinimapIconBrush) == 0x000110, "Member 'FMashScoreMultiplierSpawnData::SpecialActorMinimapIconBrush' has a wrong offset!");
static_assert(offsetof(FMashScoreMultiplierSpawnData, SpecialActorMinimapIconScale) == 0x000198, "Member 'FMashScoreMultiplierSpawnData::SpecialActorMinimapIconScale' has a wrong offset!");
static_assert(offsetof(FMashScoreMultiplierSpawnData, SpecialActorCompassIconBrush) == 0x0001A0, "Member 'FMashScoreMultiplierSpawnData::SpecialActorCompassIconBrush' has a wrong offset!");
static_assert(offsetof(FMashScoreMultiplierSpawnData, SpecialActorCompassIconScale) == 0x000228, "Member 'FMashScoreMultiplierSpawnData::SpecialActorCompassIconScale' has a wrong offset!");
static_assert(offsetof(FMashScoreMultiplierSpawnData, bShouldDrawCompassIcon) == 0x000230, "Member 'FMashScoreMultiplierSpawnData::bShouldDrawCompassIcon' has a wrong offset!");

// ScriptStruct FortniteGame.FortCreativeItemData
// 0x00C8 (0x00D0 - 0x0008)
struct FFortCreativeItemData final : public FTableRowBase
{
public:
	struct FSoftObjectPath                        ObjectPath;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlacementCost;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0058(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LargePreviewImage;                                 // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SmallPreviewImage;                                 // 0x00A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECreativeItemCategory                         Category;                                          // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCreativeItemData) == 0x000008, "Wrong alignment on FFortCreativeItemData");
static_assert(sizeof(FFortCreativeItemData) == 0x0000D0, "Wrong size on FFortCreativeItemData");
static_assert(offsetof(FFortCreativeItemData, ObjectPath) == 0x000008, "Member 'FFortCreativeItemData::ObjectPath' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemData, PlacementCost) == 0x000020, "Member 'FFortCreativeItemData::PlacementCost' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemData, DisplayName) == 0x000028, "Member 'FFortCreativeItemData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemData, Description) == 0x000040, "Member 'FFortCreativeItemData::Description' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemData, TagContainer) == 0x000058, "Member 'FFortCreativeItemData::TagContainer' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemData, LargePreviewImage) == 0x000078, "Member 'FFortCreativeItemData::LargePreviewImage' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemData, SmallPreviewImage) == 0x0000A0, "Member 'FFortCreativeItemData::SmallPreviewImage' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemData, Count) == 0x0000C8, "Member 'FFortCreativeItemData::Count' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemData, Category) == 0x0000CC, "Member 'FFortCreativeItemData::Category' has a wrong offset!");

// ScriptStruct FortniteGame.MashAreaSpecialActorData
// 0x0130 (0x0130 - 0x0000)
struct FMashAreaSpecialActorData final
{
public:
	struct FGameplayTag                           SpecialActorTag;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SpecialActorMinimapIconBrush;                      // 0x0008(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              SpecialActorMinimapIconScale;                      // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SpecialActorCompassIconBrush;                      // 0x0098(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              SpecialActorCompassIconScale;                      // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldDrawCompassIcon;                            // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMashAreaSpecialActorData) == 0x000008, "Wrong alignment on FMashAreaSpecialActorData");
static_assert(sizeof(FMashAreaSpecialActorData) == 0x000130, "Wrong size on FMashAreaSpecialActorData");
static_assert(offsetof(FMashAreaSpecialActorData, SpecialActorTag) == 0x000000, "Member 'FMashAreaSpecialActorData::SpecialActorTag' has a wrong offset!");
static_assert(offsetof(FMashAreaSpecialActorData, SpecialActorMinimapIconBrush) == 0x000008, "Member 'FMashAreaSpecialActorData::SpecialActorMinimapIconBrush' has a wrong offset!");
static_assert(offsetof(FMashAreaSpecialActorData, SpecialActorMinimapIconScale) == 0x000090, "Member 'FMashAreaSpecialActorData::SpecialActorMinimapIconScale' has a wrong offset!");
static_assert(offsetof(FMashAreaSpecialActorData, SpecialActorCompassIconBrush) == 0x000098, "Member 'FMashAreaSpecialActorData::SpecialActorCompassIconBrush' has a wrong offset!");
static_assert(offsetof(FMashAreaSpecialActorData, SpecialActorCompassIconScale) == 0x000120, "Member 'FMashAreaSpecialActorData::SpecialActorCompassIconScale' has a wrong offset!");
static_assert(offsetof(FMashAreaSpecialActorData, bShouldDrawCompassIcon) == 0x000128, "Member 'FMashAreaSpecialActorData::bShouldDrawCompassIcon' has a wrong offset!");

// ScriptStruct FortniteGame.OmahaCharacterVariantInfoData
// 0x0010 (0x0010 - 0x0000)
struct FOmahaCharacterVariantInfoData final
{
public:
	TArray<struct FMcpVariantChannelInfo>         VariantChannelInfo;                                // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOmahaCharacterVariantInfoData) == 0x000008, "Wrong alignment on FOmahaCharacterVariantInfoData");
static_assert(sizeof(FOmahaCharacterVariantInfoData) == 0x000010, "Wrong size on FOmahaCharacterVariantInfoData");
static_assert(offsetof(FOmahaCharacterVariantInfoData, VariantChannelInfo) == 0x000000, "Member 'FOmahaCharacterVariantInfoData::VariantChannelInfo' has a wrong offset!");

// ScriptStruct FortniteGame.PartnerPcbInfo
// 0x0028 (0x0028 - 0x0000)
struct FPartnerPcbInfo final
{
public:
	struct FGameplayTag                           PartnerTag;                                        // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ValidPartnerBundles;                               // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartnerPcbInfo) == 0x000008, "Wrong alignment on FPartnerPcbInfo");
static_assert(sizeof(FPartnerPcbInfo) == 0x000028, "Wrong size on FPartnerPcbInfo");
static_assert(offsetof(FPartnerPcbInfo, PartnerTag) == 0x000000, "Member 'FPartnerPcbInfo::PartnerTag' has a wrong offset!");
static_assert(offsetof(FPartnerPcbInfo, ValidPartnerBundles) == 0x000008, "Member 'FPartnerPcbInfo::ValidPartnerBundles' has a wrong offset!");

// ScriptStruct FortniteGame.BonePlayerDamageMultiplier
// 0x0028 (0x0028 - 0x0000)
struct FBonePlayerDamageMultiplier final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DamageMultiplier;                                  // 0x0008(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBonePlayerDamageMultiplier) == 0x000008, "Wrong alignment on FBonePlayerDamageMultiplier");
static_assert(sizeof(FBonePlayerDamageMultiplier) == 0x000028, "Wrong size on FBonePlayerDamageMultiplier");
static_assert(offsetof(FBonePlayerDamageMultiplier, BoneName) == 0x000000, "Member 'FBonePlayerDamageMultiplier::BoneName' has a wrong offset!");
static_assert(offsetof(FBonePlayerDamageMultiplier, DamageMultiplier) == 0x000008, "Member 'FBonePlayerDamageMultiplier::DamageMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindIntensityAndDirection
// 0x0008 (0x0008 - 0x0000)
struct FFortWindIntensityAndDirection final
{
public:
	float                                         WindIntensity;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WindHeading;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortWindIntensityAndDirection) == 0x000004, "Wrong alignment on FFortWindIntensityAndDirection");
static_assert(sizeof(FFortWindIntensityAndDirection) == 0x000008, "Wrong size on FFortWindIntensityAndDirection");
static_assert(offsetof(FFortWindIntensityAndDirection, WindIntensity) == 0x000000, "Member 'FFortWindIntensityAndDirection::WindIntensity' has a wrong offset!");
static_assert(offsetof(FFortWindIntensityAndDirection, WindHeading) == 0x000004, "Member 'FFortWindIntensityAndDirection::WindHeading' has a wrong offset!");

// ScriptStruct FortniteGame.FortGlobalWindInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortGlobalWindInfo final
{
public:
	TArray<struct FFortWindIntensityAndDirection> ValidWindInfos;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         WindIndex;                                         // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGlobalWindInfo) == 0x000008, "Wrong alignment on FFortGlobalWindInfo");
static_assert(sizeof(FFortGlobalWindInfo) == 0x000018, "Wrong size on FFortGlobalWindInfo");
static_assert(offsetof(FFortGlobalWindInfo, ValidWindInfos) == 0x000000, "Member 'FFortGlobalWindInfo::ValidWindInfos' has a wrong offset!");
static_assert(offsetof(FFortGlobalWindInfo, WindIndex) == 0x000010, "Member 'FFortGlobalWindInfo::WindIndex' has a wrong offset!");

// ScriptStruct FortniteGame.PowPlayerDataArray
// 0x0018 (0x0120 - 0x0108)
struct FPowPlayerDataArray final : public FFastArraySerializer
{
public:
	class AFortAthenaMutator_Pow*                 OwningMutator;                                     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPowPlayerDataEntry>            Entries;                                           // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowPlayerDataArray) == 0x000008, "Wrong alignment on FPowPlayerDataArray");
static_assert(sizeof(FPowPlayerDataArray) == 0x000120, "Wrong size on FPowPlayerDataArray");
static_assert(offsetof(FPowPlayerDataArray, OwningMutator) == 0x000108, "Member 'FPowPlayerDataArray::OwningMutator' has a wrong offset!");
static_assert(offsetof(FPowPlayerDataArray, Entries) == 0x000110, "Member 'FPowPlayerDataArray::Entries' has a wrong offset!");

// ScriptStruct FortniteGame.SkyCapTargetData
// 0x0008 (0x0008 - 0x0000)
struct FSkyCapTargetData final
{
public:
	float                                         TargetHeight;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTime;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCapTargetData) == 0x000004, "Wrong alignment on FSkyCapTargetData");
static_assert(sizeof(FSkyCapTargetData) == 0x000008, "Wrong size on FSkyCapTargetData");
static_assert(offsetof(FSkyCapTargetData, TargetHeight) == 0x000000, "Member 'FSkyCapTargetData::TargetHeight' has a wrong offset!");
static_assert(offsetof(FSkyCapTargetData, MoveTime) == 0x000004, "Member 'FSkyCapTargetData::MoveTime' has a wrong offset!");

// ScriptStruct FortniteGame.SkyCapPositionData
// 0x0060 (0x0060 - 0x0000)
struct FSkyCapPositionData final
{
public:
	struct FScalableFloat                         MoveTime;                                          // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Height;                                            // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         WaitTime;                                          // 0x0040(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCapPositionData) == 0x000008, "Wrong alignment on FSkyCapPositionData");
static_assert(sizeof(FSkyCapPositionData) == 0x000060, "Wrong size on FSkyCapPositionData");
static_assert(offsetof(FSkyCapPositionData, MoveTime) == 0x000000, "Member 'FSkyCapPositionData::MoveTime' has a wrong offset!");
static_assert(offsetof(FSkyCapPositionData, Height) == 0x000020, "Member 'FSkyCapPositionData::Height' has a wrong offset!");
static_assert(offsetof(FSkyCapPositionData, WaitTime) == 0x000040, "Member 'FSkyCapPositionData::WaitTime' has a wrong offset!");

// ScriptStruct FortniteGame.RecipeData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRecipeData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipeData) == 0x000008, "Wrong alignment on FRecipeData");
static_assert(sizeof(FRecipeData) == 0x000010, "Wrong size on FRecipeData");

// ScriptStruct FortniteGame.SpawningInfo
// 0x0010 (0x0010 - 0x0000)
struct FSpawningInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAthenaMutator_SpawningPolicyData*  ItemSpawnData;                                     // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawningInfo) == 0x000008, "Wrong alignment on FSpawningInfo");
static_assert(sizeof(FSpawningInfo) == 0x000010, "Wrong size on FSpawningInfo");
static_assert(offsetof(FSpawningInfo, ItemSpawnData) == 0x000008, "Member 'FSpawningInfo::ItemSpawnData' has a wrong offset!");

// ScriptStruct FortniteGame.ObjectiveSpecialActorContainer
// 0x0010 (0x0010 - 0x0000)
struct FObjectiveSpecialActorContainer final
{
public:
	class AActor*                                 TheSpawnedObjective;                               // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FObjectiveSpecialActorContainer) == 0x000008, "Wrong alignment on FObjectiveSpecialActorContainer");
static_assert(sizeof(FObjectiveSpecialActorContainer) == 0x000010, "Wrong size on FObjectiveSpecialActorContainer");
static_assert(offsetof(FObjectiveSpecialActorContainer, TheSpawnedObjective) == 0x000000, "Member 'FObjectiveSpecialActorContainer::TheSpawnedObjective' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayAbilityMontageInfo
// 0x0058 (0x0058 - 0x0000)
struct FFortGameplayAbilityMontageInfo final
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimPlayRate;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimRootMotionTranslationScale;                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGameplayAbilityMontageSectionToPlay      MontageSectionToPlay;                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideSection;                                   // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayRandomSection;                                // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortCharacterPartMontageInfo>  CharacterPartMontages;                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayAbilityMontageInfo) == 0x000008, "Wrong alignment on FFortGameplayAbilityMontageInfo");
static_assert(sizeof(FFortGameplayAbilityMontageInfo) == 0x000058, "Wrong size on FFortGameplayAbilityMontageInfo");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, MontageToPlay) == 0x000000, "Member 'FFortGameplayAbilityMontageInfo::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, AnimPlayRate) == 0x000008, "Member 'FFortGameplayAbilityMontageInfo::AnimPlayRate' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, AnimRootMotionTranslationScale) == 0x00000C, "Member 'FFortGameplayAbilityMontageInfo::AnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, MontageSectionToPlay) == 0x000010, "Member 'FFortGameplayAbilityMontageInfo::MontageSectionToPlay' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, OverrideSection) == 0x000014, "Member 'FFortGameplayAbilityMontageInfo::OverrideSection' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, bPlayRandomSection) == 0x00001C, "Member 'FFortGameplayAbilityMontageInfo::bPlayRandomSection' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, CharacterPartMontages) == 0x000020, "Member 'FFortGameplayAbilityMontageInfo::CharacterPartMontages' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemDeliverySupplyDropMutatorData
// 0x0030 (0x0030 - 0x0000)
struct FFortItemDeliverySupplyDropMutatorData final
{
public:
	bool                                          bShouldApplyMutator;                               // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         NumDeliveryItemsToSpawn;                           // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UEnvQuery*                              SupplyDropPlacementQuery;                          // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemDeliverySupplyDropMutatorData) == 0x000008, "Wrong alignment on FFortItemDeliverySupplyDropMutatorData");
static_assert(sizeof(FFortItemDeliverySupplyDropMutatorData) == 0x000030, "Wrong size on FFortItemDeliverySupplyDropMutatorData");
static_assert(offsetof(FFortItemDeliverySupplyDropMutatorData, bShouldApplyMutator) == 0x000000, "Member 'FFortItemDeliverySupplyDropMutatorData::bShouldApplyMutator' has a wrong offset!");
static_assert(offsetof(FFortItemDeliverySupplyDropMutatorData, NumDeliveryItemsToSpawn) == 0x000008, "Member 'FFortItemDeliverySupplyDropMutatorData::NumDeliveryItemsToSpawn' has a wrong offset!");
static_assert(offsetof(FFortItemDeliverySupplyDropMutatorData, SupplyDropPlacementQuery) == 0x000028, "Member 'FFortItemDeliverySupplyDropMutatorData::SupplyDropPlacementQuery' has a wrong offset!");

// ScriptStruct FortniteGame.FortSupplyDropMutatorData
// 0x0020 (0x0020 - 0x0000)
struct FFortSupplyDropMutatorData final
{
public:
	class FName                                   SupplyDropID;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldCenterGroundCheckAtFoundLocation;           // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemDeliverySupplyDropMutatorData> ItemDeliveryMutatorPerSafeZonePhase;               // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSupplyDropMutatorData) == 0x000008, "Wrong alignment on FFortSupplyDropMutatorData");
static_assert(sizeof(FFortSupplyDropMutatorData) == 0x000020, "Wrong size on FFortSupplyDropMutatorData");
static_assert(offsetof(FFortSupplyDropMutatorData, SupplyDropID) == 0x000000, "Member 'FFortSupplyDropMutatorData::SupplyDropID' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropMutatorData, bShouldCenterGroundCheckAtFoundLocation) == 0x000008, "Member 'FFortSupplyDropMutatorData::bShouldCenterGroundCheckAtFoundLocation' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropMutatorData, ItemDeliveryMutatorPerSafeZonePhase) == 0x000010, "Member 'FFortSupplyDropMutatorData::ItemDeliveryMutatorPerSafeZonePhase' has a wrong offset!");

// ScriptStruct FortniteGame.TagVisualsData
// 0x0020 (0x0020 - 0x0000)
struct FTagVisualsData final
{
public:
	TSubclassOf<class UGameplayEffect>            GE_Glow;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GlowTag;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MinimapColor;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTagVisualsData) == 0x000008, "Wrong alignment on FTagVisualsData");
static_assert(sizeof(FTagVisualsData) == 0x000020, "Wrong size on FTagVisualsData");
static_assert(offsetof(FTagVisualsData, GE_Glow) == 0x000000, "Member 'FTagVisualsData::GE_Glow' has a wrong offset!");
static_assert(offsetof(FTagVisualsData, GlowTag) == 0x000008, "Member 'FTagVisualsData::GlowTag' has a wrong offset!");
static_assert(offsetof(FTagVisualsData, MinimapColor) == 0x000010, "Member 'FTagVisualsData::MinimapColor' has a wrong offset!");

// ScriptStruct FortniteGame.TagTeamInfoEntry
// 0x000C (0x0018 - 0x000C)
struct FTagTeamInfoEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         TeamNum;                                           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerCount;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousPlayerCount;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTagTeamInfoEntry) == 0x000004, "Wrong alignment on FTagTeamInfoEntry");
static_assert(sizeof(FTagTeamInfoEntry) == 0x000018, "Wrong size on FTagTeamInfoEntry");
static_assert(offsetof(FTagTeamInfoEntry, TeamNum) == 0x00000C, "Member 'FTagTeamInfoEntry::TeamNum' has a wrong offset!");
static_assert(offsetof(FTagTeamInfoEntry, PlayerCount) == 0x000010, "Member 'FTagTeamInfoEntry::PlayerCount' has a wrong offset!");
static_assert(offsetof(FTagTeamInfoEntry, PreviousPlayerCount) == 0x000014, "Member 'FTagTeamInfoEntry::PreviousPlayerCount' has a wrong offset!");

// ScriptStruct FortniteGame.TagTeamInfoArray
// 0x0010 (0x0118 - 0x0108)
struct FTagTeamInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FTagTeamInfoEntry>              Entries;                                           // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTagTeamInfoArray) == 0x000008, "Wrong alignment on FTagTeamInfoArray");
static_assert(sizeof(FTagTeamInfoArray) == 0x000118, "Wrong size on FTagTeamInfoArray");
static_assert(offsetof(FTagTeamInfoArray, Entries) == 0x000108, "Member 'FTagTeamInfoArray::Entries' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookSlotSourceData
// 0x0018 (0x0020 - 0x0008)
struct FFortCollectionBookSlotSourceData final : public FTableRowBase
{
public:
	class FText                                   Description;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookSlotSourceData) == 0x000008, "Wrong alignment on FFortCollectionBookSlotSourceData");
static_assert(sizeof(FFortCollectionBookSlotSourceData) == 0x000020, "Wrong size on FFortCollectionBookSlotSourceData");
static_assert(offsetof(FFortCollectionBookSlotSourceData, Description) == 0x000008, "Member 'FFortCollectionBookSlotSourceData::Description' has a wrong offset!");

// ScriptStruct FortniteGame.PartSwapData
// 0x0010 (0x0010 - 0x0000)
struct FPartSwapData final
{
public:
	TArray<class UCustomCharacterPart*>           PartsToSwapIn;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartSwapData) == 0x000008, "Wrong alignment on FPartSwapData");
static_assert(sizeof(FPartSwapData) == 0x000010, "Wrong size on FPartSwapData");
static_assert(offsetof(FPartSwapData, PartsToSwapIn) == 0x000000, "Member 'FPartSwapData::PartsToSwapIn' has a wrong offset!");

// ScriptStruct FortniteGame.ItemCategory
// 0x0368 (0x0368 - 0x0000)
struct FItemCategory final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	class FText                                   CategoryName;                                      // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    CategoryBrush;                                     // 0x0038(0x0330)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCategory) == 0x000008, "Wrong alignment on FItemCategory");
static_assert(sizeof(FItemCategory) == 0x000368, "Wrong size on FItemCategory");
static_assert(offsetof(FItemCategory, TagContainer) == 0x000000, "Member 'FItemCategory::TagContainer' has a wrong offset!");
static_assert(offsetof(FItemCategory, CategoryName) == 0x000020, "Member 'FItemCategory::CategoryName' has a wrong offset!");
static_assert(offsetof(FItemCategory, CategoryBrush) == 0x000038, "Member 'FItemCategory::CategoryBrush' has a wrong offset!");

// ScriptStruct FortniteGame.ItemTransferOperation
// 0x0028 (0x0028 - 0x0000)
struct FItemTransferOperation final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToStorage;                                         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NewItemIdHint;                                     // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemTransferOperation) == 0x000008, "Wrong alignment on FItemTransferOperation");
static_assert(sizeof(FItemTransferOperation) == 0x000028, "Wrong size on FItemTransferOperation");
static_assert(offsetof(FItemTransferOperation, ItemId) == 0x000000, "Member 'FItemTransferOperation::ItemId' has a wrong offset!");
static_assert(offsetof(FItemTransferOperation, Quantity) == 0x000010, "Member 'FItemTransferOperation::Quantity' has a wrong offset!");
static_assert(offsetof(FItemTransferOperation, ToStorage) == 0x000014, "Member 'FItemTransferOperation::ToStorage' has a wrong offset!");
static_assert(offsetof(FItemTransferOperation, NewItemIdHint) == 0x000018, "Member 'FItemTransferOperation::NewItemIdHint' has a wrong offset!");

// ScriptStruct FortniteGame.TeamSettingsData
// 0x0018 (0x0018 - 0x0000)
struct FTeamSettingsData final
{
public:
	class UFortTeamSettingsComponent*             TeamSettings;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamSettingsData) == 0x000008, "Wrong alignment on FTeamSettingsData");
static_assert(sizeof(FTeamSettingsData) == 0x000018, "Wrong size on FTeamSettingsData");
static_assert(offsetof(FTeamSettingsData, TeamSettings) == 0x000000, "Member 'FTeamSettingsData::TeamSettings' has a wrong offset!");

// ScriptStruct FortniteGame.WaxPartOverrideData
// 0x0028 (0x0028 - 0x0000)
struct FWaxPartOverrideData final
{
public:
	EFortCustomGender                             Gender;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCustomCharacterPart*>           PartsToSwapIn;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UCustomCharacterPart*>           DefaultParts;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaxPartOverrideData) == 0x000008, "Wrong alignment on FWaxPartOverrideData");
static_assert(sizeof(FWaxPartOverrideData) == 0x000028, "Wrong size on FWaxPartOverrideData");
static_assert(offsetof(FWaxPartOverrideData, Gender) == 0x000000, "Member 'FWaxPartOverrideData::Gender' has a wrong offset!");
static_assert(offsetof(FWaxPartOverrideData, PartsToSwapIn) == 0x000008, "Member 'FWaxPartOverrideData::PartsToSwapIn' has a wrong offset!");
static_assert(offsetof(FWaxPartOverrideData, DefaultParts) == 0x000018, "Member 'FWaxPartOverrideData::DefaultParts' has a wrong offset!");

// ScriptStruct FortniteGame.NetTowhookAttachState
// 0x0020 (0x0020 - 0x0000)
struct FNetTowhookAttachState final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 LocalLocation;                                     // 0x0008(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 LocalNormal;                                       // 0x0014(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetTowhookAttachState) == 0x000008, "Wrong alignment on FNetTowhookAttachState");
static_assert(sizeof(FNetTowhookAttachState) == 0x000020, "Wrong size on FNetTowhookAttachState");
static_assert(offsetof(FNetTowhookAttachState, Component) == 0x000000, "Member 'FNetTowhookAttachState::Component' has a wrong offset!");
static_assert(offsetof(FNetTowhookAttachState, LocalLocation) == 0x000008, "Member 'FNetTowhookAttachState::LocalLocation' has a wrong offset!");
static_assert(offsetof(FNetTowhookAttachState, LocalNormal) == 0x000014, "Member 'FNetTowhookAttachState::LocalNormal' has a wrong offset!");

// ScriptStruct FortniteGame.WaxNoStormZone
// 0x0030 (0x0030 - 0x0000)
struct FWaxNoStormZone final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Radius;                                            // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaxNoStormZone) == 0x000008, "Wrong alignment on FWaxNoStormZone");
static_assert(sizeof(FWaxNoStormZone) == 0x000030, "Wrong size on FWaxNoStormZone");
static_assert(offsetof(FWaxNoStormZone, Location) == 0x000000, "Member 'FWaxNoStormZone::Location' has a wrong offset!");
static_assert(offsetof(FWaxNoStormZone, Radius) == 0x000010, "Member 'FWaxNoStormZone::Radius' has a wrong offset!");

// ScriptStruct FortniteGame.WaxRespawnLogicData
// 0x0200 (0x0200 - 0x0000)
struct FWaxRespawnLogicData final
{
public:
	struct FFortRespawnLogicData                  BaseRespawnData;                                   // 0x0000(0x0100)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TryPlaceByTeammates;                               // 0x0100(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AlsoPlaceBehindTeammates;                          // 0x0120(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxDistanceFromTeammates;                          // 0x0140(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinDistanceFromTeammates;                          // 0x0160(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TryPlaceAwayFromLeaders;                           // 0x0180(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         OnlyCountLeadersAboveWaxState;                     // 0x01A0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         UseDirectionFromTeam;                              // 0x01C0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SpawnBehindTeammateBias;                           // 0x01E0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaxRespawnLogicData) == 0x000008, "Wrong alignment on FWaxRespawnLogicData");
static_assert(sizeof(FWaxRespawnLogicData) == 0x000200, "Wrong size on FWaxRespawnLogicData");
static_assert(offsetof(FWaxRespawnLogicData, BaseRespawnData) == 0x000000, "Member 'FWaxRespawnLogicData::BaseRespawnData' has a wrong offset!");
static_assert(offsetof(FWaxRespawnLogicData, TryPlaceByTeammates) == 0x000100, "Member 'FWaxRespawnLogicData::TryPlaceByTeammates' has a wrong offset!");
static_assert(offsetof(FWaxRespawnLogicData, AlsoPlaceBehindTeammates) == 0x000120, "Member 'FWaxRespawnLogicData::AlsoPlaceBehindTeammates' has a wrong offset!");
static_assert(offsetof(FWaxRespawnLogicData, MaxDistanceFromTeammates) == 0x000140, "Member 'FWaxRespawnLogicData::MaxDistanceFromTeammates' has a wrong offset!");
static_assert(offsetof(FWaxRespawnLogicData, MinDistanceFromTeammates) == 0x000160, "Member 'FWaxRespawnLogicData::MinDistanceFromTeammates' has a wrong offset!");
static_assert(offsetof(FWaxRespawnLogicData, TryPlaceAwayFromLeaders) == 0x000180, "Member 'FWaxRespawnLogicData::TryPlaceAwayFromLeaders' has a wrong offset!");
static_assert(offsetof(FWaxRespawnLogicData, OnlyCountLeadersAboveWaxState) == 0x0001A0, "Member 'FWaxRespawnLogicData::OnlyCountLeadersAboveWaxState' has a wrong offset!");
static_assert(offsetof(FWaxRespawnLogicData, UseDirectionFromTeam) == 0x0001C0, "Member 'FWaxRespawnLogicData::UseDirectionFromTeam' has a wrong offset!");
static_assert(offsetof(FWaxRespawnLogicData, SpawnBehindTeammateBias) == 0x0001E0, "Member 'FWaxRespawnLogicData::SpawnBehindTeammateBias' has a wrong offset!");

// ScriptStruct FortniteGame.FortActionKeyMapping
// 0x0078 (0x0078 - 0x0000)
struct FFortActionKeyMapping final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInputActionGroup                         ActionGroup;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubGame                                      SubGameUsedIn;                                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LocalizedCategory;                                 // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   LocalizedName;                                     // 0x0028(0x0018)(NativeAccessSpecifierPublic)
	struct FKey                                   KeyBind1;                                          // 0x0040(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   KeyBind2;                                          // 0x0058(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputScale;                                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAxisMapping;                                    // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActionKeyMapping) == 0x000008, "Wrong alignment on FFortActionKeyMapping");
static_assert(sizeof(FFortActionKeyMapping) == 0x000078, "Wrong size on FFortActionKeyMapping");
static_assert(offsetof(FFortActionKeyMapping, ActionName) == 0x000000, "Member 'FFortActionKeyMapping::ActionName' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, ActionGroup) == 0x000008, "Member 'FFortActionKeyMapping::ActionGroup' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, SubGameUsedIn) == 0x000009, "Member 'FFortActionKeyMapping::SubGameUsedIn' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, LocalizedCategory) == 0x000010, "Member 'FFortActionKeyMapping::LocalizedCategory' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, LocalizedName) == 0x000028, "Member 'FFortActionKeyMapping::LocalizedName' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, KeyBind1) == 0x000040, "Member 'FFortActionKeyMapping::KeyBind1' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, KeyBind2) == 0x000058, "Member 'FFortActionKeyMapping::KeyBind2' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, InputScale) == 0x000070, "Member 'FFortActionKeyMapping::InputScale' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, bIsAxisMapping) == 0x000074, "Member 'FFortActionKeyMapping::bIsAxisMapping' has a wrong offset!");

// ScriptStruct FortniteGame.UserActionBindings
// 0x0010 (0x0010 - 0x0000)
struct FUserActionBindings final
{
public:
	TArray<struct FFortActionKeyMapping>          UserActionBindings;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserActionBindings) == 0x000008, "Wrong alignment on FUserActionBindings");
static_assert(sizeof(FUserActionBindings) == 0x000010, "Wrong size on FUserActionBindings");
static_assert(offsetof(FUserActionBindings, UserActionBindings) == 0x000000, "Member 'FUserActionBindings::UserActionBindings' has a wrong offset!");

// ScriptStruct FortniteGame.WaxPlayerDataArray
// 0x0018 (0x0120 - 0x0108)
struct FWaxPlayerDataArray final : public FFastArraySerializer
{
public:
	class AFortAthenaMutator_Wax*                 OwningMutator;                                     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWaxPlayerDataEntry>            Entries;                                           // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaxPlayerDataArray) == 0x000008, "Wrong alignment on FWaxPlayerDataArray");
static_assert(sizeof(FWaxPlayerDataArray) == 0x000120, "Wrong size on FWaxPlayerDataArray");
static_assert(offsetof(FWaxPlayerDataArray, OwningMutator) == 0x000108, "Member 'FWaxPlayerDataArray::OwningMutator' has a wrong offset!");
static_assert(offsetof(FWaxPlayerDataArray, Entries) == 0x000110, "Member 'FWaxPlayerDataArray::Entries' has a wrong offset!");

// ScriptStruct FortniteGame.FortMultiSizeMargin
// 0x0060 (0x0060 - 0x0000)
struct FFortMultiSizeMargin final
{
public:
	struct FMargin                                Margin_XXS;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_XS;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_S;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_M;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_L;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_XL;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMultiSizeMargin) == 0x000004, "Wrong alignment on FFortMultiSizeMargin");
static_assert(sizeof(FFortMultiSizeMargin) == 0x000060, "Wrong size on FFortMultiSizeMargin");
static_assert(offsetof(FFortMultiSizeMargin, Margin_XXS) == 0x000000, "Member 'FFortMultiSizeMargin::Margin_XXS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_XS) == 0x000010, "Member 'FFortMultiSizeMargin::Margin_XS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_S) == 0x000020, "Member 'FFortMultiSizeMargin::Margin_S' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_M) == 0x000030, "Member 'FFortMultiSizeMargin::Margin_M' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_L) == 0x000040, "Member 'FFortMultiSizeMargin::Margin_L' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_XL) == 0x000050, "Member 'FFortMultiSizeMargin::Margin_XL' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootQuotaData
// 0x0020 (0x0028 - 0x0008)
struct FFortLootQuotaData final : public FTableRowBase
{
public:
	class FName                                   QuotaCategory;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELootQuotaLevel                               QuotaLevel;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Min;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Quota;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinWorldLevel;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWorldLevel;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootQuotaData) == 0x000008, "Wrong alignment on FFortLootQuotaData");
static_assert(sizeof(FFortLootQuotaData) == 0x000028, "Wrong size on FFortLootQuotaData");
static_assert(offsetof(FFortLootQuotaData, QuotaCategory) == 0x000008, "Member 'FFortLootQuotaData::QuotaCategory' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, QuotaLevel) == 0x000010, "Member 'FFortLootQuotaData::QuotaLevel' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, Min) == 0x000014, "Member 'FFortLootQuotaData::Min' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, Max) == 0x000018, "Member 'FFortLootQuotaData::Max' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, Quota) == 0x00001C, "Member 'FFortLootQuotaData::Quota' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, MinWorldLevel) == 0x000020, "Member 'FFortLootQuotaData::MinWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, MaxWorldLevel) == 0x000024, "Member 'FFortLootQuotaData::MaxWorldLevel' has a wrong offset!");

// ScriptStruct FortniteGame.MissionTimeDisplayData
// 0x002C (0x002C - 0x0000)
struct FMissionTimeDisplayData final
{
public:
	float                                         LessThanTimeValue;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideTimer;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BaseColor;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PulseColor;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorPulsesPerSecond;                              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionTimeDisplayData) == 0x000004, "Wrong alignment on FMissionTimeDisplayData");
static_assert(sizeof(FMissionTimeDisplayData) == 0x00002C, "Wrong size on FMissionTimeDisplayData");
static_assert(offsetof(FMissionTimeDisplayData, LessThanTimeValue) == 0x000000, "Member 'FMissionTimeDisplayData::LessThanTimeValue' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, bHideTimer) == 0x000004, "Member 'FMissionTimeDisplayData::bHideTimer' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, BaseColor) == 0x000008, "Member 'FMissionTimeDisplayData::BaseColor' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, PulseColor) == 0x000018, "Member 'FMissionTimeDisplayData::PulseColor' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, ColorPulsesPerSecond) == 0x000028, "Member 'FMissionTimeDisplayData::ColorPulsesPerSecond' has a wrong offset!");

// ScriptStruct FortniteGame.WaxVisibilityModifiers
// 0x0170 (0x0170 - 0x0000)
struct FWaxVisibilityModifiers final
{
public:
	struct FScalableFloat                         UI_VisibilityMode;                                 // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CompassIndicator;                                  // 0x0020(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MinimapIndicator;                                  // 0x00A8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    TemporarilyGrantedEffects;                         // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    PermanentlyGrantedEffects;                         // 0x0140(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DistanceConsideredCloseForUI;                      // 0x0150(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaxVisibilityModifiers) == 0x000008, "Wrong alignment on FWaxVisibilityModifiers");
static_assert(sizeof(FWaxVisibilityModifiers) == 0x000170, "Wrong size on FWaxVisibilityModifiers");
static_assert(offsetof(FWaxVisibilityModifiers, UI_VisibilityMode) == 0x000000, "Member 'FWaxVisibilityModifiers::UI_VisibilityMode' has a wrong offset!");
static_assert(offsetof(FWaxVisibilityModifiers, CompassIndicator) == 0x000020, "Member 'FWaxVisibilityModifiers::CompassIndicator' has a wrong offset!");
static_assert(offsetof(FWaxVisibilityModifiers, MinimapIndicator) == 0x0000A8, "Member 'FWaxVisibilityModifiers::MinimapIndicator' has a wrong offset!");
static_assert(offsetof(FWaxVisibilityModifiers, TemporarilyGrantedEffects) == 0x000130, "Member 'FWaxVisibilityModifiers::TemporarilyGrantedEffects' has a wrong offset!");
static_assert(offsetof(FWaxVisibilityModifiers, PermanentlyGrantedEffects) == 0x000140, "Member 'FWaxVisibilityModifiers::PermanentlyGrantedEffects' has a wrong offset!");
static_assert(offsetof(FWaxVisibilityModifiers, DistanceConsideredCloseForUI) == 0x000150, "Member 'FWaxVisibilityModifiers::DistanceConsideredCloseForUI' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveTieredCollectionLayout
// 0x0014 (0x0020 - 0x000C)
struct FActiveTieredCollectionLayout final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortTieredCollectionLayout*            Layout;                                            // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTierUnlocked;                                   // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLocked : 1;                                       // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveTieredCollectionLayout) == 0x000008, "Wrong alignment on FActiveTieredCollectionLayout");
static_assert(sizeof(FActiveTieredCollectionLayout) == 0x000020, "Wrong size on FActiveTieredCollectionLayout");
static_assert(offsetof(FActiveTieredCollectionLayout, Layout) == 0x000010, "Member 'FActiveTieredCollectionLayout::Layout' has a wrong offset!");
static_assert(offsetof(FActiveTieredCollectionLayout, MaxTierUnlocked) == 0x000018, "Member 'FActiveTieredCollectionLayout::MaxTierUnlocked' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaSeasonStats
// 0x000C (0x000C - 0x0000)
struct FFortAthenaSeasonStats final
{
public:
	int32                                         NumWins;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumHighBracket;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLowBracket;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaSeasonStats) == 0x000004, "Wrong alignment on FFortAthenaSeasonStats");
static_assert(sizeof(FFortAthenaSeasonStats) == 0x00000C, "Wrong size on FFortAthenaSeasonStats");
static_assert(offsetof(FFortAthenaSeasonStats, NumWins) == 0x000000, "Member 'FFortAthenaSeasonStats::NumWins' has a wrong offset!");
static_assert(offsetof(FFortAthenaSeasonStats, NumHighBracket) == 0x000004, "Member 'FFortAthenaSeasonStats::NumHighBracket' has a wrong offset!");
static_assert(offsetof(FFortAthenaSeasonStats, NumLowBracket) == 0x000008, "Member 'FFortAthenaSeasonStats::NumLowBracket' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionInstancedConfigData
// 0x0010 (0x0010 - 0x0000)
struct FFortMissionInstancedConfigData final
{
public:
	TArray<struct FFortMissionInstancedConfigDataBucket> ConfigDataBuckets;                                 // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortMissionInstancedConfigData) == 0x000008, "Wrong alignment on FFortMissionInstancedConfigData");
static_assert(sizeof(FFortMissionInstancedConfigData) == 0x000010, "Wrong size on FFortMissionInstancedConfigData");
static_assert(offsetof(FFortMissionInstancedConfigData, ConfigDataBuckets) == 0x000000, "Member 'FFortMissionInstancedConfigData::ConfigDataBuckets' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindImpulseHandle
// 0x0004 (0x0004 - 0x0000)
struct FFortWindImpulseHandle final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortWindImpulseHandle) == 0x000004, "Wrong alignment on FFortWindImpulseHandle");
static_assert(sizeof(FFortWindImpulseHandle) == 0x000004, "Wrong size on FFortWindImpulseHandle");
static_assert(offsetof(FFortWindImpulseHandle, UID) == 0x000000, "Member 'FFortWindImpulseHandle::UID' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindImpulseCylinderDelta
// 0x0090 (0x0090 - 0x0000)
struct FFortWindImpulseCylinderDelta final
{
public:
	struct FVector                                DeltaCenter;                                       // 0x0000(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bInitialized;                                      // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRippleOutward;                                    // 0x000D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SectionWidth;                                      // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InnerSectionRadius;                                // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OuterSectionRadius;                                // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaximumRadius;                                     // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DesiredOverallBlendTime;                           // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SectionBlendTime;                                  // 0x0024(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SectionCurrentBlendTime;                           // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PreviousMagnitude;                                 // 0x002C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SectionCurrentMagnitude;                           // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DesiredMagnitude;                                  // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FBox                                   OuterWorldBounds;                                  // 0x0038(0x001C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBox                                   InnerWorldBounds;                                  // 0x0054(0x001C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBox                                   WindImpulseBounds;                                 // 0x0070(0x001C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FFortWindImpulseHandle                 WindImpulseHandleToModify;                         // 0x008C(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortWindImpulseCylinderDelta) == 0x000004, "Wrong alignment on FFortWindImpulseCylinderDelta");
static_assert(sizeof(FFortWindImpulseCylinderDelta) == 0x000090, "Wrong size on FFortWindImpulseCylinderDelta");
static_assert(offsetof(FFortWindImpulseCylinderDelta, DeltaCenter) == 0x000000, "Member 'FFortWindImpulseCylinderDelta::DeltaCenter' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, bInitialized) == 0x00000C, "Member 'FFortWindImpulseCylinderDelta::bInitialized' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, bRippleOutward) == 0x00000D, "Member 'FFortWindImpulseCylinderDelta::bRippleOutward' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, SectionWidth) == 0x000010, "Member 'FFortWindImpulseCylinderDelta::SectionWidth' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, InnerSectionRadius) == 0x000014, "Member 'FFortWindImpulseCylinderDelta::InnerSectionRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, OuterSectionRadius) == 0x000018, "Member 'FFortWindImpulseCylinderDelta::OuterSectionRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, MaximumRadius) == 0x00001C, "Member 'FFortWindImpulseCylinderDelta::MaximumRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, DesiredOverallBlendTime) == 0x000020, "Member 'FFortWindImpulseCylinderDelta::DesiredOverallBlendTime' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, SectionBlendTime) == 0x000024, "Member 'FFortWindImpulseCylinderDelta::SectionBlendTime' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, SectionCurrentBlendTime) == 0x000028, "Member 'FFortWindImpulseCylinderDelta::SectionCurrentBlendTime' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, PreviousMagnitude) == 0x00002C, "Member 'FFortWindImpulseCylinderDelta::PreviousMagnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, SectionCurrentMagnitude) == 0x000030, "Member 'FFortWindImpulseCylinderDelta::SectionCurrentMagnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, DesiredMagnitude) == 0x000034, "Member 'FFortWindImpulseCylinderDelta::DesiredMagnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, OuterWorldBounds) == 0x000038, "Member 'FFortWindImpulseCylinderDelta::OuterWorldBounds' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, InnerWorldBounds) == 0x000054, "Member 'FFortWindImpulseCylinderDelta::InnerWorldBounds' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, WindImpulseBounds) == 0x000070, "Member 'FFortWindImpulseCylinderDelta::WindImpulseBounds' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, WindImpulseHandleToModify) == 0x00008C, "Member 'FFortWindImpulseCylinderDelta::WindImpulseHandleToModify' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaTutorial_ShootTargetInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortAthenaTutorial_ShootTargetInfo final
{
public:
	class AActor*                                 ShootTargetMarker;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingProp*                          ShootTarget;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaTutorial_ShootTargetInfo) == 0x000008, "Wrong alignment on FFortAthenaTutorial_ShootTargetInfo");
static_assert(sizeof(FFortAthenaTutorial_ShootTargetInfo) == 0x000018, "Wrong size on FFortAthenaTutorial_ShootTargetInfo");
static_assert(offsetof(FFortAthenaTutorial_ShootTargetInfo, ShootTargetMarker) == 0x000000, "Member 'FFortAthenaTutorial_ShootTargetInfo::ShootTargetMarker' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorial_ShootTargetInfo, ShootTarget) == 0x000008, "Member 'FFortAthenaTutorial_ShootTargetInfo::ShootTarget' has a wrong offset!");

// ScriptStruct FortniteGame.MtxPurchaseHistoryEntry
// 0x0050 (0x0050 - 0x0000)
struct FMtxPurchaseHistoryEntry final
{
public:
	class FString                                 PurchaseId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferId;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PurchaseDate;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RefundDate;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBeenRefunded;                                  // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMcpLootEntry>                  LootResult;                                        // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TotalMtxPaid;                                      // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMtxPurchaseHistoryEntry) == 0x000008, "Wrong alignment on FMtxPurchaseHistoryEntry");
static_assert(sizeof(FMtxPurchaseHistoryEntry) == 0x000050, "Wrong size on FMtxPurchaseHistoryEntry");
static_assert(offsetof(FMtxPurchaseHistoryEntry, PurchaseId) == 0x000000, "Member 'FMtxPurchaseHistoryEntry::PurchaseId' has a wrong offset!");
static_assert(offsetof(FMtxPurchaseHistoryEntry, OfferId) == 0x000010, "Member 'FMtxPurchaseHistoryEntry::OfferId' has a wrong offset!");
static_assert(offsetof(FMtxPurchaseHistoryEntry, PurchaseDate) == 0x000020, "Member 'FMtxPurchaseHistoryEntry::PurchaseDate' has a wrong offset!");
static_assert(offsetof(FMtxPurchaseHistoryEntry, RefundDate) == 0x000028, "Member 'FMtxPurchaseHistoryEntry::RefundDate' has a wrong offset!");
static_assert(offsetof(FMtxPurchaseHistoryEntry, bHasBeenRefunded) == 0x000030, "Member 'FMtxPurchaseHistoryEntry::bHasBeenRefunded' has a wrong offset!");
static_assert(offsetof(FMtxPurchaseHistoryEntry, LootResult) == 0x000038, "Member 'FMtxPurchaseHistoryEntry::LootResult' has a wrong offset!");
static_assert(offsetof(FMtxPurchaseHistoryEntry, TotalMtxPaid) == 0x000048, "Member 'FMtxPurchaseHistoryEntry::TotalMtxPaid' has a wrong offset!");

// ScriptStruct FortniteGame.MtxPurchaseHistory
// 0x0018 (0x0018 - 0x0000)
struct FMtxPurchaseHistory final
{
public:
	TArray<struct FMtxPurchaseHistoryEntry>       Purchases;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RefundCredits;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefundsUsed;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMtxPurchaseHistory) == 0x000008, "Wrong alignment on FMtxPurchaseHistory");
static_assert(sizeof(FMtxPurchaseHistory) == 0x000018, "Wrong size on FMtxPurchaseHistory");
static_assert(offsetof(FMtxPurchaseHistory, Purchases) == 0x000000, "Member 'FMtxPurchaseHistory::Purchases' has a wrong offset!");
static_assert(offsetof(FMtxPurchaseHistory, RefundCredits) == 0x000010, "Member 'FMtxPurchaseHistory::RefundCredits' has a wrong offset!");
static_assert(offsetof(FMtxPurchaseHistory, RefundsUsed) == 0x000014, "Member 'FMtxPurchaseHistory::RefundsUsed' has a wrong offset!");

// ScriptStruct FortniteGame.IgnoredPawn
// 0x0010 (0x0010 - 0x0000)
struct FIgnoredPawn final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIgnoredPawn) == 0x000008, "Wrong alignment on FIgnoredPawn");
static_assert(sizeof(FIgnoredPawn) == 0x000010, "Wrong size on FIgnoredPawn");
static_assert(offsetof(FIgnoredPawn, Pawn) == 0x000000, "Member 'FIgnoredPawn::Pawn' has a wrong offset!");
static_assert(offsetof(FIgnoredPawn, Time) == 0x000008, "Member 'FIgnoredPawn::Time' has a wrong offset!");

// ScriptStruct FortniteGame.CosmeticMetaTagStack
// 0x0020 (0x0020 - 0x0000)
struct FCosmeticMetaTagStack final
{
public:
	struct FGameplayTagContainer                  CurrentState;                                      // 0x0000(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmeticMetaTagStack) == 0x000008, "Wrong alignment on FCosmeticMetaTagStack");
static_assert(sizeof(FCosmeticMetaTagStack) == 0x000020, "Wrong size on FCosmeticMetaTagStack");
static_assert(offsetof(FCosmeticMetaTagStack, CurrentState) == 0x000000, "Member 'FCosmeticMetaTagStack::CurrentState' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistAccess
// 0x0010 (0x0010 - 0x0000)
struct FPlaylistAccess final
{
public:
	bool                                          bForcePlaylistOff;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleWhenDisabled;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefaultPlaylist;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlaylistAdvertisementType                    AdvertiseType;                                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayAsLimitedTime;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DisplayPriority;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryIndex;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistAccess) == 0x000004, "Wrong alignment on FPlaylistAccess");
static_assert(sizeof(FPlaylistAccess) == 0x000010, "Wrong size on FPlaylistAccess");
static_assert(offsetof(FPlaylistAccess, bForcePlaylistOff) == 0x000000, "Member 'FPlaylistAccess::bForcePlaylistOff' has a wrong offset!");
static_assert(offsetof(FPlaylistAccess, bEnabled) == 0x000001, "Member 'FPlaylistAccess::bEnabled' has a wrong offset!");
static_assert(offsetof(FPlaylistAccess, bVisibleWhenDisabled) == 0x000002, "Member 'FPlaylistAccess::bVisibleWhenDisabled' has a wrong offset!");
static_assert(offsetof(FPlaylistAccess, bIsDefaultPlaylist) == 0x000003, "Member 'FPlaylistAccess::bIsDefaultPlaylist' has a wrong offset!");
static_assert(offsetof(FPlaylistAccess, AdvertiseType) == 0x000004, "Member 'FPlaylistAccess::AdvertiseType' has a wrong offset!");
static_assert(offsetof(FPlaylistAccess, bDisplayAsLimitedTime) == 0x000005, "Member 'FPlaylistAccess::bDisplayAsLimitedTime' has a wrong offset!");
static_assert(offsetof(FPlaylistAccess, DisplayPriority) == 0x000008, "Member 'FPlaylistAccess::DisplayPriority' has a wrong offset!");
static_assert(offsetof(FPlaylistAccess, CategoryIndex) == 0x00000C, "Member 'FPlaylistAccess::CategoryIndex' has a wrong offset!");

// ScriptStruct FortniteGame.VehicleImpactBucket
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FVehicleImpactBucket final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleImpactBucket) == 0x000004, "Wrong alignment on FVehicleImpactBucket");
static_assert(sizeof(FVehicleImpactBucket) == 0x000018, "Wrong size on FVehicleImpactBucket");

// ScriptStruct FortniteGame.SMVehicleGear
// 0x0018 (0x0018 - 0x0000)
struct FSMVehicleGear final
{
public:
	float                                         TopSpeed;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushForce;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RampTime;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringAngleMultiplier;                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAutoBrake : 1;                                    // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreGravity : 1;                                // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSMVehicleGear) == 0x000004, "Wrong alignment on FSMVehicleGear");
static_assert(sizeof(FSMVehicleGear) == 0x000018, "Wrong size on FSMVehicleGear");
static_assert(offsetof(FSMVehicleGear, TopSpeed) == 0x000000, "Member 'FSMVehicleGear::TopSpeed' has a wrong offset!");
static_assert(offsetof(FSMVehicleGear, MinSpeed) == 0x000004, "Member 'FSMVehicleGear::MinSpeed' has a wrong offset!");
static_assert(offsetof(FSMVehicleGear, PushForce) == 0x000008, "Member 'FSMVehicleGear::PushForce' has a wrong offset!");
static_assert(offsetof(FSMVehicleGear, RampTime) == 0x00000C, "Member 'FSMVehicleGear::RampTime' has a wrong offset!");
static_assert(offsetof(FSMVehicleGear, SteeringAngleMultiplier) == 0x000010, "Member 'FSMVehicleGear::SteeringAngleMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.TrackPieceConfig
// 0x001C (0x001C - 0x0000)
struct FTrackPieceConfig final
{
public:
	ETrackPieceType                               Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0010(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackPieceConfig) == 0x000004, "Wrong alignment on FTrackPieceConfig");
static_assert(sizeof(FTrackPieceConfig) == 0x00001C, "Wrong size on FTrackPieceConfig");
static_assert(offsetof(FTrackPieceConfig, Type) == 0x000000, "Member 'FTrackPieceConfig::Type' has a wrong offset!");
static_assert(offsetof(FTrackPieceConfig, Rotation) == 0x000004, "Member 'FTrackPieceConfig::Rotation' has a wrong offset!");
static_assert(offsetof(FTrackPieceConfig, Scale) == 0x000010, "Member 'FTrackPieceConfig::Scale' has a wrong offset!");

// ScriptStruct FortniteGame.TrackSplineConfig
// 0x0003 (0x0003 - 0x0000)
struct FTrackSplineConfig final
{
public:
	bool                                          bUseSpline;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackDirection                               Start;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackDirection                               End;                                               // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackSplineConfig) == 0x000001, "Wrong alignment on FTrackSplineConfig");
static_assert(sizeof(FTrackSplineConfig) == 0x000003, "Wrong size on FTrackSplineConfig");
static_assert(offsetof(FTrackSplineConfig, bUseSpline) == 0x000000, "Member 'FTrackSplineConfig::bUseSpline' has a wrong offset!");
static_assert(offsetof(FTrackSplineConfig, Start) == 0x000001, "Member 'FTrackSplineConfig::Start' has a wrong offset!");
static_assert(offsetof(FTrackSplineConfig, End) == 0x000002, "Member 'FTrackSplineConfig::End' has a wrong offset!");

// ScriptStruct FortniteGame.TrackSwitchStateConfig
// 0x0024 (0x0024 - 0x0000)
struct FTrackSwitchStateConfig final
{
public:
	struct FTrackPieceConfig                      TrackPiece;                                        // 0x0000(0x001C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTrackSplineConfig                     SplineConfig1;                                     // 0x001C(0x0003)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTrackSplineConfig                     SplineConfig2;                                     // 0x001F(0x0003)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackSwitchStateConfig) == 0x000004, "Wrong alignment on FTrackSwitchStateConfig");
static_assert(sizeof(FTrackSwitchStateConfig) == 0x000024, "Wrong size on FTrackSwitchStateConfig");
static_assert(offsetof(FTrackSwitchStateConfig, TrackPiece) == 0x000000, "Member 'FTrackSwitchStateConfig::TrackPiece' has a wrong offset!");
static_assert(offsetof(FTrackSwitchStateConfig, SplineConfig1) == 0x00001C, "Member 'FTrackSwitchStateConfig::SplineConfig1' has a wrong offset!");
static_assert(offsetof(FTrackSwitchStateConfig, SplineConfig2) == 0x00001F, "Member 'FTrackSwitchStateConfig::SplineConfig2' has a wrong offset!");

// ScriptStruct FortniteGame.VehicleTargetOrientation
// 0x0024 (0x0024 - 0x0000)
struct FVehicleTargetOrientation final
{
public:
	struct FVector                                UpVector;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ForwardVector;                                     // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleTargetOrientation) == 0x000004, "Wrong alignment on FVehicleTargetOrientation");
static_assert(sizeof(FVehicleTargetOrientation) == 0x000024, "Wrong size on FVehicleTargetOrientation");
static_assert(offsetof(FVehicleTargetOrientation, UpVector) == 0x000000, "Member 'FVehicleTargetOrientation::UpVector' has a wrong offset!");
static_assert(offsetof(FVehicleTargetOrientation, ForwardVector) == 0x00000C, "Member 'FVehicleTargetOrientation::ForwardVector' has a wrong offset!");
static_assert(offsetof(FVehicleTargetOrientation, Location) == 0x000018, "Member 'FVehicleTargetOrientation::Location' has a wrong offset!");

// ScriptStruct FortniteGame.ReplicatedAthenaVehicleAttributes
// 0x001C (0x001C - 0x0000)
struct FReplicatedAthenaVehicleAttributes final
{
public:
	float                                         FrontLateralFrictionScale;                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RearLateralFrictionScale;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakeForceTractionScale;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardForceTractionScale;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeAntigravityScale;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopSpeedScale;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleGravityScale;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicatedAthenaVehicleAttributes) == 0x000004, "Wrong alignment on FReplicatedAthenaVehicleAttributes");
static_assert(sizeof(FReplicatedAthenaVehicleAttributes) == 0x00001C, "Wrong size on FReplicatedAthenaVehicleAttributes");
static_assert(offsetof(FReplicatedAthenaVehicleAttributes, FrontLateralFrictionScale) == 0x000000, "Member 'FReplicatedAthenaVehicleAttributes::FrontLateralFrictionScale' has a wrong offset!");
static_assert(offsetof(FReplicatedAthenaVehicleAttributes, RearLateralFrictionScale) == 0x000004, "Member 'FReplicatedAthenaVehicleAttributes::RearLateralFrictionScale' has a wrong offset!");
static_assert(offsetof(FReplicatedAthenaVehicleAttributes, BrakeForceTractionScale) == 0x000008, "Member 'FReplicatedAthenaVehicleAttributes::BrakeForceTractionScale' has a wrong offset!");
static_assert(offsetof(FReplicatedAthenaVehicleAttributes, ForwardForceTractionScale) == 0x00000C, "Member 'FReplicatedAthenaVehicleAttributes::ForwardForceTractionScale' has a wrong offset!");
static_assert(offsetof(FReplicatedAthenaVehicleAttributes, SlopeAntigravityScale) == 0x000010, "Member 'FReplicatedAthenaVehicleAttributes::SlopeAntigravityScale' has a wrong offset!");
static_assert(offsetof(FReplicatedAthenaVehicleAttributes, TopSpeedScale) == 0x000014, "Member 'FReplicatedAthenaVehicleAttributes::TopSpeedScale' has a wrong offset!");
static_assert(offsetof(FReplicatedAthenaVehicleAttributes, VehicleGravityScale) == 0x000018, "Member 'FReplicatedAthenaVehicleAttributes::VehicleGravityScale' has a wrong offset!");

// ScriptStruct FortniteGame.SpringGroundTriangle
// 0x0018 (0x0018 - 0x0000)
struct FSpringGroundTriangle final
{
public:
	class FName                                   Socket0;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket1;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket2;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpringGroundTriangle) == 0x000004, "Wrong alignment on FSpringGroundTriangle");
static_assert(sizeof(FSpringGroundTriangle) == 0x000018, "Wrong size on FSpringGroundTriangle");
static_assert(offsetof(FSpringGroundTriangle, Socket0) == 0x000000, "Member 'FSpringGroundTriangle::Socket0' has a wrong offset!");
static_assert(offsetof(FSpringGroundTriangle, Socket1) == 0x000008, "Member 'FSpringGroundTriangle::Socket1' has a wrong offset!");
static_assert(offsetof(FSpringGroundTriangle, Socket2) == 0x000010, "Member 'FSpringGroundTriangle::Socket2' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaVehicleInputStateUnreliable
// 0x0028 (0x0028 - 0x0000)
struct FFortAthenaVehicleInputStateUnreliable final
{
public:
	float                                         ForwardAlpha;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightAlpha;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAlpha;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookUpDelta;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnDelta;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAlpha;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityOffset;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 MovementDir;                                       // 0x001C(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaVehicleInputStateUnreliable) == 0x000004, "Wrong alignment on FFortAthenaVehicleInputStateUnreliable");
static_assert(sizeof(FFortAthenaVehicleInputStateUnreliable) == 0x000028, "Wrong size on FFortAthenaVehicleInputStateUnreliable");
static_assert(offsetof(FFortAthenaVehicleInputStateUnreliable, ForwardAlpha) == 0x000000, "Member 'FFortAthenaVehicleInputStateUnreliable::ForwardAlpha' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputStateUnreliable, RightAlpha) == 0x000004, "Member 'FFortAthenaVehicleInputStateUnreliable::RightAlpha' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputStateUnreliable, PitchAlpha) == 0x000008, "Member 'FFortAthenaVehicleInputStateUnreliable::PitchAlpha' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputStateUnreliable, LookUpDelta) == 0x00000C, "Member 'FFortAthenaVehicleInputStateUnreliable::LookUpDelta' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputStateUnreliable, TurnDelta) == 0x000010, "Member 'FFortAthenaVehicleInputStateUnreliable::TurnDelta' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputStateUnreliable, SteerAlpha) == 0x000014, "Member 'FFortAthenaVehicleInputStateUnreliable::SteerAlpha' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputStateUnreliable, GravityOffset) == 0x000018, "Member 'FFortAthenaVehicleInputStateUnreliable::GravityOffset' has a wrong offset!");
static_assert(offsetof(FFortAthenaVehicleInputStateUnreliable, MovementDir) == 0x00001C, "Member 'FFortAthenaVehicleInputStateUnreliable::MovementDir' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertRuntimeData
// 0x000C (0x000C - 0x0000)
struct FFortMissionAlertRuntimeData final
{
public:
	class FName                                   MissionAlertCategoryName;                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespectTileRequirements;                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowQuickplay;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionAlertRuntimeData) == 0x000004, "Wrong alignment on FFortMissionAlertRuntimeData");
static_assert(sizeof(FFortMissionAlertRuntimeData) == 0x00000C, "Wrong size on FFortMissionAlertRuntimeData");
static_assert(offsetof(FFortMissionAlertRuntimeData, MissionAlertCategoryName) == 0x000000, "Member 'FFortMissionAlertRuntimeData::MissionAlertCategoryName' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertRuntimeData, bRespectTileRequirements) == 0x000008, "Member 'FFortMissionAlertRuntimeData::bRespectTileRequirements' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertRuntimeData, bAllowQuickplay) == 0x000009, "Member 'FFortMissionAlertRuntimeData::bAllowQuickplay' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterRuntimeData
// 0x04E0 (0x04E0 - 0x0000)
struct FFortTheaterRuntimeData final
{
public:
	EFortTheaterType                              TheaterType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TheaterTags;                                       // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  TheaterVisibilityRequirements;                     // 0x0028(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x0088(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESubGame                                      RequiredSubGameForVisibility;                      // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyMatchLinkedQuestsToTiles;                     // 0x00E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AWorldMapPin>               WorldMapPinClass;                                  // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TheaterImage;                                      // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    TheaterImages;                                     // 0x0100(0x0330)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortTheaterColorInfo                  TheaterColorInfo;                                  // 0x0430(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0460(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  MissionAlertRequirements;                          // 0x0468(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionAlertRuntimeData>   MissionAlertCategoryRequirements;                  // 0x04C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         HighestDifficulty;                                 // 0x04D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTheaterRuntimeData) == 0x000008, "Wrong alignment on FFortTheaterRuntimeData");
static_assert(sizeof(FFortTheaterRuntimeData) == 0x0004E0, "Wrong size on FFortTheaterRuntimeData");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterType) == 0x000000, "Member 'FFortTheaterRuntimeData::TheaterType' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterTags) == 0x000008, "Member 'FFortTheaterRuntimeData::TheaterTags' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterVisibilityRequirements) == 0x000028, "Member 'FFortTheaterRuntimeData::TheaterVisibilityRequirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, Requirements) == 0x000088, "Member 'FFortTheaterRuntimeData::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, RequiredSubGameForVisibility) == 0x0000E8, "Member 'FFortTheaterRuntimeData::RequiredSubGameForVisibility' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, bOnlyMatchLinkedQuestsToTiles) == 0x0000E9, "Member 'FFortTheaterRuntimeData::bOnlyMatchLinkedQuestsToTiles' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, WorldMapPinClass) == 0x0000F0, "Member 'FFortTheaterRuntimeData::WorldMapPinClass' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterImage) == 0x0000F8, "Member 'FFortTheaterRuntimeData::TheaterImage' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterImages) == 0x000100, "Member 'FFortTheaterRuntimeData::TheaterImages' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterColorInfo) == 0x000430, "Member 'FFortTheaterRuntimeData::TheaterColorInfo' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, Socket) == 0x000460, "Member 'FFortTheaterRuntimeData::Socket' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, MissionAlertRequirements) == 0x000468, "Member 'FFortTheaterRuntimeData::MissionAlertRequirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, MissionAlertCategoryRequirements) == 0x0004C8, "Member 'FFortTheaterRuntimeData::MissionAlertCategoryRequirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, HighestDifficulty) == 0x0004D8, "Member 'FFortTheaterRuntimeData::HighestDifficulty' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapMissionData
// 0x0030 (0x0030 - 0x0000)
struct FFortTheaterMapMissionData final
{
public:
	TArray<struct FFortTheaterMissionWeight>      MissionWeights;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterDifficultyWeight>   DifficultyWeights;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         NumMissionsAvailable;                              // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMissionsToChange;                               // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MissionChangeFrequency;                            // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTheaterMapMissionData) == 0x000008, "Wrong alignment on FFortTheaterMapMissionData");
static_assert(sizeof(FFortTheaterMapMissionData) == 0x000030, "Wrong size on FFortTheaterMapMissionData");
static_assert(offsetof(FFortTheaterMapMissionData, MissionWeights) == 0x000000, "Member 'FFortTheaterMapMissionData::MissionWeights' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, DifficultyWeights) == 0x000010, "Member 'FFortTheaterMapMissionData::DifficultyWeights' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, NumMissionsAvailable) == 0x000020, "Member 'FFortTheaterMapMissionData::NumMissionsAvailable' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, NumMissionsToChange) == 0x000024, "Member 'FFortTheaterMapMissionData::NumMissionsToChange' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, MissionChangeFrequency) == 0x000028, "Member 'FFortTheaterMapMissionData::MissionChangeFrequency' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertRequirementsInfo
// 0x0068 (0x0068 - 0x0000)
struct FFortMissionAlertRequirementsInfo final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x0008(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertRequirementsInfo) == 0x000008, "Wrong alignment on FFortMissionAlertRequirementsInfo");
static_assert(sizeof(FFortMissionAlertRequirementsInfo) == 0x000068, "Wrong size on FFortMissionAlertRequirementsInfo");
static_assert(offsetof(FFortMissionAlertRequirementsInfo, CategoryName) == 0x000000, "Member 'FFortMissionAlertRequirementsInfo::CategoryName' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertRequirementsInfo, Requirements) == 0x000008, "Member 'FFortMissionAlertRequirementsInfo::Requirements' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapRegionData
// 0x0110 (0x0110 - 0x0000)
struct FFortTheaterMapRegionData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RegionTags;                                        // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 TileIndices;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USlateBrushAsset>        RegionThemeIcon;                                   // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTheaterMapMissionData             MissionData;                                       // 0x0070(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x00A0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionAlertRequirementsInfo> MissionAlertRequirements;                          // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMapRegionData) == 0x000008, "Wrong alignment on FFortTheaterMapRegionData");
static_assert(sizeof(FFortTheaterMapRegionData) == 0x000110, "Wrong size on FFortTheaterMapRegionData");
static_assert(offsetof(FFortTheaterMapRegionData, DisplayName) == 0x000000, "Member 'FFortTheaterMapRegionData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, RegionTags) == 0x000018, "Member 'FFortTheaterMapRegionData::RegionTags' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, TileIndices) == 0x000038, "Member 'FFortTheaterMapRegionData::TileIndices' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, RegionThemeIcon) == 0x000048, "Member 'FFortTheaterMapRegionData::RegionThemeIcon' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, MissionData) == 0x000070, "Member 'FFortTheaterMapRegionData::MissionData' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, Requirements) == 0x0000A0, "Member 'FFortTheaterMapRegionData::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, MissionAlertRequirements) == 0x000100, "Member 'FFortTheaterMapRegionData::MissionAlertRequirements' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapData
// 0x0578 (0x0578 - 0x0000)
struct FFortTheaterMapData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TheaterSlot;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTestTheater;                                    // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLikeTestTheater;                              // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequiredEventFlag;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MissionRewardNamedWeightsRowName;                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ThreatDisplayName;                                 // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortTheaterRuntimeData                RuntimeInfo;                                       // 0x0078(0x04E0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterMapTileData>        Tiles;                                             // 0x0558(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterMapRegionData>      Regions;                                           // 0x0568(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMapData) == 0x000008, "Wrong alignment on FFortTheaterMapData");
static_assert(sizeof(FFortTheaterMapData) == 0x000578, "Wrong size on FFortTheaterMapData");
static_assert(offsetof(FFortTheaterMapData, DisplayName) == 0x000000, "Member 'FFortTheaterMapData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, UniqueId) == 0x000018, "Member 'FFortTheaterMapData::UniqueId' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, TheaterSlot) == 0x000028, "Member 'FFortTheaterMapData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, bIsTestTheater) == 0x00002C, "Member 'FFortTheaterMapData::bIsTestTheater' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, bHideLikeTestTheater) == 0x00002D, "Member 'FFortTheaterMapData::bHideLikeTestTheater' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, RequiredEventFlag) == 0x000030, "Member 'FFortTheaterMapData::RequiredEventFlag' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, MissionRewardNamedWeightsRowName) == 0x000040, "Member 'FFortTheaterMapData::MissionRewardNamedWeightsRowName' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, Description) == 0x000048, "Member 'FFortTheaterMapData::Description' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, ThreatDisplayName) == 0x000060, "Member 'FFortTheaterMapData::ThreatDisplayName' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, RuntimeInfo) == 0x000078, "Member 'FFortTheaterMapData::RuntimeInfo' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, Tiles) == 0x000558, "Member 'FFortTheaterMapData::Tiles' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, Regions) == 0x000568, "Member 'FFortTheaterMapData::Regions' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableTheaterMissions
// 0x0028 (0x0028 - 0x0000)
struct FFortAvailableTheaterMissions final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableMissionData>      AvailableMissions;                                 // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              NextRefresh;                                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableTheaterMissions) == 0x000008, "Wrong alignment on FFortAvailableTheaterMissions");
static_assert(sizeof(FFortAvailableTheaterMissions) == 0x000028, "Wrong size on FFortAvailableTheaterMissions");
static_assert(offsetof(FFortAvailableTheaterMissions, TheaterId) == 0x000000, "Member 'FFortAvailableTheaterMissions::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortAvailableTheaterMissions, AvailableMissions) == 0x000010, "Member 'FFortAvailableTheaterMissions::AvailableMissions' has a wrong offset!");
static_assert(offsetof(FFortAvailableTheaterMissions, NextRefresh) == 0x000020, "Member 'FFortAvailableTheaterMissions::NextRefresh' has a wrong offset!");

// ScriptStruct FortniteGame.FortActiveTheaterInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortActiveTheaterInfo final
{
public:
	TArray<struct FFortTheaterMapData>            Theaters;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableTheaterMissions>  Missions;                                          // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableMissionAlerts>    MissionAlerts;                                     // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortActiveTheaterInfo) == 0x000008, "Wrong alignment on FFortActiveTheaterInfo");
static_assert(sizeof(FFortActiveTheaterInfo) == 0x000030, "Wrong size on FFortActiveTheaterInfo");
static_assert(offsetof(FFortActiveTheaterInfo, Theaters) == 0x000000, "Member 'FFortActiveTheaterInfo::Theaters' has a wrong offset!");
static_assert(offsetof(FFortActiveTheaterInfo, Missions) == 0x000010, "Member 'FFortActiveTheaterInfo::Missions' has a wrong offset!");
static_assert(offsetof(FFortActiveTheaterInfo, MissionAlerts) == 0x000020, "Member 'FFortActiveTheaterInfo::MissionAlerts' has a wrong offset!");

// ScriptStruct FortniteGame.VehicleBounceState
// 0x000C (0x000C - 0x0000)
struct FVehicleBounceState final
{
public:
	EBounceCompressionState                       CompressionState;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CompressionValue;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateCooldown;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleBounceState) == 0x000004, "Wrong alignment on FVehicleBounceState");
static_assert(sizeof(FVehicleBounceState) == 0x00000C, "Wrong size on FVehicleBounceState");
static_assert(offsetof(FVehicleBounceState, CompressionState) == 0x000000, "Member 'FVehicleBounceState::CompressionState' has a wrong offset!");
static_assert(offsetof(FVehicleBounceState, CompressionValue) == 0x000004, "Member 'FVehicleBounceState::CompressionValue' has a wrong offset!");
static_assert(offsetof(FVehicleBounceState, StateCooldown) == 0x000008, "Member 'FVehicleBounceState::StateCooldown' has a wrong offset!");

// ScriptStruct FortniteGame.ReplicatedAthenaVehicleState
// 0x000C (0x000C - 0x0000)
struct FReplicatedAthenaVehicleState final
{
public:
	struct FVector                                ForwardVectorTarget;                               // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicatedAthenaVehicleState) == 0x000004, "Wrong alignment on FReplicatedAthenaVehicleState");
static_assert(sizeof(FReplicatedAthenaVehicleState) == 0x00000C, "Wrong size on FReplicatedAthenaVehicleState");
static_assert(offsetof(FReplicatedAthenaVehicleState, ForwardVectorTarget) == 0x000000, "Member 'FReplicatedAthenaVehicleState::ForwardVectorTarget' has a wrong offset!");

// ScriptStruct FortniteGame.FortAttributeDetailsInfo
// 0x0380 (0x0380 - 0x0000)
struct FFortAttributeDetailsInfo final
{
public:
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    Icon;                                              // 0x0020(0x0330)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0350(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0368(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAttributeDetailsInfo) == 0x000008, "Wrong alignment on FFortAttributeDetailsInfo");
static_assert(sizeof(FFortAttributeDetailsInfo) == 0x000380, "Wrong size on FFortAttributeDetailsInfo");
static_assert(offsetof(FFortAttributeDetailsInfo, RequiredTags) == 0x000000, "Member 'FFortAttributeDetailsInfo::RequiredTags' has a wrong offset!");
static_assert(offsetof(FFortAttributeDetailsInfo, Icon) == 0x000020, "Member 'FFortAttributeDetailsInfo::Icon' has a wrong offset!");
static_assert(offsetof(FFortAttributeDetailsInfo, DisplayName) == 0x000350, "Member 'FFortAttributeDetailsInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortAttributeDetailsInfo, Description) == 0x000368, "Member 'FFortAttributeDetailsInfo::Description' has a wrong offset!");

// ScriptStruct FortniteGame.FortAttributeInfo
// 0x0078 (0x0078 - 0x0000)
struct FFortAttributeInfo final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAttributeDisplay                         DisplayMethod;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnitDisplayName;                                   // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         DisplayScalingFactor;                              // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FormatText;                                        // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortAttributeDetailsInfo>      AttributeDetails;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowInSummaries;                                  // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInDifferences;                                // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAsBuffInFE;                                   // 0x0072(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegativeValuesShouldBeDisplayedPositively;        // 0x0073(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAttributeInfo) == 0x000008, "Wrong alignment on FFortAttributeInfo");
static_assert(sizeof(FFortAttributeInfo) == 0x000078, "Wrong size on FFortAttributeInfo");
static_assert(offsetof(FFortAttributeInfo, Attribute) == 0x000000, "Member 'FFortAttributeInfo::Attribute' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, DisplayMethod) == 0x000020, "Member 'FFortAttributeInfo::DisplayMethod' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, UnitDisplayName) == 0x000028, "Member 'FFortAttributeInfo::UnitDisplayName' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, DisplayScalingFactor) == 0x000040, "Member 'FFortAttributeInfo::DisplayScalingFactor' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, FormatText) == 0x000048, "Member 'FFortAttributeInfo::FormatText' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, AttributeDetails) == 0x000060, "Member 'FFortAttributeInfo::AttributeDetails' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, bShowInSummaries) == 0x000070, "Member 'FFortAttributeInfo::bShowInSummaries' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, bShowInDifferences) == 0x000071, "Member 'FFortAttributeInfo::bShowInDifferences' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, bShowAsBuffInFE) == 0x000072, "Member 'FFortAttributeInfo::bShowAsBuffInFE' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, bNegativeValuesShouldBeDisplayedPositively) == 0x000073, "Member 'FFortAttributeInfo::bNegativeValuesShouldBeDisplayedPositively' has a wrong offset!");

// ScriptStruct FortniteGame.FortBadgeScoringData
// 0x0010 (0x0018 - 0x0008)
struct FFortBadgeScoringData final : public FTableRowBase
{
public:
	int32                                         ScoreAwarded;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionPoints;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatCategory                                 ScoreCategory;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScoreThreshold;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBadgeScoringData) == 0x000008, "Wrong alignment on FFortBadgeScoringData");
static_assert(sizeof(FFortBadgeScoringData) == 0x000018, "Wrong size on FFortBadgeScoringData");
static_assert(offsetof(FFortBadgeScoringData, ScoreAwarded) == 0x000008, "Member 'FFortBadgeScoringData::ScoreAwarded' has a wrong offset!");
static_assert(offsetof(FFortBadgeScoringData, MissionPoints) == 0x00000C, "Member 'FFortBadgeScoringData::MissionPoints' has a wrong offset!");
static_assert(offsetof(FFortBadgeScoringData, ScoreCategory) == 0x000010, "Member 'FFortBadgeScoringData::ScoreCategory' has a wrong offset!");
static_assert(offsetof(FFortBadgeScoringData, ScoreThreshold) == 0x000014, "Member 'FFortBadgeScoringData::ScoreThreshold' has a wrong offset!");

// ScriptStruct FortniteGame.IssuedFriendCode
// 0x0028 (0x0028 - 0x0000)
struct FIssuedFriendCode final
{
public:
	class FString                                 CodeId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CodeType;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateCreated;                                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIssuedFriendCode) == 0x000008, "Wrong alignment on FIssuedFriendCode");
static_assert(sizeof(FIssuedFriendCode) == 0x000028, "Wrong size on FIssuedFriendCode");
static_assert(offsetof(FIssuedFriendCode, CodeId) == 0x000000, "Member 'FIssuedFriendCode::CodeId' has a wrong offset!");
static_assert(offsetof(FIssuedFriendCode, CodeType) == 0x000010, "Member 'FIssuedFriendCode::CodeType' has a wrong offset!");
static_assert(offsetof(FIssuedFriendCode, DateCreated) == 0x000020, "Member 'FIssuedFriendCode::DateCreated' has a wrong offset!");

// ScriptStruct FortniteGame.FortBroadcastInfoPerPlayer
// 0x0018 (0x0018 - 0x0000)
struct FFortBroadcastInfoPerPlayer final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortInventory*                         PlayerInventory;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortBroadcastRemoteClientInfo*         PlayerClientInfo;                                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBroadcastInfoPerPlayer) == 0x000008, "Wrong alignment on FFortBroadcastInfoPerPlayer");
static_assert(sizeof(FFortBroadcastInfoPerPlayer) == 0x000018, "Wrong size on FFortBroadcastInfoPerPlayer");
static_assert(offsetof(FFortBroadcastInfoPerPlayer, PlayerState) == 0x000000, "Member 'FFortBroadcastInfoPerPlayer::PlayerState' has a wrong offset!");
static_assert(offsetof(FFortBroadcastInfoPerPlayer, PlayerInventory) == 0x000008, "Member 'FFortBroadcastInfoPerPlayer::PlayerInventory' has a wrong offset!");
static_assert(offsetof(FFortBroadcastInfoPerPlayer, PlayerClientInfo) == 0x000010, "Member 'FFortBroadcastInfoPerPlayer::PlayerClientInfo' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestRewardNotification
// 0x0030 (0x0030 - 0x0000)
struct FFortQuestRewardNotification final
{
public:
	class FString                                 QuestId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         Loot;                                              // 0x0010(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestRewardNotification) == 0x000008, "Wrong alignment on FFortQuestRewardNotification");
static_assert(sizeof(FFortQuestRewardNotification) == 0x000030, "Wrong size on FFortQuestRewardNotification");
static_assert(offsetof(FFortQuestRewardNotification, QuestId) == 0x000000, "Member 'FFortQuestRewardNotification::QuestId' has a wrong offset!");
static_assert(offsetof(FFortQuestRewardNotification, Loot) == 0x000010, "Member 'FFortQuestRewardNotification::Loot' has a wrong offset!");

// ScriptStruct FortniteGame.FortTrapStats
// 0x0018 (0x0150 - 0x0138)
struct FFortTrapStats final : public FFortBaseWeaponStats
{
public:
	float                                         ArmTime;                                           // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDelay;                                         // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageDelay;                                       // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlacementScore;                                    // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivationScore;                                   // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTrapStats) == 0x000008, "Wrong alignment on FFortTrapStats");
static_assert(sizeof(FFortTrapStats) == 0x000150, "Wrong size on FFortTrapStats");
static_assert(offsetof(FFortTrapStats, ArmTime) == 0x000138, "Member 'FFortTrapStats::ArmTime' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, FireDelay) == 0x00013C, "Member 'FFortTrapStats::FireDelay' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, DamageDelay) == 0x000140, "Member 'FFortTrapStats::DamageDelay' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, PlacementScore) == 0x000144, "Member 'FFortTrapStats::PlacementScore' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, ActivationScore) == 0x000148, "Member 'FFortTrapStats::ActivationScore' has a wrong offset!");

// ScriptStruct FortniteGame.DistanceToTargetComparison
// 0x0030 (0x0030 - 0x0000)
struct FDistanceToTargetComparison final
{
public:
	bool                                          bUseOverriddenValue;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverriddenValue;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DistanceDataTags;                                  // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	EArithmeticKeyOperation                       Operator;                                          // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetDistanceComparisonType                 ComparisonType;                                    // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDistanceToTargetComparison) == 0x000008, "Wrong alignment on FDistanceToTargetComparison");
static_assert(sizeof(FDistanceToTargetComparison) == 0x000030, "Wrong size on FDistanceToTargetComparison");
static_assert(offsetof(FDistanceToTargetComparison, bUseOverriddenValue) == 0x000000, "Member 'FDistanceToTargetComparison::bUseOverriddenValue' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, OverriddenValue) == 0x000004, "Member 'FDistanceToTargetComparison::OverriddenValue' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, DistanceDataTags) == 0x000008, "Member 'FDistanceToTargetComparison::DistanceDataTags' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, Operator) == 0x000028, "Member 'FDistanceToTargetComparison::Operator' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, ComparisonType) == 0x000029, "Member 'FDistanceToTargetComparison::ComparisonType' has a wrong offset!");

// ScriptStruct FortniteGame.FortBuildingSoundsPerAffiliation
// 0x0010 (0x0010 - 0x0000)
struct FFortBuildingSoundsPerAffiliation final
{
public:
	class USoundBase*                             SoundFriendly;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundEnemy;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBuildingSoundsPerAffiliation) == 0x000008, "Wrong alignment on FFortBuildingSoundsPerAffiliation");
static_assert(sizeof(FFortBuildingSoundsPerAffiliation) == 0x000010, "Wrong size on FFortBuildingSoundsPerAffiliation");
static_assert(offsetof(FFortBuildingSoundsPerAffiliation, SoundFriendly) == 0x000000, "Member 'FFortBuildingSoundsPerAffiliation::SoundFriendly' has a wrong offset!");
static_assert(offsetof(FFortBuildingSoundsPerAffiliation, SoundEnemy) == 0x000008, "Member 'FFortBuildingSoundsPerAffiliation::SoundEnemy' has a wrong offset!");

// ScriptStruct FortniteGame.FortBuildingSoundsPerResourceType
// 0x0120 (0x0120 - 0x0000)
struct FFortBuildingSoundsPerResourceType final
{
public:
	struct FFortBuildingSoundsPerAffiliation      OnConstruction[0x6];                               // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortBuildingSoundsPerAffiliation      OnGenericDestruction[0x6];                         // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortBuildingSoundsPerAffiliation      OnPlayerBuiltDestruction[0x6];                     // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBuildingSoundsPerResourceType) == 0x000008, "Wrong alignment on FFortBuildingSoundsPerResourceType");
static_assert(sizeof(FFortBuildingSoundsPerResourceType) == 0x000120, "Wrong size on FFortBuildingSoundsPerResourceType");
static_assert(offsetof(FFortBuildingSoundsPerResourceType, OnConstruction) == 0x000000, "Member 'FFortBuildingSoundsPerResourceType::OnConstruction' has a wrong offset!");
static_assert(offsetof(FFortBuildingSoundsPerResourceType, OnGenericDestruction) == 0x000060, "Member 'FFortBuildingSoundsPerResourceType::OnGenericDestruction' has a wrong offset!");
static_assert(offsetof(FFortBuildingSoundsPerResourceType, OnPlayerBuiltDestruction) == 0x0000C0, "Member 'FFortBuildingSoundsPerResourceType::OnPlayerBuiltDestruction' has a wrong offset!");

// ScriptStruct FortniteGame.DevHeroClassInfo
// 0x0018 (0x0018 - 0x0000)
struct FDevHeroClassInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDevHeroClassInfo) == 0x000008, "Wrong alignment on FDevHeroClassInfo");
static_assert(sizeof(FDevHeroClassInfo) == 0x000018, "Wrong size on FDevHeroClassInfo");
static_assert(offsetof(FDevHeroClassInfo, Name) == 0x000000, "Member 'FDevHeroClassInfo::Name' has a wrong offset!");
static_assert(offsetof(FDevHeroClassInfo, Level) == 0x000010, "Member 'FDevHeroClassInfo::Level' has a wrong offset!");

// ScriptStruct FortniteGame.FortBuildingInstruction
// 0x0070 (0x0070 - 0x0000)
struct FFortBuildingInstruction final
{
public:
	struct FFortActorRecord                       ActorRecord;                                       // 0x0000(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBuildingInstruction) == 0x000010, "Wrong alignment on FFortBuildingInstruction");
static_assert(sizeof(FFortBuildingInstruction) == 0x000070, "Wrong size on FFortBuildingInstruction");
static_assert(offsetof(FFortBuildingInstruction, ActorRecord) == 0x000000, "Member 'FFortBuildingInstruction::ActorRecord' has a wrong offset!");

// ScriptStruct FortniteGame.FortCalendarEventInventoryTransformData
// 0x0138 (0x0140 - 0x0008)
struct FFortCalendarEventInventoryTransformData final : public FTableRowBase
{
public:
	class FName                                   CalendarChannelName;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CalendarEventName;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           AllowedProfileTypes;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PrerequisiteHomebaseProperties;                    // 0x0028(0x0020)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortQuestItemDefinition> PrerequisiteQuest;                                 // 0x0048(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    PrerequisiteObjective;                             // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortQuestItemDefinition>> PrerequisiteIncompleteOrUngrantedQuests;           // 0x0080(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortItemDefinition>> PrerequisiteUnownedItems;                          // 0x0090(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortQuestItemDefinition>> QuestsOnlyActiveDuringEvent;                       // 0x00A0(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          ItemsToGrant;                                      // 0x00B0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FFortHiddenRewardQuantityPair>  ItemsToGrantByTemplate;                            // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecipeDataTableRowHandleQuantityData> ConversionRecipesToRunOnEventStart;                // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecipeDataTableRowHandleQuantityData> ConversionRecipesToRunAfterEvent;                  // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          ItemsToRemoveAfterEvent;                           // 0x00F0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FFortHiddenRewardQuantityPair>  ItemsToRemoveAfterEventByTemplate;                 // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortPersistentResourceItemDefinition> EventCurrency;                                     // 0x0110(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventCurrencyConversionFactor;                     // 0x0138(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCalendarEventInventoryTransformData) == 0x000008, "Wrong alignment on FFortCalendarEventInventoryTransformData");
static_assert(sizeof(FFortCalendarEventInventoryTransformData) == 0x000140, "Wrong size on FFortCalendarEventInventoryTransformData");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, CalendarChannelName) == 0x000008, "Member 'FFortCalendarEventInventoryTransformData::CalendarChannelName' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, CalendarEventName) == 0x000010, "Member 'FFortCalendarEventInventoryTransformData::CalendarEventName' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, AllowedProfileTypes) == 0x000018, "Member 'FFortCalendarEventInventoryTransformData::AllowedProfileTypes' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, PrerequisiteHomebaseProperties) == 0x000028, "Member 'FFortCalendarEventInventoryTransformData::PrerequisiteHomebaseProperties' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, PrerequisiteQuest) == 0x000048, "Member 'FFortCalendarEventInventoryTransformData::PrerequisiteQuest' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, PrerequisiteObjective) == 0x000070, "Member 'FFortCalendarEventInventoryTransformData::PrerequisiteObjective' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, PrerequisiteIncompleteOrUngrantedQuests) == 0x000080, "Member 'FFortCalendarEventInventoryTransformData::PrerequisiteIncompleteOrUngrantedQuests' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, PrerequisiteUnownedItems) == 0x000090, "Member 'FFortCalendarEventInventoryTransformData::PrerequisiteUnownedItems' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, QuestsOnlyActiveDuringEvent) == 0x0000A0, "Member 'FFortCalendarEventInventoryTransformData::QuestsOnlyActiveDuringEvent' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ItemsToGrant) == 0x0000B0, "Member 'FFortCalendarEventInventoryTransformData::ItemsToGrant' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ItemsToGrantByTemplate) == 0x0000C0, "Member 'FFortCalendarEventInventoryTransformData::ItemsToGrantByTemplate' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ConversionRecipesToRunOnEventStart) == 0x0000D0, "Member 'FFortCalendarEventInventoryTransformData::ConversionRecipesToRunOnEventStart' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ConversionRecipesToRunAfterEvent) == 0x0000E0, "Member 'FFortCalendarEventInventoryTransformData::ConversionRecipesToRunAfterEvent' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ItemsToRemoveAfterEvent) == 0x0000F0, "Member 'FFortCalendarEventInventoryTransformData::ItemsToRemoveAfterEvent' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ItemsToRemoveAfterEventByTemplate) == 0x000100, "Member 'FFortCalendarEventInventoryTransformData::ItemsToRemoveAfterEventByTemplate' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, EventCurrency) == 0x000110, "Member 'FFortCalendarEventInventoryTransformData::EventCurrency' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, EventCurrencyConversionFactor) == 0x000138, "Member 'FFortCalendarEventInventoryTransformData::EventCurrencyConversionFactor' has a wrong offset!");

// ScriptStruct FortniteGame.HeroSlotInfo
// 0x0170 (0x0170 - 0x0000)
struct alignas(0x08) FHeroSlotInfo final
{
public:
	uint8                                         Pad_0[0x170];                                      // 0x0000(0x0170)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroSlotInfo) == 0x000008, "Wrong alignment on FHeroSlotInfo");
static_assert(sizeof(FHeroSlotInfo) == 0x000170, "Wrong size on FHeroSlotInfo");

// ScriptStruct FortniteGame.FortTwitchViewerNameAndAccountId
// 0x0020 (0x0020 - 0x0000)
struct FFortTwitchViewerNameAndAccountId final
{
public:
	class FString                                 TwitchViewerName;                                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountId;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTwitchViewerNameAndAccountId) == 0x000008, "Wrong alignment on FFortTwitchViewerNameAndAccountId");
static_assert(sizeof(FFortTwitchViewerNameAndAccountId) == 0x000020, "Wrong size on FFortTwitchViewerNameAndAccountId");
static_assert(offsetof(FFortTwitchViewerNameAndAccountId, TwitchViewerName) == 0x000000, "Member 'FFortTwitchViewerNameAndAccountId::TwitchViewerName' has a wrong offset!");
static_assert(offsetof(FFortTwitchViewerNameAndAccountId, AccountId) == 0x000010, "Member 'FFortTwitchViewerNameAndAccountId::AccountId' has a wrong offset!");

// ScriptStruct FortniteGame.FortTwitchViewerGrantedQuestNotification
// 0x0020 (0x0020 - 0x0000)
struct FFortTwitchViewerGrantedQuestNotification final
{
public:
	class FString                                 QuestTemplateId;                                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortTwitchViewerNameAndAccountId> ViewerIds;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTwitchViewerGrantedQuestNotification) == 0x000008, "Wrong alignment on FFortTwitchViewerGrantedQuestNotification");
static_assert(sizeof(FFortTwitchViewerGrantedQuestNotification) == 0x000020, "Wrong size on FFortTwitchViewerGrantedQuestNotification");
static_assert(offsetof(FFortTwitchViewerGrantedQuestNotification, QuestTemplateId) == 0x000000, "Member 'FFortTwitchViewerGrantedQuestNotification::QuestTemplateId' has a wrong offset!");
static_assert(offsetof(FFortTwitchViewerGrantedQuestNotification, ViewerIds) == 0x000010, "Member 'FFortTwitchViewerGrantedQuestNotification::ViewerIds' has a wrong offset!");

// ScriptStruct FortniteGame.InterpOffsetData
// 0x001C (0x001C - 0x0000)
struct FInterpOffsetData final
{
public:
	struct FVector                                ViewOffset;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LargeBodyTypeAddtnlOffset;                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngle;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterpOffsetData) == 0x000004, "Wrong alignment on FInterpOffsetData");
static_assert(sizeof(FInterpOffsetData) == 0x00001C, "Wrong size on FInterpOffsetData");
static_assert(offsetof(FInterpOffsetData, ViewOffset) == 0x000000, "Member 'FInterpOffsetData::ViewOffset' has a wrong offset!");
static_assert(offsetof(FInterpOffsetData, LargeBodyTypeAddtnlOffset) == 0x00000C, "Member 'FInterpOffsetData::LargeBodyTypeAddtnlOffset' has a wrong offset!");
static_assert(offsetof(FInterpOffsetData, PitchAngle) == 0x000018, "Member 'FInterpOffsetData::PitchAngle' has a wrong offset!");

// ScriptStruct FortniteGame.InterpOffset
// 0x0010 (0x0010 - 0x0000)
struct FInterpOffset final
{
public:
	TArray<struct FInterpOffsetData>              SamplePoints;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterpOffset) == 0x000008, "Wrong alignment on FInterpOffset");
static_assert(sizeof(FInterpOffset) == 0x000010, "Wrong size on FInterpOffset");
static_assert(offsetof(FInterpOffset, SamplePoints) == 0x000000, "Member 'FInterpOffset::SamplePoints' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerToxicityReportRequest
// 0x0098 (0x0098 - 0x0000)
struct FPlayerToxicityReportRequest final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Details;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameSessionId;                                     // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreativeIslandSharingLink;                         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreativeIslandGuid;                                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreativeIslandOwnerAccountId;                      // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlaylistName;                                      // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCompetitiveEvent;                               // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReporterPlatform;                                  // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OffenderPlatform;                                  // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerToxicityReportRequest) == 0x000008, "Wrong alignment on FPlayerToxicityReportRequest");
static_assert(sizeof(FPlayerToxicityReportRequest) == 0x000098, "Wrong size on FPlayerToxicityReportRequest");
static_assert(offsetof(FPlayerToxicityReportRequest, Reason) == 0x000000, "Member 'FPlayerToxicityReportRequest::Reason' has a wrong offset!");
static_assert(offsetof(FPlayerToxicityReportRequest, Details) == 0x000010, "Member 'FPlayerToxicityReportRequest::Details' has a wrong offset!");
static_assert(offsetof(FPlayerToxicityReportRequest, GameSessionId) == 0x000020, "Member 'FPlayerToxicityReportRequest::GameSessionId' has a wrong offset!");
static_assert(offsetof(FPlayerToxicityReportRequest, CreativeIslandSharingLink) == 0x000030, "Member 'FPlayerToxicityReportRequest::CreativeIslandSharingLink' has a wrong offset!");
static_assert(offsetof(FPlayerToxicityReportRequest, CreativeIslandGuid) == 0x000040, "Member 'FPlayerToxicityReportRequest::CreativeIslandGuid' has a wrong offset!");
static_assert(offsetof(FPlayerToxicityReportRequest, CreativeIslandOwnerAccountId) == 0x000050, "Member 'FPlayerToxicityReportRequest::CreativeIslandOwnerAccountId' has a wrong offset!");
static_assert(offsetof(FPlayerToxicityReportRequest, PlaylistName) == 0x000060, "Member 'FPlayerToxicityReportRequest::PlaylistName' has a wrong offset!");
static_assert(offsetof(FPlayerToxicityReportRequest, bIsCompetitiveEvent) == 0x000070, "Member 'FPlayerToxicityReportRequest::bIsCompetitiveEvent' has a wrong offset!");
static_assert(offsetof(FPlayerToxicityReportRequest, ReporterPlatform) == 0x000078, "Member 'FPlayerToxicityReportRequest::ReporterPlatform' has a wrong offset!");
static_assert(offsetof(FPlayerToxicityReportRequest, OffenderPlatform) == 0x000088, "Member 'FPlayerToxicityReportRequest::OffenderPlatform' has a wrong offset!");

// ScriptStruct FortniteGame.FortProceduralCatalogCostPriceFactor
// 0x0008 (0x0010 - 0x0008)
struct FFortProceduralCatalogCostPriceFactor final : public FTableRowBase
{
public:
	float                                         PriceFactor;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortProceduralCatalogCostPriceFactor) == 0x000008, "Wrong alignment on FFortProceduralCatalogCostPriceFactor");
static_assert(sizeof(FFortProceduralCatalogCostPriceFactor) == 0x000010, "Wrong size on FFortProceduralCatalogCostPriceFactor");
static_assert(offsetof(FFortProceduralCatalogCostPriceFactor, PriceFactor) == 0x000008, "Member 'FFortProceduralCatalogCostPriceFactor::PriceFactor' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientMarkerRequest
// 0x0038 (0x0038 - 0x0000)
struct FFortClientMarkerRequest final
{
public:
	int32                                         InstanceId;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortWorldMarkerType                          MarkerType;                                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldPosition;                                     // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPositionOffset;                               // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldNormal;                                       // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MarkedActor;                                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientMarkerRequest) == 0x000008, "Wrong alignment on FFortClientMarkerRequest");
static_assert(sizeof(FFortClientMarkerRequest) == 0x000038, "Wrong size on FFortClientMarkerRequest");
static_assert(offsetof(FFortClientMarkerRequest, InstanceId) == 0x000000, "Member 'FFortClientMarkerRequest::InstanceId' has a wrong offset!");
static_assert(offsetof(FFortClientMarkerRequest, MarkerType) == 0x000004, "Member 'FFortClientMarkerRequest::MarkerType' has a wrong offset!");
static_assert(offsetof(FFortClientMarkerRequest, WorldPosition) == 0x000008, "Member 'FFortClientMarkerRequest::WorldPosition' has a wrong offset!");
static_assert(offsetof(FFortClientMarkerRequest, WorldPositionOffset) == 0x000014, "Member 'FFortClientMarkerRequest::WorldPositionOffset' has a wrong offset!");
static_assert(offsetof(FFortClientMarkerRequest, WorldNormal) == 0x000020, "Member 'FFortClientMarkerRequest::WorldNormal' has a wrong offset!");
static_assert(offsetof(FFortClientMarkerRequest, MarkedActor) == 0x000030, "Member 'FFortClientMarkerRequest::MarkedActor' has a wrong offset!");

// ScriptStruct FortniteGame.FortMigrationDataTableRow
// 0x0020 (0x0028 - 0x0008)
struct FFortMigrationDataTableRow final : public FTableRowBase
{
public:
	class FString                                 OldItemTemplate;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewItemTemplate;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMigrationDataTableRow) == 0x000008, "Wrong alignment on FFortMigrationDataTableRow");
static_assert(sizeof(FFortMigrationDataTableRow) == 0x000028, "Wrong size on FFortMigrationDataTableRow");
static_assert(offsetof(FFortMigrationDataTableRow, OldItemTemplate) == 0x000008, "Member 'FFortMigrationDataTableRow::OldItemTemplate' has a wrong offset!");
static_assert(offsetof(FFortMigrationDataTableRow, NewItemTemplate) == 0x000018, "Member 'FFortMigrationDataTableRow::NewItemTemplate' has a wrong offset!");

// ScriptStruct FortniteGame.FortChallengeBundleSpecialOffer
// 0x0050 (0x0050 - 0x0000)
struct FFortChallengeBundleSpecialOffer final
{
public:
	class FString                                 Storefront;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RichText;                                          // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>               OfferImage;                                        // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortChallengeBundleSpecialOffer) == 0x000008, "Wrong alignment on FFortChallengeBundleSpecialOffer");
static_assert(sizeof(FFortChallengeBundleSpecialOffer) == 0x000050, "Wrong size on FFortChallengeBundleSpecialOffer");
static_assert(offsetof(FFortChallengeBundleSpecialOffer, Storefront) == 0x000000, "Member 'FFortChallengeBundleSpecialOffer::Storefront' has a wrong offset!");
static_assert(offsetof(FFortChallengeBundleSpecialOffer, RichText) == 0x000010, "Member 'FFortChallengeBundleSpecialOffer::RichText' has a wrong offset!");
static_assert(offsetof(FFortChallengeBundleSpecialOffer, OfferImage) == 0x000028, "Member 'FFortChallengeBundleSpecialOffer::OfferImage' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootPackageData
// 0x00B0 (0x00B8 - 0x0008)
struct FFortLootPackageData final : public FTableRowBase
{
public:
	class FName                                   LootPackageID;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   NamedWeightMult;                                   // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Count;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LootPackageCategory;                               // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   RequiredTag;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootPackageCall;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PersistentLevel;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinWorldLevel;                                     // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWorldLevel;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowBonusDrops;                                  // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Annotation;                                        // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootPackageData) == 0x000008, "Wrong alignment on FFortLootPackageData");
static_assert(sizeof(FFortLootPackageData) == 0x0000B8, "Wrong size on FFortLootPackageData");
static_assert(offsetof(FFortLootPackageData, LootPackageID) == 0x000008, "Member 'FFortLootPackageData::LootPackageID' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, Weight) == 0x000010, "Member 'FFortLootPackageData::Weight' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, NamedWeightMult) == 0x000014, "Member 'FFortLootPackageData::NamedWeightMult' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, Count) == 0x00001C, "Member 'FFortLootPackageData::Count' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, LootPackageCategory) == 0x000020, "Member 'FFortLootPackageData::LootPackageCategory' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, GameplayTags) == 0x000028, "Member 'FFortLootPackageData::GameplayTags' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, RequiredTag) == 0x000048, "Member 'FFortLootPackageData::RequiredTag' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, LootPackageCall) == 0x000050, "Member 'FFortLootPackageData::LootPackageCall' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, ItemDefinition) == 0x000060, "Member 'FFortLootPackageData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, PersistentLevel) == 0x000088, "Member 'FFortLootPackageData::PersistentLevel' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, MinWorldLevel) == 0x000098, "Member 'FFortLootPackageData::MinWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, MaxWorldLevel) == 0x00009C, "Member 'FFortLootPackageData::MaxWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, bAllowBonusDrops) == 0x0000A0, "Member 'FFortLootPackageData::bAllowBonusDrops' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, Annotation) == 0x0000A8, "Member 'FFortLootPackageData::Annotation' has a wrong offset!");

// ScriptStruct FortniteGame.FortChallengeBundleScheduleEntry
// 0x0030 (0x0030 - 0x0000)
struct FFortChallengeBundleScheduleEntry final
{
public:
	TSoftObjectPtr<class UFortChallengeBundleItemDefinition> ChallengeBundle;                                   // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChallengeScheduleUnlockType                  UnlockType;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockValue;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortChallengeBundleScheduleEntry) == 0x000008, "Wrong alignment on FFortChallengeBundleScheduleEntry");
static_assert(sizeof(FFortChallengeBundleScheduleEntry) == 0x000030, "Wrong size on FFortChallengeBundleScheduleEntry");
static_assert(offsetof(FFortChallengeBundleScheduleEntry, ChallengeBundle) == 0x000000, "Member 'FFortChallengeBundleScheduleEntry::ChallengeBundle' has a wrong offset!");
static_assert(offsetof(FFortChallengeBundleScheduleEntry, UnlockType) == 0x000028, "Member 'FFortChallengeBundleScheduleEntry::UnlockType' has a wrong offset!");
static_assert(offsetof(FFortChallengeBundleScheduleEntry, UnlockValue) == 0x00002C, "Member 'FFortChallengeBundleScheduleEntry::UnlockValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortSavedModeLoadout
// 0x0020 (0x0020 - 0x0000)
struct FFortSavedModeLoadout final
{
public:
	class FString                                 LoadoutName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SelectedGadgets;                                   // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSavedModeLoadout) == 0x000008, "Wrong alignment on FFortSavedModeLoadout");
static_assert(sizeof(FFortSavedModeLoadout) == 0x000020, "Wrong size on FFortSavedModeLoadout");
static_assert(offsetof(FFortSavedModeLoadout, LoadoutName) == 0x000000, "Member 'FFortSavedModeLoadout::LoadoutName' has a wrong offset!");
static_assert(offsetof(FFortSavedModeLoadout, SelectedGadgets) == 0x000010, "Member 'FFortSavedModeLoadout::SelectedGadgets' has a wrong offset!");

// ScriptStruct FortniteGame.FortChallengeSetStyle
// 0x0080 (0x0080 - 0x0000)
struct FFortChallengeSetStyle final
{
public:
	struct FLinearColor                           PrimaryColor;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AccentColor;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 DisplayImage;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 CustomBackground;                                  // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortChallengeSetStyle) == 0x000008, "Wrong alignment on FFortChallengeSetStyle");
static_assert(sizeof(FFortChallengeSetStyle) == 0x000080, "Wrong size on FFortChallengeSetStyle");
static_assert(offsetof(FFortChallengeSetStyle, PrimaryColor) == 0x000000, "Member 'FFortChallengeSetStyle::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FFortChallengeSetStyle, SecondaryColor) == 0x000010, "Member 'FFortChallengeSetStyle::SecondaryColor' has a wrong offset!");
static_assert(offsetof(FFortChallengeSetStyle, AccentColor) == 0x000020, "Member 'FFortChallengeSetStyle::AccentColor' has a wrong offset!");
static_assert(offsetof(FFortChallengeSetStyle, DisplayImage) == 0x000030, "Member 'FFortChallengeSetStyle::DisplayImage' has a wrong offset!");
static_assert(offsetof(FFortChallengeSetStyle, CustomBackground) == 0x000058, "Member 'FFortChallengeSetStyle::CustomBackground' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayCueAudioInfo
// 0x0068 (0x0068 - 0x0000)
struct FFortGameplayCueAudioInfo
{
public:
	struct FFortGameplayCueSpawnCondition         Condition;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortGameplayCueAttachInfo             Attachment;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundCue;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayBeforePlayInSeconds;                          // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideCondition : 1;                            // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideAttachment : 1;                           // 0x0064(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayCueAudioInfo) == 0x000008, "Wrong alignment on FFortGameplayCueAudioInfo");
static_assert(sizeof(FFortGameplayCueAudioInfo) == 0x000068, "Wrong size on FFortGameplayCueAudioInfo");
static_assert(offsetof(FFortGameplayCueAudioInfo, Condition) == 0x000000, "Member 'FFortGameplayCueAudioInfo::Condition' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueAudioInfo, Attachment) == 0x000030, "Member 'FFortGameplayCueAudioInfo::Attachment' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueAudioInfo, SoundCue) == 0x000058, "Member 'FFortGameplayCueAudioInfo::SoundCue' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueAudioInfo, DelayBeforePlayInSeconds) == 0x000060, "Member 'FFortGameplayCueAudioInfo::DelayBeforePlayInSeconds' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnPickupEntry
// 0x0018 (0x0018 - 0x0000)
struct FSpawnPickupEntry final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     PickupClass;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnPickupEntry) == 0x000008, "Wrong alignment on FSpawnPickupEntry");
static_assert(sizeof(FSpawnPickupEntry) == 0x000018, "Wrong size on FSpawnPickupEntry");
static_assert(offsetof(FSpawnPickupEntry, Name) == 0x000000, "Member 'FSpawnPickupEntry::Name' has a wrong offset!");
static_assert(offsetof(FSpawnPickupEntry, PickupClass) == 0x000010, "Member 'FSpawnPickupEntry::PickupClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortScoreStylingInfo
// 0x0358 (0x0358 - 0x0000)
struct FFortScoreStylingInfo final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    Icon;                                              // 0x0018(0x0330)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0348(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortScoreStylingInfo) == 0x000008, "Wrong alignment on FFortScoreStylingInfo");
static_assert(sizeof(FFortScoreStylingInfo) == 0x000358, "Wrong size on FFortScoreStylingInfo");
static_assert(offsetof(FFortScoreStylingInfo, Name) == 0x000000, "Member 'FFortScoreStylingInfo::Name' has a wrong offset!");
static_assert(offsetof(FFortScoreStylingInfo, Icon) == 0x000018, "Member 'FFortScoreStylingInfo::Icon' has a wrong offset!");
static_assert(offsetof(FFortScoreStylingInfo, Color) == 0x000348, "Member 'FFortScoreStylingInfo::Color' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementData_Conversation
// 0x0010 (0x0010 - 0x0000)
struct FFortClientAnnouncementData_Conversation final : public FFortClientAnnouncementData
{
public:
	class UFortConversation*                      Conversation;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAnnouncementDisplayPreference            ConversationDisplayPreference;                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortClientAnnouncementData_Conversation) == 0x000008, "Wrong alignment on FFortClientAnnouncementData_Conversation");
static_assert(sizeof(FFortClientAnnouncementData_Conversation) == 0x000010, "Wrong size on FFortClientAnnouncementData_Conversation");
static_assert(offsetof(FFortClientAnnouncementData_Conversation, Conversation) == 0x000000, "Member 'FFortClientAnnouncementData_Conversation::Conversation' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Conversation, ConversationDisplayPreference) == 0x000008, "Member 'FFortClientAnnouncementData_Conversation::ConversationDisplayPreference' has a wrong offset!");

// ScriptStruct FortniteGame.MarkedActorDisplayInfo
// 0x0068 (0x0068 - 0x0000)
struct FMarkedActorDisplayInfo final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                CustomIndicatorClass;                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PrimaryColor;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMarkedActorScreenClamping                ScreenClamping;                                    // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMarkedActorDisplayInfo) == 0x000008, "Wrong alignment on FMarkedActorDisplayInfo");
static_assert(sizeof(FMarkedActorDisplayInfo) == 0x000068, "Wrong size on FMarkedActorDisplayInfo");
static_assert(offsetof(FMarkedActorDisplayInfo, DisplayName) == 0x000000, "Member 'FMarkedActorDisplayInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FMarkedActorDisplayInfo, Icon) == 0x000018, "Member 'FMarkedActorDisplayInfo::Icon' has a wrong offset!");
static_assert(offsetof(FMarkedActorDisplayInfo, CustomIndicatorClass) == 0x000040, "Member 'FMarkedActorDisplayInfo::CustomIndicatorClass' has a wrong offset!");
static_assert(offsetof(FMarkedActorDisplayInfo, PrimaryColor) == 0x000048, "Member 'FMarkedActorDisplayInfo::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FMarkedActorDisplayInfo, Sound) == 0x000058, "Member 'FMarkedActorDisplayInfo::Sound' has a wrong offset!");
static_assert(offsetof(FMarkedActorDisplayInfo, ScreenClamping) == 0x000060, "Member 'FMarkedActorDisplayInfo::ScreenClamping' has a wrong offset!");

// ScriptStruct FortniteGame.FortWorldMarkerData
// 0x0108 (0x0108 - 0x0000)
struct FFortWorldMarkerData final
{
public:
	struct FMarkerID                              MarkerID;                                          // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       Owner;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortWorldMarkerType                          MarkerType;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldPosition;                                     // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPositionOffset;                               // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldNormal;                                       // 0x002C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   MarkedActorClass;                                  // 0x0048(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  MarkedActor;                                       // 0x0070(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCustomDisplayInfo;                             // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarkedActorDisplayInfo                CustomDisplayInfo;                                 // 0x00A0(0x0068)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortWorldMarkerData) == 0x000008, "Wrong alignment on FFortWorldMarkerData");
static_assert(sizeof(FFortWorldMarkerData) == 0x000108, "Wrong size on FFortWorldMarkerData");
static_assert(offsetof(FFortWorldMarkerData, MarkerID) == 0x000000, "Member 'FFortWorldMarkerData::MarkerID' has a wrong offset!");
static_assert(offsetof(FFortWorldMarkerData, Owner) == 0x000008, "Member 'FFortWorldMarkerData::Owner' has a wrong offset!");
static_assert(offsetof(FFortWorldMarkerData, MarkerType) == 0x000010, "Member 'FFortWorldMarkerData::MarkerType' has a wrong offset!");
static_assert(offsetof(FFortWorldMarkerData, WorldPosition) == 0x000014, "Member 'FFortWorldMarkerData::WorldPosition' has a wrong offset!");
static_assert(offsetof(FFortWorldMarkerData, WorldPositionOffset) == 0x000020, "Member 'FFortWorldMarkerData::WorldPositionOffset' has a wrong offset!");
static_assert(offsetof(FFortWorldMarkerData, WorldNormal) == 0x00002C, "Member 'FFortWorldMarkerData::WorldNormal' has a wrong offset!");
static_assert(offsetof(FFortWorldMarkerData, ItemDefinition) == 0x000038, "Member 'FFortWorldMarkerData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortWorldMarkerData, ItemCount) == 0x000040, "Member 'FFortWorldMarkerData::ItemCount' has a wrong offset!");
static_assert(offsetof(FFortWorldMarkerData, MarkedActorClass) == 0x000048, "Member 'FFortWorldMarkerData::MarkedActorClass' has a wrong offset!");
static_assert(offsetof(FFortWorldMarkerData, MarkedActor) == 0x000070, "Member 'FFortWorldMarkerData::MarkedActor' has a wrong offset!");
static_assert(offsetof(FFortWorldMarkerData, bHasCustomDisplayInfo) == 0x000098, "Member 'FFortWorldMarkerData::bHasCustomDisplayInfo' has a wrong offset!");
static_assert(offsetof(FFortWorldMarkerData, CustomDisplayInfo) == 0x0000A0, "Member 'FFortWorldMarkerData::CustomDisplayInfo' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementData_ZoneModifiers
// 0x0010 (0x0010 - 0x0000)
struct FFortClientAnnouncementData_ZoneModifiers final : public FFortClientAnnouncementData
{
public:
	TArray<class UFortGameplayModifierItemDefinition*> Modifiers;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientAnnouncementData_ZoneModifiers) == 0x000008, "Wrong alignment on FFortClientAnnouncementData_ZoneModifiers");
static_assert(sizeof(FFortClientAnnouncementData_ZoneModifiers) == 0x000010, "Wrong size on FFortClientAnnouncementData_ZoneModifiers");
static_assert(offsetof(FFortClientAnnouncementData_ZoneModifiers, Modifiers) == 0x000000, "Member 'FFortClientAnnouncementData_ZoneModifiers::Modifiers' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementQueue
// 0x0010 (0x0010 - 0x0000)
struct FFortClientAnnouncementQueue final
{
public:
	TArray<class AFortClientAnnouncement*>        Announcements;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientAnnouncementQueue) == 0x000008, "Wrong alignment on FFortClientAnnouncementQueue");
static_assert(sizeof(FFortClientAnnouncementQueue) == 0x000010, "Wrong size on FFortClientAnnouncementQueue");
static_assert(offsetof(FFortClientAnnouncementQueue, Announcements) == 0x000000, "Member 'FFortClientAnnouncementQueue::Announcements' has a wrong offset!");

// ScriptStruct FortniteGame.ConsumableTestDefinition
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FConsumableTestDefinition final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConsumableTestDefinition) == 0x000008, "Wrong alignment on FConsumableTestDefinition");
static_assert(sizeof(FConsumableTestDefinition) == 0x000030, "Wrong size on FConsumableTestDefinition");

// ScriptStruct FortniteGame.GameplayFeedbackEventInfo
// 0x0050 (0x0050 - 0x0000)
struct FGameplayFeedbackEventInfo final
{
public:
	class FString                                 DisplayText;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x0010(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaGameMsgType                            MsgType;                                           // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeamBasedEvent;                                   // 0x0019(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           FriendlyEventMessages;                             // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           HostileEventMessages;                              // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           NeutralEventMessages;                              // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayFeedbackEventInfo) == 0x000008, "Wrong alignment on FGameplayFeedbackEventInfo");
static_assert(sizeof(FGameplayFeedbackEventInfo) == 0x000050, "Wrong size on FGameplayFeedbackEventInfo");
static_assert(offsetof(FGameplayFeedbackEventInfo, DisplayText) == 0x000000, "Member 'FGameplayFeedbackEventInfo::DisplayText' has a wrong offset!");
static_assert(offsetof(FGameplayFeedbackEventInfo, EventTag) == 0x000010, "Member 'FGameplayFeedbackEventInfo::EventTag' has a wrong offset!");
static_assert(offsetof(FGameplayFeedbackEventInfo, MsgType) == 0x000018, "Member 'FGameplayFeedbackEventInfo::MsgType' has a wrong offset!");
static_assert(offsetof(FGameplayFeedbackEventInfo, bTeamBasedEvent) == 0x000019, "Member 'FGameplayFeedbackEventInfo::bTeamBasedEvent' has a wrong offset!");
static_assert(offsetof(FGameplayFeedbackEventInfo, FriendlyEventMessages) == 0x000020, "Member 'FGameplayFeedbackEventInfo::FriendlyEventMessages' has a wrong offset!");
static_assert(offsetof(FGameplayFeedbackEventInfo, HostileEventMessages) == 0x000030, "Member 'FGameplayFeedbackEventInfo::HostileEventMessages' has a wrong offset!");
static_assert(offsetof(FGameplayFeedbackEventInfo, NeutralEventMessages) == 0x000040, "Member 'FGameplayFeedbackEventInfo::NeutralEventMessages' has a wrong offset!");

// ScriptStruct FortniteGame.FortPendingSlottedItemOperation
// 0x0018 (0x0018 - 0x0000)
struct FFortPendingSlottedItemOperation final
{
public:
	class FString                                 SlottedItemId;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotRowName;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPendingSlottedItemOperation) == 0x000008, "Wrong alignment on FFortPendingSlottedItemOperation");
static_assert(sizeof(FFortPendingSlottedItemOperation) == 0x000018, "Wrong size on FFortPendingSlottedItemOperation");
static_assert(offsetof(FFortPendingSlottedItemOperation, SlottedItemId) == 0x000000, "Member 'FFortPendingSlottedItemOperation::SlottedItemId' has a wrong offset!");
static_assert(offsetof(FFortPendingSlottedItemOperation, SlotRowName) == 0x000010, "Member 'FFortPendingSlottedItemOperation::SlotRowName' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookStat
// 0x0004 (0x0004 - 0x0000)
struct FFortCollectionBookStat final
{
public:
	int32                                         MaxBookXpLevelAchieved;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookStat) == 0x000004, "Wrong alignment on FFortCollectionBookStat");
static_assert(sizeof(FFortCollectionBookStat) == 0x000004, "Wrong size on FFortCollectionBookStat");
static_assert(offsetof(FFortCollectionBookStat, MaxBookXpLevelAchieved) == 0x000000, "Member 'FFortCollectionBookStat::MaxBookXpLevelAchieved' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookPageCategoryTableRow
// 0x0020 (0x0028 - 0x0008)
struct FFortCollectionBookPageCategoryTableRow final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCollectionBookPageCategoryTableRow) == 0x000008, "Wrong alignment on FFortCollectionBookPageCategoryTableRow");
static_assert(sizeof(FFortCollectionBookPageCategoryTableRow) == 0x000028, "Wrong size on FFortCollectionBookPageCategoryTableRow");
static_assert(offsetof(FFortCollectionBookPageCategoryTableRow, Name) == 0x000008, "Member 'FFortCollectionBookPageCategoryTableRow::Name' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageCategoryTableRow, SortPriority) == 0x000020, "Member 'FFortCollectionBookPageCategoryTableRow::SortPriority' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookPageData
// 0x0070 (0x0078 - 0x0008)
struct FFortCollectionBookPageData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
	class FName                                   CategoryId;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileId;                                         // 0x002C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SectionRowNames;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FFortRewardInfo                        Rewards;                                           // 0x0048(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookPageData) == 0x000008, "Wrong alignment on FFortCollectionBookPageData");
static_assert(sizeof(FFortCollectionBookPageData) == 0x000078, "Wrong size on FFortCollectionBookPageData");
static_assert(offsetof(FFortCollectionBookPageData, Name) == 0x000008, "Member 'FFortCollectionBookPageData::Name' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageData, CategoryId) == 0x000020, "Member 'FFortCollectionBookPageData::CategoryId' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageData, SortPriority) == 0x000028, "Member 'FFortCollectionBookPageData::SortPriority' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageData, ProfileId) == 0x00002C, "Member 'FFortCollectionBookPageData::ProfileId' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageData, SectionRowNames) == 0x000038, "Member 'FFortCollectionBookPageData::SectionRowNames' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageData, Rewards) == 0x000048, "Member 'FFortCollectionBookPageData::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.GameRewardOverridesInfo
// 0x0038 (0x0040 - 0x0008)
struct FGameRewardOverridesInfo final : public FTableRowBase
{
public:
	class FString                                 MissionName;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverrideRewardsTag;                                // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LootTierGroup;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameRewardOverridesInfo) == 0x000008, "Wrong alignment on FGameRewardOverridesInfo");
static_assert(sizeof(FGameRewardOverridesInfo) == 0x000040, "Wrong size on FGameRewardOverridesInfo");
static_assert(offsetof(FGameRewardOverridesInfo, MissionName) == 0x000008, "Member 'FGameRewardOverridesInfo::MissionName' has a wrong offset!");
static_assert(offsetof(FGameRewardOverridesInfo, OverrideRewardsTag) == 0x000018, "Member 'FGameRewardOverridesInfo::OverrideRewardsTag' has a wrong offset!");
static_assert(offsetof(FGameRewardOverridesInfo, LootLevel) == 0x000028, "Member 'FGameRewardOverridesInfo::LootLevel' has a wrong offset!");
static_assert(offsetof(FGameRewardOverridesInfo, LootTierGroup) == 0x000030, "Member 'FGameRewardOverridesInfo::LootTierGroup' has a wrong offset!");

// ScriptStruct FortniteGame.FortEventConditional
// 0x0038 (0x0038 - 0x0000)
struct FFortEventConditional final
{
public:
	EFortEventConditionType                       ConditionalType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StatToCompare;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatRecordingPeriod                          RelevantPeriod;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCompare                                  ComparisonType;                                    // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSchematicItemDefinition*           CraftingItem;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCraft;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStat*                                  Stat;                                              // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FPC;                                               // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEventConditional) == 0x000008, "Wrong alignment on FFortEventConditional");
static_assert(sizeof(FFortEventConditional) == 0x000038, "Wrong size on FFortEventConditional");
static_assert(offsetof(FFortEventConditional, ConditionalType) == 0x000000, "Member 'FFortEventConditional::ConditionalType' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, StatToCompare) == 0x000004, "Member 'FFortEventConditional::StatToCompare' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, RelevantPeriod) == 0x00000C, "Member 'FFortEventConditional::RelevantPeriod' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, ComparisonType) == 0x00000D, "Member 'FFortEventConditional::ComparisonType' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, Value) == 0x000010, "Member 'FFortEventConditional::Value' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, CraftingItem) == 0x000018, "Member 'FFortEventConditional::CraftingItem' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, bCanCraft) == 0x000020, "Member 'FFortEventConditional::bCanCraft' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, Stat) == 0x000028, "Member 'FFortEventConditional::Stat' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, FPC) == 0x000030, "Member 'FFortEventConditional::FPC' has a wrong offset!");

// ScriptStruct FortniteGame.FortStatEvent
// 0x0050 (0x0050 - 0x0000)
struct FFortStatEvent final
{
public:
	class FName                                   StatEventName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEventRepeat                              RepeatType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StatsToMonitor;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortEventConditional>          Conditions;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortClientAnnouncement>    AnnouncementToDisplay;                             // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                NotificationParameter;                             // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStat*                                  AssociatedStat;                                    // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FPC;                                               // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortStatEvent) == 0x000008, "Wrong alignment on FFortStatEvent");
static_assert(sizeof(FFortStatEvent) == 0x000050, "Wrong size on FFortStatEvent");
static_assert(offsetof(FFortStatEvent, StatEventName) == 0x000000, "Member 'FFortStatEvent::StatEventName' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, RepeatType) == 0x000008, "Member 'FFortStatEvent::RepeatType' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, StatsToMonitor) == 0x000010, "Member 'FFortStatEvent::StatsToMonitor' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, Conditions) == 0x000020, "Member 'FFortStatEvent::Conditions' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, AnnouncementToDisplay) == 0x000030, "Member 'FFortStatEvent::AnnouncementToDisplay' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, NotificationParameter) == 0x000038, "Member 'FFortStatEvent::NotificationParameter' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, AssociatedStat) == 0x000040, "Member 'FFortStatEvent::AssociatedStat' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, FPC) == 0x000048, "Member 'FFortStatEvent::FPC' has a wrong offset!");

// ScriptStruct FortniteGame.FortStatEventSequence
// 0x0050 (0x0050 - 0x0000)
struct FFortStatEventSequence final
{
public:
	class FName                                   StatEventName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEventRepeat                              RepeatType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortStatEvent>                 EventSequence;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UStat*                                  AssociatedStat;                                    // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FPC;                                               // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           StatsToMonitor;                                    // 0x0030(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortEventConditional>          Conditions;                                        // 0x0040(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortStatEventSequence) == 0x000008, "Wrong alignment on FFortStatEventSequence");
static_assert(sizeof(FFortStatEventSequence) == 0x000050, "Wrong size on FFortStatEventSequence");
static_assert(offsetof(FFortStatEventSequence, StatEventName) == 0x000000, "Member 'FFortStatEventSequence::StatEventName' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, RepeatType) == 0x000008, "Member 'FFortStatEventSequence::RepeatType' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, EventSequence) == 0x000010, "Member 'FFortStatEventSequence::EventSequence' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, AssociatedStat) == 0x000020, "Member 'FFortStatEventSequence::AssociatedStat' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, FPC) == 0x000028, "Member 'FFortStatEventSequence::FPC' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, StatsToMonitor) == 0x000030, "Member 'FFortStatEventSequence::StatsToMonitor' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, Conditions) == 0x000040, "Member 'FFortStatEventSequence::Conditions' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerAthenaAttributeReplicationProxy
// 0x0018 (0x0018 - 0x0000)
struct FFortPlayerAthenaAttributeReplicationProxy final
{
public:
	float                                         WalkSpeed;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunSpeed;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintSpeed;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlySpeed;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchedRunSpeed;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchedSprintSpeed;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerAthenaAttributeReplicationProxy) == 0x000004, "Wrong alignment on FFortPlayerAthenaAttributeReplicationProxy");
static_assert(sizeof(FFortPlayerAthenaAttributeReplicationProxy) == 0x000018, "Wrong size on FFortPlayerAthenaAttributeReplicationProxy");
static_assert(offsetof(FFortPlayerAthenaAttributeReplicationProxy, WalkSpeed) == 0x000000, "Member 'FFortPlayerAthenaAttributeReplicationProxy::WalkSpeed' has a wrong offset!");
static_assert(offsetof(FFortPlayerAthenaAttributeReplicationProxy, RunSpeed) == 0x000004, "Member 'FFortPlayerAthenaAttributeReplicationProxy::RunSpeed' has a wrong offset!");
static_assert(offsetof(FFortPlayerAthenaAttributeReplicationProxy, SprintSpeed) == 0x000008, "Member 'FFortPlayerAthenaAttributeReplicationProxy::SprintSpeed' has a wrong offset!");
static_assert(offsetof(FFortPlayerAthenaAttributeReplicationProxy, FlySpeed) == 0x00000C, "Member 'FFortPlayerAthenaAttributeReplicationProxy::FlySpeed' has a wrong offset!");
static_assert(offsetof(FFortPlayerAthenaAttributeReplicationProxy, CrouchedRunSpeed) == 0x000010, "Member 'FFortPlayerAthenaAttributeReplicationProxy::CrouchedRunSpeed' has a wrong offset!");
static_assert(offsetof(FFortPlayerAthenaAttributeReplicationProxy, CrouchedSprintSpeed) == 0x000014, "Member 'FFortPlayerAthenaAttributeReplicationProxy::CrouchedSprintSpeed' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookSectionData
// 0x0058 (0x0060 - 0x0008)
struct FFortCollectionBookSectionData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           SlotRowNames;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FFortRewardInfo                        Rewards;                                           // 0x0030(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookSectionData) == 0x000008, "Wrong alignment on FFortCollectionBookSectionData");
static_assert(sizeof(FFortCollectionBookSectionData) == 0x000060, "Wrong size on FFortCollectionBookSectionData");
static_assert(offsetof(FFortCollectionBookSectionData, Name) == 0x000008, "Member 'FFortCollectionBookSectionData::Name' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSectionData, SlotRowNames) == 0x000020, "Member 'FFortCollectionBookSectionData::SlotRowNames' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSectionData, Rewards) == 0x000030, "Member 'FFortCollectionBookSectionData::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookSlotXPWeightData
// 0x0010 (0x0018 - 0x0008)
struct FFortCollectionBookSlotXPWeightData final : public FTableRowBase
{
public:
	float                                         ConstantWeight;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RarityWeight;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemLevelWeight;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemRatingWeight;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookSlotXPWeightData) == 0x000008, "Wrong alignment on FFortCollectionBookSlotXPWeightData");
static_assert(sizeof(FFortCollectionBookSlotXPWeightData) == 0x000018, "Wrong size on FFortCollectionBookSlotXPWeightData");
static_assert(offsetof(FFortCollectionBookSlotXPWeightData, ConstantWeight) == 0x000008, "Member 'FFortCollectionBookSlotXPWeightData::ConstantWeight' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotXPWeightData, RarityWeight) == 0x00000C, "Member 'FFortCollectionBookSlotXPWeightData::RarityWeight' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotXPWeightData, ItemLevelWeight) == 0x000010, "Member 'FFortCollectionBookSlotXPWeightData::ItemLevelWeight' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotXPWeightData, ItemRatingWeight) == 0x000014, "Member 'FFortCollectionBookSlotXPWeightData::ItemRatingWeight' has a wrong offset!");

// ScriptStruct FortniteGame.TeamFOBCoreBuildingEntry
// 0x002C (0x0038 - 0x000C)
struct FTeamFOBCoreBuildingEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuildingFOBCoreActor*                  FOB;                                               // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SpawnLocationTags;                                 // 0x0018(0x0020)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamFOBCoreBuildingEntry) == 0x000008, "Wrong alignment on FTeamFOBCoreBuildingEntry");
static_assert(sizeof(FTeamFOBCoreBuildingEntry) == 0x000038, "Wrong size on FTeamFOBCoreBuildingEntry");
static_assert(offsetof(FTeamFOBCoreBuildingEntry, FOB) == 0x000010, "Member 'FTeamFOBCoreBuildingEntry::FOB' has a wrong offset!");
static_assert(offsetof(FTeamFOBCoreBuildingEntry, SpawnLocationTags) == 0x000018, "Member 'FTeamFOBCoreBuildingEntry::SpawnLocationTags' has a wrong offset!");

// ScriptStruct FortniteGame.TeamFOBCoreBuildingEntryArray
// 0x0010 (0x0118 - 0x0108)
struct FTeamFOBCoreBuildingEntryArray final : public FFastArraySerializer
{
public:
	TArray<struct FTeamFOBCoreBuildingEntry>      Items;                                             // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTeamFOBCoreBuildingEntryArray) == 0x000008, "Wrong alignment on FTeamFOBCoreBuildingEntryArray");
static_assert(sizeof(FTeamFOBCoreBuildingEntryArray) == 0x000118, "Wrong size on FTeamFOBCoreBuildingEntryArray");
static_assert(offsetof(FTeamFOBCoreBuildingEntryArray, Items) == 0x000108, "Member 'FTeamFOBCoreBuildingEntryArray::Items' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookSectionState
// 0x0018 (0x0018 - 0x0000)
struct FFortCollectionBookSectionState final
{
public:
	class FString                                 Section;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCollectionBookState                      State;                                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCollectionBookSectionState) == 0x000008, "Wrong alignment on FFortCollectionBookSectionState");
static_assert(sizeof(FFortCollectionBookSectionState) == 0x000018, "Wrong size on FFortCollectionBookSectionState");
static_assert(offsetof(FFortCollectionBookSectionState, Section) == 0x000000, "Member 'FFortCollectionBookSectionState::Section' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSectionState, State) == 0x000010, "Member 'FFortCollectionBookSectionState::State' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookXPData
// 0x0040 (0x0048 - 0x0008)
struct FFortCollectionBookXPData final : public FTableRowBase
{
public:
	int32                                         XpToNextLevel;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalXpToGetToThisLevel;                           // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRewardInfo                        Rewards;                                           // 0x0010(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
	bool                                          bIsMajorReward;                                    // 0x0040(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoOpenRewardCardPacks;                          // 0x0041(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCollectionBookXPData) == 0x000008, "Wrong alignment on FFortCollectionBookXPData");
static_assert(sizeof(FFortCollectionBookXPData) == 0x000048, "Wrong size on FFortCollectionBookXPData");
static_assert(offsetof(FFortCollectionBookXPData, XpToNextLevel) == 0x000008, "Member 'FFortCollectionBookXPData::XpToNextLevel' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookXPData, TotalXpToGetToThisLevel) == 0x00000C, "Member 'FFortCollectionBookXPData::TotalXpToGetToThisLevel' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookXPData, Rewards) == 0x000010, "Member 'FFortCollectionBookXPData::Rewards' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookXPData, bIsMajorReward) == 0x000040, "Member 'FFortCollectionBookXPData::bIsMajorReward' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookXPData, bAutoOpenRewardCardPacks) == 0x000041, "Member 'FFortCollectionBookXPData::bAutoOpenRewardCardPacks' has a wrong offset!");

// ScriptStruct FortniteGame.AssetAttachment
// 0x0030 (0x0030 - 0x0000)
struct FAssetAttachment final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMeshAsset;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMeshAsset;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipOnDedicatedServers;                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponentBudgeted*         SkelMeshComp;                                      // 0x0020(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComp;                                    // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetAttachment) == 0x000008, "Wrong alignment on FAssetAttachment");
static_assert(sizeof(FAssetAttachment) == 0x000030, "Wrong size on FAssetAttachment");
static_assert(offsetof(FAssetAttachment, SocketName) == 0x000000, "Member 'FAssetAttachment::SocketName' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, SkeletalMeshAsset) == 0x000008, "Member 'FAssetAttachment::SkeletalMeshAsset' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, StaticMeshAsset) == 0x000010, "Member 'FAssetAttachment::StaticMeshAsset' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, bSkipOnDedicatedServers) == 0x000018, "Member 'FAssetAttachment::bSkipOnDedicatedServers' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, SkelMeshComp) == 0x000020, "Member 'FAssetAttachment::SkelMeshComp' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, StaticMeshComp) == 0x000028, "Member 'FAssetAttachment::StaticMeshComp' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollisionAudioTriggerData
// 0x0040 (0x0040 - 0x0000)
struct FFortCollisionAudioTriggerData final
{
public:
	class USoundBase*                             Asset;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ImpulseMagnitudeRange;                             // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpulseMagnitudeLowerBound;                       // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpulseMagnitudeUpperBound;                       // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              VolumeRange;                                       // 0x0014(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PitchRange;                                        // 0x001C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRetriggerTime;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTriggerDistance;                                // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x14];                                      // 0x002C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCollisionAudioTriggerData) == 0x000008, "Wrong alignment on FFortCollisionAudioTriggerData");
static_assert(sizeof(FFortCollisionAudioTriggerData) == 0x000040, "Wrong size on FFortCollisionAudioTriggerData");
static_assert(offsetof(FFortCollisionAudioTriggerData, Asset) == 0x000000, "Member 'FFortCollisionAudioTriggerData::Asset' has a wrong offset!");
static_assert(offsetof(FFortCollisionAudioTriggerData, ImpulseMagnitudeRange) == 0x000008, "Member 'FFortCollisionAudioTriggerData::ImpulseMagnitudeRange' has a wrong offset!");
static_assert(offsetof(FFortCollisionAudioTriggerData, bImpulseMagnitudeLowerBound) == 0x000010, "Member 'FFortCollisionAudioTriggerData::bImpulseMagnitudeLowerBound' has a wrong offset!");
static_assert(offsetof(FFortCollisionAudioTriggerData, bImpulseMagnitudeUpperBound) == 0x000011, "Member 'FFortCollisionAudioTriggerData::bImpulseMagnitudeUpperBound' has a wrong offset!");
static_assert(offsetof(FFortCollisionAudioTriggerData, VolumeRange) == 0x000014, "Member 'FFortCollisionAudioTriggerData::VolumeRange' has a wrong offset!");
static_assert(offsetof(FFortCollisionAudioTriggerData, PitchRange) == 0x00001C, "Member 'FFortCollisionAudioTriggerData::PitchRange' has a wrong offset!");
static_assert(offsetof(FFortCollisionAudioTriggerData, MinRetriggerTime) == 0x000024, "Member 'FFortCollisionAudioTriggerData::MinRetriggerTime' has a wrong offset!");
static_assert(offsetof(FFortCollisionAudioTriggerData, MaxTriggerDistance) == 0x000028, "Member 'FFortCollisionAudioTriggerData::MaxTriggerDistance' has a wrong offset!");

// ScriptStruct FortniteGame.CombatThresholdData
// 0x0060 (0x0060 - 0x0000)
struct FCombatThresholdData final
{
public:
	struct FScalableFloat                         HeatLevel;                                         // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ExitHeatLevel;                                     // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	class FString                                 ThresholdName;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatThresholdData) == 0x000008, "Wrong alignment on FCombatThresholdData");
static_assert(sizeof(FCombatThresholdData) == 0x000060, "Wrong size on FCombatThresholdData");
static_assert(offsetof(FCombatThresholdData, HeatLevel) == 0x000000, "Member 'FCombatThresholdData::HeatLevel' has a wrong offset!");
static_assert(offsetof(FCombatThresholdData, ExitHeatLevel) == 0x000020, "Member 'FCombatThresholdData::ExitHeatLevel' has a wrong offset!");
static_assert(offsetof(FCombatThresholdData, ThresholdName) == 0x000040, "Member 'FCombatThresholdData::ThresholdName' has a wrong offset!");
static_assert(offsetof(FCombatThresholdData, DebugGraphColor) == 0x000050, "Member 'FCombatThresholdData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyQuestionChoice
// 0x0018 (0x0018 - 0x0000)
struct FFortPlayerSurveyQuestionChoice final
{
public:
	class FText                                   ChoiceText;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyQuestionChoice) == 0x000008, "Wrong alignment on FFortPlayerSurveyQuestionChoice");
static_assert(sizeof(FFortPlayerSurveyQuestionChoice) == 0x000018, "Wrong size on FFortPlayerSurveyQuestionChoice");
static_assert(offsetof(FFortPlayerSurveyQuestionChoice, ChoiceText) == 0x000000, "Member 'FFortPlayerSurveyQuestionChoice::ChoiceText' has a wrong offset!");

// ScriptStruct FortniteGame.FortSurfaceDamageRatioStats
// 0x0060 (0x0068 - 0x0008)
struct FFortSurfaceDamageRatioStats final : public FTableRowBase
{
public:
	class FName                                   Default;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Wood;                                              // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Stone;                                             // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Metal;                                             // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HumanEntity;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AIEntity;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Explosive;                                         // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot;                                          // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Objective;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot_Wood;                                     // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot_Stone;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot_Metal;                                    // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortSurfaceDamageRatioStats) == 0x000008, "Wrong alignment on FFortSurfaceDamageRatioStats");
static_assert(sizeof(FFortSurfaceDamageRatioStats) == 0x000068, "Wrong size on FFortSurfaceDamageRatioStats");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Default) == 0x000008, "Member 'FFortSurfaceDamageRatioStats::Default' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Wood) == 0x000010, "Member 'FFortSurfaceDamageRatioStats::Wood' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Stone) == 0x000018, "Member 'FFortSurfaceDamageRatioStats::Stone' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Metal) == 0x000020, "Member 'FFortSurfaceDamageRatioStats::Metal' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, HumanEntity) == 0x000028, "Member 'FFortSurfaceDamageRatioStats::HumanEntity' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, AIEntity) == 0x000030, "Member 'FFortSurfaceDamageRatioStats::AIEntity' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Explosive) == 0x000038, "Member 'FFortSurfaceDamageRatioStats::Explosive' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot) == 0x000040, "Member 'FFortSurfaceDamageRatioStats::WeakSpot' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Objective) == 0x000048, "Member 'FFortSurfaceDamageRatioStats::Objective' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot_Wood) == 0x000050, "Member 'FFortSurfaceDamageRatioStats::WeakSpot_Wood' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot_Stone) == 0x000058, "Member 'FFortSurfaceDamageRatioStats::WeakSpot_Stone' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot_Metal) == 0x000060, "Member 'FFortSurfaceDamageRatioStats::WeakSpot_Metal' has a wrong offset!");

// ScriptStruct FortniteGame.FortDamageSource
// 0x0010 (0x0010 - 0x0000)
struct FFortDamageSource final
{
public:
	TWeakObjectPtr<class AController>             InstigatorController;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  DamageCauser;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDamageSource) == 0x000004, "Wrong alignment on FFortDamageSource");
static_assert(sizeof(FFortDamageSource) == 0x000010, "Wrong size on FFortDamageSource");
static_assert(offsetof(FFortDamageSource, InstigatorController) == 0x000000, "Member 'FFortDamageSource::InstigatorController' has a wrong offset!");
static_assert(offsetof(FFortDamageSource, DamageCauser) == 0x000008, "Member 'FFortDamageSource::DamageCauser' has a wrong offset!");

// ScriptStruct FortniteGame.CompetitiveIdentity
// 0x0018 (0x0018 - 0x0000)
struct FCompetitiveIdentity final
{
public:
	struct FDateTime                              LastUpdated;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionId;                                          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompetitiveIdentity) == 0x000008, "Wrong alignment on FCompetitiveIdentity");
static_assert(sizeof(FCompetitiveIdentity) == 0x000018, "Wrong size on FCompetitiveIdentity");
static_assert(offsetof(FCompetitiveIdentity, LastUpdated) == 0x000000, "Member 'FCompetitiveIdentity::LastUpdated' has a wrong offset!");
static_assert(offsetof(FCompetitiveIdentity, RegionId) == 0x000008, "Member 'FCompetitiveIdentity::RegionId' has a wrong offset!");

// ScriptStruct FortniteGame.PatternBASEEffect
// 0x0010 (0x0010 - 0x0000)
struct FPatternBASEEffect final
{
public:
	class UBuildingEditModeMetadata*              Pattern;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatternBASEEffect) == 0x000008, "Wrong alignment on FPatternBASEEffect");
static_assert(sizeof(FPatternBASEEffect) == 0x000010, "Wrong size on FPatternBASEEffect");
static_assert(offsetof(FPatternBASEEffect, Pattern) == 0x000000, "Member 'FPatternBASEEffect::Pattern' has a wrong offset!");
static_assert(offsetof(FPatternBASEEffect, Mesh) == 0x000008, "Member 'FPatternBASEEffect::Mesh' has a wrong offset!");

// ScriptStruct FortniteGame.BASEGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct FBASEGameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelOverride;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBASEGameplayEffect) == 0x000008, "Wrong alignment on FBASEGameplayEffect");
static_assert(sizeof(FBASEGameplayEffect) == 0x000010, "Wrong size on FBASEGameplayEffect");
static_assert(offsetof(FBASEGameplayEffect, Effect) == 0x000000, "Member 'FBASEGameplayEffect::Effect' has a wrong offset!");
static_assert(offsetof(FBASEGameplayEffect, LevelOverride) == 0x000008, "Member 'FBASEGameplayEffect::LevelOverride' has a wrong offset!");

// ScriptStruct FortniteGame.ConsumeEffectData
// 0x0048 (0x0048 - 0x0000)
struct FConsumeEffectData final
{
public:
	TSoftClassPtr<class UClass>                   EffectClass;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Level;                                             // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsumeEffectData) == 0x000008, "Wrong alignment on FConsumeEffectData");
static_assert(sizeof(FConsumeEffectData) == 0x000048, "Wrong size on FConsumeEffectData");
static_assert(offsetof(FConsumeEffectData, EffectClass) == 0x000000, "Member 'FConsumeEffectData::EffectClass' has a wrong offset!");
static_assert(offsetof(FConsumeEffectData, Level) == 0x000028, "Member 'FConsumeEffectData::Level' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectContainer
// 0x0090 (0x0090 - 0x0000)
struct FFortGameplayEffectContainer final
{
public:
	struct FGameplayTag                           ApplicationTag;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAbilityTargetSelectionList        TargetSelection;                                   // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    TargetGameplayEffectClasses;                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    OwnerGameplayEffectClasses;                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivationCues;                                    // 0x0048(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ImpactCues;                                        // 0x0068(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseCalculationInTooltips;                         // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideChargeMagnitude;                          // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeMagnitudeOverrideValue;                      // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayEffectContainer) == 0x000008, "Wrong alignment on FFortGameplayEffectContainer");
static_assert(sizeof(FFortGameplayEffectContainer) == 0x000090, "Wrong size on FFortGameplayEffectContainer");
static_assert(offsetof(FFortGameplayEffectContainer, ApplicationTag) == 0x000000, "Member 'FFortGameplayEffectContainer::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, TargetSelection) == 0x000008, "Member 'FFortGameplayEffectContainer::TargetSelection' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, TargetGameplayEffectClasses) == 0x000028, "Member 'FFortGameplayEffectContainer::TargetGameplayEffectClasses' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, OwnerGameplayEffectClasses) == 0x000038, "Member 'FFortGameplayEffectContainer::OwnerGameplayEffectClasses' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, ActivationCues) == 0x000048, "Member 'FFortGameplayEffectContainer::ActivationCues' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, ImpactCues) == 0x000068, "Member 'FFortGameplayEffectContainer::ImpactCues' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, bUseCalculationInTooltips) == 0x000088, "Member 'FFortGameplayEffectContainer::bUseCalculationInTooltips' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, bOverrideChargeMagnitude) == 0x000089, "Member 'FFortGameplayEffectContainer::bOverrideChargeMagnitude' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, ChargeMagnitudeOverrideValue) == 0x00008C, "Member 'FFortGameplayEffectContainer::ChargeMagnitudeOverrideValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortContentEncryptionCollection
// 0x0014 (0x0014 - 0x0000)
struct FFortContentEncryptionCollection final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCollectionReference                   Collection;                                        // 0x0004(0x0008)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	EFortContentEncryptionCollectionGrouping      Grouping;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortContentEncryptionAllowedReferences       AllowedReferences;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortContentEncryptionCollection) == 0x000004, "Wrong alignment on FFortContentEncryptionCollection");
static_assert(sizeof(FFortContentEncryptionCollection) == 0x000014, "Wrong size on FFortContentEncryptionCollection");
static_assert(offsetof(FFortContentEncryptionCollection, bEnabled) == 0x000000, "Member 'FFortContentEncryptionCollection::bEnabled' has a wrong offset!");
static_assert(offsetof(FFortContentEncryptionCollection, Collection) == 0x000004, "Member 'FFortContentEncryptionCollection::Collection' has a wrong offset!");
static_assert(offsetof(FFortContentEncryptionCollection, Grouping) == 0x00000C, "Member 'FFortContentEncryptionCollection::Grouping' has a wrong offset!");
static_assert(offsetof(FFortContentEncryptionCollection, AllowedReferences) == 0x000010, "Member 'FFortContentEncryptionCollection::AllowedReferences' has a wrong offset!");

// ScriptStruct FortniteGame.PrivateTeamDataItem
// 0x0034 (0x0040 - 0x000C)
struct FPrivateTeamDataItem final : public FFastArraySerializerItem
{
public:
	float                                         Value;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0010(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrivateTeamDataItem) == 0x000008, "Wrong alignment on FPrivateTeamDataItem");
static_assert(sizeof(FPrivateTeamDataItem) == 0x000040, "Wrong size on FPrivateTeamDataItem");
static_assert(offsetof(FPrivateTeamDataItem, Value) == 0x00000C, "Member 'FPrivateTeamDataItem::Value' has a wrong offset!");
static_assert(offsetof(FPrivateTeamDataItem, PlayerID) == 0x000010, "Member 'FPrivateTeamDataItem::PlayerID' has a wrong offset!");

// ScriptStruct FortniteGame.PrivateTeamDataArray
// 0x0078 (0x0180 - 0x0108)
struct FPrivateTeamDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FPrivateTeamDataItem>           Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x68];                                     // 0x0118(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrivateTeamDataArray) == 0x000008, "Wrong alignment on FPrivateTeamDataArray");
static_assert(sizeof(FPrivateTeamDataArray) == 0x000180, "Wrong size on FPrivateTeamDataArray");
static_assert(offsetof(FPrivateTeamDataArray, Items) == 0x000108, "Member 'FPrivateTeamDataArray::Items' has a wrong offset!");

// ScriptStruct FortniteGame.FortKeyChain
// 0x0018 (0x0018 - 0x0000)
struct FFortKeyChain final
{
public:
	uint32                                        Hash;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortEncryptionKey>             Keys;                                              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortKeyChain) == 0x000008, "Wrong alignment on FFortKeyChain");
static_assert(sizeof(FFortKeyChain) == 0x000018, "Wrong size on FFortKeyChain");
static_assert(offsetof(FFortKeyChain, Hash) == 0x000000, "Member 'FFortKeyChain::Hash' has a wrong offset!");
static_assert(offsetof(FFortKeyChain, Keys) == 0x000008, "Member 'FFortKeyChain::Keys' has a wrong offset!");

// ScriptStruct FortniteGame.FortSentenceAudio
// 0x0040 (0x0040 - 0x0000)
struct FFortSentenceAudio final
{
public:
	TSoftObjectPtr<class USoundBase>              Audio;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortFeedbackHandle                    Handle;                                            // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortSentenceAudio) == 0x000008, "Wrong alignment on FFortSentenceAudio");
static_assert(sizeof(FFortSentenceAudio) == 0x000040, "Wrong size on FFortSentenceAudio");
static_assert(offsetof(FFortSentenceAudio, Audio) == 0x000000, "Member 'FFortSentenceAudio::Audio' has a wrong offset!");
static_assert(offsetof(FFortSentenceAudio, Handle) == 0x000028, "Member 'FFortSentenceAudio::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.FortConversationSentence
// 0x00C8 (0x00C8 - 0x0000)
struct FFortConversationSentence final
{
public:
	struct FFortSentenceAudio                     SpeechAudio;                                       // 0x0000(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   SpeechText;                                        // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              TalkingHeadTexture;                                // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   TalkingHeadTitle;                                  // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PostSentenceDelay;                                 // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DisplayDuration;                                   // 0x00C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortConversationSentence) == 0x000008, "Wrong alignment on FFortConversationSentence");
static_assert(sizeof(FFortConversationSentence) == 0x0000C8, "Wrong size on FFortConversationSentence");
static_assert(offsetof(FFortConversationSentence, SpeechAudio) == 0x000000, "Member 'FFortConversationSentence::SpeechAudio' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, SpeechText) == 0x000040, "Member 'FFortConversationSentence::SpeechText' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, TalkingHeadTexture) == 0x000058, "Member 'FFortConversationSentence::TalkingHeadTexture' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, TalkingHeadTitle) == 0x000080, "Member 'FFortConversationSentence::TalkingHeadTitle' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, AnimMontage) == 0x000098, "Member 'FFortConversationSentence::AnimMontage' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, PostSentenceDelay) == 0x0000C0, "Member 'FFortConversationSentence::PostSentenceDelay' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, DisplayDuration) == 0x0000C4, "Member 'FFortConversationSentence::DisplayDuration' has a wrong offset!");

// ScriptStruct FortniteGame.EnemyNpcStatInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FEnemyNpcStatInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnemyNpcStatInfo) == 0x000004, "Wrong alignment on FEnemyNpcStatInfo");
static_assert(sizeof(FEnemyNpcStatInfo) == 0x000010, "Wrong size on FEnemyNpcStatInfo");

// ScriptStruct FortniteGame.FortConversionTierData
// 0x0008 (0x0008 - 0x0000)
struct FFortConversionTierData final
{
public:
	int32                                         TierCost;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredItemQuantity;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConversionTierData) == 0x000004, "Wrong alignment on FFortConversionTierData");
static_assert(sizeof(FFortConversionTierData) == 0x000008, "Wrong size on FFortConversionTierData");
static_assert(offsetof(FFortConversionTierData, TierCost) == 0x000000, "Member 'FFortConversionTierData::TierCost' has a wrong offset!");
static_assert(offsetof(FFortConversionTierData, RequiredItemQuantity) == 0x000004, "Member 'FFortConversionTierData::RequiredItemQuantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortConversionControlKeyCosts
// 0x0088 (0x0090 - 0x0008)
struct FFortConversionControlKeyCosts final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     RequiredItem;                                      // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Common;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Uncommon;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Rare;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Epic;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Legendary;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Mythic;                                            // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Transcendent;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Unattainable;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  RequiredCatalysts;                                 // 0x0070(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortConversionControlKeyCosts) == 0x000008, "Wrong alignment on FFortConversionControlKeyCosts");
static_assert(sizeof(FFortConversionControlKeyCosts) == 0x000090, "Wrong size on FFortConversionControlKeyCosts");
static_assert(offsetof(FFortConversionControlKeyCosts, RequiredItem) == 0x000008, "Member 'FFortConversionControlKeyCosts::RequiredItem' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Common) == 0x000030, "Member 'FFortConversionControlKeyCosts::Common' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Uncommon) == 0x000038, "Member 'FFortConversionControlKeyCosts::Uncommon' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Rare) == 0x000040, "Member 'FFortConversionControlKeyCosts::Rare' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Epic) == 0x000048, "Member 'FFortConversionControlKeyCosts::Epic' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Legendary) == 0x000050, "Member 'FFortConversionControlKeyCosts::Legendary' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Mythic) == 0x000058, "Member 'FFortConversionControlKeyCosts::Mythic' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Transcendent) == 0x000060, "Member 'FFortConversionControlKeyCosts::Transcendent' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Unattainable) == 0x000068, "Member 'FFortConversionControlKeyCosts::Unattainable' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, RequiredCatalysts) == 0x000070, "Member 'FFortConversionControlKeyCosts::RequiredCatalysts' has a wrong offset!");

// ScriptStruct FortniteGame.FortMtxPlatformList
// 0x0010 (0x0010 - 0x0000)
struct FFortMtxPlatformList final
{
public:
	TArray<EFortMtxPlatform>                      MtxPlatformList;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMtxPlatformList) == 0x000008, "Wrong alignment on FFortMtxPlatformList");
static_assert(sizeof(FFortMtxPlatformList) == 0x000010, "Wrong size on FFortMtxPlatformList");
static_assert(offsetof(FFortMtxPlatformList, MtxPlatformList) == 0x000000, "Member 'FFortMtxPlatformList::MtxPlatformList' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayTagVariantDef
// 0x0000 (0x0070 - 0x0070)
struct FGameplayTagVariantDef final : public FBaseVariantDef
{
};
static_assert(alignof(FGameplayTagVariantDef) == 0x000008, "Wrong alignment on FGameplayTagVariantDef");
static_assert(sizeof(FGameplayTagVariantDef) == 0x000070, "Wrong size on FGameplayTagVariantDef");

// ScriptStruct FortniteGame.CosmeticMarkupTagDataRow
// 0x0038 (0x0040 - 0x0008)
struct FCosmeticMarkupTagDataRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HelpText;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmeticMarkupTagDataRow) == 0x000008, "Wrong alignment on FCosmeticMarkupTagDataRow");
static_assert(sizeof(FCosmeticMarkupTagDataRow) == 0x000040, "Wrong size on FCosmeticMarkupTagDataRow");
static_assert(offsetof(FCosmeticMarkupTagDataRow, Tag) == 0x000008, "Member 'FCosmeticMarkupTagDataRow::Tag' has a wrong offset!");
static_assert(offsetof(FCosmeticMarkupTagDataRow, DisplayName) == 0x000010, "Member 'FCosmeticMarkupTagDataRow::DisplayName' has a wrong offset!");
static_assert(offsetof(FCosmeticMarkupTagDataRow, HelpText) == 0x000028, "Member 'FCosmeticMarkupTagDataRow::HelpText' has a wrong offset!");

// ScriptStruct FortniteGame.ConditionalFoundationQuota
// 0x0010 (0x0010 - 0x0000)
struct FConditionalFoundationQuota final
{
public:
	TArray<struct FConditionalFoundationQuotaTier> Tiers;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConditionalFoundationQuota) == 0x000008, "Wrong alignment on FConditionalFoundationQuota");
static_assert(sizeof(FConditionalFoundationQuota) == 0x000010, "Wrong size on FConditionalFoundationQuota");
static_assert(offsetof(FConditionalFoundationQuota, Tiers) == 0x000000, "Member 'FConditionalFoundationQuota::Tiers' has a wrong offset!");

// ScriptStruct FortniteGame.DynamicVariantDef
// 0x0010 (0x0080 - 0x0070)
struct FDynamicVariantDef final : public FBaseVariantDef
{
public:
	TArray<class UVariantTypeBase*>               DynamicVariants;                                   // 0x0070(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicVariantDef) == 0x000008, "Wrong alignment on FDynamicVariantDef");
static_assert(sizeof(FDynamicVariantDef) == 0x000080, "Wrong size on FDynamicVariantDef");
static_assert(offsetof(FDynamicVariantDef, DynamicVariants) == 0x000070, "Member 'FDynamicVariantDef::DynamicVariants' has a wrong offset!");

// ScriptStruct FortniteGame.FortVolumeTimeOfDayConfig
// 0x0001 (0x0001 - 0x0000)
struct FFortVolumeTimeOfDayConfig final
{
public:
	uint8                                         bShouldOverrideTimeOfDay : 1;                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseRandomTimeOfDay : 1;                           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FFortVolumeTimeOfDayConfig) == 0x000001, "Wrong alignment on FFortVolumeTimeOfDayConfig");
static_assert(sizeof(FFortVolumeTimeOfDayConfig) == 0x000001, "Wrong size on FFortVolumeTimeOfDayConfig");

// ScriptStruct FortniteGame.DefaultCharacterPartsForPawnClass
// 0x0018 (0x0018 - 0x0000)
struct FDefaultCharacterPartsForPawnClass final
{
public:
	struct FGameplayTag                           ClassTag;                                          // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UCustomCharacterPart>> CharacterParts;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultCharacterPartsForPawnClass) == 0x000008, "Wrong alignment on FDefaultCharacterPartsForPawnClass");
static_assert(sizeof(FDefaultCharacterPartsForPawnClass) == 0x000018, "Wrong size on FDefaultCharacterPartsForPawnClass");
static_assert(offsetof(FDefaultCharacterPartsForPawnClass, ClassTag) == 0x000000, "Member 'FDefaultCharacterPartsForPawnClass::ClassTag' has a wrong offset!");
static_assert(offsetof(FDefaultCharacterPartsForPawnClass, CharacterParts) == 0x000008, "Member 'FDefaultCharacterPartsForPawnClass::CharacterParts' has a wrong offset!");

// ScriptStruct FortniteGame.HitData
// 0x0070 (0x0070 - 0x0000)
struct FHitData final
{
public:
	float                                         PingOfHitter;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  HittingPawn;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeStampedPhysicsPawnState           ObjectState;                                       // 0x0020(0x0050)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitData) == 0x000010, "Wrong alignment on FHitData");
static_assert(sizeof(FHitData) == 0x000070, "Wrong size on FHitData");
static_assert(offsetof(FHitData, PingOfHitter) == 0x000000, "Member 'FHitData::PingOfHitter' has a wrong offset!");
static_assert(offsetof(FHitData, HittingPawn) == 0x000008, "Member 'FHitData::HittingPawn' has a wrong offset!");
static_assert(offsetof(FHitData, HitNormal) == 0x000010, "Member 'FHitData::HitNormal' has a wrong offset!");
static_assert(offsetof(FHitData, ObjectState) == 0x000020, "Member 'FHitData::ObjectState' has a wrong offset!");

// ScriptStruct FortniteGame.ReplayDataActorPosition
// 0x000C (0x000C - 0x0000)
struct FReplayDataActorPosition final
{
public:
	struct FVector_NetQuantize                    Position;                                          // 0x0000(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayDataActorPosition) == 0x000004, "Wrong alignment on FReplayDataActorPosition");
static_assert(sizeof(FReplayDataActorPosition) == 0x00000C, "Wrong size on FReplayDataActorPosition");
static_assert(offsetof(FReplayDataActorPosition, Position) == 0x000000, "Member 'FReplayDataActorPosition::Position' has a wrong offset!");

// ScriptStruct FortniteGame.ReplayActorsPosition
// 0x0010 (0x0028 - 0x0018)
struct FReplayActorsPosition final : public FBaseReplayEventInfo
{
public:
	TArray<struct FReplayDataActorPosition>       Chests;                                            // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayActorsPosition) == 0x000008, "Wrong alignment on FReplayActorsPosition");
static_assert(sizeof(FReplayActorsPosition) == 0x000028, "Wrong size on FReplayActorsPosition");
static_assert(offsetof(FReplayActorsPosition, Chests) == 0x000018, "Member 'FReplayActorsPosition::Chests' has a wrong offset!");

// ScriptStruct FortniteGame.ParticlVariantDef
// 0x0090 (0x0100 - 0x0070)
struct FParticlVariantDef final : public FBaseVariantDef
{
public:
	TArray<struct FMaterialVariants>              VariantMaterials;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialParamterDef>           VariantMaterialParams;                             // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVariantParticleSystemInitializerData> InitalParticelSystemData;                          // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FParticleVariant>               VariantParticles;                                  // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FParticleParamterVariant>       VariantParticleParams;                             // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCosmeticMetaTagContainer              MetaTags;                                          // 0x00C0(0x0040)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParticlVariantDef) == 0x000008, "Wrong alignment on FParticlVariantDef");
static_assert(sizeof(FParticlVariantDef) == 0x000100, "Wrong size on FParticlVariantDef");
static_assert(offsetof(FParticlVariantDef, VariantMaterials) == 0x000070, "Member 'FParticlVariantDef::VariantMaterials' has a wrong offset!");
static_assert(offsetof(FParticlVariantDef, VariantMaterialParams) == 0x000080, "Member 'FParticlVariantDef::VariantMaterialParams' has a wrong offset!");
static_assert(offsetof(FParticlVariantDef, InitalParticelSystemData) == 0x000090, "Member 'FParticlVariantDef::InitalParticelSystemData' has a wrong offset!");
static_assert(offsetof(FParticlVariantDef, VariantParticles) == 0x0000A0, "Member 'FParticlVariantDef::VariantParticles' has a wrong offset!");
static_assert(offsetof(FParticlVariantDef, VariantParticleParams) == 0x0000B0, "Member 'FParticlVariantDef::VariantParticleParams' has a wrong offset!");
static_assert(offsetof(FParticlVariantDef, MetaTags) == 0x0000C0, "Member 'FParticlVariantDef::MetaTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortMatchmakingRegionState
// 0x00A0 (0x00A0 - 0x0000)
struct FFortMatchmakingRegionState final
{
public:
	TSet<class FName>                             EventFlagsForcedOn;                                // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class FName>                             EventFlagsForcedOff;                               // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMatchmakingRegionState) == 0x000008, "Wrong alignment on FFortMatchmakingRegionState");
static_assert(sizeof(FFortMatchmakingRegionState) == 0x0000A0, "Wrong size on FFortMatchmakingRegionState");
static_assert(offsetof(FFortMatchmakingRegionState, EventFlagsForcedOn) == 0x000000, "Member 'FFortMatchmakingRegionState::EventFlagsForcedOn' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingRegionState, EventFlagsForcedOff) == 0x000050, "Member 'FFortMatchmakingRegionState::EventFlagsForcedOff' has a wrong offset!");

// ScriptStruct FortniteGame.FortMatchmakingEventsState
// 0x0050 (0x0050 - 0x0000)
struct FFortMatchmakingEventsState final
{
public:
	TMap<class FString, struct FFortMatchmakingRegionState> Region;                                            // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMatchmakingEventsState) == 0x000008, "Wrong alignment on FFortMatchmakingEventsState");
static_assert(sizeof(FFortMatchmakingEventsState) == 0x000050, "Wrong size on FFortMatchmakingEventsState");
static_assert(offsetof(FFortMatchmakingEventsState, Region) == 0x000000, "Member 'FFortMatchmakingEventsState::Region' has a wrong offset!");

// ScriptStruct FortniteGame.SocketVariantDef
// 0x0010 (0x0080 - 0x0070)
struct FSocketVariantDef final : public FBaseVariantDef
{
public:
	TArray<struct FSocketTransformVariant>        SocketTransforms;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocketVariantDef) == 0x000008, "Wrong alignment on FSocketVariantDef");
static_assert(sizeof(FSocketVariantDef) == 0x000080, "Wrong size on FSocketVariantDef");
static_assert(offsetof(FSocketVariantDef, SocketTransforms) == 0x000070, "Member 'FSocketVariantDef::SocketTransforms' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostCraftingTableData
// 0x0018 (0x0020 - 0x0008)
struct FOutpostCraftingTableData final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredItems;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostCraftingTableData) == 0x000008, "Wrong alignment on FOutpostCraftingTableData");
static_assert(sizeof(FOutpostCraftingTableData) == 0x000020, "Wrong size on FOutpostCraftingTableData");
static_assert(offsetof(FOutpostCraftingTableData, Level) == 0x000008, "Member 'FOutpostCraftingTableData::Level' has a wrong offset!");
static_assert(offsetof(FOutpostCraftingTableData, ItemCount) == 0x00000C, "Member 'FOutpostCraftingTableData::ItemCount' has a wrong offset!");
static_assert(offsetof(FOutpostCraftingTableData, RequiredItems) == 0x000010, "Member 'FOutpostCraftingTableData::RequiredItems' has a wrong offset!");

// ScriptStruct FortniteGame.MaterialVariantDef
// 0x0060 (0x00D0 - 0x0070)
struct FMaterialVariantDef final : public FBaseVariantDef
{
public:
	TArray<struct FMaterialVariants>              VariantMaterials;                                  // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialParamterDef>           VariantMaterialParams;                             // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCosmeticMetaTagContainer              MetaTags;                                          // 0x0090(0x0040)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialVariantDef) == 0x000008, "Wrong alignment on FMaterialVariantDef");
static_assert(sizeof(FMaterialVariantDef) == 0x0000D0, "Wrong size on FMaterialVariantDef");
static_assert(offsetof(FMaterialVariantDef, VariantMaterials) == 0x000070, "Member 'FMaterialVariantDef::VariantMaterials' has a wrong offset!");
static_assert(offsetof(FMaterialVariantDef, VariantMaterialParams) == 0x000080, "Member 'FMaterialVariantDef::VariantMaterialParams' has a wrong offset!");
static_assert(offsetof(FMaterialVariantDef, MetaTags) == 0x000090, "Member 'FMaterialVariantDef::MetaTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortSupplyDropSubPhaseData
// 0x0060 (0x0060 - 0x0000)
struct FFortSupplyDropSubPhaseData final
{
public:
	struct FScalableFloat                         SupplyDropMinCount;                                // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SupplyDropMaxCount;                                // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SupplyDropCap;                                     // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSupplyDropSubPhaseData) == 0x000008, "Wrong alignment on FFortSupplyDropSubPhaseData");
static_assert(sizeof(FFortSupplyDropSubPhaseData) == 0x000060, "Wrong size on FFortSupplyDropSubPhaseData");
static_assert(offsetof(FFortSupplyDropSubPhaseData, SupplyDropMinCount) == 0x000000, "Member 'FFortSupplyDropSubPhaseData::SupplyDropMinCount' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropSubPhaseData, SupplyDropMaxCount) == 0x000020, "Member 'FFortSupplyDropSubPhaseData::SupplyDropMaxCount' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropSubPhaseData, SupplyDropCap) == 0x000040, "Member 'FFortSupplyDropSubPhaseData::SupplyDropCap' has a wrong offset!");

// ScriptStruct FortniteGame.FortSupplyDropGamePhaseData
// 0x01A8 (0x01A8 - 0x0000)
struct FFortSupplyDropGamePhaseData final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SupplyDropMinPlacementHeight;                      // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SupplyDropMaxPlacementHeight;                      // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SupplyDropTimeInterval;                            // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SupplyDropTimeDeviation;                           // 0x0068(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SupplyDropSpawnMinWaitTime;                        // 0x0088(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SupplyDropSpawnMaxWaitTime;                        // 0x00A8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SupplyDropMinSpawnHeight;                          // 0x00C8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SupplyDropMaxSpawnHeight;                          // 0x00E8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SupplyDropMinSpeed;                                // 0x0108(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         SupplyDropMaxSpeed;                                // 0x0128(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortSupplyDropSubPhaseData            SubPhaseData;                                      // 0x0148(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSupplyDropGamePhaseData) == 0x000008, "Wrong alignment on FFortSupplyDropGamePhaseData");
static_assert(sizeof(FFortSupplyDropGamePhaseData) == 0x0001A8, "Wrong size on FFortSupplyDropGamePhaseData");
static_assert(offsetof(FFortSupplyDropGamePhaseData, GamePhase) == 0x000000, "Member 'FFortSupplyDropGamePhaseData::GamePhase' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropGamePhaseData, SupplyDropMinPlacementHeight) == 0x000008, "Member 'FFortSupplyDropGamePhaseData::SupplyDropMinPlacementHeight' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropGamePhaseData, SupplyDropMaxPlacementHeight) == 0x000028, "Member 'FFortSupplyDropGamePhaseData::SupplyDropMaxPlacementHeight' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropGamePhaseData, SupplyDropTimeInterval) == 0x000048, "Member 'FFortSupplyDropGamePhaseData::SupplyDropTimeInterval' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropGamePhaseData, SupplyDropTimeDeviation) == 0x000068, "Member 'FFortSupplyDropGamePhaseData::SupplyDropTimeDeviation' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropGamePhaseData, SupplyDropSpawnMinWaitTime) == 0x000088, "Member 'FFortSupplyDropGamePhaseData::SupplyDropSpawnMinWaitTime' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropGamePhaseData, SupplyDropSpawnMaxWaitTime) == 0x0000A8, "Member 'FFortSupplyDropGamePhaseData::SupplyDropSpawnMaxWaitTime' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropGamePhaseData, SupplyDropMinSpawnHeight) == 0x0000C8, "Member 'FFortSupplyDropGamePhaseData::SupplyDropMinSpawnHeight' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropGamePhaseData, SupplyDropMaxSpawnHeight) == 0x0000E8, "Member 'FFortSupplyDropGamePhaseData::SupplyDropMaxSpawnHeight' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropGamePhaseData, SupplyDropMinSpeed) == 0x000108, "Member 'FFortSupplyDropGamePhaseData::SupplyDropMinSpeed' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropGamePhaseData, SupplyDropMaxSpeed) == 0x000128, "Member 'FFortSupplyDropGamePhaseData::SupplyDropMaxSpeed' has a wrong offset!");
static_assert(offsetof(FFortSupplyDropGamePhaseData, SubPhaseData) == 0x000148, "Member 'FFortSupplyDropGamePhaseData::SubPhaseData' has a wrong offset!");

// ScriptStruct FortniteGame.SoundVariant
// 0x0058 (0x0058 - 0x0000)
struct FSoundVariant final
{
public:
	TSoftObjectPtr<class USoundBase>              SoundToSwap;                                       // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentToOverride;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              OverrideSound;                                     // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundVariant) == 0x000008, "Wrong alignment on FSoundVariant");
static_assert(sizeof(FSoundVariant) == 0x000058, "Wrong size on FSoundVariant");
static_assert(offsetof(FSoundVariant, SoundToSwap) == 0x000000, "Member 'FSoundVariant::SoundToSwap' has a wrong offset!");
static_assert(offsetof(FSoundVariant, ComponentToOverride) == 0x000028, "Member 'FSoundVariant::ComponentToOverride' has a wrong offset!");
static_assert(offsetof(FSoundVariant, OverrideSound) == 0x000030, "Member 'FSoundVariant::OverrideSound' has a wrong offset!");

// ScriptStruct FortniteGame.MeshVariantDef
// 0x00C0 (0x0130 - 0x0070)
struct FMeshVariantDef final : public FBaseVariantDef
{
public:
	TArray<struct FMeshVariant>                   VariantMeshes;                                     // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialVariants>              VariantMaterials;                                  // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialParamterDef>           VariantMaterialParams;                             // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVariantParticleSystemInitializerData> InitialParticleSystemData;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FParticleVariant>               VariantParticles;                                  // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FParticleParamterVariant>       VariantParticleParams;                             // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSocketTransformVariant>        SocketTransforms;                                  // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoundVariant>                  VariantSounds;                                     // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCosmeticMetaTagContainer              MetaTags;                                          // 0x00F0(0x0040)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshVariantDef) == 0x000008, "Wrong alignment on FMeshVariantDef");
static_assert(sizeof(FMeshVariantDef) == 0x000130, "Wrong size on FMeshVariantDef");
static_assert(offsetof(FMeshVariantDef, VariantMeshes) == 0x000070, "Member 'FMeshVariantDef::VariantMeshes' has a wrong offset!");
static_assert(offsetof(FMeshVariantDef, VariantMaterials) == 0x000080, "Member 'FMeshVariantDef::VariantMaterials' has a wrong offset!");
static_assert(offsetof(FMeshVariantDef, VariantMaterialParams) == 0x000090, "Member 'FMeshVariantDef::VariantMaterialParams' has a wrong offset!");
static_assert(offsetof(FMeshVariantDef, InitialParticleSystemData) == 0x0000A0, "Member 'FMeshVariantDef::InitialParticleSystemData' has a wrong offset!");
static_assert(offsetof(FMeshVariantDef, VariantParticles) == 0x0000B0, "Member 'FMeshVariantDef::VariantParticles' has a wrong offset!");
static_assert(offsetof(FMeshVariantDef, VariantParticleParams) == 0x0000C0, "Member 'FMeshVariantDef::VariantParticleParams' has a wrong offset!");
static_assert(offsetof(FMeshVariantDef, SocketTransforms) == 0x0000D0, "Member 'FMeshVariantDef::SocketTransforms' has a wrong offset!");
static_assert(offsetof(FMeshVariantDef, VariantSounds) == 0x0000E0, "Member 'FMeshVariantDef::VariantSounds' has a wrong offset!");
static_assert(offsetof(FMeshVariantDef, MetaTags) == 0x0000F0, "Member 'FMeshVariantDef::MetaTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortCreativeBudgetOverride
// 0x0020 (0x0020 - 0x0000)
struct FFortCreativeBudgetOverride final
{
public:
	class FString                                 ActorClass;                                        // 0x0000(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssetCost;                                         // 0x0010(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AssetCostMultiplier;                               // 0x0014(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceCost;                                      // 0x0018(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstanceCostMultiplier;                            // 0x001C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCreativeBudgetOverride) == 0x000008, "Wrong alignment on FFortCreativeBudgetOverride");
static_assert(sizeof(FFortCreativeBudgetOverride) == 0x000020, "Wrong size on FFortCreativeBudgetOverride");
static_assert(offsetof(FFortCreativeBudgetOverride, ActorClass) == 0x000000, "Member 'FFortCreativeBudgetOverride::ActorClass' has a wrong offset!");
static_assert(offsetof(FFortCreativeBudgetOverride, AssetCost) == 0x000010, "Member 'FFortCreativeBudgetOverride::AssetCost' has a wrong offset!");
static_assert(offsetof(FFortCreativeBudgetOverride, AssetCostMultiplier) == 0x000014, "Member 'FFortCreativeBudgetOverride::AssetCostMultiplier' has a wrong offset!");
static_assert(offsetof(FFortCreativeBudgetOverride, InstanceCost) == 0x000018, "Member 'FFortCreativeBudgetOverride::InstanceCost' has a wrong offset!");
static_assert(offsetof(FFortCreativeBudgetOverride, InstanceCostMultiplier) == 0x00001C, "Member 'FFortCreativeBudgetOverride::InstanceCostMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.FortTouchAimAssistSettings
// 0x0048 (0x0048 - 0x0000)
struct FFortTouchAimAssistSettings final
{
public:
	float                                         ReticleWidth;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReticleHeight;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReticleDepth;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoFireReticleWidth;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoFireReticleHeight;                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjectileMinSpeedForAssist;                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjectileMaxLookAheadTime;                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetRange;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TargetWeightCurve;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PullStrengthYawCurve;                              // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PullStrengthPitchCurve;                            // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullMaxRate;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoTrackDuration;                                 // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoTrackPullStrength;                             // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTouchAimAssistSettings) == 0x000008, "Wrong alignment on FFortTouchAimAssistSettings");
static_assert(sizeof(FFortTouchAimAssistSettings) == 0x000048, "Wrong size on FFortTouchAimAssistSettings");
static_assert(offsetof(FFortTouchAimAssistSettings, ReticleWidth) == 0x000000, "Member 'FFortTouchAimAssistSettings::ReticleWidth' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, ReticleHeight) == 0x000004, "Member 'FFortTouchAimAssistSettings::ReticleHeight' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, ReticleDepth) == 0x000008, "Member 'FFortTouchAimAssistSettings::ReticleDepth' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, AutoFireReticleWidth) == 0x00000C, "Member 'FFortTouchAimAssistSettings::AutoFireReticleWidth' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, AutoFireReticleHeight) == 0x000010, "Member 'FFortTouchAimAssistSettings::AutoFireReticleHeight' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, ProjectileMinSpeedForAssist) == 0x000014, "Member 'FFortTouchAimAssistSettings::ProjectileMinSpeedForAssist' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, ProjectileMaxLookAheadTime) == 0x000018, "Member 'FFortTouchAimAssistSettings::ProjectileMaxLookAheadTime' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, TargetRange) == 0x00001C, "Member 'FFortTouchAimAssistSettings::TargetRange' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, TargetWeightCurve) == 0x000020, "Member 'FFortTouchAimAssistSettings::TargetWeightCurve' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, PullStrengthYawCurve) == 0x000028, "Member 'FFortTouchAimAssistSettings::PullStrengthYawCurve' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, PullStrengthPitchCurve) == 0x000030, "Member 'FFortTouchAimAssistSettings::PullStrengthPitchCurve' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, PullMaxRate) == 0x000038, "Member 'FFortTouchAimAssistSettings::PullMaxRate' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, AutoTrackDuration) == 0x00003C, "Member 'FFortTouchAimAssistSettings::AutoTrackDuration' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssistSettings, AutoTrackPullStrength) == 0x000040, "Member 'FFortTouchAimAssistSettings::AutoTrackPullStrength' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookSlotItemNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortCollectionBookSlotItemNotification final
{
public:
	class FString                                 SlottedItemId;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookSlotItemNotification) == 0x000008, "Wrong alignment on FFortCollectionBookSlotItemNotification");
static_assert(sizeof(FFortCollectionBookSlotItemNotification) == 0x000010, "Wrong size on FFortCollectionBookSlotItemNotification");
static_assert(offsetof(FFortCollectionBookSlotItemNotification, SlottedItemId) == 0x000000, "Member 'FFortCollectionBookSlotItemNotification::SlottedItemId' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistFrontEndData
// 0x0028 (0x0028 - 0x0000)
struct FPlaylistFrontEndData final
{
public:
	class UFortPlaylistAthena*                    PlaylistData;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EPlaylistVisibilityState                      Visibility;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayAsDefault;                                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlaylistAdvertisementType                    AdvertiseType;                                     // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayAsLimitedTime;                             // 0x001B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryIndex;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDateUTC;                                        // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistFrontEndData) == 0x000008, "Wrong alignment on FPlaylistFrontEndData");
static_assert(sizeof(FPlaylistFrontEndData) == 0x000028, "Wrong size on FPlaylistFrontEndData");
static_assert(offsetof(FPlaylistFrontEndData, PlaylistData) == 0x000000, "Member 'FPlaylistFrontEndData::PlaylistData' has a wrong offset!");
static_assert(offsetof(FPlaylistFrontEndData, Visibility) == 0x000018, "Member 'FPlaylistFrontEndData::Visibility' has a wrong offset!");
static_assert(offsetof(FPlaylistFrontEndData, bDisplayAsDefault) == 0x000019, "Member 'FPlaylistFrontEndData::bDisplayAsDefault' has a wrong offset!");
static_assert(offsetof(FPlaylistFrontEndData, AdvertiseType) == 0x00001A, "Member 'FPlaylistFrontEndData::AdvertiseType' has a wrong offset!");
static_assert(offsetof(FPlaylistFrontEndData, bDisplayAsLimitedTime) == 0x00001B, "Member 'FPlaylistFrontEndData::bDisplayAsLimitedTime' has a wrong offset!");
static_assert(offsetof(FPlaylistFrontEndData, CategoryIndex) == 0x00001C, "Member 'FPlaylistFrontEndData::CategoryIndex' has a wrong offset!");
static_assert(offsetof(FPlaylistFrontEndData, EndDateUTC) == 0x000020, "Member 'FPlaylistFrontEndData::EndDateUTC' has a wrong offset!");

// ScriptStruct FortniteGame.QueuedMusic
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FQueuedMusic final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQueuedMusic) == 0x000008, "Wrong alignment on FQueuedMusic");
static_assert(sizeof(FQueuedMusic) == 0x000010, "Wrong size on FQueuedMusic");

// ScriptStruct FortniteGame.CreativeToolClasses
// 0x0028 (0x0030 - 0x0008)
struct FCreativeToolClasses final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   ClassPath;                                         // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeToolClasses) == 0x000008, "Wrong alignment on FCreativeToolClasses");
static_assert(sizeof(FCreativeToolClasses) == 0x000030, "Wrong size on FCreativeToolClasses");
static_assert(offsetof(FCreativeToolClasses, ClassPath) == 0x000008, "Member 'FCreativeToolClasses::ClassPath' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerBuildableClassFilter
// 0x0010 (0x0010 - 0x0000)
struct FPlayerBuildableClassFilter final
{
public:
	EFortResourceType                             ResourceType;                                      // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             BuildingType;                                      // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuildingEditModeMetadata*              EditModeMetadata;                                  // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerBuildableClassFilter) == 0x000008, "Wrong alignment on FPlayerBuildableClassFilter");
static_assert(sizeof(FPlayerBuildableClassFilter) == 0x000010, "Wrong size on FPlayerBuildableClassFilter");
static_assert(offsetof(FPlayerBuildableClassFilter, ResourceType) == 0x000000, "Member 'FPlayerBuildableClassFilter::ResourceType' has a wrong offset!");
static_assert(offsetof(FPlayerBuildableClassFilter, BuildingType) == 0x000001, "Member 'FPlayerBuildableClassFilter::BuildingType' has a wrong offset!");
static_assert(offsetof(FPlayerBuildableClassFilter, Level) == 0x000004, "Member 'FPlayerBuildableClassFilter::Level' has a wrong offset!");
static_assert(offsetof(FPlayerBuildableClassFilter, EditModeMetadata) == 0x000008, "Member 'FPlayerBuildableClassFilter::EditModeMetadata' has a wrong offset!");

// ScriptStruct FortniteGame.FortCreativePlotPermissionData
// 0x0018 (0x0018 - 0x0000)
struct FFortCreativePlotPermissionData final
{
public:
	EFortCreativePlotPermission                   Permission;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         WhiteList;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCreativePlotPermissionData) == 0x000008, "Wrong alignment on FFortCreativePlotPermissionData");
static_assert(sizeof(FFortCreativePlotPermissionData) == 0x000018, "Wrong size on FFortCreativePlotPermissionData");
static_assert(offsetof(FFortCreativePlotPermissionData, Permission) == 0x000000, "Member 'FFortCreativePlotPermissionData::Permission' has a wrong offset!");
static_assert(offsetof(FFortCreativePlotPermissionData, WhiteList) == 0x000008, "Member 'FFortCreativePlotPermissionData::WhiteList' has a wrong offset!");

// ScriptStruct FortniteGame.ImportFriendsRewardNotification
// 0x0010 (0x0010 - 0x0000)
struct FImportFriendsRewardNotification final
{
public:
	TArray<struct FMcpLootEntry>                  LootGranted;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImportFriendsRewardNotification) == 0x000008, "Wrong alignment on FImportFriendsRewardNotification");
static_assert(sizeof(FImportFriendsRewardNotification) == 0x000010, "Wrong size on FImportFriendsRewardNotification");
static_assert(offsetof(FImportFriendsRewardNotification, LootGranted) == 0x000000, "Member 'FImportFriendsRewardNotification::LootGranted' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveRealEstatePlotInfo
// 0x0018 (0x0018 - 0x0000)
struct FActiveRealEstatePlotInfo final
{
public:
	class UFortCreativeRealEstatePlotItemDefinition* Plot;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveRealEstatePlotInfo) == 0x000008, "Wrong alignment on FActiveRealEstatePlotInfo");
static_assert(sizeof(FActiveRealEstatePlotInfo) == 0x000018, "Wrong size on FActiveRealEstatePlotInfo");
static_assert(offsetof(FActiveRealEstatePlotInfo, Plot) == 0x000000, "Member 'FActiveRealEstatePlotInfo::Plot' has a wrong offset!");
static_assert(offsetof(FActiveRealEstatePlotInfo, Position) == 0x000008, "Member 'FActiveRealEstatePlotInfo::Position' has a wrong offset!");

// ScriptStruct FortniteGame.FortMessageChannelInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFortMessageChannelInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMessageChannelInfo) == 0x000008, "Wrong alignment on FFortMessageChannelInfo");
static_assert(sizeof(FFortMessageChannelInfo) == 0x000020, "Wrong size on FFortMessageChannelInfo");

// ScriptStruct FortniteGame.CreativeIslandMatchmakingSettings
// 0x0010 (0x0010 - 0x0000)
struct FCreativeIslandMatchmakingSettings final
{
public:
	int32                                         MinimumNumberOfPlayers;                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumNumberOfPlayers;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetNumberOfPlayers;                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinInProgress;                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreativeIslandMatchmakingSettings) == 0x000004, "Wrong alignment on FCreativeIslandMatchmakingSettings");
static_assert(sizeof(FCreativeIslandMatchmakingSettings) == 0x000010, "Wrong size on FCreativeIslandMatchmakingSettings");
static_assert(offsetof(FCreativeIslandMatchmakingSettings, MinimumNumberOfPlayers) == 0x000000, "Member 'FCreativeIslandMatchmakingSettings::MinimumNumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FCreativeIslandMatchmakingSettings, MaximumNumberOfPlayers) == 0x000004, "Member 'FCreativeIslandMatchmakingSettings::MaximumNumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FCreativeIslandMatchmakingSettings, TargetNumberOfPlayers) == 0x000008, "Member 'FCreativeIslandMatchmakingSettings::TargetNumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FCreativeIslandMatchmakingSettings, bAllowJoinInProgress) == 0x00000C, "Member 'FCreativeIslandMatchmakingSettings::bAllowJoinInProgress' has a wrong offset!");

// ScriptStruct FortniteGame.FortClaimedDifficultyIncreaseRewardNotification
// 0x0020 (0x0020 - 0x0000)
struct FFortClaimedDifficultyIncreaseRewardNotification final
{
public:
	struct FMcpLootResult                         LootGranted;                                       // 0x0000(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClaimedDifficultyIncreaseRewardNotification) == 0x000008, "Wrong alignment on FFortClaimedDifficultyIncreaseRewardNotification");
static_assert(sizeof(FFortClaimedDifficultyIncreaseRewardNotification) == 0x000020, "Wrong size on FFortClaimedDifficultyIncreaseRewardNotification");
static_assert(offsetof(FFortClaimedDifficultyIncreaseRewardNotification, LootGranted) == 0x000000, "Member 'FFortClaimedDifficultyIncreaseRewardNotification::LootGranted' has a wrong offset!");

// ScriptStruct FortniteGame.FortCustomizationAssetsToLoad
// 0x0040 (0x0040 - 0x0000)
struct FFortCustomizationAssetsToLoad final
{
public:
	TArray<class UFortHeroType*>                  HeroTypes;                                         // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UCustomCharacterPart*>           CharacterParts;                                    // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UFortItemDefinition*>            ItemDefs;                                          // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                VariantAssets;                                     // 0x0030(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCustomizationAssetsToLoad) == 0x000008, "Wrong alignment on FFortCustomizationAssetsToLoad");
static_assert(sizeof(FFortCustomizationAssetsToLoad) == 0x000040, "Wrong size on FFortCustomizationAssetsToLoad");
static_assert(offsetof(FFortCustomizationAssetsToLoad, HeroTypes) == 0x000000, "Member 'FFortCustomizationAssetsToLoad::HeroTypes' has a wrong offset!");
static_assert(offsetof(FFortCustomizationAssetsToLoad, CharacterParts) == 0x000010, "Member 'FFortCustomizationAssetsToLoad::CharacterParts' has a wrong offset!");
static_assert(offsetof(FFortCustomizationAssetsToLoad, ItemDefs) == 0x000020, "Member 'FFortCustomizationAssetsToLoad::ItemDefs' has a wrong offset!");
static_assert(offsetof(FFortCustomizationAssetsToLoad, VariantAssets) == 0x000030, "Member 'FFortCustomizationAssetsToLoad::VariantAssets' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayMessageReceiverList
// 0x0010 (0x0010 - 0x0000)
struct FFortGameplayMessageReceiverList final
{
public:
	TArray<class UFortGameplayReceiverMessageComponent*> Receivers;                                         // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayMessageReceiverList) == 0x000008, "Wrong alignment on FFortGameplayMessageReceiverList");
static_assert(sizeof(FFortGameplayMessageReceiverList) == 0x000010, "Wrong size on FFortGameplayMessageReceiverList");
static_assert(offsetof(FFortGameplayMessageReceiverList, Receivers) == 0x000000, "Member 'FFortGameplayMessageReceiverList::Receivers' has a wrong offset!");

// ScriptStruct FortniteGame.SavedCustomMatchOptions
// 0x0050 (0x0050 - 0x0000)
struct FSavedCustomMatchOptions final
{
public:
	TMap<class FString, class FString>            CustomMatchOptions;                                // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedCustomMatchOptions) == 0x000008, "Wrong alignment on FSavedCustomMatchOptions");
static_assert(sizeof(FSavedCustomMatchOptions) == 0x000050, "Wrong size on FSavedCustomMatchOptions");
static_assert(offsetof(FSavedCustomMatchOptions, CustomMatchOptions) == 0x000000, "Member 'FSavedCustomMatchOptions::CustomMatchOptions' has a wrong offset!");

// ScriptStruct FortniteGame.CloudColorState
// 0x0050 (0x0050 - 0x0000)
struct FCloudColorState final
{
public:
	struct FLinearColor                           BottomEmissive;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TopEmissive;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BottomLightning;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TopLightning;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InternalColor;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudColorState) == 0x000004, "Wrong alignment on FCloudColorState");
static_assert(sizeof(FCloudColorState) == 0x000050, "Wrong size on FCloudColorState");
static_assert(offsetof(FCloudColorState, BottomEmissive) == 0x000000, "Member 'FCloudColorState::BottomEmissive' has a wrong offset!");
static_assert(offsetof(FCloudColorState, TopEmissive) == 0x000010, "Member 'FCloudColorState::TopEmissive' has a wrong offset!");
static_assert(offsetof(FCloudColorState, BottomLightning) == 0x000020, "Member 'FCloudColorState::BottomLightning' has a wrong offset!");
static_assert(offsetof(FCloudColorState, TopLightning) == 0x000030, "Member 'FCloudColorState::TopLightning' has a wrong offset!");
static_assert(offsetof(FCloudColorState, InternalColor) == 0x000040, "Member 'FCloudColorState::InternalColor' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatCloudValues
// 0x00A0 (0x00A0 - 0x0000)
struct FThreatCloudValues final
{
public:
	struct FCloudColorState                       CloudActivated;                                    // 0x0000(0x0050)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudColorState                       CloudDeactivated;                                  // 0x0050(0x0050)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatCloudValues) == 0x000004, "Wrong alignment on FThreatCloudValues");
static_assert(sizeof(FThreatCloudValues) == 0x0000A0, "Wrong size on FThreatCloudValues");
static_assert(offsetof(FThreatCloudValues, CloudActivated) == 0x000000, "Member 'FThreatCloudValues::CloudActivated' has a wrong offset!");
static_assert(offsetof(FThreatCloudValues, CloudDeactivated) == 0x000050, "Member 'FThreatCloudValues::CloudDeactivated' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyLoginRewardStat
// 0x0060 (0x0060 - 0x0000)
struct FFortDailyLoginRewardStat final
{
public:
	int32                                         NextDefaultReward;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDaysLoggedIn;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastClaimDate;                                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FFortDailyLoginRewardStat_ScheduleClaimed> AdditionalSchedules;                               // 0x0010(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyLoginRewardStat) == 0x000008, "Wrong alignment on FFortDailyLoginRewardStat");
static_assert(sizeof(FFortDailyLoginRewardStat) == 0x000060, "Wrong size on FFortDailyLoginRewardStat");
static_assert(offsetof(FFortDailyLoginRewardStat, NextDefaultReward) == 0x000000, "Member 'FFortDailyLoginRewardStat::NextDefaultReward' has a wrong offset!");
static_assert(offsetof(FFortDailyLoginRewardStat, TotalDaysLoggedIn) == 0x000004, "Member 'FFortDailyLoginRewardStat::TotalDaysLoggedIn' has a wrong offset!");
static_assert(offsetof(FFortDailyLoginRewardStat, LastClaimDate) == 0x000008, "Member 'FFortDailyLoginRewardStat::LastClaimDate' has a wrong offset!");
static_assert(offsetof(FFortDailyLoginRewardStat, AdditionalSchedules) == 0x000010, "Member 'FFortDailyLoginRewardStat::AdditionalSchedules' has a wrong offset!");

// ScriptStruct FortniteGame.FortTagToDeathCause
// 0x000C (0x000C - 0x0000)
struct FFortTagToDeathCause final
{
public:
	struct FGameplayTag                           DeathTag;                                          // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeathCause                                   DBNOCause;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeathCause                                   DeathCause;                                        // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTagToDeathCause) == 0x000004, "Wrong alignment on FFortTagToDeathCause");
static_assert(sizeof(FFortTagToDeathCause) == 0x00000C, "Wrong size on FFortTagToDeathCause");
static_assert(offsetof(FFortTagToDeathCause, DeathTag) == 0x000000, "Member 'FFortTagToDeathCause::DeathTag' has a wrong offset!");
static_assert(offsetof(FFortTagToDeathCause, DBNOCause) == 0x000008, "Member 'FFortTagToDeathCause::DBNOCause' has a wrong offset!");
static_assert(offsetof(FFortTagToDeathCause, DeathCause) == 0x000009, "Member 'FFortTagToDeathCause::DeathCause' has a wrong offset!");

// ScriptStruct FortniteGame.DecoPlacementState
// 0x00A0 (0x00A0 - 0x0000)
struct FDecoPlacementState final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RawLocation;                                       // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  AbsoluteRotation;                                  // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                GridLocation;                                      // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousLocation;                                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FallbackLocation;                                  // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  LastHitActor;                                      // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ABuildingSMActor>        CurrentBuildingActorAttachment;                    // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CreateBuildingLocation;                            // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CreateBuildingRotation;                            // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortDecoPlacementQueryResults                CanPlaceState;                                     // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x13];                                      // 0x008D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDecoPlacementState) == 0x000010, "Wrong alignment on FDecoPlacementState");
static_assert(sizeof(FDecoPlacementState) == 0x0000A0, "Wrong size on FDecoPlacementState");
static_assert(offsetof(FDecoPlacementState, Start) == 0x000000, "Member 'FDecoPlacementState::Start' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, End) == 0x00000C, "Member 'FDecoPlacementState::End' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, RawLocation) == 0x000018, "Member 'FDecoPlacementState::RawLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, Normal) == 0x000024, "Member 'FDecoPlacementState::Normal' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, AbsoluteRotation) == 0x000030, "Member 'FDecoPlacementState::AbsoluteRotation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, GridLocation) == 0x000040, "Member 'FDecoPlacementState::GridLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, PreviousLocation) == 0x00004C, "Member 'FDecoPlacementState::PreviousLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, FallbackLocation) == 0x000058, "Member 'FDecoPlacementState::FallbackLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, LastHitActor) == 0x000064, "Member 'FDecoPlacementState::LastHitActor' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, CurrentBuildingActorAttachment) == 0x00006C, "Member 'FDecoPlacementState::CurrentBuildingActorAttachment' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, CreateBuildingLocation) == 0x000074, "Member 'FDecoPlacementState::CreateBuildingLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, CreateBuildingRotation) == 0x000080, "Member 'FDecoPlacementState::CreateBuildingRotation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, CanPlaceState) == 0x00008C, "Member 'FDecoPlacementState::CanPlaceState' has a wrong offset!");

// ScriptStruct FortniteGame.MaterialReservation
// 0x0010 (0x0010 - 0x0000)
struct FMaterialReservation final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialReservation) == 0x000008, "Wrong alignment on FMaterialReservation");
static_assert(sizeof(FMaterialReservation) == 0x000010, "Wrong size on FMaterialReservation");
static_assert(offsetof(FMaterialReservation, MaterialInstance) == 0x000008, "Member 'FMaterialReservation::MaterialInstance' has a wrong offset!");

// ScriptStruct FortniteGame.PendingDeployableManagerAction
// 0x0040 (0x0040 - 0x0000)
struct FPendingDeployableManagerAction final
{
public:
	EQueueActionType                              ActionType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADeployableBasePlot*>            PendingPlots;                                      // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         CurrentPlotRunningIndex;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDeployableBaseBuildingState                  DesiredPlotState;                                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D[0x13];                                      // 0x001D(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortDeployableBaseManager*             Manager;                                           // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPendingDeployableManagerAction) == 0x000008, "Wrong alignment on FPendingDeployableManagerAction");
static_assert(sizeof(FPendingDeployableManagerAction) == 0x000040, "Wrong size on FPendingDeployableManagerAction");
static_assert(offsetof(FPendingDeployableManagerAction, ActionType) == 0x000000, "Member 'FPendingDeployableManagerAction::ActionType' has a wrong offset!");
static_assert(offsetof(FPendingDeployableManagerAction, PendingPlots) == 0x000008, "Member 'FPendingDeployableManagerAction::PendingPlots' has a wrong offset!");
static_assert(offsetof(FPendingDeployableManagerAction, CurrentPlotRunningIndex) == 0x000018, "Member 'FPendingDeployableManagerAction::CurrentPlotRunningIndex' has a wrong offset!");
static_assert(offsetof(FPendingDeployableManagerAction, DesiredPlotState) == 0x00001C, "Member 'FPendingDeployableManagerAction::DesiredPlotState' has a wrong offset!");
static_assert(offsetof(FPendingDeployableManagerAction, Manager) == 0x000030, "Member 'FPendingDeployableManagerAction::Manager' has a wrong offset!");

// ScriptStruct FortniteGame.MtxBreakdown
// 0x0010 (0x0010 - 0x0000)
struct FMtxBreakdown final
{
public:
	int32                                         AvailableTotalMtx;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailablePremiumMtx;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnavailableTotalMtx;                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnavailablePremiumMtx;                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMtxBreakdown) == 0x000004, "Wrong alignment on FMtxBreakdown");
static_assert(sizeof(FMtxBreakdown) == 0x000010, "Wrong size on FMtxBreakdown");
static_assert(offsetof(FMtxBreakdown, AvailableTotalMtx) == 0x000000, "Member 'FMtxBreakdown::AvailableTotalMtx' has a wrong offset!");
static_assert(offsetof(FMtxBreakdown, AvailablePremiumMtx) == 0x000004, "Member 'FMtxBreakdown::AvailablePremiumMtx' has a wrong offset!");
static_assert(offsetof(FMtxBreakdown, UnavailableTotalMtx) == 0x000008, "Member 'FMtxBreakdown::UnavailableTotalMtx' has a wrong offset!");
static_assert(offsetof(FMtxBreakdown, UnavailablePremiumMtx) == 0x00000C, "Member 'FMtxBreakdown::UnavailablePremiumMtx' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionTaggedRewards
// 0x0018 (0x0018 - 0x0000)
struct FFortMissionTaggedRewards final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortWorldItemDefinition>> WorldItemDefinitions;                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionTaggedRewards) == 0x000008, "Wrong alignment on FFortMissionTaggedRewards");
static_assert(sizeof(FFortMissionTaggedRewards) == 0x000018, "Wrong size on FFortMissionTaggedRewards");
static_assert(offsetof(FFortMissionTaggedRewards, Tag) == 0x000000, "Member 'FFortMissionTaggedRewards::Tag' has a wrong offset!");
static_assert(offsetof(FFortMissionTaggedRewards, WorldItemDefinitions) == 0x000008, "Member 'FFortMissionTaggedRewards::WorldItemDefinitions' has a wrong offset!");

// ScriptStruct FortniteGame.AvailableTierLayout
// 0x0030 (0x0030 - 0x0000)
struct FAvailableTierLayout final
{
public:
	class UFortTieredCollectionLayout*            Layout;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortTierCollectionLayoutOutput> AvailableTiers;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortTierCollectionLayoutOutput> LockedTiers;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bLocked : 1;                                       // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAvailableTierLayout) == 0x000008, "Wrong alignment on FAvailableTierLayout");
static_assert(sizeof(FAvailableTierLayout) == 0x000030, "Wrong size on FAvailableTierLayout");
static_assert(offsetof(FAvailableTierLayout, Layout) == 0x000000, "Member 'FAvailableTierLayout::Layout' has a wrong offset!");
static_assert(offsetof(FAvailableTierLayout, AvailableTiers) == 0x000008, "Member 'FAvailableTierLayout::AvailableTiers' has a wrong offset!");
static_assert(offsetof(FAvailableTierLayout, LockedTiers) == 0x000018, "Member 'FAvailableTierLayout::LockedTiers' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveTieredCollectionLayoutArray
// 0x0018 (0x0120 - 0x0108)
struct FActiveTieredCollectionLayoutArray final : public FFastArraySerializer
{
public:
	TArray<struct FActiveTieredCollectionLayout>  LayoutArray;                                       // 0x0108(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bTiersForced;                                      // 0x0118(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveTieredCollectionLayoutArray) == 0x000008, "Wrong alignment on FActiveTieredCollectionLayoutArray");
static_assert(sizeof(FActiveTieredCollectionLayoutArray) == 0x000120, "Wrong size on FActiveTieredCollectionLayoutArray");
static_assert(offsetof(FActiveTieredCollectionLayoutArray, LayoutArray) == 0x000108, "Member 'FActiveTieredCollectionLayoutArray::LayoutArray' has a wrong offset!");
static_assert(offsetof(FActiveTieredCollectionLayoutArray, bTiersForced) == 0x000118, "Member 'FActiveTieredCollectionLayoutArray::bTiersForced' has a wrong offset!");

// ScriptStruct FortniteGame.EnvironmentBuildingRestorationRecord
// 0x0050 (0x0050 - 0x0000)
struct FEnvironmentBuildingRestorationRecord final
{
public:
	TSubclassOf<class ABuildingActor>             ActorClass;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   QuotaSelectedLootTierKey;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuotaSelectedLootTier;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnvironmentBuildingRestorationRecord) == 0x000010, "Wrong alignment on FEnvironmentBuildingRestorationRecord");
static_assert(sizeof(FEnvironmentBuildingRestorationRecord) == 0x000050, "Wrong size on FEnvironmentBuildingRestorationRecord");
static_assert(offsetof(FEnvironmentBuildingRestorationRecord, ActorClass) == 0x000000, "Member 'FEnvironmentBuildingRestorationRecord::ActorClass' has a wrong offset!");
static_assert(offsetof(FEnvironmentBuildingRestorationRecord, ActorTransform) == 0x000010, "Member 'FEnvironmentBuildingRestorationRecord::ActorTransform' has a wrong offset!");
static_assert(offsetof(FEnvironmentBuildingRestorationRecord, QuotaSelectedLootTierKey) == 0x000040, "Member 'FEnvironmentBuildingRestorationRecord::QuotaSelectedLootTierKey' has a wrong offset!");
static_assert(offsetof(FEnvironmentBuildingRestorationRecord, QuotaSelectedLootTier) == 0x000048, "Member 'FEnvironmentBuildingRestorationRecord::QuotaSelectedLootTier' has a wrong offset!");

// ScriptStruct FortniteGame.PendingDeployableBaseUser
// 0x0040 (0x0040 - 0x0000)
struct FPendingDeployableBaseUser final
{
public:
	struct FUniqueNetIdRepl                       UserNetId;                                         // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortUserCloudRequestHandle            LoadingCloudRequestHandle;                         // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortDeployableBaseRecord*              BaseRecord;                                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADeployableBasePlot*                    BasePlot;                                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingDeployableBaseUser) == 0x000008, "Wrong alignment on FPendingDeployableBaseUser");
static_assert(sizeof(FPendingDeployableBaseUser) == 0x000040, "Wrong size on FPendingDeployableBaseUser");
static_assert(offsetof(FPendingDeployableBaseUser, UserNetId) == 0x000000, "Member 'FPendingDeployableBaseUser::UserNetId' has a wrong offset!");
static_assert(offsetof(FPendingDeployableBaseUser, LoadingCloudRequestHandle) == 0x000028, "Member 'FPendingDeployableBaseUser::LoadingCloudRequestHandle' has a wrong offset!");
static_assert(offsetof(FPendingDeployableBaseUser, BaseRecord) == 0x000030, "Member 'FPendingDeployableBaseUser::BaseRecord' has a wrong offset!");
static_assert(offsetof(FPendingDeployableBaseUser, BasePlot) == 0x000038, "Member 'FPendingDeployableBaseUser::BasePlot' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestMapNode
// 0x0020 (0x0020 - 0x0000)
struct FFortQuestMapNode final
{
public:
	struct FPrimaryAssetId                        QuestItemDefinitionId;                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortQuestItemDefinition*               QuestItemDefinition;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortQuestMapNodeType                         NodeType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuestMapNodeLabelPosition                LabelPosition;                                     // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseHighContrastMode;                               // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestMapNode) == 0x000008, "Wrong alignment on FFortQuestMapNode");
static_assert(sizeof(FFortQuestMapNode) == 0x000020, "Wrong size on FFortQuestMapNode");
static_assert(offsetof(FFortQuestMapNode, QuestItemDefinitionId) == 0x000000, "Member 'FFortQuestMapNode::QuestItemDefinitionId' has a wrong offset!");
static_assert(offsetof(FFortQuestMapNode, QuestItemDefinition) == 0x000010, "Member 'FFortQuestMapNode::QuestItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortQuestMapNode, NodeType) == 0x000018, "Member 'FFortQuestMapNode::NodeType' has a wrong offset!");
static_assert(offsetof(FFortQuestMapNode, LabelPosition) == 0x000019, "Member 'FFortQuestMapNode::LabelPosition' has a wrong offset!");
static_assert(offsetof(FFortQuestMapNode, UseHighContrastMode) == 0x00001A, "Member 'FFortQuestMapNode::UseHighContrastMode' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestMapPage
// 0x0050 (0x0058 - 0x0008)
struct FFortQuestMapPage final : public FTableRowBase
{
public:
	class FText                                   PageTitle;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         PageIndex;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChapterPageCount;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QuestEventFlag;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFrontEndCamera                               CameraMode;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                QuestNodeLayout;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortQuestMapNode>              QuestList;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestMapPage) == 0x000008, "Wrong alignment on FFortQuestMapPage");
static_assert(sizeof(FFortQuestMapPage) == 0x000058, "Wrong size on FFortQuestMapPage");
static_assert(offsetof(FFortQuestMapPage, PageTitle) == 0x000008, "Member 'FFortQuestMapPage::PageTitle' has a wrong offset!");
static_assert(offsetof(FFortQuestMapPage, PageIndex) == 0x000020, "Member 'FFortQuestMapPage::PageIndex' has a wrong offset!");
static_assert(offsetof(FFortQuestMapPage, ChapterPageCount) == 0x000024, "Member 'FFortQuestMapPage::ChapterPageCount' has a wrong offset!");
static_assert(offsetof(FFortQuestMapPage, QuestEventFlag) == 0x000028, "Member 'FFortQuestMapPage::QuestEventFlag' has a wrong offset!");
static_assert(offsetof(FFortQuestMapPage, CameraMode) == 0x000038, "Member 'FFortQuestMapPage::CameraMode' has a wrong offset!");
static_assert(offsetof(FFortQuestMapPage, QuestNodeLayout) == 0x000040, "Member 'FFortQuestMapPage::QuestNodeLayout' has a wrong offset!");
static_assert(offsetof(FFortQuestMapPage, QuestList) == 0x000048, "Member 'FFortQuestMapPage::QuestList' has a wrong offset!");

// ScriptStruct FortniteGame.MaterialCacheSettings
// 0x0018 (0x0020 - 0x0008)
struct FMaterialCacheSettings final : public FTableRowBase
{
public:
	int32                                         bDisable;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCountDesktop;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCountPS4;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCountXbox;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCountSwitch;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCountMobile;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialCacheSettings) == 0x000008, "Wrong alignment on FMaterialCacheSettings");
static_assert(sizeof(FMaterialCacheSettings) == 0x000020, "Wrong size on FMaterialCacheSettings");
static_assert(offsetof(FMaterialCacheSettings, bDisable) == 0x000008, "Member 'FMaterialCacheSettings::bDisable' has a wrong offset!");
static_assert(offsetof(FMaterialCacheSettings, MaxCountDesktop) == 0x00000C, "Member 'FMaterialCacheSettings::MaxCountDesktop' has a wrong offset!");
static_assert(offsetof(FMaterialCacheSettings, MaxCountPS4) == 0x000010, "Member 'FMaterialCacheSettings::MaxCountPS4' has a wrong offset!");
static_assert(offsetof(FMaterialCacheSettings, MaxCountXbox) == 0x000014, "Member 'FMaterialCacheSettings::MaxCountXbox' has a wrong offset!");
static_assert(offsetof(FMaterialCacheSettings, MaxCountSwitch) == 0x000018, "Member 'FMaterialCacheSettings::MaxCountSwitch' has a wrong offset!");
static_assert(offsetof(FMaterialCacheSettings, MaxCountMobile) == 0x00001C, "Member 'FMaterialCacheSettings::MaxCountMobile' has a wrong offset!");

// ScriptStruct FortniteGame.DeployableBaseInstance
// 0x000C (0x0018 - 0x000C)
struct FDeployableBaseInstance final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADeployableBasePlot*                    DeployableBase;                                    // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeployableBaseInstance) == 0x000008, "Wrong alignment on FDeployableBaseInstance");
static_assert(sizeof(FDeployableBaseInstance) == 0x000018, "Wrong size on FDeployableBaseInstance");
static_assert(offsetof(FDeployableBaseInstance, DeployableBase) == 0x000010, "Member 'FDeployableBaseInstance::DeployableBase' has a wrong offset!");

// ScriptStruct FortniteGame.DeployableBaseArray
// 0x0010 (0x0118 - 0x0108)
struct FDeployableBaseArray final : public FFastArraySerializer
{
public:
	TArray<struct FDeployableBaseInstance>        DeployableBases;                                   // 0x0108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDeployableBaseArray) == 0x000008, "Wrong alignment on FDeployableBaseArray");
static_assert(sizeof(FDeployableBaseArray) == 0x000118, "Wrong size on FDeployableBaseArray");
static_assert(offsetof(FDeployableBaseArray, DeployableBases) == 0x000108, "Member 'FDeployableBaseArray::DeployableBases' has a wrong offset!");

// ScriptStruct FortniteGame.FortEffectDistanceQuality
// 0x0018 (0x0018 - 0x0000)
struct FFortEffectDistanceQuality final
{
public:
	float                                         MinDistanceCinematic;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceEpic;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceHigh;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceMedium;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceLow;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowCinematic : 1;                               // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowEpic : 1;                                    // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowHigh : 1;                                    // 0x0014(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowMedium : 1;                                  // 0x0014(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowLow : 1;                                     // 0x0014(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortEffectDistanceQuality) == 0x000004, "Wrong alignment on FFortEffectDistanceQuality");
static_assert(sizeof(FFortEffectDistanceQuality) == 0x000018, "Wrong size on FFortEffectDistanceQuality");
static_assert(offsetof(FFortEffectDistanceQuality, MinDistanceCinematic) == 0x000000, "Member 'FFortEffectDistanceQuality::MinDistanceCinematic' has a wrong offset!");
static_assert(offsetof(FFortEffectDistanceQuality, MinDistanceEpic) == 0x000004, "Member 'FFortEffectDistanceQuality::MinDistanceEpic' has a wrong offset!");
static_assert(offsetof(FFortEffectDistanceQuality, MinDistanceHigh) == 0x000008, "Member 'FFortEffectDistanceQuality::MinDistanceHigh' has a wrong offset!");
static_assert(offsetof(FFortEffectDistanceQuality, MinDistanceMedium) == 0x00000C, "Member 'FFortEffectDistanceQuality::MinDistanceMedium' has a wrong offset!");
static_assert(offsetof(FFortEffectDistanceQuality, MinDistanceLow) == 0x000010, "Member 'FFortEffectDistanceQuality::MinDistanceLow' has a wrong offset!");

// ScriptStruct FortniteGame.ReplayDataSinglePlayerMove
// 0x0030 (0x0048 - 0x0018)
struct FReplayDataSinglePlayerMove final : public FBaseReplayEventInfo
{
public:
	uint8                                         Pad_18[0x30];                                      // 0x0018(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplayDataSinglePlayerMove) == 0x000008, "Wrong alignment on FReplayDataSinglePlayerMove");
static_assert(sizeof(FReplayDataSinglePlayerMove) == 0x000048, "Wrong size on FReplayDataSinglePlayerMove");

// ScriptStruct FortniteGame.DevFortPartyMemberRepData
// 0x0000 (0x06E8 - 0x06E8)
struct FDevFortPartyMemberRepData final : public FFortPartyMemberRepData
{
};
static_assert(alignof(FDevFortPartyMemberRepData) == 0x000008, "Wrong alignment on FDevFortPartyMemberRepData");
static_assert(sizeof(FDevFortPartyMemberRepData) == 0x0006E8, "Wrong size on FDevFortPartyMemberRepData");

// ScriptStruct FortniteGame.DevPartyMember
// 0x0160 (0x0160 - 0x0000)
struct FDevPartyMember final
{
public:
	class FString                                 ContextName;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAthenaLoadout                     AthenaLoadout;                                     // 0x0030(0x00F0)(Edit, NativeAccessSpecifierPublic)
	class UFortMontageItemDefinitionBase*         Emote;                                             // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonLevel;                                       // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrossplayPreference                          CrossplayPreference;                               // 0x012C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JsonPartyMemberData;                               // 0x0130(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEmbedded;                                       // 0x0140(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Platform;                                          // 0x0148(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonInputType                              InputType;                                         // 0x0158(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDevPartyMember) == 0x000008, "Wrong alignment on FDevPartyMember");
static_assert(sizeof(FDevPartyMember) == 0x000160, "Wrong size on FDevPartyMember");
static_assert(offsetof(FDevPartyMember, ContextName) == 0x000000, "Member 'FDevPartyMember::ContextName' has a wrong offset!");
static_assert(offsetof(FDevPartyMember, Email) == 0x000010, "Member 'FDevPartyMember::Email' has a wrong offset!");
static_assert(offsetof(FDevPartyMember, Password) == 0x000020, "Member 'FDevPartyMember::Password' has a wrong offset!");
static_assert(offsetof(FDevPartyMember, AthenaLoadout) == 0x000030, "Member 'FDevPartyMember::AthenaLoadout' has a wrong offset!");
static_assert(offsetof(FDevPartyMember, Emote) == 0x000120, "Member 'FDevPartyMember::Emote' has a wrong offset!");
static_assert(offsetof(FDevPartyMember, SeasonLevel) == 0x000128, "Member 'FDevPartyMember::SeasonLevel' has a wrong offset!");
static_assert(offsetof(FDevPartyMember, CrossplayPreference) == 0x00012C, "Member 'FDevPartyMember::CrossplayPreference' has a wrong offset!");
static_assert(offsetof(FDevPartyMember, JsonPartyMemberData) == 0x000130, "Member 'FDevPartyMember::JsonPartyMemberData' has a wrong offset!");
static_assert(offsetof(FDevPartyMember, bIsEmbedded) == 0x000140, "Member 'FDevPartyMember::bIsEmbedded' has a wrong offset!");
static_assert(offsetof(FDevPartyMember, Platform) == 0x000148, "Member 'FDevPartyMember::Platform' has a wrong offset!");
static_assert(offsetof(FDevPartyMember, InputType) == 0x000158, "Member 'FDevPartyMember::InputType' has a wrong offset!");

// ScriptStruct FortniteGame.GolfCartHandOnWheelControl
// 0x002C (0x002C - 0x0000)
struct FGolfCartHandOnWheelControl final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGolfCartHandOnWheelControl) == 0x000004, "Wrong alignment on FGolfCartHandOnWheelControl");
static_assert(sizeof(FGolfCartHandOnWheelControl) == 0x00002C, "Wrong size on FGolfCartHandOnWheelControl");
static_assert(offsetof(FGolfCartHandOnWheelControl, SocketName) == 0x000000, "Member 'FGolfCartHandOnWheelControl::SocketName' has a wrong offset!");
static_assert(offsetof(FGolfCartHandOnWheelControl, Location) == 0x000008, "Member 'FGolfCartHandOnWheelControl::Location' has a wrong offset!");
static_assert(offsetof(FGolfCartHandOnWheelControl, Rotation) == 0x000014, "Member 'FGolfCartHandOnWheelControl::Rotation' has a wrong offset!");
static_assert(offsetof(FGolfCartHandOnWheelControl, AlphaCurveName) == 0x000020, "Member 'FGolfCartHandOnWheelControl::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FGolfCartHandOnWheelControl, Alpha) == 0x000028, "Member 'FGolfCartHandOnWheelControl::Alpha' has a wrong offset!");

// ScriptStruct FortniteGame.MeshNetworkEditorSettings
// 0x0020 (0x0020 - 0x0000)
struct FMeshNetworkEditorSettings final
{
public:
	bool                                          bEnableMeshNetwork;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BaseMeshPort;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseMeshGamePort;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MeshMetadata;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshNetworkEditorSettings) == 0x000008, "Wrong alignment on FMeshNetworkEditorSettings");
static_assert(sizeof(FMeshNetworkEditorSettings) == 0x000020, "Wrong size on FMeshNetworkEditorSettings");
static_assert(offsetof(FMeshNetworkEditorSettings, bEnableMeshNetwork) == 0x000000, "Member 'FMeshNetworkEditorSettings::bEnableMeshNetwork' has a wrong offset!");
static_assert(offsetof(FMeshNetworkEditorSettings, BaseMeshPort) == 0x000004, "Member 'FMeshNetworkEditorSettings::BaseMeshPort' has a wrong offset!");
static_assert(offsetof(FMeshNetworkEditorSettings, BaseMeshGamePort) == 0x000008, "Member 'FMeshNetworkEditorSettings::BaseMeshGamePort' has a wrong offset!");
static_assert(offsetof(FMeshNetworkEditorSettings, MeshMetadata) == 0x000010, "Member 'FMeshNetworkEditorSettings::MeshMetadata' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionGenerationElementCostAndAvailabilityRow
// 0x0018 (0x0020 - 0x0008)
struct FFortMissionGenerationElementCostAndAvailabilityRow final : public FTableRowBase
{
public:
	class UCurveTable*                            AvailabilityCurveTable;                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AvailabilityCurveTableRow;                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinCost;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxCost;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortMissionGenerationElementCostAndAvailabilityRow) == 0x000008, "Wrong alignment on FFortMissionGenerationElementCostAndAvailabilityRow");
static_assert(sizeof(FFortMissionGenerationElementCostAndAvailabilityRow) == 0x000020, "Wrong size on FFortMissionGenerationElementCostAndAvailabilityRow");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, AvailabilityCurveTable) == 0x000008, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::AvailabilityCurveTable' has a wrong offset!");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, AvailabilityCurveTableRow) == 0x000010, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::AvailabilityCurveTableRow' has a wrong offset!");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, MinCost) == 0x000018, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::MinCost' has a wrong offset!");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, MaxCost) == 0x00001C, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::MaxCost' has a wrong offset!");

// ScriptStruct FortniteGame.HeroAbilityKit
// 0x0050 (0x0050 - 0x0000)
struct FHeroAbilityKit final
{
public:
	TSoftObjectPtr<class UFortAbilityKit>         InherentAbilityKit;                                // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredGPTags;                                    // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bShowInAbilityScreen;                              // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroAbilityKit) == 0x000008, "Wrong alignment on FHeroAbilityKit");
static_assert(sizeof(FHeroAbilityKit) == 0x000050, "Wrong size on FHeroAbilityKit");
static_assert(offsetof(FHeroAbilityKit, InherentAbilityKit) == 0x000000, "Member 'FHeroAbilityKit::InherentAbilityKit' has a wrong offset!");
static_assert(offsetof(FHeroAbilityKit, RequiredGPTags) == 0x000028, "Member 'FHeroAbilityKit::RequiredGPTags' has a wrong offset!");
static_assert(offsetof(FHeroAbilityKit, bShowInAbilityScreen) == 0x000048, "Member 'FHeroAbilityKit::bShowInAbilityScreen' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterLockedUtility
// 0x0002 (0x0002 - 0x0000)
struct FFortEncounterLockedUtility final
{
public:
	EFortAIUtility                                Utility;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterUtilityDesire                   UtilityDesire;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterLockedUtility) == 0x000001, "Wrong alignment on FFortEncounterLockedUtility");
static_assert(sizeof(FFortEncounterLockedUtility) == 0x000002, "Wrong size on FFortEncounterLockedUtility");
static_assert(offsetof(FFortEncounterLockedUtility, Utility) == 0x000000, "Member 'FFortEncounterLockedUtility::Utility' has a wrong offset!");
static_assert(offsetof(FFortEncounterLockedUtility, UtilityDesire) == 0x000001, "Member 'FFortEncounterLockedUtility::UtilityDesire' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackEventData
// 0x0038 (0x0038 - 0x0000)
struct FFortFeedbackEventData final
{
public:
	struct FFortFeedbackHandle                    Handle;                                            // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ChanceToPlay;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinReplayTime;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinReplayTimeForSpeaker;                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWitnessDistance;                                // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptCurrentLine;                             // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeInterrupted;                                 // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanQue;                                           // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackBroadcastFilter                  MultiplayerBroadcastFilter;                        // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackSelectionMethod                  ContextSelectionMethod;                            // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FeedbackDelay;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLastPlayed;                                    // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFeedbackEventData) == 0x000008, "Wrong alignment on FFortFeedbackEventData");
static_assert(sizeof(FFortFeedbackEventData) == 0x000038, "Wrong size on FFortFeedbackEventData");
static_assert(offsetof(FFortFeedbackEventData, Handle) == 0x000000, "Member 'FFortFeedbackEventData::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, ChanceToPlay) == 0x000018, "Member 'FFortFeedbackEventData::ChanceToPlay' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, MinReplayTime) == 0x00001C, "Member 'FFortFeedbackEventData::MinReplayTime' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, MinReplayTimeForSpeaker) == 0x000020, "Member 'FFortFeedbackEventData::MinReplayTimeForSpeaker' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, MaxWitnessDistance) == 0x000024, "Member 'FFortFeedbackEventData::MaxWitnessDistance' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, bInterruptCurrentLine) == 0x000028, "Member 'FFortFeedbackEventData::bInterruptCurrentLine' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, bCanBeInterrupted) == 0x000029, "Member 'FFortFeedbackEventData::bCanBeInterrupted' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, bCanQue) == 0x00002A, "Member 'FFortFeedbackEventData::bCanQue' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, MultiplayerBroadcastFilter) == 0x00002B, "Member 'FFortFeedbackEventData::MultiplayerBroadcastFilter' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, ContextSelectionMethod) == 0x00002C, "Member 'FFortFeedbackEventData::ContextSelectionMethod' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, FeedbackDelay) == 0x000030, "Member 'FFortFeedbackEventData::FeedbackDelay' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, TimeLastPlayed) == 0x000034, "Member 'FFortFeedbackEventData::TimeLastPlayed' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackActionBankDefined
// 0x0008 (0x0038 - 0x0030)
struct FFortFeedbackActionBankDefined final : public FFortFeedbackAction
{
public:
	float                                         MinReplayTime;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinReplayTimeForSpeaker;                           // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortFeedbackActionBankDefined) == 0x000008, "Wrong alignment on FFortFeedbackActionBankDefined");
static_assert(sizeof(FFortFeedbackActionBankDefined) == 0x000038, "Wrong size on FFortFeedbackActionBankDefined");
static_assert(offsetof(FFortFeedbackActionBankDefined, MinReplayTime) == 0x000030, "Member 'FFortFeedbackActionBankDefined::MinReplayTime' has a wrong offset!");
static_assert(offsetof(FFortFeedbackActionBankDefined, MinReplayTimeForSpeaker) == 0x000034, "Member 'FFortFeedbackActionBankDefined::MinReplayTimeForSpeaker' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaScoreData
// 0x0068 (0x0068 - 0x0000)
struct FAthenaScoreData final
{
public:
	EAthenaScoringEvent                           ScoringEvent;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ScoreNameText;                                     // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventInclusionTags;                                // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         NumOccurrencesForScore;                            // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOccurrencesPermitted;                           // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ScoreAwarded;                                      // 0x0048(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaScoreData) == 0x000008, "Wrong alignment on FAthenaScoreData");
static_assert(sizeof(FAthenaScoreData) == 0x000068, "Wrong size on FAthenaScoreData");
static_assert(offsetof(FAthenaScoreData, ScoringEvent) == 0x000000, "Member 'FAthenaScoreData::ScoringEvent' has a wrong offset!");
static_assert(offsetof(FAthenaScoreData, ScoreNameText) == 0x000008, "Member 'FAthenaScoreData::ScoreNameText' has a wrong offset!");
static_assert(offsetof(FAthenaScoreData, EventInclusionTags) == 0x000020, "Member 'FAthenaScoreData::EventInclusionTags' has a wrong offset!");
static_assert(offsetof(FAthenaScoreData, NumOccurrencesForScore) == 0x000040, "Member 'FAthenaScoreData::NumOccurrencesForScore' has a wrong offset!");
static_assert(offsetof(FAthenaScoreData, NumOccurrencesPermitted) == 0x000044, "Member 'FAthenaScoreData::NumOccurrencesPermitted' has a wrong offset!");
static_assert(offsetof(FAthenaScoreData, ScoreAwarded) == 0x000048, "Member 'FAthenaScoreData::ScoreAwarded' has a wrong offset!");

// ScriptStruct FortniteGame.WinConditionScoreData
// 0x0050 (0x0050 - 0x0000)
struct FWinConditionScoreData final
{
public:
	struct FScalableFloat                         GoalScore;                                         // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         BigScoreThreshold;                                 // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FAthenaScoreData>               ScoreDataList;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWinConditionScoreData) == 0x000008, "Wrong alignment on FWinConditionScoreData");
static_assert(sizeof(FWinConditionScoreData) == 0x000050, "Wrong size on FWinConditionScoreData");
static_assert(offsetof(FWinConditionScoreData, GoalScore) == 0x000000, "Member 'FWinConditionScoreData::GoalScore' has a wrong offset!");
static_assert(offsetof(FWinConditionScoreData, BigScoreThreshold) == 0x000020, "Member 'FWinConditionScoreData::BigScoreThreshold' has a wrong offset!");
static_assert(offsetof(FWinConditionScoreData, ScoreDataList) == 0x000040, "Member 'FWinConditionScoreData::ScoreDataList' has a wrong offset!");

// ScriptStruct FortniteGame.FortFlightModel
// 0x0220 (0x0220 - 0x0000)
struct alignas(0x10) FFortFlightModel final
{
public:
	uint8                                         Pad_0[0x220];                                      // 0x0000(0x0220)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFlightModel) == 0x000010, "Wrong alignment on FFortFlightModel");
static_assert(sizeof(FFortFlightModel) == 0x000220, "Wrong size on FFortFlightModel");

// ScriptStruct FortniteGame.FlightParams
// 0x00B8 (0x00B8 - 0x0000)
struct FFlightParams final
{
public:
	float                                         TopSpeedKmh;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftoffSpeedKmh;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlSpeedKmh;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadingStabilizationRate;                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadingStabilizationMaxForwardVelocityKmh;         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadingStabilizationMaxDegPerSecond;               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalStabilizationDrag;                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalStabilizationDrag;                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalStabilizationTorque;                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalStabilizationTorque;                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalStabilizationTorque;                     // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHorizontalStabilizationTorque;                  // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationalDampingCoefficient;                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotationalDampingTorque;                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TailLength;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowSpeedThrust;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighSpeedThrust;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AntigravityHorizontal;                             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AntigravityUp;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AntigravityDown;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlFrameHeight;                                // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlFrameDistance;                              // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlFrameDistanceInterpPerSecond;               // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlFrameOrbitInterpPerSecond;                  // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlFrameRollInterpPerSecond;                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ControlFrameDefaultRollUp;                         // 0x0064(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlFrameRollUpAcceleration;                    // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlFrameRollUpMaxVelocity;                     // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlFrameRollUpDamping;                         // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlFrameMinUpNudge;                            // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlFrameMaxUpNudge;                            // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlFrameUpsideDownIgnoreNudgePercent;          // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerPitchRate;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerYawRate;                                      // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerMaxHeadingDiffDegrees;                        // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollPerHeadingDiff;                                // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadingMatchRate;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollMatchRate;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MatchingTorqueCap;                                 // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StallVelocityLow;                                  // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StallVelocityHigh;                                 // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinStallYawMultiplier;                             // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStallYawMultiplier;                             // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StallHighVelocityDeviationAngle;                   // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlightParams) == 0x000004, "Wrong alignment on FFlightParams");
static_assert(sizeof(FFlightParams) == 0x0000B8, "Wrong size on FFlightParams");
static_assert(offsetof(FFlightParams, TopSpeedKmh) == 0x000000, "Member 'FFlightParams::TopSpeedKmh' has a wrong offset!");
static_assert(offsetof(FFlightParams, LiftoffSpeedKmh) == 0x000004, "Member 'FFlightParams::LiftoffSpeedKmh' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlSpeedKmh) == 0x000008, "Member 'FFlightParams::ControlSpeedKmh' has a wrong offset!");
static_assert(offsetof(FFlightParams, HeadingStabilizationRate) == 0x00000C, "Member 'FFlightParams::HeadingStabilizationRate' has a wrong offset!");
static_assert(offsetof(FFlightParams, HeadingStabilizationMaxForwardVelocityKmh) == 0x000010, "Member 'FFlightParams::HeadingStabilizationMaxForwardVelocityKmh' has a wrong offset!");
static_assert(offsetof(FFlightParams, HeadingStabilizationMaxDegPerSecond) == 0x000014, "Member 'FFlightParams::HeadingStabilizationMaxDegPerSecond' has a wrong offset!");
static_assert(offsetof(FFlightParams, VerticalStabilizationDrag) == 0x000018, "Member 'FFlightParams::VerticalStabilizationDrag' has a wrong offset!");
static_assert(offsetof(FFlightParams, HorizontalStabilizationDrag) == 0x00001C, "Member 'FFlightParams::HorizontalStabilizationDrag' has a wrong offset!");
static_assert(offsetof(FFlightParams, VerticalStabilizationTorque) == 0x000020, "Member 'FFlightParams::VerticalStabilizationTorque' has a wrong offset!");
static_assert(offsetof(FFlightParams, MaxVerticalStabilizationTorque) == 0x000024, "Member 'FFlightParams::MaxVerticalStabilizationTorque' has a wrong offset!");
static_assert(offsetof(FFlightParams, HorizontalStabilizationTorque) == 0x000028, "Member 'FFlightParams::HorizontalStabilizationTorque' has a wrong offset!");
static_assert(offsetof(FFlightParams, MaxHorizontalStabilizationTorque) == 0x00002C, "Member 'FFlightParams::MaxHorizontalStabilizationTorque' has a wrong offset!");
static_assert(offsetof(FFlightParams, RotationalDampingCoefficient) == 0x000030, "Member 'FFlightParams::RotationalDampingCoefficient' has a wrong offset!");
static_assert(offsetof(FFlightParams, MaxRotationalDampingTorque) == 0x000034, "Member 'FFlightParams::MaxRotationalDampingTorque' has a wrong offset!");
static_assert(offsetof(FFlightParams, TailLength) == 0x000038, "Member 'FFlightParams::TailLength' has a wrong offset!");
static_assert(offsetof(FFlightParams, LowSpeedThrust) == 0x00003C, "Member 'FFlightParams::LowSpeedThrust' has a wrong offset!");
static_assert(offsetof(FFlightParams, HighSpeedThrust) == 0x000040, "Member 'FFlightParams::HighSpeedThrust' has a wrong offset!");
static_assert(offsetof(FFlightParams, AntigravityHorizontal) == 0x000044, "Member 'FFlightParams::AntigravityHorizontal' has a wrong offset!");
static_assert(offsetof(FFlightParams, AntigravityUp) == 0x000048, "Member 'FFlightParams::AntigravityUp' has a wrong offset!");
static_assert(offsetof(FFlightParams, AntigravityDown) == 0x00004C, "Member 'FFlightParams::AntigravityDown' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameHeight) == 0x000050, "Member 'FFlightParams::ControlFrameHeight' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameDistance) == 0x000054, "Member 'FFlightParams::ControlFrameDistance' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameDistanceInterpPerSecond) == 0x000058, "Member 'FFlightParams::ControlFrameDistanceInterpPerSecond' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameOrbitInterpPerSecond) == 0x00005C, "Member 'FFlightParams::ControlFrameOrbitInterpPerSecond' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameRollInterpPerSecond) == 0x000060, "Member 'FFlightParams::ControlFrameRollInterpPerSecond' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameDefaultRollUp) == 0x000064, "Member 'FFlightParams::ControlFrameDefaultRollUp' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameRollUpAcceleration) == 0x000070, "Member 'FFlightParams::ControlFrameRollUpAcceleration' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameRollUpMaxVelocity) == 0x000074, "Member 'FFlightParams::ControlFrameRollUpMaxVelocity' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameRollUpDamping) == 0x000078, "Member 'FFlightParams::ControlFrameRollUpDamping' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameMinUpNudge) == 0x00007C, "Member 'FFlightParams::ControlFrameMinUpNudge' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameMaxUpNudge) == 0x000080, "Member 'FFlightParams::ControlFrameMaxUpNudge' has a wrong offset!");
static_assert(offsetof(FFlightParams, ControlFrameUpsideDownIgnoreNudgePercent) == 0x000084, "Member 'FFlightParams::ControlFrameUpsideDownIgnoreNudgePercent' has a wrong offset!");
static_assert(offsetof(FFlightParams, SteerPitchRate) == 0x000088, "Member 'FFlightParams::SteerPitchRate' has a wrong offset!");
static_assert(offsetof(FFlightParams, SteerYawRate) == 0x00008C, "Member 'FFlightParams::SteerYawRate' has a wrong offset!");
static_assert(offsetof(FFlightParams, SteerMaxHeadingDiffDegrees) == 0x000090, "Member 'FFlightParams::SteerMaxHeadingDiffDegrees' has a wrong offset!");
static_assert(offsetof(FFlightParams, RollPerHeadingDiff) == 0x000094, "Member 'FFlightParams::RollPerHeadingDiff' has a wrong offset!");
static_assert(offsetof(FFlightParams, HeadingMatchRate) == 0x000098, "Member 'FFlightParams::HeadingMatchRate' has a wrong offset!");
static_assert(offsetof(FFlightParams, RollMatchRate) == 0x00009C, "Member 'FFlightParams::RollMatchRate' has a wrong offset!");
static_assert(offsetof(FFlightParams, MatchingTorqueCap) == 0x0000A0, "Member 'FFlightParams::MatchingTorqueCap' has a wrong offset!");
static_assert(offsetof(FFlightParams, StallVelocityLow) == 0x0000A4, "Member 'FFlightParams::StallVelocityLow' has a wrong offset!");
static_assert(offsetof(FFlightParams, StallVelocityHigh) == 0x0000A8, "Member 'FFlightParams::StallVelocityHigh' has a wrong offset!");
static_assert(offsetof(FFlightParams, MinStallYawMultiplier) == 0x0000AC, "Member 'FFlightParams::MinStallYawMultiplier' has a wrong offset!");
static_assert(offsetof(FFlightParams, MaxStallYawMultiplier) == 0x0000B0, "Member 'FFlightParams::MaxStallYawMultiplier' has a wrong offset!");
static_assert(offsetof(FFlightParams, StallHighVelocityDeviationAngle) == 0x0000B4, "Member 'FFlightParams::StallHighVelocityDeviationAngle' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneEvent
// 0x0020 (0x0020 - 0x0000)
struct FFortZoneEvent final
{
public:
	class FName                                   EventType;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortZoneEvent) == 0x000008, "Wrong alignment on FFortZoneEvent");
static_assert(sizeof(FFortZoneEvent) == 0x000020, "Wrong size on FFortZoneEvent");
static_assert(offsetof(FFortZoneEvent, EventType) == 0x000000, "Member 'FFortZoneEvent::EventType' has a wrong offset!");
static_assert(offsetof(FFortZoneEvent, EventFocus) == 0x000008, "Member 'FFortZoneEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FFortZoneEvent, EventContent) == 0x000010, "Member 'FFortZoneEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FFortZoneEvent, EventInstigator) == 0x000018, "Member 'FFortZoneEvent::EventInstigator' has a wrong offset!");

// ScriptStruct FortniteGame.FortLightAnimSet
// 0x0020 (0x0020 - 0x0000)
struct FFortLightAnimSet final
{
public:
	class ULightComponent*                        LightComp;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortFloatAnimationInfo>        IntensityAnims;                                    // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLightAnimSet) == 0x000008, "Wrong alignment on FFortLightAnimSet");
static_assert(sizeof(FFortLightAnimSet) == 0x000020, "Wrong size on FFortLightAnimSet");
static_assert(offsetof(FFortLightAnimSet, LightComp) == 0x000000, "Member 'FFortLightAnimSet::LightComp' has a wrong offset!");
static_assert(offsetof(FFortLightAnimSet, IntensityAnims) == 0x000008, "Member 'FFortLightAnimSet::IntensityAnims' has a wrong offset!");

// ScriptStruct FortniteGame.FortParticleAnimSet
// 0x0020 (0x0020 - 0x0000)
struct FFortParticleAnimSet final
{
public:
	class UParticleSystemComponent*               PSC;                                               // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortFloatParamAnimationInfo>   ParamAnims;                                        // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortParticleAnimSet) == 0x000008, "Wrong alignment on FFortParticleAnimSet");
static_assert(sizeof(FFortParticleAnimSet) == 0x000020, "Wrong size on FFortParticleAnimSet");
static_assert(offsetof(FFortParticleAnimSet, PSC) == 0x000000, "Member 'FFortParticleAnimSet::PSC' has a wrong offset!");
static_assert(offsetof(FFortParticleAnimSet, ParamAnims) == 0x000008, "Member 'FFortParticleAnimSet::ParamAnims' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestRewardTableRow
// 0x0020 (0x0028 - 0x0008)
struct FFortQuestRewardTableRow final : public FTableRowBase
{
public:
	class FString                                 QuestTemplateId;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TemplateId;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Feature;                                           // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Selectable;                                        // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestRewardTableRow) == 0x000008, "Wrong alignment on FFortQuestRewardTableRow");
static_assert(sizeof(FFortQuestRewardTableRow) == 0x000028, "Wrong size on FFortQuestRewardTableRow");
static_assert(offsetof(FFortQuestRewardTableRow, QuestTemplateId) == 0x000008, "Member 'FFortQuestRewardTableRow::QuestTemplateId' has a wrong offset!");
static_assert(offsetof(FFortQuestRewardTableRow, TemplateId) == 0x000018, "Member 'FFortQuestRewardTableRow::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortQuestRewardTableRow, Quantity) == 0x000020, "Member 'FFortQuestRewardTableRow::Quantity' has a wrong offset!");
static_assert(offsetof(FFortQuestRewardTableRow, Hidden) == 0x000024, "Member 'FFortQuestRewardTableRow::Hidden' has a wrong offset!");
static_assert(offsetof(FFortQuestRewardTableRow, Feature) == 0x000025, "Member 'FFortQuestRewardTableRow::Feature' has a wrong offset!");
static_assert(offsetof(FFortQuestRewardTableRow, Selectable) == 0x000026, "Member 'FFortQuestRewardTableRow::Selectable' has a wrong offset!");

// ScriptStruct FortniteGame.TagQueryTableRow
// 0x0048 (0x0050 - 0x0008)
struct FTagQueryTableRow final : public FTableRowBase
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTagQueryTableRow) == 0x000008, "Wrong alignment on FTagQueryTableRow");
static_assert(sizeof(FTagQueryTableRow) == 0x000050, "Wrong size on FTagQueryTableRow");
static_assert(offsetof(FTagQueryTableRow, TagQuery) == 0x000008, "Member 'FTagQueryTableRow::TagQuery' has a wrong offset!");

// ScriptStruct FortniteGame.SubGameInfo
// 0x0010 (0x0010 - 0x0000)
struct FSubGameInfo final
{
public:
	class UFortTokenType*                         AccessToken;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiredFullInstall;                               // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPartyWithoutFullInstall;                       // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubGameInfo) == 0x000008, "Wrong alignment on FSubGameInfo");
static_assert(sizeof(FSubGameInfo) == 0x000010, "Wrong size on FSubGameInfo");
static_assert(offsetof(FSubGameInfo, AccessToken) == 0x000000, "Member 'FSubGameInfo::AccessToken' has a wrong offset!");
static_assert(offsetof(FSubGameInfo, RequiredFullInstall) == 0x000008, "Member 'FSubGameInfo::RequiredFullInstall' has a wrong offset!");
static_assert(offsetof(FSubGameInfo, bCanPartyWithoutFullInstall) == 0x000009, "Member 'FSubGameInfo::bCanPartyWithoutFullInstall' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertSpreadData
// 0x0018 (0x0020 - 0x0008)
struct FFortMissionAlertSpreadData final : public FTableRowBase
{
public:
	float                                         ChanceToSpread;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalChancesToSpread;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumTilesToSpreadTo;                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpreadInterval;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MissionAlertRowName;                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertSpreadData) == 0x000008, "Wrong alignment on FFortMissionAlertSpreadData");
static_assert(sizeof(FFortMissionAlertSpreadData) == 0x000020, "Wrong size on FFortMissionAlertSpreadData");
static_assert(offsetof(FFortMissionAlertSpreadData, ChanceToSpread) == 0x000008, "Member 'FFortMissionAlertSpreadData::ChanceToSpread' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertSpreadData, TotalChancesToSpread) == 0x00000C, "Member 'FFortMissionAlertSpreadData::TotalChancesToSpread' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertSpreadData, MaxNumTilesToSpreadTo) == 0x000010, "Member 'FFortMissionAlertSpreadData::MaxNumTilesToSpreadTo' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertSpreadData, SpreadInterval) == 0x000014, "Member 'FFortMissionAlertSpreadData::SpreadInterval' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertSpreadData, MissionAlertRowName) == 0x000018, "Member 'FFortMissionAlertSpreadData::MissionAlertRowName' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveCollectionLootSet
// 0x0010 (0x0018 - 0x0008)
struct FTieredWaveCollectionLootSet final : public FTableRowBase
{
public:
	TArray<struct FTieredWaveCollectionLootSetData> LootSetData;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveCollectionLootSet) == 0x000008, "Wrong alignment on FTieredWaveCollectionLootSet");
static_assert(sizeof(FTieredWaveCollectionLootSet) == 0x000018, "Wrong size on FTieredWaveCollectionLootSet");
static_assert(offsetof(FTieredWaveCollectionLootSet, LootSetData) == 0x000008, "Member 'FTieredWaveCollectionLootSet::LootSetData' has a wrong offset!");

// ScriptStruct FortniteGame.TieredModifierSet
// 0x0010 (0x0018 - 0x0008)
struct FTieredModifierSet final : public FTableRowBase
{
public:
	TArray<struct FTieredModifierSetData>         ModifierData;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredModifierSet) == 0x000008, "Wrong alignment on FTieredModifierSet");
static_assert(sizeof(FTieredModifierSet) == 0x000018, "Wrong size on FTieredModifierSet");
static_assert(offsetof(FTieredModifierSet, ModifierData) == 0x000008, "Member 'FTieredModifierSet::ModifierData' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveSetCollection
// 0x0010 (0x0018 - 0x0008)
struct FTieredWaveSetCollection final : public FTableRowBase
{
public:
	TArray<struct FTieredWaveSetCollectionData>   CollectionData;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveSetCollection) == 0x000008, "Wrong alignment on FTieredWaveSetCollection");
static_assert(sizeof(FTieredWaveSetCollection) == 0x000018, "Wrong size on FTieredWaveSetCollection");
static_assert(offsetof(FTieredWaveSetCollection, CollectionData) == 0x000008, "Member 'FTieredWaveSetCollection::CollectionData' has a wrong offset!");

// ScriptStruct FortniteGame.ScoreMultiplierRow
// 0x0080 (0x0088 - 0x0008)
struct FScoreMultiplierRow final : public FTableRowBase
{
public:
	float                                         CombatMultiplier;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BuildingMultiplier;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UtilityMultiplier;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BadgeMultiplier;                                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MonsterKills;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MonsterDamagePoints;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlayerKills;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WoodGathered;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         StoneGathered;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MetalGathered;                                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Deaths;                                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt;                                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt_Wood;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt_Stone;                              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt_Metal;                              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Wood2;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Wood3;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Stone2;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Stone3;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Metal2;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Metal3;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsDestroyed;                                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Repair_Wood;                                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Repair_Stone;                                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Repair_Metal;                                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FlagsCaptured;                                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FlagsReturned;                                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ContainersLooted;                                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CraftingPoints;                                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TrapPlacementPoints;                               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TrapActivationPoints;                              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScoreMultiplierRow) == 0x000008, "Wrong alignment on FScoreMultiplierRow");
static_assert(sizeof(FScoreMultiplierRow) == 0x000088, "Wrong size on FScoreMultiplierRow");
static_assert(offsetof(FScoreMultiplierRow, CombatMultiplier) == 0x000008, "Member 'FScoreMultiplierRow::CombatMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingMultiplier) == 0x00000C, "Member 'FScoreMultiplierRow::BuildingMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, UtilityMultiplier) == 0x000010, "Member 'FScoreMultiplierRow::UtilityMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BadgeMultiplier) == 0x000014, "Member 'FScoreMultiplierRow::BadgeMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, MonsterKills) == 0x000018, "Member 'FScoreMultiplierRow::MonsterKills' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, MonsterDamagePoints) == 0x00001C, "Member 'FScoreMultiplierRow::MonsterDamagePoints' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, PlayerKills) == 0x000020, "Member 'FScoreMultiplierRow::PlayerKills' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, WoodGathered) == 0x000024, "Member 'FScoreMultiplierRow::WoodGathered' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, StoneGathered) == 0x000028, "Member 'FScoreMultiplierRow::StoneGathered' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, MetalGathered) == 0x00002C, "Member 'FScoreMultiplierRow::MetalGathered' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Deaths) == 0x000030, "Member 'FScoreMultiplierRow::Deaths' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt) == 0x000034, "Member 'FScoreMultiplierRow::BuildingsBuilt' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt_Wood) == 0x000038, "Member 'FScoreMultiplierRow::BuildingsBuilt_Wood' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt_Stone) == 0x00003C, "Member 'FScoreMultiplierRow::BuildingsBuilt_Stone' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt_Metal) == 0x000040, "Member 'FScoreMultiplierRow::BuildingsBuilt_Metal' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Wood2) == 0x000044, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Wood2' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Wood3) == 0x000048, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Wood3' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Stone2) == 0x00004C, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Stone2' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Stone3) == 0x000050, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Stone3' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Metal2) == 0x000054, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Metal2' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Metal3) == 0x000058, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Metal3' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsDestroyed) == 0x00005C, "Member 'FScoreMultiplierRow::BuildingsDestroyed' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Repair_Wood) == 0x000060, "Member 'FScoreMultiplierRow::Repair_Wood' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Repair_Stone) == 0x000064, "Member 'FScoreMultiplierRow::Repair_Stone' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Repair_Metal) == 0x000068, "Member 'FScoreMultiplierRow::Repair_Metal' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, FlagsCaptured) == 0x00006C, "Member 'FScoreMultiplierRow::FlagsCaptured' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, FlagsReturned) == 0x000070, "Member 'FScoreMultiplierRow::FlagsReturned' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, ContainersLooted) == 0x000074, "Member 'FScoreMultiplierRow::ContainersLooted' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, CraftingPoints) == 0x000078, "Member 'FScoreMultiplierRow::CraftingPoints' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, TrapPlacementPoints) == 0x00007C, "Member 'FScoreMultiplierRow::TrapPlacementPoints' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, TrapActivationPoints) == 0x000080, "Member 'FScoreMultiplierRow::TrapActivationPoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortReplicatedStatMapping
// 0x0020 (0x0020 - 0x0000)
struct FFortReplicatedStatMapping final
{
public:
	EStatCategory                                 StatCategory;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortReplicatedStatMapping) == 0x000008, "Wrong alignment on FFortReplicatedStatMapping");
static_assert(sizeof(FFortReplicatedStatMapping) == 0x000020, "Wrong size on FFortReplicatedStatMapping");
static_assert(offsetof(FFortReplicatedStatMapping, StatCategory) == 0x000000, "Member 'FFortReplicatedStatMapping::StatCategory' has a wrong offset!");
static_assert(offsetof(FFortReplicatedStatMapping, DisplayName) == 0x000008, "Member 'FFortReplicatedStatMapping::DisplayName' has a wrong offset!");

// ScriptStruct FortniteGame.WorldItemAndMinMaxCount
// 0x0028 (0x0028 - 0x0000)
struct FWorldItemAndMinMaxCount final
{
public:
	struct FCurveTableRowHandle                   MinCurveTable;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxCurveTable;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               Item;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldItemAndMinMaxCount) == 0x000008, "Wrong alignment on FWorldItemAndMinMaxCount");
static_assert(sizeof(FWorldItemAndMinMaxCount) == 0x000028, "Wrong size on FWorldItemAndMinMaxCount");
static_assert(offsetof(FWorldItemAndMinMaxCount, MinCurveTable) == 0x000000, "Member 'FWorldItemAndMinMaxCount::MinCurveTable' has a wrong offset!");
static_assert(offsetof(FWorldItemAndMinMaxCount, MaxCurveTable) == 0x000010, "Member 'FWorldItemAndMinMaxCount::MaxCurveTable' has a wrong offset!");
static_assert(offsetof(FWorldItemAndMinMaxCount, Item) == 0x000020, "Member 'FWorldItemAndMinMaxCount::Item' has a wrong offset!");

// ScriptStruct FortniteGame.FortPostMaxAccountLevelRewardData
// 0x0010 (0x0018 - 0x0008)
struct FFortPostMaxAccountLevelRewardData final : public FTableRowBase
{
public:
	TArray<struct FFortRewardQuantityPair>        Rewards;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPostMaxAccountLevelRewardData) == 0x000008, "Wrong alignment on FFortPostMaxAccountLevelRewardData");
static_assert(sizeof(FFortPostMaxAccountLevelRewardData) == 0x000018, "Wrong size on FFortPostMaxAccountLevelRewardData");
static_assert(offsetof(FFortPostMaxAccountLevelRewardData, Rewards) == 0x000008, "Member 'FFortPostMaxAccountLevelRewardData::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortScriptedActionParams
// 0x0030 (0x0030 - 0x0000)
struct FFortScriptedActionParams final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortScriptedActionSource                     SourceType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              SourceItem;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SourceData;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SourceName;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortScriptedActionParams) == 0x000008, "Wrong alignment on FFortScriptedActionParams");
static_assert(sizeof(FFortScriptedActionParams) == 0x000030, "Wrong size on FFortScriptedActionParams");
static_assert(offsetof(FFortScriptedActionParams, Player) == 0x000000, "Member 'FFortScriptedActionParams::Player' has a wrong offset!");
static_assert(offsetof(FFortScriptedActionParams, SourceType) == 0x000008, "Member 'FFortScriptedActionParams::SourceType' has a wrong offset!");
static_assert(offsetof(FFortScriptedActionParams, SourceItem) == 0x000010, "Member 'FFortScriptedActionParams::SourceItem' has a wrong offset!");
static_assert(offsetof(FFortScriptedActionParams, SourceData) == 0x000018, "Member 'FFortScriptedActionParams::SourceData' has a wrong offset!");
static_assert(offsetof(FFortScriptedActionParams, SourceName) == 0x000028, "Member 'FFortScriptedActionParams::SourceName' has a wrong offset!");

// ScriptStruct FortniteGame.IronCityDifficultyInfo
// 0x0030 (0x0030 - 0x0000)
struct FIronCityDifficultyInfo final
{
public:
	int32                                         AccountLevel;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Difficulty;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StatClamp;                                         // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MissionRewards;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RewardBadgeTag;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIronCityDifficultyInfo) == 0x000008, "Wrong alignment on FIronCityDifficultyInfo");
static_assert(sizeof(FIronCityDifficultyInfo) == 0x000030, "Wrong size on FIronCityDifficultyInfo");
static_assert(offsetof(FIronCityDifficultyInfo, AccountLevel) == 0x000000, "Member 'FIronCityDifficultyInfo::AccountLevel' has a wrong offset!");
static_assert(offsetof(FIronCityDifficultyInfo, Difficulty) == 0x000004, "Member 'FIronCityDifficultyInfo::Difficulty' has a wrong offset!");
static_assert(offsetof(FIronCityDifficultyInfo, LootLevel) == 0x000008, "Member 'FIronCityDifficultyInfo::LootLevel' has a wrong offset!");
static_assert(offsetof(FIronCityDifficultyInfo, StatClamp) == 0x00000C, "Member 'FIronCityDifficultyInfo::StatClamp' has a wrong offset!");
static_assert(offsetof(FIronCityDifficultyInfo, MissionRewards) == 0x000018, "Member 'FIronCityDifficultyInfo::MissionRewards' has a wrong offset!");
static_assert(offsetof(FIronCityDifficultyInfo, RewardBadgeTag) == 0x000028, "Member 'FIronCityDifficultyInfo::RewardBadgeTag' has a wrong offset!");

// ScriptStruct FortniteGame.IronCityRowToRating
// 0x0010 (0x0010 - 0x0000)
struct FIronCityRowToRating final
{
public:
	int32                                         Difficulty;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedRating;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinRating;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRating;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIronCityRowToRating) == 0x000004, "Wrong alignment on FIronCityRowToRating");
static_assert(sizeof(FIronCityRowToRating) == 0x000010, "Wrong size on FIronCityRowToRating");
static_assert(offsetof(FIronCityRowToRating, Difficulty) == 0x000000, "Member 'FIronCityRowToRating::Difficulty' has a wrong offset!");
static_assert(offsetof(FIronCityRowToRating, RecommendedRating) == 0x000004, "Member 'FIronCityRowToRating::RecommendedRating' has a wrong offset!");
static_assert(offsetof(FIronCityRowToRating, MinRating) == 0x000008, "Member 'FIronCityRowToRating::MinRating' has a wrong offset!");
static_assert(offsetof(FIronCityRowToRating, MaxRating) == 0x00000C, "Member 'FIronCityRowToRating::MaxRating' has a wrong offset!");

// ScriptStruct FortniteGame.IronCityMatchmakingBuckets
// 0x0008 (0x0008 - 0x0000)
struct FIronCityMatchmakingBuckets final
{
public:
	int32                                         Difficulty;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedRating;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIronCityMatchmakingBuckets) == 0x000004, "Wrong alignment on FIronCityMatchmakingBuckets");
static_assert(sizeof(FIronCityMatchmakingBuckets) == 0x000008, "Wrong size on FIronCityMatchmakingBuckets");
static_assert(offsetof(FIronCityMatchmakingBuckets, Difficulty) == 0x000000, "Member 'FIronCityMatchmakingBuckets::Difficulty' has a wrong offset!");
static_assert(offsetof(FIronCityMatchmakingBuckets, RecommendedRating) == 0x000004, "Member 'FIronCityMatchmakingBuckets::RecommendedRating' has a wrong offset!");

// ScriptStruct FortniteGame.FortIronCityDifficultyData
// 0x0028 (0x0030 - 0x0008)
struct FFortIronCityDifficultyData final : public FTableRowBase
{
public:
	int32                                         DifficultyLevel;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SuggestedStatClamp;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionRewards;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RewardBadgeTag;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortIronCityDifficultyData) == 0x000008, "Wrong alignment on FFortIronCityDifficultyData");
static_assert(sizeof(FFortIronCityDifficultyData) == 0x000030, "Wrong size on FFortIronCityDifficultyData");
static_assert(offsetof(FFortIronCityDifficultyData, DifficultyLevel) == 0x000008, "Member 'FFortIronCityDifficultyData::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFortIronCityDifficultyData, LootLevel) == 0x00000C, "Member 'FFortIronCityDifficultyData::LootLevel' has a wrong offset!");
static_assert(offsetof(FFortIronCityDifficultyData, SuggestedStatClamp) == 0x000010, "Member 'FFortIronCityDifficultyData::SuggestedStatClamp' has a wrong offset!");
static_assert(offsetof(FFortIronCityDifficultyData, MissionRewards) == 0x000018, "Member 'FFortIronCityDifficultyData::MissionRewards' has a wrong offset!");
static_assert(offsetof(FFortIronCityDifficultyData, RewardBadgeTag) == 0x000028, "Member 'FFortIronCityDifficultyData::RewardBadgeTag' has a wrong offset!");

// ScriptStruct FortniteGame.UISoundFeedback
// 0x0028 (0x0028 - 0x0000)
struct FUISoundFeedback final
{
public:
	TSoftObjectPtr<class USoundBase>              UISound;                                           // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISoundFeedback) == 0x000008, "Wrong alignment on FUISoundFeedback");
static_assert(sizeof(FUISoundFeedback) == 0x000028, "Wrong size on FUISoundFeedback");
static_assert(offsetof(FUISoundFeedback, UISound) == 0x000000, "Member 'FUISoundFeedback::UISound' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerClampInfo
// 0x0010 (0x0018 - 0x0008)
struct FPlayerClampInfo final : public FTableRowBase
{
public:
	TArray<struct FAttributeClamp>                AttributeClamps;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerClampInfo) == 0x000008, "Wrong alignment on FPlayerClampInfo");
static_assert(sizeof(FPlayerClampInfo) == 0x000018, "Wrong size on FPlayerClampInfo");
static_assert(offsetof(FPlayerClampInfo, AttributeClamps) == 0x000008, "Member 'FPlayerClampInfo::AttributeClamps' has a wrong offset!");

// ScriptStruct FortniteGame.FortVehicleUseTelemetryInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFortVehicleUseTelemetryInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortVehicleUseTelemetryInfo) == 0x000008, "Wrong alignment on FFortVehicleUseTelemetryInfo");
static_assert(sizeof(FFortVehicleUseTelemetryInfo) == 0x000020, "Wrong size on FFortVehicleUseTelemetryInfo");

// ScriptStruct FortniteGame.FortPickupEntryData
// 0x0030 (0x0030 - 0x0000)
struct FFortPickupEntryData final
{
public:
	struct FInterpCurveFloat                      FloatCurve;                                        // 0x0000(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  PickupGuid;                                        // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartTime;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPickupEntryData) == 0x000008, "Wrong alignment on FFortPickupEntryData");
static_assert(sizeof(FFortPickupEntryData) == 0x000030, "Wrong size on FFortPickupEntryData");
static_assert(offsetof(FFortPickupEntryData, FloatCurve) == 0x000000, "Member 'FFortPickupEntryData::FloatCurve' has a wrong offset!");
static_assert(offsetof(FFortPickupEntryData, PickupGuid) == 0x000018, "Member 'FFortPickupEntryData::PickupGuid' has a wrong offset!");
static_assert(offsetof(FFortPickupEntryData, StartTime) == 0x000028, "Member 'FFortPickupEntryData::StartTime' has a wrong offset!");

// ScriptStruct FortniteGame.GameDifficultyInfo
// 0x0090 (0x0098 - 0x0008)
struct FGameDifficultyInfo final : public FTableRowBase
{
public:
	int32                                         ContentAccountLevel;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Difficulty;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyMatchmakingMinOverride;                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyMatchmakingMaxOverride;                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredRating;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PvPRating;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedRating;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreBonus;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LootTierGroup;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BonusLootTierGroup;                                // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DifficultyIncreaseLootTierGroup;                   // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDifficultyIncreases;                            // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ThreatDisplayName;                                 // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   ColorParamName;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultPlayerLives;                                // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerStatClampRowName;                            // 0x008C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameDifficultyInfo) == 0x000008, "Wrong alignment on FGameDifficultyInfo");
static_assert(sizeof(FGameDifficultyInfo) == 0x000098, "Wrong size on FGameDifficultyInfo");
static_assert(offsetof(FGameDifficultyInfo, ContentAccountLevel) == 0x000008, "Member 'FGameDifficultyInfo::ContentAccountLevel' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, Difficulty) == 0x00000C, "Member 'FGameDifficultyInfo::Difficulty' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, DifficultyMatchmakingMinOverride) == 0x000010, "Member 'FGameDifficultyInfo::DifficultyMatchmakingMinOverride' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, DifficultyMatchmakingMaxOverride) == 0x000014, "Member 'FGameDifficultyInfo::DifficultyMatchmakingMaxOverride' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, LootLevel) == 0x000018, "Member 'FGameDifficultyInfo::LootLevel' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, RequiredRating) == 0x00001C, "Member 'FGameDifficultyInfo::RequiredRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, PvPRating) == 0x000020, "Member 'FGameDifficultyInfo::PvPRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, RecommendedRating) == 0x000024, "Member 'FGameDifficultyInfo::RecommendedRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ScoreBonus) == 0x000028, "Member 'FGameDifficultyInfo::ScoreBonus' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, LootTierGroup) == 0x000030, "Member 'FGameDifficultyInfo::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, BonusLootTierGroup) == 0x000040, "Member 'FGameDifficultyInfo::BonusLootTierGroup' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, DifficultyIncreaseLootTierGroup) == 0x000050, "Member 'FGameDifficultyInfo::DifficultyIncreaseLootTierGroup' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, NumDifficultyIncreases) == 0x000060, "Member 'FGameDifficultyInfo::NumDifficultyIncreases' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ThreatDisplayName) == 0x000068, "Member 'FGameDifficultyInfo::ThreatDisplayName' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ColorParamName) == 0x000080, "Member 'FGameDifficultyInfo::ColorParamName' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, DefaultPlayerLives) == 0x000088, "Member 'FGameDifficultyInfo::DefaultPlayerLives' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, PlayerStatClampRowName) == 0x00008C, "Member 'FGameDifficultyInfo::PlayerStatClampRowName' has a wrong offset!");

// ScriptStruct FortniteGame.AudioDynamicSoundData
// 0x0010 (0x0010 - 0x0000)
struct FAudioDynamicSoundData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDynamicSoundOverride                         SoundOverrideType;                                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Volume;                                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioDynamicSoundData) == 0x000004, "Wrong alignment on FAudioDynamicSoundData");
static_assert(sizeof(FAudioDynamicSoundData) == 0x000010, "Wrong size on FAudioDynamicSoundData");
static_assert(offsetof(FAudioDynamicSoundData, Name) == 0x000000, "Member 'FAudioDynamicSoundData::Name' has a wrong offset!");
static_assert(offsetof(FAudioDynamicSoundData, SoundOverrideType) == 0x000008, "Member 'FAudioDynamicSoundData::SoundOverrideType' has a wrong offset!");
static_assert(offsetof(FAudioDynamicSoundData, Volume) == 0x00000C, "Member 'FAudioDynamicSoundData::Volume' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionCompletionNotification
// 0x0038 (0x0038 - 0x0000)
struct FFortMissionCompletionNotification final
{
public:
	bool                                          bWasCritical;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MissionName;                                       // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         LootGranted;                                       // 0x0018(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionCompletionNotification) == 0x000008, "Wrong alignment on FFortMissionCompletionNotification");
static_assert(sizeof(FFortMissionCompletionNotification) == 0x000038, "Wrong size on FFortMissionCompletionNotification");
static_assert(offsetof(FFortMissionCompletionNotification, bWasCritical) == 0x000000, "Member 'FFortMissionCompletionNotification::bWasCritical' has a wrong offset!");
static_assert(offsetof(FFortMissionCompletionNotification, MissionName) == 0x000008, "Member 'FFortMissionCompletionNotification::MissionName' has a wrong offset!");
static_assert(offsetof(FFortMissionCompletionNotification, LootGranted) == 0x000018, "Member 'FFortMissionCompletionNotification::LootGranted' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaDataTableSet
// 0x0030 (0x0030 - 0x0000)
struct FAthenaDataTableSet final
{
public:
	class UDataTable*                             LootTierData;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             LootPackages;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             RangedWeapons;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            GameData;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            ResourceRates;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            VehicleData;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaDataTableSet) == 0x000008, "Wrong alignment on FAthenaDataTableSet");
static_assert(sizeof(FAthenaDataTableSet) == 0x000030, "Wrong size on FAthenaDataTableSet");
static_assert(offsetof(FAthenaDataTableSet, LootTierData) == 0x000000, "Member 'FAthenaDataTableSet::LootTierData' has a wrong offset!");
static_assert(offsetof(FAthenaDataTableSet, LootPackages) == 0x000008, "Member 'FAthenaDataTableSet::LootPackages' has a wrong offset!");
static_assert(offsetof(FAthenaDataTableSet, RangedWeapons) == 0x000010, "Member 'FAthenaDataTableSet::RangedWeapons' has a wrong offset!");
static_assert(offsetof(FAthenaDataTableSet, GameData) == 0x000018, "Member 'FAthenaDataTableSet::GameData' has a wrong offset!");
static_assert(offsetof(FAthenaDataTableSet, ResourceRates) == 0x000020, "Member 'FAthenaDataTableSet::ResourceRates' has a wrong offset!");
static_assert(offsetof(FAthenaDataTableSet, VehicleData) == 0x000028, "Member 'FAthenaDataTableSet::VehicleData' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaLTMConfig
// 0x0058 (0x0058 - 0x0000)
struct FFortAthenaLTMConfig final
{
public:
	TSoftObjectPtr<class UTexture2D>              SplashImage;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FrontEndDescription;                               // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   DisabledMessage;                                   // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLTMConfig) == 0x000008, "Wrong alignment on FFortAthenaLTMConfig");
static_assert(sizeof(FFortAthenaLTMConfig) == 0x000058, "Wrong size on FFortAthenaLTMConfig");
static_assert(offsetof(FFortAthenaLTMConfig, SplashImage) == 0x000000, "Member 'FFortAthenaLTMConfig::SplashImage' has a wrong offset!");
static_assert(offsetof(FFortAthenaLTMConfig, FrontEndDescription) == 0x000028, "Member 'FFortAthenaLTMConfig::FrontEndDescription' has a wrong offset!");
static_assert(offsetof(FFortAthenaLTMConfig, DisabledMessage) == 0x000040, "Member 'FFortAthenaLTMConfig::DisabledMessage' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaServerStartAircraftStats
// 0x0040 (0x0040 - 0x0000)
struct FAthenaServerStartAircraftStats final
{
public:
	float                                         WarmupDurationSec;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayersMissing;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayersQuitting;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartedEarly;                                     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAircraftLaunchReason                         StartReason;                                       // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedPlayers;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayersReadied;                                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayersLoadingScreenDropped;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GoldenPoisTags;                                    // 0x0020(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaServerStartAircraftStats) == 0x000008, "Wrong alignment on FAthenaServerStartAircraftStats");
static_assert(sizeof(FAthenaServerStartAircraftStats) == 0x000040, "Wrong size on FAthenaServerStartAircraftStats");
static_assert(offsetof(FAthenaServerStartAircraftStats, WarmupDurationSec) == 0x000000, "Member 'FAthenaServerStartAircraftStats::WarmupDurationSec' has a wrong offset!");
static_assert(offsetof(FAthenaServerStartAircraftStats, NumPlayersMissing) == 0x000004, "Member 'FAthenaServerStartAircraftStats::NumPlayersMissing' has a wrong offset!");
static_assert(offsetof(FAthenaServerStartAircraftStats, NumPlayersQuitting) == 0x000008, "Member 'FAthenaServerStartAircraftStats::NumPlayersQuitting' has a wrong offset!");
static_assert(offsetof(FAthenaServerStartAircraftStats, bStartedEarly) == 0x00000C, "Member 'FAthenaServerStartAircraftStats::bStartedEarly' has a wrong offset!");
static_assert(offsetof(FAthenaServerStartAircraftStats, StartReason) == 0x00000D, "Member 'FAthenaServerStartAircraftStats::StartReason' has a wrong offset!");
static_assert(offsetof(FAthenaServerStartAircraftStats, ExpectedPlayers) == 0x000010, "Member 'FAthenaServerStartAircraftStats::ExpectedPlayers' has a wrong offset!");
static_assert(offsetof(FAthenaServerStartAircraftStats, PlayersReadied) == 0x000014, "Member 'FAthenaServerStartAircraftStats::PlayersReadied' has a wrong offset!");
static_assert(offsetof(FAthenaServerStartAircraftStats, PlayersLoadingScreenDropped) == 0x000018, "Member 'FAthenaServerStartAircraftStats::PlayersLoadingScreenDropped' has a wrong offset!");
static_assert(offsetof(FAthenaServerStartAircraftStats, GoldenPoisTags) == 0x000020, "Member 'FAthenaServerStartAircraftStats::GoldenPoisTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortBallooningSessionTelemetryInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FFortBallooningSessionTelemetryInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBallooningSessionTelemetryInfo) == 0x000004, "Wrong alignment on FFortBallooningSessionTelemetryInfo");
static_assert(sizeof(FFortBallooningSessionTelemetryInfo) == 0x000010, "Wrong size on FFortBallooningSessionTelemetryInfo");

// ScriptStruct FortniteGame.ClearAreaParams
// 0x0038 (0x0038 - 0x0000)
struct FClearAreaParams final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  IgnoreTags;                                        // 0x0018(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FClearAreaParams) == 0x000008, "Wrong alignment on FClearAreaParams");
static_assert(sizeof(FClearAreaParams) == 0x000038, "Wrong size on FClearAreaParams");
static_assert(offsetof(FClearAreaParams, Location) == 0x000000, "Member 'FClearAreaParams::Location' has a wrong offset!");
static_assert(offsetof(FClearAreaParams, CapsuleHalfHeight) == 0x00000C, "Member 'FClearAreaParams::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FClearAreaParams, CapsuleRadius) == 0x000010, "Member 'FClearAreaParams::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FClearAreaParams, IgnoreTags) == 0x000018, "Member 'FClearAreaParams::IgnoreTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortGamepadAdvancedOptions
// 0x0038 (0x0038 - 0x0000)
struct FFortGamepadAdvancedOptions final
{
public:
	uint32                                        LookHorizontalSpeed;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookVerticalSpeed;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookHorizontalSpeedAds;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookVerticalSpeedAds;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookHorizontalBoostSpeed;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookVerticalBoostSpeed;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookBoostAccelerationTime;                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookHorizontalBoostSpeedAds;                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LookVerticalBoostSpeedAds;                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookBoostAccelerationTimeAds;                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookEaseTime;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGamepadLookInputCurve                    LookInputCurve;                                    // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStabilizeLookInput;                               // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRadialLookRates;                               // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        AimAssistStrength;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLegacyControls;                                // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGamepadAdvancedOptions) == 0x000004, "Wrong alignment on FFortGamepadAdvancedOptions");
static_assert(sizeof(FFortGamepadAdvancedOptions) == 0x000038, "Wrong size on FFortGamepadAdvancedOptions");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookHorizontalSpeed) == 0x000000, "Member 'FFortGamepadAdvancedOptions::LookHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookVerticalSpeed) == 0x000004, "Member 'FFortGamepadAdvancedOptions::LookVerticalSpeed' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookHorizontalSpeedAds) == 0x000008, "Member 'FFortGamepadAdvancedOptions::LookHorizontalSpeedAds' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookVerticalSpeedAds) == 0x00000C, "Member 'FFortGamepadAdvancedOptions::LookVerticalSpeedAds' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookHorizontalBoostSpeed) == 0x000010, "Member 'FFortGamepadAdvancedOptions::LookHorizontalBoostSpeed' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookVerticalBoostSpeed) == 0x000014, "Member 'FFortGamepadAdvancedOptions::LookVerticalBoostSpeed' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookBoostAccelerationTime) == 0x000018, "Member 'FFortGamepadAdvancedOptions::LookBoostAccelerationTime' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookHorizontalBoostSpeedAds) == 0x00001C, "Member 'FFortGamepadAdvancedOptions::LookHorizontalBoostSpeedAds' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookVerticalBoostSpeedAds) == 0x000020, "Member 'FFortGamepadAdvancedOptions::LookVerticalBoostSpeedAds' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookBoostAccelerationTimeAds) == 0x000024, "Member 'FFortGamepadAdvancedOptions::LookBoostAccelerationTimeAds' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookEaseTime) == 0x000028, "Member 'FFortGamepadAdvancedOptions::LookEaseTime' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, LookInputCurve) == 0x00002C, "Member 'FFortGamepadAdvancedOptions::LookInputCurve' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, bStabilizeLookInput) == 0x00002D, "Member 'FFortGamepadAdvancedOptions::bStabilizeLookInput' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, bUseRadialLookRates) == 0x00002E, "Member 'FFortGamepadAdvancedOptions::bUseRadialLookRates' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, AimAssistStrength) == 0x000030, "Member 'FFortGamepadAdvancedOptions::AimAssistStrength' has a wrong offset!");
static_assert(offsetof(FFortGamepadAdvancedOptions, bUseLegacyControls) == 0x000034, "Member 'FFortGamepadAdvancedOptions::bUseLegacyControls' has a wrong offset!");

// ScriptStruct FortniteGame.FortGamepadUserOptions
// 0x003C (0x003C - 0x0000)
struct FFortGamepadUserOptions final
{
public:
	struct FFortGamepadBasicOptions               Basic;                                             // 0x0000(0x0003)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGamepadAdvancedOptions            Advanced;                                          // 0x0004(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGamepadUserOptions) == 0x000004, "Wrong alignment on FFortGamepadUserOptions");
static_assert(sizeof(FFortGamepadUserOptions) == 0x00003C, "Wrong size on FFortGamepadUserOptions");
static_assert(offsetof(FFortGamepadUserOptions, Basic) == 0x000000, "Member 'FFortGamepadUserOptions::Basic' has a wrong offset!");
static_assert(offsetof(FFortGamepadUserOptions, Advanced) == 0x000004, "Member 'FFortGamepadUserOptions::Advanced' has a wrong offset!");

// ScriptStruct FortniteGame.ZiplinePawnState
// 0x0028 (0x0028 - 0x0000)
struct FZiplinePawnState final
{
public:
	class AFortAthenaZipline*                     Zipline;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsZiplining;                                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumped;                                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AuthoritativeValue;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketOffset;                                      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeZipliningBegan;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeZipliningEndedFromJump;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZiplinePawnState) == 0x000008, "Wrong alignment on FZiplinePawnState");
static_assert(sizeof(FZiplinePawnState) == 0x000028, "Wrong size on FZiplinePawnState");
static_assert(offsetof(FZiplinePawnState, Zipline) == 0x000000, "Member 'FZiplinePawnState::Zipline' has a wrong offset!");
static_assert(offsetof(FZiplinePawnState, bIsZiplining) == 0x000008, "Member 'FZiplinePawnState::bIsZiplining' has a wrong offset!");
static_assert(offsetof(FZiplinePawnState, bJumped) == 0x000009, "Member 'FZiplinePawnState::bJumped' has a wrong offset!");
static_assert(offsetof(FZiplinePawnState, AuthoritativeValue) == 0x00000C, "Member 'FZiplinePawnState::AuthoritativeValue' has a wrong offset!");
static_assert(offsetof(FZiplinePawnState, SocketOffset) == 0x000010, "Member 'FZiplinePawnState::SocketOffset' has a wrong offset!");
static_assert(offsetof(FZiplinePawnState, TimeZipliningBegan) == 0x00001C, "Member 'FZiplinePawnState::TimeZipliningBegan' has a wrong offset!");
static_assert(offsetof(FZiplinePawnState, TimeZipliningEndedFromJump) == 0x000020, "Member 'FZiplinePawnState::TimeZipliningEndedFromJump' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityCost
// 0x0038 (0x0038 - 0x0000)
struct FFortAbilityCost final
{
public:
	EFortAbilityCostSource                        CostSource;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         CostValue;                                         // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyApplyCostOnHit;                               // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAbilityCost) == 0x000008, "Wrong alignment on FFortAbilityCost");
static_assert(sizeof(FFortAbilityCost) == 0x000038, "Wrong size on FFortAbilityCost");
static_assert(offsetof(FFortAbilityCost, CostSource) == 0x000000, "Member 'FFortAbilityCost::CostSource' has a wrong offset!");
static_assert(offsetof(FFortAbilityCost, CostValue) == 0x000008, "Member 'FFortAbilityCost::CostValue' has a wrong offset!");
static_assert(offsetof(FFortAbilityCost, ItemDefinition) == 0x000028, "Member 'FFortAbilityCost::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortAbilityCost, bOnlyApplyCostOnHit) == 0x000030, "Member 'FFortAbilityCost::bOnlyApplyCostOnHit' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayAbilityBehaviorDistanceData
// 0x0028 (0x0028 - 0x0000)
struct FFortGameplayAbilityBehaviorDistanceData final
{
public:
	struct FGameplayTagContainer                  DistanceDataTag;                                   // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayAbilityBehaviorDistanceData) == 0x000008, "Wrong alignment on FFortGameplayAbilityBehaviorDistanceData");
static_assert(sizeof(FFortGameplayAbilityBehaviorDistanceData) == 0x000028, "Wrong size on FFortGameplayAbilityBehaviorDistanceData");
static_assert(offsetof(FFortGameplayAbilityBehaviorDistanceData, DistanceDataTag) == 0x000000, "Member 'FFortGameplayAbilityBehaviorDistanceData::DistanceDataTag' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityBehaviorDistanceData, Distance) == 0x000020, "Member 'FFortGameplayAbilityBehaviorDistanceData::Distance' has a wrong offset!");

// ScriptStruct FortniteGame.FortParticleSystemParamBucket
// 0x0010 (0x0010 - 0x0000)
struct FFortParticleSystemParamBucket final
{
public:
	TArray<struct FParticleSysParam>              Parameters;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortParticleSystemParamBucket) == 0x000008, "Wrong alignment on FFortParticleSystemParamBucket");
static_assert(sizeof(FFortParticleSystemParamBucket) == 0x000010, "Wrong size on FFortParticleSystemParamBucket");
static_assert(offsetof(FFortParticleSystemParamBucket, Parameters) == 0x000000, "Member 'FFortParticleSystemParamBucket::Parameters' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectContainerSpec
// 0x0088 (0x0088 - 0x0000)
struct FFortGameplayEffectContainerSpec final
{
public:
	struct FFortAbilityTargetSelectionList        TargetSelection;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpecHandle>      TargetGameplayEffectSpecs;                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpecHandle>      OwnerGameplayEffectSpecs;                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivationCues;                                    // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ImpactCues;                                        // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bOverrideChargeMagnitude;                          // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeMagnitudeOverrideValue;                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayEffectContainerSpec) == 0x000008, "Wrong alignment on FFortGameplayEffectContainerSpec");
static_assert(sizeof(FFortGameplayEffectContainerSpec) == 0x000088, "Wrong size on FFortGameplayEffectContainerSpec");
static_assert(offsetof(FFortGameplayEffectContainerSpec, TargetSelection) == 0x000000, "Member 'FFortGameplayEffectContainerSpec::TargetSelection' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, TargetGameplayEffectSpecs) == 0x000020, "Member 'FFortGameplayEffectContainerSpec::TargetGameplayEffectSpecs' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, OwnerGameplayEffectSpecs) == 0x000030, "Member 'FFortGameplayEffectContainerSpec::OwnerGameplayEffectSpecs' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, ActivationCues) == 0x000040, "Member 'FFortGameplayEffectContainerSpec::ActivationCues' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, ImpactCues) == 0x000060, "Member 'FFortGameplayEffectContainerSpec::ImpactCues' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, bOverrideChargeMagnitude) == 0x000080, "Member 'FFortGameplayEffectContainerSpec::bOverrideChargeMagnitude' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, ChargeMagnitudeOverrideValue) == 0x000084, "Member 'FFortGameplayEffectContainerSpec::ChargeMagnitudeOverrideValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortRespawnData
// 0x0020 (0x0020 - 0x0000)
struct FFortRespawnData final
{
public:
	bool                                          bRespawnDataAvailable;                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientIsReady;                                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServerIsReady;                                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RespawnLocation;                                   // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RespawnRotation;                                   // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RespawnCameraDistance;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRespawnData) == 0x000004, "Wrong alignment on FFortRespawnData");
static_assert(sizeof(FFortRespawnData) == 0x000020, "Wrong size on FFortRespawnData");
static_assert(offsetof(FFortRespawnData, bRespawnDataAvailable) == 0x000000, "Member 'FFortRespawnData::bRespawnDataAvailable' has a wrong offset!");
static_assert(offsetof(FFortRespawnData, bClientIsReady) == 0x000001, "Member 'FFortRespawnData::bClientIsReady' has a wrong offset!");
static_assert(offsetof(FFortRespawnData, bServerIsReady) == 0x000002, "Member 'FFortRespawnData::bServerIsReady' has a wrong offset!");
static_assert(offsetof(FFortRespawnData, RespawnLocation) == 0x000004, "Member 'FFortRespawnData::RespawnLocation' has a wrong offset!");
static_assert(offsetof(FFortRespawnData, RespawnRotation) == 0x000010, "Member 'FFortRespawnData::RespawnRotation' has a wrong offset!");
static_assert(offsetof(FFortRespawnData, RespawnCameraDistance) == 0x00001C, "Member 'FFortRespawnData::RespawnCameraDistance' has a wrong offset!");

// ScriptStruct FortniteGame.TurnTransitionData
// 0x0048 (0x0048 - 0x0000)
struct FTurnTransitionData final
{
public:
	class FName                                   MontageSectionName;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinYawAngle;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxYawAngle;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnRate;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0018(0x0020)(Edit, NativeAccessSpecifierPublic)
	int32                                         PriorityLevel;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTurnFloatRange                        SpeedConstraintRange;                              // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableSpeedConstraint;                            // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipTransitionInCrowd;                            // 0x0045(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTurnTransitionData) == 0x000008, "Wrong alignment on FTurnTransitionData");
static_assert(sizeof(FTurnTransitionData) == 0x000048, "Wrong size on FTurnTransitionData");
static_assert(offsetof(FTurnTransitionData, MontageSectionName) == 0x000000, "Member 'FTurnTransitionData::MontageSectionName' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, MinYawAngle) == 0x000008, "Member 'FTurnTransitionData::MinYawAngle' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, MaxYawAngle) == 0x00000C, "Member 'FTurnTransitionData::MaxYawAngle' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, TurnRate) == 0x000010, "Member 'FTurnTransitionData::TurnRate' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, RequiredGameplayTags) == 0x000018, "Member 'FTurnTransitionData::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, PriorityLevel) == 0x000038, "Member 'FTurnTransitionData::PriorityLevel' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, SpeedConstraintRange) == 0x00003C, "Member 'FTurnTransitionData::SpeedConstraintRange' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, bEnableSpeedConstraint) == 0x000044, "Member 'FTurnTransitionData::bEnableSpeedConstraint' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, bSkipTransitionInCrowd) == 0x000045, "Member 'FTurnTransitionData::bSkipTransitionInCrowd' has a wrong offset!");

// ScriptStruct FortniteGame.FortPawnSpinParams
// 0x0008 (0x0008 - 0x0000)
struct FFortPawnSpinParams final
{
public:
	float                                         LocalSpin;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlySpinWhenFalling;                              // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPawnSpinParams) == 0x000004, "Wrong alignment on FFortPawnSpinParams");
static_assert(sizeof(FFortPawnSpinParams) == 0x000008, "Wrong size on FFortPawnSpinParams");
static_assert(offsetof(FFortPawnSpinParams, LocalSpin) == 0x000000, "Member 'FFortPawnSpinParams::LocalSpin' has a wrong offset!");
static_assert(offsetof(FFortPawnSpinParams, bOnlySpinWhenFalling) == 0x000004, "Member 'FFortPawnSpinParams::bOnlySpinWhenFalling' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayCueCameraShakeInfo
// 0x0028 (0x0028 - 0x0000)
struct FFortGameplayCueCameraShakeInfo final
{
public:
	TSubclassOf<class UCameraShake>               Shake;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraAnimPlaySpace                          PlaySpace;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               UserPlaySpaceRotation;                             // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAlwaysPlayOnTarget;                               // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCalculateUserPlaySpaceRotationFromLocation;       // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnRemove;                                   // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGameplayCueAOEInfo                Falloff;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayCueCameraShakeInfo) == 0x000008, "Wrong alignment on FFortGameplayCueCameraShakeInfo");
static_assert(sizeof(FFortGameplayCueCameraShakeInfo) == 0x000028, "Wrong size on FFortGameplayCueCameraShakeInfo");
static_assert(offsetof(FFortGameplayCueCameraShakeInfo, Shake) == 0x000000, "Member 'FFortGameplayCueCameraShakeInfo::Shake' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueCameraShakeInfo, Scale) == 0x000008, "Member 'FFortGameplayCueCameraShakeInfo::Scale' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueCameraShakeInfo, PlaySpace) == 0x00000C, "Member 'FFortGameplayCueCameraShakeInfo::PlaySpace' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueCameraShakeInfo, UserPlaySpaceRotation) == 0x000010, "Member 'FFortGameplayCueCameraShakeInfo::UserPlaySpaceRotation' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueCameraShakeInfo, bAlwaysPlayOnTarget) == 0x00001C, "Member 'FFortGameplayCueCameraShakeInfo::bAlwaysPlayOnTarget' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueCameraShakeInfo, bCalculateUserPlaySpaceRotationFromLocation) == 0x00001D, "Member 'FFortGameplayCueCameraShakeInfo::bCalculateUserPlaySpaceRotationFromLocation' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueCameraShakeInfo, bCancelOnRemove) == 0x00001E, "Member 'FFortGameplayCueCameraShakeInfo::bCancelOnRemove' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueCameraShakeInfo, Falloff) == 0x000020, "Member 'FFortGameplayCueCameraShakeInfo::Falloff' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayCueDecalInfo
// 0x0070 (0x0070 - 0x0000)
struct FFortGameplayCueDecalInfo final
{
public:
	struct FFortGameplayCueSpawnCondition         Condition;                                         // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortGameplayCueAttachInfo             Attachment;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bOverrideCondition : 1;                            // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideAttachment : 1;                           // 0x0058(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideFadeOut : 1;                              // 0x0058(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ADecalActor>                Decal;                                             // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutStartDelay;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayCueDecalInfo) == 0x000008, "Wrong alignment on FFortGameplayCueDecalInfo");
static_assert(sizeof(FFortGameplayCueDecalInfo) == 0x000070, "Wrong size on FFortGameplayCueDecalInfo");
static_assert(offsetof(FFortGameplayCueDecalInfo, Condition) == 0x000000, "Member 'FFortGameplayCueDecalInfo::Condition' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueDecalInfo, Attachment) == 0x000030, "Member 'FFortGameplayCueDecalInfo::Attachment' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueDecalInfo, Decal) == 0x000060, "Member 'FFortGameplayCueDecalInfo::Decal' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueDecalInfo, FadeOutStartDelay) == 0x000068, "Member 'FFortGameplayCueDecalInfo::FadeOutStartDelay' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueDecalInfo, FadeOutDuration) == 0x00006C, "Member 'FFortGameplayCueDecalInfo::FadeOutDuration' has a wrong offset!");

// ScriptStruct FortniteGame.FortBurstEffectData
// 0x00F8 (0x00F8 - 0x0000)
struct FFortBurstEffectData final
{
public:
	TArray<struct FFortGameplayCueParticleInfo>   BurstParticles;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortGameplayCueAudioInfo>      BurstSounds;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortGameplayCueCameraShakeInfo        BurstCameraShake;                                  // 0x0020(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortGameplayCueCameraLensEffectInfo   BurstCameraLensEffect;                             // 0x0048(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortGameplayCueForceFeedbackInfo      BurstForceFeedbackEffect;                          // 0x0060(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortGameplayCueDecalInfo              BurstDecal;                                        // 0x0088(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBurstEffectData) == 0x000008, "Wrong alignment on FFortBurstEffectData");
static_assert(sizeof(FFortBurstEffectData) == 0x0000F8, "Wrong size on FFortBurstEffectData");
static_assert(offsetof(FFortBurstEffectData, BurstParticles) == 0x000000, "Member 'FFortBurstEffectData::BurstParticles' has a wrong offset!");
static_assert(offsetof(FFortBurstEffectData, BurstSounds) == 0x000010, "Member 'FFortBurstEffectData::BurstSounds' has a wrong offset!");
static_assert(offsetof(FFortBurstEffectData, BurstCameraShake) == 0x000020, "Member 'FFortBurstEffectData::BurstCameraShake' has a wrong offset!");
static_assert(offsetof(FFortBurstEffectData, BurstCameraLensEffect) == 0x000048, "Member 'FFortBurstEffectData::BurstCameraLensEffect' has a wrong offset!");
static_assert(offsetof(FFortBurstEffectData, BurstForceFeedbackEffect) == 0x000060, "Member 'FFortBurstEffectData::BurstForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(FFortBurstEffectData, BurstDecal) == 0x000088, "Member 'FFortBurstEffectData::BurstDecal' has a wrong offset!");

// ScriptStruct FortniteGame.FortHeroTierAbilityKit
// 0x0030 (0x0030 - 0x0000)
struct FFortHeroTierAbilityKit final
{
public:
	TSoftObjectPtr<class UFortAbilityKit>         GrantedAbilityKit;                                 // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   MinimumHeroRarity;                                 // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortHeroTierAbilityKit) == 0x000008, "Wrong alignment on FFortHeroTierAbilityKit");
static_assert(sizeof(FFortHeroTierAbilityKit) == 0x000030, "Wrong size on FFortHeroTierAbilityKit");
static_assert(offsetof(FFortHeroTierAbilityKit, GrantedAbilityKit) == 0x000000, "Member 'FFortHeroTierAbilityKit::GrantedAbilityKit' has a wrong offset!");
static_assert(offsetof(FFortHeroTierAbilityKit, MinimumHeroRarity) == 0x000028, "Member 'FFortHeroTierAbilityKit::MinimumHeroRarity' has a wrong offset!");

// ScriptStruct FortniteGame.MegaStormCircle
// 0x0060 (0x0060 - 0x0000)
struct FMegaStormCircle final
{
public:
	struct FBuildingSupportCellIndex              GridCenter;                                        // 0x0000(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCellsFromCenter;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentQuadrant;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuildingSupportCellIndex              GridAt;                                            // 0x0014(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RadiusInGridCells;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XAdvanceAccumulation;                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YAdvanceAccumulation;                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridRadiusSquaredX4;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlots;                                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldCenter;                                       // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldRadius;                                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class ABuildingSMActor>> ActorsInMegaStorm;                                 // 0x0048(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EMegaStormState                               MegaStormState;                                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMegaStormCircle) == 0x000008, "Wrong alignment on FMegaStormCircle");
static_assert(sizeof(FMegaStormCircle) == 0x000060, "Wrong size on FMegaStormCircle");
static_assert(offsetof(FMegaStormCircle, GridCenter) == 0x000000, "Member 'FMegaStormCircle::GridCenter' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, NumCellsFromCenter) == 0x00000C, "Member 'FMegaStormCircle::NumCellsFromCenter' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, CurrentQuadrant) == 0x000010, "Member 'FMegaStormCircle::CurrentQuadrant' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, GridAt) == 0x000014, "Member 'FMegaStormCircle::GridAt' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, RadiusInGridCells) == 0x000020, "Member 'FMegaStormCircle::RadiusInGridCells' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, XAdvanceAccumulation) == 0x000024, "Member 'FMegaStormCircle::XAdvanceAccumulation' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, YAdvanceAccumulation) == 0x000028, "Member 'FMegaStormCircle::YAdvanceAccumulation' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, GridRadiusSquaredX4) == 0x00002C, "Member 'FMegaStormCircle::GridRadiusSquaredX4' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, NumPlots) == 0x000030, "Member 'FMegaStormCircle::NumPlots' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, WorldCenter) == 0x000034, "Member 'FMegaStormCircle::WorldCenter' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, WorldRadius) == 0x000040, "Member 'FMegaStormCircle::WorldRadius' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, ActorsInMegaStorm) == 0x000048, "Member 'FMegaStormCircle::ActorsInMegaStorm' has a wrong offset!");
static_assert(offsetof(FMegaStormCircle, MegaStormState) == 0x000058, "Member 'FMegaStormCircle::MegaStormState' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayCueSpawnResult
// 0x0038 (0x0038 - 0x0000)
struct FFortGameplayCueSpawnResult final
{
public:
	TArray<class UParticleSystemComponent*>       ParticleComponents;                                // 0x0000(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UAudioComponent*>                AudioComponents;                                   // 0x0010(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UCameraShake*                           CameraShake;                                       // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEmitterCameraLensEffectBase*           CameraLensEffect;                                  // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADecalActor*                            DecalActor;                                        // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayCueSpawnResult) == 0x000008, "Wrong alignment on FFortGameplayCueSpawnResult");
static_assert(sizeof(FFortGameplayCueSpawnResult) == 0x000038, "Wrong size on FFortGameplayCueSpawnResult");
static_assert(offsetof(FFortGameplayCueSpawnResult, ParticleComponents) == 0x000000, "Member 'FFortGameplayCueSpawnResult::ParticleComponents' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueSpawnResult, AudioComponents) == 0x000010, "Member 'FFortGameplayCueSpawnResult::AudioComponents' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueSpawnResult, CameraShake) == 0x000020, "Member 'FFortGameplayCueSpawnResult::CameraShake' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueSpawnResult, CameraLensEffect) == 0x000028, "Member 'FFortGameplayCueSpawnResult::CameraLensEffect' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueSpawnResult, DecalActor) == 0x000030, "Member 'FFortGameplayCueSpawnResult::DecalActor' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayCueAudioInfo_Looping
// 0x0008 (0x0070 - 0x0068)
struct FFortGameplayCueAudioInfo_Looping final : public FFortGameplayCueAudioInfo
{
public:
	float                                         LoopingSoundFadeOutDuration;                       // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopingSoundVolumeLevel;                           // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayCueAudioInfo_Looping) == 0x000008, "Wrong alignment on FFortGameplayCueAudioInfo_Looping");
static_assert(sizeof(FFortGameplayCueAudioInfo_Looping) == 0x000070, "Wrong size on FFortGameplayCueAudioInfo_Looping");
static_assert(offsetof(FFortGameplayCueAudioInfo_Looping, LoopingSoundFadeOutDuration) == 0x000068, "Member 'FFortGameplayCueAudioInfo_Looping::LoopingSoundFadeOutDuration' has a wrong offset!");
static_assert(offsetof(FFortGameplayCueAudioInfo_Looping, LoopingSoundVolumeLevel) == 0x00006C, "Member 'FFortGameplayCueAudioInfo_Looping::LoopingSoundVolumeLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayMessageTriggerList
// 0x0010 (0x0010 - 0x0000)
struct FFortGameplayMessageTriggerList final
{
public:
	TArray<class UFortGameplayTriggerMessageComponent*> Triggers;                                          // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayMessageTriggerList) == 0x000008, "Wrong alignment on FFortGameplayMessageTriggerList");
static_assert(sizeof(FFortGameplayMessageTriggerList) == 0x000010, "Wrong size on FFortGameplayMessageTriggerList");
static_assert(offsetof(FFortGameplayMessageTriggerList, Triggers) == 0x000000, "Member 'FFortGameplayMessageTriggerList::Triggers' has a wrong offset!");

// ScriptStruct FortniteGame.GiftHistory
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FGiftHistory final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGiftHistory) == 0x000004, "Wrong alignment on FGiftHistory");
static_assert(sizeof(FGiftHistory) == 0x000008, "Wrong size on FGiftHistory");

// ScriptStruct FortniteGame.FortEncounterMutatorReplacedTag
// 0x0040 (0x0040 - 0x0000)
struct FFortEncounterMutatorReplacedTag final
{
public:
	struct FGameplayTagContainer                  TagsToRemove;                                      // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToAdd;                                         // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterMutatorReplacedTag) == 0x000008, "Wrong alignment on FFortEncounterMutatorReplacedTag");
static_assert(sizeof(FFortEncounterMutatorReplacedTag) == 0x000040, "Wrong size on FFortEncounterMutatorReplacedTag");
static_assert(offsetof(FFortEncounterMutatorReplacedTag, TagsToRemove) == 0x000000, "Member 'FFortEncounterMutatorReplacedTag::TagsToRemove' has a wrong offset!");
static_assert(offsetof(FFortEncounterMutatorReplacedTag, TagsToAdd) == 0x000020, "Member 'FFortEncounterMutatorReplacedTag::TagsToAdd' has a wrong offset!");

// ScriptStruct FortniteGame.MeshServiceMetadata
// 0x0001 (0x0001 - 0x0000)
struct FMeshServiceMetadata final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeshServiceMetadata) == 0x000001, "Wrong alignment on FMeshServiceMetadata");
static_assert(sizeof(FMeshServiceMetadata) == 0x000001, "Wrong size on FMeshServiceMetadata");

// ScriptStruct FortniteGame.FortDisconnectedPlayerReservation
// 0x0038 (0x0038 - 0x0000)
struct FFortDisconnectedPlayerReservation final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0008(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDisconnectedPlayerReservation) == 0x000008, "Wrong alignment on FFortDisconnectedPlayerReservation");
static_assert(sizeof(FFortDisconnectedPlayerReservation) == 0x000038, "Wrong size on FFortDisconnectedPlayerReservation");
static_assert(offsetof(FFortDisconnectedPlayerReservation, SessionName) == 0x000000, "Member 'FFortDisconnectedPlayerReservation::SessionName' has a wrong offset!");
static_assert(offsetof(FFortDisconnectedPlayerReservation, PlayerID) == 0x000008, "Member 'FFortDisconnectedPlayerReservation::PlayerID' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseNodeState
// 0x0008 (0x0008 - 0x0000)
struct FHomebaseNodeState final
{
public:
	bool                                          bIsOwned;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAreCostsPayable;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseNodeState) == 0x000004, "Wrong alignment on FHomebaseNodeState");
static_assert(sizeof(FHomebaseNodeState) == 0x000008, "Wrong size on FHomebaseNodeState");
static_assert(offsetof(FHomebaseNodeState, bIsOwned) == 0x000000, "Member 'FHomebaseNodeState::bIsOwned' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeState, bAreCostsPayable) == 0x000001, "Member 'FHomebaseNodeState::bAreCostsPayable' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeState, Level) == 0x000004, "Member 'FHomebaseNodeState::Level' has a wrong offset!");

// ScriptStruct FortniteGame.FortHostSessionParams
// 0x000C (0x000C - 0x0000)
struct FFortHostSessionParams final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControllerId;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHostSessionParams) == 0x000004, "Wrong alignment on FFortHostSessionParams");
static_assert(sizeof(FFortHostSessionParams) == 0x00000C, "Wrong size on FFortHostSessionParams");
static_assert(offsetof(FFortHostSessionParams, SessionName) == 0x000000, "Member 'FFortHostSessionParams::SessionName' has a wrong offset!");
static_assert(offsetof(FFortHostSessionParams, ControllerId) == 0x000008, "Member 'FFortHostSessionParams::ControllerId' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistStreamedLevelData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPlaylistStreamedLevelData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsFinishedStreaming;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaylistStreamedLevelData) == 0x000008, "Wrong alignment on FPlaylistStreamedLevelData");
static_assert(sizeof(FPlaylistStreamedLevelData) == 0x000018, "Wrong size on FPlaylistStreamedLevelData");
static_assert(offsetof(FPlaylistStreamedLevelData, bIsFinishedStreaming) == 0x000010, "Member 'FPlaylistStreamedLevelData::bIsFinishedStreaming' has a wrong offset!");

// ScriptStruct FortniteGame.HordeDifficultyTierInfo
// 0x0010 (0x0010 - 0x0000)
struct FHordeDifficultyTierInfo final
{
public:
	class FName                                   DifficultyTierName;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortQuestItemDefinition*               QuestPrerequisite;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHordeDifficultyTierInfo) == 0x000008, "Wrong alignment on FHordeDifficultyTierInfo");
static_assert(sizeof(FHordeDifficultyTierInfo) == 0x000010, "Wrong size on FHordeDifficultyTierInfo");
static_assert(offsetof(FHordeDifficultyTierInfo, DifficultyTierName) == 0x000000, "Member 'FHordeDifficultyTierInfo::DifficultyTierName' has a wrong offset!");
static_assert(offsetof(FHordeDifficultyTierInfo, QuestPrerequisite) == 0x000008, "Member 'FHordeDifficultyTierInfo::QuestPrerequisite' has a wrong offset!");

// ScriptStruct FortniteGame.FortScalabilityModeSettings
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FFortScalabilityModeSettings final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortScalabilityModeSettings) == 0x000008, "Wrong alignment on FFortScalabilityModeSettings");
static_assert(sizeof(FFortScalabilityModeSettings) == 0x000050, "Wrong size on FFortScalabilityModeSettings");

// ScriptStruct FortniteGame.GroundSplineSpeedData
// 0x0014 (0x0014 - 0x0000)
struct FGroundSplineSpeedData final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawSpeed;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawAcceleration;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroundSplineSpeedData) == 0x000004, "Wrong alignment on FGroundSplineSpeedData");
static_assert(sizeof(FGroundSplineSpeedData) == 0x000014, "Wrong size on FGroundSplineSpeedData");
static_assert(offsetof(FGroundSplineSpeedData, Speed) == 0x000000, "Member 'FGroundSplineSpeedData::Speed' has a wrong offset!");
static_assert(offsetof(FGroundSplineSpeedData, Acceleration) == 0x000004, "Member 'FGroundSplineSpeedData::Acceleration' has a wrong offset!");
static_assert(offsetof(FGroundSplineSpeedData, YawSpeed) == 0x000008, "Member 'FGroundSplineSpeedData::YawSpeed' has a wrong offset!");
static_assert(offsetof(FGroundSplineSpeedData, YawAcceleration) == 0x00000C, "Member 'FGroundSplineSpeedData::YawAcceleration' has a wrong offset!");
static_assert(offsetof(FGroundSplineSpeedData, Timestamp) == 0x000010, "Member 'FGroundSplineSpeedData::Timestamp' has a wrong offset!");

// ScriptStruct FortniteGame.SavedCredentials
// 0x0028 (0x0028 - 0x0000)
struct FSavedCredentials final
{
public:
	ESavedAccountType                             Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedCredentials) == 0x000008, "Wrong alignment on FSavedCredentials");
static_assert(sizeof(FSavedCredentials) == 0x000028, "Wrong size on FSavedCredentials");
static_assert(offsetof(FSavedCredentials, Type) == 0x000000, "Member 'FSavedCredentials::Type' has a wrong offset!");
static_assert(offsetof(FSavedCredentials, ID) == 0x000008, "Member 'FSavedCredentials::ID' has a wrong offset!");
static_assert(offsetof(FSavedCredentials, Token) == 0x000018, "Member 'FSavedCredentials::Token' has a wrong offset!");

// ScriptStruct FortniteGame.FortPartySquad
// 0x0010 (0x0010 - 0x0000)
struct FFortPartySquad final
{
public:
	TArray<TWeakObjectPtr<class UFortPartyMember>> SquadMembers;                                      // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPartySquad) == 0x000008, "Wrong alignment on FFortPartySquad");
static_assert(sizeof(FFortPartySquad) == 0x000010, "Wrong size on FFortPartySquad");
static_assert(offsetof(FFortPartySquad, SquadMembers) == 0x000000, "Member 'FFortPartySquad::SquadMembers' has a wrong offset!");

// ScriptStruct FortniteGame.KairosSubmitLogOptions
// 0x0030 (0x0030 - 0x0000)
struct FKairosSubmitLogOptions final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubmitLogs;                                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LogTailKb;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogSubmitChance;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SubmitErrors;                                      // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKairosSubmitLogOptions) == 0x000008, "Wrong alignment on FKairosSubmitLogOptions");
static_assert(sizeof(FKairosSubmitLogOptions) == 0x000030, "Wrong size on FKairosSubmitLogOptions");
static_assert(offsetof(FKairosSubmitLogOptions, Type) == 0x000000, "Member 'FKairosSubmitLogOptions::Type' has a wrong offset!");
static_assert(offsetof(FKairosSubmitLogOptions, bSubmitLogs) == 0x000010, "Member 'FKairosSubmitLogOptions::bSubmitLogs' has a wrong offset!");
static_assert(offsetof(FKairosSubmitLogOptions, LogTailKb) == 0x000014, "Member 'FKairosSubmitLogOptions::LogTailKb' has a wrong offset!");
static_assert(offsetof(FKairosSubmitLogOptions, LogSubmitChance) == 0x000018, "Member 'FKairosSubmitLogOptions::LogSubmitChance' has a wrong offset!");
static_assert(offsetof(FKairosSubmitLogOptions, SubmitErrors) == 0x000020, "Member 'FKairosSubmitLogOptions::SubmitErrors' has a wrong offset!");

// ScriptStruct FortniteGame.LogoutLogSubmitOptions
// 0x0020 (0x0020 - 0x0000)
struct FLogoutLogSubmitOptions final
{
public:
	bool                                          bSubmitLogs;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSubmitLogsDuringLogin;                            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LogTailKb;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LogSubmitChance;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         DoNotUploadReasons;                                // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FLogoutLogSubmitOptions) == 0x000008, "Wrong alignment on FLogoutLogSubmitOptions");
static_assert(sizeof(FLogoutLogSubmitOptions) == 0x000020, "Wrong size on FLogoutLogSubmitOptions");
static_assert(offsetof(FLogoutLogSubmitOptions, bSubmitLogs) == 0x000000, "Member 'FLogoutLogSubmitOptions::bSubmitLogs' has a wrong offset!");
static_assert(offsetof(FLogoutLogSubmitOptions, bSubmitLogsDuringLogin) == 0x000001, "Member 'FLogoutLogSubmitOptions::bSubmitLogsDuringLogin' has a wrong offset!");
static_assert(offsetof(FLogoutLogSubmitOptions, LogTailKb) == 0x000004, "Member 'FLogoutLogSubmitOptions::LogTailKb' has a wrong offset!");
static_assert(offsetof(FLogoutLogSubmitOptions, LogSubmitChance) == 0x000008, "Member 'FLogoutLogSubmitOptions::LogSubmitChance' has a wrong offset!");
static_assert(offsetof(FLogoutLogSubmitOptions, DoNotUploadReasons) == 0x000010, "Member 'FLogoutLogSubmitOptions::DoNotUploadReasons' has a wrong offset!");

// ScriptStruct FortniteGame.GoatVehicleBoostLevel
// 0x0008 (0x0008 - 0x0000)
struct FGoatVehicleBoostLevel final
{
public:
	float                                         AccumulationPercent;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTime;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoatVehicleBoostLevel) == 0x000004, "Wrong alignment on FGoatVehicleBoostLevel");
static_assert(sizeof(FGoatVehicleBoostLevel) == 0x000008, "Wrong size on FGoatVehicleBoostLevel");
static_assert(offsetof(FGoatVehicleBoostLevel, AccumulationPercent) == 0x000000, "Member 'FGoatVehicleBoostLevel::AccumulationPercent' has a wrong offset!");
static_assert(offsetof(FGoatVehicleBoostLevel, BoostTime) == 0x000004, "Member 'FGoatVehicleBoostLevel::BoostTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortHealthBarComponentData
// 0x0018 (0x0018 - 0x0000)
struct FFortHealthBarComponentData final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHealthBarComponentData) == 0x000008, "Wrong alignment on FFortHealthBarComponentData");
static_assert(sizeof(FFortHealthBarComponentData) == 0x000018, "Wrong size on FFortHealthBarComponentData");
static_assert(offsetof(FFortHealthBarComponentData, DisplayText) == 0x000000, "Member 'FFortHealthBarComponentData::DisplayText' has a wrong offset!");

// ScriptStruct FortniteGame.FortHelpAdditionalContent
// 0x00A0 (0x00A0 - 0x0000)
struct FFortHelpAdditionalContent final
{
public:
	EFortHelpContentLocation                      ContentLocation;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowAdditionalImage;                               // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ImageToDisplay;                                    // 0x0008(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          ShowAdditionalWidget;                              // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                WidgetToDisplay;                                   // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHelpAdditionalContent) == 0x000008, "Wrong alignment on FFortHelpAdditionalContent");
static_assert(sizeof(FFortHelpAdditionalContent) == 0x0000A0, "Wrong size on FFortHelpAdditionalContent");
static_assert(offsetof(FFortHelpAdditionalContent, ContentLocation) == 0x000000, "Member 'FFortHelpAdditionalContent::ContentLocation' has a wrong offset!");
static_assert(offsetof(FFortHelpAdditionalContent, ShowAdditionalImage) == 0x000001, "Member 'FFortHelpAdditionalContent::ShowAdditionalImage' has a wrong offset!");
static_assert(offsetof(FFortHelpAdditionalContent, ImageToDisplay) == 0x000008, "Member 'FFortHelpAdditionalContent::ImageToDisplay' has a wrong offset!");
static_assert(offsetof(FFortHelpAdditionalContent, ShowAdditionalWidget) == 0x000090, "Member 'FFortHelpAdditionalContent::ShowAdditionalWidget' has a wrong offset!");
static_assert(offsetof(FFortHelpAdditionalContent, WidgetToDisplay) == 0x000098, "Member 'FFortHelpAdditionalContent::WidgetToDisplay' has a wrong offset!");

// ScriptStruct FortniteGame.FortServerBotInfo
// 0x0008 (0x0008 - 0x0000)
struct FFortServerBotInfo final
{
public:
	class AFortAthenaAIBotController*             BotController;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortServerBotInfo) == 0x000008, "Wrong alignment on FFortServerBotInfo");
static_assert(sizeof(FFortServerBotInfo) == 0x000008, "Wrong size on FFortServerBotInfo");
static_assert(offsetof(FFortServerBotInfo, BotController) == 0x000000, "Member 'FFortServerBotInfo::BotController' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneInstanceInfo
// 0x0068 (0x0068 - 0x0000)
struct FFortZoneInstanceInfo
{
public:
	class FString                                 WorldId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TheaterId;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TheaterMissionId;                                  // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TheaterMissionAlertId;                             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ZoneThemeClass;                                    // 0x0040(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortZoneInstanceInfo) == 0x000008, "Wrong alignment on FFortZoneInstanceInfo");
static_assert(sizeof(FFortZoneInstanceInfo) == 0x000068, "Wrong size on FFortZoneInstanceInfo");
static_assert(offsetof(FFortZoneInstanceInfo, WorldId) == 0x000000, "Member 'FFortZoneInstanceInfo::WorldId' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceInfo, TheaterId) == 0x000010, "Member 'FFortZoneInstanceInfo::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceInfo, TheaterMissionId) == 0x000020, "Member 'FFortZoneInstanceInfo::TheaterMissionId' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceInfo, TheaterMissionAlertId) == 0x000030, "Member 'FFortZoneInstanceInfo::TheaterMissionAlertId' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceInfo, ZoneThemeClass) == 0x000040, "Member 'FFortZoneInstanceInfo::ZoneThemeClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneInstanceDetails
// 0x00C0 (0x0128 - 0x0068)
struct FFortZoneInstanceDetails final : public FFortZoneInstanceInfo
{
public:
	TSoftClassPtr<class UClass>                   MissionGenerator;                                  // 0x0068(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ZoneDifficultyInfo;                                // 0x0090(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         MissionRewards;                                    // 0x00A0(0x0020)(NativeAccessSpecifierPublic)
	TArray<struct FMcpLootResult>                 DifficultyIncreaseMissionRewards;                  // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         MissionAlertRewards;                               // 0x00D0(0x0020)(NativeAccessSpecifierPublic)
	struct FMcpLootResult                         ZoneModifiers;                                     // 0x00F0(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 MissionAlertCategoryName;                          // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileIndex;                                         // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortZoneInstanceDetails) == 0x000008, "Wrong alignment on FFortZoneInstanceDetails");
static_assert(sizeof(FFortZoneInstanceDetails) == 0x000128, "Wrong size on FFortZoneInstanceDetails");
static_assert(offsetof(FFortZoneInstanceDetails, MissionGenerator) == 0x000068, "Member 'FFortZoneInstanceDetails::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, ZoneDifficultyInfo) == 0x000090, "Member 'FFortZoneInstanceDetails::ZoneDifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, MissionRewards) == 0x0000A0, "Member 'FFortZoneInstanceDetails::MissionRewards' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, DifficultyIncreaseMissionRewards) == 0x0000C0, "Member 'FFortZoneInstanceDetails::DifficultyIncreaseMissionRewards' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, MissionAlertRewards) == 0x0000D0, "Member 'FFortZoneInstanceDetails::MissionAlertRewards' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, ZoneModifiers) == 0x0000F0, "Member 'FFortZoneInstanceDetails::ZoneModifiers' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, MissionAlertCategoryName) == 0x000110, "Member 'FFortZoneInstanceDetails::MissionAlertCategoryName' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, TileIndex) == 0x000120, "Member 'FFortZoneInstanceDetails::TileIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortHeroGameplayPiece
// 0x0098 (0x0098 - 0x0000)
struct FFortHeroGameplayPiece final
{
public:
	TSoftObjectPtr<class UFortAbilityKit>         GrantedAbilityKit;                                 // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      RequiredCommanderTagQuery;                         // 0x0028(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CommanderRequirementsText;                         // 0x0070(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUseGlobalDefaultMinima;                           // 0x0088(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 MinimumHeroTier;                                   // 0x0089(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumHeroLevel;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   MinimumHeroRarity;                                 // 0x0090(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortHeroGameplayPiece) == 0x000008, "Wrong alignment on FFortHeroGameplayPiece");
static_assert(sizeof(FFortHeroGameplayPiece) == 0x000098, "Wrong size on FFortHeroGameplayPiece");
static_assert(offsetof(FFortHeroGameplayPiece, GrantedAbilityKit) == 0x000000, "Member 'FFortHeroGameplayPiece::GrantedAbilityKit' has a wrong offset!");
static_assert(offsetof(FFortHeroGameplayPiece, RequiredCommanderTagQuery) == 0x000028, "Member 'FFortHeroGameplayPiece::RequiredCommanderTagQuery' has a wrong offset!");
static_assert(offsetof(FFortHeroGameplayPiece, CommanderRequirementsText) == 0x000070, "Member 'FFortHeroGameplayPiece::CommanderRequirementsText' has a wrong offset!");
static_assert(offsetof(FFortHeroGameplayPiece, bUseGlobalDefaultMinima) == 0x000088, "Member 'FFortHeroGameplayPiece::bUseGlobalDefaultMinima' has a wrong offset!");
static_assert(offsetof(FFortHeroGameplayPiece, MinimumHeroTier) == 0x000089, "Member 'FFortHeroGameplayPiece::MinimumHeroTier' has a wrong offset!");
static_assert(offsetof(FFortHeroGameplayPiece, MinimumHeroLevel) == 0x00008C, "Member 'FFortHeroGameplayPiece::MinimumHeroLevel' has a wrong offset!");
static_assert(offsetof(FFortHeroGameplayPiece, MinimumHeroRarity) == 0x000090, "Member 'FFortHeroGameplayPiece::MinimumHeroRarity' has a wrong offset!");

// ScriptStruct FortniteGame.HeroItem
// 0x0078 (0x0078 - 0x0000)
struct FHeroItem final
{
public:
	TSoftObjectPtr<class UFortWorldItemDefinition> Item;                                              // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortReplenishmentType                        Replenishment;                                     // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequiredGPTags;                                    // 0x0030(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SwapTag;                                           // 0x0050(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          bShowInAbilityScreen;                              // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroItem) == 0x000008, "Wrong alignment on FHeroItem");
static_assert(sizeof(FHeroItem) == 0x000078, "Wrong size on FHeroItem");
static_assert(offsetof(FHeroItem, Item) == 0x000000, "Member 'FHeroItem::Item' has a wrong offset!");
static_assert(offsetof(FHeroItem, Quantity) == 0x000028, "Member 'FHeroItem::Quantity' has a wrong offset!");
static_assert(offsetof(FHeroItem, Replenishment) == 0x00002C, "Member 'FHeroItem::Replenishment' has a wrong offset!");
static_assert(offsetof(FHeroItem, RequiredGPTags) == 0x000030, "Member 'FHeroItem::RequiredGPTags' has a wrong offset!");
static_assert(offsetof(FHeroItem, SwapTag) == 0x000050, "Member 'FHeroItem::SwapTag' has a wrong offset!");
static_assert(offsetof(FHeroItem, bShowInAbilityScreen) == 0x000070, "Member 'FHeroItem::bShowInAbilityScreen' has a wrong offset!");

// ScriptStruct FortniteGame.FortHexMapCoord
// 0x000C (0x000C - 0x0000)
struct FFortHexMapCoord final
{
public:
	int32                                         Horizontal;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vertical;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Depth;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHexMapCoord) == 0x000004, "Wrong alignment on FFortHexMapCoord");
static_assert(sizeof(FFortHexMapCoord) == 0x00000C, "Wrong size on FFortHexMapCoord");
static_assert(offsetof(FFortHexMapCoord, Horizontal) == 0x000000, "Member 'FFortHexMapCoord::Horizontal' has a wrong offset!");
static_assert(offsetof(FFortHexMapCoord, Vertical) == 0x000004, "Member 'FFortHexMapCoord::Vertical' has a wrong offset!");
static_assert(offsetof(FFortHexMapCoord, Depth) == 0x000008, "Member 'FFortHexMapCoord::Depth' has a wrong offset!");

// ScriptStruct FortniteGame.WorkerSetBonusState
// 0x0010 (0x0010 - 0x0000)
struct FWorkerSetBonusState final
{
public:
	struct FGameplayTag                           SetBonusTag;                                       // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentMatchCount;                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredMatchCountToActivate;                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkerSetBonusState) == 0x000004, "Wrong alignment on FWorkerSetBonusState");
static_assert(sizeof(FWorkerSetBonusState) == 0x000010, "Wrong size on FWorkerSetBonusState");
static_assert(offsetof(FWorkerSetBonusState, SetBonusTag) == 0x000000, "Member 'FWorkerSetBonusState::SetBonusTag' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusState, CurrentMatchCount) == 0x000008, "Member 'FWorkerSetBonusState::CurrentMatchCount' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusState, RequiredMatchCountToActivate) == 0x00000C, "Member 'FWorkerSetBonusState::RequiredMatchCountToActivate' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaVehicleShootingCone
// 0x0008 (0x0008 - 0x0000)
struct FAthenaVehicleShootingCone final
{
public:
	float                                         YawConstraint;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchConstraint;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaVehicleShootingCone) == 0x000004, "Wrong alignment on FAthenaVehicleShootingCone");
static_assert(sizeof(FAthenaVehicleShootingCone) == 0x000008, "Wrong size on FAthenaVehicleShootingCone");
static_assert(offsetof(FAthenaVehicleShootingCone, YawConstraint) == 0x000000, "Member 'FAthenaVehicleShootingCone::YawConstraint' has a wrong offset!");
static_assert(offsetof(FAthenaVehicleShootingCone, PitchConstraint) == 0x000004, "Member 'FAthenaVehicleShootingCone::PitchConstraint' has a wrong offset!");

// ScriptStruct FortniteGame.TrackedObjective
// 0x0018 (0x0024 - 0x000C)
struct FTrackedObjective final : public FFastArraySerializerItem
{
public:
	int32                                         TrackedIndex;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamIndex;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IndicatorPresetIndex;                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressPercentage;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x8];                                       // 0x001C(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackedObjective) == 0x000004, "Wrong alignment on FTrackedObjective");
static_assert(sizeof(FTrackedObjective) == 0x000024, "Wrong size on FTrackedObjective");
static_assert(offsetof(FTrackedObjective, TrackedIndex) == 0x00000C, "Member 'FTrackedObjective::TrackedIndex' has a wrong offset!");
static_assert(offsetof(FTrackedObjective, TeamIndex) == 0x000010, "Member 'FTrackedObjective::TeamIndex' has a wrong offset!");
static_assert(offsetof(FTrackedObjective, IndicatorPresetIndex) == 0x000014, "Member 'FTrackedObjective::IndicatorPresetIndex' has a wrong offset!");
static_assert(offsetof(FTrackedObjective, ProgressPercentage) == 0x000018, "Member 'FTrackedObjective::ProgressPercentage' has a wrong offset!");

// ScriptStruct FortniteGame.TrackedObjectiveArray
// 0x0020 (0x0128 - 0x0108)
struct FTrackedObjectiveArray final : public FFastArraySerializer
{
public:
	TArray<struct FTrackedObjective>              Objectives;                                        // 0x0108(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	int32                                         NextTrackedIndex;                                  // 0x0118(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0xC];                                      // 0x011C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackedObjectiveArray) == 0x000008, "Wrong alignment on FTrackedObjectiveArray");
static_assert(sizeof(FTrackedObjectiveArray) == 0x000128, "Wrong size on FTrackedObjectiveArray");
static_assert(offsetof(FTrackedObjectiveArray, Objectives) == 0x000108, "Member 'FTrackedObjectiveArray::Objectives' has a wrong offset!");
static_assert(offsetof(FTrackedObjectiveArray, NextTrackedIndex) == 0x000118, "Member 'FTrackedObjectiveArray::NextTrackedIndex' has a wrong offset!");

// ScriptStruct FortniteGame.WorkerPersonalityData
// 0x0038 (0x0038 - 0x0000)
struct FWorkerPersonalityData final
{
public:
	struct FGameplayTag                           PersonalityTypeTag;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   PersonalityName;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorkerGenderData>              GenderData;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkerPersonalityData) == 0x000008, "Wrong alignment on FWorkerPersonalityData");
static_assert(sizeof(FWorkerPersonalityData) == 0x000038, "Wrong size on FWorkerPersonalityData");
static_assert(offsetof(FWorkerPersonalityData, PersonalityTypeTag) == 0x000000, "Member 'FWorkerPersonalityData::PersonalityTypeTag' has a wrong offset!");
static_assert(offsetof(FWorkerPersonalityData, PersonalityName) == 0x000008, "Member 'FWorkerPersonalityData::PersonalityName' has a wrong offset!");
static_assert(offsetof(FWorkerPersonalityData, SelectionWeight) == 0x000020, "Member 'FWorkerPersonalityData::SelectionWeight' has a wrong offset!");
static_assert(offsetof(FWorkerPersonalityData, GenderData) == 0x000028, "Member 'FWorkerPersonalityData::GenderData' has a wrong offset!");

// ScriptStruct FortniteGame.ExpeditionSlot
// 0x0018 (0x0020 - 0x0008)
struct FExpeditionSlot final : public FTableRowBase
{
public:
	struct FGameplayTag                           SlotTag;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootTierGroup;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExpeditionSlot) == 0x000008, "Wrong alignment on FExpeditionSlot");
static_assert(sizeof(FExpeditionSlot) == 0x000020, "Wrong size on FExpeditionSlot");
static_assert(offsetof(FExpeditionSlot, SlotTag) == 0x000008, "Member 'FExpeditionSlot::SlotTag' has a wrong offset!");
static_assert(offsetof(FExpeditionSlot, LootTierGroup) == 0x000010, "Member 'FExpeditionSlot::LootTierGroup' has a wrong offset!");

// ScriptStruct FortniteGame.MissionGenerationInfo
// 0x0058 (0x0058 - 0x0000)
struct FMissionGenerationInfo final
{
public:
	int32                                         NumMissionsRequired;                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMissionsAllowed;                                // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMissionsGeneratedMatchingRequirements;          // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      MissionTagRequirements;                            // 0x0010(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionGenerationInfo) == 0x000008, "Wrong alignment on FMissionGenerationInfo");
static_assert(sizeof(FMissionGenerationInfo) == 0x000058, "Wrong size on FMissionGenerationInfo");
static_assert(offsetof(FMissionGenerationInfo, NumMissionsRequired) == 0x000000, "Member 'FMissionGenerationInfo::NumMissionsRequired' has a wrong offset!");
static_assert(offsetof(FMissionGenerationInfo, MaxMissionsAllowed) == 0x000004, "Member 'FMissionGenerationInfo::MaxMissionsAllowed' has a wrong offset!");
static_assert(offsetof(FMissionGenerationInfo, NumMissionsGeneratedMatchingRequirements) == 0x000008, "Member 'FMissionGenerationInfo::NumMissionsGeneratedMatchingRequirements' has a wrong offset!");
static_assert(offsetof(FMissionGenerationInfo, MissionTagRequirements) == 0x000010, "Member 'FMissionGenerationInfo::MissionTagRequirements' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseNodeGameplayEffectDataTableRow
// 0x00F0 (0x00F8 - 0x0008)
struct FHomebaseNodeGameplayEffectDataTableRow final : public FTableRowBase
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                Operation;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Magnitude;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ApplicationRequiredTagsContainer;                  // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredSourceTagsContainer;                       // 0x0050(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTargetTagsContainer;                       // 0x0070(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GrantedTagsContainer;                              // 0x0090(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IgnoreSourceTagsContainer;                         // 0x00B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AssetTagsContainer;                                // 0x00D0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         AssociatedGEIdx;                                   // 0x00F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssociatedModifierIdx;                             // 0x00F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseNodeGameplayEffectDataTableRow) == 0x000008, "Wrong alignment on FHomebaseNodeGameplayEffectDataTableRow");
static_assert(sizeof(FHomebaseNodeGameplayEffectDataTableRow) == 0x0000F8, "Wrong size on FHomebaseNodeGameplayEffectDataTableRow");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, Attribute) == 0x000008, "Member 'FHomebaseNodeGameplayEffectDataTableRow::Attribute' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, Operation) == 0x000028, "Member 'FHomebaseNodeGameplayEffectDataTableRow::Operation' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, Magnitude) == 0x00002C, "Member 'FHomebaseNodeGameplayEffectDataTableRow::Magnitude' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, ApplicationRequiredTagsContainer) == 0x000030, "Member 'FHomebaseNodeGameplayEffectDataTableRow::ApplicationRequiredTagsContainer' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, RequiredSourceTagsContainer) == 0x000050, "Member 'FHomebaseNodeGameplayEffectDataTableRow::RequiredSourceTagsContainer' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, RequiredTargetTagsContainer) == 0x000070, "Member 'FHomebaseNodeGameplayEffectDataTableRow::RequiredTargetTagsContainer' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, GrantedTagsContainer) == 0x000090, "Member 'FHomebaseNodeGameplayEffectDataTableRow::GrantedTagsContainer' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, IgnoreSourceTagsContainer) == 0x0000B0, "Member 'FHomebaseNodeGameplayEffectDataTableRow::IgnoreSourceTagsContainer' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, AssetTagsContainer) == 0x0000D0, "Member 'FHomebaseNodeGameplayEffectDataTableRow::AssetTagsContainer' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, AssociatedGEIdx) == 0x0000F0, "Member 'FHomebaseNodeGameplayEffectDataTableRow::AssociatedGEIdx' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, AssociatedModifierIdx) == 0x0000F4, "Member 'FHomebaseNodeGameplayEffectDataTableRow::AssociatedModifierIdx' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseBannerCategoryData
// 0x0020 (0x0028 - 0x0008)
struct FHomebaseBannerCategoryData final : public FTableRowBase
{
public:
	class FText                                   CategoryDisplayName;                               // 0x0008(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         SortPriority;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHomebaseBannerCategoryData) == 0x000008, "Wrong alignment on FHomebaseBannerCategoryData");
static_assert(sizeof(FHomebaseBannerCategoryData) == 0x000028, "Wrong size on FHomebaseBannerCategoryData");
static_assert(offsetof(FHomebaseBannerCategoryData, CategoryDisplayName) == 0x000008, "Member 'FHomebaseBannerCategoryData::CategoryDisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerCategoryData, SortPriority) == 0x000020, "Member 'FHomebaseBannerCategoryData::SortPriority' has a wrong offset!");

// ScriptStruct FortniteGame.TeamMapInfo
// 0x0048 (0x0048 - 0x0000)
struct FTeamMapInfo final
{
public:
	TArray<uint8>                                 ReplicatedSeedPack;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x34];                                      // 0x0010(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         TeamId;                                            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamMapInfo) == 0x000008, "Wrong alignment on FTeamMapInfo");
static_assert(sizeof(FTeamMapInfo) == 0x000048, "Wrong size on FTeamMapInfo");
static_assert(offsetof(FTeamMapInfo, ReplicatedSeedPack) == 0x000000, "Member 'FTeamMapInfo::ReplicatedSeedPack' has a wrong offset!");
static_assert(offsetof(FTeamMapInfo, TeamId) == 0x000044, "Member 'FTeamMapInfo::TeamId' has a wrong offset!");

// ScriptStruct FortniteGame.ReplayDataPlayerMoves
// 0x0050 (0x0068 - 0x0018)
struct FReplayDataPlayerMoves final : public FBaseReplayEventInfo
{
public:
	TMap<class FString, struct FReplayDataMoveSnapshotContainer> PlayerPersistentIdToMoveSamples;                   // 0x0018(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayDataPlayerMoves) == 0x000008, "Wrong alignment on FReplayDataPlayerMoves");
static_assert(sizeof(FReplayDataPlayerMoves) == 0x000068, "Wrong size on FReplayDataPlayerMoves");
static_assert(offsetof(FReplayDataPlayerMoves, PlayerPersistentIdToMoveSamples) == 0x000018, "Member 'FReplayDataPlayerMoves::PlayerPersistentIdToMoveSamples' has a wrong offset!");

// ScriptStruct FortniteGame.TeamMapExplorationEvent
// 0x0002 (0x0002 - 0x0000)
struct FTeamMapExplorationEvent final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          ExplorationThreshold;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamMapExplorationEvent) == 0x000001, "Wrong alignment on FTeamMapExplorationEvent");
static_assert(sizeof(FTeamMapExplorationEvent) == 0x000002, "Wrong size on FTeamMapExplorationEvent");
static_assert(offsetof(FTeamMapExplorationEvent, TeamId) == 0x000000, "Member 'FTeamMapExplorationEvent::TeamId' has a wrong offset!");
static_assert(offsetof(FTeamMapExplorationEvent, ExplorationThreshold) == 0x000001, "Member 'FTeamMapExplorationEvent::ExplorationThreshold' has a wrong offset!");

// ScriptStruct FortniteGame.FortInstensityCurveSequenceProgression
// 0x0018 (0x0018 - 0x0000)
struct FFortInstensityCurveSequenceProgression final
{
public:
	class UFortIntensityCurveSequence*            CurveSequence;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   SelectionWeight;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortInstensityCurveSequenceProgression) == 0x000008, "Wrong alignment on FFortInstensityCurveSequenceProgression");
static_assert(sizeof(FFortInstensityCurveSequenceProgression) == 0x000018, "Wrong size on FFortInstensityCurveSequenceProgression");
static_assert(offsetof(FFortInstensityCurveSequenceProgression, CurveSequence) == 0x000000, "Member 'FFortInstensityCurveSequenceProgression::CurveSequence' has a wrong offset!");
static_assert(offsetof(FFortInstensityCurveSequenceProgression, SelectionWeight) == 0x000008, "Member 'FFortInstensityCurveSequenceProgression::SelectionWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemList
// 0x00C0 (0x01C8 - 0x0108)
struct FFortItemList final : public FFastArraySerializer
{
public:
	TArray<struct FFortItemEntry>                 ReplicatedEntries;                                 // 0x0108(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x50];                                     // 0x0118(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortWorldItem*>                 ItemInstances;                                     // 0x0168(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x50];                                     // 0x0178(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemList) == 0x000008, "Wrong alignment on FFortItemList");
static_assert(sizeof(FFortItemList) == 0x0001C8, "Wrong size on FFortItemList");
static_assert(offsetof(FFortItemList, ReplicatedEntries) == 0x000108, "Member 'FFortItemList::ReplicatedEntries' has a wrong offset!");
static_assert(offsetof(FFortItemList, ItemInstances) == 0x000168, "Member 'FFortItemList::ItemInstances' has a wrong offset!");

// ScriptStruct FortniteGame.FortGiftGiver
// 0x0008 (0x0030 - 0x0028)
struct FFortGiftGiver final : public FFortGiftingInfo
{
public:
	int32                                         NumItemsGiven;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGiftGiver) == 0x000008, "Wrong alignment on FFortGiftGiver");
static_assert(sizeof(FFortGiftGiver) == 0x000030, "Wrong size on FFortGiftGiver");
static_assert(offsetof(FFortGiftGiver, NumItemsGiven) == 0x000028, "Member 'FFortGiftGiver::NumItemsGiven' has a wrong offset!");

// ScriptStruct FortniteGame.McpLeaderboardResultRow
// 0x0030 (0x0030 - 0x0000)
struct FMcpLeaderboardResultRow final
{
public:
	struct FUniqueNetIdRepl                       PlayerUniqueNetId;                                 // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMcpLeaderboardResultRow) == 0x000008, "Wrong alignment on FMcpLeaderboardResultRow");
static_assert(sizeof(FMcpLeaderboardResultRow) == 0x000030, "Wrong size on FMcpLeaderboardResultRow");
static_assert(offsetof(FMcpLeaderboardResultRow, PlayerUniqueNetId) == 0x000000, "Member 'FMcpLeaderboardResultRow::PlayerUniqueNetId' has a wrong offset!");
static_assert(offsetof(FMcpLeaderboardResultRow, Rank) == 0x000028, "Member 'FMcpLeaderboardResultRow::Rank' has a wrong offset!");
static_assert(offsetof(FMcpLeaderboardResultRow, Value) == 0x00002C, "Member 'FMcpLeaderboardResultRow::Value' has a wrong offset!");

// ScriptStruct FortniteGame.CreativeLoadedLinkData
// 0x00D0 (0x00D0 - 0x0000)
struct FCreativeLoadedLinkData final
{
public:
	class FString                                 CreatorName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SupportCode;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mnemonic;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLocalizedStringPair>           LinkTitle;                                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   AltTitle;                                          // 0x0048(0x0018)(NativeAccessSpecifierPublic)
	TArray<struct FLocalizedStringPair>           LinkTagline;                                       // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLocalizedStringPair>           IslandIntroduction;                                // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 LinkYoutubeId;                                     // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageUrl;                                          // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IslandType;                                        // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QuestContextTag;                                   // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountId;                                         // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeLoadedLinkData) == 0x000008, "Wrong alignment on FCreativeLoadedLinkData");
static_assert(sizeof(FCreativeLoadedLinkData) == 0x0000D0, "Wrong size on FCreativeLoadedLinkData");
static_assert(offsetof(FCreativeLoadedLinkData, CreatorName) == 0x000000, "Member 'FCreativeLoadedLinkData::CreatorName' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, SupportCode) == 0x000010, "Member 'FCreativeLoadedLinkData::SupportCode' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, Mnemonic) == 0x000020, "Member 'FCreativeLoadedLinkData::Mnemonic' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, Version) == 0x000030, "Member 'FCreativeLoadedLinkData::Version' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, LinkTitle) == 0x000038, "Member 'FCreativeLoadedLinkData::LinkTitle' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, AltTitle) == 0x000048, "Member 'FCreativeLoadedLinkData::AltTitle' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, LinkTagline) == 0x000060, "Member 'FCreativeLoadedLinkData::LinkTagline' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, IslandIntroduction) == 0x000070, "Member 'FCreativeLoadedLinkData::IslandIntroduction' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, LinkYoutubeId) == 0x000080, "Member 'FCreativeLoadedLinkData::LinkYoutubeId' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, ImageUrl) == 0x000090, "Member 'FCreativeLoadedLinkData::ImageUrl' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, IslandType) == 0x0000A0, "Member 'FCreativeLoadedLinkData::IslandType' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, QuestContextTag) == 0x0000B0, "Member 'FCreativeLoadedLinkData::QuestContextTag' has a wrong offset!");
static_assert(offsetof(FCreativeLoadedLinkData, AccountId) == 0x0000C0, "Member 'FCreativeLoadedLinkData::AccountId' has a wrong offset!");

// ScriptStruct FortniteGame.FortEarlyAcessLoadingScreen
// 0x02F0 (0x02F0 - 0x0000)
struct FFortEarlyAcessLoadingScreen final
{
public:
	struct FSlateBrush                            EABackground;                                      // 0x0000(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        EATextStyle;                                       // 0x0088(0x0268)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEarlyAcessLoadingScreen) == 0x000008, "Wrong alignment on FFortEarlyAcessLoadingScreen");
static_assert(sizeof(FFortEarlyAcessLoadingScreen) == 0x0002F0, "Wrong size on FFortEarlyAcessLoadingScreen");
static_assert(offsetof(FFortEarlyAcessLoadingScreen, EABackground) == 0x000000, "Member 'FFortEarlyAcessLoadingScreen::EABackground' has a wrong offset!");
static_assert(offsetof(FFortEarlyAcessLoadingScreen, EATextStyle) == 0x000088, "Member 'FFortEarlyAcessLoadingScreen::EATextStyle' has a wrong offset!");

// ScriptStruct FortniteGame.FortSubGameLoadingScreen
// 0x04A0 (0x04A0 - 0x0000)
struct FFortSubGameLoadingScreen final
{
public:
	TArray<class UFortTips*>                      Tips;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 BackgroundImage;                                   // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BackgroundDesiredSize;                             // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortLogoLoadingScreen                 LogoLoadingScreen;                                 // 0x0050(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortLoadingBlockScreen                LoadingBlockScreen;                                // 0x0078(0x0428)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSubGameLoadingScreen) == 0x000008, "Wrong alignment on FFortSubGameLoadingScreen");
static_assert(sizeof(FFortSubGameLoadingScreen) == 0x0004A0, "Wrong size on FFortSubGameLoadingScreen");
static_assert(offsetof(FFortSubGameLoadingScreen, Tips) == 0x000000, "Member 'FFortSubGameLoadingScreen::Tips' has a wrong offset!");
static_assert(offsetof(FFortSubGameLoadingScreen, BackgroundImage) == 0x000010, "Member 'FFortSubGameLoadingScreen::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FFortSubGameLoadingScreen, BackgroundDesiredSize) == 0x000038, "Member 'FFortSubGameLoadingScreen::BackgroundDesiredSize' has a wrong offset!");
static_assert(offsetof(FFortSubGameLoadingScreen, BackgroundColor) == 0x000040, "Member 'FFortSubGameLoadingScreen::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FFortSubGameLoadingScreen, LogoLoadingScreen) == 0x000050, "Member 'FFortSubGameLoadingScreen::LogoLoadingScreen' has a wrong offset!");
static_assert(offsetof(FFortSubGameLoadingScreen, LoadingBlockScreen) == 0x000078, "Member 'FFortSubGameLoadingScreen::LoadingBlockScreen' has a wrong offset!");

// ScriptStruct FortniteGame.Volume_Internal
// 0x0001 (0x0001 - 0x0000)
struct FVolume_Internal final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVolume_Internal) == 0x000001, "Wrong alignment on FVolume_Internal");
static_assert(sizeof(FVolume_Internal) == 0x000001, "Wrong size on FVolume_Internal");

// ScriptStruct FortniteGame.FortLootLevelData
// 0x0018 (0x0020 - 0x0008)
struct FFortLootLevelData final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinItemLevel;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxItemLevel;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLootLevelData) == 0x000008, "Wrong alignment on FFortLootLevelData");
static_assert(sizeof(FFortLootLevelData) == 0x000020, "Wrong size on FFortLootLevelData");
static_assert(offsetof(FFortLootLevelData, Category) == 0x000008, "Member 'FFortLootLevelData::Category' has a wrong offset!");
static_assert(offsetof(FFortLootLevelData, LootLevel) == 0x000010, "Member 'FFortLootLevelData::LootLevel' has a wrong offset!");
static_assert(offsetof(FFortLootLevelData, MinItemLevel) == 0x000014, "Member 'FFortLootLevelData::MinItemLevel' has a wrong offset!");
static_assert(offsetof(FFortLootLevelData, MaxItemLevel) == 0x000018, "Member 'FFortLootLevelData::MaxItemLevel' has a wrong offset!");

// ScriptStruct FortniteGame.MatchmakingParams
// 0x00B8 (0x00B8 - 0x0000)
struct FMatchmakingParams final
{
public:
	int32                                         ControllerId;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartySize;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DatacenterId;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaylistId;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x8];                                       // 0x001C(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MatchmakingLevel;                                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionDifficultyMin;                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionDifficultyMax;                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStormShieldDefense                           StormShieldDefenseType;                            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TheaterId;                                         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZoneInstanceId;                                    // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WUID;                                              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       WorldOwnerId;                                      // 0x0068(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingStartLocation                     StartWith;                                         // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingFlags                             Flags;                                             // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChanceToHostOverride;                              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceToHostIncrease;                              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAttempts;                                       // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSearchResultsOverride;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProcessedSearchResults;                         // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingParams) == 0x000008, "Wrong alignment on FMatchmakingParams");
static_assert(sizeof(FMatchmakingParams) == 0x0000B8, "Wrong size on FMatchmakingParams");
static_assert(offsetof(FMatchmakingParams, ControllerId) == 0x000000, "Member 'FMatchmakingParams::ControllerId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, PartySize) == 0x000004, "Member 'FMatchmakingParams::PartySize' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, DatacenterId) == 0x000008, "Member 'FMatchmakingParams::DatacenterId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, PlaylistId) == 0x000018, "Member 'FMatchmakingParams::PlaylistId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MatchmakingLevel) == 0x000024, "Member 'FMatchmakingParams::MatchmakingLevel' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MissionDifficultyMin) == 0x000028, "Member 'FMatchmakingParams::MissionDifficultyMin' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MissionDifficultyMax) == 0x00002C, "Member 'FMatchmakingParams::MissionDifficultyMax' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, StormShieldDefenseType) == 0x000030, "Member 'FMatchmakingParams::StormShieldDefenseType' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, TheaterId) == 0x000038, "Member 'FMatchmakingParams::TheaterId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, ZoneInstanceId) == 0x000048, "Member 'FMatchmakingParams::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, WUID) == 0x000058, "Member 'FMatchmakingParams::WUID' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, WorldOwnerId) == 0x000068, "Member 'FMatchmakingParams::WorldOwnerId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, SessionId) == 0x000090, "Member 'FMatchmakingParams::SessionId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, StartWith) == 0x0000A0, "Member 'FMatchmakingParams::StartWith' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, Flags) == 0x0000A1, "Member 'FMatchmakingParams::Flags' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, ChanceToHostOverride) == 0x0000A4, "Member 'FMatchmakingParams::ChanceToHostOverride' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, ChanceToHostIncrease) == 0x0000A8, "Member 'FMatchmakingParams::ChanceToHostIncrease' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, NumAttempts) == 0x0000AC, "Member 'FMatchmakingParams::NumAttempts' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MaxSearchResultsOverride) == 0x0000B0, "Member 'FMatchmakingParams::MaxSearchResultsOverride' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MaxProcessedSearchResults) == 0x0000B4, "Member 'FMatchmakingParams::MaxProcessedSearchResults' has a wrong offset!");

// ScriptStruct FortniteGame.FortCachedMatchmakingSearchParams
// 0x00C8 (0x00C8 - 0x0000)
struct FFortCachedMatchmakingSearchParams final
{
public:
	EFortMatchmakingType                          MatchmakingType;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchmakingParams                     MatchmakingParams;                                 // 0x0008(0x00B8)(NativeAccessSpecifierPrivate)
	bool                                          bValid;                                            // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCachedMatchmakingSearchParams) == 0x000008, "Wrong alignment on FFortCachedMatchmakingSearchParams");
static_assert(sizeof(FFortCachedMatchmakingSearchParams) == 0x0000C8, "Wrong size on FFortCachedMatchmakingSearchParams");
static_assert(offsetof(FFortCachedMatchmakingSearchParams, MatchmakingType) == 0x000000, "Member 'FFortCachedMatchmakingSearchParams::MatchmakingType' has a wrong offset!");
static_assert(offsetof(FFortCachedMatchmakingSearchParams, MatchmakingParams) == 0x000008, "Member 'FFortCachedMatchmakingSearchParams::MatchmakingParams' has a wrong offset!");
static_assert(offsetof(FFortCachedMatchmakingSearchParams, bValid) == 0x0000C0, "Member 'FFortCachedMatchmakingSearchParams::bValid' has a wrong offset!");

// ScriptStruct FortniteGame.VoiceChatUsageAnalytics
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FVoiceChatUsageAnalytics final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoiceChatUsageAnalytics) == 0x000008, "Wrong alignment on FVoiceChatUsageAnalytics");
static_assert(sizeof(FVoiceChatUsageAnalytics) == 0x000018, "Wrong size on FVoiceChatUsageAnalytics");

// ScriptStruct FortniteGame.TeamSpottedActorInfo
// 0x0014 (0x0020 - 0x000C)
struct FTeamSpottedActorInfo final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  Spotter;                                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpottedActor;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamSpottedActorInfo) == 0x000008, "Wrong alignment on FTeamSpottedActorInfo");
static_assert(sizeof(FTeamSpottedActorInfo) == 0x000020, "Wrong size on FTeamSpottedActorInfo");
static_assert(offsetof(FTeamSpottedActorInfo, Spotter) == 0x000010, "Member 'FTeamSpottedActorInfo::Spotter' has a wrong offset!");
static_assert(offsetof(FTeamSpottedActorInfo, SpottedActor) == 0x000018, "Member 'FTeamSpottedActorInfo::SpottedActor' has a wrong offset!");

// ScriptStruct FortniteGame.MMSAltDomainRecord
// 0x0020 (0x0020 - 0x0000)
struct FMMSAltDomainRecord final
{
public:
	class FString                                 OriginalDomain;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AltDomain;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMMSAltDomainRecord) == 0x000008, "Wrong alignment on FMMSAltDomainRecord");
static_assert(sizeof(FMMSAltDomainRecord) == 0x000020, "Wrong size on FMMSAltDomainRecord");
static_assert(offsetof(FMMSAltDomainRecord, OriginalDomain) == 0x000000, "Member 'FMMSAltDomainRecord::OriginalDomain' has a wrong offset!");
static_assert(offsetof(FMMSAltDomainRecord, AltDomain) == 0x000010, "Member 'FMMSAltDomainRecord::AltDomain' has a wrong offset!");

// ScriptStruct FortniteGame.MtxPackage
// 0x00B0 (0x00B0 - 0x0000)
struct FMtxPackage final
{
public:
	class FString                                 StorefrontName;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferId;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TotalAmount;                                       // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusAmount;                                       // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Price;                                             // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SaleBasePrice;                                     // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 DisplayAssetPath;                                  // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerOverride;                                    // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMtxPackage) == 0x000008, "Wrong alignment on FMtxPackage");
static_assert(sizeof(FMtxPackage) == 0x0000B0, "Wrong size on FMtxPackage");
static_assert(offsetof(FMtxPackage, StorefrontName) == 0x000000, "Member 'FMtxPackage::StorefrontName' has a wrong offset!");
static_assert(offsetof(FMtxPackage, OfferId) == 0x000010, "Member 'FMtxPackage::OfferId' has a wrong offset!");
static_assert(offsetof(FMtxPackage, Title) == 0x000020, "Member 'FMtxPackage::Title' has a wrong offset!");
static_assert(offsetof(FMtxPackage, Description) == 0x000038, "Member 'FMtxPackage::Description' has a wrong offset!");
static_assert(offsetof(FMtxPackage, TotalAmount) == 0x000050, "Member 'FMtxPackage::TotalAmount' has a wrong offset!");
static_assert(offsetof(FMtxPackage, BonusAmount) == 0x000054, "Member 'FMtxPackage::BonusAmount' has a wrong offset!");
static_assert(offsetof(FMtxPackage, Price) == 0x000058, "Member 'FMtxPackage::Price' has a wrong offset!");
static_assert(offsetof(FMtxPackage, SaleBasePrice) == 0x000078, "Member 'FMtxPackage::SaleBasePrice' has a wrong offset!");
static_assert(offsetof(FMtxPackage, DisplayAssetPath) == 0x000090, "Member 'FMtxPackage::DisplayAssetPath' has a wrong offset!");
static_assert(offsetof(FMtxPackage, BannerOverride) == 0x0000A0, "Member 'FMtxPackage::BannerOverride' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerStatsRecord
// 0x0088 (0x0088 - 0x0000)
struct FPlayerStatsRecord final
{
public:
	int32                                         Stats[0x22];                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerStatsRecord) == 0x000004, "Wrong alignment on FPlayerStatsRecord");
static_assert(sizeof(FPlayerStatsRecord) == 0x000088, "Wrong size on FPlayerStatsRecord");
static_assert(offsetof(FPlayerStatsRecord, Stats) == 0x000000, "Member 'FPlayerStatsRecord::Stats' has a wrong offset!");

// ScriptStruct FortniteGame.FortEventFlagsNotification
// 0x0018 (0x0018 - 0x0000)
struct FFortEventFlagsNotification final
{
public:
	TArray<class FString>                         EventFlags;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              RefreshTime;                                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEventFlagsNotification) == 0x000008, "Wrong alignment on FFortEventFlagsNotification");
static_assert(sizeof(FFortEventFlagsNotification) == 0x000018, "Wrong size on FFortEventFlagsNotification");
static_assert(offsetof(FFortEventFlagsNotification, EventFlags) == 0x000000, "Member 'FFortEventFlagsNotification::EventFlags' has a wrong offset!");
static_assert(offsetof(FFortEventFlagsNotification, RefreshTime) == 0x000010, "Member 'FFortEventFlagsNotification::RefreshTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookResearchItemNotification
// 0x0020 (0x0020 - 0x0000)
struct FFortCollectionBookResearchItemNotification final
{
public:
	class FString                                 ResearchedItemId;                                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResearchedTemplateId;                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookResearchItemNotification) == 0x000008, "Wrong alignment on FFortCollectionBookResearchItemNotification");
static_assert(sizeof(FFortCollectionBookResearchItemNotification) == 0x000020, "Wrong size on FFortCollectionBookResearchItemNotification");
static_assert(offsetof(FFortCollectionBookResearchItemNotification, ResearchedItemId) == 0x000000, "Member 'FFortCollectionBookResearchItemNotification::ResearchedItemId' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookResearchItemNotification, ResearchedTemplateId) == 0x000010, "Member 'FFortCollectionBookResearchItemNotification::ResearchedTemplateId' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookClaimRewardNotification
// 0x0040 (0x0040 - 0x0000)
struct FFortCollectionBookClaimRewardNotification final
{
public:
	struct FMcpLootResult                         Loot;                                              // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 Page;                                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookClaimRewardNotification) == 0x000008, "Wrong alignment on FFortCollectionBookClaimRewardNotification");
static_assert(sizeof(FFortCollectionBookClaimRewardNotification) == 0x000040, "Wrong size on FFortCollectionBookClaimRewardNotification");
static_assert(offsetof(FFortCollectionBookClaimRewardNotification, Loot) == 0x000000, "Member 'FFortCollectionBookClaimRewardNotification::Loot' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookClaimRewardNotification, Page) == 0x000020, "Member 'FFortCollectionBookClaimRewardNotification::Page' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookClaimRewardNotification, Section) == 0x000030, "Member 'FFortCollectionBookClaimRewardNotification::Section' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertCompleteNotification
// 0x0020 (0x0020 - 0x0000)
struct FFortMissionAlertCompleteNotification final
{
public:
	struct FMcpLootResult                         LootGranted;                                       // 0x0000(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertCompleteNotification) == 0x000008, "Wrong alignment on FFortMissionAlertCompleteNotification");
static_assert(sizeof(FFortMissionAlertCompleteNotification) == 0x000020, "Wrong size on FFortMissionAlertCompleteNotification");
static_assert(offsetof(FFortMissionAlertCompleteNotification, LootGranted) == 0x000000, "Member 'FFortMissionAlertCompleteNotification::LootGranted' has a wrong offset!");

// ScriptStruct FortniteGame.FortTransmogResultNotification
// 0x0020 (0x0020 - 0x0000)
struct FFortTransmogResultNotification final
{
public:
	TArray<struct FMcpLootEntry>                  TransmoggedItems;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMcpLootEntry>                  RecycledItems;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTransmogResultNotification) == 0x000008, "Wrong alignment on FFortTransmogResultNotification");
static_assert(sizeof(FFortTransmogResultNotification) == 0x000020, "Wrong size on FFortTransmogResultNotification");
static_assert(offsetof(FFortTransmogResultNotification, TransmoggedItems) == 0x000000, "Member 'FFortTransmogResultNotification::TransmoggedItems' has a wrong offset!");
static_assert(offsetof(FFortTransmogResultNotification, RecycledItems) == 0x000010, "Member 'FFortTransmogResultNotification::RecycledItems' has a wrong offset!");

// ScriptStruct FortniteGame.FortTouchAimAssist_OwnerInfo
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FFortTouchAimAssist_OwnerInfo final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTouchAimAssist_OwnerInfo) == 0x000010, "Wrong alignment on FFortTouchAimAssist_OwnerInfo");
static_assert(sizeof(FFortTouchAimAssist_OwnerInfo) == 0x000090, "Wrong size on FFortTouchAimAssist_OwnerInfo");

// ScriptStruct FortniteGame.FortUpgradeItemRarityNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortUpgradeItemRarityNotification final
{
public:
	TArray<struct FMcpLootEntry>                  ItemsGranted;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUpgradeItemRarityNotification) == 0x000008, "Wrong alignment on FFortUpgradeItemRarityNotification");
static_assert(sizeof(FFortUpgradeItemRarityNotification) == 0x000010, "Wrong size on FFortUpgradeItemRarityNotification");
static_assert(offsetof(FFortUpgradeItemRarityNotification, ItemsGranted) == 0x000000, "Member 'FFortUpgradeItemRarityNotification::ItemsGranted' has a wrong offset!");

// ScriptStruct FortniteGame.FortConversionResultNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortConversionResultNotification final
{
public:
	TArray<struct FMcpLootEntry>                  ItemsGranted;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConversionResultNotification) == 0x000008, "Wrong alignment on FFortConversionResultNotification");
static_assert(sizeof(FFortConversionResultNotification) == 0x000010, "Wrong size on FFortConversionResultNotification");
static_assert(offsetof(FFortConversionResultNotification, ItemsGranted) == 0x000000, "Member 'FFortConversionResultNotification::ItemsGranted' has a wrong offset!");

// ScriptStruct FortniteGame.FortReceivedGiftedBoostXpNotification
// 0x0018 (0x0018 - 0x0000)
struct FFortReceivedGiftedBoostXpNotification final
{
public:
	int32                                         AmountBoostXpGifted;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GifterAccountId;                                   // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortReceivedGiftedBoostXpNotification) == 0x000008, "Wrong alignment on FFortReceivedGiftedBoostXpNotification");
static_assert(sizeof(FFortReceivedGiftedBoostXpNotification) == 0x000018, "Wrong size on FFortReceivedGiftedBoostXpNotification");
static_assert(offsetof(FFortReceivedGiftedBoostXpNotification, AmountBoostXpGifted) == 0x000000, "Member 'FFortReceivedGiftedBoostXpNotification::AmountBoostXpGifted' has a wrong offset!");
static_assert(offsetof(FFortReceivedGiftedBoostXpNotification, GifterAccountId) == 0x000008, "Member 'FFortReceivedGiftedBoostXpNotification::GifterAccountId' has a wrong offset!");

// ScriptStruct FortniteGame.OfferVoteInfo
// 0x0018 (0x0018 - 0x0000)
struct FOfferVoteInfo final
{
public:
	struct FDateTime                              FirstVoteAt;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastVoteAt;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteCount;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOfferVoteInfo) == 0x000008, "Wrong alignment on FOfferVoteInfo");
static_assert(sizeof(FOfferVoteInfo) == 0x000018, "Wrong size on FOfferVoteInfo");
static_assert(offsetof(FOfferVoteInfo, FirstVoteAt) == 0x000000, "Member 'FOfferVoteInfo::FirstVoteAt' has a wrong offset!");
static_assert(offsetof(FOfferVoteInfo, LastVoteAt) == 0x000008, "Member 'FOfferVoteInfo::LastVoteAt' has a wrong offset!");
static_assert(offsetof(FOfferVoteInfo, VoteCount) == 0x000010, "Member 'FOfferVoteInfo::VoteCount' has a wrong offset!");

// ScriptStruct FortniteGame.CommunityVoteInfo
// 0x0070 (0x0070 - 0x0000)
struct FCommunityVoteInfo final
{
public:
	class FString                                 ElectionId;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FOfferVoteInfo>    VoteHistory;                                       // 0x0010(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              LastVoteGranted;                                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VotesRemaining;                                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunityVoteInfo) == 0x000008, "Wrong alignment on FCommunityVoteInfo");
static_assert(sizeof(FCommunityVoteInfo) == 0x000070, "Wrong size on FCommunityVoteInfo");
static_assert(offsetof(FCommunityVoteInfo, ElectionId) == 0x000000, "Member 'FCommunityVoteInfo::ElectionId' has a wrong offset!");
static_assert(offsetof(FCommunityVoteInfo, VoteHistory) == 0x000010, "Member 'FCommunityVoteInfo::VoteHistory' has a wrong offset!");
static_assert(offsetof(FCommunityVoteInfo, LastVoteGranted) == 0x000060, "Member 'FCommunityVoteInfo::LastVoteGranted' has a wrong offset!");
static_assert(offsetof(FCommunityVoteInfo, VotesRemaining) == 0x000068, "Member 'FCommunityVoteInfo::VotesRemaining' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaLoadoutData
// 0x0020 (0x0020 - 0x0000)
struct FFortAthenaLoadoutData final
{
public:
	EAthenaCustomizationCategory                  SlotName;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemToSlot;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexWithinSlot;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaLoadoutData) == 0x000008, "Wrong alignment on FFortAthenaLoadoutData");
static_assert(sizeof(FFortAthenaLoadoutData) == 0x000020, "Wrong size on FFortAthenaLoadoutData");
static_assert(offsetof(FFortAthenaLoadoutData, SlotName) == 0x000000, "Member 'FFortAthenaLoadoutData::SlotName' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadoutData, ItemToSlot) == 0x000008, "Member 'FFortAthenaLoadoutData::ItemToSlot' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadoutData, IndexWithinSlot) == 0x000018, "Member 'FFortAthenaLoadoutData::IndexWithinSlot' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayTagQueryPerDifficulty
// 0x0060 (0x0060 - 0x0000)
struct FFortGameplayTagQueryPerDifficulty final
{
public:
	struct FDataTableRowHandle                    DifficultyInfo;                                    // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TagQueryToMatch;                                   // 0x0010(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Difficulty;                                        // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayTagQueryPerDifficulty) == 0x000008, "Wrong alignment on FFortGameplayTagQueryPerDifficulty");
static_assert(sizeof(FFortGameplayTagQueryPerDifficulty) == 0x000060, "Wrong size on FFortGameplayTagQueryPerDifficulty");
static_assert(offsetof(FFortGameplayTagQueryPerDifficulty, DifficultyInfo) == 0x000000, "Member 'FFortGameplayTagQueryPerDifficulty::DifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortGameplayTagQueryPerDifficulty, TagQueryToMatch) == 0x000010, "Member 'FFortGameplayTagQueryPerDifficulty::TagQueryToMatch' has a wrong offset!");
static_assert(offsetof(FFortGameplayTagQueryPerDifficulty, Difficulty) == 0x000058, "Member 'FFortGameplayTagQueryPerDifficulty::Difficulty' has a wrong offset!");

// ScriptStruct FortniteGame.FortCommonPublicPersona
// 0x0030 (0x0030 - 0x0000)
struct FFortCommonPublicPersona final
{
public:
	class FString                                 BannerIconId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerColorId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HomebaseName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCommonPublicPersona) == 0x000008, "Wrong alignment on FFortCommonPublicPersona");
static_assert(sizeof(FFortCommonPublicPersona) == 0x000030, "Wrong size on FFortCommonPublicPersona");
static_assert(offsetof(FFortCommonPublicPersona, BannerIconId) == 0x000000, "Member 'FFortCommonPublicPersona::BannerIconId' has a wrong offset!");
static_assert(offsetof(FFortCommonPublicPersona, BannerColorId) == 0x000010, "Member 'FFortCommonPublicPersona::BannerColorId' has a wrong offset!");
static_assert(offsetof(FFortCommonPublicPersona, HomebaseName) == 0x000020, "Member 'FFortCommonPublicPersona::HomebaseName' has a wrong offset!");

// ScriptStruct FortniteGame.FortWorldProfileUpdateRequest
// 0x00E8 (0x00E8 - 0x0000)
struct FFortWorldProfileUpdateRequest final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortMcpProfileWorld*>           WorldProfilesToSave;                               // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfRequests;                                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xB4];                                      // 0x0034(0x00B4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWorldProfileUpdateRequest) == 0x000008, "Wrong alignment on FFortWorldProfileUpdateRequest");
static_assert(sizeof(FFortWorldProfileUpdateRequest) == 0x0000E8, "Wrong size on FFortWorldProfileUpdateRequest");
static_assert(offsetof(FFortWorldProfileUpdateRequest, WorldProfilesToSave) == 0x000010, "Member 'FFortWorldProfileUpdateRequest::WorldProfilesToSave' has a wrong offset!");
static_assert(offsetof(FFortWorldProfileUpdateRequest, NumberOfRequests) == 0x000030, "Member 'FFortWorldProfileUpdateRequest::NumberOfRequests' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarSlot
// 0x0018 (0x0018 - 0x0000)
struct FQuickBarSlot final
{
public:
	TArray<struct FGuid>                          Items;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuickBarSlot) == 0x000008, "Wrong alignment on FQuickBarSlot");
static_assert(sizeof(FQuickBarSlot) == 0x000018, "Wrong size on FQuickBarSlot");
static_assert(offsetof(FQuickBarSlot, Items) == 0x000000, "Member 'FQuickBarSlot::Items' has a wrong offset!");
static_assert(offsetof(FQuickBarSlot, bEnabled) == 0x000010, "Member 'FQuickBarSlot::bEnabled' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBar
// 0x0090 (0x0090 - 0x0000)
struct FQuickBar final
{
public:
	int32                                         CurrentFocusedSlot;                                // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousFocusedSlot;                               // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryFocusedSlot;                              // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuickBarSlot>                  Slots;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FQuickBarData                          DataDefinition;                                    // 0x0020(0x0010)(Transient, RepSkip, NativeAccessSpecifierPrivate)
	TSet<class UFortItemDefinition*>              EquippedItemDefinitions;                           // 0x0030(0x0050)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPrivate)
	TArray<int32>                                 SharedVisibleSlotIndicesWhenUsingGamepad;          // 0x0080(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FQuickBar) == 0x000008, "Wrong alignment on FQuickBar");
static_assert(sizeof(FQuickBar) == 0x000090, "Wrong size on FQuickBar");
static_assert(offsetof(FQuickBar, CurrentFocusedSlot) == 0x000000, "Member 'FQuickBar::CurrentFocusedSlot' has a wrong offset!");
static_assert(offsetof(FQuickBar, PreviousFocusedSlot) == 0x000004, "Member 'FQuickBar::PreviousFocusedSlot' has a wrong offset!");
static_assert(offsetof(FQuickBar, SecondaryFocusedSlot) == 0x000008, "Member 'FQuickBar::SecondaryFocusedSlot' has a wrong offset!");
static_assert(offsetof(FQuickBar, Slots) == 0x000010, "Member 'FQuickBar::Slots' has a wrong offset!");
static_assert(offsetof(FQuickBar, DataDefinition) == 0x000020, "Member 'FQuickBar::DataDefinition' has a wrong offset!");
static_assert(offsetof(FQuickBar, EquippedItemDefinitions) == 0x000030, "Member 'FQuickBar::EquippedItemDefinitions' has a wrong offset!");
static_assert(offsetof(FQuickBar, SharedVisibleSlotIndicesWhenUsingGamepad) == 0x000080, "Member 'FQuickBar::SharedVisibleSlotIndicesWhenUsingGamepad' has a wrong offset!");

// ScriptStruct FortniteGame.FortWorldPlayerLoadout
// 0x0140 (0x0140 - 0x0000)
struct FFortWorldPlayerLoadout final
{
public:
	bool                                          bPlayerIsNew;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PinnedSchematicInstances;                          // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FQuickBar                              PrimaryQuickBarRecord;                             // 0x0018(0x0090)(NativeAccessSpecifierPublic)
	struct FQuickBar                              SecondaryQuickBarRecord;                           // 0x00A8(0x0090)(NativeAccessSpecifierPublic)
	int32                                         ZonesCompleted;                                    // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWorldPlayerLoadout) == 0x000008, "Wrong alignment on FFortWorldPlayerLoadout");
static_assert(sizeof(FFortWorldPlayerLoadout) == 0x000140, "Wrong size on FFortWorldPlayerLoadout");
static_assert(offsetof(FFortWorldPlayerLoadout, bPlayerIsNew) == 0x000000, "Member 'FFortWorldPlayerLoadout::bPlayerIsNew' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, PinnedSchematicInstances) == 0x000008, "Member 'FFortWorldPlayerLoadout::PinnedSchematicInstances' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, PrimaryQuickBarRecord) == 0x000018, "Member 'FFortWorldPlayerLoadout::PrimaryQuickBarRecord' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, SecondaryQuickBarRecord) == 0x0000A8, "Member 'FFortWorldPlayerLoadout::SecondaryQuickBarRecord' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, ZonesCompleted) == 0x000138, "Member 'FFortWorldPlayerLoadout::ZonesCompleted' has a wrong offset!");

// ScriptStruct FortniteGame.FortTwitchPendingQuestNotification
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortTwitchPendingQuestNotification final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTwitchPendingQuestNotification) == 0x000008, "Wrong alignment on FFortTwitchPendingQuestNotification");
static_assert(sizeof(FFortTwitchPendingQuestNotification) == 0x000010, "Wrong size on FFortTwitchPendingQuestNotification");

// ScriptStruct FortniteGame.TileGroupInfo
// 0x0018 (0x0018 - 0x0000)
struct FTileGroupInfo final
{
public:
	class UWorldTileGroup*                        TileGroup;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinTiles;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTiles;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPlaceAdjacent : 1;                                // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTileGroupInfo) == 0x000008, "Wrong alignment on FTileGroupInfo");
static_assert(sizeof(FTileGroupInfo) == 0x000018, "Wrong size on FTileGroupInfo");
static_assert(offsetof(FTileGroupInfo, TileGroup) == 0x000000, "Member 'FTileGroupInfo::TileGroup' has a wrong offset!");
static_assert(offsetof(FTileGroupInfo, Weight) == 0x000008, "Member 'FTileGroupInfo::Weight' has a wrong offset!");
static_assert(offsetof(FTileGroupInfo, MinTiles) == 0x00000C, "Member 'FTileGroupInfo::MinTiles' has a wrong offset!");
static_assert(offsetof(FTileGroupInfo, MaxTiles) == 0x000010, "Member 'FTileGroupInfo::MaxTiles' has a wrong offset!");

// ScriptStruct FortniteGame.TileGroupSelection
// 0x0010 (0x0010 - 0x0000)
struct FTileGroupSelection final
{
public:
	TArray<struct FTileGroupInfo>                 TileGroupOptions;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileGroupSelection) == 0x000008, "Wrong alignment on FTileGroupSelection");
static_assert(sizeof(FTileGroupSelection) == 0x000010, "Wrong size on FTileGroupSelection");
static_assert(offsetof(FTileGroupSelection, TileGroupOptions) == 0x000000, "Member 'FTileGroupSelection::TileGroupOptions' has a wrong offset!");

// ScriptStruct FortniteGame.FortTwitchViewerCompletedQuestNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortTwitchViewerCompletedQuestNotification final
{
public:
	TArray<struct FFortTwitchViewerNameAndAccountId> ViewerIds;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTwitchViewerCompletedQuestNotification) == 0x000008, "Wrong alignment on FFortTwitchViewerCompletedQuestNotification");
static_assert(sizeof(FFortTwitchViewerCompletedQuestNotification) == 0x000010, "Wrong size on FFortTwitchViewerCompletedQuestNotification");
static_assert(offsetof(FFortTwitchViewerCompletedQuestNotification, ViewerIds) == 0x000000, "Member 'FFortTwitchViewerCompletedQuestNotification::ViewerIds' has a wrong offset!");

// ScriptStruct FortniteGame.XboxDedicatedServerSessionCreationParams
// 0x0030 (0x0030 - 0x0000)
struct FXboxDedicatedServerSessionCreationParams final
{
public:
	class FString                                 TitleId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SandboxId;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         XboxUserIds;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXboxDedicatedServerSessionCreationParams) == 0x000008, "Wrong alignment on FXboxDedicatedServerSessionCreationParams");
static_assert(sizeof(FXboxDedicatedServerSessionCreationParams) == 0x000030, "Wrong size on FXboxDedicatedServerSessionCreationParams");
static_assert(offsetof(FXboxDedicatedServerSessionCreationParams, TitleId) == 0x000000, "Member 'FXboxDedicatedServerSessionCreationParams::TitleId' has a wrong offset!");
static_assert(offsetof(FXboxDedicatedServerSessionCreationParams, SandboxId) == 0x000010, "Member 'FXboxDedicatedServerSessionCreationParams::SandboxId' has a wrong offset!");
static_assert(offsetof(FXboxDedicatedServerSessionCreationParams, XboxUserIds) == 0x000020, "Member 'FXboxDedicatedServerSessionCreationParams::XboxUserIds' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipDisplayStatsCategory
// 0x0028 (0x0028 - 0x0000)
struct FFortTooltipDisplayStatsCategory final
{
public:
	class FText                                   CategoryName;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTooltipDisplayStatInfo>    TooltipStats;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTooltipDisplayStatsCategory) == 0x000008, "Wrong alignment on FFortTooltipDisplayStatsCategory");
static_assert(sizeof(FFortTooltipDisplayStatsCategory) == 0x000028, "Wrong size on FFortTooltipDisplayStatsCategory");
static_assert(offsetof(FFortTooltipDisplayStatsCategory, CategoryName) == 0x000000, "Member 'FFortTooltipDisplayStatsCategory::CategoryName' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayStatsCategory, TooltipStats) == 0x000018, "Member 'FFortTooltipDisplayStatsCategory::TooltipStats' has a wrong offset!");

// ScriptStruct FortniteGame.SectionNameAndWeight
// 0x000C (0x000C - 0x0000)
struct FSectionNameAndWeight final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectionWeight;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSectionNameAndWeight) == 0x000004, "Wrong alignment on FSectionNameAndWeight");
static_assert(sizeof(FSectionNameAndWeight) == 0x00000C, "Wrong size on FSectionNameAndWeight");
static_assert(offsetof(FSectionNameAndWeight, SectionName) == 0x000000, "Member 'FSectionNameAndWeight::SectionName' has a wrong offset!");
static_assert(offsetof(FSectionNameAndWeight, SectionWeight) == 0x000008, "Member 'FSectionNameAndWeight::SectionWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortMinigameStatQuery
// 0x0018 (0x0018 - 0x0000)
struct FFortMinigameStatQuery final
{
public:
	TSubclassOf<class UFortMinigameStatFilter>    Stat;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMinigameStatScope                        Scope;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAnyMatch : 1;                                     // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EFortMinigameStatOperation                    Operation;                                         // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bStaticCount : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMinigameStatQuery) == 0x000008, "Wrong alignment on FFortMinigameStatQuery");
static_assert(sizeof(FFortMinigameStatQuery) == 0x000018, "Wrong size on FFortMinigameStatQuery");
static_assert(offsetof(FFortMinigameStatQuery, Stat) == 0x000000, "Member 'FFortMinigameStatQuery::Stat' has a wrong offset!");
static_assert(offsetof(FFortMinigameStatQuery, Scope) == 0x000008, "Member 'FFortMinigameStatQuery::Scope' has a wrong offset!");
static_assert(offsetof(FFortMinigameStatQuery, Operation) == 0x00000A, "Member 'FFortMinigameStatQuery::Operation' has a wrong offset!");
static_assert(offsetof(FFortMinigameStatQuery, Value) == 0x00000C, "Member 'FFortMinigameStatQuery::Value' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameEndCondition
// 0x0030 (0x0030 - 0x0000)
struct FMinigameEndCondition final
{
public:
	struct FFortMinigameStatQuery                 StatQuery;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EMinigameTeamListType                         TeamListType;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 TeamList;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinigameEndCondition) == 0x000008, "Wrong alignment on FMinigameEndCondition");
static_assert(sizeof(FMinigameEndCondition) == 0x000030, "Wrong size on FMinigameEndCondition");
static_assert(offsetof(FMinigameEndCondition, StatQuery) == 0x000000, "Member 'FMinigameEndCondition::StatQuery' has a wrong offset!");
static_assert(offsetof(FMinigameEndCondition, TeamListType) == 0x000018, "Member 'FMinigameEndCondition::TeamListType' has a wrong offset!");
static_assert(offsetof(FMinigameEndCondition, TeamList) == 0x000020, "Member 'FMinigameEndCondition::TeamList' has a wrong offset!");

// ScriptStruct FortniteGame.MinigamePlayerBucket
// 0x0018 (0x0018 - 0x0000)
struct FMinigamePlayerBucket final
{
public:
	uint8                                         TeamIdAtRoundStart;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DesiredTeamSizePercent;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUniqueNetIdRepl>               PlayerIds;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinigamePlayerBucket) == 0x000008, "Wrong alignment on FMinigamePlayerBucket");
static_assert(sizeof(FMinigamePlayerBucket) == 0x000018, "Wrong size on FMinigamePlayerBucket");
static_assert(offsetof(FMinigamePlayerBucket, TeamIdAtRoundStart) == 0x000000, "Member 'FMinigamePlayerBucket::TeamIdAtRoundStart' has a wrong offset!");
static_assert(offsetof(FMinigamePlayerBucket, DesiredTeamSizePercent) == 0x000004, "Member 'FMinigamePlayerBucket::DesiredTeamSizePercent' has a wrong offset!");
static_assert(offsetof(FMinigamePlayerBucket, PlayerIds) == 0x000008, "Member 'FMinigamePlayerBucket::PlayerIds' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameScoreTracker
// 0x0028 (0x0028 - 0x0000)
struct FMinigameScoreTracker final
{
public:
	struct FMinigameScoreData                     GroupScore;                                        // 0x0000(0x0004)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMinigameTeamScoreData>         TeamScores;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMinigameSoloScoreData>         SoloScores;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinigameScoreTracker) == 0x000008, "Wrong alignment on FMinigameScoreTracker");
static_assert(sizeof(FMinigameScoreTracker) == 0x000028, "Wrong size on FMinigameScoreTracker");
static_assert(offsetof(FMinigameScoreTracker, GroupScore) == 0x000000, "Member 'FMinigameScoreTracker::GroupScore' has a wrong offset!");
static_assert(offsetof(FMinigameScoreTracker, TeamScores) == 0x000008, "Member 'FMinigameScoreTracker::TeamScores' has a wrong offset!");
static_assert(offsetof(FMinigameScoreTracker, SoloScores) == 0x000018, "Member 'FMinigameScoreTracker::SoloScores' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameScoreTemplate
// 0x000C (0x000C - 0x0000)
struct FMinigameScoreTemplate final
{
public:
	EMinigameScoreType                            ScoreType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumHighScores;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAscending;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinigameScoreTemplate) == 0x000004, "Wrong alignment on FMinigameScoreTemplate");
static_assert(sizeof(FMinigameScoreTemplate) == 0x00000C, "Wrong size on FMinigameScoreTemplate");
static_assert(offsetof(FMinigameScoreTemplate, ScoreType) == 0x000000, "Member 'FMinigameScoreTemplate::ScoreType' has a wrong offset!");
static_assert(offsetof(FMinigameScoreTemplate, NumHighScores) == 0x000004, "Member 'FMinigameScoreTemplate::NumHighScores' has a wrong offset!");
static_assert(offsetof(FMinigameScoreTemplate, bAscending) == 0x000008, "Member 'FMinigameScoreTemplate::bAscending' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameScoreArray
// 0x0028 (0x0130 - 0x0108)
struct FMinigameScoreArray final : public FFastArraySerializer
{
public:
	TArray<struct FMinigameScoreEntry>            Scores;                                            // 0x0108(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMinigameScoreEntry>            HighScores;                                        // 0x0118(0x0010)(Edit, ZeroConstructor, Transient, EditConst, RepSkip, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0128(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinigameScoreArray) == 0x000008, "Wrong alignment on FMinigameScoreArray");
static_assert(sizeof(FMinigameScoreArray) == 0x000130, "Wrong size on FMinigameScoreArray");
static_assert(offsetof(FMinigameScoreArray, Scores) == 0x000108, "Member 'FMinigameScoreArray::Scores' has a wrong offset!");
static_assert(offsetof(FMinigameScoreArray, HighScores) == 0x000118, "Member 'FMinigameScoreArray::HighScores' has a wrong offset!");
static_assert(offsetof(FMinigameScoreArray, Owner) == 0x000128, "Member 'FMinigameScoreArray::Owner' has a wrong offset!");

// ScriptStruct FortniteGame.MinigameHighScoreEntryRow
// 0x0018 (0x0020 - 0x0008)
struct FMinigameHighScoreEntryRow final : public FTableRowBase
{
public:
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinigameHighScoreEntryRow) == 0x000008, "Wrong alignment on FMinigameHighScoreEntryRow");
static_assert(sizeof(FMinigameHighScoreEntryRow) == 0x000020, "Wrong size on FMinigameHighScoreEntryRow");
static_assert(offsetof(FMinigameHighScoreEntryRow, PlayerName) == 0x000008, "Member 'FMinigameHighScoreEntryRow::PlayerName' has a wrong offset!");
static_assert(offsetof(FMinigameHighScoreEntryRow, Score) == 0x000018, "Member 'FMinigameHighScoreEntryRow::Score' has a wrong offset!");

// ScriptStruct FortniteGame.FortVolumeManagerBlackListObjects
// 0x0028 (0x0030 - 0x0008)
struct FFortVolumeManagerBlackListObjects final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UObject>                 ObjectPath;                                        // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortVolumeManagerBlackListObjects) == 0x000008, "Wrong alignment on FFortVolumeManagerBlackListObjects");
static_assert(sizeof(FFortVolumeManagerBlackListObjects) == 0x000030, "Wrong size on FFortVolumeManagerBlackListObjects");
static_assert(offsetof(FFortVolumeManagerBlackListObjects, ObjectPath) == 0x000008, "Member 'FFortVolumeManagerBlackListObjects::ObjectPath' has a wrong offset!");

// ScriptStruct FortniteGame.FortMinigameTeamStats
// 0x0008 (0x0018 - 0x0010)
struct FFortMinigameTeamStats final : public FFortMinigameGroupStats
{
public:
	uint8                                         Team;                                              // 0x0010(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMinigameTeamStats) == 0x000008, "Wrong alignment on FFortMinigameTeamStats");
static_assert(sizeof(FFortMinigameTeamStats) == 0x000018, "Wrong size on FFortMinigameTeamStats");
static_assert(offsetof(FFortMinigameTeamStats, Team) == 0x000010, "Member 'FFortMinigameTeamStats::Team' has a wrong offset!");

// ScriptStruct FortniteGame.FortMiniMapData
// 0x0080 (0x0080 - 0x0000)
struct FFortMiniMapData final
{
public:
	class UTexture2D*                             MiniMapIcon;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              IconScale;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseIconSize : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsVisible : 1;                                    // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsVisibleOnMiniMap : 1;                           // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowVerticalOffset : 1;                           // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowFarOffIndicator : 1;                          // 0x0010(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisplayIconEvenOnFogOfWar : 1;                    // 0x0010(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowLocalOverrides : 1;                          // 0x0010(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseTeamAffiliationColors : 1;                     // 0x0010(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FriendColor;                                       // 0x0024(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EnemyColor;                                        // 0x0034(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NeutralColor;                                      // 0x0044(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PulseColor;                                        // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorPulsesPerSecond;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizePulsesPerSecond;                               // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewableDistance;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0070(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMiniMapData) == 0x000008, "Wrong alignment on FFortMiniMapData");
static_assert(sizeof(FFortMiniMapData) == 0x000080, "Wrong size on FFortMiniMapData");
static_assert(offsetof(FFortMiniMapData, MiniMapIcon) == 0x000000, "Member 'FFortMiniMapData::MiniMapIcon' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, IconScale) == 0x000008, "Member 'FFortMiniMapData::IconScale' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, Color) == 0x000014, "Member 'FFortMiniMapData::Color' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, FriendColor) == 0x000024, "Member 'FFortMiniMapData::FriendColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, EnemyColor) == 0x000034, "Member 'FFortMiniMapData::EnemyColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, NeutralColor) == 0x000044, "Member 'FFortMiniMapData::NeutralColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, PulseColor) == 0x000054, "Member 'FFortMiniMapData::PulseColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, ColorPulsesPerSecond) == 0x000064, "Member 'FFortMiniMapData::ColorPulsesPerSecond' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, SizePulsesPerSecond) == 0x000068, "Member 'FFortMiniMapData::SizePulsesPerSecond' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, ViewableDistance) == 0x00006C, "Member 'FFortMiniMapData::ViewableDistance' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, LocationOffset) == 0x000070, "Member 'FFortMiniMapData::LocationOffset' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, Priority) == 0x00007C, "Member 'FFortMiniMapData::Priority' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionFocusDisplayData
// 0x0020 (0x0020 - 0x0000)
struct FFortMissionFocusDisplayData final
{
public:
	class FText                                   CurrentFocusDisplayText;                           // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	float                                         CurrentFocusPercentage;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionFocusDisplayData) == 0x000008, "Wrong alignment on FFortMissionFocusDisplayData");
static_assert(sizeof(FFortMissionFocusDisplayData) == 0x000020, "Wrong size on FFortMissionFocusDisplayData");
static_assert(offsetof(FFortMissionFocusDisplayData, CurrentFocusDisplayText) == 0x000000, "Member 'FFortMissionFocusDisplayData::CurrentFocusDisplayText' has a wrong offset!");
static_assert(offsetof(FFortMissionFocusDisplayData, CurrentFocusPercentage) == 0x000018, "Member 'FFortMissionFocusDisplayData::CurrentFocusPercentage' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPlacementActorPreferredTagInfo
// 0x0038 (0x0038 - 0x0000)
struct FFortMissionPlacementActorPreferredTagInfo final
{
public:
	struct FDataTableRowHandle                    DifficultyInfo;                                    // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PlacementActorPreferredTags;                       // 0x0010(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Difficulty;                                        // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionPlacementActorPreferredTagInfo) == 0x000008, "Wrong alignment on FFortMissionPlacementActorPreferredTagInfo");
static_assert(sizeof(FFortMissionPlacementActorPreferredTagInfo) == 0x000038, "Wrong size on FFortMissionPlacementActorPreferredTagInfo");
static_assert(offsetof(FFortMissionPlacementActorPreferredTagInfo, DifficultyInfo) == 0x000000, "Member 'FFortMissionPlacementActorPreferredTagInfo::DifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorPreferredTagInfo, PlacementActorPreferredTags) == 0x000010, "Member 'FFortMissionPlacementActorPreferredTagInfo::PlacementActorPreferredTags' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorPreferredTagInfo, Difficulty) == 0x000030, "Member 'FFortMissionPlacementActorPreferredTagInfo::Difficulty' has a wrong offset!");

// ScriptStruct FortniteGame.FortActiveThreatPlayerData
// 0x0010 (0x0010 - 0x0000)
struct FFortActiveThreatPlayerData final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   Encounter;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortActiveThreatPlayerData) == 0x000008, "Wrong alignment on FFortActiveThreatPlayerData");
static_assert(sizeof(FFortActiveThreatPlayerData) == 0x000010, "Wrong size on FFortActiveThreatPlayerData");
static_assert(offsetof(FFortActiveThreatPlayerData, PlayerController) == 0x000000, "Member 'FFortActiveThreatPlayerData::PlayerController' has a wrong offset!");
static_assert(offsetof(FFortActiveThreatPlayerData, Encounter) == 0x000008, "Member 'FFortActiveThreatPlayerData::Encounter' has a wrong offset!");

// ScriptStruct FortniteGame.FortReactiveQuestDialogue
// 0x0010 (0x0010 - 0x0000)
struct FFortReactiveQuestDialogue final
{
public:
	class UFortConversation*                      Conversation;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayOnObjectiveCount;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortReactiveQuestDialogue) == 0x000008, "Wrong alignment on FFortReactiveQuestDialogue");
static_assert(sizeof(FFortReactiveQuestDialogue) == 0x000010, "Wrong size on FFortReactiveQuestDialogue");
static_assert(offsetof(FFortReactiveQuestDialogue, Conversation) == 0x000000, "Member 'FFortReactiveQuestDialogue::Conversation' has a wrong offset!");
static_assert(offsetof(FFortReactiveQuestDialogue, PlayOnObjectiveCount) == 0x000008, "Member 'FFortReactiveQuestDialogue::PlayOnObjectiveCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortRiftSpawnerData
// 0x00E8 (0x00E8 - 0x0000)
struct FFortRiftSpawnerData final
{
public:
	class ABuildingRift*                          Rift;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   Encounter;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterSequence*               EncounterSequence;                                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFortPlayerPawn*>                PlayersInRange;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TriggerDamagePercentage;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            KillingInstigator;                                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 KillingDamageCauser;                               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           DeactivationTimerHandle;                           // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           BurstFallbackTimerHandle;                          // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 OverrideSettings;                                  // 0x0050(0x0090)(NativeAccessSpecifierPublic)
	bool                                          bUseOverrideSettings;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRiftSpawnerData) == 0x000008, "Wrong alignment on FFortRiftSpawnerData");
static_assert(sizeof(FFortRiftSpawnerData) == 0x0000E8, "Wrong size on FFortRiftSpawnerData");
static_assert(offsetof(FFortRiftSpawnerData, Rift) == 0x000000, "Member 'FFortRiftSpawnerData::Rift' has a wrong offset!");
static_assert(offsetof(FFortRiftSpawnerData, Encounter) == 0x000008, "Member 'FFortRiftSpawnerData::Encounter' has a wrong offset!");
static_assert(offsetof(FFortRiftSpawnerData, EncounterSequence) == 0x000010, "Member 'FFortRiftSpawnerData::EncounterSequence' has a wrong offset!");
static_assert(offsetof(FFortRiftSpawnerData, PlayersInRange) == 0x000018, "Member 'FFortRiftSpawnerData::PlayersInRange' has a wrong offset!");
static_assert(offsetof(FFortRiftSpawnerData, TriggerDamagePercentage) == 0x000028, "Member 'FFortRiftSpawnerData::TriggerDamagePercentage' has a wrong offset!");
static_assert(offsetof(FFortRiftSpawnerData, KillingInstigator) == 0x000030, "Member 'FFortRiftSpawnerData::KillingInstigator' has a wrong offset!");
static_assert(offsetof(FFortRiftSpawnerData, KillingDamageCauser) == 0x000038, "Member 'FFortRiftSpawnerData::KillingDamageCauser' has a wrong offset!");
static_assert(offsetof(FFortRiftSpawnerData, DeactivationTimerHandle) == 0x000040, "Member 'FFortRiftSpawnerData::DeactivationTimerHandle' has a wrong offset!");
static_assert(offsetof(FFortRiftSpawnerData, BurstFallbackTimerHandle) == 0x000048, "Member 'FFortRiftSpawnerData::BurstFallbackTimerHandle' has a wrong offset!");
static_assert(offsetof(FFortRiftSpawnerData, OverrideSettings) == 0x000050, "Member 'FFortRiftSpawnerData::OverrideSettings' has a wrong offset!");
static_assert(offsetof(FFortRiftSpawnerData, bUseOverrideSettings) == 0x0000E0, "Member 'FFortRiftSpawnerData::bUseOverrideSettings' has a wrong offset!");

// ScriptStruct FortniteGame.VehiclePlacementInfo
// 0x0010 (0x0010 - 0x0000)
struct FVehiclePlacementInfo final
{
public:
	TWeakObjectPtr<class AActor>                  PlacementActor;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            AppliedGameplayEffectHandle;                       // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehiclePlacementInfo) == 0x000004, "Wrong alignment on FVehiclePlacementInfo");
static_assert(sizeof(FVehiclePlacementInfo) == 0x000010, "Wrong size on FVehiclePlacementInfo");
static_assert(offsetof(FVehiclePlacementInfo, PlacementActor) == 0x000000, "Member 'FVehiclePlacementInfo::PlacementActor' has a wrong offset!");
static_assert(offsetof(FVehiclePlacementInfo, AppliedGameplayEffectHandle) == 0x000008, "Member 'FVehiclePlacementInfo::AppliedGameplayEffectHandle' has a wrong offset!");

// ScriptStruct FortniteGame.MissionVehicleSpawnSet
// 0x0050 (0x0050 - 0x0000)
struct FMissionVehicleSpawnSet final
{
public:
	TSubclassOf<class AFortAthenaVehicle>         VehicleClass;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinSpawnCount;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSpawnCount;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnOffset;                                       // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            OccupiedLocationGameplayEffect;                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OccupiedLocationGameplayEffectLevel;               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  OccupiedLocationAdditionalContextTags;             // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionVehicleSpawnSet) == 0x000008, "Wrong alignment on FMissionVehicleSpawnSet");
static_assert(sizeof(FMissionVehicleSpawnSet) == 0x000050, "Wrong size on FMissionVehicleSpawnSet");
static_assert(offsetof(FMissionVehicleSpawnSet, VehicleClass) == 0x000000, "Member 'FMissionVehicleSpawnSet::VehicleClass' has a wrong offset!");
static_assert(offsetof(FMissionVehicleSpawnSet, MinSpawnCount) == 0x000008, "Member 'FMissionVehicleSpawnSet::MinSpawnCount' has a wrong offset!");
static_assert(offsetof(FMissionVehicleSpawnSet, MaxSpawnCount) == 0x00000C, "Member 'FMissionVehicleSpawnSet::MaxSpawnCount' has a wrong offset!");
static_assert(offsetof(FMissionVehicleSpawnSet, SpawnOffset) == 0x000010, "Member 'FMissionVehicleSpawnSet::SpawnOffset' has a wrong offset!");
static_assert(offsetof(FMissionVehicleSpawnSet, OccupiedLocationGameplayEffect) == 0x000020, "Member 'FMissionVehicleSpawnSet::OccupiedLocationGameplayEffect' has a wrong offset!");
static_assert(offsetof(FMissionVehicleSpawnSet, OccupiedLocationGameplayEffectLevel) == 0x000028, "Member 'FMissionVehicleSpawnSet::OccupiedLocationGameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FMissionVehicleSpawnSet, OccupiedLocationAdditionalContextTags) == 0x000030, "Member 'FMissionVehicleSpawnSet::OccupiedLocationAdditionalContextTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertData
// 0x0060 (0x0068 - 0x0008)
struct FFortMissionAlertData final : public FTableRowBase
{
public:
	class FName                                   CategoryRowName;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpreadRowName;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredEventFlag;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyUsedForSpreading;                             // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumTileDifficulty;                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumTileDifficulty;                             // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           RestrictedMissionGens;                             // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 LootTierGroup;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModifierTierGroup;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertData) == 0x000008, "Wrong alignment on FFortMissionAlertData");
static_assert(sizeof(FFortMissionAlertData) == 0x000068, "Wrong size on FFortMissionAlertData");
static_assert(offsetof(FFortMissionAlertData, CategoryRowName) == 0x000008, "Member 'FFortMissionAlertData::CategoryRowName' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, SpreadRowName) == 0x000010, "Member 'FFortMissionAlertData::SpreadRowName' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, RequiredEventFlag) == 0x000018, "Member 'FFortMissionAlertData::RequiredEventFlag' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, bOnlyUsedForSpreading) == 0x000028, "Member 'FFortMissionAlertData::bOnlyUsedForSpreading' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, MinimumTileDifficulty) == 0x00002C, "Member 'FFortMissionAlertData::MinimumTileDifficulty' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, MaximumTileDifficulty) == 0x000030, "Member 'FFortMissionAlertData::MaximumTileDifficulty' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, RestrictedMissionGens) == 0x000038, "Member 'FFortMissionAlertData::RestrictedMissionGens' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, LootTierGroup) == 0x000048, "Member 'FFortMissionAlertData::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, ModifierTierGroup) == 0x000058, "Member 'FFortMissionAlertData::ModifierTierGroup' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertCategoryData
// 0x0060 (0x0068 - 0x0008)
struct FFortMissionAlertCategoryData final : public FTableRowBase
{
public:
	class FName                                   CategoryRowName;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MissionAlertRepeatable;                            // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Timer;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CategoryTagsContainer;                             // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  VisualizationTagsContainer;                        // 0x0048(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertCategoryData) == 0x000008, "Wrong alignment on FFortMissionAlertCategoryData");
static_assert(sizeof(FFortMissionAlertCategoryData) == 0x000068, "Wrong size on FFortMissionAlertCategoryData");
static_assert(offsetof(FFortMissionAlertCategoryData, CategoryRowName) == 0x000008, "Member 'FFortMissionAlertCategoryData::CategoryRowName' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertCategoryData, Priority) == 0x000010, "Member 'FFortMissionAlertCategoryData::Priority' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertCategoryData, MissionAlertRepeatable) == 0x000014, "Member 'FFortMissionAlertCategoryData::MissionAlertRepeatable' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertCategoryData, Timer) == 0x000018, "Member 'FFortMissionAlertCategoryData::Timer' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertCategoryData, CategoryTagsContainer) == 0x000028, "Member 'FFortMissionAlertCategoryData::CategoryTagsContainer' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertCategoryData, VisualizationTagsContainer) == 0x000048, "Member 'FFortMissionAlertCategoryData::VisualizationTagsContainer' has a wrong offset!");

// ScriptStruct FortniteGame.FortDifficultyOptionBudget
// 0x0030 (0x0030 - 0x0000)
struct FFortDifficultyOptionBudget final
{
public:
	struct FGameplayTagContainer                  BudgetTypeTags;                                    // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   DifficultyOptionPointsCurve;                       // 0x0020(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDifficultyOptionBudget) == 0x000008, "Wrong alignment on FFortDifficultyOptionBudget");
static_assert(sizeof(FFortDifficultyOptionBudget) == 0x000030, "Wrong size on FFortDifficultyOptionBudget");
static_assert(offsetof(FFortDifficultyOptionBudget, BudgetTypeTags) == 0x000000, "Member 'FFortDifficultyOptionBudget::BudgetTypeTags' has a wrong offset!");
static_assert(offsetof(FFortDifficultyOptionBudget, DifficultyOptionPointsCurve) == 0x000020, "Member 'FFortDifficultyOptionBudget::DifficultyOptionPointsCurve' has a wrong offset!");

// ScriptStruct FortniteGame.PerDifficultyMissionGenerationInfo
// 0x0030 (0x0030 - 0x0000)
struct FPerDifficultyMissionGenerationInfo final
{
public:
	struct FDataTableRowHandle                    MinDifficulty;                                     // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    MaxDifficulty;                                     // 0x0010(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FMissionGenerationInfo>         MissionGenerationInfos;                            // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerDifficultyMissionGenerationInfo) == 0x000008, "Wrong alignment on FPerDifficultyMissionGenerationInfo");
static_assert(sizeof(FPerDifficultyMissionGenerationInfo) == 0x000030, "Wrong size on FPerDifficultyMissionGenerationInfo");
static_assert(offsetof(FPerDifficultyMissionGenerationInfo, MinDifficulty) == 0x000000, "Member 'FPerDifficultyMissionGenerationInfo::MinDifficulty' has a wrong offset!");
static_assert(offsetof(FPerDifficultyMissionGenerationInfo, MaxDifficulty) == 0x000010, "Member 'FPerDifficultyMissionGenerationInfo::MaxDifficulty' has a wrong offset!");
static_assert(offsetof(FPerDifficultyMissionGenerationInfo, MissionGenerationInfos) == 0x000020, "Member 'FPerDifficultyMissionGenerationInfo::MissionGenerationInfos' has a wrong offset!");

// ScriptStruct FortniteGame.ZoneLoadingScreenHeadingConfig
// 0x0038 (0x0038 - 0x0000)
struct FZoneLoadingScreenHeadingConfig final
{
public:
	class UTexture2D*                             HeadingImage;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Heading;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   HeadingDescription;                                // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneLoadingScreenHeadingConfig) == 0x000008, "Wrong alignment on FZoneLoadingScreenHeadingConfig");
static_assert(sizeof(FZoneLoadingScreenHeadingConfig) == 0x000038, "Wrong size on FZoneLoadingScreenHeadingConfig");
static_assert(offsetof(FZoneLoadingScreenHeadingConfig, HeadingImage) == 0x000000, "Member 'FZoneLoadingScreenHeadingConfig::HeadingImage' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenHeadingConfig, Heading) == 0x000008, "Member 'FZoneLoadingScreenHeadingConfig::Heading' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenHeadingConfig, HeadingDescription) == 0x000020, "Member 'FZoneLoadingScreenHeadingConfig::HeadingDescription' has a wrong offset!");

// ScriptStruct FortniteGame.ZoneLoadingScreenConfig
// 0x0110 (0x0110 - 0x0000)
struct FZoneLoadingScreenConfig final
{
public:
	TSoftObjectPtr<class UTexture2D>              BackgroundImage;                                   // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleDescription;                                  // 0x0028(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0040(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FZoneLoadingScreenHeadingConfig        Headings[0x3];                                     // 0x0058(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UFortTips*>                      LoadingTips;                                       // 0x0100(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneLoadingScreenConfig) == 0x000008, "Wrong alignment on FZoneLoadingScreenConfig");
static_assert(sizeof(FZoneLoadingScreenConfig) == 0x000110, "Wrong size on FZoneLoadingScreenConfig");
static_assert(offsetof(FZoneLoadingScreenConfig, BackgroundImage) == 0x000000, "Member 'FZoneLoadingScreenConfig::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenConfig, TitleDescription) == 0x000028, "Member 'FZoneLoadingScreenConfig::TitleDescription' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenConfig, Title) == 0x000040, "Member 'FZoneLoadingScreenConfig::Title' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenConfig, Headings) == 0x000058, "Member 'FZoneLoadingScreenConfig::Headings' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenConfig, LoadingTips) == 0x000100, "Member 'FZoneLoadingScreenConfig::LoadingTips' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionInfoOption
// 0x0030 (0x0030 - 0x0000)
struct FFortMissionInfoOption final
{
public:
	TSoftObjectPtr<class UFortMissionInfo>        MissionInfo;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDifficultyLevel;                                // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionInfoOption) == 0x000008, "Wrong alignment on FFortMissionInfoOption");
static_assert(sizeof(FFortMissionInfoOption) == 0x000030, "Wrong size on FFortMissionInfoOption");
static_assert(offsetof(FFortMissionInfoOption, MissionInfo) == 0x000000, "Member 'FFortMissionInfoOption::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortMissionInfoOption, MinDifficultyLevel) == 0x000028, "Member 'FFortMissionInfoOption::MinDifficultyLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortTimeOfDayTheme
// 0x0040 (0x0040 - 0x0000)
struct FFortTimeOfDayTheme final
{
public:
	TArray<class UFortTimeOfDayCollection*>       TimeOfDayCollections;                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           AdditionalTimeOfDayManagers;                       // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           ProhibitedTimeOfDayManagers;                       // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           ValidTimeOfDayManagers;                            // 0x0030(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortTimeOfDayTheme) == 0x000008, "Wrong alignment on FFortTimeOfDayTheme");
static_assert(sizeof(FFortTimeOfDayTheme) == 0x000040, "Wrong size on FFortTimeOfDayTheme");
static_assert(offsetof(FFortTimeOfDayTheme, TimeOfDayCollections) == 0x000000, "Member 'FFortTimeOfDayTheme::TimeOfDayCollections' has a wrong offset!");
static_assert(offsetof(FFortTimeOfDayTheme, AdditionalTimeOfDayManagers) == 0x000010, "Member 'FFortTimeOfDayTheme::AdditionalTimeOfDayManagers' has a wrong offset!");
static_assert(offsetof(FFortTimeOfDayTheme, ProhibitedTimeOfDayManagers) == 0x000020, "Member 'FFortTimeOfDayTheme::ProhibitedTimeOfDayManagers' has a wrong offset!");
static_assert(offsetof(FFortTimeOfDayTheme, ValidTimeOfDayManagers) == 0x000030, "Member 'FFortTimeOfDayTheme::ValidTimeOfDayManagers' has a wrong offset!");

// ScriptStruct FortniteGame.MissionPerDifficultyProperties
// 0x0068 (0x0068 - 0x0000)
struct FMissionPerDifficultyProperties final
{
public:
	TArray<struct FDataTableRowHandle>            ValidDifficulties;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortTimeOfDayTheme                    OverrideTimeOfDayTheme;                            // 0x0010(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortGlobalWindInfo                    OverrideGlobalWindInfo;                            // 0x0050(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionPerDifficultyProperties) == 0x000008, "Wrong alignment on FMissionPerDifficultyProperties");
static_assert(sizeof(FMissionPerDifficultyProperties) == 0x000068, "Wrong size on FMissionPerDifficultyProperties");
static_assert(offsetof(FMissionPerDifficultyProperties, ValidDifficulties) == 0x000000, "Member 'FMissionPerDifficultyProperties::ValidDifficulties' has a wrong offset!");
static_assert(offsetof(FMissionPerDifficultyProperties, OverrideTimeOfDayTheme) == 0x000010, "Member 'FMissionPerDifficultyProperties::OverrideTimeOfDayTheme' has a wrong offset!");
static_assert(offsetof(FMissionPerDifficultyProperties, OverrideGlobalWindInfo) == 0x000050, "Member 'FMissionPerDifficultyProperties::OverrideGlobalWindInfo' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionConfigDataBucket
// 0x0030 (0x0030 - 0x0000)
struct FFortMissionConfigDataBucket final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ConfigDataClass;                                   // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionConfigDataBucket) == 0x000008, "Wrong alignment on FFortMissionConfigDataBucket");
static_assert(sizeof(FFortMissionConfigDataBucket) == 0x000030, "Wrong size on FFortMissionConfigDataBucket");
static_assert(offsetof(FFortMissionConfigDataBucket, Tag) == 0x000000, "Member 'FFortMissionConfigDataBucket::Tag' has a wrong offset!");
static_assert(offsetof(FFortMissionConfigDataBucket, ConfigDataClass) == 0x000008, "Member 'FFortMissionConfigDataBucket::ConfigDataClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionConfigDataParams
// 0x0010 (0x0010 - 0x0000)
struct FFortMissionConfigDataParams final
{
public:
	TArray<struct FFortMissionConfigDataBucket>   ConfigParams;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortMissionConfigDataParams) == 0x000008, "Wrong alignment on FFortMissionConfigDataParams");
static_assert(sizeof(FFortMissionConfigDataParams) == 0x000010, "Wrong size on FFortMissionConfigDataParams");
static_assert(offsetof(FFortMissionConfigDataParams, ConfigParams) == 0x000000, "Member 'FFortMissionConfigDataParams::ConfigParams' has a wrong offset!");

// ScriptStruct FortniteGame.FortObjectiveEntry
// 0x0058 (0x0058 - 0x0000)
struct FFortObjectiveEntry final
{
public:
	TSoftClassPtr<class UClass>                   ObjectiveRef;                                      // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortBadgeItemDefinition*               ObjectiveRewardBadge;                              // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortObjectiveRequirement                     MissionRequirement;                                // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0038(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortObjectiveEntry) == 0x000008, "Wrong alignment on FFortObjectiveEntry");
static_assert(sizeof(FFortObjectiveEntry) == 0x000058, "Wrong size on FFortObjectiveEntry");
static_assert(offsetof(FFortObjectiveEntry, ObjectiveRef) == 0x000000, "Member 'FFortObjectiveEntry::ObjectiveRef' has a wrong offset!");
static_assert(offsetof(FFortObjectiveEntry, ObjectiveRewardBadge) == 0x000028, "Member 'FFortObjectiveEntry::ObjectiveRewardBadge' has a wrong offset!");
static_assert(offsetof(FFortObjectiveEntry, MissionRequirement) == 0x000030, "Member 'FFortObjectiveEntry::MissionRequirement' has a wrong offset!");
static_assert(offsetof(FFortObjectiveEntry, ObjectiveHandle) == 0x000038, "Member 'FFortObjectiveEntry::ObjectiveHandle' has a wrong offset!");

// ScriptStruct FortniteGame.FortObjectiveBlock
// 0x0010 (0x0010 - 0x0000)
struct FFortObjectiveBlock final
{
public:
	TArray<struct FFortObjectiveEntry>            ObjectiveEntries;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortObjectiveBlock) == 0x000008, "Wrong alignment on FFortObjectiveBlock");
static_assert(sizeof(FFortObjectiveBlock) == 0x000010, "Wrong size on FFortObjectiveBlock");
static_assert(offsetof(FFortObjectiveBlock, ObjectiveEntries) == 0x000000, "Member 'FFortObjectiveBlock::ObjectiveEntries' has a wrong offset!");

// ScriptStruct FortniteGame.FortStartingMissionInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortStartingMissionInfo final
{
public:
	TArray<class UFortMissionInfo*>               StartingMissions;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDisableSharedMissionLoading;                      // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortStartingMissionInfo) == 0x000008, "Wrong alignment on FFortStartingMissionInfo");
static_assert(sizeof(FFortStartingMissionInfo) == 0x000018, "Wrong size on FFortStartingMissionInfo");
static_assert(offsetof(FFortStartingMissionInfo, StartingMissions) == 0x000000, "Member 'FFortStartingMissionInfo::StartingMissions' has a wrong offset!");
static_assert(offsetof(FFortStartingMissionInfo, bDisableSharedMissionLoading) == 0x000010, "Member 'FFortStartingMissionInfo::bDisableSharedMissionLoading' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterProfile
// 0x0060 (0x0060 - 0x0000)
struct FFortEncounterProfile final
{
public:
	TSoftObjectPtr<class UFortDifficultyOptionSetEncounter> EncounterOptions;                                  // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortDifficultyOptionCategoryEncounter*> OverrideCategories;                                // 0x0028(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bShouldReselectOptionsPerInstance;                 // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0040(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterProfile) == 0x000008, "Wrong alignment on FFortEncounterProfile");
static_assert(sizeof(FFortEncounterProfile) == 0x000060, "Wrong size on FFortEncounterProfile");
static_assert(offsetof(FFortEncounterProfile, EncounterOptions) == 0x000000, "Member 'FFortEncounterProfile::EncounterOptions' has a wrong offset!");
static_assert(offsetof(FFortEncounterProfile, OverrideCategories) == 0x000028, "Member 'FFortEncounterProfile::OverrideCategories' has a wrong offset!");
static_assert(offsetof(FFortEncounterProfile, bShouldReselectOptionsPerInstance) == 0x000038, "Member 'FFortEncounterProfile::bShouldReselectOptionsPerInstance' has a wrong offset!");
static_assert(offsetof(FFortEncounterProfile, EncounterTypeTags) == 0x000040, "Member 'FFortEncounterProfile::EncounterTypeTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterSequenceSettings
// 0x0038 (0x0038 - 0x0000)
struct FFortEncounterSequenceSettings final
{
public:
	struct FFortEncounterTransitionSettings       TransitionSettings;                                // 0x0000(0x0001)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortEncounterProfile>          EncounterSequence;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SequenceTags;                                      // 0x0018(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterSequenceSettings) == 0x000008, "Wrong alignment on FFortEncounterSequenceSettings");
static_assert(sizeof(FFortEncounterSequenceSettings) == 0x000038, "Wrong size on FFortEncounterSequenceSettings");
static_assert(offsetof(FFortEncounterSequenceSettings, TransitionSettings) == 0x000000, "Member 'FFortEncounterSequenceSettings::TransitionSettings' has a wrong offset!");
static_assert(offsetof(FFortEncounterSequenceSettings, EncounterSequence) == 0x000008, "Member 'FFortEncounterSequenceSettings::EncounterSequence' has a wrong offset!");
static_assert(offsetof(FFortEncounterSequenceSettings, SequenceTags) == 0x000018, "Member 'FFortEncounterSequenceSettings::SequenceTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionEventReceiverByGameplayTagQuery
// 0x0050 (0x0050 - 0x0000)
struct FFortMissionEventReceiverByGameplayTagQuery final
{
public:
	struct FGameplayTagQuery                      TagQueryEventDiscriminator;                        // 0x0000(0x0048)(NativeAccessSpecifierPublic)
	class UFortMissionEventDelegateHolder*        DelegateHolder;                                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionEventReceiverByGameplayTagQuery) == 0x000008, "Wrong alignment on FFortMissionEventReceiverByGameplayTagQuery");
static_assert(sizeof(FFortMissionEventReceiverByGameplayTagQuery) == 0x000050, "Wrong size on FFortMissionEventReceiverByGameplayTagQuery");
static_assert(offsetof(FFortMissionEventReceiverByGameplayTagQuery, TagQueryEventDiscriminator) == 0x000000, "Member 'FFortMissionEventReceiverByGameplayTagQuery::TagQueryEventDiscriminator' has a wrong offset!");
static_assert(offsetof(FFortMissionEventReceiverByGameplayTagQuery, DelegateHolder) == 0x000048, "Member 'FFortMissionEventReceiverByGameplayTagQuery::DelegateHolder' has a wrong offset!");

// ScriptStruct FortniteGame.EarnedBadgeEntryArray
// 0x0010 (0x0118 - 0x0108)
struct FEarnedBadgeEntryArray final : public FFastArraySerializer
{
public:
	TArray<struct FEarnedBadgeEntry>              Items;                                             // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEarnedBadgeEntryArray) == 0x000008, "Wrong alignment on FEarnedBadgeEntryArray");
static_assert(sizeof(FEarnedBadgeEntryArray) == 0x000118, "Wrong size on FEarnedBadgeEntryArray");
static_assert(offsetof(FEarnedBadgeEntryArray, Items) == 0x000108, "Member 'FEarnedBadgeEntryArray::Items' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionUIActorHandle
// 0x0030 (0x0030 - 0x0000)
struct FFortMissionUIActorHandle final
{
public:
	TWeakObjectPtr<class AActor>                  AttachedActor;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachmentOffset;                                  // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVisibleDistance;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UFortMissionInfoIndicator> MissionUIIndicator;                                // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionUIActorHandle) == 0x000004, "Wrong alignment on FFortMissionUIActorHandle");
static_assert(sizeof(FFortMissionUIActorHandle) == 0x000030, "Wrong size on FFortMissionUIActorHandle");
static_assert(offsetof(FFortMissionUIActorHandle, AttachedActor) == 0x000000, "Member 'FFortMissionUIActorHandle::AttachedActor' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, AttachmentOffset) == 0x000008, "Member 'FFortMissionUIActorHandle::AttachmentOffset' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, MaxVisibleDistance) == 0x000014, "Member 'FFortMissionUIActorHandle::MaxVisibleDistance' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, MissionGuid) == 0x000018, "Member 'FFortMissionUIActorHandle::MissionGuid' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, MissionUIIndicator) == 0x000028, "Member 'FFortMissionUIActorHandle::MissionUIIndicator' has a wrong offset!");

// ScriptStruct FortniteGame.StormShieldMoveData
// 0x0024 (0x0024 - 0x0000)
struct FStormShieldMoveData final
{
public:
	float                                         MoveRate;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartingLocation;                                  // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeAreaStartLocationChangeTime;                   // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeAreaFinishLocationChangeTime;                  // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStormShieldMoveData) == 0x000004, "Wrong alignment on FStormShieldMoveData");
static_assert(sizeof(FStormShieldMoveData) == 0x000024, "Wrong size on FStormShieldMoveData");
static_assert(offsetof(FStormShieldMoveData, MoveRate) == 0x000000, "Member 'FStormShieldMoveData::MoveRate' has a wrong offset!");
static_assert(offsetof(FStormShieldMoveData, TargetLocation) == 0x000004, "Member 'FStormShieldMoveData::TargetLocation' has a wrong offset!");
static_assert(offsetof(FStormShieldMoveData, StartingLocation) == 0x000010, "Member 'FStormShieldMoveData::StartingLocation' has a wrong offset!");
static_assert(offsetof(FStormShieldMoveData, SafeAreaStartLocationChangeTime) == 0x00001C, "Member 'FStormShieldMoveData::SafeAreaStartLocationChangeTime' has a wrong offset!");
static_assert(offsetof(FStormShieldMoveData, SafeAreaFinishLocationChangeTime) == 0x000020, "Member 'FStormShieldMoveData::SafeAreaFinishLocationChangeTime' has a wrong offset!");

// ScriptStruct FortniteGame.StormShieldRadiusGrowthData
// 0x0018 (0x0018 - 0x0000)
struct FStormShieldRadiusGrowthData final
{
public:
	float                                         TargetRadius;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingRadius;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrowthRate;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeAreaStartRadiusChangeTime;                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeAreaFinishRadiusChangeTime;                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionStormShieldState                      State;                                             // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStormShieldRadiusGrowthData) == 0x000004, "Wrong alignment on FStormShieldRadiusGrowthData");
static_assert(sizeof(FStormShieldRadiusGrowthData) == 0x000018, "Wrong size on FStormShieldRadiusGrowthData");
static_assert(offsetof(FStormShieldRadiusGrowthData, TargetRadius) == 0x000000, "Member 'FStormShieldRadiusGrowthData::TargetRadius' has a wrong offset!");
static_assert(offsetof(FStormShieldRadiusGrowthData, StartingRadius) == 0x000004, "Member 'FStormShieldRadiusGrowthData::StartingRadius' has a wrong offset!");
static_assert(offsetof(FStormShieldRadiusGrowthData, GrowthRate) == 0x000008, "Member 'FStormShieldRadiusGrowthData::GrowthRate' has a wrong offset!");
static_assert(offsetof(FStormShieldRadiusGrowthData, SafeAreaStartRadiusChangeTime) == 0x00000C, "Member 'FStormShieldRadiusGrowthData::SafeAreaStartRadiusChangeTime' has a wrong offset!");
static_assert(offsetof(FStormShieldRadiusGrowthData, SafeAreaFinishRadiusChangeTime) == 0x000010, "Member 'FStormShieldRadiusGrowthData::SafeAreaFinishRadiusChangeTime' has a wrong offset!");
static_assert(offsetof(FStormShieldRadiusGrowthData, State) == 0x000014, "Member 'FStormShieldRadiusGrowthData::State' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionWeightedReward
// 0x0098 (0x0098 - 0x0000)
struct FFortMissionWeightedReward final
{
public:
	class FName                                   LootTierGroup;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LootIcon;                                          // 0x0008(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionWeightedReward) == 0x000008, "Wrong alignment on FFortMissionWeightedReward");
static_assert(sizeof(FFortMissionWeightedReward) == 0x000098, "Wrong size on FFortMissionWeightedReward");
static_assert(offsetof(FFortMissionWeightedReward, LootTierGroup) == 0x000000, "Member 'FFortMissionWeightedReward::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortMissionWeightedReward, LootIcon) == 0x000008, "Member 'FFortMissionWeightedReward::LootIcon' has a wrong offset!");
static_assert(offsetof(FFortMissionWeightedReward, Weight) == 0x000090, "Member 'FFortMissionWeightedReward::Weight' has a wrong offset!");

// ScriptStruct FortniteGame.MontageLookupData
// 0x0048 (0x0048 - 0x0000)
struct FMontageLookupData final
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0000(0x0020)(Edit, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMontageLookupData) == 0x000008, "Wrong alignment on FMontageLookupData");
static_assert(sizeof(FMontageLookupData) == 0x000048, "Wrong size on FMontageLookupData");
static_assert(offsetof(FMontageLookupData, GameplayTags) == 0x000000, "Member 'FMontageLookupData::GameplayTags' has a wrong offset!");
static_assert(offsetof(FMontageLookupData, AnimMontage) == 0x000020, "Member 'FMontageLookupData::AnimMontage' has a wrong offset!");

// ScriptStruct FortniteGame.MountedWeaponInfoRepped
// 0x0010 (0x0010 - 0x0000)
struct FMountedWeaponInfoRepped final
{
public:
	class AActor*                                 HostVehicleCachedActor;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HostVehicleSeatIndexCached;                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMountedWeaponInfoRepped) == 0x000008, "Wrong alignment on FMountedWeaponInfoRepped");
static_assert(sizeof(FMountedWeaponInfoRepped) == 0x000010, "Wrong size on FMountedWeaponInfoRepped");
static_assert(offsetof(FMountedWeaponInfoRepped, HostVehicleCachedActor) == 0x000000, "Member 'FMountedWeaponInfoRepped::HostVehicleCachedActor' has a wrong offset!");
static_assert(offsetof(FMountedWeaponInfoRepped, HostVehicleSeatIndexCached) == 0x000008, "Member 'FMountedWeaponInfoRepped::HostVehicleSeatIndexCached' has a wrong offset!");

// ScriptStruct FortniteGame.MountedWeaponInfo
// 0x0030 (0x0030 - 0x0000)
struct FMountedWeaponInfo final
{
public:
	TArray<class AActor*>                         TraceIgnoreActors;                                 // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                         ThirdPersonDistanceCorrection;                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThirdPersonDistanceCorrectionPawn;                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageStartFromWeaponTowardFocus;                 // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetSourceFromVehicleMuzzle;                    // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinReticleAlphaForAimInterpolation;                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAimAngleDiffForReticleAlpha;                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAimAngleDiffForReticleAlpha;                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedsVehicleAttachment;                           // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttachAttemptCount;                                // 0x002C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMountedWeaponInfo) == 0x000008, "Wrong alignment on FMountedWeaponInfo");
static_assert(sizeof(FMountedWeaponInfo) == 0x000030, "Wrong size on FMountedWeaponInfo");
static_assert(offsetof(FMountedWeaponInfo, TraceIgnoreActors) == 0x000000, "Member 'FMountedWeaponInfo::TraceIgnoreActors' has a wrong offset!");
static_assert(offsetof(FMountedWeaponInfo, ThirdPersonDistanceCorrection) == 0x000010, "Member 'FMountedWeaponInfo::ThirdPersonDistanceCorrection' has a wrong offset!");
static_assert(offsetof(FMountedWeaponInfo, ThirdPersonDistanceCorrectionPawn) == 0x000014, "Member 'FMountedWeaponInfo::ThirdPersonDistanceCorrectionPawn' has a wrong offset!");
static_assert(offsetof(FMountedWeaponInfo, bDamageStartFromWeaponTowardFocus) == 0x000018, "Member 'FMountedWeaponInfo::bDamageStartFromWeaponTowardFocus' has a wrong offset!");
static_assert(offsetof(FMountedWeaponInfo, bTargetSourceFromVehicleMuzzle) == 0x000019, "Member 'FMountedWeaponInfo::bTargetSourceFromVehicleMuzzle' has a wrong offset!");
static_assert(offsetof(FMountedWeaponInfo, MinReticleAlphaForAimInterpolation) == 0x00001C, "Member 'FMountedWeaponInfo::MinReticleAlphaForAimInterpolation' has a wrong offset!");
static_assert(offsetof(FMountedWeaponInfo, MinAimAngleDiffForReticleAlpha) == 0x000020, "Member 'FMountedWeaponInfo::MinAimAngleDiffForReticleAlpha' has a wrong offset!");
static_assert(offsetof(FMountedWeaponInfo, MaxAimAngleDiffForReticleAlpha) == 0x000024, "Member 'FMountedWeaponInfo::MaxAimAngleDiffForReticleAlpha' has a wrong offset!");
static_assert(offsetof(FMountedWeaponInfo, bNeedsVehicleAttachment) == 0x000028, "Member 'FMountedWeaponInfo::bNeedsVehicleAttachment' has a wrong offset!");
static_assert(offsetof(FMountedWeaponInfo, AttachAttemptCount) == 0x00002C, "Member 'FMountedWeaponInfo::AttachAttemptCount' has a wrong offset!");

// ScriptStruct FortniteGame.AirControlParams
// 0x0100 (0x0100 - 0x0000)
struct FAirControlParams final
{
public:
	struct FScalableFloat                         MaxAcceleration;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         LateralFriction;                                   // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxLateralSpeed;                                   // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TerminalVelocity;                                  // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         UpwardTerminalVelocity;                            // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         GravityScalar;                                     // 0x00A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CustomGravityCeiling;                              // 0x00C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         CustomGravityCeilingWidth;                         // 0x00E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAirControlParams) == 0x000008, "Wrong alignment on FAirControlParams");
static_assert(sizeof(FAirControlParams) == 0x000100, "Wrong size on FAirControlParams");
static_assert(offsetof(FAirControlParams, MaxAcceleration) == 0x000000, "Member 'FAirControlParams::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FAirControlParams, LateralFriction) == 0x000020, "Member 'FAirControlParams::LateralFriction' has a wrong offset!");
static_assert(offsetof(FAirControlParams, MaxLateralSpeed) == 0x000040, "Member 'FAirControlParams::MaxLateralSpeed' has a wrong offset!");
static_assert(offsetof(FAirControlParams, TerminalVelocity) == 0x000060, "Member 'FAirControlParams::TerminalVelocity' has a wrong offset!");
static_assert(offsetof(FAirControlParams, UpwardTerminalVelocity) == 0x000080, "Member 'FAirControlParams::UpwardTerminalVelocity' has a wrong offset!");
static_assert(offsetof(FAirControlParams, GravityScalar) == 0x0000A0, "Member 'FAirControlParams::GravityScalar' has a wrong offset!");
static_assert(offsetof(FAirControlParams, CustomGravityCeiling) == 0x0000C0, "Member 'FAirControlParams::CustomGravityCeiling' has a wrong offset!");
static_assert(offsetof(FAirControlParams, CustomGravityCeilingWidth) == 0x0000E0, "Member 'FAirControlParams::CustomGravityCeilingWidth' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaJumpPenalty
// 0x0008 (0x0008 - 0x0000)
struct FAthenaJumpPenalty final
{
public:
	float                                         JumpScalar;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementScalar;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaJumpPenalty) == 0x000004, "Wrong alignment on FAthenaJumpPenalty");
static_assert(sizeof(FAthenaJumpPenalty) == 0x000008, "Wrong size on FAthenaJumpPenalty");
static_assert(offsetof(FAthenaJumpPenalty, JumpScalar) == 0x000000, "Member 'FAthenaJumpPenalty::JumpScalar' has a wrong offset!");
static_assert(offsetof(FAthenaJumpPenalty, MovementScalar) == 0x000004, "Member 'FAthenaJumpPenalty::MovementScalar' has a wrong offset!");

// ScriptStruct FortniteGame.FortMusicSection
// 0x0018 (0x0018 - 0x0000)
struct FFortMusicSection final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialOffset;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMusicSection) == 0x000008, "Wrong alignment on FFortMusicSection");
static_assert(sizeof(FFortMusicSection) == 0x000018, "Wrong size on FFortMusicSection");
static_assert(offsetof(FFortMusicSection, Sound) == 0x000000, "Member 'FFortMusicSection::Sound' has a wrong offset!");
static_assert(offsetof(FFortMusicSection, FadeInTime) == 0x000008, "Member 'FFortMusicSection::FadeInTime' has a wrong offset!");
static_assert(offsetof(FFortMusicSection, FadeOutTime) == 0x00000C, "Member 'FFortMusicSection::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FFortMusicSection, InitialOffset) == 0x000010, "Member 'FFortMusicSection::InitialOffset' has a wrong offset!");
static_assert(offsetof(FFortMusicSection, Duration) == 0x000014, "Member 'FFortMusicSection::Duration' has a wrong offset!");

// ScriptStruct FortniteGame.RestrictedCountry
// 0x0004 (0x0004 - 0x0000)
struct FRestrictedCountry final
{
public:
	bool                                          bHealthWarningShown;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAntiAddictionMessageShown;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRealMoneyStoreRestriction;                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGameplayRestrictions;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRestrictedCountry) == 0x000001, "Wrong alignment on FRestrictedCountry");
static_assert(sizeof(FRestrictedCountry) == 0x000004, "Wrong size on FRestrictedCountry");
static_assert(offsetof(FRestrictedCountry, bHealthWarningShown) == 0x000000, "Member 'FRestrictedCountry::bHealthWarningShown' has a wrong offset!");
static_assert(offsetof(FRestrictedCountry, bAntiAddictionMessageShown) == 0x000001, "Member 'FRestrictedCountry::bAntiAddictionMessageShown' has a wrong offset!");
static_assert(offsetof(FRestrictedCountry, bRealMoneyStoreRestriction) == 0x000002, "Member 'FRestrictedCountry::bRealMoneyStoreRestriction' has a wrong offset!");
static_assert(offsetof(FRestrictedCountry, bGameplayRestrictions) == 0x000003, "Member 'FRestrictedCountry::bGameplayRestrictions' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostUpgradesPerTheaterData
// 0x0010 (0x0010 - 0x0000)
struct FOutpostUpgradesPerTheaterData final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             OutpostUpgradesData;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostUpgradesPerTheaterData) == 0x000008, "Wrong alignment on FOutpostUpgradesPerTheaterData");
static_assert(sizeof(FOutpostUpgradesPerTheaterData) == 0x000010, "Wrong size on FOutpostUpgradesPerTheaterData");
static_assert(offsetof(FOutpostUpgradesPerTheaterData, TheaterSlot) == 0x000000, "Member 'FOutpostUpgradesPerTheaterData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradesPerTheaterData, OutpostUpgradesData) == 0x000008, "Member 'FOutpostUpgradesPerTheaterData::OutpostUpgradesData' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostPrestigeEffects
// 0x0010 (0x0010 - 0x0000)
struct FOutpostPrestigeEffects final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    EnemyPrestigeEffect;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPrestigeEffects) == 0x000008, "Wrong alignment on FOutpostPrestigeEffects");
static_assert(sizeof(FOutpostPrestigeEffects) == 0x000010, "Wrong size on FOutpostPrestigeEffects");
static_assert(offsetof(FOutpostPrestigeEffects, EnemyPrestigeEffect) == 0x000000, "Member 'FOutpostPrestigeEffects::EnemyPrestigeEffect' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostPOSTBoost
// 0x0010 (0x0010 - 0x0000)
struct FOutpostPOSTBoost final
{
public:
	struct FCurveTableRowHandle                   PlayerStructureHealthModPerPOSTLevel;              // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPOSTBoost) == 0x000008, "Wrong alignment on FOutpostPOSTBoost");
static_assert(sizeof(FOutpostPOSTBoost) == 0x000010, "Wrong size on FOutpostPOSTBoost");
static_assert(offsetof(FOutpostPOSTBoost, PlayerStructureHealthModPerPOSTLevel) == 0x000000, "Member 'FOutpostPOSTBoost::PlayerStructureHealthModPerPOSTLevel' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostPrestigeEffectsPerTheater
// 0x0018 (0x0018 - 0x0000)
struct FOutpostPrestigeEffectsPerTheater final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOutpostPrestigeEffects                PrestigeEffects;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPrestigeEffectsPerTheater) == 0x000008, "Wrong alignment on FOutpostPrestigeEffectsPerTheater");
static_assert(sizeof(FOutpostPrestigeEffectsPerTheater) == 0x000018, "Wrong size on FOutpostPrestigeEffectsPerTheater");
static_assert(offsetof(FOutpostPrestigeEffectsPerTheater, TheaterSlot) == 0x000000, "Member 'FOutpostPrestigeEffectsPerTheater::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostPrestigeEffectsPerTheater, PrestigeEffects) == 0x000008, "Member 'FOutpostPrestigeEffectsPerTheater::PrestigeEffects' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostPOSTPerTheaterData
// 0x0018 (0x0018 - 0x0000)
struct FOutpostPOSTPerTheaterData final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOutpostPOSTBoost                      POSTData;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPOSTPerTheaterData) == 0x000008, "Wrong alignment on FOutpostPOSTPerTheaterData");
static_assert(sizeof(FOutpostPOSTPerTheaterData) == 0x000018, "Wrong size on FOutpostPOSTPerTheaterData");
static_assert(offsetof(FOutpostPOSTPerTheaterData, TheaterSlot) == 0x000000, "Member 'FOutpostPOSTPerTheaterData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostPOSTPerTheaterData, POSTData) == 0x000008, "Member 'FOutpostPOSTPerTheaterData::POSTData' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostUpgradeAndPrestigeBuildingData
// 0x0068 (0x0090 - 0x0028)
struct FOutpostUpgradeAndPrestigeBuildingData final : public FOutpostBuildingData
{
public:
	int32                                         MaxPrestigeLevel;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DefaultOutpostBuildingUpgradeData;                 // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOutpostUpgradesPerTheaterData> PerTheaterOutpostBuildingUpgradeData;              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FOutpostPrestigeEffects                DefaultPrestigeData;                               // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FOutpostPrestigeEffectsPerTheater> PrestigePerTheaterData;                            // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FOutpostPOSTBoost                      DefaultPOSTData;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FOutpostPOSTPerTheaterData>     POSTPerTheaterData;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            POSTBuildingGameplayEffectClass;                   // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostUpgradeAndPrestigeBuildingData) == 0x000008, "Wrong alignment on FOutpostUpgradeAndPrestigeBuildingData");
static_assert(sizeof(FOutpostUpgradeAndPrestigeBuildingData) == 0x000090, "Wrong size on FOutpostUpgradeAndPrestigeBuildingData");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, MaxPrestigeLevel) == 0x000028, "Member 'FOutpostUpgradeAndPrestigeBuildingData::MaxPrestigeLevel' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, DefaultOutpostBuildingUpgradeData) == 0x000030, "Member 'FOutpostUpgradeAndPrestigeBuildingData::DefaultOutpostBuildingUpgradeData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, PerTheaterOutpostBuildingUpgradeData) == 0x000038, "Member 'FOutpostUpgradeAndPrestigeBuildingData::PerTheaterOutpostBuildingUpgradeData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, DefaultPrestigeData) == 0x000048, "Member 'FOutpostUpgradeAndPrestigeBuildingData::DefaultPrestigeData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, PrestigePerTheaterData) == 0x000058, "Member 'FOutpostUpgradeAndPrestigeBuildingData::PrestigePerTheaterData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, DefaultPOSTData) == 0x000068, "Member 'FOutpostUpgradeAndPrestigeBuildingData::DefaultPOSTData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, POSTPerTheaterData) == 0x000078, "Member 'FOutpostUpgradeAndPrestigeBuildingData::POSTPerTheaterData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, POSTBuildingGameplayEffectClass) == 0x000088, "Member 'FOutpostUpgradeAndPrestigeBuildingData::POSTBuildingGameplayEffectClass' has a wrong offset!");

// ScriptStruct FortniteGame.StorageVaultBuildingData
// 0x0010 (0x0038 - 0x0028)
struct FStorageVaultBuildingData final : public FOutpostBuildingData
{
public:
	TArray<int32>                                 ItemCapacityPerLevel;                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStorageVaultBuildingData) == 0x000008, "Wrong alignment on FStorageVaultBuildingData");
static_assert(sizeof(FStorageVaultBuildingData) == 0x000038, "Wrong size on FStorageVaultBuildingData");
static_assert(offsetof(FStorageVaultBuildingData, ItemCapacityPerLevel) == 0x000028, "Member 'FStorageVaultBuildingData::ItemCapacityPerLevel' has a wrong offset!");

// ScriptStruct FortniteGame.HarvestingOptimizerBuildingData
// 0x0000 (0x0028 - 0x0028)
struct FHarvestingOptimizerBuildingData final : public FOutpostBuildingData
{
};
static_assert(alignof(FHarvestingOptimizerBuildingData) == 0x000008, "Wrong alignment on FHarvestingOptimizerBuildingData");
static_assert(sizeof(FHarvestingOptimizerBuildingData) == 0x000028, "Wrong size on FHarvestingOptimizerBuildingData");

// ScriptStruct FortniteGame.FabricatorBuildingData
// 0x0048 (0x0070 - 0x0028)
struct FFabricatorBuildingData final : public FOutpostBuildingData
{
public:
	TArray<TSoftObjectPtr<class UFortWorldItemDefinition>> AlwaysAvailableFabricationItems;                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDataTable*                             DefaultIngredientDisintergrationData;              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOutpostFabricatorPerTheaterData> IngredientDisintergrationPerTheaterData;           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FabricationDuration;                               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisintegrationToFabricationRatio;                  // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantumGooProductionTime;                          // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 QuantumGooCapacityPerLevel;                        // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricatorBuildingData) == 0x000008, "Wrong alignment on FFabricatorBuildingData");
static_assert(sizeof(FFabricatorBuildingData) == 0x000070, "Wrong size on FFabricatorBuildingData");
static_assert(offsetof(FFabricatorBuildingData, AlwaysAvailableFabricationItems) == 0x000028, "Member 'FFabricatorBuildingData::AlwaysAvailableFabricationItems' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, DefaultIngredientDisintergrationData) == 0x000038, "Member 'FFabricatorBuildingData::DefaultIngredientDisintergrationData' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, IngredientDisintergrationPerTheaterData) == 0x000040, "Member 'FFabricatorBuildingData::IngredientDisintergrationPerTheaterData' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, FabricationDuration) == 0x000050, "Member 'FFabricatorBuildingData::FabricationDuration' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, DisintegrationToFabricationRatio) == 0x000054, "Member 'FFabricatorBuildingData::DisintegrationToFabricationRatio' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, QuantumGooProductionTime) == 0x000058, "Member 'FFabricatorBuildingData::QuantumGooProductionTime' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, QuantumGooCapacityPerLevel) == 0x000060, "Member 'FFabricatorBuildingData::QuantumGooCapacityPerLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortOutpostFabricatorInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortOutpostFabricatorInfo final
{
public:
	class FString                                 DisintegrationStartTime;                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantumGooCompleted;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantumGooStillToProcess;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortOutpostFabricatorInfo) == 0x000008, "Wrong alignment on FFortOutpostFabricatorInfo");
static_assert(sizeof(FFortOutpostFabricatorInfo) == 0x000018, "Wrong size on FFortOutpostFabricatorInfo");
static_assert(offsetof(FFortOutpostFabricatorInfo, DisintegrationStartTime) == 0x000000, "Member 'FFortOutpostFabricatorInfo::DisintegrationStartTime' has a wrong offset!");
static_assert(offsetof(FFortOutpostFabricatorInfo, QuantumGooCompleted) == 0x000010, "Member 'FFortOutpostFabricatorInfo::QuantumGooCompleted' has a wrong offset!");
static_assert(offsetof(FFortOutpostFabricatorInfo, QuantumGooStillToProcess) == 0x000014, "Member 'FFortOutpostFabricatorInfo::QuantumGooStillToProcess' has a wrong offset!");

// ScriptStruct FortniteGame.FortDepositedResources
// 0x0018 (0x0018 - 0x0000)
struct FFortDepositedResources final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDepositedResources) == 0x000008, "Wrong alignment on FFortDepositedResources");
static_assert(sizeof(FFortDepositedResources) == 0x000018, "Wrong size on FFortDepositedResources");
static_assert(offsetof(FFortDepositedResources, TemplateId) == 0x000000, "Member 'FFortDepositedResources::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortDepositedResources, Quantity) == 0x000010, "Member 'FFortDepositedResources::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortOutpostPOSTInfo
// 0x0010 (0x0010 - 0x0000)
struct FFortOutpostPOSTInfo final
{
public:
	TArray<struct FFortDepositedResources>        DepositedPostItems;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortOutpostPOSTInfo) == 0x000008, "Wrong alignment on FFortOutpostPOSTInfo");
static_assert(sizeof(FFortOutpostPOSTInfo) == 0x000010, "Wrong size on FFortOutpostPOSTInfo");
static_assert(offsetof(FFortOutpostPOSTInfo, DepositedPostItems) == 0x000000, "Member 'FFortOutpostPOSTInfo::DepositedPostItems' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerSquadMapping
// 0x0038 (0x0038 - 0x0000)
struct FPlayerSquadMapping final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerID;                                          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomMatchKey;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TeamId;                                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PartyId;                                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeatId;                                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerSquadMapping) == 0x000008, "Wrong alignment on FPlayerSquadMapping");
static_assert(sizeof(FPlayerSquadMapping) == 0x000038, "Wrong size on FPlayerSquadMapping");
static_assert(offsetof(FPlayerSquadMapping, PlaylistName) == 0x000000, "Member 'FPlayerSquadMapping::PlaylistName' has a wrong offset!");
static_assert(offsetof(FPlayerSquadMapping, PlayerID) == 0x000008, "Member 'FPlayerSquadMapping::PlayerID' has a wrong offset!");
static_assert(offsetof(FPlayerSquadMapping, CustomMatchKey) == 0x000018, "Member 'FPlayerSquadMapping::CustomMatchKey' has a wrong offset!");
static_assert(offsetof(FPlayerSquadMapping, TeamId) == 0x000028, "Member 'FPlayerSquadMapping::TeamId' has a wrong offset!");
static_assert(offsetof(FPlayerSquadMapping, PartyId) == 0x00002C, "Member 'FPlayerSquadMapping::PartyId' has a wrong offset!");
static_assert(offsetof(FPlayerSquadMapping, SeatId) == 0x000030, "Member 'FPlayerSquadMapping::SeatId' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaBatchedDamageGameplayCues_Shared
// 0x0044 (0x0044 - 0x0000)
struct FAthenaBatchedDamageGameplayCues_Shared final
{
public:
	struct FVector_NetQuantize10                  Location;                                          // 0x0000(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              Normal;                                            // 0x000C(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeaponActivate;                                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFatal;                                          // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCritical;                                       // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShield;                                         // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShieldDestroyed;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShieldApplied;                                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBallistic;                                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  NonPlayerLocation;                                 // 0x0024(0x000C)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              NonPlayerNormal;                                   // 0x0030(0x000C)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	float                                         NonPlayerMagnitude;                                // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NonPlayerbIsFatal;                                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NonPlayerbIsCritical;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaBatchedDamageGameplayCues_Shared) == 0x000004, "Wrong alignment on FAthenaBatchedDamageGameplayCues_Shared");
static_assert(sizeof(FAthenaBatchedDamageGameplayCues_Shared) == 0x000044, "Wrong size on FAthenaBatchedDamageGameplayCues_Shared");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, Location) == 0x000000, "Member 'FAthenaBatchedDamageGameplayCues_Shared::Location' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, Normal) == 0x00000C, "Member 'FAthenaBatchedDamageGameplayCues_Shared::Normal' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, Magnitude) == 0x000018, "Member 'FAthenaBatchedDamageGameplayCues_Shared::Magnitude' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, bWeaponActivate) == 0x00001C, "Member 'FAthenaBatchedDamageGameplayCues_Shared::bWeaponActivate' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, bIsFatal) == 0x00001D, "Member 'FAthenaBatchedDamageGameplayCues_Shared::bIsFatal' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, bIsCritical) == 0x00001E, "Member 'FAthenaBatchedDamageGameplayCues_Shared::bIsCritical' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, bIsShield) == 0x00001F, "Member 'FAthenaBatchedDamageGameplayCues_Shared::bIsShield' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, bIsShieldDestroyed) == 0x000020, "Member 'FAthenaBatchedDamageGameplayCues_Shared::bIsShieldDestroyed' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, bIsShieldApplied) == 0x000021, "Member 'FAthenaBatchedDamageGameplayCues_Shared::bIsShieldApplied' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, bIsBallistic) == 0x000022, "Member 'FAthenaBatchedDamageGameplayCues_Shared::bIsBallistic' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, NonPlayerLocation) == 0x000024, "Member 'FAthenaBatchedDamageGameplayCues_Shared::NonPlayerLocation' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, NonPlayerNormal) == 0x000030, "Member 'FAthenaBatchedDamageGameplayCues_Shared::NonPlayerNormal' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, NonPlayerMagnitude) == 0x00003C, "Member 'FAthenaBatchedDamageGameplayCues_Shared::NonPlayerMagnitude' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, NonPlayerbIsFatal) == 0x000040, "Member 'FAthenaBatchedDamageGameplayCues_Shared::NonPlayerbIsFatal' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, NonPlayerbIsCritical) == 0x000041, "Member 'FAthenaBatchedDamageGameplayCues_Shared::NonPlayerbIsCritical' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues_Shared, bIsValid) == 0x000042, "Member 'FAthenaBatchedDamageGameplayCues_Shared::bIsValid' has a wrong offset!");

// ScriptStruct FortniteGame.FortPawnVocalChord
// 0x00D8 (0x00D8 - 0x0000)
struct FFortPawnVocalChord final
{
public:
	class UAudioComponent*                        FeedbackAudioComponent;                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        ReplicatedSpokenLine;                              // 0x0008(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        PendingSpokenLine;                                 // 0x0038(0x0030)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        QueuedSpokenLine;                                  // 0x0068(0x0030)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        CurrentSpokenLine;                                 // 0x0098(0x0030)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x10];                                      // 0x00C8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPawnVocalChord) == 0x000008, "Wrong alignment on FFortPawnVocalChord");
static_assert(sizeof(FFortPawnVocalChord) == 0x0000D8, "Wrong size on FFortPawnVocalChord");
static_assert(offsetof(FFortPawnVocalChord, FeedbackAudioComponent) == 0x000000, "Member 'FFortPawnVocalChord::FeedbackAudioComponent' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, ReplicatedSpokenLine) == 0x000008, "Member 'FFortPawnVocalChord::ReplicatedSpokenLine' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, PendingSpokenLine) == 0x000038, "Member 'FFortPawnVocalChord::PendingSpokenLine' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, QueuedSpokenLine) == 0x000068, "Member 'FFortPawnVocalChord::QueuedSpokenLine' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, CurrentSpokenLine) == 0x000098, "Member 'FFortPawnVocalChord::CurrentSpokenLine' has a wrong offset!");

// ScriptStruct FortniteGame.PawnDamageZones
// 0x0018 (0x0018 - 0x0000)
struct FPawnDamageZones final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Bones;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnDamageZones) == 0x000008, "Wrong alignment on FPawnDamageZones");
static_assert(sizeof(FPawnDamageZones) == 0x000018, "Wrong size on FPawnDamageZones");
static_assert(offsetof(FPawnDamageZones, bActive) == 0x000000, "Member 'FPawnDamageZones::bActive' has a wrong offset!");
static_assert(offsetof(FPawnDamageZones, Bones) == 0x000008, "Member 'FPawnDamageZones::Bones' has a wrong offset!");

// ScriptStruct FortniteGame.DamageDoneSourceInfo
// 0x0028 (0x0028 - 0x0000)
struct FDamageDoneSourceInfo final
{
public:
	struct FGameplayTagContainer                  TrackedSourceTags;                                 // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageDoneSourceInfo) == 0x000008, "Wrong alignment on FDamageDoneSourceInfo");
static_assert(sizeof(FDamageDoneSourceInfo) == 0x000028, "Wrong size on FDamageDoneSourceInfo");
static_assert(offsetof(FDamageDoneSourceInfo, TrackedSourceTags) == 0x000000, "Member 'FDamageDoneSourceInfo::TrackedSourceTags' has a wrong offset!");
static_assert(offsetof(FDamageDoneSourceInfo, DamageAmount) == 0x000020, "Member 'FDamageDoneSourceInfo::DamageAmount' has a wrong offset!");

// ScriptStruct FortniteGame.DamageDoneTargetInfo
// 0x0030 (0x0030 - 0x0000)
struct FDamageDoneTargetInfo final
{
public:
	struct FGameplayTagContainer                  TrackedTargetTags;                                 // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	TArray<struct FDamageDoneSourceInfo>          TrackedSourceData;                                 // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageDoneTargetInfo) == 0x000008, "Wrong alignment on FDamageDoneTargetInfo");
static_assert(sizeof(FDamageDoneTargetInfo) == 0x000030, "Wrong size on FDamageDoneTargetInfo");
static_assert(offsetof(FDamageDoneTargetInfo, TrackedTargetTags) == 0x000000, "Member 'FDamageDoneTargetInfo::TrackedTargetTags' has a wrong offset!");
static_assert(offsetof(FDamageDoneTargetInfo, TrackedSourceData) == 0x000020, "Member 'FDamageDoneTargetInfo::TrackedSourceData' has a wrong offset!");

// ScriptStruct FortniteGame.DamageDoneInfo
// 0x0028 (0x0028 - 0x0000)
struct FDamageDoneInfo final
{
public:
	struct FGameplayTagContainer                  TrackedDamageTagGrouping;                          // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageDoneInfo) == 0x000008, "Wrong alignment on FDamageDoneInfo");
static_assert(sizeof(FDamageDoneInfo) == 0x000028, "Wrong size on FDamageDoneInfo");
static_assert(offsetof(FDamageDoneInfo, TrackedDamageTagGrouping) == 0x000000, "Member 'FDamageDoneInfo::TrackedDamageTagGrouping' has a wrong offset!");
static_assert(offsetof(FDamageDoneInfo, DamageAmount) == 0x000020, "Member 'FDamageDoneInfo::DamageAmount' has a wrong offset!");

// ScriptStruct FortniteGame.DamagerInfo
// 0x0030 (0x0030 - 0x0000)
struct FDamagerInfo final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageAmount;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SourceTags;                                        // 0x0010(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamagerInfo) == 0x000008, "Wrong alignment on FDamagerInfo");
static_assert(sizeof(FDamagerInfo) == 0x000030, "Wrong size on FDamagerInfo");
static_assert(offsetof(FDamagerInfo, DamageCauser) == 0x000000, "Member 'FDamagerInfo::DamageCauser' has a wrong offset!");
static_assert(offsetof(FDamagerInfo, DamageAmount) == 0x000008, "Member 'FDamagerInfo::DamageAmount' has a wrong offset!");
static_assert(offsetof(FDamagerInfo, SourceTags) == 0x000010, "Member 'FDamagerInfo::SourceTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortBadMatchTrigger
// 0x0030 (0x0030 - 0x0000)
struct FFortBadMatchTrigger final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBadMatchTriggerOperation                 Operation;                                         // 0x0008(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x0010(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Playlists;                                         // 0x0018(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	EFortBadMatchTeamSize                         TeamSize;                                          // 0x0028(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBadMatchTrigger) == 0x000008, "Wrong alignment on FFortBadMatchTrigger");
static_assert(sizeof(FFortBadMatchTrigger) == 0x000030, "Wrong size on FFortBadMatchTrigger");
static_assert(offsetof(FFortBadMatchTrigger, Key) == 0x000000, "Member 'FFortBadMatchTrigger::Key' has a wrong offset!");
static_assert(offsetof(FFortBadMatchTrigger, Operation) == 0x000008, "Member 'FFortBadMatchTrigger::Operation' has a wrong offset!");
static_assert(offsetof(FFortBadMatchTrigger, Value) == 0x000010, "Member 'FFortBadMatchTrigger::Value' has a wrong offset!");
static_assert(offsetof(FFortBadMatchTrigger, Playlists) == 0x000018, "Member 'FFortBadMatchTrigger::Playlists' has a wrong offset!");
static_assert(offsetof(FFortBadMatchTrigger, TeamSize) == 0x000028, "Member 'FFortBadMatchTrigger::TeamSize' has a wrong offset!");

// ScriptStruct FortniteGame.FortPresenceBasicInfo
// 0x0004 (0x0004 - 0x0000)
struct FFortPresenceBasicInfo final
{
public:
	int32                                         HomeBaseRating;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPresenceBasicInfo) == 0x000004, "Wrong alignment on FFortPresenceBasicInfo");
static_assert(sizeof(FFortPresenceBasicInfo) == 0x000004, "Wrong size on FFortPresenceBasicInfo");
static_assert(offsetof(FFortPresenceBasicInfo, HomeBaseRating) == 0x000000, "Member 'FFortPresenceBasicInfo::HomeBaseRating' has a wrong offset!");

// ScriptStruct FortniteGame.VehicleSafeTeleportInfo
// 0x0018 (0x0018 - 0x0000)
struct FVehicleSafeTeleportInfo final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleSafeTeleportInfo) == 0x000004, "Wrong alignment on FVehicleSafeTeleportInfo");
static_assert(sizeof(FVehicleSafeTeleportInfo) == 0x000018, "Wrong size on FVehicleSafeTeleportInfo");
static_assert(offsetof(FVehicleSafeTeleportInfo, Location) == 0x000000, "Member 'FVehicleSafeTeleportInfo::Location' has a wrong offset!");
static_assert(offsetof(FVehicleSafeTeleportInfo, Rotation) == 0x00000C, "Member 'FVehicleSafeTeleportInfo::Rotation' has a wrong offset!");

// ScriptStruct FortniteGame.FortPickupLocationData
// 0x0060 (0x0060 - 0x0000)
struct FFortPickupLocationData final
{
public:
	class AFortPawn*                              PickupTarget;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPickup*                            CombineTarget;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              ItemOwner;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  LootInitialPosition;                               // 0x0018(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  LootFinalPosition;                                 // 0x0024(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         FlyTime;                                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              StartDirection;                                    // 0x0034(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  FinalTossRestLocation;                             // 0x0040(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	EFortPickupTossState                          TossState;                                         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayPickupSound;                                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PickupGuid;                                        // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortPickupLocationData) == 0x000008, "Wrong alignment on FFortPickupLocationData");
static_assert(sizeof(FFortPickupLocationData) == 0x000060, "Wrong size on FFortPickupLocationData");
static_assert(offsetof(FFortPickupLocationData, PickupTarget) == 0x000000, "Member 'FFortPickupLocationData::PickupTarget' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, CombineTarget) == 0x000008, "Member 'FFortPickupLocationData::CombineTarget' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, ItemOwner) == 0x000010, "Member 'FFortPickupLocationData::ItemOwner' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, LootInitialPosition) == 0x000018, "Member 'FFortPickupLocationData::LootInitialPosition' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, LootFinalPosition) == 0x000024, "Member 'FFortPickupLocationData::LootFinalPosition' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, FlyTime) == 0x000030, "Member 'FFortPickupLocationData::FlyTime' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, StartDirection) == 0x000034, "Member 'FFortPickupLocationData::StartDirection' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, FinalTossRestLocation) == 0x000040, "Member 'FFortPickupLocationData::FinalTossRestLocation' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, TossState) == 0x00004C, "Member 'FFortPickupLocationData::TossState' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, bPlayPickupSound) == 0x00004D, "Member 'FFortPickupLocationData::bPlayPickupSound' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, PickupGuid) == 0x000050, "Member 'FFortPickupLocationData::PickupGuid' has a wrong offset!");

// ScriptStruct FortniteGame.FortCameraModeOverride
// 0x0010 (0x0010 - 0x0000)
struct FFortCameraModeOverride final
{
public:
	TSubclassOf<class UFortCameraMode>            OriginalClass;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortCameraMode>            ClassOverride;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCameraModeOverride) == 0x000008, "Wrong alignment on FFortCameraModeOverride");
static_assert(sizeof(FFortCameraModeOverride) == 0x000010, "Wrong size on FFortCameraModeOverride");
static_assert(offsetof(FFortCameraModeOverride, OriginalClass) == 0x000000, "Member 'FFortCameraModeOverride::OriginalClass' has a wrong offset!");
static_assert(offsetof(FFortCameraModeOverride, ClassOverride) == 0x000008, "Member 'FFortCameraModeOverride::ClassOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortCameraPrototype
// 0x0028 (0x0028 - 0x0000)
struct FFortCameraPrototype final
{
public:
	class FName                                   PrototypeName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrototypeDescription;                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortCameraModeOverride>        ModeOverrides;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCameraPrototype) == 0x000008, "Wrong alignment on FFortCameraPrototype");
static_assert(sizeof(FFortCameraPrototype) == 0x000028, "Wrong size on FFortCameraPrototype");
static_assert(offsetof(FFortCameraPrototype, PrototypeName) == 0x000000, "Member 'FFortCameraPrototype::PrototypeName' has a wrong offset!");
static_assert(offsetof(FFortCameraPrototype, PrototypeDescription) == 0x000008, "Member 'FFortCameraPrototype::PrototypeDescription' has a wrong offset!");
static_assert(offsetof(FFortCameraPrototype, ModeOverrides) == 0x000018, "Member 'FFortCameraPrototype::ModeOverrides' has a wrong offset!");

// ScriptStruct FortniteGame.FortCameraInstanceEntry
// 0x0018 (0x0018 - 0x0000)
struct FFortCameraInstanceEntry final
{
public:
	TSubclassOf<class UFortCameraMode>            CameraClass;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ViewTarget;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortCameraMode*                        Camera;                                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCameraInstanceEntry) == 0x000008, "Wrong alignment on FFortCameraInstanceEntry");
static_assert(sizeof(FFortCameraInstanceEntry) == 0x000018, "Wrong size on FFortCameraInstanceEntry");
static_assert(offsetof(FFortCameraInstanceEntry, CameraClass) == 0x000000, "Member 'FFortCameraInstanceEntry::CameraClass' has a wrong offset!");
static_assert(offsetof(FFortCameraInstanceEntry, ViewTarget) == 0x000008, "Member 'FFortCameraInstanceEntry::ViewTarget' has a wrong offset!");
static_assert(offsetof(FFortCameraInstanceEntry, Camera) == 0x000010, "Member 'FFortCameraInstanceEntry::Camera' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveFortCamera
// 0x0020 (0x0020 - 0x0000)
struct FActiveFortCamera final
{
public:
	class UFortCameraMode*                        Camera;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ViewTarget;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionAlpha;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionUpdateRate;                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveFortCamera) == 0x000008, "Wrong alignment on FActiveFortCamera");
static_assert(sizeof(FActiveFortCamera) == 0x000020, "Wrong size on FActiveFortCamera");
static_assert(offsetof(FActiveFortCamera, Camera) == 0x000000, "Member 'FActiveFortCamera::Camera' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, ViewTarget) == 0x000008, "Member 'FActiveFortCamera::ViewTarget' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, TransitionAlpha) == 0x000010, "Member 'FActiveFortCamera::TransitionAlpha' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, TransitionUpdateRate) == 0x000014, "Member 'FActiveFortCamera::TransitionUpdateRate' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, BlendWeight) == 0x000018, "Member 'FActiveFortCamera::BlendWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortPipTest
// 0x0018 (0x0020 - 0x0008)
struct FFortPipTest final : public FTableRowBase
{
public:
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStreamMediaSource*                     StreamMediaSource;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 WidgetClass;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPipTest) == 0x000008, "Wrong alignment on FFortPipTest");
static_assert(sizeof(FFortPipTest) == 0x000020, "Wrong size on FFortPipTest");
static_assert(offsetof(FFortPipTest, MediaPlayer) == 0x000008, "Member 'FFortPipTest::MediaPlayer' has a wrong offset!");
static_assert(offsetof(FFortPipTest, StreamMediaSource) == 0x000010, "Member 'FFortPipTest::StreamMediaSource' has a wrong offset!");
static_assert(offsetof(FFortPipTest, WidgetClass) == 0x000018, "Member 'FFortPipTest::WidgetClass' has a wrong offset!");

// ScriptStruct FortniteGame.CreativeToolPersistentData
// 0x0008 (0x0008 - 0x0000)
struct FCreativeToolPersistentData final
{
public:
	uint8                                         GridSnapIndex;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RotationAxisIndex;                                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SelectedScaleAxis;                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUsePrecisionGridSnapping;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowGravityOnPlace;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldDestroyPropsWhenPlacing;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitTraceRule;                                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsScalingInsteadOfRotating;                       // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeToolPersistentData) == 0x000001, "Wrong alignment on FCreativeToolPersistentData");
static_assert(sizeof(FCreativeToolPersistentData) == 0x000008, "Wrong size on FCreativeToolPersistentData");
static_assert(offsetof(FCreativeToolPersistentData, GridSnapIndex) == 0x000000, "Member 'FCreativeToolPersistentData::GridSnapIndex' has a wrong offset!");
static_assert(offsetof(FCreativeToolPersistentData, RotationAxisIndex) == 0x000001, "Member 'FCreativeToolPersistentData::RotationAxisIndex' has a wrong offset!");
static_assert(offsetof(FCreativeToolPersistentData, SelectedScaleAxis) == 0x000002, "Member 'FCreativeToolPersistentData::SelectedScaleAxis' has a wrong offset!");
static_assert(offsetof(FCreativeToolPersistentData, bShouldUsePrecisionGridSnapping) == 0x000003, "Member 'FCreativeToolPersistentData::bShouldUsePrecisionGridSnapping' has a wrong offset!");
static_assert(offsetof(FCreativeToolPersistentData, bAllowGravityOnPlace) == 0x000004, "Member 'FCreativeToolPersistentData::bAllowGravityOnPlace' has a wrong offset!");
static_assert(offsetof(FCreativeToolPersistentData, bShouldDestroyPropsWhenPlacing) == 0x000005, "Member 'FCreativeToolPersistentData::bShouldDestroyPropsWhenPlacing' has a wrong offset!");
static_assert(offsetof(FCreativeToolPersistentData, HitTraceRule) == 0x000006, "Member 'FCreativeToolPersistentData::HitTraceRule' has a wrong offset!");
static_assert(offsetof(FCreativeToolPersistentData, bIsScalingInsteadOfRotating) == 0x000007, "Member 'FCreativeToolPersistentData::bIsScalingInsteadOfRotating' has a wrong offset!");

// ScriptStruct FortniteGame.ServerSideHitMarker
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FServerSideHitMarker final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerSideHitMarker) == 0x000008, "Wrong alignment on FServerSideHitMarker");
static_assert(sizeof(FServerSideHitMarker) == 0x000028, "Wrong size on FServerSideHitMarker");

// ScriptStruct FortniteGame.FortPlayerSurveyAnswerMultipleSelectionSingleAnswer
// 0x0010 (0x0010 - 0x0000)
struct FFortPlayerSurveyAnswerMultipleSelectionSingleAnswer final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              TimeTaken;                                         // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnswerMultipleSelectionSingleAnswer) == 0x000008, "Wrong alignment on FFortPlayerSurveyAnswerMultipleSelectionSingleAnswer");
static_assert(sizeof(FFortPlayerSurveyAnswerMultipleSelectionSingleAnswer) == 0x000010, "Wrong size on FFortPlayerSurveyAnswerMultipleSelectionSingleAnswer");
static_assert(offsetof(FFortPlayerSurveyAnswerMultipleSelectionSingleAnswer, bSelected) == 0x000000, "Member 'FFortPlayerSurveyAnswerMultipleSelectionSingleAnswer::bSelected' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyAnswerMultipleSelectionSingleAnswer, TimeTaken) == 0x000008, "Member 'FFortPlayerSurveyAnswerMultipleSelectionSingleAnswer::TimeTaken' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyAnswerMultipleSelection
// 0x0010 (0x0018 - 0x0008)
struct FFortPlayerSurveyAnswerMultipleSelection final : public FFortPlayerSurveyAnswerBase
{
public:
	TArray<struct FFortPlayerSurveyAnswerMultipleSelectionSingleAnswer> AnswerList;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnswerMultipleSelection) == 0x000008, "Wrong alignment on FFortPlayerSurveyAnswerMultipleSelection");
static_assert(sizeof(FFortPlayerSurveyAnswerMultipleSelection) == 0x000018, "Wrong size on FFortPlayerSurveyAnswerMultipleSelection");
static_assert(offsetof(FFortPlayerSurveyAnswerMultipleSelection, AnswerList) == 0x000008, "Member 'FFortPlayerSurveyAnswerMultipleSelection::AnswerList' has a wrong offset!");

// ScriptStruct FortniteGame.CraftingQueueInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FCraftingQueueInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingQueueInfo) == 0x000004, "Wrong alignment on FCraftingQueueInfo");
static_assert(sizeof(FCraftingQueueInfo) == 0x00000C, "Wrong size on FCraftingQueueInfo");

// ScriptStruct FortniteGame.FortInputActionThatShouldAlwaysBeBound
// 0x0018 (0x0018 - 0x0000)
struct FFortInputActionThatShouldAlwaysBeBound final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           AlternateActionNames;                              // 0x0008(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortInputActionThatShouldAlwaysBeBound) == 0x000008, "Wrong alignment on FFortInputActionThatShouldAlwaysBeBound");
static_assert(sizeof(FFortInputActionThatShouldAlwaysBeBound) == 0x000018, "Wrong size on FFortInputActionThatShouldAlwaysBeBound");
static_assert(offsetof(FFortInputActionThatShouldAlwaysBeBound, ActionName) == 0x000000, "Member 'FFortInputActionThatShouldAlwaysBeBound::ActionName' has a wrong offset!");
static_assert(offsetof(FFortInputActionThatShouldAlwaysBeBound, AlternateActionNames) == 0x000008, "Member 'FFortInputActionThatShouldAlwaysBeBound::AlternateActionNames' has a wrong offset!");

// ScriptStruct FortniteGame.FortInputActionGroupContext
// 0x000C (0x000C - 0x0000)
struct FFortInputActionGroupContext final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInputActionGroup                         InputActionGroup;                                  // 0x0008(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortInputActionGroupContext) == 0x000004, "Wrong alignment on FFortInputActionGroupContext");
static_assert(sizeof(FFortInputActionGroupContext) == 0x00000C, "Wrong size on FFortInputActionGroupContext");
static_assert(offsetof(FFortInputActionGroupContext, ActionName) == 0x000000, "Member 'FFortInputActionGroupContext::ActionName' has a wrong offset!");
static_assert(offsetof(FFortInputActionGroupContext, InputActionGroup) == 0x000008, "Member 'FFortInputActionGroupContext::InputActionGroup' has a wrong offset!");

// ScriptStruct FortniteGame.FortAxisSmoothing
// 0x0018 (0x0018 - 0x0000)
struct FFortAxisSmoothing final
{
public:
	float                                         ZeroTime;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AverageValue;                                      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Samples;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalSampleTime;                                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAxisSmoothing) == 0x000004, "Wrong alignment on FFortAxisSmoothing");
static_assert(sizeof(FFortAxisSmoothing) == 0x000018, "Wrong size on FFortAxisSmoothing");
static_assert(offsetof(FFortAxisSmoothing, ZeroTime) == 0x000000, "Member 'FFortAxisSmoothing::ZeroTime' has a wrong offset!");
static_assert(offsetof(FFortAxisSmoothing, AverageValue) == 0x000004, "Member 'FFortAxisSmoothing::AverageValue' has a wrong offset!");
static_assert(offsetof(FFortAxisSmoothing, Samples) == 0x000010, "Member 'FFortAxisSmoothing::Samples' has a wrong offset!");
static_assert(offsetof(FFortAxisSmoothing, TotalSampleTime) == 0x000014, "Member 'FFortAxisSmoothing::TotalSampleTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortInputActionKeyAlias
// 0x0028 (0x0028 - 0x0000)
struct FFortInputActionKeyAlias final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   KeyAlias;                                          // 0x0008(0x0018)(Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInputActionType                          InputActionType;                                   // 0x0020(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortInputActionKeyAlias) == 0x000008, "Wrong alignment on FFortInputActionKeyAlias");
static_assert(sizeof(FFortInputActionKeyAlias) == 0x000028, "Wrong size on FFortInputActionKeyAlias");
static_assert(offsetof(FFortInputActionKeyAlias, ActionName) == 0x000000, "Member 'FFortInputActionKeyAlias::ActionName' has a wrong offset!");
static_assert(offsetof(FFortInputActionKeyAlias, KeyAlias) == 0x000008, "Member 'FFortInputActionKeyAlias::KeyAlias' has a wrong offset!");
static_assert(offsetof(FFortInputActionKeyAlias, InputActionType) == 0x000020, "Member 'FFortInputActionKeyAlias::InputActionType' has a wrong offset!");

// ScriptStruct FortniteGame.FortFootstepBankOverrideData
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FFortFootstepBankOverrideData final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFootstepBankOverrideData) == 0x000004, "Wrong alignment on FFortFootstepBankOverrideData");
static_assert(sizeof(FFortFootstepBankOverrideData) == 0x00000C, "Wrong size on FFortFootstepBankOverrideData");

// ScriptStruct FortniteGame.RewardBadgesCollectionProgressionData
// 0x0017 (0x0018 - 0x0001)
struct FRewardBadgesCollectionProgressionData final : public FTieredCollectionProgressionDataBase
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRewardBadgesProgression>       BadgeCollections;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardBadgesCollectionProgressionData) == 0x000008, "Wrong alignment on FRewardBadgesCollectionProgressionData");
static_assert(sizeof(FRewardBadgesCollectionProgressionData) == 0x000018, "Wrong size on FRewardBadgesCollectionProgressionData");
static_assert(offsetof(FRewardBadgesCollectionProgressionData, BadgeCollections) == 0x000008, "Member 'FRewardBadgesCollectionProgressionData::BadgeCollections' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimBPOverrideData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortAnimBPOverrideData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimBPOverrideData) == 0x000008, "Wrong alignment on FFortAnimBPOverrideData");
static_assert(sizeof(FFortAnimBPOverrideData) == 0x000010, "Wrong size on FFortAnimBPOverrideData");

// ScriptStruct FortniteGame.FortCachedWeaponOverheatData
// 0x0018 (0x0018 - 0x0000)
struct FFortCachedWeaponOverheatData final
{
public:
	float                                         TimeWeaponWasUnequipped;                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverheatValueAtUneqip;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverheatValue;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeOverheatedBegan;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeHeatWasLastAdded;                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCachedWeaponOverheatData) == 0x000004, "Wrong alignment on FFortCachedWeaponOverheatData");
static_assert(sizeof(FFortCachedWeaponOverheatData) == 0x000018, "Wrong size on FFortCachedWeaponOverheatData");
static_assert(offsetof(FFortCachedWeaponOverheatData, TimeWeaponWasUnequipped) == 0x000000, "Member 'FFortCachedWeaponOverheatData::TimeWeaponWasUnequipped' has a wrong offset!");
static_assert(offsetof(FFortCachedWeaponOverheatData, OverheatValueAtUneqip) == 0x000004, "Member 'FFortCachedWeaponOverheatData::OverheatValueAtUneqip' has a wrong offset!");
static_assert(offsetof(FFortCachedWeaponOverheatData, OverheatValue) == 0x000008, "Member 'FFortCachedWeaponOverheatData::OverheatValue' has a wrong offset!");
static_assert(offsetof(FFortCachedWeaponOverheatData, TimeOverheatedBegan) == 0x000010, "Member 'FFortCachedWeaponOverheatData::TimeOverheatedBegan' has a wrong offset!");
static_assert(offsetof(FFortCachedWeaponOverheatData, TimeHeatWasLastAdded) == 0x000014, "Member 'FFortCachedWeaponOverheatData::TimeHeatWasLastAdded' has a wrong offset!");

// ScriptStruct FortniteGame.FortRedeployGliderTelemetryData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FFortRedeployGliderTelemetryData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRedeployGliderTelemetryData) == 0x000004, "Wrong alignment on FFortRedeployGliderTelemetryData");
static_assert(sizeof(FFortRedeployGliderTelemetryData) == 0x000020, "Wrong size on FFortRedeployGliderTelemetryData");

// ScriptStruct FortniteGame.VehiclePawnState
// 0x0020 (0x0020 - 0x0000)
struct FVehiclePawnState final
{
public:
	class AActor*                                 Vehicle;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleApexZ;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SeatIndex;                                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ExitSocketIndex;                                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideVehicleExit;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SeatTransitionVector;                              // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EntryTime;                                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehiclePawnState) == 0x000008, "Wrong alignment on FVehiclePawnState");
static_assert(sizeof(FVehiclePawnState) == 0x000020, "Wrong size on FVehiclePawnState");
static_assert(offsetof(FVehiclePawnState, Vehicle) == 0x000000, "Member 'FVehiclePawnState::Vehicle' has a wrong offset!");
static_assert(offsetof(FVehiclePawnState, VehicleApexZ) == 0x000008, "Member 'FVehiclePawnState::VehicleApexZ' has a wrong offset!");
static_assert(offsetof(FVehiclePawnState, SeatIndex) == 0x00000C, "Member 'FVehiclePawnState::SeatIndex' has a wrong offset!");
static_assert(offsetof(FVehiclePawnState, ExitSocketIndex) == 0x00000D, "Member 'FVehiclePawnState::ExitSocketIndex' has a wrong offset!");
static_assert(offsetof(FVehiclePawnState, bOverrideVehicleExit) == 0x00000E, "Member 'FVehiclePawnState::bOverrideVehicleExit' has a wrong offset!");
static_assert(offsetof(FVehiclePawnState, SeatTransitionVector) == 0x000010, "Member 'FVehiclePawnState::SeatTransitionVector' has a wrong offset!");
static_assert(offsetof(FVehiclePawnState, EntryTime) == 0x00001C, "Member 'FVehiclePawnState::EntryTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortCharacterPartsRepMontageInfo
// 0x0020 (0x0020 - 0x0000)
struct FFortCharacterPartsRepMontageInfo final
{
public:
	TArray<struct FFortCharacterPartMontageInfo>  CharPartMontages;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PawnMontage;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayBit;                                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCharacterPartsRepMontageInfo) == 0x000008, "Wrong alignment on FFortCharacterPartsRepMontageInfo");
static_assert(sizeof(FFortCharacterPartsRepMontageInfo) == 0x000020, "Wrong size on FFortCharacterPartsRepMontageInfo");
static_assert(offsetof(FFortCharacterPartsRepMontageInfo, CharPartMontages) == 0x000000, "Member 'FFortCharacterPartsRepMontageInfo::CharPartMontages' has a wrong offset!");
static_assert(offsetof(FFortCharacterPartsRepMontageInfo, PawnMontage) == 0x000010, "Member 'FFortCharacterPartsRepMontageInfo::PawnMontage' has a wrong offset!");
static_assert(offsetof(FFortCharacterPartsRepMontageInfo, bPlayBit) == 0x000018, "Member 'FFortCharacterPartsRepMontageInfo::bPlayBit' has a wrong offset!");

// ScriptStruct FortniteGame.FortVolumeManagerBlackListClasses
// 0x0028 (0x0030 - 0x0008)
struct FFortVolumeManagerBlackListClasses final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   ClassPath;                                         // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortVolumeManagerBlackListClasses) == 0x000008, "Wrong alignment on FFortVolumeManagerBlackListClasses");
static_assert(sizeof(FFortVolumeManagerBlackListClasses) == 0x000030, "Wrong size on FFortVolumeManagerBlackListClasses");
static_assert(offsetof(FFortVolumeManagerBlackListClasses, ClassPath) == 0x000008, "Member 'FFortVolumeManagerBlackListClasses::ClassPath' has a wrong offset!");

// ScriptStruct FortniteGame.FortSplineBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortSplineBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortSplineBase) == 0x000008, "Wrong alignment on FFortSplineBase");
static_assert(sizeof(FFortSplineBase) == 0x000010, "Wrong size on FFortSplineBase");
static_assert(offsetof(FFortSplineBase, StartTime) == 0x000008, "Member 'FFortSplineBase::StartTime' has a wrong offset!");
static_assert(offsetof(FFortSplineBase, Duration) == 0x00000C, "Member 'FFortSplineBase::Duration' has a wrong offset!");

// ScriptStruct FortniteGame.FortCatmullRomSpline
// 0x0010 (0x0020 - 0x0010)
struct FFortCatmullRomSpline final : public FFortSplineBase
{
public:
	TArray<struct FVector>                        ControlPoints;                                     // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortCatmullRomSpline) == 0x000008, "Wrong alignment on FFortCatmullRomSpline");
static_assert(sizeof(FFortCatmullRomSpline) == 0x000020, "Wrong size on FFortCatmullRomSpline");
static_assert(offsetof(FFortCatmullRomSpline, ControlPoints) == 0x000010, "Member 'FFortCatmullRomSpline::ControlPoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerPawnStats
// 0x0020 (0x00C8 - 0x00A8)
struct FFortPlayerPawnStats final : public FFortPawnStats
{
public:
	float                                         MaxJumpTime;                                       // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxStamina;                                        // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StaminaRegenRate;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StaminaRegenDelay;                                 // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SprintingStaminaExpenditureRate;                   // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PersonalVehicleFallingDamageTableRow;              // 0x00BC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerPawnStats) == 0x000008, "Wrong alignment on FFortPlayerPawnStats");
static_assert(sizeof(FFortPlayerPawnStats) == 0x0000C8, "Wrong size on FFortPlayerPawnStats");
static_assert(offsetof(FFortPlayerPawnStats, MaxJumpTime) == 0x0000A8, "Member 'FFortPlayerPawnStats::MaxJumpTime' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, MaxStamina) == 0x0000AC, "Member 'FFortPlayerPawnStats::MaxStamina' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, StaminaRegenRate) == 0x0000B0, "Member 'FFortPlayerPawnStats::StaminaRegenRate' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, StaminaRegenDelay) == 0x0000B4, "Member 'FFortPlayerPawnStats::StaminaRegenDelay' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, SprintingStaminaExpenditureRate) == 0x0000B8, "Member 'FFortPlayerPawnStats::SprintingStaminaExpenditureRate' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, PersonalVehicleFallingDamageTableRow) == 0x0000BC, "Member 'FFortPlayerPawnStats::PersonalVehicleFallingDamageTableRow' has a wrong offset!");

// ScriptStruct FortniteGame.SharedRepMovement
// 0x0054 (0x0054 - 0x0000)
struct FSharedRepMovement final
{
public:
	struct FRepMovement                           RepMovement;                                       // 0x0000(0x0034)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RepTimeStamp;                                      // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurretYaw;                                         // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurretPitch;                                       // 0x003C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        RemoteViewData32;                                  // 0x0040(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AccelerationPack;                                  // 0x0044(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          AccelerationZPack;                                 // 0x0046(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepMovementMode;                                   // 0x0047(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         JumpFlashCountPacked;                              // 0x0048(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LandingFlashCountPacked;                           // 0x0049(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMovementStyle                            CurrentMovementStyle;                              // 0x004A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProxyIsJumpForceApplied;                          // 0x004B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCrouched;                                       // 0x004C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkydiving;                                      // 0x004D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsParachuteOpen;                                  // 0x004E(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSlopeSliding;                                   // 0x004F(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsProxySimulationTimedOut;                        // 0x0050(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargeting;                                      // 0x0051(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSharedRepMovement) == 0x000004, "Wrong alignment on FSharedRepMovement");
static_assert(sizeof(FSharedRepMovement) == 0x000054, "Wrong size on FSharedRepMovement");
static_assert(offsetof(FSharedRepMovement, RepMovement) == 0x000000, "Member 'FSharedRepMovement::RepMovement' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, RepTimeStamp) == 0x000034, "Member 'FSharedRepMovement::RepTimeStamp' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, TurretYaw) == 0x000038, "Member 'FSharedRepMovement::TurretYaw' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, TurretPitch) == 0x00003C, "Member 'FSharedRepMovement::TurretPitch' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, RemoteViewData32) == 0x000040, "Member 'FSharedRepMovement::RemoteViewData32' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, AccelerationPack) == 0x000044, "Member 'FSharedRepMovement::AccelerationPack' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, AccelerationZPack) == 0x000046, "Member 'FSharedRepMovement::AccelerationZPack' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, RepMovementMode) == 0x000047, "Member 'FSharedRepMovement::RepMovementMode' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, JumpFlashCountPacked) == 0x000048, "Member 'FSharedRepMovement::JumpFlashCountPacked' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, LandingFlashCountPacked) == 0x000049, "Member 'FSharedRepMovement::LandingFlashCountPacked' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, CurrentMovementStyle) == 0x00004A, "Member 'FSharedRepMovement::CurrentMovementStyle' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, bProxyIsJumpForceApplied) == 0x00004B, "Member 'FSharedRepMovement::bProxyIsJumpForceApplied' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, bIsCrouched) == 0x00004C, "Member 'FSharedRepMovement::bIsCrouched' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, bIsSkydiving) == 0x00004D, "Member 'FSharedRepMovement::bIsSkydiving' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, bIsParachuteOpen) == 0x00004E, "Member 'FSharedRepMovement::bIsParachuteOpen' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, bIsSlopeSliding) == 0x00004F, "Member 'FSharedRepMovement::bIsSlopeSliding' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, bIsProxySimulationTimedOut) == 0x000050, "Member 'FSharedRepMovement::bIsProxySimulationTimedOut' has a wrong offset!");
static_assert(offsetof(FSharedRepMovement, bIsTargeting) == 0x000051, "Member 'FSharedRepMovement::bIsTargeting' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaPawnReplayData
// 0x0030 (0x0030 - 0x0000)
struct FAthenaPawnReplayData final
{
public:
	float                                         HealthRatio;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShieldRatio;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 CipherText;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UWorld*                                 World;                                             // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaPawnReplayData) == 0x000008, "Wrong alignment on FAthenaPawnReplayData");
static_assert(sizeof(FAthenaPawnReplayData) == 0x000030, "Wrong size on FAthenaPawnReplayData");
static_assert(offsetof(FAthenaPawnReplayData, HealthRatio) == 0x000000, "Member 'FAthenaPawnReplayData::HealthRatio' has a wrong offset!");
static_assert(offsetof(FAthenaPawnReplayData, ShieldRatio) == 0x000004, "Member 'FAthenaPawnReplayData::ShieldRatio' has a wrong offset!");
static_assert(offsetof(FAthenaPawnReplayData, CipherText) == 0x000008, "Member 'FAthenaPawnReplayData::CipherText' has a wrong offset!");
static_assert(offsetof(FAthenaPawnReplayData, World) == 0x000018, "Member 'FAthenaPawnReplayData::World' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterTileEditorData
// 0x00D8 (0x00D8 - 0x0000)
struct FFortTheaterTileEditorData final
{
public:
	int32                                         XCoordinate;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YCoordinate;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortZoneTheme>             ZoneTheme;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortRegionInfo*                        Region;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x0018(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortLinkedQuest>               LinkedQuests;                                      // 0x0078(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortTheaterMapTileType                       TileType;                                          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TileTags;                                          // 0x0090(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterMissionWeight>      MissionWeightOverrides;                            // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterDifficultyWeight>   DifficultyWeightOverrides;                         // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bCanBeMissionAlert;                                // 0x00D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTheaterTileEditorData) == 0x000008, "Wrong alignment on FFortTheaterTileEditorData");
static_assert(sizeof(FFortTheaterTileEditorData) == 0x0000D8, "Wrong size on FFortTheaterTileEditorData");
static_assert(offsetof(FFortTheaterTileEditorData, XCoordinate) == 0x000000, "Member 'FFortTheaterTileEditorData::XCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, YCoordinate) == 0x000004, "Member 'FFortTheaterTileEditorData::YCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, ZoneTheme) == 0x000008, "Member 'FFortTheaterTileEditorData::ZoneTheme' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, Region) == 0x000010, "Member 'FFortTheaterTileEditorData::Region' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, Requirements) == 0x000018, "Member 'FFortTheaterTileEditorData::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, LinkedQuests) == 0x000078, "Member 'FFortTheaterTileEditorData::LinkedQuests' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, TileType) == 0x000088, "Member 'FFortTheaterTileEditorData::TileType' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, TileTags) == 0x000090, "Member 'FFortTheaterTileEditorData::TileTags' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, MissionWeightOverrides) == 0x0000B0, "Member 'FFortTheaterTileEditorData::MissionWeightOverrides' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, DifficultyWeightOverrides) == 0x0000C0, "Member 'FFortTheaterTileEditorData::DifficultyWeightOverrides' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, bCanBeMissionAlert) == 0x0000D0, "Member 'FFortTheaterTileEditorData::bCanBeMissionAlert' has a wrong offset!");

// ScriptStruct FortniteGame.PetStimuliRepData
// 0x000C (0x000C - 0x0000)
struct FPetStimuliRepData final
{
public:
	struct FGameplayTag                           Stimuli;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameTimeEnd;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPetStimuliRepData) == 0x000004, "Wrong alignment on FPetStimuliRepData");
static_assert(sizeof(FPetStimuliRepData) == 0x00000C, "Wrong size on FPetStimuliRepData");
static_assert(offsetof(FPetStimuliRepData, Stimuli) == 0x000000, "Member 'FPetStimuliRepData::Stimuli' has a wrong offset!");
static_assert(offsetof(FPetStimuliRepData, GameTimeEnd) == 0x000008, "Member 'FPetStimuliRepData::GameTimeEnd' has a wrong offset!");

// ScriptStruct FortniteGame.FortResurrectionData
// 0x0018 (0x0018 - 0x0000)
struct FFortResurrectionData final
{
public:
	bool                                          bResurrectionChipAvailable;                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ResurrectionExpirationTime;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResurrectionExpirationLength;                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortResurrectionData) == 0x000004, "Wrong alignment on FFortResurrectionData");
static_assert(sizeof(FFortResurrectionData) == 0x000018, "Wrong size on FFortResurrectionData");
static_assert(offsetof(FFortResurrectionData, bResurrectionChipAvailable) == 0x000000, "Member 'FFortResurrectionData::bResurrectionChipAvailable' has a wrong offset!");
static_assert(offsetof(FFortResurrectionData, ResurrectionExpirationTime) == 0x000004, "Member 'FFortResurrectionData::ResurrectionExpirationTime' has a wrong offset!");
static_assert(offsetof(FFortResurrectionData, ResurrectionExpirationLength) == 0x000008, "Member 'FFortResurrectionData::ResurrectionExpirationLength' has a wrong offset!");
static_assert(offsetof(FFortResurrectionData, WorldLocation) == 0x00000C, "Member 'FFortResurrectionData::WorldLocation' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerBannerInfo
// 0x0028 (0x0028 - 0x0000)
struct FPlayerBannerInfo final
{
public:
	class FString                                 IconId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerBannerInfo) == 0x000008, "Wrong alignment on FPlayerBannerInfo");
static_assert(sizeof(FPlayerBannerInfo) == 0x000028, "Wrong size on FPlayerBannerInfo");
static_assert(offsetof(FPlayerBannerInfo, IconId) == 0x000000, "Member 'FPlayerBannerInfo::IconId' has a wrong offset!");
static_assert(offsetof(FPlayerBannerInfo, ColorId) == 0x000010, "Member 'FPlayerBannerInfo::ColorId' has a wrong offset!");
static_assert(offsetof(FPlayerBannerInfo, Level) == 0x000020, "Member 'FPlayerBannerInfo::Level' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpectatorZoneArray
// 0x0018 (0x0120 - 0x0108)
struct FFortSpectatorZoneArray final : public FFastArraySerializer
{
public:
	TArray<struct FFortSpectatorZoneItem>         SpectatorArray;                                    // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AFortPlayerStateZone*                   OwningState;                                       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortSpectatorZoneArray) == 0x000008, "Wrong alignment on FFortSpectatorZoneArray");
static_assert(sizeof(FFortSpectatorZoneArray) == 0x000120, "Wrong size on FFortSpectatorZoneArray");
static_assert(offsetof(FFortSpectatorZoneArray, SpectatorArray) == 0x000108, "Member 'FFortSpectatorZoneArray::SpectatorArray' has a wrong offset!");
static_assert(offsetof(FFortSpectatorZoneArray, OwningState) == 0x000118, "Member 'FFortSpectatorZoneArray::OwningState' has a wrong offset!");

// ScriptStruct FortniteGame.AccumulatedItemEntry
// 0x0010 (0x0010 - 0x0000)
struct FAccumulatedItemEntry final
{
public:
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccumulatedItemEntry) == 0x000008, "Wrong alignment on FAccumulatedItemEntry");
static_assert(sizeof(FAccumulatedItemEntry) == 0x000010, "Wrong size on FAccumulatedItemEntry");
static_assert(offsetof(FAccumulatedItemEntry, ItemDefinition) == 0x000000, "Member 'FAccumulatedItemEntry::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FAccumulatedItemEntry, Quantity) == 0x000008, "Member 'FAccumulatedItemEntry::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyAnalyticsAnswerBase
// 0x0004 (0x0004 - 0x0000)
struct FFortPlayerSurveyAnalyticsAnswerBase
{
public:
	uint32                                        TimeTaken;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnalyticsAnswerBase) == 0x000004, "Wrong alignment on FFortPlayerSurveyAnalyticsAnswerBase");
static_assert(sizeof(FFortPlayerSurveyAnalyticsAnswerBase) == 0x000004, "Wrong size on FFortPlayerSurveyAnalyticsAnswerBase");
static_assert(offsetof(FFortPlayerSurveyAnalyticsAnswerBase, TimeTaken) == 0x000000, "Member 'FFortPlayerSurveyAnalyticsAnswerBase::TimeTaken' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyAnalyticsAnswerFreeFormText
// 0x0014 (0x0018 - 0x0004)
struct FFortPlayerSurveyAnalyticsAnswerFreeFormText final : public FFortPlayerSurveyAnalyticsAnswerBase
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnswerText;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnalyticsAnswerFreeFormText) == 0x000008, "Wrong alignment on FFortPlayerSurveyAnalyticsAnswerFreeFormText");
static_assert(sizeof(FFortPlayerSurveyAnalyticsAnswerFreeFormText) == 0x000018, "Wrong size on FFortPlayerSurveyAnalyticsAnswerFreeFormText");
static_assert(offsetof(FFortPlayerSurveyAnalyticsAnswerFreeFormText, AnswerText) == 0x000008, "Member 'FFortPlayerSurveyAnalyticsAnswerFreeFormText::AnswerText' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyAnalyticsAnswerMultipleSelectionSingleAnswer
// 0x0008 (0x0008 - 0x0000)
struct FFortPlayerSurveyAnalyticsAnswerMultipleSelectionSingleAnswer final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TimeTaken;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnalyticsAnswerMultipleSelectionSingleAnswer) == 0x000004, "Wrong alignment on FFortPlayerSurveyAnalyticsAnswerMultipleSelectionSingleAnswer");
static_assert(sizeof(FFortPlayerSurveyAnalyticsAnswerMultipleSelectionSingleAnswer) == 0x000008, "Wrong size on FFortPlayerSurveyAnalyticsAnswerMultipleSelectionSingleAnswer");
static_assert(offsetof(FFortPlayerSurveyAnalyticsAnswerMultipleSelectionSingleAnswer, Selected) == 0x000000, "Member 'FFortPlayerSurveyAnalyticsAnswerMultipleSelectionSingleAnswer::Selected' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyAnalyticsAnswerMultipleSelectionSingleAnswer, TimeTaken) == 0x000004, "Member 'FFortPlayerSurveyAnalyticsAnswerMultipleSelectionSingleAnswer::TimeTaken' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyAnalyticsAnswerMultipleSelection
// 0x0014 (0x0018 - 0x0004)
struct FFortPlayerSurveyAnalyticsAnswerMultipleSelection final : public FFortPlayerSurveyAnalyticsAnswerBase
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortPlayerSurveyAnalyticsAnswerMultipleSelectionSingleAnswer> AnswerList;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnalyticsAnswerMultipleSelection) == 0x000008, "Wrong alignment on FFortPlayerSurveyAnalyticsAnswerMultipleSelection");
static_assert(sizeof(FFortPlayerSurveyAnalyticsAnswerMultipleSelection) == 0x000018, "Wrong size on FFortPlayerSurveyAnalyticsAnswerMultipleSelection");
static_assert(offsetof(FFortPlayerSurveyAnalyticsAnswerMultipleSelection, AnswerList) == 0x000008, "Member 'FFortPlayerSurveyAnalyticsAnswerMultipleSelection::AnswerList' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyAnalyticsAnswerMultipleChoice
// 0x0004 (0x0008 - 0x0004)
struct FFortPlayerSurveyAnalyticsAnswerMultipleChoice final : public FFortPlayerSurveyAnalyticsAnswerBase
{
public:
	int32                                         AnswerIndex;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnalyticsAnswerMultipleChoice) == 0x000004, "Wrong alignment on FFortPlayerSurveyAnalyticsAnswerMultipleChoice");
static_assert(sizeof(FFortPlayerSurveyAnalyticsAnswerMultipleChoice) == 0x000008, "Wrong size on FFortPlayerSurveyAnalyticsAnswerMultipleChoice");
static_assert(offsetof(FFortPlayerSurveyAnalyticsAnswerMultipleChoice, AnswerIndex) == 0x000004, "Member 'FFortPlayerSurveyAnalyticsAnswerMultipleChoice::AnswerIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyAnswerFreeFormText
// 0x0010 (0x0018 - 0x0008)
struct FFortPlayerSurveyAnswerFreeFormText final : public FFortPlayerSurveyAnswerBase
{
public:
	class FString                                 AnswerText;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnswerFreeFormText) == 0x000008, "Wrong alignment on FFortPlayerSurveyAnswerFreeFormText");
static_assert(sizeof(FFortPlayerSurveyAnswerFreeFormText) == 0x000018, "Wrong size on FFortPlayerSurveyAnswerFreeFormText");
static_assert(offsetof(FFortPlayerSurveyAnswerFreeFormText, AnswerText) == 0x000008, "Member 'FFortPlayerSurveyAnswerFreeFormText::AnswerText' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyAnswerMultipleChoice
// 0x0008 (0x0010 - 0x0008)
struct FFortPlayerSurveyAnswerMultipleChoice final : public FFortPlayerSurveyAnswerBase
{
public:
	int32                                         AnswerIndex;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyAnswerMultipleChoice) == 0x000008, "Wrong alignment on FFortPlayerSurveyAnswerMultipleChoice");
static_assert(sizeof(FFortPlayerSurveyAnswerMultipleChoice) == 0x000010, "Wrong size on FFortPlayerSurveyAnswerMultipleChoice");
static_assert(offsetof(FFortPlayerSurveyAnswerMultipleChoice, AnswerIndex) == 0x000008, "Member 'FFortPlayerSurveyAnswerMultipleChoice::AnswerIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyDescriptionMessage
// 0x0030 (0x0030 - 0x0000)
struct FFortPlayerSurveyDescriptionMessage final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MESSAGE;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyDescriptionMessage) == 0x000008, "Wrong alignment on FFortPlayerSurveyDescriptionMessage");
static_assert(sizeof(FFortPlayerSurveyDescriptionMessage) == 0x000030, "Wrong size on FFortPlayerSurveyDescriptionMessage");
static_assert(offsetof(FFortPlayerSurveyDescriptionMessage, Title) == 0x000000, "Member 'FFortPlayerSurveyDescriptionMessage::Title' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyDescriptionMessage, MESSAGE) == 0x000018, "Member 'FFortPlayerSurveyDescriptionMessage::MESSAGE' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSurveyDescription
// 0x0050 (0x0050 - 0x0000)
struct FFortPlayerSurveyDescription final
{
public:
	class FText                                   SurveyTitle;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFortPlayerSurveyDescriptionMessage    CancelConfirmationMessage;                         // 0x0018(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         DefaultAnswer;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyDescription) == 0x000008, "Wrong alignment on FFortPlayerSurveyDescription");
static_assert(sizeof(FFortPlayerSurveyDescription) == 0x000050, "Wrong size on FFortPlayerSurveyDescription");
static_assert(offsetof(FFortPlayerSurveyDescription, SurveyTitle) == 0x000000, "Member 'FFortPlayerSurveyDescription::SurveyTitle' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyDescription, CancelConfirmationMessage) == 0x000018, "Member 'FFortPlayerSurveyDescription::CancelConfirmationMessage' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyDescription, DefaultAnswer) == 0x000048, "Member 'FFortPlayerSurveyDescription::DefaultAnswer' has a wrong offset!");

// ScriptStruct FortniteGame.VehicleTrickLocalAxisRotInfo
// 0x0018 (0x0018 - 0x0000)
struct FVehicleTrickLocalAxisRotInfo final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccumulatedHalfSpinCount;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedAngle;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAtFurthestExtent;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrickOrder;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Points;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleTrickLocalAxisRotInfo) == 0x000004, "Wrong alignment on FVehicleTrickLocalAxisRotInfo");
static_assert(sizeof(FVehicleTrickLocalAxisRotInfo) == 0x000018, "Wrong size on FVehicleTrickLocalAxisRotInfo");
static_assert(offsetof(FVehicleTrickLocalAxisRotInfo, Angle) == 0x000000, "Member 'FVehicleTrickLocalAxisRotInfo::Angle' has a wrong offset!");
static_assert(offsetof(FVehicleTrickLocalAxisRotInfo, AccumulatedHalfSpinCount) == 0x000004, "Member 'FVehicleTrickLocalAxisRotInfo::AccumulatedHalfSpinCount' has a wrong offset!");
static_assert(offsetof(FVehicleTrickLocalAxisRotInfo, AccumulatedAngle) == 0x000008, "Member 'FVehicleTrickLocalAxisRotInfo::AccumulatedAngle' has a wrong offset!");
static_assert(offsetof(FVehicleTrickLocalAxisRotInfo, AngleAtFurthestExtent) == 0x00000C, "Member 'FVehicleTrickLocalAxisRotInfo::AngleAtFurthestExtent' has a wrong offset!");
static_assert(offsetof(FVehicleTrickLocalAxisRotInfo, TrickOrder) == 0x000010, "Member 'FVehicleTrickLocalAxisRotInfo::TrickOrder' has a wrong offset!");
static_assert(offsetof(FVehicleTrickLocalAxisRotInfo, Points) == 0x000014, "Member 'FVehicleTrickLocalAxisRotInfo::Points' has a wrong offset!");

// ScriptStruct FortniteGame.FortNamedWeightRow
// 0x0050 (0x0058 - 0x0008)
struct FFortNamedWeightRow final : public FTableRowBase
{
public:
	TMap<class FString, float>                    NamedWeightMap;                                    // 0x0008(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortNamedWeightRow) == 0x000008, "Wrong alignment on FFortNamedWeightRow");
static_assert(sizeof(FFortNamedWeightRow) == 0x000058, "Wrong size on FFortNamedWeightRow");
static_assert(offsetof(FFortNamedWeightRow, NamedWeightMap) == 0x000008, "Member 'FFortNamedWeightRow::NamedWeightMap' has a wrong offset!");

// ScriptStruct FortniteGame.NamedWeightTableRow
// 0x0010 (0x0018 - 0x0008)
struct FNamedWeightTableRow final : public FTableRowBase
{
public:
	struct FQueryName                             QueryName;                                         // 0x0008(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNamedWeightTableRow) == 0x000008, "Wrong alignment on FNamedWeightTableRow");
static_assert(sizeof(FNamedWeightTableRow) == 0x000018, "Wrong size on FNamedWeightTableRow");
static_assert(offsetof(FNamedWeightTableRow, QueryName) == 0x000008, "Member 'FNamedWeightTableRow::QueryName' has a wrong offset!");
static_assert(offsetof(FNamedWeightTableRow, Weight) == 0x000010, "Member 'FNamedWeightTableRow::Weight' has a wrong offset!");

// ScriptStruct FortniteGame.RatingExpansion
// 0x0008 (0x0008 - 0x0000)
struct FRatingExpansion final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RatingDelta;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRatingExpansion) == 0x000004, "Wrong alignment on FRatingExpansion");
static_assert(sizeof(FRatingExpansion) == 0x000008, "Wrong size on FRatingExpansion");
static_assert(offsetof(FRatingExpansion, Priority) == 0x000000, "Member 'FRatingExpansion::Priority' has a wrong offset!");
static_assert(offsetof(FRatingExpansion, RatingDelta) == 0x000004, "Member 'FRatingExpansion::RatingDelta' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistUIExtension
// 0x0030 (0x0030 - 0x0000)
struct FPlaylistUIExtension final
{
public:
	EPlaylistUIExtensionSlot                      Slot;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistUIExtension) == 0x000008, "Wrong alignment on FPlaylistUIExtension");
static_assert(sizeof(FPlaylistUIExtension) == 0x000030, "Wrong size on FPlaylistUIExtension");
static_assert(offsetof(FPlaylistUIExtension, Slot) == 0x000000, "Member 'FPlaylistUIExtension::Slot' has a wrong offset!");
static_assert(offsetof(FPlaylistUIExtension, WidgetClass) == 0x000008, "Member 'FPlaylistUIExtension::WidgetClass' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistOverrideData
// 0x0020 (0x0020 - 0x0000)
struct FPlaylistOverrideData final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         RegionsDisabled;                                   // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistOverrideData) == 0x000008, "Wrong alignment on FPlaylistOverrideData");
static_assert(sizeof(FPlaylistOverrideData) == 0x000020, "Wrong size on FPlaylistOverrideData");
static_assert(offsetof(FPlaylistOverrideData, PlaylistName) == 0x000000, "Member 'FPlaylistOverrideData::PlaylistName' has a wrong offset!");
static_assert(offsetof(FPlaylistOverrideData, bEnabled) == 0x000008, "Member 'FPlaylistOverrideData::bEnabled' has a wrong offset!");
static_assert(offsetof(FPlaylistOverrideData, RegionsDisabled) == 0x000010, "Member 'FPlaylistOverrideData::RegionsDisabled' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistAccessOverride
// 0x0030 (0x0030 - 0x0000)
struct FPlaylistAccessOverride final
{
public:
	TArray<class FString>                         Regions;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Platforms;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPlaylistAccess                        OverrideAccess;                                    // 0x0020(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistAccessOverride) == 0x000008, "Wrong alignment on FPlaylistAccessOverride");
static_assert(sizeof(FPlaylistAccessOverride) == 0x000030, "Wrong size on FPlaylistAccessOverride");
static_assert(offsetof(FPlaylistAccessOverride, Regions) == 0x000000, "Member 'FPlaylistAccessOverride::Regions' has a wrong offset!");
static_assert(offsetof(FPlaylistAccessOverride, Platforms) == 0x000010, "Member 'FPlaylistAccessOverride::Platforms' has a wrong offset!");
static_assert(offsetof(FPlaylistAccessOverride, OverrideAccess) == 0x000020, "Member 'FPlaylistAccessOverride::OverrideAccess' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistFrontEndSettings
// 0x0028 (0x0028 - 0x0000)
struct FPlaylistFrontEndSettings final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlaylistAccess                        PlaylistAccess;                                    // 0x0008(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPlaylistAccessOverride>        AccessOverrides;                                   // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistFrontEndSettings) == 0x000008, "Wrong alignment on FPlaylistFrontEndSettings");
static_assert(sizeof(FPlaylistFrontEndSettings) == 0x000028, "Wrong size on FPlaylistFrontEndSettings");
static_assert(offsetof(FPlaylistFrontEndSettings, PlaylistName) == 0x000000, "Member 'FPlaylistFrontEndSettings::PlaylistName' has a wrong offset!");
static_assert(offsetof(FPlaylistFrontEndSettings, PlaylistAccess) == 0x000008, "Member 'FPlaylistFrontEndSettings::PlaylistAccess' has a wrong offset!");
static_assert(offsetof(FPlaylistFrontEndSettings, AccessOverrides) == 0x000018, "Member 'FPlaylistFrontEndSettings::AccessOverrides' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistOptionStringValue
// 0x0010 (0x0038 - 0x0028)
struct FPlaylistOptionStringValue final : public FPlaylistOptionValue
{
public:
	class FString                                 Value;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistOptionStringValue) == 0x000008, "Wrong alignment on FPlaylistOptionStringValue");
static_assert(sizeof(FPlaylistOptionStringValue) == 0x000038, "Wrong size on FPlaylistOptionStringValue");
static_assert(offsetof(FPlaylistOptionStringValue, Value) == 0x000028, "Member 'FPlaylistOptionStringValue::Value' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistOptionFloatValue
// 0x0020 (0x0048 - 0x0028)
struct FPlaylistOptionFloatValue final : public FPlaylistOptionValue
{
public:
	struct FScalableFloat                         Value;                                             // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistOptionFloatValue) == 0x000008, "Wrong alignment on FPlaylistOptionFloatValue");
static_assert(sizeof(FPlaylistOptionFloatValue) == 0x000048, "Wrong size on FPlaylistOptionFloatValue");
static_assert(offsetof(FPlaylistOptionFloatValue, Value) == 0x000028, "Member 'FPlaylistOptionFloatValue::Value' has a wrong offset!");

// ScriptStruct FortniteGame.PlaylistOptionIntValue
// 0x0008 (0x0030 - 0x0028)
struct FPlaylistOptionIntValue final : public FPlaylistOptionValue
{
public:
	int32                                         Value;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaylistOptionIntValue) == 0x000008, "Wrong alignment on FPlaylistOptionIntValue");
static_assert(sizeof(FPlaylistOptionIntValue) == 0x000030, "Wrong size on FPlaylistOptionIntValue");
static_assert(offsetof(FPlaylistOptionIntValue, Value) == 0x000028, "Member 'FPlaylistOptionIntValue::Value' has a wrong offset!");

// ScriptStruct FortniteGame.FortPOIAmbientAudioOneShot
// 0x0028 (0x0028 - 0x0000)
struct FFortPOIAmbientAudioOneShot final
{
public:
	class USoundBase*                             OneShotSound;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RetriggerTimeRange;                                // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TriggerDistanceRange;                              // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EFortDayPhase>                         AllowedDayPhases;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPOIAmbientAudioOneShot) == 0x000008, "Wrong alignment on FFortPOIAmbientAudioOneShot");
static_assert(sizeof(FFortPOIAmbientAudioOneShot) == 0x000028, "Wrong size on FFortPOIAmbientAudioOneShot");
static_assert(offsetof(FFortPOIAmbientAudioOneShot, OneShotSound) == 0x000000, "Member 'FFortPOIAmbientAudioOneShot::OneShotSound' has a wrong offset!");
static_assert(offsetof(FFortPOIAmbientAudioOneShot, RetriggerTimeRange) == 0x000008, "Member 'FFortPOIAmbientAudioOneShot::RetriggerTimeRange' has a wrong offset!");
static_assert(offsetof(FFortPOIAmbientAudioOneShot, TriggerDistanceRange) == 0x000010, "Member 'FFortPOIAmbientAudioOneShot::TriggerDistanceRange' has a wrong offset!");
static_assert(offsetof(FFortPOIAmbientAudioOneShot, AllowedDayPhases) == 0x000018, "Member 'FFortPOIAmbientAudioOneShot::AllowedDayPhases' has a wrong offset!");

// ScriptStruct FortniteGame.FortPoiGridInfo
// 0x0028 (0x0028 - 0x0000)
struct FFortPoiGridInfo final
{
public:
	struct FVector2D                              WorldGridStart;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WorldGridEnd;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WorldGridSpacing;                                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridCountX;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridCountY;                                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WorldGridTotalSize;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPoiGridInfo) == 0x000004, "Wrong alignment on FFortPoiGridInfo");
static_assert(sizeof(FFortPoiGridInfo) == 0x000028, "Wrong size on FFortPoiGridInfo");
static_assert(offsetof(FFortPoiGridInfo, WorldGridStart) == 0x000000, "Member 'FFortPoiGridInfo::WorldGridStart' has a wrong offset!");
static_assert(offsetof(FFortPoiGridInfo, WorldGridEnd) == 0x000008, "Member 'FFortPoiGridInfo::WorldGridEnd' has a wrong offset!");
static_assert(offsetof(FFortPoiGridInfo, WorldGridSpacing) == 0x000010, "Member 'FFortPoiGridInfo::WorldGridSpacing' has a wrong offset!");
static_assert(offsetof(FFortPoiGridInfo, GridCountX) == 0x000018, "Member 'FFortPoiGridInfo::GridCountX' has a wrong offset!");
static_assert(offsetof(FFortPoiGridInfo, GridCountY) == 0x00001C, "Member 'FFortPoiGridInfo::GridCountY' has a wrong offset!");
static_assert(offsetof(FFortPoiGridInfo, WorldGridTotalSize) == 0x000020, "Member 'FFortPoiGridInfo::WorldGridTotalSize' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerEarnedItemCaches
// 0x0038 (0x0038 - 0x0000)
struct FFortPlayerEarnedItemCaches final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItemCacheItemDefinition*>   EarnedItemCaches;                                  // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerEarnedItemCaches) == 0x000008, "Wrong alignment on FFortPlayerEarnedItemCaches");
static_assert(sizeof(FFortPlayerEarnedItemCaches) == 0x000038, "Wrong size on FFortPlayerEarnedItemCaches");
static_assert(offsetof(FFortPlayerEarnedItemCaches, PlayerID) == 0x000000, "Member 'FFortPlayerEarnedItemCaches::PlayerID' has a wrong offset!");
static_assert(offsetof(FFortPlayerEarnedItemCaches, EarnedItemCaches) == 0x000028, "Member 'FFortPlayerEarnedItemCaches::EarnedItemCaches' has a wrong offset!");

// ScriptStruct FortniteGame.FortPoiVolumeGridCell
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortPoiVolumeGridCell final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPoiVolumeGridCell) == 0x000008, "Wrong alignment on FFortPoiVolumeGridCell");
static_assert(sizeof(FFortPoiVolumeGridCell) == 0x000010, "Wrong size on FFortPoiVolumeGridCell");

// ScriptStruct FortniteGame.ProfileGoCommand
// 0x0038 (0x0038 - 0x0000)
struct FProfileGoCommand final
{
public:
	class FString                                 Group;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wait;                                              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Log;                                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfileGoCommand) == 0x000008, "Wrong alignment on FProfileGoCommand");
static_assert(sizeof(FProfileGoCommand) == 0x000038, "Wrong size on FProfileGoCommand");
static_assert(offsetof(FProfileGoCommand, Group) == 0x000000, "Member 'FProfileGoCommand::Group' has a wrong offset!");
static_assert(offsetof(FProfileGoCommand, Command) == 0x000010, "Member 'FProfileGoCommand::Command' has a wrong offset!");
static_assert(offsetof(FProfileGoCommand, Wait) == 0x000020, "Member 'FProfileGoCommand::Wait' has a wrong offset!");
static_assert(offsetof(FProfileGoCommand, Log) == 0x000028, "Member 'FProfileGoCommand::Log' has a wrong offset!");

// ScriptStruct FortniteGame.ProfileGoCollection
// 0x0020 (0x0020 - 0x0000)
struct FProfileGoCollection final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Scenarios;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfileGoCollection) == 0x000008, "Wrong alignment on FProfileGoCollection");
static_assert(sizeof(FProfileGoCollection) == 0x000020, "Wrong size on FProfileGoCollection");
static_assert(offsetof(FProfileGoCollection, Name) == 0x000000, "Member 'FProfileGoCollection::Name' has a wrong offset!");
static_assert(offsetof(FProfileGoCollection, Scenarios) == 0x000010, "Member 'FProfileGoCollection::Scenarios' has a wrong offset!");

// ScriptStruct FortniteGame.ProfileGoGeneratedScenario
// 0x0040 (0x0090 - 0x0050)
struct FProfileGoGeneratedScenario final : public FProfileGoScenario
{
public:
	class FString                                 Command;                                           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parameters;                                        // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Location;                                          // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arguments;                                         // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfileGoGeneratedScenario) == 0x000008, "Wrong alignment on FProfileGoGeneratedScenario");
static_assert(sizeof(FProfileGoGeneratedScenario) == 0x000090, "Wrong size on FProfileGoGeneratedScenario");
static_assert(offsetof(FProfileGoGeneratedScenario, Command) == 0x000050, "Member 'FProfileGoGeneratedScenario::Command' has a wrong offset!");
static_assert(offsetof(FProfileGoGeneratedScenario, Parameters) == 0x000060, "Member 'FProfileGoGeneratedScenario::Parameters' has a wrong offset!");
static_assert(offsetof(FProfileGoGeneratedScenario, Location) == 0x000070, "Member 'FProfileGoGeneratedScenario::Location' has a wrong offset!");
static_assert(offsetof(FProfileGoGeneratedScenario, Arguments) == 0x000080, "Member 'FProfileGoGeneratedScenario::Arguments' has a wrong offset!");

// ScriptStruct FortniteGame.PropertyOverrideRepl
// 0x007C (0x0088 - 0x000C)
struct FPropertyOverrideRepl final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPropertyOverrideId                    PropertyId;                                        // 0x0010(0x0008)(Transient, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PropertyScopedName;                                // 0x0018(0x0010)(Edit, ZeroConstructor, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyData;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropertyOverrideRepl) == 0x000008, "Wrong alignment on FPropertyOverrideRepl");
static_assert(sizeof(FPropertyOverrideRepl) == 0x000088, "Wrong size on FPropertyOverrideRepl");
static_assert(offsetof(FPropertyOverrideRepl, PropertyId) == 0x000010, "Member 'FPropertyOverrideRepl::PropertyId' has a wrong offset!");
static_assert(offsetof(FPropertyOverrideRepl, PropertyScopedName) == 0x000018, "Member 'FPropertyOverrideRepl::PropertyScopedName' has a wrong offset!");
static_assert(offsetof(FPropertyOverrideRepl, PropertyData) == 0x000028, "Member 'FPropertyOverrideRepl::PropertyData' has a wrong offset!");

// ScriptStruct FortniteGame.PropertyOverrideDataRepl
// 0x0028 (0x0130 - 0x0108)
struct FPropertyOverrideDataRepl final : public FFastArraySerializer
{
public:
	UMulticastInlineDelegateProperty_             ReplNotifier;                                      // 0x0108(0x0010)(ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FPropertyOverrideRepl>          PropertyOverridesRepl;                             // 0x0118(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropertyOverrideDataRepl) == 0x000008, "Wrong alignment on FPropertyOverrideDataRepl");
static_assert(sizeof(FPropertyOverrideDataRepl) == 0x000130, "Wrong size on FPropertyOverrideDataRepl");
static_assert(offsetof(FPropertyOverrideDataRepl, ReplNotifier) == 0x000108, "Member 'FPropertyOverrideDataRepl::ReplNotifier' has a wrong offset!");
static_assert(offsetof(FPropertyOverrideDataRepl, PropertyOverridesRepl) == 0x000118, "Member 'FPropertyOverrideDataRepl::PropertyOverridesRepl' has a wrong offset!");

// ScriptStruct FortniteGame.GoalDistanceData
// 0x0090 (0x0090 - 0x0000)
struct FGoalDistanceData final
{
public:
	bool                                          bIgnoreScreeningDistance;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIDataProviderFloatValue              ScreeningTestMaxDistance;                          // 0x0008(0x0030)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             TestScoreCurve;                                    // 0x0038(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              CurveDistanceScale;                                // 0x0060(0x0030)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalDistanceData) == 0x000008, "Wrong alignment on FGoalDistanceData");
static_assert(sizeof(FGoalDistanceData) == 0x000090, "Wrong size on FGoalDistanceData");
static_assert(offsetof(FGoalDistanceData, bIgnoreScreeningDistance) == 0x000000, "Member 'FGoalDistanceData::bIgnoreScreeningDistance' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, ScreeningTestMaxDistance) == 0x000008, "Member 'FGoalDistanceData::ScreeningTestMaxDistance' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, TestScoreCurve) == 0x000038, "Member 'FGoalDistanceData::TestScoreCurve' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, CurveDistanceScale) == 0x000060, "Member 'FGoalDistanceData::CurveDistanceScale' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestAchievementTableRow
// 0x0010 (0x0018 - 0x0008)
struct FFortQuestAchievementTableRow final : public FTableRowBase
{
public:
	EFortQuestState                               QuestState;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         XboxAchievementID;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PS4TrophyID;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestAchievementTableRow) == 0x000008, "Wrong alignment on FFortQuestAchievementTableRow");
static_assert(sizeof(FFortQuestAchievementTableRow) == 0x000018, "Wrong size on FFortQuestAchievementTableRow");
static_assert(offsetof(FFortQuestAchievementTableRow, QuestState) == 0x000008, "Member 'FFortQuestAchievementTableRow::QuestState' has a wrong offset!");
static_assert(offsetof(FFortQuestAchievementTableRow, XboxAchievementID) == 0x00000C, "Member 'FFortQuestAchievementTableRow::XboxAchievementID' has a wrong offset!");
static_assert(offsetof(FFortQuestAchievementTableRow, PS4TrophyID) == 0x000010, "Member 'FFortQuestAchievementTableRow::PS4TrophyID' has a wrong offset!");

// ScriptStruct FortniteGame.FortMcpQuestObjectiveInfo
// 0x0108 (0x0108 - 0x0000)
struct FFortMcpQuestObjectiveInfo final
{
public:
	class FName                                   BackendName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            AlternativeStatHandles;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EFortQuestObjectiveItemEvent                  ItemEvent;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHidden : 1;                                       // 0x0029(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRequirePrimaryMissionCompletion : 1;              // 0x0029(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanProgressInZone : 1;                            // 0x0029(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisplayDynamicAnnouncementUpdate : 1;             // 0x0029(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EObjectiveStatusUpdateType                    DynamicStatusUpdateType;                           // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          LinkVaultTab;                                      // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontendInventoryFilter                  LinkToItemManagement;                              // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortItemDefinition>     ItemReference;                                     // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemTemplateIdOverride;                            // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkSquadID;                                       // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LinkSquadIndex;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0078(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HudShortDescription;                               // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              HudIcon;                                           // 0x00A8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stage;                                             // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DynamicStatusUpdatePercentInterval;                // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicUpdateCompletionDelay;                      // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ScriptedAction;                                    // 0x00E0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMcpQuestObjectiveInfo) == 0x000008, "Wrong alignment on FFortMcpQuestObjectiveInfo");
static_assert(sizeof(FFortMcpQuestObjectiveInfo) == 0x000108, "Wrong size on FFortMcpQuestObjectiveInfo");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, BackendName) == 0x000000, "Member 'FFortMcpQuestObjectiveInfo::BackendName' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ObjectiveStatHandle) == 0x000008, "Member 'FFortMcpQuestObjectiveInfo::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, AlternativeStatHandles) == 0x000018, "Member 'FFortMcpQuestObjectiveInfo::AlternativeStatHandles' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ItemEvent) == 0x000028, "Member 'FFortMcpQuestObjectiveInfo::ItemEvent' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, DynamicStatusUpdateType) == 0x00002A, "Member 'FFortMcpQuestObjectiveInfo::DynamicStatusUpdateType' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, LinkVaultTab) == 0x00002B, "Member 'FFortMcpQuestObjectiveInfo::LinkVaultTab' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, LinkToItemManagement) == 0x00002C, "Member 'FFortMcpQuestObjectiveInfo::LinkToItemManagement' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ItemReference) == 0x000030, "Member 'FFortMcpQuestObjectiveInfo::ItemReference' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ItemTemplateIdOverride) == 0x000058, "Member 'FFortMcpQuestObjectiveInfo::ItemTemplateIdOverride' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, LinkSquadID) == 0x000068, "Member 'FFortMcpQuestObjectiveInfo::LinkSquadID' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, LinkSquadIndex) == 0x000070, "Member 'FFortMcpQuestObjectiveInfo::LinkSquadIndex' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, Description) == 0x000078, "Member 'FFortMcpQuestObjectiveInfo::Description' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, HudShortDescription) == 0x000090, "Member 'FFortMcpQuestObjectiveInfo::HudShortDescription' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, HudIcon) == 0x0000A8, "Member 'FFortMcpQuestObjectiveInfo::HudIcon' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, Count) == 0x0000D0, "Member 'FFortMcpQuestObjectiveInfo::Count' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, Stage) == 0x0000D4, "Member 'FFortMcpQuestObjectiveInfo::Stage' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, DynamicStatusUpdatePercentInterval) == 0x0000D8, "Member 'FFortMcpQuestObjectiveInfo::DynamicStatusUpdatePercentInterval' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, DynamicUpdateCompletionDelay) == 0x0000DC, "Member 'FFortMcpQuestObjectiveInfo::DynamicUpdateCompletionDelay' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ScriptedAction) == 0x0000E0, "Member 'FFortMcpQuestObjectiveInfo::ScriptedAction' has a wrong offset!");

// ScriptStruct FortniteGame.FortMcpQuestRewardInfo
// 0x0010 (0x0010 - 0x0000)
struct FFortMcpQuestRewardInfo final
{
public:
	TArray<struct FFortItemQuantityPair>          Rewards;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMcpQuestRewardInfo) == 0x000008, "Wrong alignment on FFortMcpQuestRewardInfo");
static_assert(sizeof(FFortMcpQuestRewardInfo) == 0x000010, "Wrong size on FFortMcpQuestRewardInfo");
static_assert(offsetof(FFortMcpQuestRewardInfo, Rewards) == 0x000000, "Member 'FFortMcpQuestRewardInfo::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestObjectiveStatTableRow
// 0x00E0 (0x00E8 - 0x0008)
struct FFortQuestObjectiveStatTableRow final : public FTableRowBase
{
public:
	EFortQuestObjectiveStatEvent                  Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetTags;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceTags;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextTags;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Condition;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TemplateId;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AlternateTemplateIds;                              // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTagContainer;                                // 0x0070(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SourceTagContainer;                                // 0x0090(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ContextTagContainer;                               // 0x00B0(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          bIsCached;                                         // 0x00D0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x17];                                      // 0x00D1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestObjectiveStatTableRow) == 0x000008, "Wrong alignment on FFortQuestObjectiveStatTableRow");
static_assert(sizeof(FFortQuestObjectiveStatTableRow) == 0x0000E8, "Wrong size on FFortQuestObjectiveStatTableRow");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, Type) == 0x000008, "Member 'FFortQuestObjectiveStatTableRow::Type' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, TargetTags) == 0x000010, "Member 'FFortQuestObjectiveStatTableRow::TargetTags' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, SourceTags) == 0x000020, "Member 'FFortQuestObjectiveStatTableRow::SourceTags' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, ContextTags) == 0x000030, "Member 'FFortQuestObjectiveStatTableRow::ContextTags' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, Condition) == 0x000040, "Member 'FFortQuestObjectiveStatTableRow::Condition' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, TemplateId) == 0x000050, "Member 'FFortQuestObjectiveStatTableRow::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, AlternateTemplateIds) == 0x000060, "Member 'FFortQuestObjectiveStatTableRow::AlternateTemplateIds' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, TargetTagContainer) == 0x000070, "Member 'FFortQuestObjectiveStatTableRow::TargetTagContainer' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, SourceTagContainer) == 0x000090, "Member 'FFortQuestObjectiveStatTableRow::SourceTagContainer' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, ContextTagContainer) == 0x0000B0, "Member 'FFortQuestObjectiveStatTableRow::ContextTagContainer' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, bIsCached) == 0x0000D0, "Member 'FFortQuestObjectiveStatTableRow::bIsCached' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestPoolTableRow
// 0x0088 (0x0090 - 0x0008)
struct FFortQuestPoolTableRow final : public FTableRowBase
{
public:
	class FString                                 PrerequisiteCompletedQuests;                       // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrerequisiteNotCompletedQuests;                    // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrerequisiteEventChannel;                          // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrerequisiteEventName;                             // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefreshIntervalHours;                              // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RefreshEvent;                                      // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootTierGroup;                                     // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootTier;                                          // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RerollLimit;                                       // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGlobalPull;                                       // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRollOnActivation;                                 // 0x0079(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeleteActiveOnRefresh;                            // 0x007A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x1];                                       // 0x007B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxActive;                                         // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DaysToKeepClaimed;                                 // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DaysToKeepCompleted;                               // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxUnclaimed;                                      // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestPoolTableRow) == 0x000008, "Wrong alignment on FFortQuestPoolTableRow");
static_assert(sizeof(FFortQuestPoolTableRow) == 0x000090, "Wrong size on FFortQuestPoolTableRow");
static_assert(offsetof(FFortQuestPoolTableRow, PrerequisiteCompletedQuests) == 0x000008, "Member 'FFortQuestPoolTableRow::PrerequisiteCompletedQuests' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, PrerequisiteNotCompletedQuests) == 0x000018, "Member 'FFortQuestPoolTableRow::PrerequisiteNotCompletedQuests' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, PrerequisiteEventChannel) == 0x000028, "Member 'FFortQuestPoolTableRow::PrerequisiteEventChannel' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, PrerequisiteEventName) == 0x000038, "Member 'FFortQuestPoolTableRow::PrerequisiteEventName' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, RefreshIntervalHours) == 0x000048, "Member 'FFortQuestPoolTableRow::RefreshIntervalHours' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, RefreshEvent) == 0x000050, "Member 'FFortQuestPoolTableRow::RefreshEvent' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, LootTierGroup) == 0x000060, "Member 'FFortQuestPoolTableRow::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, LootTier) == 0x000070, "Member 'FFortQuestPoolTableRow::LootTier' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, RerollLimit) == 0x000074, "Member 'FFortQuestPoolTableRow::RerollLimit' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, bGlobalPull) == 0x000078, "Member 'FFortQuestPoolTableRow::bGlobalPull' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, bRollOnActivation) == 0x000079, "Member 'FFortQuestPoolTableRow::bRollOnActivation' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, bDeleteActiveOnRefresh) == 0x00007A, "Member 'FFortQuestPoolTableRow::bDeleteActiveOnRefresh' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, MaxActive) == 0x00007C, "Member 'FFortQuestPoolTableRow::MaxActive' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, DaysToKeepClaimed) == 0x000080, "Member 'FFortQuestPoolTableRow::DaysToKeepClaimed' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, DaysToKeepCompleted) == 0x000084, "Member 'FFortQuestPoolTableRow::DaysToKeepCompleted' has a wrong offset!");
static_assert(offsetof(FFortQuestPoolTableRow, MaxUnclaimed) == 0x000088, "Member 'FFortQuestPoolTableRow::MaxUnclaimed' has a wrong offset!");

// ScriptStruct FortniteGame.FortRarityItemData
// 0x0080 (0x0080 - 0x0000)
struct FFortRarityItemData final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color1;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color2;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color3;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color4;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color5;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roughness;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Glow;                                              // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRarityItemData) == 0x000008, "Wrong alignment on FFortRarityItemData");
static_assert(sizeof(FFortRarityItemData) == 0x000080, "Wrong size on FFortRarityItemData");
static_assert(offsetof(FFortRarityItemData, Name) == 0x000000, "Member 'FFortRarityItemData::Name' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color1) == 0x000018, "Member 'FFortRarityItemData::Color1' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color2) == 0x000028, "Member 'FFortRarityItemData::Color2' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color3) == 0x000038, "Member 'FFortRarityItemData::Color3' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color4) == 0x000048, "Member 'FFortRarityItemData::Color4' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color5) == 0x000058, "Member 'FFortRarityItemData::Color5' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Radius) == 0x000068, "Member 'FFortRarityItemData::Radius' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Falloff) == 0x00006C, "Member 'FFortRarityItemData::Falloff' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Brightness) == 0x000070, "Member 'FFortRarityItemData::Brightness' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Roughness) == 0x000074, "Member 'FFortRarityItemData::Roughness' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Glow) == 0x000078, "Member 'FFortRarityItemData::Glow' has a wrong offset!");

// ScriptStruct FortniteGame.ReflectedEngineVersion
// 0x0020 (0x0020 - 0x0000)
struct FReflectedEngineVersion final
{
public:
	int32                                         Major;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Patch;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Changelist;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Branch;                                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReflectedEngineVersion) == 0x000008, "Wrong alignment on FReflectedEngineVersion");
static_assert(sizeof(FReflectedEngineVersion) == 0x000020, "Wrong size on FReflectedEngineVersion");
static_assert(offsetof(FReflectedEngineVersion, Major) == 0x000000, "Member 'FReflectedEngineVersion::Major' has a wrong offset!");
static_assert(offsetof(FReflectedEngineVersion, Minor) == 0x000004, "Member 'FReflectedEngineVersion::Minor' has a wrong offset!");
static_assert(offsetof(FReflectedEngineVersion, Patch) == 0x000008, "Member 'FReflectedEngineVersion::Patch' has a wrong offset!");
static_assert(offsetof(FReflectedEngineVersion, Changelist) == 0x00000C, "Member 'FReflectedEngineVersion::Changelist' has a wrong offset!");
static_assert(offsetof(FReflectedEngineVersion, Branch) == 0x000010, "Member 'FReflectedEngineVersion::Branch' has a wrong offset!");

// ScriptStruct FortniteGame.FortRecordVersion
// 0x0040 (0x0040 - 0x0000)
struct FFortRecordVersion final
{
public:
	int32                                         DataVersion;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PackageFileVersion;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReflectedEngineVersion                EngineVersion;                                     // 0x0008(0x0020)(NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRecordVersion) == 0x000008, "Wrong alignment on FFortRecordVersion");
static_assert(sizeof(FFortRecordVersion) == 0x000040, "Wrong size on FFortRecordVersion");
static_assert(offsetof(FFortRecordVersion, DataVersion) == 0x000000, "Member 'FFortRecordVersion::DataVersion' has a wrong offset!");
static_assert(offsetof(FFortRecordVersion, PackageFileVersion) == 0x000004, "Member 'FFortRecordVersion::PackageFileVersion' has a wrong offset!");
static_assert(offsetof(FFortRecordVersion, EngineVersion) == 0x000008, "Member 'FFortRecordVersion::EngineVersion' has a wrong offset!");

// ScriptStruct FortniteGame.FortReplayEvent
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FFortReplayEvent final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortReplayEvent) == 0x000010, "Wrong alignment on FFortReplayEvent");
static_assert(sizeof(FFortReplayEvent) == 0x000050, "Wrong size on FFortReplayEvent");

// ScriptStruct FortniteGame.ReplayServerHighlights
// 0x0010 (0x0028 - 0x0018)
struct FReplayServerHighlights final : public FBaseReplayEventInfo
{
public:
	TArray<struct FMinimalHighlightShot>          Shots;                                             // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayServerHighlights) == 0x000008, "Wrong alignment on FReplayServerHighlights");
static_assert(sizeof(FReplayServerHighlights) == 0x000028, "Wrong size on FReplayServerHighlights");
static_assert(offsetof(FReplayServerHighlights, Shots) == 0x000018, "Member 'FReplayServerHighlights::Shots' has a wrong offset!");

// ScriptStruct FortniteGame.ReplayDataMoveSnapshot
// 0x0010 (0x0010 - 0x0000)
struct FReplayDataMoveSnapshot final
{
public:
	struct FVector_NetQuantize                    Position;                                          // 0x0000(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	EFortMovementStyle                            MovementStyle;                                     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x1];                                        // 0x000D(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        WorldTime;                                         // 0x000E(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplayDataMoveSnapshot) == 0x000004, "Wrong alignment on FReplayDataMoveSnapshot");
static_assert(sizeof(FReplayDataMoveSnapshot) == 0x000010, "Wrong size on FReplayDataMoveSnapshot");
static_assert(offsetof(FReplayDataMoveSnapshot, Position) == 0x000000, "Member 'FReplayDataMoveSnapshot::Position' has a wrong offset!");
static_assert(offsetof(FReplayDataMoveSnapshot, MovementStyle) == 0x00000C, "Member 'FReplayDataMoveSnapshot::MovementStyle' has a wrong offset!");
static_assert(offsetof(FReplayDataMoveSnapshot, WorldTime) == 0x00000E, "Member 'FReplayDataMoveSnapshot::WorldTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortAlwaysRelevantActorInfo
// 0x0010 (0x0010 - 0x0000)
struct FFortAlwaysRelevantActorInfo final
{
public:
	class UNetConnection*                         Connection;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LastPawn;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAlwaysRelevantActorInfo) == 0x000008, "Wrong alignment on FFortAlwaysRelevantActorInfo");
static_assert(sizeof(FFortAlwaysRelevantActorInfo) == 0x000010, "Wrong size on FFortAlwaysRelevantActorInfo");
static_assert(offsetof(FFortAlwaysRelevantActorInfo, Connection) == 0x000000, "Member 'FFortAlwaysRelevantActorInfo::Connection' has a wrong offset!");
static_assert(offsetof(FFortAlwaysRelevantActorInfo, LastPawn) == 0x000008, "Member 'FFortAlwaysRelevantActorInfo::LastPawn' has a wrong offset!");

// ScriptStruct FortniteGame.FortRespawnDataRow
// 0x0020 (0x0028 - 0x0008)
struct FFortRespawnDataRow final : public FTableRowBase
{
public:
	struct FLinearColor                           FadeColor;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafetyTime;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRespawnDataRow) == 0x000008, "Wrong alignment on FFortRespawnDataRow");
static_assert(sizeof(FFortRespawnDataRow) == 0x000028, "Wrong size on FFortRespawnDataRow");
static_assert(offsetof(FFortRespawnDataRow, FadeColor) == 0x000008, "Member 'FFortRespawnDataRow::FadeColor' has a wrong offset!");
static_assert(offsetof(FFortRespawnDataRow, FadeOutTime) == 0x000018, "Member 'FFortRespawnDataRow::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FFortRespawnDataRow, FadeInTime) == 0x00001C, "Member 'FFortRespawnDataRow::FadeInTime' has a wrong offset!");
static_assert(offsetof(FFortRespawnDataRow, WaitTime) == 0x000020, "Member 'FFortRespawnDataRow::WaitTime' has a wrong offset!");
static_assert(offsetof(FFortRespawnDataRow, SafetyTime) == 0x000024, "Member 'FFortRespawnDataRow::SafetyTime' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaPickResult
// 0x0018 (0x0018 - 0x0000)
struct FAthenaPickResult final
{
public:
	EAthenaPickerType                             PickType;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuildingActor*                         FoundBuildingActor;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawnAthena*                  FoundPlayer;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaPickResult) == 0x000008, "Wrong alignment on FAthenaPickResult");
static_assert(sizeof(FAthenaPickResult) == 0x000018, "Wrong size on FAthenaPickResult");
static_assert(offsetof(FAthenaPickResult, PickType) == 0x000000, "Member 'FAthenaPickResult::PickType' has a wrong offset!");
static_assert(offsetof(FAthenaPickResult, FoundBuildingActor) == 0x000008, "Member 'FAthenaPickResult::FoundBuildingActor' has a wrong offset!");
static_assert(offsetof(FAthenaPickResult, FoundPlayer) == 0x000010, "Member 'FAthenaPickResult::FoundPlayer' has a wrong offset!");

// ScriptStruct FortniteGame.RuntimeOptionPlaygroundKnobOverride
// 0x0028 (0x0028 - 0x0000)
struct FRuntimeOptionPlaygroundKnobOverride final
{
public:
	class FString                                 KnobID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OverrideDefault;                                   // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeOptionPlaygroundKnobOverride) == 0x000008, "Wrong alignment on FRuntimeOptionPlaygroundKnobOverride");
static_assert(sizeof(FRuntimeOptionPlaygroundKnobOverride) == 0x000028, "Wrong size on FRuntimeOptionPlaygroundKnobOverride");
static_assert(offsetof(FRuntimeOptionPlaygroundKnobOverride, KnobID) == 0x000000, "Member 'FRuntimeOptionPlaygroundKnobOverride::KnobID' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionPlaygroundKnobOverride, bEnabled) == 0x000010, "Member 'FRuntimeOptionPlaygroundKnobOverride::bEnabled' has a wrong offset!");
static_assert(offsetof(FRuntimeOptionPlaygroundKnobOverride, OverrideDefault) == 0x000018, "Member 'FRuntimeOptionPlaygroundKnobOverride::OverrideDefault' has a wrong offset!");

// ScriptStruct FortniteGame.FortSafeZoneVolumeDefinition
// 0x0028 (0x0028 - 0x0000)
struct FFortSafeZoneVolumeDefinition final
{
public:
	class AVolume*                                Volume;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RejectionChance;                                   // 0x0008(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortSafeZoneVolumeDefinition) == 0x000008, "Wrong alignment on FFortSafeZoneVolumeDefinition");
static_assert(sizeof(FFortSafeZoneVolumeDefinition) == 0x000028, "Wrong size on FFortSafeZoneVolumeDefinition");
static_assert(offsetof(FFortSafeZoneVolumeDefinition, Volume) == 0x000000, "Member 'FFortSafeZoneVolumeDefinition::Volume' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneVolumeDefinition, RejectionChance) == 0x000008, "Member 'FFortSafeZoneVolumeDefinition::RejectionChance' has a wrong offset!");

// ScriptStruct FortniteGame.FortSafeZoneDefinition
// 0x0238 (0x0238 - 0x0000)
struct FFortSafeZoneDefinition final
{
public:
	struct FScalableFloat                         Count;                                             // 0x0000(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         Radius;                                            // 0x0020(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ForceDistanceMin;                                  // 0x0040(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ForceDistanceMax;                                  // 0x0060(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RejectRadius;                                      // 0x0080(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RejectOuterDistance;                               // 0x00A0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         WaitTime;                                          // 0x00C0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ShrinkTime;                                        // 0x00E0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MegaStormGridCellThickness;                        // 0x0100(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         PlayerCapSolo;                                     // 0x0120(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         PlayerCapDuo;                                      // 0x0140(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         PlayerCapSquad;                                    // 0x0160(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_180[0xB8];                                     // 0x0180(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSafeZoneDefinition) == 0x000008, "Wrong alignment on FFortSafeZoneDefinition");
static_assert(sizeof(FFortSafeZoneDefinition) == 0x000238, "Wrong size on FFortSafeZoneDefinition");
static_assert(offsetof(FFortSafeZoneDefinition, Count) == 0x000000, "Member 'FFortSafeZoneDefinition::Count' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, Radius) == 0x000020, "Member 'FFortSafeZoneDefinition::Radius' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, ForceDistanceMin) == 0x000040, "Member 'FFortSafeZoneDefinition::ForceDistanceMin' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, ForceDistanceMax) == 0x000060, "Member 'FFortSafeZoneDefinition::ForceDistanceMax' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, RejectRadius) == 0x000080, "Member 'FFortSafeZoneDefinition::RejectRadius' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, RejectOuterDistance) == 0x0000A0, "Member 'FFortSafeZoneDefinition::RejectOuterDistance' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, WaitTime) == 0x0000C0, "Member 'FFortSafeZoneDefinition::WaitTime' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, ShrinkTime) == 0x0000E0, "Member 'FFortSafeZoneDefinition::ShrinkTime' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, MegaStormGridCellThickness) == 0x000100, "Member 'FFortSafeZoneDefinition::MegaStormGridCellThickness' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, PlayerCapSolo) == 0x000120, "Member 'FFortSafeZoneDefinition::PlayerCapSolo' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, PlayerCapDuo) == 0x000140, "Member 'FFortSafeZoneDefinition::PlayerCapDuo' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, PlayerCapSquad) == 0x000160, "Member 'FFortSafeZoneDefinition::PlayerCapSquad' has a wrong offset!");

// ScriptStruct FortniteGame.FortDestroyedActorRecord
// 0x0050 (0x0050 - 0x0000)
struct FFortDestroyedActorRecord final
{
public:
	struct FGuid                                  ActorGuid;                                         // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingActor>             ActorClass;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0020(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDestroyedActorRecord) == 0x000010, "Wrong alignment on FFortDestroyedActorRecord");
static_assert(sizeof(FFortDestroyedActorRecord) == 0x000050, "Wrong size on FFortDestroyedActorRecord");
static_assert(offsetof(FFortDestroyedActorRecord, ActorGuid) == 0x000000, "Member 'FFortDestroyedActorRecord::ActorGuid' has a wrong offset!");
static_assert(offsetof(FFortDestroyedActorRecord, ActorClass) == 0x000010, "Member 'FFortDestroyedActorRecord::ActorClass' has a wrong offset!");
static_assert(offsetof(FFortDestroyedActorRecord, ActorTransform) == 0x000020, "Member 'FFortDestroyedActorRecord::ActorTransform' has a wrong offset!");

// ScriptStruct FortniteGame.FortBuildingActorArray
// 0x0010 (0x0010 - 0x0000)
struct FFortBuildingActorArray final
{
public:
	TArray<struct FFortDestroyedActorRecord>      ActorRecords;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBuildingActorArray) == 0x000008, "Wrong alignment on FFortBuildingActorArray");
static_assert(sizeof(FFortBuildingActorArray) == 0x000010, "Wrong size on FFortBuildingActorArray");
static_assert(offsetof(FFortBuildingActorArray, ActorRecords) == 0x000000, "Member 'FFortBuildingActorArray::ActorRecords' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableScriptedAction
// 0x0038 (0x0038 - 0x0000)
struct FFortAvailableScriptedAction final
{
public:
	struct FFortScriptedActionParams              Params;                                            // 0x0000(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	class AFortScriptedAction*                    ActionDefaults;                                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableScriptedAction) == 0x000008, "Wrong alignment on FFortAvailableScriptedAction");
static_assert(sizeof(FFortAvailableScriptedAction) == 0x000038, "Wrong size on FFortAvailableScriptedAction");
static_assert(offsetof(FFortAvailableScriptedAction, Params) == 0x000000, "Member 'FFortAvailableScriptedAction::Params' has a wrong offset!");
static_assert(offsetof(FFortAvailableScriptedAction, ActionDefaults) == 0x000030, "Member 'FFortAvailableScriptedAction::ActionDefaults' has a wrong offset!");

// ScriptStruct FortniteGame.FortSearchPassState
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFortSearchPassState final
{
public:
	int32                                         BestSessionIdx;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasCanceled;                                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortSessionHelperJoinResult                  FailureType;                                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingState                             MatchmakingState;                                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyReservationResult                       LastBeaconResponse;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSearchPassState) == 0x000008, "Wrong alignment on FFortSearchPassState");
static_assert(sizeof(FFortSearchPassState) == 0x000018, "Wrong size on FFortSearchPassState");
static_assert(offsetof(FFortSearchPassState, BestSessionIdx) == 0x000000, "Member 'FFortSearchPassState::BestSessionIdx' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, bWasCanceled) == 0x000004, "Member 'FFortSearchPassState::bWasCanceled' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, FailureType) == 0x000005, "Member 'FFortSearchPassState::FailureType' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, MatchmakingState) == 0x000006, "Member 'FFortSearchPassState::MatchmakingState' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, LastBeaconResponse) == 0x000007, "Member 'FFortSearchPassState::LastBeaconResponse' has a wrong offset!");

// ScriptStruct FortniteGame.FortTimedKeysState
// 0x0010 (0x0010 - 0x0000)
struct FFortTimedKeysState final
{
public:
	TArray<class FString>                         K;                                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTimedKeysState) == 0x000008, "Wrong alignment on FFortTimedKeysState");
static_assert(sizeof(FFortTimedKeysState) == 0x000010, "Wrong size on FFortTimedKeysState");
static_assert(offsetof(FFortTimedKeysState, K) == 0x000000, "Member 'FFortTimedKeysState::K' has a wrong offset!");

// ScriptStruct FortniteGame.FortRotationalContentEventsState
// 0x0140 (0x0140 - 0x0000)
struct FFortRotationalContentEventsState
{
public:
	TSet<class FName>                             ActiveStorefronts;                                 // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class FName>                             ActiveEventFlags;                                  // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, double>                     EventNamedWeights;                                 // 0x00A0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<struct FDateTime>                        ExpirationTimes;                                   // 0x00F0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRotationalContentEventsState) == 0x000008, "Wrong alignment on FFortRotationalContentEventsState");
static_assert(sizeof(FFortRotationalContentEventsState) == 0x000140, "Wrong size on FFortRotationalContentEventsState");
static_assert(offsetof(FFortRotationalContentEventsState, ActiveStorefronts) == 0x000000, "Member 'FFortRotationalContentEventsState::ActiveStorefronts' has a wrong offset!");
static_assert(offsetof(FFortRotationalContentEventsState, ActiveEventFlags) == 0x000050, "Member 'FFortRotationalContentEventsState::ActiveEventFlags' has a wrong offset!");
static_assert(offsetof(FFortRotationalContentEventsState, EventNamedWeights) == 0x0000A0, "Member 'FFortRotationalContentEventsState::EventNamedWeights' has a wrong offset!");
static_assert(offsetof(FFortRotationalContentEventsState, ExpirationTimes) == 0x0000F0, "Member 'FFortRotationalContentEventsState::ExpirationTimes' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientEventsState
// 0x0060 (0x01A0 - 0x0140)
struct FFortClientEventsState final : public FFortRotationalContentEventsState
{
public:
	int32                                         SeasonNumber;                                      // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SeasonTemplateId;                                  // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MatchXpBonusPoints;                                // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              SeasonBegin;                                       // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              SeasonEnd;                                         // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              SeasonDisplayedEnd;                                // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              WeeklyStoreEnd;                                    // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              DailyStoreEnd;                                     // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              StwDailyStoreEnd;                                  // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              StwEventStoreEnd;                                  // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              StwWeeklyStoreEnd;                                 // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortClientEventsState) == 0x000008, "Wrong alignment on FFortClientEventsState");
static_assert(sizeof(FFortClientEventsState) == 0x0001A0, "Wrong size on FFortClientEventsState");
static_assert(offsetof(FFortClientEventsState, SeasonNumber) == 0x000140, "Member 'FFortClientEventsState::SeasonNumber' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, SeasonTemplateId) == 0x000148, "Member 'FFortClientEventsState::SeasonTemplateId' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, MatchXpBonusPoints) == 0x000158, "Member 'FFortClientEventsState::MatchXpBonusPoints' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, SeasonBegin) == 0x000160, "Member 'FFortClientEventsState::SeasonBegin' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, SeasonEnd) == 0x000168, "Member 'FFortClientEventsState::SeasonEnd' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, SeasonDisplayedEnd) == 0x000170, "Member 'FFortClientEventsState::SeasonDisplayedEnd' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, WeeklyStoreEnd) == 0x000178, "Member 'FFortClientEventsState::WeeklyStoreEnd' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, DailyStoreEnd) == 0x000180, "Member 'FFortClientEventsState::DailyStoreEnd' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, StwDailyStoreEnd) == 0x000188, "Member 'FFortClientEventsState::StwDailyStoreEnd' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, StwEventStoreEnd) == 0x000190, "Member 'FFortClientEventsState::StwEventStoreEnd' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, StwWeeklyStoreEnd) == 0x000198, "Member 'FFortClientEventsState::StwWeeklyStoreEnd' has a wrong offset!");

// ScriptStruct FortniteGame.FortCommunityVotesState
// 0x0030 (0x0030 - 0x0000)
struct FFortCommunityVotesState final
{
public:
	class FString                                 ElectionId;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCatalogOffer>                  Candidates;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              ElectionEnds;                                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWinners;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCommunityVotesState) == 0x000008, "Wrong alignment on FFortCommunityVotesState");
static_assert(sizeof(FFortCommunityVotesState) == 0x000030, "Wrong size on FFortCommunityVotesState");
static_assert(offsetof(FFortCommunityVotesState, ElectionId) == 0x000000, "Member 'FFortCommunityVotesState::ElectionId' has a wrong offset!");
static_assert(offsetof(FFortCommunityVotesState, Candidates) == 0x000010, "Member 'FFortCommunityVotesState::Candidates' has a wrong offset!");
static_assert(offsetof(FFortCommunityVotesState, ElectionEnds) == 0x000020, "Member 'FFortCommunityVotesState::ElectionEnds' has a wrong offset!");
static_assert(offsetof(FFortCommunityVotesState, NumWinners) == 0x000028, "Member 'FFortCommunityVotesState::NumWinners' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeaturedIslandsState
// 0x0060 (0x0060 - 0x0000)
struct FFortFeaturedIslandsState final
{
public:
	TArray<class FString>                         IslandCodes;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FFortPlaylistCuratedContent> PlayistCuratedContent;                             // 0x0010(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFeaturedIslandsState) == 0x000008, "Wrong alignment on FFortFeaturedIslandsState");
static_assert(sizeof(FFortFeaturedIslandsState) == 0x000060, "Wrong size on FFortFeaturedIslandsState");
static_assert(offsetof(FFortFeaturedIslandsState, IslandCodes) == 0x000000, "Member 'FFortFeaturedIslandsState::IslandCodes' has a wrong offset!");
static_assert(offsetof(FFortFeaturedIslandsState, PlayistCuratedContent) == 0x000010, "Member 'FFortFeaturedIslandsState::PlayistCuratedContent' has a wrong offset!");

// ScriptStruct FortniteGame.BattleBusPOI
// 0x0060 (0x0060 - 0x0000)
struct FBattleBusPOI final
{
public:
	struct FGameplayTagQuery                      POIFilterQuery;                                    // 0x0000(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TagQueryWeightChance;                              // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x14];                                      // 0x004C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleBusPOI) == 0x000008, "Wrong alignment on FBattleBusPOI");
static_assert(sizeof(FBattleBusPOI) == 0x000060, "Wrong size on FBattleBusPOI");
static_assert(offsetof(FBattleBusPOI, POIFilterQuery) == 0x000000, "Member 'FBattleBusPOI::POIFilterQuery' has a wrong offset!");
static_assert(offsetof(FBattleBusPOI, TagQueryWeightChance) == 0x000048, "Member 'FBattleBusPOI::TagQueryWeightChance' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionDistributionCategory
// 0x0048 (0x0048 - 0x0000)
struct FFortMissionDistributionCategory final
{
public:
	struct FGameplayTagQuery                      CategoryTagQuery;                                  // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionDistributionCategory) == 0x000008, "Wrong alignment on FFortMissionDistributionCategory");
static_assert(sizeof(FFortMissionDistributionCategory) == 0x000048, "Wrong size on FFortMissionDistributionCategory");
static_assert(offsetof(FFortMissionDistributionCategory, CategoryTagQuery) == 0x000000, "Member 'FFortMissionDistributionCategory::CategoryTagQuery' has a wrong offset!");

// ScriptStruct FortniteGame.FortPartySquadAssignment
// 0x0030 (0x0030 - 0x0000)
struct FFortPartySquadAssignment final
{
public:
	struct FUniqueNetIdRepl                       MemberId;                                          // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbsoluteMemberIdx;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPartySquadAssignment) == 0x000008, "Wrong alignment on FFortPartySquadAssignment");
static_assert(sizeof(FFortPartySquadAssignment) == 0x000030, "Wrong size on FFortPartySquadAssignment");
static_assert(offsetof(FFortPartySquadAssignment, MemberId) == 0x000000, "Member 'FFortPartySquadAssignment::MemberId' has a wrong offset!");
static_assert(offsetof(FFortPartySquadAssignment, AbsoluteMemberIdx) == 0x000028, "Member 'FFortPartySquadAssignment::AbsoluteMemberIdx' has a wrong offset!");

// ScriptStruct FortniteGame.FortPartyRepData
// 0x04D8 (0x0558 - 0x0080)
struct FFortPartyRepData final : public FPartyRepData
{
public:
	class FString                                 PrimaryGameSessionId;                              // 0x0080(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x30];                                      // 0x0090(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	EFortPartyState                               PartyState;                                        // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0x37];                                      // 0x00C1(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          LobbyConnectionStarted;                            // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F9[0x37];                                      // 0x00F9(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	EMatchmakingCompleteResult                    MatchmakingResult;                                 // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_131[0x37];                                     // 0x0131(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	EMatchmakingState                             MatchmakingState;                                  // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169[0x37];                                     // 0x0169(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          SessionIsCriticalMission;                          // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A1[0x37];                                     // 0x01A1(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZoneTileIndex;                                     // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1DC[0x34];                                     // 0x01DC(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ZoneInstanceId;                                    // 0x0210(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_220[0x30];                                     // 0x0220(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TheaterId;                                         // 0x0250(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_260[0x30];                                     // 0x0260(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  TileStates;                                        // 0x0290(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A0[0x30];                                     // 0x02A0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchmakingInfoString;                             // 0x02D0(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E0[0x30];                                     // 0x02E0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomMatchKey;                                    // 0x0310(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_320[0x30];                                     // 0x0320(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlaylistData                          PlaylistData;                                      // 0x0350(0x0038)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_388[0x30];                                     // 0x0388(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AllowJoinInProgress;                               // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B9[0x37];                                     // 0x03B9(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LFGTime;                                           // 0x03F0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F8[0x30];                                     // 0x03F8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AthenaSquadFill;                                   // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_429[0x37];                                     // 0x0429(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          PartyIsJoinedInProgress;                           // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_461[0x37];                                     // 0x0461(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameSessionKey;                                    // 0x0498(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A8[0x30];                                     // 0x04A8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VoiceChannelGuid;                                  // 0x04D8(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E8[0x30];                                     // 0x04E8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortPartySquadAssignment>      RawSquadAssignments;                               // 0x0518(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_528[0x30];                                     // 0x0528(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPartyRepData) == 0x000008, "Wrong alignment on FFortPartyRepData");
static_assert(sizeof(FFortPartyRepData) == 0x000558, "Wrong size on FFortPartyRepData");
static_assert(offsetof(FFortPartyRepData, PrimaryGameSessionId) == 0x000080, "Member 'FFortPartyRepData::PrimaryGameSessionId' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, PartyState) == 0x0000C0, "Member 'FFortPartyRepData::PartyState' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, LobbyConnectionStarted) == 0x0000F8, "Member 'FFortPartyRepData::LobbyConnectionStarted' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, MatchmakingResult) == 0x000130, "Member 'FFortPartyRepData::MatchmakingResult' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, MatchmakingState) == 0x000168, "Member 'FFortPartyRepData::MatchmakingState' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, SessionIsCriticalMission) == 0x0001A0, "Member 'FFortPartyRepData::SessionIsCriticalMission' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, ZoneTileIndex) == 0x0001D8, "Member 'FFortPartyRepData::ZoneTileIndex' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, ZoneInstanceId) == 0x000210, "Member 'FFortPartyRepData::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, TheaterId) == 0x000250, "Member 'FFortPartyRepData::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, TileStates) == 0x000290, "Member 'FFortPartyRepData::TileStates' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, MatchmakingInfoString) == 0x0002D0, "Member 'FFortPartyRepData::MatchmakingInfoString' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, CustomMatchKey) == 0x000310, "Member 'FFortPartyRepData::CustomMatchKey' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, PlaylistData) == 0x000350, "Member 'FFortPartyRepData::PlaylistData' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, AllowJoinInProgress) == 0x0003B8, "Member 'FFortPartyRepData::AllowJoinInProgress' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, LFGTime) == 0x0003F0, "Member 'FFortPartyRepData::LFGTime' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, AthenaSquadFill) == 0x000428, "Member 'FFortPartyRepData::AthenaSquadFill' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, PartyIsJoinedInProgress) == 0x000460, "Member 'FFortPartyRepData::PartyIsJoinedInProgress' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, GameSessionKey) == 0x000498, "Member 'FFortPartyRepData::GameSessionKey' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, VoiceChannelGuid) == 0x0004D8, "Member 'FFortPartyRepData::VoiceChannelGuid' has a wrong offset!");
static_assert(offsetof(FFortPartyRepData, RawSquadAssignments) == 0x000518, "Member 'FFortPartyRepData::RawSquadAssignments' has a wrong offset!");

// ScriptStruct FortniteGame.FortSprayDecalRepPayload
// 0x0020 (0x0020 - 0x0000)
struct FFortSprayDecalRepPayload final
{
public:
	class UAthenaSprayItemDefinition*             SprayAsset;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BannerName;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BannerColor;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SavedStatValue;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSprayDecalRepPayload) == 0x000008, "Wrong alignment on FFortSprayDecalRepPayload");
static_assert(sizeof(FFortSprayDecalRepPayload) == 0x000020, "Wrong size on FFortSprayDecalRepPayload");
static_assert(offsetof(FFortSprayDecalRepPayload, SprayAsset) == 0x000000, "Member 'FFortSprayDecalRepPayload::SprayAsset' has a wrong offset!");
static_assert(offsetof(FFortSprayDecalRepPayload, BannerName) == 0x000008, "Member 'FFortSprayDecalRepPayload::BannerName' has a wrong offset!");
static_assert(offsetof(FFortSprayDecalRepPayload, BannerColor) == 0x000010, "Member 'FFortSprayDecalRepPayload::BannerColor' has a wrong offset!");
static_assert(offsetof(FFortSprayDecalRepPayload, SavedStatValue) == 0x000018, "Member 'FFortSprayDecalRepPayload::SavedStatValue' has a wrong offset!");

// ScriptStruct FortniteGame.TransformableNavLinkClass
// 0x0020 (0x0020 - 0x0000)
struct FTransformableNavLinkClass final
{
public:
	struct FVector                                Translation;                                       // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavLinkDefinition>         NavigationLinksClass;                              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransformableNavLinkClass) == 0x000008, "Wrong alignment on FTransformableNavLinkClass");
static_assert(sizeof(FTransformableNavLinkClass) == 0x000020, "Wrong size on FTransformableNavLinkClass");
static_assert(offsetof(FTransformableNavLinkClass, Translation) == 0x000000, "Member 'FTransformableNavLinkClass::Translation' has a wrong offset!");
static_assert(offsetof(FTransformableNavLinkClass, Rotation) == 0x00000C, "Member 'FTransformableNavLinkClass::Rotation' has a wrong offset!");
static_assert(offsetof(FTransformableNavLinkClass, NavigationLinksClass) == 0x000018, "Member 'FTransformableNavLinkClass::NavigationLinksClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortSurfaceTypeToSurfaceTypeTag
// 0x0010 (0x0010 - 0x0000)
struct FFortSurfaceTypeToSurfaceTypeTag final
{
public:
	EFortFootstepSurfaceType                      FootSurfaceType;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SurfaceTypeTag;                                    // 0x0004(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsSurfaceRetriggerOfEvents;                   // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSurfaceTypeToSurfaceTypeTag) == 0x000004, "Wrong alignment on FFortSurfaceTypeToSurfaceTypeTag");
static_assert(sizeof(FFortSurfaceTypeToSurfaceTypeTag) == 0x000010, "Wrong size on FFortSurfaceTypeToSurfaceTypeTag");
static_assert(offsetof(FFortSurfaceTypeToSurfaceTypeTag, FootSurfaceType) == 0x000000, "Member 'FFortSurfaceTypeToSurfaceTypeTag::FootSurfaceType' has a wrong offset!");
static_assert(offsetof(FFortSurfaceTypeToSurfaceTypeTag, SurfaceType) == 0x000001, "Member 'FFortSurfaceTypeToSurfaceTypeTag::SurfaceType' has a wrong offset!");
static_assert(offsetof(FFortSurfaceTypeToSurfaceTypeTag, SurfaceTypeTag) == 0x000004, "Member 'FFortSurfaceTypeToSurfaceTypeTag::SurfaceTypeTag' has a wrong offset!");
static_assert(offsetof(FFortSurfaceTypeToSurfaceTypeTag, bAllowsSurfaceRetriggerOfEvents) == 0x00000C, "Member 'FFortSurfaceTypeToSurfaceTypeTag::bAllowsSurfaceRetriggerOfEvents' has a wrong offset!");

// ScriptStruct FortniteGame.ExponentialHeightFogValues
// 0x0050 (0x0050 - 0x0000)
struct FExponentialHeightFogValues final
{
public:
	float                                         FogDensity;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogScatteringDistribution;               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              SecondFogData;                                     // 0x0044(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExponentialHeightFogValues) == 0x000004, "Wrong alignment on FExponentialHeightFogValues");
static_assert(sizeof(FExponentialHeightFogValues) == 0x000050, "Wrong size on FExponentialHeightFogValues");
static_assert(offsetof(FExponentialHeightFogValues, FogDensity) == 0x000000, "Member 'FExponentialHeightFogValues::FogDensity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, FogHeightFalloff) == 0x000004, "Member 'FExponentialHeightFogValues::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, FogMaxOpacity) == 0x000008, "Member 'FExponentialHeightFogValues::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, StartDistance) == 0x00000C, "Member 'FExponentialHeightFogValues::StartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, DirectionalInscatteringExponent) == 0x000010, "Member 'FExponentialHeightFogValues::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, DirectionalInscatteringStartDistance) == 0x000014, "Member 'FExponentialHeightFogValues::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, DirectionalInscatteringColor) == 0x000018, "Member 'FExponentialHeightFogValues::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, FogInscatteringColor) == 0x000028, "Member 'FExponentialHeightFogValues::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, VolumetricFogScatteringDistribution) == 0x000038, "Member 'FExponentialHeightFogValues::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, VolumetricFogExtinctionScale) == 0x00003C, "Member 'FExponentialHeightFogValues::VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, VolumetricFogDistance) == 0x000040, "Member 'FExponentialHeightFogValues::VolumetricFogDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, SecondFogData) == 0x000044, "Member 'FExponentialHeightFogValues::SecondFogData' has a wrong offset!");

// ScriptStruct FortniteGame.FortTagUIData
// 0x0368 (0x0368 - 0x0000)
struct FFortTagUIData final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    Icon;                                              // 0x0008(0x0330)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0338(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0350(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTagUIData) == 0x000008, "Wrong alignment on FFortTagUIData");
static_assert(sizeof(FFortTagUIData) == 0x000368, "Wrong size on FFortTagUIData");
static_assert(offsetof(FFortTagUIData, Tag) == 0x000000, "Member 'FFortTagUIData::Tag' has a wrong offset!");
static_assert(offsetof(FFortTagUIData, Icon) == 0x000008, "Member 'FFortTagUIData::Icon' has a wrong offset!");
static_assert(offsetof(FFortTagUIData, DisplayName) == 0x000338, "Member 'FFortTagUIData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTagUIData, Description) == 0x000350, "Member 'FFortTagUIData::Description' has a wrong offset!");

// ScriptStruct FortniteGame.FortFinderProperty
// 0x0018 (0x0018 - 0x0000)
struct FFortFinderProperty final
{
public:
	class UProperty*                              Property;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFinderProperty) == 0x000008, "Wrong alignment on FFortFinderProperty");
static_assert(sizeof(FFortFinderProperty) == 0x000018, "Wrong size on FFortFinderProperty");
static_assert(offsetof(FFortFinderProperty, Property) == 0x000000, "Member 'FFortFinderProperty::Property' has a wrong offset!");
static_assert(offsetof(FFortFinderProperty, Value) == 0x000008, "Member 'FFortFinderProperty::Value' has a wrong offset!");

// ScriptStruct FortniteGame.FortTaggedActorOctreeFilter
// 0x0068 (0x0068 - 0x0000)
struct FFortTaggedActorOctreeFilter final
{
public:
	struct FBoxSphereBounds                       Bounds;                                            // 0x0000(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDistanceFromBoundsCenter;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ABuildingActor>>     OptionalSubclasses;                                // 0x0020(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FFortFinderProperty>            RequiredProperties;                                // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToLookFor;                                     // 0x0040(0x0020)(NativeAccessSpecifierPublic)
	bool                                          bHasAllTags;                                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTaggedActorOctreeFilter) == 0x000008, "Wrong alignment on FFortTaggedActorOctreeFilter");
static_assert(sizeof(FFortTaggedActorOctreeFilter) == 0x000068, "Wrong size on FFortTaggedActorOctreeFilter");
static_assert(offsetof(FFortTaggedActorOctreeFilter, Bounds) == 0x000000, "Member 'FFortTaggedActorOctreeFilter::Bounds' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, MinDistanceFromBoundsCenter) == 0x00001C, "Member 'FFortTaggedActorOctreeFilter::MinDistanceFromBoundsCenter' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, OptionalSubclasses) == 0x000020, "Member 'FFortTaggedActorOctreeFilter::OptionalSubclasses' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, RequiredProperties) == 0x000030, "Member 'FFortTaggedActorOctreeFilter::RequiredProperties' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, TagsToLookFor) == 0x000040, "Member 'FFortTaggedActorOctreeFilter::TagsToLookFor' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, bHasAllTags) == 0x000060, "Member 'FFortTaggedActorOctreeFilter::bHasAllTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortTaggedSoundCue
// 0x0050 (0x0050 - 0x0000)
struct FFortTaggedSoundCue final
{
public:
	struct FGameplayTagQuery                      Requirements;                                      // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTaggedSoundCue) == 0x000008, "Wrong alignment on FFortTaggedSoundCue");
static_assert(sizeof(FFortTaggedSoundCue) == 0x000050, "Wrong size on FFortTaggedSoundCue");
static_assert(offsetof(FFortTaggedSoundCue, Requirements) == 0x000000, "Member 'FFortTaggedSoundCue::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTaggedSoundCue, Sound) == 0x000048, "Member 'FFortTaggedSoundCue::Sound' has a wrong offset!");

// ScriptStruct FortniteGame.TaggedSoundBankResponseList
// 0x0010 (0x0010 - 0x0000)
struct FTaggedSoundBankResponseList final
{
public:
	TArray<struct FFortTaggedSoundCue>            CueList;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaggedSoundBankResponseList) == 0x000008, "Wrong alignment on FTaggedSoundBankResponseList");
static_assert(sizeof(FTaggedSoundBankResponseList) == 0x000010, "Wrong size on FTaggedSoundBankResponseList");
static_assert(offsetof(FTaggedSoundBankResponseList, CueList) == 0x000000, "Member 'FTaggedSoundBankResponseList::CueList' has a wrong offset!");

// ScriptStruct FortniteGame.TeamSpottedActorInfoArray
// 0x0018 (0x0120 - 0x0108)
struct FTeamSpottedActorInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FTeamSpottedActorInfo>          SpottedActorInfo;                                  // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AFortTeamInfo*                          OwningTeam;                                        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTeamSpottedActorInfoArray) == 0x000008, "Wrong alignment on FTeamSpottedActorInfoArray");
static_assert(sizeof(FTeamSpottedActorInfoArray) == 0x000120, "Wrong size on FTeamSpottedActorInfoArray");
static_assert(offsetof(FTeamSpottedActorInfoArray, SpottedActorInfo) == 0x000108, "Member 'FTeamSpottedActorInfoArray::SpottedActorInfo' has a wrong offset!");
static_assert(offsetof(FTeamSpottedActorInfoArray, OwningTeam) == 0x000118, "Member 'FTeamSpottedActorInfoArray::OwningTeam' has a wrong offset!");

// ScriptStruct FortniteGame.FortTeamPerkLoadoutCondition
// 0x0068 (0x0068 - 0x0000)
struct FFortTeamPerkLoadoutCondition final
{
public:
	int32                                         NumTimesSatisfiable;                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      RequiredTagQuery;                                  // 0x0008(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         bConsiderMinimumTier : 1;                          // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConsiderMaximumTier : 1;                          // 0x0050(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConsiderMinimumLevel : 1;                         // 0x0050(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConsiderMaximumLevel : 1;                         // 0x0050(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConsiderMinimumRarity : 1;                        // 0x0050(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConsiderMaximumRarity : 1;                        // 0x0050(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EFortItemTier                                 MinimumHeroTier;                                   // 0x0054(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 MaximumHeroTier;                                   // 0x0055(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumHeroLevel;                                  // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumHeroLevel;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   MinimumHeroRarity;                                 // 0x0060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   MaximumHeroRarity;                                 // 0x0061(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTeamPerkLoadoutCondition) == 0x000008, "Wrong alignment on FFortTeamPerkLoadoutCondition");
static_assert(sizeof(FFortTeamPerkLoadoutCondition) == 0x000068, "Wrong size on FFortTeamPerkLoadoutCondition");
static_assert(offsetof(FFortTeamPerkLoadoutCondition, NumTimesSatisfiable) == 0x000000, "Member 'FFortTeamPerkLoadoutCondition::NumTimesSatisfiable' has a wrong offset!");
static_assert(offsetof(FFortTeamPerkLoadoutCondition, RequiredTagQuery) == 0x000008, "Member 'FFortTeamPerkLoadoutCondition::RequiredTagQuery' has a wrong offset!");
static_assert(offsetof(FFortTeamPerkLoadoutCondition, MinimumHeroTier) == 0x000054, "Member 'FFortTeamPerkLoadoutCondition::MinimumHeroTier' has a wrong offset!");
static_assert(offsetof(FFortTeamPerkLoadoutCondition, MaximumHeroTier) == 0x000055, "Member 'FFortTeamPerkLoadoutCondition::MaximumHeroTier' has a wrong offset!");
static_assert(offsetof(FFortTeamPerkLoadoutCondition, MinimumHeroLevel) == 0x000058, "Member 'FFortTeamPerkLoadoutCondition::MinimumHeroLevel' has a wrong offset!");
static_assert(offsetof(FFortTeamPerkLoadoutCondition, MaximumHeroLevel) == 0x00005C, "Member 'FFortTeamPerkLoadoutCondition::MaximumHeroLevel' has a wrong offset!");
static_assert(offsetof(FFortTeamPerkLoadoutCondition, MinimumHeroRarity) == 0x000060, "Member 'FFortTeamPerkLoadoutCondition::MinimumHeroRarity' has a wrong offset!");
static_assert(offsetof(FFortTeamPerkLoadoutCondition, MaximumHeroRarity) == 0x000061, "Member 'FFortTeamPerkLoadoutCondition::MaximumHeroRarity' has a wrong offset!");

// ScriptStruct FortniteGame.LatentRepPlayerData
// 0x006C (0x0078 - 0x000C)
struct FLatentRepPlayerData final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastPawnNotRelevantTime;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPawnIsRelevant;                                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasPawnRelevantLastUpdate;                        // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentLocation;                                   // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentYaw;                                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastLocationReplicationTime;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevLocationReplicatedTime;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector_NetQuantize100                 LastRepLocation;                                   // 0x0038(0x000C)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector_NetQuantize100                 PrevRepLocation;                                   // 0x0044(0x000C)(RepSkip, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                LerpStartLocation;                                 // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastYawReplicationTime;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevYawReplicatedTime;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastRepYaw;                                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PrevRepYaw;                                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LerpStartYaw;                                      // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortPawnState                                PawnStateMask;                                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortPawnState                                CurrPawnStateMask;                                 // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLatentRepPlayerData) == 0x000008, "Wrong alignment on FLatentRepPlayerData");
static_assert(sizeof(FLatentRepPlayerData) == 0x000078, "Wrong size on FLatentRepPlayerData");
static_assert(offsetof(FLatentRepPlayerData, PlayerState) == 0x000010, "Member 'FLatentRepPlayerData::PlayerState' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, LastPawnNotRelevantTime) == 0x000018, "Member 'FLatentRepPlayerData::LastPawnNotRelevantTime' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, bPawnIsRelevant) == 0x00001C, "Member 'FLatentRepPlayerData::bPawnIsRelevant' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, bWasPawnRelevantLastUpdate) == 0x00001D, "Member 'FLatentRepPlayerData::bWasPawnRelevantLastUpdate' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, CurrentLocation) == 0x000020, "Member 'FLatentRepPlayerData::CurrentLocation' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, CurrentYaw) == 0x00002C, "Member 'FLatentRepPlayerData::CurrentYaw' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, LastLocationReplicationTime) == 0x000030, "Member 'FLatentRepPlayerData::LastLocationReplicationTime' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, PrevLocationReplicatedTime) == 0x000034, "Member 'FLatentRepPlayerData::PrevLocationReplicatedTime' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, LastRepLocation) == 0x000038, "Member 'FLatentRepPlayerData::LastRepLocation' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, PrevRepLocation) == 0x000044, "Member 'FLatentRepPlayerData::PrevRepLocation' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, LerpStartLocation) == 0x000050, "Member 'FLatentRepPlayerData::LerpStartLocation' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, LastYawReplicationTime) == 0x00005C, "Member 'FLatentRepPlayerData::LastYawReplicationTime' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, PrevYawReplicatedTime) == 0x000060, "Member 'FLatentRepPlayerData::PrevYawReplicatedTime' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, LastRepYaw) == 0x000064, "Member 'FLatentRepPlayerData::LastRepYaw' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, PrevRepYaw) == 0x000068, "Member 'FLatentRepPlayerData::PrevRepYaw' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, LerpStartYaw) == 0x00006C, "Member 'FLatentRepPlayerData::LerpStartYaw' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, PawnStateMask) == 0x000070, "Member 'FLatentRepPlayerData::PawnStateMask' has a wrong offset!");
static_assert(offsetof(FLatentRepPlayerData, CurrPawnStateMask) == 0x000071, "Member 'FLatentRepPlayerData::CurrPawnStateMask' has a wrong offset!");

// ScriptStruct FortniteGame.LatentRepTeamDataArray
// 0x0018 (0x0120 - 0x0108)
struct FLatentRepTeamDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FLatentRepPlayerData>           PlayerData;                                        // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrPlayerUpdateIndex;                             // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLatentRepTeamDataArray) == 0x000008, "Wrong alignment on FLatentRepTeamDataArray");
static_assert(sizeof(FLatentRepTeamDataArray) == 0x000120, "Wrong size on FLatentRepTeamDataArray");
static_assert(offsetof(FLatentRepTeamDataArray, PlayerData) == 0x000108, "Member 'FLatentRepTeamDataArray::PlayerData' has a wrong offset!");
static_assert(offsetof(FLatentRepTeamDataArray, CurrPlayerUpdateIndex) == 0x000118, "Member 'FLatentRepTeamDataArray::CurrPlayerUpdateIndex' has a wrong offset!");

// ScriptStruct FortniteGame.SmokeTestResult
// 0x0038 (0x0038 - 0x0000)
struct FSmokeTestResult final
{
public:
	class FString                                 TestStep;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TestSummary;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasExecuted;                                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPassed;                                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ResultMessage;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmokeTestResult) == 0x000008, "Wrong alignment on FSmokeTestResult");
static_assert(sizeof(FSmokeTestResult) == 0x000038, "Wrong size on FSmokeTestResult");
static_assert(offsetof(FSmokeTestResult, TestStep) == 0x000000, "Member 'FSmokeTestResult::TestStep' has a wrong offset!");
static_assert(offsetof(FSmokeTestResult, TestSummary) == 0x000010, "Member 'FSmokeTestResult::TestSummary' has a wrong offset!");
static_assert(offsetof(FSmokeTestResult, bWasExecuted) == 0x000020, "Member 'FSmokeTestResult::bWasExecuted' has a wrong offset!");
static_assert(offsetof(FSmokeTestResult, bPassed) == 0x000021, "Member 'FSmokeTestResult::bPassed' has a wrong offset!");
static_assert(offsetof(FSmokeTestResult, ResultMessage) == 0x000028, "Member 'FSmokeTestResult::ResultMessage' has a wrong offset!");

// ScriptStruct FortniteGame.FortEditorTheaterMapRegionColor
// 0x0018 (0x0018 - 0x0000)
struct FFortEditorTheaterMapRegionColor final
{
public:
	class UFortRegionInfo*                        Region;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RegionColor;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEditorTheaterMapRegionColor) == 0x000008, "Wrong alignment on FFortEditorTheaterMapRegionColor");
static_assert(sizeof(FFortEditorTheaterMapRegionColor) == 0x000018, "Wrong size on FFortEditorTheaterMapRegionColor");
static_assert(offsetof(FFortEditorTheaterMapRegionColor, Region) == 0x000000, "Member 'FFortEditorTheaterMapRegionColor::Region' has a wrong offset!");
static_assert(offsetof(FFortEditorTheaterMapRegionColor, RegionColor) == 0x000008, "Member 'FFortEditorTheaterMapRegionColor::RegionColor' has a wrong offset!");

// ScriptStruct FortniteGame.TileGroupMapInfo
// 0x0038 (0x0038 - 0x0000)
struct FTileGroupMapInfo final
{
public:
	TSoftObjectPtr<class UWorld>                  GroupWorld;                                        // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Weight;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuotaCategory;                                     // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTileGroupMapInfo) == 0x000008, "Wrong alignment on FTileGroupMapInfo");
static_assert(sizeof(FTileGroupMapInfo) == 0x000038, "Wrong size on FTileGroupMapInfo");
static_assert(offsetof(FTileGroupMapInfo, GroupWorld) == 0x000000, "Member 'FTileGroupMapInfo::GroupWorld' has a wrong offset!");
static_assert(offsetof(FTileGroupMapInfo, Weight) == 0x000028, "Member 'FTileGroupMapInfo::Weight' has a wrong offset!");
static_assert(offsetof(FTileGroupMapInfo, QuotaCategory) == 0x00002C, "Member 'FTileGroupMapInfo::QuotaCategory' has a wrong offset!");

// ScriptStruct FortniteGame.FortFoundQuestMissions
// 0x0048 (0x0048 - 0x0000)
struct FFortFoundQuestMissions final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidForAllPlayableMissions;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAvailableMissionData>      LinkedMissions;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableMissionData>      TagMatchingMissions;                               // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableMissionData>      FallbackMatchingMissions;                          // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFoundQuestMissions) == 0x000008, "Wrong alignment on FFortFoundQuestMissions");
static_assert(sizeof(FFortFoundQuestMissions) == 0x000048, "Wrong size on FFortFoundQuestMissions");
static_assert(offsetof(FFortFoundQuestMissions, TheaterId) == 0x000000, "Member 'FFortFoundQuestMissions::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortFoundQuestMissions, bIsValidForAllPlayableMissions) == 0x000010, "Member 'FFortFoundQuestMissions::bIsValidForAllPlayableMissions' has a wrong offset!");
static_assert(offsetof(FFortFoundQuestMissions, LinkedMissions) == 0x000018, "Member 'FFortFoundQuestMissions::LinkedMissions' has a wrong offset!");
static_assert(offsetof(FFortFoundQuestMissions, TagMatchingMissions) == 0x000028, "Member 'FFortFoundQuestMissions::TagMatchingMissions' has a wrong offset!");
static_assert(offsetof(FFortFoundQuestMissions, FallbackMatchingMissions) == 0x000038, "Member 'FFortFoundQuestMissions::FallbackMatchingMissions' has a wrong offset!");

// ScriptStruct FortniteGame.StormWind
// 0x0044 (0x0050 - 0x000C)
struct FStormWind final : public FFastArraySerializerItem
{
public:
	struct FVector                                Location;                                          // 0x000C(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortThreatVisualsManager*              ThreatVisualsManager;                              // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAIEncounterInfo*>           Encounters;                                        // 0x0038(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	struct FFortWindImpulseHandle                 WindHandle;                                        // 0x0048(0x0004)(Transient, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStormWind) == 0x000008, "Wrong alignment on FStormWind");
static_assert(sizeof(FStormWind) == 0x000050, "Wrong size on FStormWind");
static_assert(offsetof(FStormWind, Location) == 0x00000C, "Member 'FStormWind::Location' has a wrong offset!");
static_assert(offsetof(FStormWind, Direction) == 0x000018, "Member 'FStormWind::Direction' has a wrong offset!");
static_assert(offsetof(FStormWind, Radius) == 0x000024, "Member 'FStormWind::Radius' has a wrong offset!");
static_assert(offsetof(FStormWind, Magnitude) == 0x000028, "Member 'FStormWind::Magnitude' has a wrong offset!");
static_assert(offsetof(FStormWind, ThreatVisualsManager) == 0x000030, "Member 'FStormWind::ThreatVisualsManager' has a wrong offset!");
static_assert(offsetof(FStormWind, Encounters) == 0x000038, "Member 'FStormWind::Encounters' has a wrong offset!");
static_assert(offsetof(FStormWind, WindHandle) == 0x000048, "Member 'FStormWind::WindHandle' has a wrong offset!");

// ScriptStruct FortniteGame.StormWindArray
// 0x0010 (0x0118 - 0x0108)
struct FStormWindArray final : public FFastArraySerializer
{
public:
	TArray<struct FStormWind>                     StormWinds;                                        // 0x0108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStormWindArray) == 0x000008, "Wrong alignment on FStormWindArray");
static_assert(sizeof(FStormWindArray) == 0x000118, "Wrong size on FStormWindArray");
static_assert(offsetof(FStormWindArray, StormWinds) == 0x000108, "Member 'FStormWindArray::StormWinds' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatGridIndex
// 0x0008 (0x0008 - 0x0000)
struct FThreatGridIndex final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatGridIndex) == 0x000004, "Wrong alignment on FThreatGridIndex");
static_assert(sizeof(FThreatGridIndex) == 0x000008, "Wrong size on FThreatGridIndex");
static_assert(offsetof(FThreatGridIndex, X) == 0x000000, "Member 'FThreatGridIndex::X' has a wrong offset!");
static_assert(offsetof(FThreatGridIndex, Y) == 0x000004, "Member 'FThreatGridIndex::Y' has a wrong offset!");

// ScriptStruct FortniteGame.DifficultyRowProgression
// 0x0028 (0x0028 - 0x0000)
struct FDifficultyRowProgression final
{
public:
	class FName                                   DifficultyRowName;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AdditiveDifficultyMod;                             // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDifficultyRowProgression) == 0x000008, "Wrong alignment on FDifficultyRowProgression");
static_assert(sizeof(FDifficultyRowProgression) == 0x000028, "Wrong size on FDifficultyRowProgression");
static_assert(offsetof(FDifficultyRowProgression, DifficultyRowName) == 0x000000, "Member 'FDifficultyRowProgression::DifficultyRowName' has a wrong offset!");
static_assert(offsetof(FDifficultyRowProgression, AdditiveDifficultyMod) == 0x000008, "Member 'FDifficultyRowProgression::AdditiveDifficultyMod' has a wrong offset!");

// ScriptStruct FortniteGame.DifficultyCollectionProgressionData
// 0x0017 (0x0018 - 0x0001)
struct FDifficultyCollectionProgressionData final : public FTieredCollectionProgressionDataBase
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDifficultyRowProgression>      DifficultyCollections;                             // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDifficultyCollectionProgressionData) == 0x000008, "Wrong alignment on FDifficultyCollectionProgressionData");
static_assert(sizeof(FDifficultyCollectionProgressionData) == 0x000018, "Wrong size on FDifficultyCollectionProgressionData");
static_assert(offsetof(FDifficultyCollectionProgressionData, DifficultyCollections) == 0x000008, "Member 'FDifficultyCollectionProgressionData::DifficultyCollections' has a wrong offset!");

// ScriptStruct FortniteGame.TieredNamedCollectionProgressionData
// 0x0017 (0x0018 - 0x0001)
struct FTieredNamedCollectionProgressionData final : public FTieredCollectionProgressionDataBase
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CollectionNames;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredNamedCollectionProgressionData) == 0x000008, "Wrong alignment on FTieredNamedCollectionProgressionData");
static_assert(sizeof(FTieredNamedCollectionProgressionData) == 0x000018, "Wrong size on FTieredNamedCollectionProgressionData");
static_assert(offsetof(FTieredNamedCollectionProgressionData, CollectionNames) == 0x000008, "Member 'FTieredNamedCollectionProgressionData::CollectionNames' has a wrong offset!");

// ScriptStruct FortniteGame.WorldAmbientPropertiesMatchingGameContext
// 0x00A0 (0x00A0 - 0x0000)
struct FWorldAmbientPropertiesMatchingGameContext final
{
public:
	struct FGameplayTagQuery                      QueryToMatch;                                      // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortTimeOfDayTheme                    TimeOfDayTheme;                                    // 0x0048(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortGlobalWindInfo                    GlobalWindInfo;                                    // 0x0088(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldAmbientPropertiesMatchingGameContext) == 0x000008, "Wrong alignment on FWorldAmbientPropertiesMatchingGameContext");
static_assert(sizeof(FWorldAmbientPropertiesMatchingGameContext) == 0x0000A0, "Wrong size on FWorldAmbientPropertiesMatchingGameContext");
static_assert(offsetof(FWorldAmbientPropertiesMatchingGameContext, QueryToMatch) == 0x000000, "Member 'FWorldAmbientPropertiesMatchingGameContext::QueryToMatch' has a wrong offset!");
static_assert(offsetof(FWorldAmbientPropertiesMatchingGameContext, TimeOfDayTheme) == 0x000048, "Member 'FWorldAmbientPropertiesMatchingGameContext::TimeOfDayTheme' has a wrong offset!");
static_assert(offsetof(FWorldAmbientPropertiesMatchingGameContext, GlobalWindInfo) == 0x000088, "Member 'FWorldAmbientPropertiesMatchingGameContext::GlobalWindInfo' has a wrong offset!");

// ScriptStruct FortniteGame.TimeOfDayDirectOverrides
// 0x0040 (0x0040 - 0x0000)
struct FTimeOfDayDirectOverrides final
{
public:
	uint8                                         bOverrideLightIntensity : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideLightColor : 1;                           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideSkyLightIntensity : 1;                    // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideSkyLightColor : 1;                        // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideFogDensity : 1;                           // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideFogColor : 1;                             // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverriddenLightIntensity;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverriddenLightColor;                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverriddenSkyLightIntensity;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverriddenSkyLightColor;                           // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverriddenFogDensity;                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OverriddenFogColor;                                // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeOfDayDirectOverrides) == 0x000004, "Wrong alignment on FTimeOfDayDirectOverrides");
static_assert(sizeof(FTimeOfDayDirectOverrides) == 0x000040, "Wrong size on FTimeOfDayDirectOverrides");
static_assert(offsetof(FTimeOfDayDirectOverrides, OverriddenLightIntensity) == 0x000004, "Member 'FTimeOfDayDirectOverrides::OverriddenLightIntensity' has a wrong offset!");
static_assert(offsetof(FTimeOfDayDirectOverrides, OverriddenLightColor) == 0x000008, "Member 'FTimeOfDayDirectOverrides::OverriddenLightColor' has a wrong offset!");
static_assert(offsetof(FTimeOfDayDirectOverrides, OverriddenSkyLightIntensity) == 0x000018, "Member 'FTimeOfDayDirectOverrides::OverriddenSkyLightIntensity' has a wrong offset!");
static_assert(offsetof(FTimeOfDayDirectOverrides, OverriddenSkyLightColor) == 0x00001C, "Member 'FTimeOfDayDirectOverrides::OverriddenSkyLightColor' has a wrong offset!");
static_assert(offsetof(FTimeOfDayDirectOverrides, OverriddenFogDensity) == 0x00002C, "Member 'FTimeOfDayDirectOverrides::OverriddenFogDensity' has a wrong offset!");
static_assert(offsetof(FTimeOfDayDirectOverrides, OverriddenFogColor) == 0x000030, "Member 'FTimeOfDayDirectOverrides::OverriddenFogColor' has a wrong offset!");

// ScriptStruct FortniteGame.SkyLightValues
// 0x0038 (0x0038 - 0x0000)
struct FSkyLightValues final
{
public:
	struct FLinearColor                           SkyLightColor;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLightOcclusionTint;                             // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightMinOcclusion;                              // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureCube*                           Cubemap;                                           // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureCube*                           DestinationCubemap;                                // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyLightValues) == 0x000008, "Wrong alignment on FSkyLightValues");
static_assert(sizeof(FSkyLightValues) == 0x000038, "Wrong size on FSkyLightValues");
static_assert(offsetof(FSkyLightValues, SkyLightColor) == 0x000000, "Member 'FSkyLightValues::SkyLightColor' has a wrong offset!");
static_assert(offsetof(FSkyLightValues, SkyLightOcclusionTint) == 0x000010, "Member 'FSkyLightValues::SkyLightOcclusionTint' has a wrong offset!");
static_assert(offsetof(FSkyLightValues, SkyLightMinOcclusion) == 0x000020, "Member 'FSkyLightValues::SkyLightMinOcclusion' has a wrong offset!");
static_assert(offsetof(FSkyLightValues, VolumetricScatteringIntensity) == 0x000024, "Member 'FSkyLightValues::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSkyLightValues, Cubemap) == 0x000028, "Member 'FSkyLightValues::Cubemap' has a wrong offset!");
static_assert(offsetof(FSkyLightValues, DestinationCubemap) == 0x000030, "Member 'FSkyLightValues::DestinationCubemap' has a wrong offset!");

// ScriptStruct FortniteGame.ElementalCharValues
// 0x0014 (0x0014 - 0x0000)
struct FElementalCharValues final
{
public:
	struct FLinearColor                           FireCharColor;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElectricalCharEmissive;                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FElementalCharValues) == 0x000004, "Wrong alignment on FElementalCharValues");
static_assert(sizeof(FElementalCharValues) == 0x000014, "Wrong size on FElementalCharValues");
static_assert(offsetof(FElementalCharValues, FireCharColor) == 0x000000, "Member 'FElementalCharValues::FireCharColor' has a wrong offset!");
static_assert(offsetof(FElementalCharValues, ElectricalCharEmissive) == 0x000010, "Member 'FElementalCharValues::ElectricalCharEmissive' has a wrong offset!");

// ScriptStruct FortniteGame.DirectionalLightValues
// 0x000C (0x000C - 0x0000)
struct FDirectionalLightValues final
{
public:
	struct FColor                                 LightColor;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectionalLightValues) == 0x000004, "Wrong alignment on FDirectionalLightValues");
static_assert(sizeof(FDirectionalLightValues) == 0x00000C, "Wrong size on FDirectionalLightValues");
static_assert(offsetof(FDirectionalLightValues, LightColor) == 0x000000, "Member 'FDirectionalLightValues::LightColor' has a wrong offset!");
static_assert(offsetof(FDirectionalLightValues, Brightness) == 0x000004, "Member 'FDirectionalLightValues::Brightness' has a wrong offset!");
static_assert(offsetof(FDirectionalLightValues, VolumetricScatteringIntensity) == 0x000008, "Member 'FDirectionalLightValues::VolumetricScatteringIntensity' has a wrong offset!");

// ScriptStruct FortniteGame.DayPhaseInfo
// 0x0188 (0x0188 - 0x0000)
struct FDayPhaseInfo final
{
public:
	class FString                                 PhaseStartAnnouncement;                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePhaseBegins;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseLengthInHours;                                // 0x0014(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentageTransitionIn;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionInTimeInMinutes;                         // 0x001C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentageTransitionOut;                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionOutTimeInMinutes;                        // 0x0024(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkyLightValues                        SkyLightValues;                                    // 0x0028(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FThreatCloudValues                     ThreatCloudValues;                                 // 0x0060(0x00A0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FElementalCharValues                   ElementalCharValues;                               // 0x0100(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDirectionalLightValues                DirectionalLightValues;                            // 0x0114(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogValues            ExpHeightFogValues;                                // 0x0120(0x0050)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  LowPriPostProcessComponent;                        // 0x0170(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      SkyMaterialInstance;                               // 0x0178(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      StarMapMaterialInstance;                           // 0x0180(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDayPhaseInfo) == 0x000008, "Wrong alignment on FDayPhaseInfo");
static_assert(sizeof(FDayPhaseInfo) == 0x000188, "Wrong size on FDayPhaseInfo");
static_assert(offsetof(FDayPhaseInfo, PhaseStartAnnouncement) == 0x000000, "Member 'FDayPhaseInfo::PhaseStartAnnouncement' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, TimePhaseBegins) == 0x000010, "Member 'FDayPhaseInfo::TimePhaseBegins' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, PhaseLengthInHours) == 0x000014, "Member 'FDayPhaseInfo::PhaseLengthInHours' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, PercentageTransitionIn) == 0x000018, "Member 'FDayPhaseInfo::PercentageTransitionIn' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, TransitionInTimeInMinutes) == 0x00001C, "Member 'FDayPhaseInfo::TransitionInTimeInMinutes' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, PercentageTransitionOut) == 0x000020, "Member 'FDayPhaseInfo::PercentageTransitionOut' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, TransitionOutTimeInMinutes) == 0x000024, "Member 'FDayPhaseInfo::TransitionOutTimeInMinutes' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, SkyLightValues) == 0x000028, "Member 'FDayPhaseInfo::SkyLightValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, ThreatCloudValues) == 0x000060, "Member 'FDayPhaseInfo::ThreatCloudValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, ElementalCharValues) == 0x000100, "Member 'FDayPhaseInfo::ElementalCharValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, DirectionalLightValues) == 0x000114, "Member 'FDayPhaseInfo::DirectionalLightValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, ExpHeightFogValues) == 0x000120, "Member 'FDayPhaseInfo::ExpHeightFogValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, LowPriPostProcessComponent) == 0x000170, "Member 'FDayPhaseInfo::LowPriPostProcessComponent' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, SkyMaterialInstance) == 0x000178, "Member 'FDayPhaseInfo::SkyMaterialInstance' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, StarMapMaterialInstance) == 0x000180, "Member 'FDayPhaseInfo::StarMapMaterialInstance' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipMapEntry
// 0x0018 (0x0018 - 0x0000)
struct FFortTooltipMapEntry final
{
public:
	class UClass*                                 ObjectClass;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SecondaryObjectClass;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTooltip>               TooltipClass;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTooltipMapEntry) == 0x000008, "Wrong alignment on FFortTooltipMapEntry");
static_assert(sizeof(FFortTooltipMapEntry) == 0x000018, "Wrong size on FFortTooltipMapEntry");
static_assert(offsetof(FFortTooltipMapEntry, ObjectClass) == 0x000000, "Member 'FFortTooltipMapEntry::ObjectClass' has a wrong offset!");
static_assert(offsetof(FFortTooltipMapEntry, SecondaryObjectClass) == 0x000008, "Member 'FFortTooltipMapEntry::SecondaryObjectClass' has a wrong offset!");
static_assert(offsetof(FFortTooltipMapEntry, TooltipClass) == 0x000010, "Member 'FFortTooltipMapEntry::TooltipClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipValueData
// 0x0070 (0x0070 - 0x0000)
struct FFortTooltipValueData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   FormattedValue;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ExplanationText;                                   // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  StateTags;                                         // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTooltipValueData) == 0x000008, "Wrong alignment on FFortTooltipValueData");
static_assert(sizeof(FFortTooltipValueData) == 0x000070, "Wrong size on FFortTooltipValueData");
static_assert(offsetof(FFortTooltipValueData, DisplayName) == 0x000000, "Member 'FFortTooltipValueData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTooltipValueData, FormattedValue) == 0x000018, "Member 'FFortTooltipValueData::FormattedValue' has a wrong offset!");
static_assert(offsetof(FFortTooltipValueData, ExplanationText) == 0x000030, "Member 'FFortTooltipValueData::ExplanationText' has a wrong offset!");
static_assert(offsetof(FFortTooltipValueData, Value) == 0x000048, "Member 'FFortTooltipValueData::Value' has a wrong offset!");
static_assert(offsetof(FFortTooltipValueData, StateTags) == 0x000050, "Member 'FFortTooltipValueData::StateTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortTouchAimAssist
// 0x0110 (0x0110 - 0x0000)
struct alignas(0x10) FFortTouchAimAssist final
{
public:
	uint8                                         Pad_0[0x110];                                      // 0x0000(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTouchAimAssist) == 0x000010, "Wrong alignment on FFortTouchAimAssist");
static_assert(sizeof(FFortTouchAimAssist) == 0x000110, "Wrong size on FFortTouchAimAssist");

// ScriptStruct FortniteGame.FortTouchAimAssist_TargetAggregator
// 0x0070 (0x0070 - 0x0000)
struct FFortTouchAimAssist_TargetAggregator final
{
public:
	TArray<struct FFortTouchAimAssist_Target>     TargetCache0;                                      // 0x0000(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortTouchAimAssist_Target>     TargetCache1;                                      // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTouchAimAssist_Target             AutoFireTarget;                                    // 0x0028(0x0040)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTouchAimAssist_TargetAggregator) == 0x000008, "Wrong alignment on FFortTouchAimAssist_TargetAggregator");
static_assert(sizeof(FFortTouchAimAssist_TargetAggregator) == 0x000070, "Wrong size on FFortTouchAimAssist_TargetAggregator");
static_assert(offsetof(FFortTouchAimAssist_TargetAggregator, TargetCache0) == 0x000000, "Member 'FFortTouchAimAssist_TargetAggregator::TargetCache0' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssist_TargetAggregator, TargetCache1) == 0x000010, "Member 'FFortTouchAimAssist_TargetAggregator::TargetCache1' has a wrong offset!");
static_assert(offsetof(FFortTouchAimAssist_TargetAggregator, AutoFireTarget) == 0x000028, "Member 'FFortTouchAimAssist_TargetAggregator::AutoFireTarget' has a wrong offset!");

// ScriptStruct FortniteGame.FortTouchAimAssist_Results
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FFortTouchAimAssist_Results final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTouchAimAssist_Results) == 0x000004, "Wrong alignment on FFortTouchAimAssist_Results");
static_assert(sizeof(FFortTouchAimAssist_Results) == 0x00000C, "Wrong size on FFortTouchAimAssist_Results");

// ScriptStruct FortniteGame.FortTouchAimAssist_Params
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFortTouchAimAssist_Params final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTouchAimAssist_Params) == 0x000008, "Wrong alignment on FFortTouchAimAssist_Params");
static_assert(sizeof(FFortTouchAimAssist_Params) == 0x000020, "Wrong size on FFortTouchAimAssist_Params");

// ScriptStruct FortniteGame.FortShowdownScoringRuleInfo
// 0x0010 (0x0018 - 0x0008)
struct FFortShowdownScoringRuleInfo final : public FTableRowBase
{
public:
	class FName                                   DisplayInfoId;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointValue;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreRequirement;                                  // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortShowdownScoringRuleInfo) == 0x000008, "Wrong alignment on FFortShowdownScoringRuleInfo");
static_assert(sizeof(FFortShowdownScoringRuleInfo) == 0x000018, "Wrong size on FFortShowdownScoringRuleInfo");
static_assert(offsetof(FFortShowdownScoringRuleInfo, DisplayInfoId) == 0x000008, "Member 'FFortShowdownScoringRuleInfo::DisplayInfoId' has a wrong offset!");
static_assert(offsetof(FFortShowdownScoringRuleInfo, PointValue) == 0x000010, "Member 'FFortShowdownScoringRuleInfo::PointValue' has a wrong offset!");
static_assert(offsetof(FFortShowdownScoringRuleInfo, ScoreRequirement) == 0x000014, "Member 'FFortShowdownScoringRuleInfo::ScoreRequirement' has a wrong offset!");

// ScriptStruct FortniteGame.TowhookParams
// 0x0038 (0x0038 - 0x0000)
struct FTowhookParams final
{
public:
	float                                         MaxCableLength;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCableLength;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpring;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRope;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpringStiffness;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDamping;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringMaxStiffnessForce;                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringMaxStiffnessVelocity;                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDeformationRate;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeGive;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeBreakForce;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeYankForce;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtendSpeedKmh;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContractSpeedKmh;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplySpringToSelf;                                // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplySpringToOther;                               // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTakeUpSlack;                                      // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTowhookParams) == 0x000004, "Wrong alignment on FTowhookParams");
static_assert(sizeof(FTowhookParams) == 0x000038, "Wrong size on FTowhookParams");
static_assert(offsetof(FTowhookParams, MaxCableLength) == 0x000000, "Member 'FTowhookParams::MaxCableLength' has a wrong offset!");
static_assert(offsetof(FTowhookParams, MinCableLength) == 0x000004, "Member 'FTowhookParams::MinCableLength' has a wrong offset!");
static_assert(offsetof(FTowhookParams, bUseSpring) == 0x000008, "Member 'FTowhookParams::bUseSpring' has a wrong offset!");
static_assert(offsetof(FTowhookParams, bUseRope) == 0x000009, "Member 'FTowhookParams::bUseRope' has a wrong offset!");
static_assert(offsetof(FTowhookParams, SpringStiffness) == 0x00000C, "Member 'FTowhookParams::SpringStiffness' has a wrong offset!");
static_assert(offsetof(FTowhookParams, SpringDamping) == 0x000010, "Member 'FTowhookParams::SpringDamping' has a wrong offset!");
static_assert(offsetof(FTowhookParams, SpringMaxStiffnessForce) == 0x000014, "Member 'FTowhookParams::SpringMaxStiffnessForce' has a wrong offset!");
static_assert(offsetof(FTowhookParams, SpringMaxStiffnessVelocity) == 0x000018, "Member 'FTowhookParams::SpringMaxStiffnessVelocity' has a wrong offset!");
static_assert(offsetof(FTowhookParams, SpringDeformationRate) == 0x00001C, "Member 'FTowhookParams::SpringDeformationRate' has a wrong offset!");
static_assert(offsetof(FTowhookParams, RopeGive) == 0x000020, "Member 'FTowhookParams::RopeGive' has a wrong offset!");
static_assert(offsetof(FTowhookParams, RopeBreakForce) == 0x000024, "Member 'FTowhookParams::RopeBreakForce' has a wrong offset!");
static_assert(offsetof(FTowhookParams, RopeYankForce) == 0x000028, "Member 'FTowhookParams::RopeYankForce' has a wrong offset!");
static_assert(offsetof(FTowhookParams, ExtendSpeedKmh) == 0x00002C, "Member 'FTowhookParams::ExtendSpeedKmh' has a wrong offset!");
static_assert(offsetof(FTowhookParams, ContractSpeedKmh) == 0x000030, "Member 'FTowhookParams::ContractSpeedKmh' has a wrong offset!");
static_assert(offsetof(FTowhookParams, bApplySpringToSelf) == 0x000034, "Member 'FTowhookParams::bApplySpringToSelf' has a wrong offset!");
static_assert(offsetof(FTowhookParams, bApplySpringToOther) == 0x000035, "Member 'FTowhookParams::bApplySpringToOther' has a wrong offset!");
static_assert(offsetof(FTowhookParams, bTakeUpSlack) == 0x000036, "Member 'FTowhookParams::bTakeUpSlack' has a wrong offset!");

// ScriptStruct FortniteGame.TrackConfiguration
// 0x0038 (0x0038 - 0x0000)
struct FTrackConfiguration final
{
public:
	TArray<bool>                                  NeighborsByDirection;                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTrackSwitchStateConfig>        SwitchStates;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRotator                               SwitchRotation;                                    // 0x0020(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SwitchOffset;                                      // 0x002C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackConfiguration) == 0x000008, "Wrong alignment on FTrackConfiguration");
static_assert(sizeof(FTrackConfiguration) == 0x000038, "Wrong size on FTrackConfiguration");
static_assert(offsetof(FTrackConfiguration, NeighborsByDirection) == 0x000000, "Member 'FTrackConfiguration::NeighborsByDirection' has a wrong offset!");
static_assert(offsetof(FTrackConfiguration, SwitchStates) == 0x000010, "Member 'FTrackConfiguration::SwitchStates' has a wrong offset!");
static_assert(offsetof(FTrackConfiguration, SwitchRotation) == 0x000020, "Member 'FTrackConfiguration::SwitchRotation' has a wrong offset!");
static_assert(offsetof(FTrackConfiguration, SwitchOffset) == 0x00002C, "Member 'FTrackConfiguration::SwitchOffset' has a wrong offset!");

// ScriptStruct FortniteGame.RepTrackMovement
// 0x0008 (0x0018 - 0x0010)
struct FRepTrackMovement final : public FTrackMovement
{
public:
	float                                         Timestamp;                                         // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepTrackMovement) == 0x000008, "Wrong alignment on FRepTrackMovement");
static_assert(sizeof(FRepTrackMovement) == 0x000018, "Wrong size on FRepTrackMovement");
static_assert(offsetof(FRepTrackMovement, Timestamp) == 0x000010, "Member 'FRepTrackMovement::Timestamp' has a wrong offset!");

// ScriptStruct FortniteGame.FortCreativeMessageDispatcherErrorMessage
// 0x0030 (0x0030 - 0x0000)
struct FFortCreativeMessageDispatcherErrorMessage final
{
public:
	EMessageDispatcherErrorMessageType            ErrorMessageType;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MessageName;                                       // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	struct FGameplayTag                           ChannelId;                                         // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitValue;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCreativeMessageDispatcherErrorMessage) == 0x000008, "Wrong alignment on FFortCreativeMessageDispatcherErrorMessage");
static_assert(sizeof(FFortCreativeMessageDispatcherErrorMessage) == 0x000030, "Wrong size on FFortCreativeMessageDispatcherErrorMessage");
static_assert(offsetof(FFortCreativeMessageDispatcherErrorMessage, ErrorMessageType) == 0x000000, "Member 'FFortCreativeMessageDispatcherErrorMessage::ErrorMessageType' has a wrong offset!");
static_assert(offsetof(FFortCreativeMessageDispatcherErrorMessage, MessageName) == 0x000008, "Member 'FFortCreativeMessageDispatcherErrorMessage::MessageName' has a wrong offset!");
static_assert(offsetof(FFortCreativeMessageDispatcherErrorMessage, ChannelId) == 0x000020, "Member 'FFortCreativeMessageDispatcherErrorMessage::ChannelId' has a wrong offset!");
static_assert(offsetof(FFortCreativeMessageDispatcherErrorMessage, LimitValue) == 0x000028, "Member 'FFortCreativeMessageDispatcherErrorMessage::LimitValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortInGameLeaderboardPlacementData
// 0x0047 (0x0048 - 0x0001)
struct FFortInGameLeaderboardPlacementData final : public FFortChangeMonitoringStruct
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayName;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreToWin;                                        // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamNum;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerStateAthena*>         TeamMembers;                                       // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Placement;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortIndex;                                         // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRepresentsLocalPlayer;                            // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PctToWin;                                          // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortInGameLeaderboardPlacementData) == 0x000008, "Wrong alignment on FFortInGameLeaderboardPlacementData");
static_assert(sizeof(FFortInGameLeaderboardPlacementData) == 0x000048, "Wrong size on FFortInGameLeaderboardPlacementData");
static_assert(offsetof(FFortInGameLeaderboardPlacementData, DisplayName) == 0x000008, "Member 'FFortInGameLeaderboardPlacementData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortInGameLeaderboardPlacementData, Score) == 0x000018, "Member 'FFortInGameLeaderboardPlacementData::Score' has a wrong offset!");
static_assert(offsetof(FFortInGameLeaderboardPlacementData, ScoreToWin) == 0x00001C, "Member 'FFortInGameLeaderboardPlacementData::ScoreToWin' has a wrong offset!");
static_assert(offsetof(FFortInGameLeaderboardPlacementData, TeamNum) == 0x000020, "Member 'FFortInGameLeaderboardPlacementData::TeamNum' has a wrong offset!");
static_assert(offsetof(FFortInGameLeaderboardPlacementData, TeamMembers) == 0x000028, "Member 'FFortInGameLeaderboardPlacementData::TeamMembers' has a wrong offset!");
static_assert(offsetof(FFortInGameLeaderboardPlacementData, Placement) == 0x000038, "Member 'FFortInGameLeaderboardPlacementData::Placement' has a wrong offset!");
static_assert(offsetof(FFortInGameLeaderboardPlacementData, SortIndex) == 0x00003C, "Member 'FFortInGameLeaderboardPlacementData::SortIndex' has a wrong offset!");
static_assert(offsetof(FFortInGameLeaderboardPlacementData, bRepresentsLocalPlayer) == 0x000040, "Member 'FFortInGameLeaderboardPlacementData::bRepresentsLocalPlayer' has a wrong offset!");
static_assert(offsetof(FFortInGameLeaderboardPlacementData, PctToWin) == 0x000044, "Member 'FFortInGameLeaderboardPlacementData::PctToWin' has a wrong offset!");

// ScriptStruct FortniteGame.DrunkHomingConfig
// 0x0040 (0x0040 - 0x0000)
struct FDrunkHomingConfig final
{
public:
	class UCurveFloat*                            DrunkOverrideSpeedCurve;                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionChangeRate;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookaheadDist;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnAngle;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnAngleBlendOut;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrunkDuration;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPitch;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomTargetPositionRadius;                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassedTargetSlackTime;                             // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnAngleClamp;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrunkBlendOutRange;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrunkBlendOutTimeThreshold;                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrunkBlendOutTime;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrunkBlendOutTurnSpeed;                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimPointMaxRange;                                  // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDrunkHomingConfig) == 0x000008, "Wrong alignment on FDrunkHomingConfig");
static_assert(sizeof(FDrunkHomingConfig) == 0x000040, "Wrong size on FDrunkHomingConfig");
static_assert(offsetof(FDrunkHomingConfig, DrunkOverrideSpeedCurve) == 0x000000, "Member 'FDrunkHomingConfig::DrunkOverrideSpeedCurve' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, DirectionChangeRate) == 0x000008, "Member 'FDrunkHomingConfig::DirectionChangeRate' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, LookaheadDist) == 0x00000C, "Member 'FDrunkHomingConfig::LookaheadDist' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, TurnAngle) == 0x000010, "Member 'FDrunkHomingConfig::TurnAngle' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, TurnAngleBlendOut) == 0x000014, "Member 'FDrunkHomingConfig::TurnAngleBlendOut' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, DrunkDuration) == 0x000018, "Member 'FDrunkHomingConfig::DrunkDuration' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, MinPitch) == 0x00001C, "Member 'FDrunkHomingConfig::MinPitch' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, RandomTargetPositionRadius) == 0x000020, "Member 'FDrunkHomingConfig::RandomTargetPositionRadius' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, PassedTargetSlackTime) == 0x000024, "Member 'FDrunkHomingConfig::PassedTargetSlackTime' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, TurnAngleClamp) == 0x000028, "Member 'FDrunkHomingConfig::TurnAngleClamp' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, DrunkBlendOutRange) == 0x00002C, "Member 'FDrunkHomingConfig::DrunkBlendOutRange' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, DrunkBlendOutTimeThreshold) == 0x000030, "Member 'FDrunkHomingConfig::DrunkBlendOutTimeThreshold' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, DrunkBlendOutTime) == 0x000034, "Member 'FDrunkHomingConfig::DrunkBlendOutTime' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, DrunkBlendOutTurnSpeed) == 0x000038, "Member 'FDrunkHomingConfig::DrunkBlendOutTurnSpeed' has a wrong offset!");
static_assert(offsetof(FDrunkHomingConfig, AimPointMaxRange) == 0x00003C, "Member 'FDrunkHomingConfig::AimPointMaxRange' has a wrong offset!");

// ScriptStruct FortniteGame.ProjectileHomingData
// 0x003C (0x003C - 0x0000)
struct FProjectileHomingData final
{
public:
	EFortHomingStyle                              HomingStyle;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinTurnSpeed;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTurnSpeed;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RampTimeFromMinToMaxTurnSpeed;                     // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockTargetDistanceThreshold;                       // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPawn>               LockedOnTarget;                                    // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LockedOnTargetPosition;                            // 0x0020(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x002C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetTurnSpeedTimer;                               // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProjectileHomingData) == 0x000004, "Wrong alignment on FProjectileHomingData");
static_assert(sizeof(FProjectileHomingData) == 0x00003C, "Wrong size on FProjectileHomingData");
static_assert(offsetof(FProjectileHomingData, HomingStyle) == 0x000000, "Member 'FProjectileHomingData::HomingStyle' has a wrong offset!");
static_assert(offsetof(FProjectileHomingData, MinTurnSpeed) == 0x000004, "Member 'FProjectileHomingData::MinTurnSpeed' has a wrong offset!");
static_assert(offsetof(FProjectileHomingData, MaxTurnSpeed) == 0x000008, "Member 'FProjectileHomingData::MaxTurnSpeed' has a wrong offset!");
static_assert(offsetof(FProjectileHomingData, RampTimeFromMinToMaxTurnSpeed) == 0x00000C, "Member 'FProjectileHomingData::RampTimeFromMinToMaxTurnSpeed' has a wrong offset!");
static_assert(offsetof(FProjectileHomingData, LockTargetDistanceThreshold) == 0x000010, "Member 'FProjectileHomingData::LockTargetDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FProjectileHomingData, RandomSeed) == 0x000014, "Member 'FProjectileHomingData::RandomSeed' has a wrong offset!");
static_assert(offsetof(FProjectileHomingData, LockedOnTarget) == 0x000018, "Member 'FProjectileHomingData::LockedOnTarget' has a wrong offset!");
static_assert(offsetof(FProjectileHomingData, LockedOnTargetPosition) == 0x000020, "Member 'FProjectileHomingData::LockedOnTargetPosition' has a wrong offset!");
static_assert(offsetof(FProjectileHomingData, TargetOffset) == 0x00002C, "Member 'FProjectileHomingData::TargetOffset' has a wrong offset!");
static_assert(offsetof(FProjectileHomingData, ResetTurnSpeedTimer) == 0x000038, "Member 'FProjectileHomingData::ResetTurnSpeedTimer' has a wrong offset!");

// ScriptStruct FortniteGame.CreativeDeviceMeshSettings
// 0x0068 (0x0068 - 0x0000)
struct FCreativeDeviceMeshSettings final
{
public:
	TSoftObjectPtr<class UStaticMesh>             Mesh;                                              // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0028(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StatTag;                                           // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeDeviceMeshSettings) == 0x000008, "Wrong alignment on FCreativeDeviceMeshSettings");
static_assert(sizeof(FCreativeDeviceMeshSettings) == 0x000068, "Wrong size on FCreativeDeviceMeshSettings");
static_assert(offsetof(FCreativeDeviceMeshSettings, Mesh) == 0x000000, "Member 'FCreativeDeviceMeshSettings::Mesh' has a wrong offset!");
static_assert(offsetof(FCreativeDeviceMeshSettings, Scale) == 0x000028, "Member 'FCreativeDeviceMeshSettings::Scale' has a wrong offset!");
static_assert(offsetof(FCreativeDeviceMeshSettings, StatTag) == 0x000034, "Member 'FCreativeDeviceMeshSettings::StatTag' has a wrong offset!");
static_assert(offsetof(FCreativeDeviceMeshSettings, Material) == 0x000040, "Member 'FCreativeDeviceMeshSettings::Material' has a wrong offset!");

// ScriptStruct FortniteGame.FortCreativeItemListData
// 0x0020 (0x0028 - 0x0008)
struct FFortCreativeItemListData final : public FTableRowBase
{
public:
	ECreativeItemCategory                         Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPrimaryAssetId                        ItemPrimaryAssetId;                                // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SortPriority;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncluded;                                         // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCreativeItemListData) == 0x000008, "Wrong alignment on FFortCreativeItemListData");
static_assert(sizeof(FFortCreativeItemListData) == 0x000028, "Wrong size on FFortCreativeItemListData");
static_assert(offsetof(FFortCreativeItemListData, Category) == 0x000008, "Member 'FFortCreativeItemListData::Category' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemListData, ItemPrimaryAssetId) == 0x00000C, "Member 'FFortCreativeItemListData::ItemPrimaryAssetId' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemListData, Count) == 0x00001C, "Member 'FFortCreativeItemListData::Count' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemListData, SortPriority) == 0x000020, "Member 'FFortCreativeItemListData::SortPriority' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemListData, bIncluded) == 0x000024, "Member 'FFortCreativeItemListData::bIncluded' has a wrong offset!");

// ScriptStruct FortniteGame.CombinedFeatureProgressSummary
// 0x0050 (0x0050 - 0x0000)
struct FCombinedFeatureProgressSummary final
{
public:
	EFortGameFeature                              GameFeature;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PrimaryTextKey;                                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocalizedPrimaryText;                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecondaryTextKey;                                  // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocalizedSecondaryText;                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombinedProgress;                                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPaused;                                         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBePaused;                                      // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCombinedFeatureProgressSummary) == 0x000008, "Wrong alignment on FCombinedFeatureProgressSummary");
static_assert(sizeof(FCombinedFeatureProgressSummary) == 0x000050, "Wrong size on FCombinedFeatureProgressSummary");
static_assert(offsetof(FCombinedFeatureProgressSummary, GameFeature) == 0x000000, "Member 'FCombinedFeatureProgressSummary::GameFeature' has a wrong offset!");
static_assert(offsetof(FCombinedFeatureProgressSummary, PrimaryTextKey) == 0x000008, "Member 'FCombinedFeatureProgressSummary::PrimaryTextKey' has a wrong offset!");
static_assert(offsetof(FCombinedFeatureProgressSummary, LocalizedPrimaryText) == 0x000018, "Member 'FCombinedFeatureProgressSummary::LocalizedPrimaryText' has a wrong offset!");
static_assert(offsetof(FCombinedFeatureProgressSummary, SecondaryTextKey) == 0x000028, "Member 'FCombinedFeatureProgressSummary::SecondaryTextKey' has a wrong offset!");
static_assert(offsetof(FCombinedFeatureProgressSummary, LocalizedSecondaryText) == 0x000038, "Member 'FCombinedFeatureProgressSummary::LocalizedSecondaryText' has a wrong offset!");
static_assert(offsetof(FCombinedFeatureProgressSummary, CombinedProgress) == 0x000048, "Member 'FCombinedFeatureProgressSummary::CombinedProgress' has a wrong offset!");
static_assert(offsetof(FCombinedFeatureProgressSummary, bIsPaused) == 0x00004C, "Member 'FCombinedFeatureProgressSummary::bIsPaused' has a wrong offset!");
static_assert(offsetof(FCombinedFeatureProgressSummary, bCanBePaused) == 0x00004D, "Member 'FCombinedFeatureProgressSummary::bCanBePaused' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameFeatureStatus
// 0x0110 (0x0110 - 0x0000)
struct FFortGameFeatureStatus final
{
public:
	EFortGameFeature                              Feature;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGameFeatureState                         CurrentState;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGameFeatureState                         RequestedState;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorCode;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ErrorText;                                         // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   StatusText;                                        // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsProgressPaused;                                 // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PauseReason;                                       // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentBundleNum;                                  // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNumBundles;                                   // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FJsonObjectWrapper>  BundleFullProgress;                                // 0x0068(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FJsonObjectWrapper>  PreloadBundleFullProgress;                         // 0x00B8(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0108(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPendingActive;                                   // 0x0109(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameFeatureStatus) == 0x000008, "Wrong alignment on FFortGameFeatureStatus");
static_assert(sizeof(FFortGameFeatureStatus) == 0x000110, "Wrong size on FFortGameFeatureStatus");
static_assert(offsetof(FFortGameFeatureStatus, Feature) == 0x000000, "Member 'FFortGameFeatureStatus::Feature' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, CurrentState) == 0x000001, "Member 'FFortGameFeatureStatus::CurrentState' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, RequestedState) == 0x000002, "Member 'FFortGameFeatureStatus::RequestedState' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, ErrorCode) == 0x000008, "Member 'FFortGameFeatureStatus::ErrorCode' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, ErrorText) == 0x000018, "Member 'FFortGameFeatureStatus::ErrorText' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, StatusText) == 0x000030, "Member 'FFortGameFeatureStatus::StatusText' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, Progress) == 0x000048, "Member 'FFortGameFeatureStatus::Progress' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, bIsProgressPaused) == 0x00004C, "Member 'FFortGameFeatureStatus::bIsProgressPaused' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, PauseReason) == 0x000050, "Member 'FFortGameFeatureStatus::PauseReason' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, CurrentBundleNum) == 0x000060, "Member 'FFortGameFeatureStatus::CurrentBundleNum' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, TotalNumBundles) == 0x000064, "Member 'FFortGameFeatureStatus::TotalNumBundles' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, BundleFullProgress) == 0x000068, "Member 'FFortGameFeatureStatus::BundleFullProgress' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, PreloadBundleFullProgress) == 0x0000B8, "Member 'FFortGameFeatureStatus::PreloadBundleFullProgress' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, IsActive) == 0x000108, "Member 'FFortGameFeatureStatus::IsActive' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatus, IsPendingActive) == 0x000109, "Member 'FFortGameFeatureStatus::IsPendingActive' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameFeatureStatusList
// 0x0068 (0x0068 - 0x0000)
struct FFortGameFeatureStatusList final
{
public:
	struct FCombinedFeatureProgressSummary        ProgressSummary;                                   // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FFortGameFeatureStatus>         Features;                                          // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHasNetworkConnection;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingCellularConnection;                        // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameFeatureStatusList) == 0x000008, "Wrong alignment on FFortGameFeatureStatusList");
static_assert(sizeof(FFortGameFeatureStatusList) == 0x000068, "Wrong size on FFortGameFeatureStatusList");
static_assert(offsetof(FFortGameFeatureStatusList, ProgressSummary) == 0x000000, "Member 'FFortGameFeatureStatusList::ProgressSummary' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatusList, Features) == 0x000050, "Member 'FFortGameFeatureStatusList::Features' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatusList, bHasNetworkConnection) == 0x000060, "Member 'FFortGameFeatureStatusList::bHasNetworkConnection' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureStatusList, bIsUsingCellularConnection) == 0x000061, "Member 'FFortGameFeatureStatusList::bIsUsingCellularConnection' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameFeatureResponse
// 0x0030 (0x0030 - 0x0000)
struct FFortGameFeatureResponse final
{
public:
	class FString                                 ErrorCode;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ErrorText;                                         // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EFortErrorSeverity                            ErrorSeverity;                                     // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameFeatureResponse) == 0x000008, "Wrong alignment on FFortGameFeatureResponse");
static_assert(sizeof(FFortGameFeatureResponse) == 0x000030, "Wrong size on FFortGameFeatureResponse");
static_assert(offsetof(FFortGameFeatureResponse, ErrorCode) == 0x000000, "Member 'FFortGameFeatureResponse::ErrorCode' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureResponse, ErrorText) == 0x000010, "Member 'FFortGameFeatureResponse::ErrorText' has a wrong offset!");
static_assert(offsetof(FFortGameFeatureResponse, ErrorSeverity) == 0x000028, "Member 'FFortGameFeatureResponse::ErrorSeverity' has a wrong offset!");

// ScriptStruct FortniteGame.DataTableRowHandleQuantityPair
// 0x0018 (0x0018 - 0x0000)
struct FDataTableRowHandleQuantityPair final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataTableRowHandleQuantityPair) == 0x000008, "Wrong alignment on FDataTableRowHandleQuantityPair");
static_assert(sizeof(FDataTableRowHandleQuantityPair) == 0x000018, "Wrong size on FDataTableRowHandleQuantityPair");
static_assert(offsetof(FDataTableRowHandleQuantityPair, DataTableRowHandle) == 0x000000, "Member 'FDataTableRowHandleQuantityPair::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FDataTableRowHandleQuantityPair, Quantity) == 0x000010, "Member 'FDataTableRowHandleQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortAlterationSlotStatus
// 0x0010 (0x0010 - 0x0000)
struct FFortAlterationSlotStatus final
{
public:
	class UFortAlterationItemDefinition*          Alteration;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinRequiredLevel;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   MinHostItemRarity;                                 // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAlterationSlotStatus) == 0x000008, "Wrong alignment on FFortAlterationSlotStatus");
static_assert(sizeof(FFortAlterationSlotStatus) == 0x000010, "Wrong size on FFortAlterationSlotStatus");
static_assert(offsetof(FFortAlterationSlotStatus, Alteration) == 0x000000, "Member 'FFortAlterationSlotStatus::Alteration' has a wrong offset!");
static_assert(offsetof(FFortAlterationSlotStatus, MinRequiredLevel) == 0x000008, "Member 'FFortAlterationSlotStatus::MinRequiredLevel' has a wrong offset!");
static_assert(offsetof(FFortAlterationSlotStatus, MinHostItemRarity) == 0x00000C, "Member 'FFortAlterationSlotStatus::MinHostItemRarity' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientEvent
// 0x0020 (0x0020 - 0x0000)
struct FFortClientEvent final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventSource;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientEvent) == 0x000008, "Wrong alignment on FFortClientEvent");
static_assert(sizeof(FFortClientEvent) == 0x000020, "Wrong size on FFortClientEvent");
static_assert(offsetof(FFortClientEvent, CategoryName) == 0x000000, "Member 'FFortClientEvent::CategoryName' has a wrong offset!");
static_assert(offsetof(FFortClientEvent, EventName) == 0x000008, "Member 'FFortClientEvent::EventName' has a wrong offset!");
static_assert(offsetof(FFortClientEvent, EventSource) == 0x000010, "Member 'FFortClientEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FFortClientEvent, EventFocus) == 0x000018, "Member 'FFortClientEvent::EventFocus' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionEventName
// 0x0000 (0x0010 - 0x0010)
struct FFortMissionEventName final : public FFortEventName
{
};
static_assert(alignof(FFortMissionEventName) == 0x000004, "Wrong alignment on FFortMissionEventName");
static_assert(sizeof(FFortMissionEventName) == 0x000010, "Wrong size on FFortMissionEventName");

// ScriptStruct FortniteGame.FortCatalogMetaPreload
// 0x0038 (0x0038 - 0x0000)
struct FFortCatalogMetaPreload final
{
public:
	TArray<TSoftObjectPtr<class UFortAccountItemDefinition>> ChaseItems;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortCardPackItemDefinition> PackDefinition;                                    // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCatalogMetaPreload) == 0x000008, "Wrong alignment on FFortCatalogMetaPreload");
static_assert(sizeof(FFortCatalogMetaPreload) == 0x000038, "Wrong size on FFortCatalogMetaPreload");
static_assert(offsetof(FFortCatalogMetaPreload, ChaseItems) == 0x000000, "Member 'FFortCatalogMetaPreload::ChaseItems' has a wrong offset!");
static_assert(offsetof(FFortCatalogMetaPreload, PackDefinition) == 0x000010, "Member 'FFortCatalogMetaPreload::PackDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.FortCatalogMeta
// 0x0018 (0x0018 - 0x0000)
struct FFortCatalogMeta final
{
public:
	TArray<class UFortAccountItemDefinition*>     ChaseItems;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFortCardPackItemDefinition*            PackDefinition;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCatalogMeta) == 0x000008, "Wrong alignment on FFortCatalogMeta");
static_assert(sizeof(FFortCatalogMeta) == 0x000018, "Wrong size on FFortCatalogMeta");
static_assert(offsetof(FFortCatalogMeta, ChaseItems) == 0x000000, "Member 'FFortCatalogMeta::ChaseItems' has a wrong offset!");
static_assert(offsetof(FFortCatalogMeta, PackDefinition) == 0x000010, "Member 'FFortCatalogMeta::PackDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestPackInfo
// 0x0038 (0x0038 - 0x0000)
struct FFortQuestPackInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultQuestPack;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxActiveDailyQuests;                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRerollsPerDay;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DaysToKeepClaimedQuests;                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DaysToKeepCompletedQuests;                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxUnclaimedQuests;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStreamingQuestPack;                              // 0x0034(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestPackInfo) == 0x000008, "Wrong alignment on FFortQuestPackInfo");
static_assert(sizeof(FFortQuestPackInfo) == 0x000038, "Wrong size on FFortQuestPackInfo");
static_assert(offsetof(FFortQuestPackInfo, Name) == 0x000000, "Member 'FFortQuestPackInfo::Name' has a wrong offset!");
static_assert(offsetof(FFortQuestPackInfo, DefaultQuestPack) == 0x000010, "Member 'FFortQuestPackInfo::DefaultQuestPack' has a wrong offset!");
static_assert(offsetof(FFortQuestPackInfo, MaxActiveDailyQuests) == 0x000020, "Member 'FFortQuestPackInfo::MaxActiveDailyQuests' has a wrong offset!");
static_assert(offsetof(FFortQuestPackInfo, MaxRerollsPerDay) == 0x000024, "Member 'FFortQuestPackInfo::MaxRerollsPerDay' has a wrong offset!");
static_assert(offsetof(FFortQuestPackInfo, DaysToKeepClaimedQuests) == 0x000028, "Member 'FFortQuestPackInfo::DaysToKeepClaimedQuests' has a wrong offset!");
static_assert(offsetof(FFortQuestPackInfo, DaysToKeepCompletedQuests) == 0x00002C, "Member 'FFortQuestPackInfo::DaysToKeepCompletedQuests' has a wrong offset!");
static_assert(offsetof(FFortQuestPackInfo, MaxUnclaimedQuests) == 0x000030, "Member 'FFortQuestPackInfo::MaxUnclaimedQuests' has a wrong offset!");
static_assert(offsetof(FFortQuestPackInfo, IsStreamingQuestPack) == 0x000034, "Member 'FFortQuestPackInfo::IsStreamingQuestPack' has a wrong offset!");

// ScriptStruct FortniteGame.FortLoginReward
// 0x0050 (0x0058 - 0x0008)
struct FFortLoginReward final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortAccountItemDefinition> ItemDefinition;                                    // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0038(0x0018)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsMajorReward;                                    // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLoginReward) == 0x000008, "Wrong alignment on FFortLoginReward");
static_assert(sizeof(FFortLoginReward) == 0x000058, "Wrong size on FFortLoginReward");
static_assert(offsetof(FFortLoginReward, ItemDefinition) == 0x000008, "Member 'FFortLoginReward::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortLoginReward, ItemCount) == 0x000030, "Member 'FFortLoginReward::ItemCount' has a wrong offset!");
static_assert(offsetof(FFortLoginReward, Description) == 0x000038, "Member 'FFortLoginReward::Description' has a wrong offset!");
static_assert(offsetof(FFortLoginReward, bIsMajorReward) == 0x000050, "Member 'FFortLoginReward::bIsMajorReward' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterSettingsFixedPace
// 0x0014 (0x0014 - 0x0000)
struct FFortEncounterSettingsFixedPace final
{
public:
	float                                         RiftSpawnInterval;                                 // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RiftSpawnCount;                                    // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AIMaxCount;                                        // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnAIIntervalTime;                               // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnAIIntervalCount;                              // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterSettingsFixedPace) == 0x000004, "Wrong alignment on FFortEncounterSettingsFixedPace");
static_assert(sizeof(FFortEncounterSettingsFixedPace) == 0x000014, "Wrong size on FFortEncounterSettingsFixedPace");
static_assert(offsetof(FFortEncounterSettingsFixedPace, RiftSpawnInterval) == 0x000000, "Member 'FFortEncounterSettingsFixedPace::RiftSpawnInterval' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettingsFixedPace, RiftSpawnCount) == 0x000004, "Member 'FFortEncounterSettingsFixedPace::RiftSpawnCount' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettingsFixedPace, AIMaxCount) == 0x000008, "Member 'FFortEncounterSettingsFixedPace::AIMaxCount' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettingsFixedPace, SpawnAIIntervalTime) == 0x00000C, "Member 'FFortEncounterSettingsFixedPace::SpawnAIIntervalTime' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettingsFixedPace, SpawnAIIntervalCount) == 0x000010, "Member 'FFortEncounterSettingsFixedPace::SpawnAIIntervalCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortDayPhaseCallbackHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FFortDayPhaseCallbackHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDayPhaseCallbackHandle) == 0x000004, "Wrong alignment on FFortDayPhaseCallbackHandle");
static_assert(sizeof(FFortDayPhaseCallbackHandle) == 0x000010, "Wrong size on FFortDayPhaseCallbackHandle");

// ScriptStruct FortniteGame.FortMultiSizeFont
// 0x01E0 (0x01E0 - 0x0000)
struct FFortMultiSizeFont final
{
public:
	struct FSlateFontInfo                         Font_XXS;                                          // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_XS;                                           // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_S;                                            // 0x00A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_M;                                            // 0x00F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_L;                                            // 0x0140(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_XL;                                           // 0x0190(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMultiSizeFont) == 0x000008, "Wrong alignment on FFortMultiSizeFont");
static_assert(sizeof(FFortMultiSizeFont) == 0x0001E0, "Wrong size on FFortMultiSizeFont");
static_assert(offsetof(FFortMultiSizeFont, Font_XXS) == 0x000000, "Member 'FFortMultiSizeFont::Font_XXS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_XS) == 0x000050, "Member 'FFortMultiSizeFont::Font_XS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_S) == 0x0000A0, "Member 'FFortMultiSizeFont::Font_S' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_M) == 0x0000F0, "Member 'FFortMultiSizeFont::Font_M' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_L) == 0x000140, "Member 'FFortMultiSizeFont::Font_L' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_XL) == 0x000190, "Member 'FFortMultiSizeFont::Font_XL' has a wrong offset!");

// ScriptStruct FortniteGame.SpecialActorStatData
// 0x0018 (0x0018 - 0x0000)
struct FSpecialActorStatData final
{
public:
	struct FGameplayTag                           CategoryTag;                                       // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSpecialActorSingleStatData>    Stats;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialActorStatData) == 0x000008, "Wrong alignment on FSpecialActorStatData");
static_assert(sizeof(FSpecialActorStatData) == 0x000018, "Wrong size on FSpecialActorStatData");
static_assert(offsetof(FSpecialActorStatData, CategoryTag) == 0x000000, "Member 'FSpecialActorStatData::CategoryTag' has a wrong offset!");
static_assert(offsetof(FSpecialActorStatData, Stats) == 0x000008, "Member 'FSpecialActorStatData::Stats' has a wrong offset!");

// ScriptStruct FortniteGame.FortVehicleAudioFloatParam
// 0x0028 (0x0028 - 0x0000)
struct FFortVehicleAudioFloatParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortVehicleAudioParam                 Data;                                              // 0x0008(0x0020)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortVehicleAudioFloatParam) == 0x000008, "Wrong alignment on FFortVehicleAudioFloatParam");
static_assert(sizeof(FFortVehicleAudioFloatParam) == 0x000028, "Wrong size on FFortVehicleAudioFloatParam");
static_assert(offsetof(FFortVehicleAudioFloatParam, Name) == 0x000000, "Member 'FFortVehicleAudioFloatParam::Name' has a wrong offset!");
static_assert(offsetof(FFortVehicleAudioFloatParam, Data) == 0x000008, "Member 'FFortVehicleAudioFloatParam::Data' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaVehicleSessionTelemetryInfo
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FFortAthenaVehicleSessionTelemetryInfo final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaVehicleSessionTelemetryInfo) == 0x000008, "Wrong alignment on FFortAthenaVehicleSessionTelemetryInfo");
static_assert(sizeof(FFortAthenaVehicleSessionTelemetryInfo) == 0x000050, "Wrong size on FFortAthenaVehicleSessionTelemetryInfo");

// ScriptStruct FortniteGame.SeatTransitionMontage
// 0x0010 (0x0010 - 0x0000)
struct FSeatTransitionMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromSeatIndex;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToSeatIndex;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSeatTransitionMontage) == 0x000008, "Wrong alignment on FSeatTransitionMontage");
static_assert(sizeof(FSeatTransitionMontage) == 0x000010, "Wrong size on FSeatTransitionMontage");
static_assert(offsetof(FSeatTransitionMontage, Montage) == 0x000000, "Member 'FSeatTransitionMontage::Montage' has a wrong offset!");
static_assert(offsetof(FSeatTransitionMontage, FromSeatIndex) == 0x000008, "Member 'FSeatTransitionMontage::FromSeatIndex' has a wrong offset!");
static_assert(offsetof(FSeatTransitionMontage, ToSeatIndex) == 0x00000C, "Member 'FSeatTransitionMontage::ToSeatIndex' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaCarPlayerSlot
// 0x00D8 (0x00D8 - 0x0000)
struct FAthenaCarPlayerSlot final
{
public:
	class FName                                   SeatSocket;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SeatChoiceSocket;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SeatIndicatorSocket;                               // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SeatChoiceDisplayText;                             // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FName                                   SeatCollision;                                     // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExitSockets;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAthenaVehicleShootingCone             ShootingCone;                                      // 0x0048(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundOnEnter;                                      // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundOnExit;                                       // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsSelectable : 1;                                 // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseGroundMotion : 1;                              // 0x0060(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseVehicleIsOnGround : 1;                         // 0x0060(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanEmote : 1;                                     // 0x0060(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceCrouch : 1;                                  // 0x0060(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActorSpaceCameraOffset;                            // 0x0064(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VehicleSpaceCameraOffset;                          // 0x0070(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeCompensationCameraOffset;                     // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandingFiringOffset;                              // 0x0080(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchingFiringOffset;                             // 0x008C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EmoteOffset;                                       // 0x0098(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        Player;                                            // 0x00A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerControllerZone*              Controller;                                        // 0x00B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerEntryTime;                                   // 0x00B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnterSeatTime;                                     // 0x00BC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConstrainPawnToSeatTransform;                     // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOffsetPlayerRelativeAttachLocation;               // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseExitTimer;                                     // 0x00C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortVehicleSeatWeaponComponent*        WeaponComponent;                                   // 0x00C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraPitchConstraint;                             // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraYawConstraint;                               // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaCarPlayerSlot) == 0x000008, "Wrong alignment on FAthenaCarPlayerSlot");
static_assert(sizeof(FAthenaCarPlayerSlot) == 0x0000D8, "Wrong size on FAthenaCarPlayerSlot");
static_assert(offsetof(FAthenaCarPlayerSlot, SeatSocket) == 0x000000, "Member 'FAthenaCarPlayerSlot::SeatSocket' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, SeatChoiceSocket) == 0x000008, "Member 'FAthenaCarPlayerSlot::SeatChoiceSocket' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, SeatIndicatorSocket) == 0x000010, "Member 'FAthenaCarPlayerSlot::SeatIndicatorSocket' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, SeatChoiceDisplayText) == 0x000018, "Member 'FAthenaCarPlayerSlot::SeatChoiceDisplayText' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, SeatCollision) == 0x000030, "Member 'FAthenaCarPlayerSlot::SeatCollision' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, ExitSockets) == 0x000038, "Member 'FAthenaCarPlayerSlot::ExitSockets' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, ShootingCone) == 0x000048, "Member 'FAthenaCarPlayerSlot::ShootingCone' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, SoundOnEnter) == 0x000050, "Member 'FAthenaCarPlayerSlot::SoundOnEnter' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, SoundOnExit) == 0x000058, "Member 'FAthenaCarPlayerSlot::SoundOnExit' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, ActorSpaceCameraOffset) == 0x000064, "Member 'FAthenaCarPlayerSlot::ActorSpaceCameraOffset' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, VehicleSpaceCameraOffset) == 0x000070, "Member 'FAthenaCarPlayerSlot::VehicleSpaceCameraOffset' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, SlopeCompensationCameraOffset) == 0x00007C, "Member 'FAthenaCarPlayerSlot::SlopeCompensationCameraOffset' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, StandingFiringOffset) == 0x000080, "Member 'FAthenaCarPlayerSlot::StandingFiringOffset' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, CrouchingFiringOffset) == 0x00008C, "Member 'FAthenaCarPlayerSlot::CrouchingFiringOffset' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, EmoteOffset) == 0x000098, "Member 'FAthenaCarPlayerSlot::EmoteOffset' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, Player) == 0x0000A8, "Member 'FAthenaCarPlayerSlot::Player' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, Controller) == 0x0000B0, "Member 'FAthenaCarPlayerSlot::Controller' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, PlayerEntryTime) == 0x0000B8, "Member 'FAthenaCarPlayerSlot::PlayerEntryTime' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, EnterSeatTime) == 0x0000BC, "Member 'FAthenaCarPlayerSlot::EnterSeatTime' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, bConstrainPawnToSeatTransform) == 0x0000C0, "Member 'FAthenaCarPlayerSlot::bConstrainPawnToSeatTransform' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, bOffsetPlayerRelativeAttachLocation) == 0x0000C1, "Member 'FAthenaCarPlayerSlot::bOffsetPlayerRelativeAttachLocation' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, bUseExitTimer) == 0x0000C2, "Member 'FAthenaCarPlayerSlot::bUseExitTimer' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, WeaponComponent) == 0x0000C8, "Member 'FAthenaCarPlayerSlot::WeaponComponent' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, CameraPitchConstraint) == 0x0000D0, "Member 'FAthenaCarPlayerSlot::CameraPitchConstraint' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, CameraYawConstraint) == 0x0000D4, "Member 'FAthenaCarPlayerSlot::CameraYawConstraint' has a wrong offset!");

// ScriptStruct FortniteGame.VisibiltyInfoArray
// 0x0010 (0x0118 - 0x0108)
struct FVisibiltyInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FVisibilityInfo>                VisibilityInfoArray;                               // 0x0108(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVisibiltyInfoArray) == 0x000008, "Wrong alignment on FVisibiltyInfoArray");
static_assert(sizeof(FVisibiltyInfoArray) == 0x000118, "Wrong size on FVisibiltyInfoArray");
static_assert(offsetof(FVisibiltyInfoArray, VisibilityInfoArray) == 0x000108, "Member 'FVisibiltyInfoArray::VisibilityInfoArray' has a wrong offset!");

// ScriptStruct FortniteGame.VolumeActorStats
// 0x0050 (0x0050 - 0x0000)
struct FVolumeActorStats final
{
public:
	TMap<EFortBuildingType, int32>                BuildingTypeCounts;                                // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVolumeActorStats) == 0x000008, "Wrong alignment on FVolumeActorStats");
static_assert(sizeof(FVolumeActorStats) == 0x000050, "Wrong size on FVolumeActorStats");
static_assert(offsetof(FVolumeActorStats, BuildingTypeCounts) == 0x000000, "Member 'FVolumeActorStats::BuildingTypeCounts' has a wrong offset!");

// ScriptStruct FortniteGame.PendingSpawnLevelSaveRecord
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FPendingSpawnLevelSaveRecord final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPendingSpawnLevelSaveRecord) == 0x000004, "Wrong alignment on FPendingSpawnLevelSaveRecord");
static_assert(sizeof(FPendingSpawnLevelSaveRecord) == 0x00000C, "Wrong size on FPendingSpawnLevelSaveRecord");

// ScriptStruct FortniteGame.FortVolumeActiveUsers
// 0x0018 (0x0120 - 0x0108)
struct FFortVolumeActiveUsers final : public FFastArraySerializer
{
public:
	TArray<struct FVolumePlayerStateInfo>         Items;                                             // 0x0108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class AFortVolumeManager*                     Manager;                                           // 0x0118(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortVolumeActiveUsers) == 0x000008, "Wrong alignment on FFortVolumeActiveUsers");
static_assert(sizeof(FFortVolumeActiveUsers) == 0x000120, "Wrong size on FFortVolumeActiveUsers");
static_assert(offsetof(FFortVolumeActiveUsers, Items) == 0x000108, "Member 'FFortVolumeActiveUsers::Items' has a wrong offset!");
static_assert(offsetof(FFortVolumeActiveUsers, Manager) == 0x000118, "Member 'FFortVolumeActiveUsers::Manager' has a wrong offset!");

// ScriptStruct FortniteGame.WeaponHudData
// 0x0030 (0x0030 - 0x0000)
struct FWeaponHudData final
{
public:
	class FName                                   KeyActionName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GamepadActionName;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ActionDescription;                                 // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponHudData) == 0x000008, "Wrong alignment on FWeaponHudData");
static_assert(sizeof(FWeaponHudData) == 0x000030, "Wrong size on FWeaponHudData");
static_assert(offsetof(FWeaponHudData, KeyActionName) == 0x000000, "Member 'FWeaponHudData::KeyActionName' has a wrong offset!");
static_assert(offsetof(FWeaponHudData, GamepadActionName) == 0x000008, "Member 'FWeaponHudData::GamepadActionName' has a wrong offset!");
static_assert(offsetof(FWeaponHudData, ActionDescription) == 0x000010, "Member 'FWeaponHudData::ActionDescription' has a wrong offset!");
static_assert(offsetof(FWeaponHudData, bVisible) == 0x000028, "Member 'FWeaponHudData::bVisible' has a wrong offset!");

// ScriptStruct FortniteGame.FortRangedWeaponStats
// 0x0178 (0x02B0 - 0x0138)
struct FFortRangedWeaponStats final : public FFortBaseWeaponStats
{
public:
	float                                         Spread;                                            // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpreadDownsights;                                  // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StandingStillSpreadMultiplier;                     // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaCrouchingSpreadMultiplier;                   // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaJumpingFallingSpreadMultiplier;              // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaSprintingSpreadMultiplier;                   // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinSpeedForSpreadMultiplier;                       // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSpeedForSpreadMultiplier;                       // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpreadDownsightsAdditionalCooldownTime;            // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatX1;                                            // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatY1;                                            // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatX2;                                            // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatY2;                                            // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatX3;                                            // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatY3;                                            // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatXScale;                                        // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatYScale;                                        // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolX1;                                            // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolY1;                                            // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolX2;                                            // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolY2;                                            // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolX3;                                            // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolY3;                                            // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolXScale;                                        // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolYScale;                                        // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PerfectAimCooldown;                                // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BulletsPerCartridge;                               // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FiringRate;                                        // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ROFScale;                                          // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BurstFiringRate;                                   // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FiringRateDownsightsMultiplier;                    // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutofireRange;                                     // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutofireAcquisitionDelay;                          // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutofireAcquisitionRechargeTime;                   // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutofireReleaseTime;                               // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutofireCooldown;                                  // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilVert;                                        // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilVertScale;                                   // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilVertScaleGamepad;                            // 0x01D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VertRecoilDownChance;                              // 0x01D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilHoriz;                                       // 0x01D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilHorizScale;                                  // 0x01DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilHorizScaleGamepad;                           // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilInterpSpeed;                                 // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilRecoveryInterpSpeed;                         // 0x01E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilRecoveryDelay;                               // 0x01EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilRecoveryFraction;                            // 0x01F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilDownsightsMultiplier;                        // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilMagnitudeMin;                          // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilMagnitudeMax;                          // 0x01FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilMagnitudeScale;                        // 0x0200(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilAngleMin;                              // 0x0204(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilAngleMax;                              // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilRollMagnitudeMin;                      // 0x020C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilRollMagnitudeMax;                      // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilInterpSpeed;                           // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilRecoveryInterpSpeed;                   // 0x0218(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilDownsightsMultiplier;                  // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilHipFireMultiplier;                     // 0x0220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaAimAssistRange;                              // 0x0224(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ADSTransitionInTime;                               // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ADSTransitionOutTime;                              // 0x022C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSpareAmmo;                                      // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BulletsPerTracer;                                  // 0x0234(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIDelayBeforeFiringMin;                            // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIDelayBeforeFiringMax;                            // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIFireDurationMin;                                 // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIFireDurationMax;                                 // 0x0244(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIMinSpreadDuration;                               // 0x0248(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIMaxSpreadDuration;                               // 0x024C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIDurationSpreadMultiplier;                        // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIAdditionalSpreadForTargetMovingLaterally;        // 0x0254(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIAthenaHearFiringNoiseRange;                      // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EQSDensity;                                        // 0x025C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinApproachRange;                                  // 0x0260(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinActualRange;                                    // 0x0264(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinPreferredRange;                                 // 0x0268(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinPreferredRangeEQS;                              // 0x026C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxPreferredRangeEQS;                              // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxPreferredRange;                                 // 0x0274(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxActualRange;                                    // 0x0278(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxApproachRange;                                  // 0x027C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RangeToAutomaticallyAddEnemyPawnGoals;             // 0x0280(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SweepRadius;                                       // 0x0284(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoReloadDelayOverride;                           // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OverheatingMaxValue;                               // 0x028C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OverheatHeatingValue;                              // 0x0290(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OverheatingCoolingValue;                           // 0x0294(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatingCooldownDelay;                              // 0x0298(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OverheatedCooldownDelay;                           // 0x029C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FortHomingTurnSpeedMin;                            // 0x02A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FortHomingTurnSpeedMax;                            // 0x02A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FortHomingTimeUntilMaxTurnSpeed;                   // 0x02A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRangedWeaponStats) == 0x000008, "Wrong alignment on FFortRangedWeaponStats");
static_assert(sizeof(FFortRangedWeaponStats) == 0x0002B0, "Wrong size on FFortRangedWeaponStats");
static_assert(offsetof(FFortRangedWeaponStats, Spread) == 0x000138, "Member 'FFortRangedWeaponStats::Spread' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, SpreadDownsights) == 0x00013C, "Member 'FFortRangedWeaponStats::SpreadDownsights' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, StandingStillSpreadMultiplier) == 0x000140, "Member 'FFortRangedWeaponStats::StandingStillSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaCrouchingSpreadMultiplier) == 0x000144, "Member 'FFortRangedWeaponStats::AthenaCrouchingSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaJumpingFallingSpreadMultiplier) == 0x000148, "Member 'FFortRangedWeaponStats::AthenaJumpingFallingSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaSprintingSpreadMultiplier) == 0x00014C, "Member 'FFortRangedWeaponStats::AthenaSprintingSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MinSpeedForSpreadMultiplier) == 0x000150, "Member 'FFortRangedWeaponStats::MinSpeedForSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxSpeedForSpreadMultiplier) == 0x000154, "Member 'FFortRangedWeaponStats::MaxSpeedForSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, SpreadDownsightsAdditionalCooldownTime) == 0x000158, "Member 'FFortRangedWeaponStats::SpreadDownsightsAdditionalCooldownTime' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatX1) == 0x00015C, "Member 'FFortRangedWeaponStats::HeatX1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatY1) == 0x000160, "Member 'FFortRangedWeaponStats::HeatY1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatX2) == 0x000164, "Member 'FFortRangedWeaponStats::HeatX2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatY2) == 0x000168, "Member 'FFortRangedWeaponStats::HeatY2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatX3) == 0x00016C, "Member 'FFortRangedWeaponStats::HeatX3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatY3) == 0x000170, "Member 'FFortRangedWeaponStats::HeatY3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatXScale) == 0x000174, "Member 'FFortRangedWeaponStats::HeatXScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatYScale) == 0x000178, "Member 'FFortRangedWeaponStats::HeatYScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolX1) == 0x00017C, "Member 'FFortRangedWeaponStats::CoolX1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolY1) == 0x000180, "Member 'FFortRangedWeaponStats::CoolY1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolX2) == 0x000184, "Member 'FFortRangedWeaponStats::CoolX2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolY2) == 0x000188, "Member 'FFortRangedWeaponStats::CoolY2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolX3) == 0x00018C, "Member 'FFortRangedWeaponStats::CoolX3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolY3) == 0x000190, "Member 'FFortRangedWeaponStats::CoolY3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolXScale) == 0x000194, "Member 'FFortRangedWeaponStats::CoolXScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolYScale) == 0x000198, "Member 'FFortRangedWeaponStats::CoolYScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, PerfectAimCooldown) == 0x00019C, "Member 'FFortRangedWeaponStats::PerfectAimCooldown' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, BulletsPerCartridge) == 0x0001A0, "Member 'FFortRangedWeaponStats::BulletsPerCartridge' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, FiringRate) == 0x0001A4, "Member 'FFortRangedWeaponStats::FiringRate' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, ROFScale) == 0x0001A8, "Member 'FFortRangedWeaponStats::ROFScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, BurstFiringRate) == 0x0001AC, "Member 'FFortRangedWeaponStats::BurstFiringRate' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, FiringRateDownsightsMultiplier) == 0x0001B0, "Member 'FFortRangedWeaponStats::FiringRateDownsightsMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AutofireRange) == 0x0001B4, "Member 'FFortRangedWeaponStats::AutofireRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AutofireAcquisitionDelay) == 0x0001B8, "Member 'FFortRangedWeaponStats::AutofireAcquisitionDelay' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AutofireAcquisitionRechargeTime) == 0x0001BC, "Member 'FFortRangedWeaponStats::AutofireAcquisitionRechargeTime' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AutofireReleaseTime) == 0x0001C0, "Member 'FFortRangedWeaponStats::AutofireReleaseTime' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AutofireCooldown) == 0x0001C4, "Member 'FFortRangedWeaponStats::AutofireCooldown' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilVert) == 0x0001C8, "Member 'FFortRangedWeaponStats::RecoilVert' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilVertScale) == 0x0001CC, "Member 'FFortRangedWeaponStats::RecoilVertScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilVertScaleGamepad) == 0x0001D0, "Member 'FFortRangedWeaponStats::RecoilVertScaleGamepad' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, VertRecoilDownChance) == 0x0001D4, "Member 'FFortRangedWeaponStats::VertRecoilDownChance' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilHoriz) == 0x0001D8, "Member 'FFortRangedWeaponStats::RecoilHoriz' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilHorizScale) == 0x0001DC, "Member 'FFortRangedWeaponStats::RecoilHorizScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilHorizScaleGamepad) == 0x0001E0, "Member 'FFortRangedWeaponStats::RecoilHorizScaleGamepad' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilInterpSpeed) == 0x0001E4, "Member 'FFortRangedWeaponStats::RecoilInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilRecoveryInterpSpeed) == 0x0001E8, "Member 'FFortRangedWeaponStats::RecoilRecoveryInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilRecoveryDelay) == 0x0001EC, "Member 'FFortRangedWeaponStats::RecoilRecoveryDelay' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilRecoveryFraction) == 0x0001F0, "Member 'FFortRangedWeaponStats::RecoilRecoveryFraction' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilDownsightsMultiplier) == 0x0001F4, "Member 'FFortRangedWeaponStats::RecoilDownsightsMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilMagnitudeMin) == 0x0001F8, "Member 'FFortRangedWeaponStats::AthenaRecoilMagnitudeMin' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilMagnitudeMax) == 0x0001FC, "Member 'FFortRangedWeaponStats::AthenaRecoilMagnitudeMax' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilMagnitudeScale) == 0x000200, "Member 'FFortRangedWeaponStats::AthenaRecoilMagnitudeScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilAngleMin) == 0x000204, "Member 'FFortRangedWeaponStats::AthenaRecoilAngleMin' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilAngleMax) == 0x000208, "Member 'FFortRangedWeaponStats::AthenaRecoilAngleMax' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilRollMagnitudeMin) == 0x00020C, "Member 'FFortRangedWeaponStats::AthenaRecoilRollMagnitudeMin' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilRollMagnitudeMax) == 0x000210, "Member 'FFortRangedWeaponStats::AthenaRecoilRollMagnitudeMax' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilInterpSpeed) == 0x000214, "Member 'FFortRangedWeaponStats::AthenaRecoilInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilRecoveryInterpSpeed) == 0x000218, "Member 'FFortRangedWeaponStats::AthenaRecoilRecoveryInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilDownsightsMultiplier) == 0x00021C, "Member 'FFortRangedWeaponStats::AthenaRecoilDownsightsMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilHipFireMultiplier) == 0x000220, "Member 'FFortRangedWeaponStats::AthenaRecoilHipFireMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaAimAssistRange) == 0x000224, "Member 'FFortRangedWeaponStats::AthenaAimAssistRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, ADSTransitionInTime) == 0x000228, "Member 'FFortRangedWeaponStats::ADSTransitionInTime' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, ADSTransitionOutTime) == 0x00022C, "Member 'FFortRangedWeaponStats::ADSTransitionOutTime' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxSpareAmmo) == 0x000230, "Member 'FFortRangedWeaponStats::MaxSpareAmmo' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, BulletsPerTracer) == 0x000234, "Member 'FFortRangedWeaponStats::BulletsPerTracer' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIDelayBeforeFiringMin) == 0x000238, "Member 'FFortRangedWeaponStats::AIDelayBeforeFiringMin' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIDelayBeforeFiringMax) == 0x00023C, "Member 'FFortRangedWeaponStats::AIDelayBeforeFiringMax' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIFireDurationMin) == 0x000240, "Member 'FFortRangedWeaponStats::AIFireDurationMin' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIFireDurationMax) == 0x000244, "Member 'FFortRangedWeaponStats::AIFireDurationMax' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIMinSpreadDuration) == 0x000248, "Member 'FFortRangedWeaponStats::AIMinSpreadDuration' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIMaxSpreadDuration) == 0x00024C, "Member 'FFortRangedWeaponStats::AIMaxSpreadDuration' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIDurationSpreadMultiplier) == 0x000250, "Member 'FFortRangedWeaponStats::AIDurationSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIAdditionalSpreadForTargetMovingLaterally) == 0x000254, "Member 'FFortRangedWeaponStats::AIAdditionalSpreadForTargetMovingLaterally' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIAthenaHearFiringNoiseRange) == 0x000258, "Member 'FFortRangedWeaponStats::AIAthenaHearFiringNoiseRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, EQSDensity) == 0x00025C, "Member 'FFortRangedWeaponStats::EQSDensity' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MinApproachRange) == 0x000260, "Member 'FFortRangedWeaponStats::MinApproachRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MinActualRange) == 0x000264, "Member 'FFortRangedWeaponStats::MinActualRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MinPreferredRange) == 0x000268, "Member 'FFortRangedWeaponStats::MinPreferredRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MinPreferredRangeEQS) == 0x00026C, "Member 'FFortRangedWeaponStats::MinPreferredRangeEQS' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxPreferredRangeEQS) == 0x000270, "Member 'FFortRangedWeaponStats::MaxPreferredRangeEQS' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxPreferredRange) == 0x000274, "Member 'FFortRangedWeaponStats::MaxPreferredRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxActualRange) == 0x000278, "Member 'FFortRangedWeaponStats::MaxActualRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxApproachRange) == 0x00027C, "Member 'FFortRangedWeaponStats::MaxApproachRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RangeToAutomaticallyAddEnemyPawnGoals) == 0x000280, "Member 'FFortRangedWeaponStats::RangeToAutomaticallyAddEnemyPawnGoals' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, SweepRadius) == 0x000284, "Member 'FFortRangedWeaponStats::SweepRadius' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AutoReloadDelayOverride) == 0x000288, "Member 'FFortRangedWeaponStats::AutoReloadDelayOverride' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, OverheatingMaxValue) == 0x00028C, "Member 'FFortRangedWeaponStats::OverheatingMaxValue' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, OverheatHeatingValue) == 0x000290, "Member 'FFortRangedWeaponStats::OverheatHeatingValue' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, OverheatingCoolingValue) == 0x000294, "Member 'FFortRangedWeaponStats::OverheatingCoolingValue' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatingCooldownDelay) == 0x000298, "Member 'FFortRangedWeaponStats::HeatingCooldownDelay' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, OverheatedCooldownDelay) == 0x00029C, "Member 'FFortRangedWeaponStats::OverheatedCooldownDelay' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, FortHomingTurnSpeedMin) == 0x0002A0, "Member 'FFortRangedWeaponStats::FortHomingTurnSpeedMin' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, FortHomingTurnSpeedMax) == 0x0002A4, "Member 'FFortRangedWeaponStats::FortHomingTurnSpeedMax' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, FortHomingTimeUntilMaxTurnSpeed) == 0x0002A8, "Member 'FFortRangedWeaponStats::FortHomingTimeUntilMaxTurnSpeed' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindImpulseRadius
// 0x004C (0x004C - 0x0000)
struct FFortWindImpulseRadius final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentRadius;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreviousRadius;                                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Magnitude;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentMagnitude;                                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreviousMagnitude;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlendTime;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentBlendTime;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox                                   WorldBounds;                                       // 0x002C(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortWindImpulseHandle                 Handle;                                            // 0x0048(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortWindImpulseRadius) == 0x000004, "Wrong alignment on FFortWindImpulseRadius");
static_assert(sizeof(FFortWindImpulseRadius) == 0x00004C, "Wrong size on FFortWindImpulseRadius");
static_assert(offsetof(FFortWindImpulseRadius, Location) == 0x000000, "Member 'FFortWindImpulseRadius::Location' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, Radius) == 0x00000C, "Member 'FFortWindImpulseRadius::Radius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, CurrentRadius) == 0x000010, "Member 'FFortWindImpulseRadius::CurrentRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, PreviousRadius) == 0x000014, "Member 'FFortWindImpulseRadius::PreviousRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, Magnitude) == 0x000018, "Member 'FFortWindImpulseRadius::Magnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, CurrentMagnitude) == 0x00001C, "Member 'FFortWindImpulseRadius::CurrentMagnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, PreviousMagnitude) == 0x000020, "Member 'FFortWindImpulseRadius::PreviousMagnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, BlendTime) == 0x000024, "Member 'FFortWindImpulseRadius::BlendTime' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, CurrentBlendTime) == 0x000028, "Member 'FFortWindImpulseRadius::CurrentBlendTime' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, WorldBounds) == 0x00002C, "Member 'FFortWindImpulseRadius::WorldBounds' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, Handle) == 0x000048, "Member 'FFortWindImpulseRadius::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindImpulseCylinderRadial
// 0x003C (0x003C - 0x0000)
struct FFortWindImpulseCylinderRadial
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InnerRadius;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OuterRadius;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Magnitude;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox                                   WorldBounds;                                       // 0x0018(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsChanging;                                       // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsChangePending;                                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortWindImpulseHandle                 Handle;                                            // 0x0038(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortWindImpulseCylinderRadial) == 0x000004, "Wrong alignment on FFortWindImpulseCylinderRadial");
static_assert(sizeof(FFortWindImpulseCylinderRadial) == 0x00003C, "Wrong size on FFortWindImpulseCylinderRadial");
static_assert(offsetof(FFortWindImpulseCylinderRadial, Location) == 0x000000, "Member 'FFortWindImpulseCylinderRadial::Location' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, InnerRadius) == 0x00000C, "Member 'FFortWindImpulseCylinderRadial::InnerRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, OuterRadius) == 0x000010, "Member 'FFortWindImpulseCylinderRadial::OuterRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, Magnitude) == 0x000014, "Member 'FFortWindImpulseCylinderRadial::Magnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, WorldBounds) == 0x000018, "Member 'FFortWindImpulseCylinderRadial::WorldBounds' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, bIsChanging) == 0x000034, "Member 'FFortWindImpulseCylinderRadial::bIsChanging' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, bIsChangePending) == 0x000035, "Member 'FFortWindImpulseCylinderRadial::bIsChangePending' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, Handle) == 0x000038, "Member 'FFortWindImpulseCylinderRadial::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindImpulseCylinder
// 0x000C (0x0048 - 0x003C)
struct FFortWindImpulseCylinder final : public FFortWindImpulseCylinderRadial
{
public:
	struct FVector                                WindDirection;                                     // 0x003C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortWindImpulseCylinder) == 0x000004, "Wrong alignment on FFortWindImpulseCylinder");
static_assert(sizeof(FFortWindImpulseCylinder) == 0x000048, "Wrong size on FFortWindImpulseCylinder");
static_assert(offsetof(FFortWindImpulseCylinder, WindDirection) == 0x00003C, "Member 'FFortWindImpulseCylinder::WindDirection' has a wrong offset!");

// ScriptStruct FortniteGame.FortDeferredNewActorData
// 0x0010 (0x0010 - 0x0000)
struct FFortDeferredNewActorData final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SavedLevelIndex;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDeferredNewActorData) == 0x000008, "Wrong alignment on FFortDeferredNewActorData");
static_assert(sizeof(FFortDeferredNewActorData) == 0x000010, "Wrong size on FFortDeferredNewActorData");
static_assert(offsetof(FFortDeferredNewActorData, BuildingActor) == 0x000000, "Member 'FFortDeferredNewActorData::BuildingActor' has a wrong offset!");
static_assert(offsetof(FFortDeferredNewActorData, SavedLevelIndex) == 0x000008, "Member 'FFortDeferredNewActorData::SavedLevelIndex' has a wrong offset!");

// ScriptStruct FortniteGame.WorldTileSubArray
// 0x0010 (0x0010 - 0x0000)
struct FWorldTileSubArray final
{
public:
	TArray<class AWorldTileFoundation*>           X;                                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldTileSubArray) == 0x000008, "Wrong alignment on FWorldTileSubArray");
static_assert(sizeof(FWorldTileSubArray) == 0x000010, "Wrong size on FWorldTileSubArray");
static_assert(offsetof(FWorldTileSubArray, X) == 0x000000, "Member 'FWorldTileSubArray::X' has a wrong offset!");

// ScriptStruct FortniteGame.FortLevelStreamingInfo
// 0x000C (0x000C - 0x0000)
struct FFortLevelStreamingInfo final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortLevelStreamingState                      LevelState;                                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFailedToLoad;                                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLevelStreamingInfo) == 0x000004, "Wrong alignment on FFortLevelStreamingInfo");
static_assert(sizeof(FFortLevelStreamingInfo) == 0x00000C, "Wrong size on FFortLevelStreamingInfo");
static_assert(offsetof(FFortLevelStreamingInfo, PackageName) == 0x000000, "Member 'FFortLevelStreamingInfo::PackageName' has a wrong offset!");
static_assert(offsetof(FFortLevelStreamingInfo, LevelState) == 0x000008, "Member 'FFortLevelStreamingInfo::LevelState' has a wrong offset!");
static_assert(offsetof(FFortLevelStreamingInfo, bFailedToLoad) == 0x000009, "Member 'FFortLevelStreamingInfo::bFailedToLoad' has a wrong offset!");

// ScriptStruct FortniteGame.StatRecord
// 0x000C (0x000C - 0x0000)
struct FStatRecord final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatRecord) == 0x000004, "Wrong alignment on FStatRecord");
static_assert(sizeof(FStatRecord) == 0x00000C, "Wrong size on FStatRecord");
static_assert(offsetof(FStatRecord, StatName) == 0x000000, "Member 'FStatRecord::StatName' has a wrong offset!");
static_assert(offsetof(FStatRecord, StatValue) == 0x000008, "Member 'FStatRecord::StatValue' has a wrong offset!");

// ScriptStruct FortniteGame.StatManagerPeriodRecord
// 0x0010 (0x0010 - 0x0000)
struct FStatManagerPeriodRecord final
{
public:
	TArray<struct FStatRecord>                    StatRecords;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatManagerPeriodRecord) == 0x000008, "Wrong alignment on FStatManagerPeriodRecord");
static_assert(sizeof(FStatManagerPeriodRecord) == 0x000010, "Wrong size on FStatManagerPeriodRecord");
static_assert(offsetof(FStatManagerPeriodRecord, StatRecords) == 0x000000, "Member 'FStatManagerPeriodRecord::StatRecords' has a wrong offset!");

// ScriptStruct FortniteGame.PinnedSchematicsRecord
// 0x0010 (0x0010 - 0x0000)
struct FPinnedSchematicsRecord final
{
public:
	TArray<class FString>                         PinnedSchematicInstances;                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPinnedSchematicsRecord) == 0x000008, "Wrong alignment on FPinnedSchematicsRecord");
static_assert(sizeof(FPinnedSchematicsRecord) == 0x000010, "Wrong size on FPinnedSchematicsRecord");
static_assert(offsetof(FPinnedSchematicsRecord, PinnedSchematicInstances) == 0x000000, "Member 'FPinnedSchematicsRecord::PinnedSchematicInstances' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerRecord
// 0x00E0 (0x00E0 - 0x0000)
struct FFortPlayerRecord final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BackpackData;                                      // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPlayerIsNew;                                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerStatsRecord                     PlayerStatsData;                                   // 0x0034(0x0088)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStatManagerPeriodRecord               CampaignPeriodRecord;                              // 0x00C0(0x0010)(NativeAccessSpecifierPublic)
	struct FPinnedSchematicsRecord                PinnedSchematicsRecord;                            // 0x00D0(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerRecord) == 0x000008, "Wrong alignment on FFortPlayerRecord");
static_assert(sizeof(FFortPlayerRecord) == 0x0000E0, "Wrong size on FFortPlayerRecord");
static_assert(offsetof(FFortPlayerRecord, DisplayName) == 0x000000, "Member 'FFortPlayerRecord::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, UniqueId) == 0x000010, "Member 'FFortPlayerRecord::UniqueId' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, BackpackData) == 0x000020, "Member 'FFortPlayerRecord::BackpackData' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, bPlayerIsNew) == 0x000030, "Member 'FFortPlayerRecord::bPlayerIsNew' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, PlayerStatsData) == 0x000034, "Member 'FFortPlayerRecord::PlayerStatsData' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, CampaignPeriodRecord) == 0x0000C0, "Member 'FFortPlayerRecord::CampaignPeriodRecord' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, PinnedSchematicsRecord) == 0x0000D0, "Member 'FFortPlayerRecord::PinnedSchematicsRecord' has a wrong offset!");

// ScriptStruct FortniteGame.MapLocationRenderData
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x08) FMapLocationRenderData final
{
public:
	uint8                                         Pad_0[0xC0];                                       // 0x0000(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapLocationRenderData) == 0x000008, "Wrong alignment on FMapLocationRenderData");
static_assert(sizeof(FMapLocationRenderData) == 0x0000C0, "Wrong size on FMapLocationRenderData");

// ScriptStruct FortniteGame.MapLocation
// 0x0088 (0x0088 - 0x0000)
struct FMapLocation final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0020(0x0050)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0070(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LocationTag;                                       // 0x0080(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapLocation) == 0x000008, "Wrong alignment on FMapLocation");
static_assert(sizeof(FMapLocation) == 0x000088, "Wrong size on FMapLocation");
static_assert(offsetof(FMapLocation, Text) == 0x000000, "Member 'FMapLocation::Text' has a wrong offset!");
static_assert(offsetof(FMapLocation, Position) == 0x000018, "Member 'FMapLocation::Position' has a wrong offset!");
static_assert(offsetof(FMapLocation, Font) == 0x000020, "Member 'FMapLocation::Font' has a wrong offset!");
static_assert(offsetof(FMapLocation, Color) == 0x000070, "Member 'FMapLocation::Color' has a wrong offset!");
static_assert(offsetof(FMapLocation, LocationTag) == 0x000080, "Member 'FMapLocation::LocationTag' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneStats
// 0x0190 (0x0190 - 0x0000)
struct alignas(0x08) FFortZoneStats final
{
public:
	uint8                                         Pad_0[0x190];                                      // 0x0000(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortZoneStats) == 0x000008, "Wrong alignment on FFortZoneStats");
static_assert(sizeof(FFortZoneStats) == 0x000190, "Wrong size on FFortZoneStats");

// ScriptStruct FortniteGame.ContainerStatInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FContainerStatInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContainerStatInfo) == 0x000004, "Wrong alignment on FContainerStatInfo");
static_assert(sizeof(FContainerStatInfo) == 0x00000C, "Wrong size on FContainerStatInfo");

// ScriptStruct FortniteGame.FortLevelRecord
// 0x0040 (0x0040 - 0x0000)
struct FFortLevelRecord final
{
public:
	int32                                         ParentLevelIndex;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BoundActorGuid;                                    // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PackageName;                                       // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortActorRecord>               SavedActors;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         X_Loc;                                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y_Loc;                                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rotation;                                          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLevelRecord) == 0x000008, "Wrong alignment on FFortLevelRecord");
static_assert(sizeof(FFortLevelRecord) == 0x000040, "Wrong size on FFortLevelRecord");
static_assert(offsetof(FFortLevelRecord, ParentLevelIndex) == 0x000000, "Member 'FFortLevelRecord::ParentLevelIndex' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, BoundActorGuid) == 0x000004, "Member 'FFortLevelRecord::BoundActorGuid' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, PackageName) == 0x000014, "Member 'FFortLevelRecord::PackageName' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, SavedActors) == 0x000020, "Member 'FFortLevelRecord::SavedActors' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, X_Loc) == 0x000030, "Member 'FFortLevelRecord::X_Loc' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, Y_Loc) == 0x000034, "Member 'FFortLevelRecord::Y_Loc' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, Rotation) == 0x000038, "Member 'FFortLevelRecord::Rotation' has a wrong offset!");

// ScriptStruct FortniteGame.ZoneThemeDifficultyProperties
// 0x0068 (0x0068 - 0x0000)
struct FZoneThemeDifficultyProperties final
{
public:
	TArray<struct FDataTableRowHandle>            ValidDifficulties;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortTimeOfDayTheme                    TimeOfDayTheme;                                    // 0x0010(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortGlobalWindInfo                    GlobalWindInfo;                                    // 0x0050(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneThemeDifficultyProperties) == 0x000008, "Wrong alignment on FZoneThemeDifficultyProperties");
static_assert(sizeof(FZoneThemeDifficultyProperties) == 0x000068, "Wrong size on FZoneThemeDifficultyProperties");
static_assert(offsetof(FZoneThemeDifficultyProperties, ValidDifficulties) == 0x000000, "Member 'FZoneThemeDifficultyProperties::ValidDifficulties' has a wrong offset!");
static_assert(offsetof(FZoneThemeDifficultyProperties, TimeOfDayTheme) == 0x000010, "Member 'FZoneThemeDifficultyProperties::TimeOfDayTheme' has a wrong offset!");
static_assert(offsetof(FZoneThemeDifficultyProperties, GlobalWindInfo) == 0x000050, "Member 'FZoneThemeDifficultyProperties::GlobalWindInfo' has a wrong offset!");

// ScriptStruct FortniteGame.HUDLayoutUsageData
// 0x0010 (0x0010 - 0x0000)
struct FHUDLayoutUsageData final
{
public:
	int32                                         NumOfTimesOpened;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfTimesReset;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfTimesSaved;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfTimesPanning;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHUDLayoutUsageData) == 0x000004, "Wrong alignment on FHUDLayoutUsageData");
static_assert(sizeof(FHUDLayoutUsageData) == 0x000010, "Wrong size on FHUDLayoutUsageData");
static_assert(offsetof(FHUDLayoutUsageData, NumOfTimesOpened) == 0x000000, "Member 'FHUDLayoutUsageData::NumOfTimesOpened' has a wrong offset!");
static_assert(offsetof(FHUDLayoutUsageData, NumOfTimesReset) == 0x000004, "Member 'FHUDLayoutUsageData::NumOfTimesReset' has a wrong offset!");
static_assert(offsetof(FHUDLayoutUsageData, NumOfTimesSaved) == 0x000008, "Member 'FHUDLayoutUsageData::NumOfTimesSaved' has a wrong offset!");
static_assert(offsetof(FHUDLayoutUsageData, NumOfTimesPanning) == 0x00000C, "Member 'FHUDLayoutUsageData::NumOfTimesPanning' has a wrong offset!");

// ScriptStruct FortniteGame.HUDLayoutDataEntry
// 0x0180 (0x0180 - 0x0000)
struct FHUDLayoutDataEntry final
{
public:
	struct FGameplayTag                           VisualType;                                        // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnchorData                            AnchroData;                                        // 0x0008(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBacchusHUDStateType                          BuildVisibility;                                   // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBacchusHUDStateType                          CombatVisibility;                                  // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBacchusHUDStateType                          EditVisibility;                                    // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBacchusHUDStateType                          CreativeVisibility;                                // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Property_0;                                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Property_1;                                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Property_2;                                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Property_3;                                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      FloatProperties;                                   // 0x0048(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0xE8];                                      // 0x0098(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHUDLayoutDataEntry) == 0x000008, "Wrong alignment on FHUDLayoutDataEntry");
static_assert(sizeof(FHUDLayoutDataEntry) == 0x000180, "Wrong size on FHUDLayoutDataEntry");
static_assert(offsetof(FHUDLayoutDataEntry, VisualType) == 0x000000, "Member 'FHUDLayoutDataEntry::VisualType' has a wrong offset!");
static_assert(offsetof(FHUDLayoutDataEntry, AnchroData) == 0x000008, "Member 'FHUDLayoutDataEntry::AnchroData' has a wrong offset!");
static_assert(offsetof(FHUDLayoutDataEntry, ZOrder) == 0x000030, "Member 'FHUDLayoutDataEntry::ZOrder' has a wrong offset!");
static_assert(offsetof(FHUDLayoutDataEntry, BuildVisibility) == 0x000034, "Member 'FHUDLayoutDataEntry::BuildVisibility' has a wrong offset!");
static_assert(offsetof(FHUDLayoutDataEntry, CombatVisibility) == 0x000035, "Member 'FHUDLayoutDataEntry::CombatVisibility' has a wrong offset!");
static_assert(offsetof(FHUDLayoutDataEntry, EditVisibility) == 0x000036, "Member 'FHUDLayoutDataEntry::EditVisibility' has a wrong offset!");
static_assert(offsetof(FHUDLayoutDataEntry, CreativeVisibility) == 0x000037, "Member 'FHUDLayoutDataEntry::CreativeVisibility' has a wrong offset!");
static_assert(offsetof(FHUDLayoutDataEntry, Property_0) == 0x000038, "Member 'FHUDLayoutDataEntry::Property_0' has a wrong offset!");
static_assert(offsetof(FHUDLayoutDataEntry, Property_1) == 0x00003C, "Member 'FHUDLayoutDataEntry::Property_1' has a wrong offset!");
static_assert(offsetof(FHUDLayoutDataEntry, Property_2) == 0x000040, "Member 'FHUDLayoutDataEntry::Property_2' has a wrong offset!");
static_assert(offsetof(FHUDLayoutDataEntry, Property_3) == 0x000044, "Member 'FHUDLayoutDataEntry::Property_3' has a wrong offset!");
static_assert(offsetof(FHUDLayoutDataEntry, FloatProperties) == 0x000048, "Member 'FHUDLayoutDataEntry::FloatProperties' has a wrong offset!");

// ScriptStruct FortniteGame.HUDLayoutData
// 0x0010 (0x0010 - 0x0000)
struct FHUDLayoutData final
{
public:
	TArray<struct FHUDLayoutDataEntry>            LayoutEntries;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHUDLayoutData) == 0x000008, "Wrong alignment on FHUDLayoutData");
static_assert(sizeof(FHUDLayoutData) == 0x000010, "Wrong size on FHUDLayoutData");
static_assert(offsetof(FHUDLayoutData, LayoutEntries) == 0x000000, "Member 'FHUDLayoutData::LayoutEntries' has a wrong offset!");

// ScriptStruct FortniteGame.FireModeData
// 0x0005 (0x0005 - 0x0000)
struct FFireModeData final
{
public:
	bool                                          bAutoFireIsEnabled;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          b3DTouchEnabled;                                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bTapToShootEnabled;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAlwaysShowDedicatedButton;                        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFireModeType                                 FireModeType;                                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFireModeData) == 0x000001, "Wrong alignment on FFireModeData");
static_assert(sizeof(FFireModeData) == 0x000005, "Wrong size on FFireModeData");
static_assert(offsetof(FFireModeData, bAutoFireIsEnabled) == 0x000000, "Member 'FFireModeData::bAutoFireIsEnabled' has a wrong offset!");
static_assert(offsetof(FFireModeData, b3DTouchEnabled) == 0x000001, "Member 'FFireModeData::b3DTouchEnabled' has a wrong offset!");
static_assert(offsetof(FFireModeData, bTapToShootEnabled) == 0x000002, "Member 'FFireModeData::bTapToShootEnabled' has a wrong offset!");
static_assert(offsetof(FFireModeData, bAlwaysShowDedicatedButton) == 0x000003, "Member 'FFireModeData::bAlwaysShowDedicatedButton' has a wrong offset!");
static_assert(offsetof(FFireModeData, FireModeType) == 0x000004, "Member 'FFireModeData::FireModeType' has a wrong offset!");

// ScriptStruct FortniteGame.FortKeepItemGroup
// 0x0010 (0x0018 - 0x0008)
struct FFortKeepItemGroup final : public FTableRowBase
{
public:
	int32                                         Items;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTier;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseLevel;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortKeepItemGroup) == 0x000008, "Wrong alignment on FFortKeepItemGroup");
static_assert(sizeof(FFortKeepItemGroup) == 0x000018, "Wrong size on FFortKeepItemGroup");
static_assert(offsetof(FFortKeepItemGroup, Items) == 0x000008, "Member 'FFortKeepItemGroup::Items' has a wrong offset!");
static_assert(offsetof(FFortKeepItemGroup, MaxTier) == 0x00000C, "Member 'FFortKeepItemGroup::MaxTier' has a wrong offset!");
static_assert(offsetof(FFortKeepItemGroup, BaseLevel) == 0x000010, "Member 'FFortKeepItemGroup::BaseLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortKeepResourceGroup
// 0x0048 (0x0050 - 0x0008)
struct FFortKeepResourceGroup final : public FTableRowBase
{
public:
	class FName                                   Container;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ResourceName;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortItemDefinition>     FullPath;                                          // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortKeepResourceGroup) == 0x000008, "Wrong alignment on FFortKeepResourceGroup");
static_assert(sizeof(FFortKeepResourceGroup) == 0x000050, "Wrong size on FFortKeepResourceGroup");
static_assert(offsetof(FFortKeepResourceGroup, Container) == 0x000008, "Member 'FFortKeepResourceGroup::Container' has a wrong offset!");
static_assert(offsetof(FFortKeepResourceGroup, ItemCount) == 0x000010, "Member 'FFortKeepResourceGroup::ItemCount' has a wrong offset!");
static_assert(offsetof(FFortKeepResourceGroup, ResourceName) == 0x000018, "Member 'FFortKeepResourceGroup::ResourceName' has a wrong offset!");
static_assert(offsetof(FFortKeepResourceGroup, FullPath) == 0x000028, "Member 'FFortKeepResourceGroup::FullPath' has a wrong offset!");

// ScriptStruct FortniteGame.RecordBucket
// 0x0010 (0x0010 - 0x0000)
struct FRecordBucket final
{
public:
	TArray<int32>                                 RecordIndices;                                     // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRecordBucket) == 0x000008, "Wrong alignment on FRecordBucket");
static_assert(sizeof(FRecordBucket) == 0x000010, "Wrong size on FRecordBucket");
static_assert(offsetof(FRecordBucket, RecordIndices) == 0x000000, "Member 'FRecordBucket::RecordIndices' has a wrong offset!");

// ScriptStruct FortniteGame.RecordBucketMap
// 0x0060 (0x0060 - 0x0000)
struct FRecordBucketMap final
{
public:
	TMap<struct FIntPoint, struct FRecordBucket>  PositionToRecord;                                  // 0x0000(0x0050)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<int32>                                 DuplicateRecords;                                  // 0x0050(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRecordBucketMap) == 0x000008, "Wrong alignment on FRecordBucketMap");
static_assert(sizeof(FRecordBucketMap) == 0x000060, "Wrong size on FRecordBucketMap");
static_assert(offsetof(FRecordBucketMap, PositionToRecord) == 0x000000, "Member 'FRecordBucketMap::PositionToRecord' has a wrong offset!");
static_assert(offsetof(FRecordBucketMap, DuplicateRecords) == 0x000050, "Member 'FRecordBucketMap::DuplicateRecords' has a wrong offset!");

// ScriptStruct FortniteGame.ActorInstanceRecord
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FActorInstanceRecord final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorInstanceRecord) == 0x000010, "Wrong alignment on FActorInstanceRecord");
static_assert(sizeof(FActorInstanceRecord) == 0x000060, "Wrong size on FActorInstanceRecord");

// ScriptStruct FortniteGame.ActorTemplateRecord
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FActorTemplateRecord final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorTemplateRecord) == 0x000008, "Wrong alignment on FActorTemplateRecord");
static_assert(sizeof(FActorTemplateRecord) == 0x000050, "Wrong size on FActorTemplateRecord");

// ScriptStruct FortniteGame.FortMissionRecord
// 0x0138 (0x0138 - 0x0000)
struct FFortMissionRecord final
{
public:
	struct FFortMissionEntry                      MissionEntry;                                      // 0x0000(0x0088)(NativeAccessSpecifierPublic)
	class UFortMissionGenerator*                  MissionGenerator;                                  // 0x0088(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGeneratedDifficultyOptions        GeneratedMissionOptions;                           // 0x0090(0x0040)(Transient, NativeAccessSpecifierPublic)
	int32                                         DayGenerated;                                      // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UIIndex;                                           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       QuestOwnerAccount;                                 // 0x00D8(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMissionStatus                            MissionStatus;                                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortObjectiveRecord>           ObjectiveRecords;                                  // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 MissionData;                                       // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortMissionRecord) == 0x000008, "Wrong alignment on FFortMissionRecord");
static_assert(sizeof(FFortMissionRecord) == 0x000138, "Wrong size on FFortMissionRecord");
static_assert(offsetof(FFortMissionRecord, MissionEntry) == 0x000000, "Member 'FFortMissionRecord::MissionEntry' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionGenerator) == 0x000088, "Member 'FFortMissionRecord::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, GeneratedMissionOptions) == 0x000090, "Member 'FFortMissionRecord::GeneratedMissionOptions' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, DayGenerated) == 0x0000D0, "Member 'FFortMissionRecord::DayGenerated' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, UIIndex) == 0x0000D4, "Member 'FFortMissionRecord::UIIndex' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, QuestOwnerAccount) == 0x0000D8, "Member 'FFortMissionRecord::QuestOwnerAccount' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionStatus) == 0x000100, "Member 'FFortMissionRecord::MissionStatus' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, ObjectiveRecords) == 0x000108, "Member 'FFortMissionRecord::ObjectiveRecords' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionData) == 0x000118, "Member 'FFortMissionRecord::MissionData' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionGuid) == 0x000128, "Member 'FFortMissionRecord::MissionGuid' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionManagerRecord
// 0x0038 (0x0038 - 0x0000)
struct FFortMissionManagerRecord final
{
public:
	TSubclassOf<class AFortMissionManager>        MissionManagerClass;                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionRecord>             MissionRecords;                                    // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumRequiredMissionsOfType[0x4];                    // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 MissionManagerData;                                // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionManagerRecord) == 0x000008, "Wrong alignment on FFortMissionManagerRecord");
static_assert(sizeof(FFortMissionManagerRecord) == 0x000038, "Wrong size on FFortMissionManagerRecord");
static_assert(offsetof(FFortMissionManagerRecord, MissionManagerClass) == 0x000000, "Member 'FFortMissionManagerRecord::MissionManagerClass' has a wrong offset!");
static_assert(offsetof(FFortMissionManagerRecord, MissionRecords) == 0x000008, "Member 'FFortMissionManagerRecord::MissionRecords' has a wrong offset!");
static_assert(offsetof(FFortMissionManagerRecord, NumRequiredMissionsOfType) == 0x000018, "Member 'FFortMissionManagerRecord::NumRequiredMissionsOfType' has a wrong offset!");
static_assert(offsetof(FFortMissionManagerRecord, MissionManagerData) == 0x000028, "Member 'FFortMissionManagerRecord::MissionManagerData' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlacementActorFinderEntry
// 0x00B8 (0x00B8 - 0x0000)
struct FFortPlacementActorFinderEntry final
{
public:
	TSoftClassPtr<class UClass>                   BuildingToSpawn;                                   // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingActor>             BuildingClassToFind;                               // 0x0028(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ABuildingActor>>     BuildingClassesToFind;                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PreferredTags;                                     // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExlusionTags;                                      // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortFinderProperty>            RequiredProperties;                                // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollisionCheck;                             // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToGrid;                                       // 0x00B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlacementActorFinderEntry) == 0x000008, "Wrong alignment on FFortPlacementActorFinderEntry");
static_assert(sizeof(FFortPlacementActorFinderEntry) == 0x0000B8, "Wrong size on FFortPlacementActorFinderEntry");
static_assert(offsetof(FFortPlacementActorFinderEntry, BuildingToSpawn) == 0x000000, "Member 'FFortPlacementActorFinderEntry::BuildingToSpawn' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, BuildingClassToFind) == 0x000028, "Member 'FFortPlacementActorFinderEntry::BuildingClassToFind' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, BuildingClassesToFind) == 0x000030, "Member 'FFortPlacementActorFinderEntry::BuildingClassesToFind' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, RequiredTags) == 0x000040, "Member 'FFortPlacementActorFinderEntry::RequiredTags' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, PreferredTags) == 0x000060, "Member 'FFortPlacementActorFinderEntry::PreferredTags' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, ExlusionTags) == 0x000080, "Member 'FFortPlacementActorFinderEntry::ExlusionTags' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, RequiredProperties) == 0x0000A0, "Member 'FFortPlacementActorFinderEntry::RequiredProperties' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, bIgnoreCollisionCheck) == 0x0000B0, "Member 'FFortPlacementActorFinderEntry::bIgnoreCollisionCheck' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, bSnapToGrid) == 0x0000B1, "Member 'FFortPlacementActorFinderEntry::bSnapToGrid' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlacementActorFinderInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortPlacementActorFinderInfo final
{
public:
	float                                         DistanceRangeMin;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRangeMax;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortPlacementActorFinderEntry> BuildingData;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlacementActorFinderInfo) == 0x000008, "Wrong alignment on FFortPlacementActorFinderInfo");
static_assert(sizeof(FFortPlacementActorFinderInfo) == 0x000018, "Wrong size on FFortPlacementActorFinderInfo");
static_assert(offsetof(FFortPlacementActorFinderInfo, DistanceRangeMin) == 0x000000, "Member 'FFortPlacementActorFinderInfo::DistanceRangeMin' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderInfo, DistanceRangeMax) == 0x000004, "Member 'FFortPlacementActorFinderInfo::DistanceRangeMax' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderInfo, BuildingData) == 0x000008, "Member 'FFortPlacementActorFinderInfo::BuildingData' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionEvent
// 0x0098 (0x0098 - 0x0000)
struct FFortMissionEvent final
{
public:
	class FName                                   EventType;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0060(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params;                                            // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionEvent) == 0x000008, "Wrong alignment on FFortMissionEvent");
static_assert(sizeof(FFortMissionEvent) == 0x000098, "Wrong size on FFortMissionEvent");
static_assert(offsetof(FFortMissionEvent, EventType) == 0x000000, "Member 'FFortMissionEvent::EventType' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, ObjectiveHandle) == 0x000008, "Member 'FFortMissionEvent::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, EventFocus) == 0x000028, "Member 'FFortMissionEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, EventContent) == 0x000030, "Member 'FFortMissionEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, EventInstigator) == 0x000038, "Member 'FFortMissionEvent::EventInstigator' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GenericInt) == 0x000040, "Member 'FFortMissionEvent::GenericInt' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GenericFloat) == 0x000044, "Member 'FFortMissionEvent::GenericFloat' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GenericText) == 0x000048, "Member 'FFortMissionEvent::GenericText' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GameplayTags) == 0x000060, "Member 'FFortMissionEvent::GameplayTags' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, MissionGuid) == 0x000080, "Member 'FFortMissionEvent::MissionGuid' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, Params) == 0x000090, "Member 'FFortMissionEvent::Params' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownWorkerSetBonusData
// 0x0050 (0x0050 - 0x0000)
struct FMyTownWorkerSetBonusData final
{
public:
	struct FGameplayTagContainer                  SetBonusTypeTag;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RequiredWorkersCount;                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            SetBonusEffect;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMyTownWorkerSetBonusData) == 0x000008, "Wrong alignment on FMyTownWorkerSetBonusData");
static_assert(sizeof(FMyTownWorkerSetBonusData) == 0x000050, "Wrong size on FMyTownWorkerSetBonusData");
static_assert(offsetof(FMyTownWorkerSetBonusData, SetBonusTypeTag) == 0x000000, "Member 'FMyTownWorkerSetBonusData::SetBonusTypeTag' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, DisplayName) == 0x000020, "Member 'FMyTownWorkerSetBonusData::DisplayName' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, RequiredWorkersCount) == 0x000038, "Member 'FMyTownWorkerSetBonusData::RequiredWorkersCount' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, SetBonusEffect) == 0x000040, "Member 'FMyTownWorkerSetBonusData::SetBonusEffect' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, SelectionWeight) == 0x000048, "Member 'FMyTownWorkerSetBonusData::SelectionWeight' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerReportingInfoContainer
// 0x0060 (0x0060 - 0x0000)
struct FPlayerReportingInfoContainer final
{
public:
	class UFortLocalPlayer*                       Owner;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UReportablePlayerInfo*>          AllPlayerInfo;                                     // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UReportablePlayerInfo*>          AllIslandInfo;                                     // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerReportingInfoContainer) == 0x000008, "Wrong alignment on FPlayerReportingInfoContainer");
static_assert(sizeof(FPlayerReportingInfoContainer) == 0x000060, "Wrong size on FPlayerReportingInfoContainer");
static_assert(offsetof(FPlayerReportingInfoContainer, Owner) == 0x000000, "Member 'FPlayerReportingInfoContainer::Owner' has a wrong offset!");
static_assert(offsetof(FPlayerReportingInfoContainer, AllPlayerInfo) == 0x000008, "Member 'FPlayerReportingInfoContainer::AllPlayerInfo' has a wrong offset!");
static_assert(offsetof(FPlayerReportingInfoContainer, AllIslandInfo) == 0x000018, "Member 'FPlayerReportingInfoContainer::AllIslandInfo' has a wrong offset!");

// ScriptStruct FortniteGame.CachedPlayerReportingMatchInfoAnalytics
// 0x0038 (0x0038 - 0x0000)
struct FCachedPlayerReportingMatchInfoAnalytics final
{
public:
	class FString                                 GameSessionId;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlaylistName;                                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TournamentId;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventWindowId;                                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedPlayerReportingMatchInfoAnalytics) == 0x000008, "Wrong alignment on FCachedPlayerReportingMatchInfoAnalytics");
static_assert(sizeof(FCachedPlayerReportingMatchInfoAnalytics) == 0x000038, "Wrong size on FCachedPlayerReportingMatchInfoAnalytics");
static_assert(offsetof(FCachedPlayerReportingMatchInfoAnalytics, GameSessionId) == 0x000000, "Member 'FCachedPlayerReportingMatchInfoAnalytics::GameSessionId' has a wrong offset!");
static_assert(offsetof(FCachedPlayerReportingMatchInfoAnalytics, PlaylistName) == 0x000010, "Member 'FCachedPlayerReportingMatchInfoAnalytics::PlaylistName' has a wrong offset!");
static_assert(offsetof(FCachedPlayerReportingMatchInfoAnalytics, TournamentId) == 0x000018, "Member 'FCachedPlayerReportingMatchInfoAnalytics::TournamentId' has a wrong offset!");
static_assert(offsetof(FCachedPlayerReportingMatchInfoAnalytics, EventWindowId) == 0x000028, "Member 'FCachedPlayerReportingMatchInfoAnalytics::EventWindowId' has a wrong offset!");

// ScriptStruct FortniteGame.CreativePerfCost
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FCreativePerfCost final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreativePerfCost) == 0x000004, "Wrong alignment on FCreativePerfCost");
static_assert(sizeof(FCreativePerfCost) == 0x000008, "Wrong size on FCreativePerfCost");

// ScriptStruct FortniteGame.SolarisPrototype
// 0x0058 (0x0058 - 0x0000)
struct FSolarisPrototype final
{
public:
	class FString                                 SolarisString;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x48];                                      // 0x0010(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSolarisPrototype) == 0x000008, "Wrong alignment on FSolarisPrototype");
static_assert(sizeof(FSolarisPrototype) == 0x000058, "Wrong size on FSolarisPrototype");
static_assert(offsetof(FSolarisPrototype, SolarisString) == 0x000000, "Member 'FSolarisPrototype::SolarisString' has a wrong offset!");

// ScriptStruct FortniteGame.StatNamesToTrack
// 0x0010 (0x0018 - 0x0008)
struct FStatNamesToTrack final : public FTableRowBase
{
public:
	class FName                                   StatName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatRecordingPeriod                          Period;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatNamesToTrack) == 0x000008, "Wrong alignment on FStatNamesToTrack");
static_assert(sizeof(FStatNamesToTrack) == 0x000018, "Wrong size on FStatNamesToTrack");
static_assert(offsetof(FStatNamesToTrack, StatName) == 0x000008, "Member 'FStatNamesToTrack::StatName' has a wrong offset!");
static_assert(offsetof(FStatNamesToTrack, Period) == 0x000010, "Member 'FStatNamesToTrack::Period' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelActiveCriteriaProgress
// 0x000C (0x000C - 0x0000)
struct FStrategicBuildingLevelActiveCriteriaProgress final
{
public:
	float                                         CurrentProgress;                                   // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxProgress;                                       // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bProgressAllowed : 1;                              // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStrategicBuildingLevelActiveCriteriaProgress) == 0x000004, "Wrong alignment on FStrategicBuildingLevelActiveCriteriaProgress");
static_assert(sizeof(FStrategicBuildingLevelActiveCriteriaProgress) == 0x00000C, "Wrong size on FStrategicBuildingLevelActiveCriteriaProgress");
static_assert(offsetof(FStrategicBuildingLevelActiveCriteriaProgress, CurrentProgress) == 0x000000, "Member 'FStrategicBuildingLevelActiveCriteriaProgress::CurrentProgress' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelActiveCriteriaProgress, MaxProgress) == 0x000004, "Member 'FStrategicBuildingLevelActiveCriteriaProgress::MaxProgress' has a wrong offset!");

// ScriptStruct FortniteGame.FortTileLootData
// 0x0318 (0x0318 - 0x0000)
struct FFortTileLootData final
{
public:
	struct FFortLootQuotaData                     LootQuotas[0x12];                                  // 0x0000(0x0028)(NativeAccessSpecifierPublic)
	int32                                         LootDrops[0x12];                                   // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTileLootData) == 0x000008, "Wrong alignment on FFortTileLootData");
static_assert(sizeof(FFortTileLootData) == 0x000318, "Wrong size on FFortTileLootData");
static_assert(offsetof(FFortTileLootData, LootQuotas) == 0x000000, "Member 'FFortTileLootData::LootQuotas' has a wrong offset!");
static_assert(offsetof(FFortTileLootData, LootDrops) == 0x0002D0, "Member 'FFortTileLootData::LootDrops' has a wrong offset!");

}

