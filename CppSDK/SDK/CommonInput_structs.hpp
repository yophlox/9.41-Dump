#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonInput

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum CommonInput.ECommonGamepadType
// NumValues: 0x0006
enum class ECommonGamepadType : uint8
{
	XboxOneController                        = 0,
	PS4Controller                            = 1,
	SwitchController                         = 2,
	GenericController                        = 3,
	Count                                    = 4,
	ECommonGamepadType_MAX                   = 5,
};

// Enum CommonInput.ECommonInputType
// NumValues: 0x0005
enum class ECommonInputType : uint8
{
	MouseAndKeyboard                         = 0,
	Gamepad                                  = 1,
	Touch                                    = 2,
	Count                                    = 3,
	ECommonInputType_MAX                     = 4,
};

// Enum CommonInput.ECommonPlatformType
// NumValues: 0x0009
enum class ECommonPlatformType : uint8
{
	PC                                       = 0,
	Mac                                      = 1,
	PS4                                      = 2,
	XBox                                     = 3,
	IOS                                      = 4,
	Android                                  = 5,
	Switch                                   = 6,
	Count                                    = 7,
	ECommonPlatformType_MAX                  = 8,
};

// ScriptStruct CommonInput.CommonInputPlatformData
// 0x0028 (0x0028 - 0x0000)
struct FCommonInputPlatformData final
{
public:
	bool                                          bSupported;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECommonInputType                              DefaultInputType;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSupportsMouseAndKeyboard;                         // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSupportsGamepad;                                  // 0x0003(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECommonGamepadType                            DefaultGamepadType;                                // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanChangeGamepadType;                             // 0x0005(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSupportsTouch;                                    // 0x0006(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           ControllerData;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommonInputPlatformData) == 0x000008, "Wrong alignment on FCommonInputPlatformData");
static_assert(sizeof(FCommonInputPlatformData) == 0x000028, "Wrong size on FCommonInputPlatformData");
static_assert(offsetof(FCommonInputPlatformData, bSupported) == 0x000000, "Member 'FCommonInputPlatformData::bSupported' has a wrong offset!");
static_assert(offsetof(FCommonInputPlatformData, DefaultInputType) == 0x000001, "Member 'FCommonInputPlatformData::DefaultInputType' has a wrong offset!");
static_assert(offsetof(FCommonInputPlatformData, bSupportsMouseAndKeyboard) == 0x000002, "Member 'FCommonInputPlatformData::bSupportsMouseAndKeyboard' has a wrong offset!");
static_assert(offsetof(FCommonInputPlatformData, bSupportsGamepad) == 0x000003, "Member 'FCommonInputPlatformData::bSupportsGamepad' has a wrong offset!");
static_assert(offsetof(FCommonInputPlatformData, DefaultGamepadType) == 0x000004, "Member 'FCommonInputPlatformData::DefaultGamepadType' has a wrong offset!");
static_assert(offsetof(FCommonInputPlatformData, bCanChangeGamepadType) == 0x000005, "Member 'FCommonInputPlatformData::bCanChangeGamepadType' has a wrong offset!");
static_assert(offsetof(FCommonInputPlatformData, bSupportsTouch) == 0x000006, "Member 'FCommonInputPlatformData::bSupportsTouch' has a wrong offset!");
static_assert(offsetof(FCommonInputPlatformData, ControllerData) == 0x000008, "Member 'FCommonInputPlatformData::ControllerData' has a wrong offset!");

// ScriptStruct CommonInput.CommonInputKeyBrushConfiguration
// 0x00A0 (0x00A0 - 0x0000)
struct FCommonInputKeyBrushConfiguration final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            KeyBrush;                                          // 0x0018(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonInputKeyBrushConfiguration) == 0x000008, "Wrong alignment on FCommonInputKeyBrushConfiguration");
static_assert(sizeof(FCommonInputKeyBrushConfiguration) == 0x0000A0, "Wrong size on FCommonInputKeyBrushConfiguration");
static_assert(offsetof(FCommonInputKeyBrushConfiguration, Key) == 0x000000, "Member 'FCommonInputKeyBrushConfiguration::Key' has a wrong offset!");
static_assert(offsetof(FCommonInputKeyBrushConfiguration, KeyBrush) == 0x000018, "Member 'FCommonInputKeyBrushConfiguration::KeyBrush' has a wrong offset!");

}

