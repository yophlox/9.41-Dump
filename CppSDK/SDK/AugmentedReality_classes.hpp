#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AugmentedReality

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "AugmentedReality_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class AugmentedReality.ARBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UARBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AddManualEnvironmentCaptureProbe(const struct FVector& Location, const struct FVector& Extent);
	static class UARCandidateImage* AddRuntimeCandidateImage(class UARSessionConfig* SessionConfig, class UTexture2D* CandidateTexture, const class FString& FriendlyName, float PhysicalWidth);
	static void DebugDrawPin(class UARPin* ARPin, class UObject* WorldContextObject, const struct FLinearColor& Color, float Scale, float PersistForSeconds);
	static void DebugDrawTrackedGeometry(class UARTrackedGeometry* TrackedGeometry, class UObject* WorldContextObject, const struct FLinearColor& Color, float OutlineThickness, float PersistForSeconds);
	static TArray<class UARTrackedGeometry*> GetAllGeometries();
	static TArray<class UARPin*> GetAllPins();
	static TArray<class UAREnvironmentCaptureProbe*> GetAllTrackedEnvironmentCaptureProbes();
	static TArray<class UARTrackedImage*> GetAllTrackedImages();
	static TArray<class UARPlaneGeometry*> GetAllTrackedPlanes();
	static TArray<class UARTrackedPoint*> GetAllTrackedPoints();
	static struct FARSessionStatus GetARSessionStatus();
	static class UARTextureCameraDepth* GetCameraDepth();
	static class UARTextureCameraImage* GetCameraImage();
	static class UARLightEstimate* GetCurrentLightEstimate();
	static TArray<struct FVector> GetPointCloud();
	static class UARSessionConfig* GetSessionConfig();
	static TArray<struct FARVideoFormat> GetSupportedVideoFormats(EARSessionType SessionType);
	static EARTrackingQuality GetTrackingQuality();
	static EARTrackingQualityReason GetTrackingQualityReason();
	static EARWorldMappingState GetWorldMappingStatus();
	static bool IsARSupported();
	static bool IsSessionTypeSupported(EARSessionType SessionType);
	static TArray<struct FARTraceResult> LineTraceTrackedObjects(const struct FVector2D& ScreenCoord, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);
	static TArray<struct FARTraceResult> LineTraceTrackedObjects3D(const struct FVector& Start, const struct FVector& End, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);
	static void PauseARSession();
	static class UARPin* PinComponent(class USceneComponent* ComponentToPin, const struct FTransform& PinToWorldTransform, class UARTrackedGeometry* TrackedGeometry, const class FName DebugName);
	static class UARPin* PinComponentToTraceResult(class USceneComponent* ComponentToPin, const struct FARTraceResult& TraceResult, const class FName DebugName);
	static void RemovePin(class UARPin* PinToRemove);
	static void SetAlignmentTransform(const struct FTransform& InAlignmentTransform);
	static void StartARSession(class UARSessionConfig* SessionConfig);
	static void StopARSession();
	static void UnpinComponent(class USceneComponent* ComponentToUnpin);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARBlueprintLibrary">();
	}
	static class UARBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARBlueprintLibrary>();
	}
};
static_assert(alignof(UARBlueprintLibrary) == 0x000008, "Wrong alignment on UARBlueprintLibrary");
static_assert(sizeof(UARBlueprintLibrary) == 0x000028, "Wrong size on UARBlueprintLibrary");

// Class AugmentedReality.ARTraceResultLibrary
// 0x0000 (0x0028 - 0x0028)
class UARTraceResultLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetDistanceFromCamera(const struct FARTraceResult& TraceResult);
	static struct FTransform GetLocalToTrackingTransform(const struct FARTraceResult& TraceResult);
	static struct FTransform GetLocalToWorldTransform(const struct FARTraceResult& TraceResult);
	static EARLineTraceChannels GetTraceChannel(const struct FARTraceResult& TraceResult);
	static class UARTrackedGeometry* GetTrackedGeometry(const struct FARTraceResult& TraceResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARTraceResultLibrary">();
	}
	static class UARTraceResultLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARTraceResultLibrary>();
	}
};
static_assert(alignof(UARTraceResultLibrary) == 0x000008, "Wrong alignment on UARTraceResultLibrary");
static_assert(sizeof(UARTraceResultLibrary) == 0x000028, "Wrong size on UARTraceResultLibrary");

// Class AugmentedReality.ARBaseAsyncTaskBlueprintProxy
// 0x0020 (0x0050 - 0x0030)
class UARBaseAsyncTaskBlueprintProxy : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARBaseAsyncTaskBlueprintProxy">();
	}
	static class UARBaseAsyncTaskBlueprintProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARBaseAsyncTaskBlueprintProxy>();
	}
};
static_assert(alignof(UARBaseAsyncTaskBlueprintProxy) == 0x000008, "Wrong alignment on UARBaseAsyncTaskBlueprintProxy");
static_assert(sizeof(UARBaseAsyncTaskBlueprintProxy) == 0x000050, "Wrong size on UARBaseAsyncTaskBlueprintProxy");

// Class AugmentedReality.ARSaveWorldAsyncTaskBlueprintProxy
// 0x0030 (0x0080 - 0x0050)
class UARSaveWorldAsyncTaskBlueprintProxy final : public UARBaseAsyncTaskBlueprintProxy
{
public:
	UMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnFailed;                                          // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UARSaveWorldAsyncTaskBlueprintProxy* ARSaveWorld(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARSaveWorldAsyncTaskBlueprintProxy">();
	}
	static class UARSaveWorldAsyncTaskBlueprintProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARSaveWorldAsyncTaskBlueprintProxy>();
	}
};
static_assert(alignof(UARSaveWorldAsyncTaskBlueprintProxy) == 0x000008, "Wrong alignment on UARSaveWorldAsyncTaskBlueprintProxy");
static_assert(sizeof(UARSaveWorldAsyncTaskBlueprintProxy) == 0x000080, "Wrong size on UARSaveWorldAsyncTaskBlueprintProxy");
static_assert(offsetof(UARSaveWorldAsyncTaskBlueprintProxy, OnSuccess) == 0x000050, "Member 'UARSaveWorldAsyncTaskBlueprintProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UARSaveWorldAsyncTaskBlueprintProxy, OnFailed) == 0x000060, "Member 'UARSaveWorldAsyncTaskBlueprintProxy::OnFailed' has a wrong offset!");

// Class AugmentedReality.ARGetCandidateObjectAsyncTaskBlueprintProxy
// 0x0048 (0x0098 - 0x0050)
class UARGetCandidateObjectAsyncTaskBlueprintProxy final : public UARBaseAsyncTaskBlueprintProxy
{
public:
	UMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnFailed;                                          // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x28];                                      // 0x0070(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& Extent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARGetCandidateObjectAsyncTaskBlueprintProxy">();
	}
	static class UARGetCandidateObjectAsyncTaskBlueprintProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARGetCandidateObjectAsyncTaskBlueprintProxy>();
	}
};
static_assert(alignof(UARGetCandidateObjectAsyncTaskBlueprintProxy) == 0x000008, "Wrong alignment on UARGetCandidateObjectAsyncTaskBlueprintProxy");
static_assert(sizeof(UARGetCandidateObjectAsyncTaskBlueprintProxy) == 0x000098, "Wrong size on UARGetCandidateObjectAsyncTaskBlueprintProxy");
static_assert(offsetof(UARGetCandidateObjectAsyncTaskBlueprintProxy, OnSuccess) == 0x000050, "Member 'UARGetCandidateObjectAsyncTaskBlueprintProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed) == 0x000060, "Member 'UARGetCandidateObjectAsyncTaskBlueprintProxy::OnFailed' has a wrong offset!");

// Class AugmentedReality.ARLightEstimate
// 0x0000 (0x0028 - 0x0028)
class UARLightEstimate : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARLightEstimate">();
	}
	static class UARLightEstimate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARLightEstimate>();
	}
};
static_assert(alignof(UARLightEstimate) == 0x000008, "Wrong alignment on UARLightEstimate");
static_assert(sizeof(UARLightEstimate) == 0x000028, "Wrong size on UARLightEstimate");

// Class AugmentedReality.ARBasicLightEstimate
// 0x0018 (0x0040 - 0x0028)
class UARBasicLightEstimate final : public UARLightEstimate
{
public:
	float                                         AmbientIntensityLumens;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AmbientColorTemperatureKelvin;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           AmbientColor;                                      // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	struct FLinearColor GetAmbientColor() const;
	float GetAmbientColorTemperatureKelvin() const;
	float GetAmbientIntensityLumens() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARBasicLightEstimate">();
	}
	static class UARBasicLightEstimate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARBasicLightEstimate>();
	}
};
static_assert(alignof(UARBasicLightEstimate) == 0x000008, "Wrong alignment on UARBasicLightEstimate");
static_assert(sizeof(UARBasicLightEstimate) == 0x000040, "Wrong size on UARBasicLightEstimate");
static_assert(offsetof(UARBasicLightEstimate, AmbientIntensityLumens) == 0x000028, "Member 'UARBasicLightEstimate::AmbientIntensityLumens' has a wrong offset!");
static_assert(offsetof(UARBasicLightEstimate, AmbientColorTemperatureKelvin) == 0x00002C, "Member 'UARBasicLightEstimate::AmbientColorTemperatureKelvin' has a wrong offset!");
static_assert(offsetof(UARBasicLightEstimate, AmbientColor) == 0x000030, "Member 'UARBasicLightEstimate::AmbientColor' has a wrong offset!");

// Class AugmentedReality.ARPin
// 0x00C8 (0x00F0 - 0x0028)
class UARPin final : public UObject
{
public:
	class UARTrackedGeometry*                     TrackedGeometry;                                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        PinnedComponent;                                   // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalToTrackingTransform;                          // 0x0040(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FTransform                             LocalToAlignedTrackingTransform;                   // 0x0070(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	EARTrackingState                              TrackingState;                                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A1[0x1F];                                      // 0x00A1(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnARTrackingStateChanged;                          // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	UMulticastInlineDelegateProperty_             OnARTransformUpdated;                              // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x10];                                      // 0x00E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DebugDraw(class UWorld* World, const struct FLinearColor& Color, float Scale, float PersistForSeconds) const;
	class FName GetDebugName() const;
	struct FTransform GetLocalToTrackingTransform() const;
	struct FTransform GetLocalToWorldTransform() const;
	class USceneComponent* GetPinnedComponent() const;
	class UARTrackedGeometry* GetTrackedGeometry() const;
	EARTrackingState GetTrackingState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARPin">();
	}
	static class UARPin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARPin>();
	}
};
static_assert(alignof(UARPin) == 0x000010, "Wrong alignment on UARPin");
static_assert(sizeof(UARPin) == 0x0000F0, "Wrong size on UARPin");
static_assert(offsetof(UARPin, TrackedGeometry) == 0x000028, "Member 'UARPin::TrackedGeometry' has a wrong offset!");
static_assert(offsetof(UARPin, PinnedComponent) == 0x000030, "Member 'UARPin::PinnedComponent' has a wrong offset!");
static_assert(offsetof(UARPin, LocalToTrackingTransform) == 0x000040, "Member 'UARPin::LocalToTrackingTransform' has a wrong offset!");
static_assert(offsetof(UARPin, LocalToAlignedTrackingTransform) == 0x000070, "Member 'UARPin::LocalToAlignedTrackingTransform' has a wrong offset!");
static_assert(offsetof(UARPin, TrackingState) == 0x0000A0, "Member 'UARPin::TrackingState' has a wrong offset!");
static_assert(offsetof(UARPin, OnARTrackingStateChanged) == 0x0000C0, "Member 'UARPin::OnARTrackingStateChanged' has a wrong offset!");
static_assert(offsetof(UARPin, OnARTransformUpdated) == 0x0000D0, "Member 'UARPin::OnARTransformUpdated' has a wrong offset!");

// Class AugmentedReality.ARSessionConfig
// 0x0068 (0x0098 - 0x0030)
class UARSessionConfig final : public UDataAsset
{
public:
	EARWorldAlignment                             WorldAlignment;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EARSessionType                                SessionType;                                       // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EARPlaneDetectionMode                         PlaneDetectionMode;                                // 0x0032(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHorizontalPlaneDetection;                         // 0x0033(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bVerticalPlaneDetection;                           // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableAutoFocus;                                  // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EARLightEstimationMode                        LightEstimationMode;                               // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EARFrameSyncMode                              FrameSyncMode;                                     // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableAutomaticCameraOverlay;                     // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableAutomaticCameraTracking;                    // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bResetCameraTracking;                              // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bResetTrackedObjects;                              // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UARCandidateImage*>              CandidateImages;                                   // 0x0040(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         MaxNumSimultaneousImagesTracked;                   // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAREnvironmentCaptureProbeType                EnvironmentCaptureProbeType;                       // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 WorldMapData;                                      // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class UARCandidateObject*>             CandidateObjects;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FARVideoFormat                         DesiredVideoFormat;                                // 0x0078(0x000C)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EARFaceTrackingDirection                      FaceTrackingDirection;                             // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EARFaceTrackingUpdate                         FaceTrackingUpdate;                                // 0x0085(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 SerializedARCandidateImageDatabase;                // 0x0088(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void AddCandidateImage(class UARCandidateImage* NewCandidateImage);
	void AddCandidateObject(class UARCandidateObject* CandidateObject);
	void SetCandidateObjectList(const TArray<class UARCandidateObject*>& InCandidateObjects);
	void SetDesiredVideoFormat(const struct FARVideoFormat& NewFormat);
	void SetEnableAutoFocus(bool bNewValue);
	void SetFaceTrackingDirection(EARFaceTrackingDirection InDirection);
	void SetFaceTrackingUpdate(EARFaceTrackingUpdate InUpdate);
	void SetResetCameraTracking(bool bNewValue);
	void SetResetTrackedObjects(bool bNewValue);
	void SetWorldMapData(const TArray<uint8>& Param_WorldMapData);

	const TArray<class UARCandidateImage*> GetCandidateImageList() const;
	const TArray<class UARCandidateObject*> GetCandidateObjectList() const;
	struct FARVideoFormat GetDesiredVideoFormat() const;
	EAREnvironmentCaptureProbeType GetEnvironmentCaptureProbeType() const;
	EARFaceTrackingDirection GetFaceTrackingDirection() const;
	EARFaceTrackingUpdate GetFaceTrackingUpdate() const;
	EARFrameSyncMode GetFrameSyncMode() const;
	EARLightEstimationMode GetLightEstimationMode() const;
	int32 GetMaxNumSimultaneousImagesTracked() const;
	EARPlaneDetectionMode GetPlaneDetectionMode() const;
	EARSessionType GetSessionType() const;
	EARWorldAlignment GetWorldAlignment() const;
	const TArray<uint8> GetWorldMapData() const;
	bool ShouldEnableAutoFocus() const;
	bool ShouldEnableCameraTracking() const;
	bool ShouldRenderCameraOverlay() const;
	bool ShouldResetCameraTracking() const;
	bool ShouldResetTrackedObjects() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARSessionConfig">();
	}
	static class UARSessionConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARSessionConfig>();
	}
};
static_assert(alignof(UARSessionConfig) == 0x000008, "Wrong alignment on UARSessionConfig");
static_assert(sizeof(UARSessionConfig) == 0x000098, "Wrong size on UARSessionConfig");
static_assert(offsetof(UARSessionConfig, WorldAlignment) == 0x000030, "Member 'UARSessionConfig::WorldAlignment' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, SessionType) == 0x000031, "Member 'UARSessionConfig::SessionType' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, PlaneDetectionMode) == 0x000032, "Member 'UARSessionConfig::PlaneDetectionMode' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, bHorizontalPlaneDetection) == 0x000033, "Member 'UARSessionConfig::bHorizontalPlaneDetection' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, bVerticalPlaneDetection) == 0x000034, "Member 'UARSessionConfig::bVerticalPlaneDetection' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, bEnableAutoFocus) == 0x000035, "Member 'UARSessionConfig::bEnableAutoFocus' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, LightEstimationMode) == 0x000036, "Member 'UARSessionConfig::LightEstimationMode' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, FrameSyncMode) == 0x000037, "Member 'UARSessionConfig::FrameSyncMode' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, bEnableAutomaticCameraOverlay) == 0x000038, "Member 'UARSessionConfig::bEnableAutomaticCameraOverlay' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, bEnableAutomaticCameraTracking) == 0x000039, "Member 'UARSessionConfig::bEnableAutomaticCameraTracking' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, bResetCameraTracking) == 0x00003A, "Member 'UARSessionConfig::bResetCameraTracking' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, bResetTrackedObjects) == 0x00003B, "Member 'UARSessionConfig::bResetTrackedObjects' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, CandidateImages) == 0x000040, "Member 'UARSessionConfig::CandidateImages' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, MaxNumSimultaneousImagesTracked) == 0x000050, "Member 'UARSessionConfig::MaxNumSimultaneousImagesTracked' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, EnvironmentCaptureProbeType) == 0x000054, "Member 'UARSessionConfig::EnvironmentCaptureProbeType' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, WorldMapData) == 0x000058, "Member 'UARSessionConfig::WorldMapData' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, CandidateObjects) == 0x000068, "Member 'UARSessionConfig::CandidateObjects' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, DesiredVideoFormat) == 0x000078, "Member 'UARSessionConfig::DesiredVideoFormat' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, FaceTrackingDirection) == 0x000084, "Member 'UARSessionConfig::FaceTrackingDirection' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, FaceTrackingUpdate) == 0x000085, "Member 'UARSessionConfig::FaceTrackingUpdate' has a wrong offset!");
static_assert(offsetof(UARSessionConfig, SerializedARCandidateImageDatabase) == 0x000088, "Member 'UARSessionConfig::SerializedARCandidateImageDatabase' has a wrong offset!");

// Class AugmentedReality.ARSharedWorldGameMode
// 0x0068 (0x0390 - 0x0328)
class AARSharedWorldGameMode final : public AGameMode
{
public:
	int32                                         BufferSizePerChunk;                                // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32C[0x64];                                     // 0x032C(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AARSharedWorldGameState* GetARSharedWorldGameState();
	void SetARSharedWorldData(const TArray<uint8>& ARWorldData);
	void SetARWorldSharingIsReady();
	void SetPreviewImageData(const TArray<uint8>& ImageData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARSharedWorldGameMode">();
	}
	static class AARSharedWorldGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AARSharedWorldGameMode>();
	}
};
static_assert(alignof(AARSharedWorldGameMode) == 0x000008, "Wrong alignment on AARSharedWorldGameMode");
static_assert(sizeof(AARSharedWorldGameMode) == 0x000390, "Wrong size on AARSharedWorldGameMode");
static_assert(offsetof(AARSharedWorldGameMode, BufferSizePerChunk) == 0x000328, "Member 'AARSharedWorldGameMode::BufferSizePerChunk' has a wrong offset!");

// Class AugmentedReality.ARSharedWorldGameState
// 0x0038 (0x02D8 - 0x02A0)
class AARSharedWorldGameState final : public AGameState
{
public:
	TArray<uint8>                                 PreviewImageData;                                  // 0x02A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ARWorldData;                                       // 0x02B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PreviewImageBytesTotal;                            // 0x02C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ARWorldBytesTotal;                                 // 0x02C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviewImageBytesDelivered;                        // 0x02C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ARWorldBytesDelivered;                             // 0x02CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_OnARWorldMapIsReady();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARSharedWorldGameState">();
	}
	static class AARSharedWorldGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AARSharedWorldGameState>();
	}
};
static_assert(alignof(AARSharedWorldGameState) == 0x000008, "Wrong alignment on AARSharedWorldGameState");
static_assert(sizeof(AARSharedWorldGameState) == 0x0002D8, "Wrong size on AARSharedWorldGameState");
static_assert(offsetof(AARSharedWorldGameState, PreviewImageData) == 0x0002A0, "Member 'AARSharedWorldGameState::PreviewImageData' has a wrong offset!");
static_assert(offsetof(AARSharedWorldGameState, ARWorldData) == 0x0002B0, "Member 'AARSharedWorldGameState::ARWorldData' has a wrong offset!");
static_assert(offsetof(AARSharedWorldGameState, PreviewImageBytesTotal) == 0x0002C0, "Member 'AARSharedWorldGameState::PreviewImageBytesTotal' has a wrong offset!");
static_assert(offsetof(AARSharedWorldGameState, ARWorldBytesTotal) == 0x0002C4, "Member 'AARSharedWorldGameState::ARWorldBytesTotal' has a wrong offset!");
static_assert(offsetof(AARSharedWorldGameState, PreviewImageBytesDelivered) == 0x0002C8, "Member 'AARSharedWorldGameState::PreviewImageBytesDelivered' has a wrong offset!");
static_assert(offsetof(AARSharedWorldGameState, ARWorldBytesDelivered) == 0x0002CC, "Member 'AARSharedWorldGameState::ARWorldBytesDelivered' has a wrong offset!");

// Class AugmentedReality.ARSharedWorldPlayerController
// 0x0008 (0x0598 - 0x0590)
class AARSharedWorldPlayerController final : public APlayerController
{
public:
	uint8                                         Pad_590[0x8];                                      // 0x0590(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientInitSharedWorld(int32 PreviewImageSize, int32 ARWorldDataSize);
	void ClientUpdateARWorldData(int32 Offset, const TArray<uint8>& Buffer);
	void ClientUpdatePreviewImageData(int32 Offset, const TArray<uint8>& Buffer);
	void ServerMarkReadyForReceiving();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARSharedWorldPlayerController">();
	}
	static class AARSharedWorldPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AARSharedWorldPlayerController>();
	}
};
static_assert(alignof(AARSharedWorldPlayerController) == 0x000008, "Wrong alignment on AARSharedWorldPlayerController");
static_assert(sizeof(AARSharedWorldPlayerController) == 0x000598, "Wrong size on AARSharedWorldPlayerController");

// Class AugmentedReality.ARSkyLight
// 0x0010 (0x0260 - 0x0250)
class AARSkyLight final : public ASkyLight
{
public:
	class UAREnvironmentCaptureProbe*             CaptureProbe;                                      // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEnvironmentCaptureProbe(class UAREnvironmentCaptureProbe* InCaptureProbe);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARSkyLight">();
	}
	static class AARSkyLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<AARSkyLight>();
	}
};
static_assert(alignof(AARSkyLight) == 0x000008, "Wrong alignment on AARSkyLight");
static_assert(sizeof(AARSkyLight) == 0x000260, "Wrong size on AARSkyLight");
static_assert(offsetof(AARSkyLight, CaptureProbe) == 0x000250, "Member 'AARSkyLight::CaptureProbe' has a wrong offset!");

// Class AugmentedReality.ARTexture
// 0x0020 (0x00F8 - 0x00D8)
class UARTexture : public UTexture
{
public:
	EARTextureType                                TextureType;                                       // 0x00D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timestamp;                                         // 0x00DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ExternalTextureGuid;                               // 0x00E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x00F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARTexture">();
	}
	static class UARTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARTexture>();
	}
};
static_assert(alignof(UARTexture) == 0x000008, "Wrong alignment on UARTexture");
static_assert(sizeof(UARTexture) == 0x0000F8, "Wrong size on UARTexture");
static_assert(offsetof(UARTexture, TextureType) == 0x0000D8, "Member 'UARTexture::TextureType' has a wrong offset!");
static_assert(offsetof(UARTexture, Timestamp) == 0x0000DC, "Member 'UARTexture::Timestamp' has a wrong offset!");
static_assert(offsetof(UARTexture, ExternalTextureGuid) == 0x0000E0, "Member 'UARTexture::ExternalTextureGuid' has a wrong offset!");
static_assert(offsetof(UARTexture, Size) == 0x0000F0, "Member 'UARTexture::Size' has a wrong offset!");

// Class AugmentedReality.ARTextureCameraImage
// 0x0000 (0x00F8 - 0x00F8)
class UARTextureCameraImage final : public UARTexture
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARTextureCameraImage">();
	}
	static class UARTextureCameraImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARTextureCameraImage>();
	}
};
static_assert(alignof(UARTextureCameraImage) == 0x000008, "Wrong alignment on UARTextureCameraImage");
static_assert(sizeof(UARTextureCameraImage) == 0x0000F8, "Wrong size on UARTextureCameraImage");

// Class AugmentedReality.ARTextureCameraDepth
// 0x0008 (0x0100 - 0x00F8)
class UARTextureCameraDepth final : public UARTexture
{
public:
	EARDepthQuality                               DepthQuality;                                      // 0x00F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EARDepthAccuracy                              DepthAccuracy;                                     // 0x00F9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTemporallySmoothed;                             // 0x00FA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARTextureCameraDepth">();
	}
	static class UARTextureCameraDepth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARTextureCameraDepth>();
	}
};
static_assert(alignof(UARTextureCameraDepth) == 0x000008, "Wrong alignment on UARTextureCameraDepth");
static_assert(sizeof(UARTextureCameraDepth) == 0x000100, "Wrong size on UARTextureCameraDepth");
static_assert(offsetof(UARTextureCameraDepth, DepthQuality) == 0x0000F8, "Member 'UARTextureCameraDepth::DepthQuality' has a wrong offset!");
static_assert(offsetof(UARTextureCameraDepth, DepthAccuracy) == 0x0000F9, "Member 'UARTextureCameraDepth::DepthAccuracy' has a wrong offset!");
static_assert(offsetof(UARTextureCameraDepth, bIsTemporallySmoothed) == 0x0000FA, "Member 'UARTextureCameraDepth::bIsTemporallySmoothed' has a wrong offset!");

// Class AugmentedReality.AREnvironmentCaptureProbeTexture
// 0x0020 (0x0150 - 0x0130)
class UAREnvironmentCaptureProbeTexture final : public UTextureCube
{
public:
	EARTextureType                                TextureType;                                       // 0x0130(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timestamp;                                         // 0x0134(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ExternalTextureGuid;                               // 0x0138(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0148(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AREnvironmentCaptureProbeTexture">();
	}
	static class UAREnvironmentCaptureProbeTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAREnvironmentCaptureProbeTexture>();
	}
};
static_assert(alignof(UAREnvironmentCaptureProbeTexture) == 0x000008, "Wrong alignment on UAREnvironmentCaptureProbeTexture");
static_assert(sizeof(UAREnvironmentCaptureProbeTexture) == 0x000150, "Wrong size on UAREnvironmentCaptureProbeTexture");
static_assert(offsetof(UAREnvironmentCaptureProbeTexture, TextureType) == 0x000130, "Member 'UAREnvironmentCaptureProbeTexture::TextureType' has a wrong offset!");
static_assert(offsetof(UAREnvironmentCaptureProbeTexture, Timestamp) == 0x000134, "Member 'UAREnvironmentCaptureProbeTexture::Timestamp' has a wrong offset!");
static_assert(offsetof(UAREnvironmentCaptureProbeTexture, ExternalTextureGuid) == 0x000138, "Member 'UAREnvironmentCaptureProbeTexture::ExternalTextureGuid' has a wrong offset!");
static_assert(offsetof(UAREnvironmentCaptureProbeTexture, Size) == 0x000148, "Member 'UAREnvironmentCaptureProbeTexture::Size' has a wrong offset!");

// Class AugmentedReality.ARTraceResultDummy
// 0x0000 (0x0028 - 0x0028)
class UARTraceResultDummy final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARTraceResultDummy">();
	}
	static class UARTraceResultDummy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARTraceResultDummy>();
	}
};
static_assert(alignof(UARTraceResultDummy) == 0x000008, "Wrong alignment on UARTraceResultDummy");
static_assert(sizeof(UARTraceResultDummy) == 0x000028, "Wrong size on UARTraceResultDummy");

// Class AugmentedReality.ARTrackedGeometry
// 0x00A8 (0x00D0 - 0x0028)
#pragma pack(push, 0x1)
class alignas(0x10) UARTrackedGeometry : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalToTrackingTransform;                          // 0x0030(0x0030)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTransform                             LocalToAlignedTrackingTransform;                   // 0x0060(0x0030)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EARTrackingState                              TrackingState;                                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91[0x37];                                      // 0x0091(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FName GetDebugName() const;
	int32 GetLastUpdateFrameNumber() const;
	float GetLastUpdateTimestamp() const;
	struct FTransform GetLocalToTrackingTransform() const;
	struct FTransform GetLocalToWorldTransform() const;
	EARTrackingState GetTrackingState() const;
	bool IsTracked() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARTrackedGeometry">();
	}
	static class UARTrackedGeometry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARTrackedGeometry>();
	}
};
#pragma pack(pop)
static_assert(alignof(UARTrackedGeometry) == 0x000010, "Wrong alignment on UARTrackedGeometry");
static_assert(sizeof(UARTrackedGeometry) == 0x0000D0, "Wrong size on UARTrackedGeometry");
static_assert(offsetof(UARTrackedGeometry, LocalToTrackingTransform) == 0x000030, "Member 'UARTrackedGeometry::LocalToTrackingTransform' has a wrong offset!");
static_assert(offsetof(UARTrackedGeometry, LocalToAlignedTrackingTransform) == 0x000060, "Member 'UARTrackedGeometry::LocalToAlignedTrackingTransform' has a wrong offset!");
static_assert(offsetof(UARTrackedGeometry, TrackingState) == 0x000090, "Member 'UARTrackedGeometry::TrackingState' has a wrong offset!");

// Class AugmentedReality.ARPlaneGeometry
// 0x0030 (0x0100 - 0x00D0)
class UARPlaneGeometry final : public UARTrackedGeometry
{
public:
	struct FVector                                Center;                                            // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                Extent;                                            // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x10];                                      // 0x00E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UARPlaneGeometry*                       SubsumedBy;                                        // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FVector> GetBoundaryPolygonInLocalSpace() const;
	struct FVector GetCenter() const;
	struct FVector GetExtent() const;
	class UARPlaneGeometry* GetSubsumedBy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARPlaneGeometry">();
	}
	static class UARPlaneGeometry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARPlaneGeometry>();
	}
};
static_assert(alignof(UARPlaneGeometry) == 0x000010, "Wrong alignment on UARPlaneGeometry");
static_assert(sizeof(UARPlaneGeometry) == 0x000100, "Wrong size on UARPlaneGeometry");
static_assert(offsetof(UARPlaneGeometry, Center) == 0x0000C8, "Member 'UARPlaneGeometry::Center' has a wrong offset!");
static_assert(offsetof(UARPlaneGeometry, Extent) == 0x0000D4, "Member 'UARPlaneGeometry::Extent' has a wrong offset!");
static_assert(offsetof(UARPlaneGeometry, SubsumedBy) == 0x0000F0, "Member 'UARPlaneGeometry::SubsumedBy' has a wrong offset!");

// Class AugmentedReality.ARTrackedPoint
// 0x0000 (0x00D0 - 0x00D0)
class UARTrackedPoint final : public UARTrackedGeometry
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARTrackedPoint">();
	}
	static class UARTrackedPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARTrackedPoint>();
	}
};
static_assert(alignof(UARTrackedPoint) == 0x000010, "Wrong alignment on UARTrackedPoint");
static_assert(sizeof(UARTrackedPoint) == 0x0000D0, "Wrong size on UARTrackedPoint");

// Class AugmentedReality.ARTrackedImage
// 0x0010 (0x00E0 - 0x00D0)
class UARTrackedImage final : public UARTrackedGeometry
{
public:
	bool                                          bIsTracked;                                        // 0x00C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UARCandidateImage*                      DetectedImage;                                     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              EstimatedSize;                                     // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	struct FVector2D GetEstimateSize();

	class UARCandidateImage* GetDetectedImage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARTrackedImage">();
	}
	static class UARTrackedImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARTrackedImage>();
	}
};
static_assert(alignof(UARTrackedImage) == 0x000010, "Wrong alignment on UARTrackedImage");
static_assert(sizeof(UARTrackedImage) == 0x0000E0, "Wrong size on UARTrackedImage");
static_assert(offsetof(UARTrackedImage, bIsTracked) == 0x0000C8, "Member 'UARTrackedImage::bIsTracked' has a wrong offset!");
static_assert(offsetof(UARTrackedImage, DetectedImage) == 0x0000D0, "Member 'UARTrackedImage::DetectedImage' has a wrong offset!");
static_assert(offsetof(UARTrackedImage, EstimatedSize) == 0x0000D8, "Member 'UARTrackedImage::EstimatedSize' has a wrong offset!");

// Class AugmentedReality.ARFaceGeometry
// 0x00F0 (0x01C0 - 0x00D0)
class UARFaceGeometry final : public UARTrackedGeometry
{
public:
	struct FVector                                LookAtTarget;                                      // 0x00C8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTracked;                                        // 0x00D4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EARFaceBlendShape, float>                BlendShapes;                                       // 0x00D8(0x0050)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x98];                                     // 0x0128(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const TMap<EARFaceBlendShape, float> GetBlendShapes() const;
	float GetBlendShapeValue(EARFaceBlendShape BlendShape) const;
	const struct FTransform GetLocalSpaceEyeTransform(EAREye Eye) const;
	struct FTransform GetWorldSpaceEyeTransform(EAREye Eye) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARFaceGeometry">();
	}
	static class UARFaceGeometry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARFaceGeometry>();
	}
};
static_assert(alignof(UARFaceGeometry) == 0x000010, "Wrong alignment on UARFaceGeometry");
static_assert(sizeof(UARFaceGeometry) == 0x0001C0, "Wrong size on UARFaceGeometry");
static_assert(offsetof(UARFaceGeometry, LookAtTarget) == 0x0000C8, "Member 'UARFaceGeometry::LookAtTarget' has a wrong offset!");
static_assert(offsetof(UARFaceGeometry, bIsTracked) == 0x0000D4, "Member 'UARFaceGeometry::bIsTracked' has a wrong offset!");
static_assert(offsetof(UARFaceGeometry, BlendShapes) == 0x0000D8, "Member 'UARFaceGeometry::BlendShapes' has a wrong offset!");

// Class AugmentedReality.AREnvironmentCaptureProbe
// 0x0010 (0x00E0 - 0x00D0)
class UAREnvironmentCaptureProbe final : public UARTrackedGeometry
{
public:
	uint8                                         Pad_C8[0x10];                                      // 0x00C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UAREnvironmentCaptureProbeTexture*      EnvironmentCaptureTexture;                         // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UAREnvironmentCaptureProbeTexture* GetEnvironmentCaptureTexture();

	struct FVector GetExtent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AREnvironmentCaptureProbe">();
	}
	static class UAREnvironmentCaptureProbe* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAREnvironmentCaptureProbe>();
	}
};
static_assert(alignof(UAREnvironmentCaptureProbe) == 0x000010, "Wrong alignment on UAREnvironmentCaptureProbe");
static_assert(sizeof(UAREnvironmentCaptureProbe) == 0x0000E0, "Wrong size on UAREnvironmentCaptureProbe");
static_assert(offsetof(UAREnvironmentCaptureProbe, EnvironmentCaptureTexture) == 0x0000D8, "Member 'UAREnvironmentCaptureProbe::EnvironmentCaptureTexture' has a wrong offset!");

// Class AugmentedReality.ARTrackedObject
// 0x0000 (0x00D0 - 0x00D0)
class UARTrackedObject final : public UARTrackedGeometry
{
public:
	class UARCandidateObject*                     DetectedObject;                                    // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UARCandidateObject* GetDetectedObject() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARTrackedObject">();
	}
	static class UARTrackedObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARTrackedObject>();
	}
};
static_assert(alignof(UARTrackedObject) == 0x000010, "Wrong alignment on UARTrackedObject");
static_assert(sizeof(UARTrackedObject) == 0x0000D0, "Wrong size on UARTrackedObject");
static_assert(offsetof(UARTrackedObject, DetectedObject) == 0x0000C8, "Member 'UARTrackedObject::DetectedObject' has a wrong offset!");

// Class AugmentedReality.ARTypesDummyClass
// 0x0000 (0x0028 - 0x0028)
class UARTypesDummyClass final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARTypesDummyClass">();
	}
	static class UARTypesDummyClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARTypesDummyClass>();
	}
};
static_assert(alignof(UARTypesDummyClass) == 0x000008, "Wrong alignment on UARTypesDummyClass");
static_assert(sizeof(UARTypesDummyClass) == 0x000028, "Wrong size on UARTypesDummyClass");

// Class AugmentedReality.ARCandidateImage
// 0x0028 (0x0058 - 0x0030)
class UARCandidateImage final : public UDataAsset
{
public:
	class UTexture2D*                             CandidateTexture;                                  // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 FriendlyName;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Width;                                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Height;                                            // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EARCandidateImageOrientation                  Orientation;                                       // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTexture2D* GetCandidateTexture() const;
	class FString GetFriendlyName() const;
	EARCandidateImageOrientation GetOrientation() const;
	float GetPhysicalHeight() const;
	float GetPhysicalWidth() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARCandidateImage">();
	}
	static class UARCandidateImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARCandidateImage>();
	}
};
static_assert(alignof(UARCandidateImage) == 0x000008, "Wrong alignment on UARCandidateImage");
static_assert(sizeof(UARCandidateImage) == 0x000058, "Wrong size on UARCandidateImage");
static_assert(offsetof(UARCandidateImage, CandidateTexture) == 0x000030, "Member 'UARCandidateImage::CandidateTexture' has a wrong offset!");
static_assert(offsetof(UARCandidateImage, FriendlyName) == 0x000038, "Member 'UARCandidateImage::FriendlyName' has a wrong offset!");
static_assert(offsetof(UARCandidateImage, Width) == 0x000048, "Member 'UARCandidateImage::Width' has a wrong offset!");
static_assert(offsetof(UARCandidateImage, Height) == 0x00004C, "Member 'UARCandidateImage::Height' has a wrong offset!");
static_assert(offsetof(UARCandidateImage, Orientation) == 0x000050, "Member 'UARCandidateImage::Orientation' has a wrong offset!");

// Class AugmentedReality.ARCandidateObject
// 0x0040 (0x0070 - 0x0030)
class UARCandidateObject final : public UDataAsset
{
public:
	TArray<uint8>                                 CandidateObjectData;                               // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 FriendlyName;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FBox                                   BoundingBox;                                       // 0x0050(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBoundingBox(const struct FBox& InBoundingBox);
	void SetCandidateObjectData(const TArray<uint8>& InCandidateObject);

	const struct FBox GetBoundingBox() const;
	const TArray<uint8> GetCandidateObjectData() const;
	class FString GetFriendlyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ARCandidateObject">();
	}
	static class UARCandidateObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UARCandidateObject>();
	}
};
static_assert(alignof(UARCandidateObject) == 0x000008, "Wrong alignment on UARCandidateObject");
static_assert(sizeof(UARCandidateObject) == 0x000070, "Wrong size on UARCandidateObject");
static_assert(offsetof(UARCandidateObject, CandidateObjectData) == 0x000030, "Member 'UARCandidateObject::CandidateObjectData' has a wrong offset!");
static_assert(offsetof(UARCandidateObject, FriendlyName) == 0x000040, "Member 'UARCandidateObject::FriendlyName' has a wrong offset!");
static_assert(offsetof(UARCandidateObject, BoundingBox) == 0x000050, "Member 'UARCandidateObject::BoundingBox' has a wrong offset!");

}

