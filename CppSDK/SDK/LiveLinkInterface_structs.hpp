#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LiveLinkInterface

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum LiveLinkInterface.ELiveLinkSourceMode
// NumValues: 0x0004
enum class ELiveLinkSourceMode : uint8
{
	Default                                  = 0,
	Interpolated                             = 1,
	TimeSynchronized                         = 2,
	ELiveLinkSourceMode_MAX                  = 3,
};

// ScriptStruct LiveLinkInterface.LiveLinkInterpolationSettings
// 0x0004 (0x0004 - 0x0000)
struct FLiveLinkInterpolationSettings final
{
public:
	float                                         InterpolationOffset;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkInterpolationSettings) == 0x000004, "Wrong alignment on FLiveLinkInterpolationSettings");
static_assert(sizeof(FLiveLinkInterpolationSettings) == 0x000004, "Wrong size on FLiveLinkInterpolationSettings");
static_assert(offsetof(FLiveLinkInterpolationSettings, InterpolationOffset) == 0x000000, "Member 'FLiveLinkInterpolationSettings::InterpolationOffset' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkMetaData
// 0x0060 (0x0060 - 0x0000)
struct FLiveLinkMetaData final
{
public:
	TMap<class FName, class FString>              StringMetadata;                                    // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FQualifiedFrameTime                    SceneTime;                                         // 0x0050(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkMetaData) == 0x000008, "Wrong alignment on FLiveLinkMetaData");
static_assert(sizeof(FLiveLinkMetaData) == 0x000060, "Wrong size on FLiveLinkMetaData");
static_assert(offsetof(FLiveLinkMetaData, StringMetadata) == 0x000000, "Member 'FLiveLinkMetaData::StringMetadata' has a wrong offset!");
static_assert(offsetof(FLiveLinkMetaData, SceneTime) == 0x000050, "Member 'FLiveLinkMetaData::SceneTime' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkRefSkeleton
// 0x0020 (0x0020 - 0x0000)
struct FLiveLinkRefSkeleton final
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 BoneParents;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLiveLinkRefSkeleton) == 0x000008, "Wrong alignment on FLiveLinkRefSkeleton");
static_assert(sizeof(FLiveLinkRefSkeleton) == 0x000020, "Wrong size on FLiveLinkRefSkeleton");
static_assert(offsetof(FLiveLinkRefSkeleton, BoneNames) == 0x000000, "Member 'FLiveLinkRefSkeleton::BoneNames' has a wrong offset!");
static_assert(offsetof(FLiveLinkRefSkeleton, BoneParents) == 0x000010, "Member 'FLiveLinkRefSkeleton::BoneParents' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkWorldTime
// 0x0010 (0x0010 - 0x0000)
struct FLiveLinkWorldTime final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Offset;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkWorldTime) == 0x000008, "Wrong alignment on FLiveLinkWorldTime");
static_assert(sizeof(FLiveLinkWorldTime) == 0x000010, "Wrong size on FLiveLinkWorldTime");
static_assert(offsetof(FLiveLinkWorldTime, Time) == 0x000000, "Member 'FLiveLinkWorldTime::Time' has a wrong offset!");
static_assert(offsetof(FLiveLinkWorldTime, Offset) == 0x000008, "Member 'FLiveLinkWorldTime::Offset' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkCurveElement
// 0x000C (0x000C - 0x0000)
struct FLiveLinkCurveElement final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveValue;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkCurveElement) == 0x000004, "Wrong alignment on FLiveLinkCurveElement");
static_assert(sizeof(FLiveLinkCurveElement) == 0x00000C, "Wrong size on FLiveLinkCurveElement");
static_assert(offsetof(FLiveLinkCurveElement, CurveName) == 0x000000, "Member 'FLiveLinkCurveElement::CurveName' has a wrong offset!");
static_assert(offsetof(FLiveLinkCurveElement, CurveValue) == 0x000008, "Member 'FLiveLinkCurveElement::CurveValue' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkFrameData
// 0x0090 (0x0090 - 0x0000)
struct FLiveLinkFrameData final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLiveLinkCurveElement>          CurveElements;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLiveLinkWorldTime                     WorldTime;                                         // 0x0020(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FLiveLinkMetaData                      MetaData;                                          // 0x0030(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkFrameData) == 0x000008, "Wrong alignment on FLiveLinkFrameData");
static_assert(sizeof(FLiveLinkFrameData) == 0x000090, "Wrong size on FLiveLinkFrameData");
static_assert(offsetof(FLiveLinkFrameData, Transforms) == 0x000000, "Member 'FLiveLinkFrameData::Transforms' has a wrong offset!");
static_assert(offsetof(FLiveLinkFrameData, CurveElements) == 0x000010, "Member 'FLiveLinkFrameData::CurveElements' has a wrong offset!");
static_assert(offsetof(FLiveLinkFrameData, WorldTime) == 0x000020, "Member 'FLiveLinkFrameData::WorldTime' has a wrong offset!");
static_assert(offsetof(FLiveLinkFrameData, MetaData) == 0x000030, "Member 'FLiveLinkFrameData::MetaData' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkSourceHandle
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLiveLinkSourceHandle final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveLinkSourceHandle) == 0x000008, "Wrong alignment on FLiveLinkSourceHandle");
static_assert(sizeof(FLiveLinkSourceHandle) == 0x000018, "Wrong size on FLiveLinkSourceHandle");

// ScriptStruct LiveLinkInterface.LiveLinkCurveConversionSettings
// 0x0050 (0x0050 - 0x0000)
struct FLiveLinkCurveConversionSettings final
{
public:
	TMap<class FString, struct FSoftObjectPath>   CurveConversionAssetMap;                           // 0x0000(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkCurveConversionSettings) == 0x000008, "Wrong alignment on FLiveLinkCurveConversionSettings");
static_assert(sizeof(FLiveLinkCurveConversionSettings) == 0x000050, "Wrong size on FLiveLinkCurveConversionSettings");
static_assert(offsetof(FLiveLinkCurveConversionSettings, CurveConversionAssetMap) == 0x000000, "Member 'FLiveLinkCurveConversionSettings::CurveConversionAssetMap' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkTimeSynchronizationSettings
// 0x0008 (0x0008 - 0x0000)
struct FLiveLinkTimeSynchronizationSettings final
{
public:
	struct FFrameRate                             FrameRate;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkTimeSynchronizationSettings) == 0x000004, "Wrong alignment on FLiveLinkTimeSynchronizationSettings");
static_assert(sizeof(FLiveLinkTimeSynchronizationSettings) == 0x000008, "Wrong size on FLiveLinkTimeSynchronizationSettings");
static_assert(offsetof(FLiveLinkTimeSynchronizationSettings, FrameRate) == 0x000000, "Member 'FLiveLinkTimeSynchronizationSettings::FrameRate' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkFrameRate
// 0x0000 (0x0008 - 0x0008)
struct FLiveLinkFrameRate final : public FFrameRate
{
};
static_assert(alignof(FLiveLinkFrameRate) == 0x000004, "Wrong alignment on FLiveLinkFrameRate");
static_assert(sizeof(FLiveLinkFrameRate) == 0x000008, "Wrong size on FLiveLinkFrameRate");

// ScriptStruct LiveLinkInterface.LiveLinkTimeCode_Base_DEPRECATED
// 0x0010 (0x0010 - 0x0000)
struct FLiveLinkTimeCode_Base_DEPRECATED
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frames;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLiveLinkFrameRate                     FrameRate;                                         // 0x0008(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkTimeCode_Base_DEPRECATED) == 0x000004, "Wrong alignment on FLiveLinkTimeCode_Base_DEPRECATED");
static_assert(sizeof(FLiveLinkTimeCode_Base_DEPRECATED) == 0x000010, "Wrong size on FLiveLinkTimeCode_Base_DEPRECATED");
static_assert(offsetof(FLiveLinkTimeCode_Base_DEPRECATED, Seconds) == 0x000000, "Member 'FLiveLinkTimeCode_Base_DEPRECATED::Seconds' has a wrong offset!");
static_assert(offsetof(FLiveLinkTimeCode_Base_DEPRECATED, Frames) == 0x000004, "Member 'FLiveLinkTimeCode_Base_DEPRECATED::Frames' has a wrong offset!");
static_assert(offsetof(FLiveLinkTimeCode_Base_DEPRECATED, FrameRate) == 0x000008, "Member 'FLiveLinkTimeCode_Base_DEPRECATED::FrameRate' has a wrong offset!");

// ScriptStruct LiveLinkInterface.LiveLinkTimeCode
// 0x0000 (0x0010 - 0x0010)
struct FLiveLinkTimeCode final : public FLiveLinkTimeCode_Base_DEPRECATED
{
};
static_assert(alignof(FLiveLinkTimeCode) == 0x000004, "Wrong alignment on FLiveLinkTimeCode");
static_assert(sizeof(FLiveLinkTimeCode) == 0x000010, "Wrong size on FLiveLinkTimeCode");

// ScriptStruct LiveLinkInterface.LiveLinkSubjectName
// 0x0008 (0x0008 - 0x0000)
struct FLiveLinkSubjectName final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLiveLinkSubjectName) == 0x000004, "Wrong alignment on FLiveLinkSubjectName");
static_assert(sizeof(FLiveLinkSubjectName) == 0x000008, "Wrong size on FLiveLinkSubjectName");
static_assert(offsetof(FLiveLinkSubjectName, Name) == 0x000000, "Member 'FLiveLinkSubjectName::Name' has a wrong offset!");

}

