#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GCNL_EdgeOfStorm

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GCNL_EdgeOfStorm.GCNL_EdgeOfStorm_C
// 0x0020 (0x07B0 - 0x0790)
class AGCNL_EdgeOfStorm_C final : public AFortGameplayCueNotify_Loop
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0790(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        StormPawn;                                         // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBoundAudioPercent;                                // 0x07A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A9[0x3];                                      // 0x07A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentPlaybackPercent;                            // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GCNL_EdgeOfStorm(int32 EntryPoint);
	void Deactivated();
	void Activated(const struct FVector& EdgeOfStorm);
	bool OnActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	bool OnExecute(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	bool OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GCNL_EdgeOfStorm_C">();
	}
	static class AGCNL_EdgeOfStorm_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGCNL_EdgeOfStorm_C>();
	}
};
static_assert(alignof(AGCNL_EdgeOfStorm_C) == 0x000008, "Wrong alignment on AGCNL_EdgeOfStorm_C");
static_assert(sizeof(AGCNL_EdgeOfStorm_C) == 0x0007B0, "Wrong size on AGCNL_EdgeOfStorm_C");
static_assert(offsetof(AGCNL_EdgeOfStorm_C, UberGraphFrame) == 0x000790, "Member 'AGCNL_EdgeOfStorm_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGCNL_EdgeOfStorm_C, Audio) == 0x000798, "Member 'AGCNL_EdgeOfStorm_C::Audio' has a wrong offset!");
static_assert(offsetof(AGCNL_EdgeOfStorm_C, StormPawn) == 0x0007A0, "Member 'AGCNL_EdgeOfStorm_C::StormPawn' has a wrong offset!");
static_assert(offsetof(AGCNL_EdgeOfStorm_C, bBoundAudioPercent) == 0x0007A8, "Member 'AGCNL_EdgeOfStorm_C::bBoundAudioPercent' has a wrong offset!");
static_assert(offsetof(AGCNL_EdgeOfStorm_C, CurrentPlaybackPercent) == 0x0007AC, "Member 'AGCNL_EdgeOfStorm_C::CurrentPlaybackPercent' has a wrong offset!");

}

