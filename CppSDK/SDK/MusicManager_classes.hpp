#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MusicManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MusicManager.MusicManager_C
// 0x0110 (0x03B0 - 0x02A0)
class AMusicManager_C final : public AFortMusicManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Boss_Music_B;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Boss_Weak_Point_Stinger;                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Boss_DBNO_Music;                                   // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Boss_Music_A;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Gameplay_Music_Fader_Volume_9439D7624B6E99ADF50793B4628A7615; // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Gameplay_Music_Fader__Direction_9439D7624B6E99ADF50793B4628A7615; // 0x02CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Gameplay_Music_Fader;                              // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MusicFrontend;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MusicLobby;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             StingerReturningToAmbientMusic;                    // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GameMode_Current;                                  // 0x02F4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GameMode_Lobby;                                    // 0x02FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GameMode_Frontend;                                 // 0x0304(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   GameMode_InGame;                                   // 0x030C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayStingerWhenReturningToAmbientMusic;            // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingAmbientMusic;                               // 0x0315(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingThreatMusic;                                // 0x0316(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingNearbyEnemiesMusic;                         // 0x0317(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingHuskLowMusic;                               // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingHuskHighMusic;                              // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingLargeEnemyMusic;                            // 0x031A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B[0x1];                                      // 0x031B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastTimeMusicWasStartedOrContinued;                // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentMusicIntensityLevel;                        // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MusicLogicUpdateTickTime;                          // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDurationBeforeMusicCanIncreaseIntensity;        // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntensityIncreaseFadeTime;                         // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMusicFadeStyles                              IntensityIncreaseFadeStyle;                        // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDurationBeforeMusicCanDecreaseInIntensity;      // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntensityDecreaseFadeTime;                         // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMusicFadeStyles                              IntensityDecreaseFadeStyle;                        // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MusicShouldStop;                                   // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayingStingerMusic;                               // 0x0342(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_343[0x1];                                      // 0x0343(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntensityVeryHigh;                                 // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntensityHigh;                                     // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntensityMedium;                                   // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntensityLow;                                      // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMusicAsset*                        DeathMusic;                                        // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Countdown_Music_;                                  // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        Coundown_Atlas_Music;                              // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Mission_Music;                                     // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Boss_Fight;                                     // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        Weak_Point_Music;                                  // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Current_Boss_Music;                                // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortCombatThresholds                         Combat_Threshold;                                  // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Player_Downed_Timer_Handle;                        // 0x0398(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortMusicAsset*                        Current_TOD;                                       // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_MIssion_Timer;                              // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Demeter;                                        // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_MusicManager(int32 EntryPoint);
	void Demeter_Mission(bool Param_Is_Demeter);
	void Get_Valid_Mission_Timer_Update(bool Is_Valid_Mission_Timer);
	void Spawn_from_being_down();
	void OnPlayerSpawned();
	void OnThresholdChange(EFortCombatThresholds OldThreshold, EFortCombatThresholds NewThreshold);
	void Stop_Mission_Music(class UAudioComponent* Param_Mission_Music);
	void Play_Mission_Music(class USoundBase* Sound);
	void Play_Countdown_Music(float Counter);
	void OnPlayerDowned(const struct FFortPlayerDeathReport& DeathReport);
	void OnMusicBankChanged(class UFortMusicManagerBank* NewBank);
	void Gather_Combat_Graph_Tresholds();
	void On_Stinger_Completed(class UFortMusicVoice* Voice);
	void Music_Fade_Out(float Time);
	void Music_Fade_In(float Time);
	void PlayStinger(class UFortMusicAsset* NewMusicAsset);
	void On_Music_Tick();
	void ReceiveBeginPlay();
	void PlayAmbientMusic();
	void OnUpdateMusic();
	void OnDayPhaseChanged(EFortDayPhase Param_CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void Stop_Weakpoint_Music();
	void Start_Weak_Point_Music(class USoundBase* Sound);
	void Player_Fighting_Boss_DBNO();
	void Stop_Boss_DBNO_Music();
	void Start_Boss_DBNO_Music(class USoundBase* Sound);
	void Play_Boss_Music(class USoundBase* Sound);
	void Stop_Boss_Music();
	void Gameplay_Music_Fader__UpdateFunc();
	void Gameplay_Music_Fader__FinishedFunc();
	void UserConstructionScript();
	void ResetMusicBools();
	void Primary_Music_Threshold_(EFortMusicCombatIntensity Intensity, bool bPlayStinger);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MusicManager_C">();
	}
	static class AMusicManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMusicManager_C>();
	}
};
static_assert(alignof(AMusicManager_C) == 0x000008, "Wrong alignment on AMusicManager_C");
static_assert(sizeof(AMusicManager_C) == 0x0003B0, "Wrong size on AMusicManager_C");
static_assert(offsetof(AMusicManager_C, UberGraphFrame) == 0x0002A0, "Member 'AMusicManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Boss_Music_B) == 0x0002A8, "Member 'AMusicManager_C::Boss_Music_B' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Boss_Weak_Point_Stinger) == 0x0002B0, "Member 'AMusicManager_C::Boss_Weak_Point_Stinger' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Boss_DBNO_Music) == 0x0002B8, "Member 'AMusicManager_C::Boss_DBNO_Music' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Boss_Music_A) == 0x0002C0, "Member 'AMusicManager_C::Boss_Music_A' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Gameplay_Music_Fader_Volume_9439D7624B6E99ADF50793B4628A7615) == 0x0002C8, "Member 'AMusicManager_C::Gameplay_Music_Fader_Volume_9439D7624B6E99ADF50793B4628A7615' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Gameplay_Music_Fader__Direction_9439D7624B6E99ADF50793B4628A7615) == 0x0002CC, "Member 'AMusicManager_C::Gameplay_Music_Fader__Direction_9439D7624B6E99ADF50793B4628A7615' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Gameplay_Music_Fader) == 0x0002D0, "Member 'AMusicManager_C::Gameplay_Music_Fader' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicFrontend) == 0x0002D8, "Member 'AMusicManager_C::MusicFrontend' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicLobby) == 0x0002E0, "Member 'AMusicManager_C::MusicLobby' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, StingerReturningToAmbientMusic) == 0x0002E8, "Member 'AMusicManager_C::StingerReturningToAmbientMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Debug) == 0x0002F0, "Member 'AMusicManager_C::Debug' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, GameMode_Current) == 0x0002F4, "Member 'AMusicManager_C::GameMode_Current' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, GameMode_Lobby) == 0x0002FC, "Member 'AMusicManager_C::GameMode_Lobby' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, GameMode_Frontend) == 0x000304, "Member 'AMusicManager_C::GameMode_Frontend' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, GameMode_InGame) == 0x00030C, "Member 'AMusicManager_C::GameMode_InGame' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayStingerWhenReturningToAmbientMusic) == 0x000314, "Member 'AMusicManager_C::PlayStingerWhenReturningToAmbientMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingAmbientMusic) == 0x000315, "Member 'AMusicManager_C::PlayingAmbientMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingThreatMusic) == 0x000316, "Member 'AMusicManager_C::PlayingThreatMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingNearbyEnemiesMusic) == 0x000317, "Member 'AMusicManager_C::PlayingNearbyEnemiesMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingHuskLowMusic) == 0x000318, "Member 'AMusicManager_C::PlayingHuskLowMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingHuskHighMusic) == 0x000319, "Member 'AMusicManager_C::PlayingHuskHighMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingLargeEnemyMusic) == 0x00031A, "Member 'AMusicManager_C::PlayingLargeEnemyMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, LastTimeMusicWasStartedOrContinued) == 0x00031C, "Member 'AMusicManager_C::LastTimeMusicWasStartedOrContinued' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, CurrentMusicIntensityLevel) == 0x000320, "Member 'AMusicManager_C::CurrentMusicIntensityLevel' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, CurrentDayPhase) == 0x000324, "Member 'AMusicManager_C::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicLogicUpdateTickTime) == 0x000328, "Member 'AMusicManager_C::MusicLogicUpdateTickTime' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MinDurationBeforeMusicCanIncreaseIntensity) == 0x00032C, "Member 'AMusicManager_C::MinDurationBeforeMusicCanIncreaseIntensity' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityIncreaseFadeTime) == 0x000330, "Member 'AMusicManager_C::IntensityIncreaseFadeTime' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityIncreaseFadeStyle) == 0x000334, "Member 'AMusicManager_C::IntensityIncreaseFadeStyle' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MinDurationBeforeMusicCanDecreaseInIntensity) == 0x000338, "Member 'AMusicManager_C::MinDurationBeforeMusicCanDecreaseInIntensity' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityDecreaseFadeTime) == 0x00033C, "Member 'AMusicManager_C::IntensityDecreaseFadeTime' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityDecreaseFadeStyle) == 0x000340, "Member 'AMusicManager_C::IntensityDecreaseFadeStyle' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicShouldStop) == 0x000341, "Member 'AMusicManager_C::MusicShouldStop' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, PlayingStingerMusic) == 0x000342, "Member 'AMusicManager_C::PlayingStingerMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityVeryHigh) == 0x000344, "Member 'AMusicManager_C::IntensityVeryHigh' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityHigh) == 0x000348, "Member 'AMusicManager_C::IntensityHigh' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityMedium) == 0x00034C, "Member 'AMusicManager_C::IntensityMedium' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, IntensityLow) == 0x000350, "Member 'AMusicManager_C::IntensityLow' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, DeathMusic) == 0x000358, "Member 'AMusicManager_C::DeathMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Countdown_Music_) == 0x000360, "Member 'AMusicManager_C::Countdown_Music_' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Coundown_Atlas_Music) == 0x000368, "Member 'AMusicManager_C::Coundown_Atlas_Music' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Mission_Music) == 0x000370, "Member 'AMusicManager_C::Mission_Music' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Is_Boss_Fight) == 0x000378, "Member 'AMusicManager_C::Is_Boss_Fight' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Weak_Point_Music) == 0x000380, "Member 'AMusicManager_C::Weak_Point_Music' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Current_Boss_Music) == 0x000388, "Member 'AMusicManager_C::Current_Boss_Music' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Combat_Threshold) == 0x000390, "Member 'AMusicManager_C::Combat_Threshold' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Player_Downed_Timer_Handle) == 0x000398, "Member 'AMusicManager_C::Player_Downed_Timer_Handle' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Current_TOD) == 0x0003A0, "Member 'AMusicManager_C::Current_TOD' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Should_MIssion_Timer) == 0x0003A8, "Member 'AMusicManager_C::Should_MIssion_Timer' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Is_Demeter) == 0x0003A9, "Member 'AMusicManager_C::Is_Demeter' has a wrong offset!");

}

