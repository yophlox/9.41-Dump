#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TT_Ninja_SwordHitsHeal

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function TT_Ninja_SwordHitsHeal.TT_Ninja_SwordHitsHeal_C.InitializeAbilityInstanceInternal
// 0x0020 (0x0020 - 0x0000)
struct TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal final
{
public:
	const class UGameplayAbility*                 AbilityInstance;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UFortTooltipContext*              Context;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGA_Ninja_SwordHitsHeal_C*              K2Node_DynamicCast_AsGA_Ninja_Sword_Hits_Heal;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal) == 0x000008, "Wrong alignment on TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal");
static_assert(sizeof(TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal) == 0x000020, "Wrong size on TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal, AbilityInstance) == 0x000000, "Member 'TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal::AbilityInstance' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal, Context) == 0x000008, "Member 'TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal::Context' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal, K2Node_DynamicCast_AsGA_Ninja_Sword_Hits_Heal) == 0x000010, "Member 'TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal::K2Node_DynamicCast_AsGA_Ninja_Sword_Hits_Heal' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'TT_Ninja_SwordHitsHeal_C_InitializeAbilityInstanceInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function TT_Ninja_SwordHitsHeal.TT_Ninja_SwordHitsHeal_C.GetTextForTokenFromAbilityInstanceInternal
// 0x0070 (0x0070 - 0x0000)
struct TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal final
{
public:
	const class UGameplayAbility*                 AbilityInstance;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGA_Ninja_SwordHitsHeal_C*              K2Node_DynamicCast_AsGA_Ninja_Sword_Hits_Heal;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0058(0x0018)()
};
static_assert(alignof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal) == 0x000008, "Wrong alignment on TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal");
static_assert(sizeof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal) == 0x000070, "Wrong size on TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, AbilityInstance) == 0x000000, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::AbilityInstance' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, Tag) == 0x000008, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::Tag' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, Context) == 0x000010, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::Context' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, Token) == 0x000018, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::Token' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, OutText) == 0x000020, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::OutText' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, ReturnValue) == 0x000038, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::ReturnValue' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000039, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_DynamicCast_AsGA_Ninja_Sword_Hits_Heal) == 0x000040, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_DynamicCast_AsGA_Ninja_Sword_Hits_Heal' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, CallFunc_Round_ReturnValue) == 0x00004C, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000050, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal, CallFunc_Conv_FloatToText_ReturnValue) == 0x000058, "Member 'TT_Ninja_SwordHitsHeal_C_GetTextForTokenFromAbilityInstanceInternal::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");

}

