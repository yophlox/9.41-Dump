#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CommonUI_structs.hpp"
#include "CommonInput_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "JsonUtilities_structs.hpp"
#include "GameSubCatalog_structs.hpp"


namespace SDK
{

// Enum FortniteUI.EFortHitPointModificationReason
// NumValues: 0x0007
enum class EFortHitPointModificationReason : uint8
{
	Invalid                                  = 0,
	InitalSet                                = 1,
	AutoRegen                                = 2,
	ItemRegen                                = 3,
	DamageOverTime                           = 4,
	DamageReceived                           = 5,
	EFortHitPointModificationReason_MAX      = 6,
};

// Enum FortniteUI.EFortBuildingInteraction
// NumValues: 0x0009
enum class EFortBuildingInteraction : uint8
{
	None                                     = 0,
	Build                                    = 1,
	Repair                                   = 2,
	Upgrade                                  = 3,
	Edit                                     = 4,
	BeingModified                            = 5,
	ConfirmEdit                              = 6,
	Creative                                 = 7,
	EFortBuildingInteraction_MAX             = 8,
};

// Enum FortniteUI.EFortBuildingHealthDisplayRule
// NumValues: 0x0004
enum class EFortBuildingHealthDisplayRule : uint8
{
	Never                                    = 0,
	Allowed                                  = 1,
	Always                                   = 2,
	EFortBuildingHealthDisplayRule_MAX       = 3,
};

// Enum FortniteUI.EFortItemCardSize
// NumValues: 0x0008
enum class EFortItemCardSize : uint8
{
	XXS                                      = 0,
	XS                                       = 1,
	S                                        = 2,
	M                                        = 3,
	L                                        = 4,
	XL                                       = 5,
	XXL                                      = 6,
	EFortItemCardSize_MAX                    = 7,
};

// Enum FortniteUI.EFortUIState
// NumValues: 0x000F
enum class EFortUIState : uint8
{
	Invalid                                  = 0,
	Login                                    = 1,
	JoinServer                               = 2,
	SubgameSelect                            = 3,
	FrontEnd                                 = 4,
	PvE_PostGame                             = 5,
	PvP_PostGame                             = 6,
	InGame                                   = 7,
	Cinematic                                = 8,
	Athena                                   = 9,
	AthenaSpectator                          = 10,
	AthenaSpectatorAlt                       = 11,
	Replay                                   = 12,
	AthenaReplay                             = 13,
	MAX                                      = 14,
};

// Enum FortniteUI.EFortStoreState
// NumValues: 0x0014
enum class EFortStoreState : uint8
{
	Error                                    = 0,
	Closed                                   = 1,
	CardPackStore                            = 2,
	CurrencyStore                            = 3,
	WebPayment                               = 4,
	PurchaseOpen                             = 5,
	PackOpen                                 = 6,
	CardEnter                                = 7,
	CardBackReveal                           = 8,
	CardFlip                                 = 9,
	CardFrontReveal                          = 10,
	CardExit                                 = 11,
	SummaryAdd                               = 12,
	PackDestroy                              = 13,
	Summary                                  = 14,
	PresentChoice                            = 15,
	ChoiceMade                               = 16,
	SummaryAddTransition                     = 17,
	MAX_None                                 = 18,
	EFortStoreState_MAX                      = 19,
};

// Enum FortniteUI.EInputPriority
// NumValues: 0x0008
enum class EInputPriority : uint8
{
	Normal                                   = 0,
	Menu                                     = 1,
	Chat                                     = 2,
	Modal                                    = 3,
	Confirmation                             = 4,
	Error                                    = 5,
	HUD                                      = 6,
	EInputPriority_MAX                       = 7,
};

// Enum FortniteUI.ESpectatorPlayerListSortMethod
// NumValues: 0x0006
enum class ESpectatorPlayerListSortMethod : uint8
{
	SquadId                                  = 0,
	PlayerName                               = 1,
	Eliminations                             = 2,
	State                                    = 3,
	Count                                    = 4,
	ESpectatorPlayerListSortMethod_MAX       = 5,
};

// Enum FortniteUI.EFortCollectionBookPopupButtonType
// NumValues: 0x0007
enum class EFortCollectionBookPopupButtonType : uint8
{
	Invalid                                  = 0,
	SelectItem                               = 1,
	Preview                                  = 2,
	Purchase                                 = 3,
	Unslot                                   = 4,
	Back                                     = 5,
	EFortCollectionBookPopupButtonType_MAX   = 6,
};

// Enum FortniteUI.ECollectionBookSectionNavTarget
// NumValues: 0x0003
enum class ECollectionBookSectionNavTarget : uint8
{
	SlotSelect                               = 0,
	SlotPicker                               = 1,
	ECollectionBookSectionNavTarget_MAX      = 2,
};

// Enum FortniteUI.EFortFrontEndFeatureStateReason
// NumValues: 0x0008
enum class EFortFrontEndFeatureStateReason : uint8
{
	Default                                  = 0,
	NoHeroes                                 = 1,
	Tutorial                                 = 2,
	BROnly                                   = 3,
	NoPlayerController                       = 4,
	UnexpectedFeature                        = 5,
	Invalid                                  = 6,
	EFortFrontEndFeatureStateReason_MAX      = 7,
};

// Enum FortniteUI.EFortFrontEndFeatureState
// NumValues: 0x0005
enum class EFortFrontEndFeatureState : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	Hidden                                   = 2,
	Invalid                                  = 3,
	EFortFrontEndFeatureState_MAX            = 4,
};

// Enum FortniteUI.EFortFrontEndFeature
// NumValues: 0x000D
enum class EFortFrontEndFeature : uint8
{
	ShowHomeBase                             = 0,
	ShowHeroList                             = 1,
	ShowVault                                = 2,
	ShowStore                                = 3,
	PlayZone                                 = 4,
	ShowDailyRewards                         = 5,
	ShowHeroSelect                           = 6,
	RecruitHero                              = 7,
	ShowHomeBaseOverview                     = 8,
	STWArmory_Transform                      = 9,
	STWArmory_CollectionBook                 = 10,
	MAX_None                                 = 11,
	EFortFrontEndFeature_MAX                 = 12,
};

// Enum FortniteUI.EFortUIFeatureStateReason
// NumValues: 0x000A
enum class EFortUIFeatureStateReason : uint8
{
	Default                                  = 0,
	Tutorial                                 = 1,
	ContentInstall                           = 2,
	AccountRestrictions                      = 3,
	Platform                                 = 4,
	SeasonOrEventNotActive                   = 5,
	NoPlayerController                       = 6,
	UnexpectedFeature                        = 7,
	Invalid                                  = 8,
	EFortUIFeatureStateReason_MAX            = 9,
};

// Enum FortniteUI.EFortUIFeatureState
// NumValues: 0x0005
enum class EFortUIFeatureState : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	Hidden                                   = 2,
	Invalid                                  = 3,
	EFortUIFeatureState_MAX                  = 4,
};

// Enum FortniteUI.EFortUIFeature
// NumValues: 0x0038
enum class EFortUIFeature : uint8
{
	ShowHome                                 = 0,
	ShowPlay                                 = 1,
	ShowCommand                              = 2,
	ShowHeros                                = 3,
	ShowSquads                               = 4,
	ShowArmory                               = 5,
	ShowLocker                               = 6,
	ShowSkillTree                            = 7,
	ShowStore                                = 8,
	ShowQuests                               = 9,
	ShowMainStore                            = 10,
	ShowContextHelpMenu                      = 11,
	ShowCampaign                             = 12,
	ShowActiveBoost                          = 13,
	ShowJournal                              = 14,
	ShowPartyBar                             = 15,
	ShowChatWindow                           = 16,
	ShowFriendsMenu                          = 17,
	ShowObjectives                           = 18,
	ShowRatingIconsInTopbar                  = 19,
	ShowAntiAddictionMessage                 = 20,
	ShowMinorShutdownMessage                 = 21,
	ShowHealthWarningScreen                  = 22,
	ShowSimplifiedHUD                        = 23,
	LargeHeaderFooterButtons                 = 24,
	ShowAthenaFavoriting                     = 25,
	ShowAthenaItemRandomization              = 26,
	ShowAthenaChallenges                     = 27,
	ShowBattlePass                           = 28,
	ShowBattlePassFAQ                        = 29,
	ShowReplays                              = 30,
	ShowProfileStatsUI                       = 31,
	ShowAthenaItemShop                       = 32,
	ShowShowdown                             = 33,
	ShowAccountBoosts                        = 34,
	ShowCustomerSupport                      = 35,
	ShowGlobalChat                           = 36,
	ShowEULA                                 = 37,
	ShowEndOfZoneCinematic                   = 38,
	ShowOnboardingCinematics                 = 39,
	ShowFounderBannerIcons                   = 40,
	ShowCurrentRegionInLobby                 = 41,
	ShowPrerollLlamas                        = 42,
	EnableFoundersDailyRewards               = 43,
	EnableTwitchIntegration                  = 44,
	EnableMatchmakingRegionSetting           = 45,
	EnableLanguageSetting                    = 46,
	EnableFriendCodeSetting                  = 47,
	EnableEarlyAccessLoadingScreenBanner     = 48,
	EnableAlterationModifications            = 49,
	EnableSchematicRarityUpgrade             = 50,
	EnableMissionActivationVote              = 51,
	EnableLtmRetrieveTheData                 = 52,
	EnableUpgradesVideos                     = 53,
	Max_None                                 = 54,
	EFortUIFeature_MAX                       = 55,
};

// Enum FortniteUI.EFlagStatus
// NumValues: 0x0003
enum class EFlagStatus : uint8
{
	FlagPresent                              = 0,
	FlagNotPresent                           = 1,
	EFlagStatus_MAX                          = 2,
};

// Enum FortniteUI.EFortInputMode
// NumValues: 0x0004
enum class EFortInputMode : uint8
{
	Frontend                                 = 0,
	InGame                                   = 1,
	InGameCursor                             = 2,
	EFortInputMode_MAX                       = 3,
};

// Enum FortniteUI.EFortUrlType
// NumValues: 0x0005
enum class EFortUrlType : uint8
{
	NormalWebLink                            = 0,
	AccountCreationLink                      = 1,
	HelpLink                                 = 2,
	EULALink                                 = 3,
	EFortUrlType_MAX                         = 4,
};

// Enum FortniteUI.EItemDisassembleRestrictionReason
// NumValues: 0x0003
enum class EItemDisassembleRestrictionReason : uint8
{
	InnatelyCannotDisassemble                = 0,
	ItemWasGifted                            = 1,
	EItemDisassembleRestrictionReason_MAX    = 2,
};

// Enum FortniteUI.EItemRecyclingRestrictionReason
// NumValues: 0x0006
enum class EItemRecyclingRestrictionReason : uint8
{
	InnatelyUnrecyclable                     = 0,
	IsSlottedGroundOperative                 = 1,
	MissingCatalyst                          = 2,
	ItemOutOnExpedition                      = 3,
	InUseByCrafting                          = 4,
	EItemRecyclingRestrictionReason_MAX      = 5,
};

// Enum FortniteUI.EItemRecyclingWarning
// NumValues: 0x0005
enum class EItemRecyclingWarning : uint8
{
	HighLevel                                = 0,
	HighRarity                               = 1,
	HighTier                                 = 2,
	CanSlotInCollectionBook                  = 3,
	EItemRecyclingWarning_MAX                = 4,
};

// Enum FortniteUI.EConversionControlKeyRequest
// NumValues: 0x0004
enum class EConversionControlKeyRequest : uint8
{
	AllKeys                                  = 0,
	NonConsumableKeys                        = 1,
	ConsumableKeys                           = 2,
	EConversionControlKeyRequest_MAX         = 3,
};

// Enum FortniteUI.EVaultItemLimitStatus
// NumValues: 0x0005
enum class EVaultItemLimitStatus : uint8
{
	WellBelowCapacity                        = 0,
	NearCapacity                             = 1,
	AtCapacity                               = 2,
	OverCapacity                             = 3,
	EVaultItemLimitStatus_MAX                = 4,
};

// Enum FortniteUI.EFortItemCooldownType
// NumValues: 0x0007
enum class EFortItemCooldownType : uint8
{
	None                                     = 0,
	AmmoRegeneration                         = 1,
	ItemActivation                           = 2,
	WeaponReloading                          = 3,
	Death                                    = 4,
	AthenaWeaponFireCooldown                 = 5,
	EFortItemCooldownType_MAX                = 6,
};

// Enum FortniteUI.EFortTutorialGlowType
// NumValues: 0x0004
enum class EFortTutorialGlowType : uint8
{
	None                                     = 0,
	Look                                     = 1,
	Click                                    = 2,
	EFortTutorialGlowType_MAX                = 3,
};

// Enum FortniteUI.EFortBangSize
// NumValues: 0x0007
enum class EFortBangSize : uint8
{
	XXS                                      = 0,
	XS                                       = 1,
	S                                        = 2,
	M                                        = 3,
	L                                        = 4,
	XL                                       = 5,
	EFortBangSize_MAX                        = 6,
};

// Enum FortniteUI.EViewerNavigationDirection
// NumValues: 0x0003
enum class EViewerNavigationDirection : uint8
{
	Previous                                 = 0,
	Next                                     = 1,
	EViewerNavigationDirection_MAX           = 2,
};

// Enum FortniteUI.EHeroLoadoutSlotType
// NumValues: 0x0005
enum class EHeroLoadoutSlotType : uint8
{
	CommanderSlot                            = 0,
	TeamPerkSlot                             = 1,
	CrewSlot                                 = 2,
	GadgetSlot                               = 3,
	EHeroLoadoutSlotType_MAX                 = 4,
};

// Enum FortniteUI.EGridSortKind
// NumValues: 0x0006
enum class EGridSortKind : uint8
{
	None                                     = 0,
	ByNumber                                 = 1,
	ByString                                 = 2,
	ByNumberThenString                       = 3,
	ByStringThenNumber                       = 4,
	EGridSortKind_MAX                        = 5,
};

// Enum FortniteUI.ESquadSlotSortType
// NumValues: 0x0006
enum class ESquadSlotSortType : uint8
{
	ByRating                                 = 0,
	ByLevel                                  = 1,
	ByRarity                                 = 2,
	ByBonus                                  = 3,
	ByMatch                                  = 4,
	ESquadSlotSortType_MAX                   = 5,
};

// Enum FortniteUI.ECountdownDisplay
// NumValues: 0x0003
enum class ECountdownDisplay : uint8
{
	EventEndTime                             = 0,
	ChallengeUnlockTime                      = 1,
	MAX                                      = 2,
};

// Enum FortniteUI.EChallengeInfoPage
// NumValues: 0x0004
enum class EChallengeInfoPage : uint8
{
	PartyAssist                              = 0,
	Daily                                    = 1,
	Suggested                                = 2,
	EChallengeInfoPage_MAX                   = 3,
};

// Enum FortniteUI.EChallengeListSection
// NumValues: 0x0006
enum class EChallengeListSection : uint8
{
	SpecialOffers                            = 0,
	CompletionRewards                        = 1,
	AllChallenges                            = 2,
	FreeChallenges                           = 3,
	PaidChallenges                           = 4,
	EChallengeListSection_MAX                = 5,
};

// Enum FortniteUI.EEquippedWeaponDisplay
// NumValues: 0x0005
enum class EEquippedWeaponDisplay : uint8
{
	None                                     = 0,
	Resource                                 = 1,
	Magazine                                 = 2,
	Utility                                  = 3,
	EEquippedWeaponDisplay_MAX               = 4,
};

// Enum FortniteUI.EAthenaEventMatchInfoSortMethod
// NumValues: 0x0004
enum class EAthenaEventMatchInfoSortMethod : uint8
{
	Eliminations                             = 0,
	Place                                    = 1,
	Count                                    = 2,
	EAthenaEventMatchInfoSortMethod_MAX      = 3,
};

// Enum FortniteUI.EAthenaPlayerActionAlert
// NumValues: 0x0006
enum class EAthenaPlayerActionAlert : uint8
{
	PlayerDown                               = 0,
	PlayerKill                               = 1,
	EnteredStorm                             = 2,
	NewZebulonDrone                          = 3,
	NewZebulonDroneYou                       = 4,
	EAthenaPlayerActionAlert_MAX             = 5,
};

// Enum FortniteUI.EFortAthenaPlaylist
// NumValues: 0x0004
enum class EFortAthenaPlaylist : uint8
{
	AthenaSolo                               = 0,
	AthenaDuo                                = 1,
	AthenaSquad                              = 2,
	EFortAthenaPlaylist_MAX                  = 3,
};

// Enum FortniteUI.EFortMarkerActions
// NumValues: 0x0004
enum class EFortMarkerActions : uint8
{
	None                                     = 0,
	Cancel                                   = 1,
	Confirm                                  = 2,
	EFortMarkerActions_MAX                   = 3,
};

// Enum FortniteUI.EHealthBarType
// NumValues: 0x0005
enum class EHealthBarType : uint8
{
	Health                                   = 0,
	Shield                                   = 1,
	Stamina                                  = 2,
	VehicleHealth                            = 3,
	EHealthBarType_MAX                       = 4,
};

// Enum FortniteUI.EAthenaSquadListUpdateType
// NumValues: 0x0004
enum class EAthenaSquadListUpdateType : uint8
{
	None                                     = 0,
	CanResurrect                             = 1,
	FindResurrectChip                        = 2,
	EAthenaSquadListUpdateType_MAX           = 3,
};

// Enum FortniteUI.ERespawnUIState
// NumValues: 0x0004
enum class ERespawnUIState : uint8
{
	Hidden                                   = 0,
	ShowRespawnEnabled                       = 1,
	ShowRespawnDisabled                      = 2,
	ERespawnUIState_MAX                      = 3,
};

// Enum FortniteUI.ESpectatorBuildCountType
// NumValues: 0x0005
enum class ESpectatorBuildCountType : uint8
{
	BuildCount                               = 0,
	Wood                                     = 1,
	Stone                                    = 2,
	Metal                                    = 3,
	ESpectatorBuildCountType_MAX             = 4,
};

// Enum FortniteUI.ESpectatorMapPlayerListState
// NumValues: 0x0004
enum class ESpectatorMapPlayerListState : uint8
{
	Default                                  = 0,
	Irrelevant                               = 1,
	Eliminated                               = 2,
	ESpectatorMapPlayerListState_MAX         = 3,
};

// Enum FortniteUI.EAthenaSpectatorNameplateDetailState
// NumValues: 0x0005
enum class EAthenaSpectatorNameplateDetailState : uint8
{
	High                                     = 0,
	Low                                      = 1,
	Arrow                                    = 2,
	Off                                      = 3,
	EAthenaSpectatorNameplateDetailState_MAX = 4,
};

// Enum FortniteUI.EAthenaSpectatorNameplateDistanceState
// NumValues: 0x0004
enum class EAthenaSpectatorNameplateDistanceState : uint8
{
	Near                                     = 0,
	MidDistance                              = 1,
	FurtherThanMaxDistance                   = 2,
	EAthenaSpectatorNameplateDistanceState_MAX = 3,
};

// Enum FortniteUI.EStormSurgeThresholdType
// NumValues: 0x0005
enum class EStormSurgeThresholdType : uint8
{
	None                                     = 0,
	Above                                    = 1,
	Below                                    = 2,
	Equal                                    = 3,
	EStormSurgeThresholdType_MAX             = 4,
};

// Enum FortniteUI.EComboSlotType
// NumValues: 0x0006
enum class EComboSlotType : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Combo                                    = 2,
	Creative                                 = 3,
	COUNT                                    = 4,
	EComboSlotType_MAX                       = 5,
};

// Enum FortniteUI.EBacchusSignalQuality
// NumValues: 0x0005
enum class EBacchusSignalQuality : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	EBacchusSignalQuality_MAX                = 4,
};

// Enum FortniteUI.EAthenaNewsStyle
// NumValues: 0x0003
enum class EAthenaNewsStyle : uint8
{
	None                                     = 0,
	SpecialEvent                             = 1,
	EAthenaNewsStyle_MAX                     = 2,
};

// Enum FortniteUI.ESubGameFilter
// NumValues: 0x0004
enum class ESubGameFilter : uint32
{
	All                                      = 0,
	SaveTheWorld                             = 1,
	BattleRoyale                             = 2,
	ESubGameFilter_MAX                       = 3,
};

// Enum FortniteUI.ESurvivalObjectiveIconState
// NumValues: 0x0004
enum class ESurvivalObjectiveIconState : uint8
{
	None                                     = 0,
	Spawned                                  = 1,
	Destroyed                                = 2,
	ESurvivalObjectiveIconState_MAX          = 3,
};

// Enum FortniteUI.EDiscoCaptureUIState
// NumValues: 0x0006
enum class EDiscoCaptureUIState : uint8
{
	None                                     = 0,
	Hidden                                   = 1,
	Dance                                    = 2,
	Capturing                                = 3,
	Contested                                = 4,
	EDiscoCaptureUIState_MAX                 = 5,
};

// Enum FortniteUI.EDiscoScoreProgressTypes
// NumValues: 0x0007
enum class EDiscoScoreProgressTypes : uint8
{
	None                                     = 0,
	ProgressSoundMild                        = 1,
	ProgressSoundMedium                      = 2,
	ProgressSoundStrong                      = 3,
	CountdownSoundNormal                     = 4,
	CountdownSoundStrong                     = 5,
	EDiscoScoreProgressTypes_MAX             = 6,
};

// Enum FortniteUI.EDiscoCaptureProgressState
// NumValues: 0x0004
enum class EDiscoCaptureProgressState : uint8
{
	None                                     = 0,
	AllyProgress                             = 1,
	EnemyProgress                            = 2,
	EDiscoCaptureProgressState_MAX           = 3,
};

// Enum FortniteUI.EDiscoCaptureIconState
// NumValues: 0x0006
enum class EDiscoCaptureIconState : uint8
{
	None                                     = 0,
	Hidden                                   = 1,
	Neutral                                  = 2,
	AllyCaptured                             = 3,
	EnemyCaptured                            = 4,
	EDiscoCaptureIconState_MAX               = 5,
};

// Enum FortniteUI.EPlayerReportingStep
// NumValues: 0x0004
enum class EPlayerReportingStep : uint8
{
	ReportingReason                          = 0,
	ReportingPlayer                          = 1,
	AdditionalInfo                           = 2,
	EPlayerReportingStep_MAX                 = 3,
};

// Enum FortniteUI.EFortAlterationOptionType
// NumValues: 0x0004
enum class EFortAlterationOptionType : uint8
{
	Upgrade                                  = 0,
	Replacement                              = 1,
	Max_NONE                                 = 2,
	EFortAlterationOptionType_MAX            = 3,
};

// Enum FortniteUI.EFortAlterationWidgetState
// NumValues: 0x0004
enum class EFortAlterationWidgetState : uint8
{
	Normal                                   = 0,
	Upgrade                                  = 1,
	Evolution                                = 2,
	EFortAlterationWidgetState_MAX           = 3,
};

// Enum FortniteUI.EFillDisableReason
// NumValues: 0x0008
enum class EFillDisableReason : uint8
{
	Enabled                                  = 0,
	FillDisabledOnPlaylist                   = 1,
	NotPartyLeader                           = 2,
	AlreadyMatchmaking                       = 3,
	PartyTooSmall                            = 4,
	PartyTooBig                              = 5,
	InactiveTournament                       = 6,
	EFillDisableReason_MAX                   = 7,
};

// Enum FortniteUI.EServerAccessSetting
// NumValues: 0x0004
enum class EServerAccessSetting : uint8
{
	Invalid                                  = 0,
	FriendsOfCurrentPlayers                  = 1,
	LeaderInviteOnly                         = 2,
	EServerAccessSetting_MAX                 = 3,
};

// Enum FortniteUI.ESpectatorQueueType
// NumValues: 0x0004
enum class ESpectatorQueueType : uint8
{
	Invalid                                  = 0,
	Player                                   = 1,
	Spectator                                = 2,
	ESpectatorQueueType_MAX                  = 3,
};

// Enum FortniteUI.ESquadFillSetting
// NumValues: 0x0004
enum class ESquadFillSetting : uint8
{
	Invalid                                  = 0,
	Fill                                     = 1,
	NoFill                                   = 2,
	ESquadFillSetting_MAX                    = 3,
};

// Enum FortniteUI.EFortMemberConnectionState
// NumValues: 0x0005
enum class EFortMemberConnectionState : uint8
{
	Open                                     = 0,
	Connecting                               = 1,
	Connected                                = 2,
	Invalid                                  = 3,
	EFortMemberConnectionState_MAX           = 4,
};

// Enum FortniteUI.ECollectionBookRewardStatus
// NumValues: 0x0004
enum class ECollectionBookRewardStatus : uint8
{
	Unknown                                  = 0,
	Available                                = 1,
	Claimed                                  = 2,
	ECollectionBookRewardStatus_MAX          = 3,
};

// Enum FortniteUI.ECollectionBookPrimaryNavTarget
// NumValues: 0x0003
enum class ECollectionBookPrimaryNavTarget : uint8
{
	Overview                                 = 0,
	SectionTileView                          = 1,
	ECollectionBookPrimaryNavTarget_MAX      = 2,
};

// Enum FortniteUI.EFortContentControlsSettingType
// NumValues: 0x0009
enum class EFortContentControlsSettingType : uint8
{
	AutoDeclineFriendRequests                = 0,
	FilterMatureLanguage                     = 1,
	VoiceChat                                = 2,
	HideYourName                             = 3,
	HideOtherNames                           = 4,
	PlaytimeReporting                        = 5,
	PurchaseReporting                        = 6,
	InvalidOrMax                             = 7,
	EFortContentControlsSettingType_MAX      = 8,
};

// Enum FortniteUI.EFortCreativeIslandLinkCategory
// NumValues: 0x0005
enum class EFortCreativeIslandLinkCategory : uint8
{
	Default                                  = 0,
	Favorite                                 = 1,
	Published                                = 2,
	Recent                                   = 3,
	EFortCreativeIslandLinkCategory_MAX      = 4,
};

// Enum FortniteUI.EFortCreativeIslandLinkValidationResult
// NumValues: 0x0007
enum class EFortCreativeIslandLinkValidationResult : uint8
{
	Unknown                                  = 0,
	Success                                  = 1,
	IslandNotFound                           = 2,
	InvalidKeyTooShort                       = 3,
	InvalidKeyTooLong                        = 4,
	InvalidKeyCharacters                     = 5,
	EFortCreativeIslandLinkValidationResult_MAX = 6,
};

// Enum FortniteUI.EFortCreativeServerPrivacySetting
// NumValues: 0x0004
enum class EFortCreativeServerPrivacySetting : uint8
{
	Unknown                                  = 0,
	Private                                  = 1,
	Public                                   = 2,
	EFortCreativeServerPrivacySetting_MAX    = 3,
};

// Enum FortniteUI.EFortDefenderSlotType
// NumValues: 0x0004
enum class EFortDefenderSlotType : uint8
{
	Invalid                                  = 0,
	Defender                                 = 1,
	Weapon                                   = 2,
	EFortDefenderSlotType_MAX                = 3,
};

// Enum FortniteUI.EDynamicEntryPatternDirection
// NumValues: 0x0003
enum class EDynamicEntryPatternDirection : uint8
{
	FirstToLast                              = 0,
	LastToFirst                              = 1,
	EDynamicEntryPatternDirection_MAX        = 2,
};

// Enum FortniteUI.EFortExpeditionListSort
// NumValues: 0x0004
enum class EFortExpeditionListSort : uint8
{
	ByRating                                 = 0,
	ByDuration                               = 1,
	ByName                                   = 2,
	EFortExpeditionListSort_MAX              = 3,
};

// Enum FortniteUI.EShareButtonType
// NumValues: 0x0004
enum class EShareButtonType : uint8
{
	IOS                                      = 0,
	Android                                  = 1,
	Generic                                  = 2,
	EShareButtonType_MAX                     = 3,
};

// Enum FortniteUI.EFrontEndRewardType
// NumValues: 0x000A
enum class EFrontEndRewardType : uint8
{
	Mission                                  = 0,
	Quest                                    = 1,
	EpicNewQuest                             = 2,
	Expedition                               = 3,
	CollectionBook                           = 4,
	MissionAlert                             = 5,
	DifficultyIncrease                       = 6,
	GiftBox                                  = 7,
	ItemCache                                = 8,
	EFrontEndRewardType_MAX                  = 9,
};

// Enum FortniteUI.EFortUIGameFeedbackType
// NumValues: 0x0005
enum class EFortUIGameFeedbackType : uint8
{
	Bug                                      = 0,
	Comment                                  = 1,
	Content                                  = 2,
	EpicQABug                                = 3,
	EFortUIGameFeedbackType_MAX              = 4,
};

// Enum FortniteUI.ESelectionState
// NumValues: 0x0004
enum class ESelectionState : uint8
{
	Unselected                               = 0,
	Selected                                 = 1,
	CannotGift                               = 2,
	ESelectionState_MAX                      = 3,
};

// Enum FortniteUI.EFortHeroPerkDisplayType
// NumValues: 0x0006
enum class EFortHeroPerkDisplayType : uint8
{
	CommanderPerk                            = 0,
	TeamPerk                                 = 1,
	ClassPerk                                = 2,
	StandardPerk                             = 3,
	Max_None                                 = 4,
	EFortHeroPerkDisplayType_MAX             = 5,
};

// Enum FortniteUI.EFortSupportPerkWidgetState
// NumValues: 0x0004
enum class EFortSupportPerkWidgetState : uint8
{
	Normal                                   = 0,
	Upgrade                                  = 1,
	Evolution                                = 2,
	EFortSupportPerkWidgetState_MAX          = 3,
};

// Enum FortniteUI.ECenterPopupMessageStateEnum
// NumValues: 0x0005
enum class ECenterPopupMessageStateEnum : uint8
{
	NotVisible                               = 0,
	WaitingForMatchDelayCountDown            = 1,
	WaitingForOutpostOwner                   = 2,
	WaitingForPlayers                        = 3,
	ECenterPopupMessageStateEnum_MAX         = 4,
};

// Enum FortniteUI.EBuildingFocusType
// NumValues: 0x0005
enum class EBuildingFocusType : uint8
{
	Contextual                               = 0,
	Interactable                             = 1,
	Normal                                   = 2,
	Count                                    = 3,
	EBuildingFocusType_MAX                   = 4,
};

// Enum FortniteUI.EFortItemCountStyle
// NumValues: 0x0004
enum class EFortItemCountStyle : uint8
{
	StackCount                               = 0,
	OverrideCount                            = 1,
	StackCountOverOverride                   = 2,
	EFortItemCountStyle_MAX                  = 3,
};

// Enum FortniteUI.EFortItemInspectionMode
// NumValues: 0x0007
enum class EFortItemInspectionMode : uint8
{
	Overview                                 = 0,
	Details                                  = 1,
	View                                     = 2,
	Evolution                                = 3,
	Upgrade                                  = 4,
	UpgradeRarity                            = 5,
	EFortItemInspectionMode_MAX              = 6,
};

// Enum FortniteUI.EFortItemManagementMode
// NumValues: 0x0004
enum class EFortItemManagementMode : uint8
{
	Details                                  = 0,
	Comparison                               = 1,
	Mulch                                    = 2,
	EFortItemManagementMode_MAX              = 3,
};

// Enum FortniteUI.EFortKeybindForcedHoldStatus
// NumValues: 0x0004
enum class EFortKeybindForcedHoldStatus : uint8
{
	NoForcedHold                             = 0,
	ForcedHold                               = 1,
	NeverShowHold                            = 2,
	EFortKeybindForcedHoldStatus_MAX         = 3,
};

// Enum FortniteUI.EFortLegacySlateWidget
// NumValues: 0x0003
enum class EFortLegacySlateWidget : uint8
{
	None                                     = 0,
	Minimap                                  = 1,
	MAX                                      = 2,
};

// Enum FortniteUI.ELocalUserOnlineStatus
// NumValues: 0x0007
enum class ELocalUserOnlineStatus : uint8
{
	Online                                   = 0,
	Offline                                  = 1,
	Away                                     = 2,
	ExtendedAway                             = 3,
	DoNotDisturb                             = 4,
	Chat                                     = 5,
	ELocalUserOnlineStatus_MAX               = 6,
};

// Enum FortniteUI.EFortLoginInteraction
// NumValues: 0x000E
enum class EFortLoginInteraction : uint8
{
	Begin                                    = 0,
	PlayedBefore                             = 1,
	CredentialSelect                         = 2,
	NamePassword                             = 3,
	RedirectEpicAccount                      = 4,
	AccountNotFound                          = 5,
	CreateDisplayName                        = 6,
	MultiFactorAuth                          = 7,
	EULA                                     = 8,
	AccountLink                              = 9,
	AccountPinLink                           = 10,
	WebLogin                                 = 11,
	WebAccountCreation                       = 12,
	EFortLoginInteraction_MAX                = 13,
};

// Enum FortniteUI.EFortMaterialProgressBarSectionOverflowBehavior
// NumValues: 0x0003
enum class EFortMaterialProgressBarSectionOverflowBehavior : uint8
{
	PreserveValues                           = 0,
	ReverseCollapse                          = 1,
	EFortMaterialProgressBarSectionOverflowBehavior_MAX = 2,
};

// Enum FortniteUI.EFortMaterialProgressBarSectionColorNumber
// NumValues: 0x0003
enum class EFortMaterialProgressBarSectionColorNumber : uint8
{
	Color1                                   = 0,
	Color2                                   = 1,
	EFortMaterialProgressBarSectionColorNumber_MAX = 2,
};

// Enum FortniteUI.EFortMaterialProgressBarSection
// NumValues: 0x0006
enum class EFortMaterialProgressBarSection : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tertiary                                 = 2,
	Negative                                 = 3,
	MAX_PROGRESS_BAR_SECTIONS                = 4,
	EFortMaterialProgressBarSection_MAX      = 5,
};

// Enum FortniteUI.EFortMissionActivationWidgetState
// NumValues: 0x0005
enum class EFortMissionActivationWidgetState : uint8
{
	Default                                  = 0,
	StartObjective                           = 1,
	IncreaseDifficulty                       = 2,
	Invalid                                  = 3,
	EFortMissionActivationWidgetState_MAX    = 4,
};

// Enum FortniteUI.EFortFortMobileShareButtonOS
// NumValues: 0x0003
enum class EFortFortMobileShareButtonOS : uint8
{
	Android                                  = 0,
	IOS                                      = 1,
	EFortFortMobileShareButtonOS_MAX         = 2,
};

// Enum FortniteUI.EModalContainerSlot
// NumValues: 0x0005
enum class EModalContainerSlot : uint8
{
	Top                                      = 0,
	Middle                                   = 1,
	Bottom                                   = 2,
	Background                               = 3,
	Max                                      = 4,
};

// Enum FortniteUI.EFortMtxStoreOfferType
// NumValues: 0x0005
enum class EFortMtxStoreOfferType : uint8
{
	FoundersPack                             = 0,
	CurrencyPack                             = 1,
	Unknown                                  = 2,
	Max_None                                 = 3,
	EFortMtxStoreOfferType_MAX               = 4,
};

// Enum FortniteUI.ESettingTab
// NumValues: 0x000D
enum class ESettingTab : uint8
{
	None                                     = 0,
	Video                                    = 1,
	Game                                     = 2,
	Brightness                               = 3,
	Audio                                    = 4,
	Accessibility                            = 5,
	Input                                    = 6,
	Controller                               = 7,
	ControllerSensitivity                    = 8,
	Account                                  = 9,
	CreativeWorld                            = 10,
	CreativePlayer                           = 11,
	ESettingTab_MAX                          = 12,
};

// Enum FortniteUI.ESettingValueType
// NumValues: 0x0004
enum class ESettingValueType : uint8
{
	None                                     = 0,
	Rotator                                  = 1,
	Slider                                   = 2,
	ESettingValueType_MAX                    = 3,
};

// Enum FortniteUI.ESettingType
// NumValues: 0x0092
enum class ESettingType : uint8
{
	None                                     = 0,
	Header                                   = 1,
	WindowMode                               = 2,
	DisplayResolution                        = 3,
	FrameRateLimit                           = 4,
	VideoQuality                             = 5,
	ThreeDResolution                         = 6,
	ViewDistance                             = 7,
	Shadows                                  = 8,
	AntiAliasing                             = 9,
	Textures                                 = 10,
	Effects                                  = 11,
	PostProcessing                           = 12,
	VSync                                    = 13,
	MotionBlur                               = 14,
	ShowGrass                                = 15,
	MobileFPSType                            = 16,
	ShowFPS                                  = 17,
	AllowLowPower                            = 18,
	AllowVideoPlayback                       = 19,
	AllowDynamicResolution                   = 20,
	AllowMultithreadedRendering              = 21,
	RegionHeader                             = 22,
	Language                                 = 23,
	Region                                   = 24,
	MouseSensitivityYaw                      = 25,
	MouseSensitivityPitch                    = 26,
	MouseSensitivityMultiplierForAircraft    = 27,
	TouchDragSensitivity                     = 28,
	ControllerLookSensitivityYaw             = 29,
	ControllerLookSensitivityPitch           = 30,
	MouseTargetingMultiplier                 = 31,
	MouseScopedMultiplier                    = 32,
	GamepadTargetingMultiplier               = 33,
	GamepadScopedMultiplier                  = 34,
	GamepadBuildingMultiplier                = 35,
	GamepadEditModeMultiplier                = 36,
	TouchDragTargetingSensitivity            = 37,
	TouchDragScopedSensitivity               = 38,
	TouchVerticalSensitivity                 = 39,
	InvertPitch                              = 40,
	InvertYaw                                = 41,
	InvertPitchForMotion                     = 42,
	InvertPitchForAircraftPrimary            = 43,
	InvertPitchForAircraftSecondary          = 44,
	InvertYawForMotion                       = 45,
	GyroEnabled                              = 46,
	GyroYawAxis                              = 47,
	GyroSensitivity                          = 48,
	GyroTargetingSensitivity                 = 49,
	GyroScopedSensitivity                    = 50,
	GyroHarvestingToolSensitivity            = 51,
	SafeZone                                 = 52,
	AnonymousMode                            = 53,
	AnonymousCharacterMode                   = 54,
	HideOtherPlayerNames                     = 55,
	HiddenMatchmakingDelay                   = 56,
	AutoJoinGameVoiceChannel                 = 57,
	ShowVoiceIndicators                      = 58,
	HUDScale                                 = 59,
	ShowViewerCount                          = 60,
	FirstPersonCamera                        = 61,
	PeripheralLighting                       = 62,
	PingPlaceDangerMarkerWhenTargeting       = 63,
	ShowGlobalChat                           = 64,
	ConsoleUnlockedFPS                       = 65,
	ToggleSprint                             = 66,
	SprintByDefault                          = 67,
	SprintCancelsReload                      = 68,
	TapInteract                              = 69,
	ToggleTargeting                          = 70,
	HoldToSwapPickup                         = 71,
	AutoEquipBetterItems                     = 72,
	EquipFirstBuildingPieceWhenSwappingQuickbars = 73,
	EquipFirstBuildingPieceWhenSwappingQuickbarsAthena = 74,
	AimAssist                                = 75,
	EditModeAimAssist                        = 76,
	TouchEdit                                = 77,
	TurboBuild                               = 78,
	CreativeTurboDelete                      = 79,
	AutoChangeMaterial                       = 80,
	GamepadAutoRun                           = 81,
	CrossplayPreference                      = 82,
	UseTapToShoot                            = 83,
	AutoOpenDoors                            = 84,
	AutoPickupWeapons                        = 85,
	AutoPickupWeaponsConsolePC               = 86,
	AutoSortConsumablesToRight               = 87,
	EnableTryBuildOnFocus                    = 88,
	EditButtonHoldTime                       = 89,
	ShowHeadAccessories                      = 90,
	ShowBackpack                             = 91,
	ForceFeedback                            = 92,
	ReplayRecording                          = 93,
	ReplayRecordingLargeTeams                = 94,
	ReplayRecordingCreativeMode              = 95,
	UsePowerSavingMode                       = 96,
	ShadowPlayHighlights                     = 97,
	ShowTemperature                          = 98,
	GammaValue                               = 99,
	MusicVolume                              = 100,
	SoundFXVolume                            = 101,
	DialogVolume                             = 102,
	VoiceChatVolume                          = 103,
	CinematicsVolume                         = 104,
	Subtitles                                = 105,
	Quality                                  = 106,
	VoiceChat                                = 107,
	PushToTalk                               = 108,
	ProximityVoiceChat                       = 109,
	VoiceChatInputDevice                     = 110,
	VoiceChatOutputDevice                    = 111,
	AllowBackgroundAudio                     = 112,
	ColorBlindMode                           = 113,
	ColorBlindStrength                       = 114,
	IgnoreGamepadInput                       = 115,
	LockPrimaryInputMethodToMouse            = 116,
	EnableRudderControl                      = 117,
	RudderDeadZone                           = 118,
	RudderMaxThrottle                        = 119,
	VisualizeSoundEffects                    = 120,
	VisualizeSoundEffectsHeader              = 121,
	MoveStickDeadZone                        = 122,
	LookStickDeadZone                        = 123,
	LookSensitivityPreset                    = 124,
	LookSensitivityPresetAds                 = 125,
	UseAdvancedOptions                       = 126,
	LookHorizontalSpeed                      = 127,
	LookVerticalSpeed                        = 128,
	LookHorizontalSpeedAds                   = 129,
	LookVerticalSpeedAds                     = 130,
	LookHorizontalBoostSpeed                 = 131,
	LookVerticalBoostSpeed                   = 132,
	LookBoostAccelerationTime                = 133,
	LookHorizontalBoostSpeedAds              = 134,
	LookVerticalBoostSpeedAds                = 135,
	LookBoostAccelerationTimeAds             = 136,
	LookEaseTime                             = 137,
	StatbilizeLookInput                      = 138,
	UseRadialLookRates                       = 139,
	AimAssistStrength                        = 140,
	UseLegacyControls                        = 141,
	PlayerSurveysAllowed                     = 142,
	NotifyWhenPlaying                        = 143,
	COUNT                                    = 144,
	ESettingType_MAX                         = 145,
};

// Enum FortniteUI.EFortPerksWidgetState
// NumValues: 0x0004
enum class EFortPerksWidgetState : uint8
{
	Normal                                   = 0,
	Upgrade                                  = 1,
	Evolution                                = 2,
	EFortPerksWidgetState_MAX                = 3,
};

// Enum FortniteUI.ESaveProfileForBanners
// NumValues: 0x0003
enum class ESaveProfileForBanners : uint32
{
	SaveTheWorld                             = 0,
	BattleRoyale                             = 1,
	ESaveProfileForBanners_MAX               = 2,
};

// Enum FortniteUI.EFortPlayerSurveyAggregateOp
// NumValues: 0x0002
enum class EFortPlayerSurveyAggregateOp : uint8
{
	Sum                                      = 0,
	Max                                      = 1,
};

// Enum FortniteUI.EFortPlayerSurveyAthenaSeasonStat
// NumValues: 0x0005
enum class EFortPlayerSurveyAthenaSeasonStat : uint8
{
	XP                                       = 0,
	Level                                    = 1,
	BookXP                                   = 2,
	BookLevel                                = 3,
	EFortPlayerSurveyAthenaSeasonStat_MAX    = 4,
};

// Enum FortniteUI.EFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusType
// NumValues: 0x0003
enum class EFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusType : uint8
{
	Unknown                                  = 0,
	ChoiceButton                             = 1,
	EFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusType_MAX = 2,
};

// Enum FortniteUI.EFortPlayerSurveyCMSDataAggregateOp
// NumValues: 0x0003
enum class EFortPlayerSurveyCMSDataAggregateOp : uint8
{
	S                                        = 0,
	Mx                                       = 1,
	EFortPlayerSurveyCMSDataAggregateOp_MAX  = 2,
};

// Enum FortniteUI.EFortPlayerSurveyCMSDataAthenaSeasonStat
// NumValues: 0x0005
enum class EFortPlayerSurveyCMSDataAthenaSeasonStat : uint8
{
	Sx                                       = 0,
	Sl                                       = 1,
	bx                                       = 2,
	bl                                       = 3,
	EFortPlayerSurveyCMSDataAthenaSeasonStat_MAX = 4,
};

// Enum FortniteUI.EFortPlayerSurveyCMSDataBinaryComparisonOp
// NumValues: 0x0007
enum class EFortPlayerSurveyCMSDataBinaryComparisonOp : uint8
{
	E                                        = 0,
	N                                        = 1,
	L                                        = 2,
	G                                        = 3,
	Le                                       = 4,
	Ge                                       = 5,
	EFortPlayerSurveyCMSDataBinaryComparisonOp_MAX = 6,
};

// Enum FortniteUI.EFortPlayerSurveyCMSDataGameMode
// NumValues: 0x0004
enum class EFortPlayerSurveyCMSDataGameMode : uint8
{
	C                                        = 0,
	A                                        = 1,
	Pc                                       = 2,
	EFortPlayerSurveyCMSDataGameMode_MAX     = 3,
};

// Enum FortniteUI.EFortPlayerSurveyCMSDataGameplayTagQueryExprType
// NumValues: 0x0004
enum class EFortPlayerSurveyCMSDataGameplayTagQueryExprType : uint8
{
	N                                        = 3,
	S                                        = 1,
	A                                        = 2,
	EFortPlayerSurveyCMSDataGameplayTagQueryExprType_MAX = 4,
};

// Enum FortniteUI.EFortPlayerSurveyCMSDataPlaylistCategory
// NumValues: 0x0008
enum class EFortPlayerSurveyCMSDataPlaylistCategory : uint8
{
	A                                        = 0,
	S                                        = 1,
	D                                        = 2,
	Q                                        = 3,
	Lt                                       = 4,
	C                                        = 5,
	Pl                                       = 6,
	EFortPlayerSurveyCMSDataPlaylistCategory_MAX = 7,
};

// Enum FortniteUI.EFortPlayerSurveyCMSDataPresentationStyle
// NumValues: 0x0003
enum class EFortPlayerSurveyCMSDataPresentationStyle : uint8
{
	Standard                                 = 1,
	Rating                                   = 2,
	EFortPlayerSurveyCMSDataPresentationStyle_MAX = 3,
};

// Enum FortniteUI.EFortPlayerSurveyCMSDataQuestState
// NumValues: 0x0005
enum class EFortPlayerSurveyCMSDataQuestState : uint8
{
	I                                        = 0,
	A                                        = 1,
	Co                                       = 2,
	Cl                                       = 3,
	EFortPlayerSurveyCMSDataQuestState_MAX   = 4,
};

// Enum FortniteUI.EFortPlayerSurveyCMSDataRelativeSurveyKeyType
// NumValues: 0x0004
enum class EFortPlayerSurveyCMSDataRelativeSurveyKeyType : uint8
{
	S                                        = 0,
	A                                        = 1,
	O                                        = 2,
	EFortPlayerSurveyCMSDataRelativeSurveyKeyType_MAX = 3,
};

// Enum FortniteUI.EFortPlayerSurveyCMSDataTrigger
// NumValues: 0x0002
enum class EFortPlayerSurveyCMSDataTrigger : uint8
{
	Rm                                       = 2,
	EFortPlayerSurveyCMSDataTrigger_MAX      = 3,
};

// Enum FortniteUI.EFortPlayerSurveyPlaylistCategory
// NumValues: 0x0008
enum class EFortPlayerSurveyPlaylistCategory : uint8
{
	All                                      = 0,
	Solo                                     = 1,
	Duo                                      = 2,
	Squad                                    = 3,
	LTM                                      = 4,
	Creative                                 = 5,
	Playground                               = 6,
	EFortPlayerSurveyPlaylistCategory_MAX    = 7,
};

// Enum FortniteUI.EFortPlayerSurveyTrigger
// NumValues: 0x0004
enum class EFortPlayerSurveyTrigger : uint8
{
	Invalid                                  = 0,
	Any                                      = 1,
	ReturnToMainMenu                         = 2,
	EFortPlayerSurveyTrigger_MAX             = 3,
};

// Enum FortniteUI.EItemRefundability
// NumValues: 0x0004
enum class EItemRefundability : uint8
{
	NotRefundable                            = 0,
	Refundable                               = 1,
	AlreadyRefunded                          = 2,
	EItemRefundability_MAX                   = 3,
};

// Enum FortniteUI.EPurchaseReturnStep
// NumValues: 0x0004
enum class EPurchaseReturnStep : uint8
{
	ItemSelection                            = 0,
	ReasonSelection                          = 1,
	FinalSubmission                          = 2,
	EPurchaseReturnStep_MAX                  = 3,
};

// Enum FortniteUI.ECalloutNavigationDirection
// NumValues: 0x0003
enum class ECalloutNavigationDirection : uint8
{
	Previous                                 = 0,
	Next                                     = 1,
	ECalloutNavigationDirection_MAX          = 2,
};

// Enum FortniteUI.ERedeemCodeFailureReason
// NumValues: 0x0006
enum class ERedeemCodeFailureReason : uint8
{
	InvalidCode                              = 0,
	CodeAlreadyUsed                          = 1,
	AlreadyHasAccess                         = 2,
	FailedToGetItem                          = 3,
	Unknown                                  = 4,
	ERedeemCodeFailureReason_MAX             = 5,
};

// Enum FortniteUI.EFortRewardItemType
// NumValues: 0x0005
enum class EFortRewardItemType : uint8
{
	RewardedBadges                           = 0,
	MissedBadges                             = 1,
	RewardedItems                            = 2,
	RewardedAccountItems                     = 3,
	EFortRewardItemType_MAX                  = 4,
};

// Enum FortniteUI.EFortSettingGameVisibility
// NumValues: 0x0004
enum class EFortSettingGameVisibility : uint8
{
	None                                     = 0,
	Campaign                                 = 1,
	Athena                                   = 2,
	EFortSettingGameVisibility_MAX           = 3,
};

// Enum FortniteUI.EFortSettingPlatformVisibility
// NumValues: 0x0007
enum class EFortSettingPlatformVisibility : uint8
{
	None                                     = 0,
	PC                                       = 1,
	PS4                                      = 2,
	XBoxOne                                  = 4,
	Switch                                   = 8,
	Mobile                                   = 16,
	EFortSettingPlatformVisibility_MAX       = 17,
};

// Enum FortniteUI.EFortShowdownPinState
// NumValues: 0x0004
enum class EFortShowdownPinState : uint8
{
	None                                     = 0,
	Locked                                   = 1,
	Unlocked                                 = 2,
	EFortShowdownPinState_MAX                = 3,
};

// Enum FortniteUI.EFortEventWindowEligibility
// NumValues: 0x0005
enum class EFortEventWindowEligibility : uint8
{
	Unknown                                  = 0,
	Public                                   = 1,
	Private                                  = 2,
	Locked                                   = 3,
	EFortEventWindowEligibility_MAX          = 4,
};

// Enum FortniteUI.EFortShowdownEventState
// NumValues: 0x000C
enum class EFortShowdownEventState : uint8
{
	Unknown                                  = 0,
	FutureTBD                                = 1,
	FutureScheduled                          = 2,
	FutureNext                               = 3,
	Live                                     = 4,
	LiveParticipating                        = 5,
	LiveNotParticipating                     = 6,
	Completed                                = 7,
	CompletedParticipated                    = 8,
	CompletedNotPartipated                   = 9,
	Cancelled                                = 10,
	EFortShowdownEventState_MAX              = 11,
};

// Enum FortniteUI.EFortShowdownMatchType
// NumValues: 0x0005
enum class EFortShowdownMatchType : uint8
{
	Unknown                                  = 0,
	Solo                                     = 1,
	Duos                                     = 2,
	Squads                                   = 3,
	EFortShowdownMatchType_MAX               = 4,
};

// Enum FortniteUI.EFortDateTimeStyle
// NumValues: 0x0006
enum class EFortDateTimeStyle : uint8
{
	Default                                  = 0,
	Short                                    = 1,
	Medium                                   = 2,
	Long                                     = 3,
	Full                                     = 4,
	EFortDateTimeStyle_MAX                   = 5,
};

// Enum FortniteUI.ESocialImportPanelType
// NumValues: 0x0003
enum class ESocialImportPanelType : uint8
{
	Athena                                   = 0,
	SaveTheWorld                             = 1,
	ESocialImportPanelType_MAX               = 2,
};

// Enum FortniteUI.EFriendLinkShareButtonType
// NumValues: 0x0004
enum class EFriendLinkShareButtonType : uint8
{
	IOS                                      = 0,
	Android                                  = 1,
	Generic                                  = 2,
	EFriendLinkShareButtonType_MAX           = 3,
};

// Enum FortniteUI.EListHeaderType
// NumValues: 0x000D
enum class EListHeaderType : uint8
{
	TeamMember                               = 0,
	PartyMember                              = 1,
	JoinableParty                            = 2,
	PlatformOnlineFriend                     = 3,
	McpOnlineFriend                          = 4,
	OfflineFriend                            = 5,
	Blocked                                  = 6,
	VoiceChatMember                          = 7,
	FriendInvite                             = 8,
	SuggestedFriend                          = 9,
	RecentPlayer                             = 10,
	Invalid                                  = 11,
	EListHeaderType_MAX                      = 12,
};

// Enum FortniteUI.EFortSquadSlottingRestrictionReason
// NumValues: 0x0006
enum class EFortSquadSlottingRestrictionReason : uint8
{
	ItemIsInInventoryOverflow                = 0,
	MandatorySlotWouldBeEmptied              = 1,
	ItemIsOnActiveExpedition                 = 2,
	HeroRequiresMissingGameplayTag           = 3,
	HeroAlreadyEquippedInLoadout             = 4,
	EFortSquadSlottingRestrictionReason_MAX  = 5,
};

// Enum FortniteUI.EPauseType
// NumValues: 0x0005
enum class EPauseType : uint8
{
	NoPause                                  = 0,
	Rare                                     = 1,
	New                                      = 2,
	NewAndRare                               = 3,
	EPauseType_MAX                           = 4,
};

// Enum FortniteUI.ECardPackPurchaseError
// NumValues: 0x0006
enum class ECardPackPurchaseError : uint8
{
	PendingServerConfirmation                = 0,
	CannotAffordItem                         = 1,
	NoneLeft                                 = 2,
	PurchaseAlreadyPending                   = 3,
	NoConnection                             = 4,
	ECardPackPurchaseError_MAX               = 5,
};

// Enum FortniteUI.EFortStoreTransition
// NumValues: 0x0002
enum class EFortStoreTransition : uint8
{
	X                                        = 0,
	EFortStoreTransition_MAX                 = 1,
};

// Enum FortniteUI.EFortSubgameSelectOption
// NumValues: 0x0006
enum class EFortSubgameSelectOption : uint8
{
	Campaign                                 = 0,
	Athena                                   = 1,
	Creative                                 = 2,
	Invalid                                  = 3,
	Count                                    = 3,
	EFortSubgameSelectOption_MAX             = 4,
};

// Enum FortniteUI.EFortUISurvivorSquadMatchType
// NumValues: 0x0005
enum class EFortUISurvivorSquadMatchType : uint8
{
	Multi                                    = 0,
	Single                                   = 1,
	Summary                                  = 2,
	Max_None                                 = 3,
	EFortUISurvivorSquadMatchType_MAX        = 4,
};

// Enum FortniteUI.ETouchState
// NumValues: 0x0006
enum class ETouchState : uint8
{
	None                                     = 0,
	WaitingForStart                          = 1,
	Started                                  = 2,
	Active                                   = 3,
	COUNT                                    = 4,
	ETouchState_MAX                          = 5,
};

// Enum FortniteUI.EFortControlType
// NumValues: 0x0005
enum class EFortControlType : uint8
{
	None                                     = 0,
	CameraAndMovement                        = 1,
	Picking                                  = 2,
	COUNT                                    = 3,
	EFortControlType_MAX                     = 4,
};

// Enum FortniteUI.EFortTouchControlRegion
// NumValues: 0x0005
enum class EFortTouchControlRegion : uint8
{
	MovePlayer                               = 0,
	RotateCamera                             = 1,
	NoRegion                                 = 2,
	COUNT                                    = 3,
	EFortTouchControlRegion_MAX              = 4,
};

// Enum FortniteUI.EEventTimeState
// NumValues: 0x0005
enum class EEventTimeState : uint8
{
	Unknown                                  = 0,
	Completed                                = 1,
	Live                                     = 2,
	Future                                   = 3,
	EEventTimeState_MAX                      = 4,
};

// Enum FortniteUI.EFortNamedBundle
// NumValues: 0x000A
enum class EFortNamedBundle : uint8
{
	Menu                                     = 0,
	MenuCampaign                             = 1,
	MenuAthena                               = 2,
	Zone                                     = 3,
	ZoneCampaign                             = 4,
	ZoneAthena                               = 5,
	Client                                   = 6,
	ClientCampaign                           = 7,
	ClientAthena                             = 8,
	EFortNamedBundle_MAX                     = 9,
};

// Enum FortniteUI.EFortReturnToFrontendBehavior
// NumValues: 0x0006
enum class EFortReturnToFrontendBehavior : uint8
{
	NotSpecified                             = 0,
	HomeScreen                               = 1,
	MapScreen                                = 2,
	MapScreenWithAutoLaunch                  = 3,
	MapScreenWithMinimalAutoLaunch           = 4,
	EFortReturnToFrontendBehavior_MAX        = 5,
};

// Enum FortniteUI.EFortUINavigationOp
// NumValues: 0x000A
enum class EFortUINavigationOp : uint8
{
	PopContentStack                          = 0,
	FeatureSwitch                            = 1,
	NavigateToSkillTree                      = 2,
	NavigateToSquadSlot                      = 3,
	NavigateToQuest                          = 4,
	NavigateToItemManagement                 = 5,
	NavigateToExpeditions                    = 6,
	NavigateToCollectionBook                 = 7,
	None                                     = 8,
	EFortUINavigationOp_MAX                  = 9,
};

// Enum FortniteUI.EFortLoginStage
// NumValues: 0x0009
enum class EFortLoginStage : uint8
{
	Begin                                    = 0,
	SplashScreen                             = 1,
	UpdateCheck                              = 2,
	SignIn                                   = 3,
	Benchmark                                = 4,
	RejoinCheck                              = 5,
	LoadingAthenaProfile                     = 6,
	Complete                                 = 7,
	EFortLoginStage_MAX                      = 8,
};

// Enum FortniteUI.EFortLoginDisplay
// NumValues: 0x0004
enum class EFortLoginDisplay : uint8
{
	LoginStatus                              = 0,
	SplashScreen                             = 1,
	SignIn                                   = 2,
	EFortLoginDisplay_MAX                    = 3,
};

// Enum FortniteUI.EFortLoginAccountType
// NumValues: 0x0008
enum class EFortLoginAccountType : uint8
{
	None                                     = 0,
	EpicAccount                              = 1,
	Facebook                                 = 2,
	Google                                   = 3,
	PSN                                      = 4,
	XBLive                                   = 5,
	Erebus                                   = 6,
	EFortLoginAccountType_MAX                = 7,
};

// Enum FortniteUI.EPlayerReportReasons
// NumValues: 0x000E
enum class EPlayerReportReasons : uint8
{
	None                                     = 0,
	Communication                            = 1,
	Offensive                                = 2,
	AFK                                      = 3,
	IgnoringObjective                        = 4,
	Harassment                               = 5,
	Exploiting                               = 6,
	TradeScam                                = 7,
	CommunicationsAbuse                      = 8,
	OffensiveName                            = 9,
	TeamingUpWithEnemies                     = 10,
	InappropriateContent                     = 11,
	ExploitingOrHacking                      = 12,
	EPlayerReportReasons_MAX                 = 13,
};

// Enum FortniteUI.EFortComparisonType
// NumValues: 0x0005
enum class EFortComparisonType : uint8
{
	None                                     = 0,
	HigherValue                              = 1,
	LowerValue                               = 2,
	Upgrade                                  = 3,
	EFortComparisonType_MAX                  = 4,
};

// Enum FortniteUI.EFortClampState
// NumValues: 0x0004
enum class EFortClampState : uint8
{
	NoClamp                                  = 0,
	MinClamp                                 = 1,
	MaxClamp                                 = 2,
	EFortClampState_MAX                      = 3,
};

// Enum FortniteUI.EFortBuffState
// NumValues: 0x0004
enum class EFortBuffState : uint8
{
	NoChange                                 = 0,
	Better                                   = 1,
	Worse                                    = 2,
	EFortBuffState_MAX                       = 3,
};

// Enum FortniteUI.EFortStatValueDisplayType
// NumValues: 0x0007
enum class EFortStatValueDisplayType : uint8
{
	BasicPaired                              = 0,
	BasicSingle                              = 1,
	Unique                                   = 2,
	ElementalFire                            = 3,
	ElementalIce                             = 4,
	ElementalElectric                        = 5,
	EFortStatValueDisplayType_MAX            = 6,
};

// Enum FortniteUI.EFortAnimSpeed
// NumValues: 0x0004
enum class EFortAnimSpeed : uint8
{
	Instant                                  = 0,
	Fast                                     = 1,
	Normal                                   = 2,
	EFortAnimSpeed_MAX                       = 3,
};

// Enum FortniteUI.EFortSocialPanelTab
// NumValues: 0x0004
enum class EFortSocialPanelTab : uint8
{
	PartyInvitations                         = 0,
	Friends                                  = 1,
	RecentPlayers                            = 2,
	Max                                      = 3,
};

// Enum FortniteUI.EFortSocialPanelType
// NumValues: 0x0003
enum class EFortSocialPanelType : uint8
{
	Join                                     = 0,
	Invite                                   = 1,
	Max                                      = 2,
};

// Enum FortniteUI.EModalContainerSize
// NumValues: 0x0005
enum class EModalContainerSize : uint8
{
	ExtraSmall                               = 0,
	Small                                    = 1,
	Medium                                   = 2,
	Large                                    = 3,
	Max                                      = 4,
};

// Enum FortniteUI.ENotificationType
// NumValues: 0x0003
enum class ENotificationType : uint8
{
	Basic                                    = 0,
	Friends                                  = 1,
	ENotificationType_MAX                    = 2,
};

// Enum FortniteUI.ENotificationResult
// NumValues: 0x0004
enum class ENotificationResult : uint8
{
	Confirmed                                = 0,
	Declined                                 = 1,
	Unknown                                  = 2,
	ENotificationResult_MAX                  = 3,
};

// Enum FortniteUI.EFortInventoryContext
// NumValues: 0x0005
enum class EFortInventoryContext : uint8
{
	Game                                     = 0,
	Lobby                                    = 1,
	FrontEnd                                 = 2,
	Pickup                                   = 3,
	EFortInventoryContext_MAX                = 4,
};

// Enum FortniteUI.EFortToastType
// NumValues: 0x0004
enum class EFortToastType : uint8
{
	Default                                  = 0,
	Subdued                                  = 1,
	Impactful                                = 2,
	EFortToastType_MAX                       = 3,
};

// Enum FortniteUI.EUpgradeInfoImageSize
// NumValues: 0x0003
enum class EUpgradeInfoImageSize : uint8
{
	Small                                    = 0,
	Large                                    = 1,
	EUpgradeInfoImageSize_MAX                = 2,
};

// Enum FortniteUI.EChannelSpeakerStyle
// NumValues: 0x0004
enum class EChannelSpeakerStyle : uint8
{
	InGame                                   = 0,
	InLobby                                  = 1,
	OutOfClient                              = 2,
	Max                                      = 3,
};

// Enum FortniteUI.ERadarIconState
// NumValues: 0x0003
enum class ERadarIconState : uint8
{
	Closed                                   = 0,
	Open                                     = 1,
	ERadarIconState_MAX                      = 2,
};

// Enum FortniteUI.EHeistExitCraftIconState
// NumValues: 0x0005
enum class EHeistExitCraftIconState : uint8
{
	None                                     = 0,
	Incoming                                 = 1,
	Spawned                                  = 2,
	Exited                                   = 3,
	EHeistExitCraftIconState_MAX             = 4,
};

// Enum FortniteUI.EHeistBlingIconState
// NumValues: 0x0006
enum class EHeistBlingIconState : uint8
{
	None                                     = 0,
	SupplyDrop                               = 1,
	PickupItem                               = 2,
	CarriedEnemy                             = 3,
	CarriedAlly                              = 4,
	EHeistBlingIconState_MAX                 = 5,
};

// Enum FortniteUI.EHeistExitCraftUIState
// NumValues: 0x0005
enum class EHeistExitCraftUIState : uint8
{
	None                                     = 0,
	OnTheWay                                 = 1,
	Incoming                                 = 2,
	Arrived                                  = 3,
	EHeistExitCraftUIState_MAX               = 4,
};

// Enum FortniteUI.EMatchmakingInputSource
// NumValues: 0x0004
enum class EMatchmakingInputSource : uint8
{
	Local                                    = 0,
	Remote                                   = 1,
	Pool                                     = 2,
	EMatchmakingInputSource_MAX              = 3,
};

// Enum FortniteUI.EMinigameCaptureObjectiveIconState
// NumValues: 0x0003
enum class EMinigameCaptureObjectiveIconState : uint8
{
	NotCaptured                              = 0,
	Captured                                 = 1,
	EMinigameCaptureObjectiveIconState_MAX   = 2,
};

// Enum FortniteUI.ETDMScoreProgressTypes
// NumValues: 0x0007
enum class ETDMScoreProgressTypes : uint8
{
	None                                     = 0,
	ProgressSoundMild                        = 1,
	ProgressSoundMedium                      = 2,
	ProgressSoundStrong                      = 3,
	CountdownSoundNormal                     = 4,
	CountdownSoundStrong                     = 5,
	ETDMScoreProgressTypes_MAX               = 6,
};

// ScriptStruct FortniteUI.PanZoomFingerState
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPanZoomFingerState final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPanZoomFingerState) == 0x000008, "Wrong alignment on FPanZoomFingerState");
static_assert(sizeof(FPanZoomFingerState) == 0x000010, "Wrong size on FPanZoomFingerState");

// ScriptStruct FortniteUI.AthenaNewsEntry
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FAthenaNewsEntry final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaNewsEntry) == 0x000008, "Wrong alignment on FAthenaNewsEntry");
static_assert(sizeof(FAthenaNewsEntry) == 0x000058, "Wrong size on FAthenaNewsEntry");

// ScriptStruct FortniteUI.FortUIStatStyle
// 0x00C0 (0x00C0 - 0x0000)
struct FFortUIStatStyle final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HighestText;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0030(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ECommonNumericType                            NumericType;                                       // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimalNotableValue;                               // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIStatStyle) == 0x000008, "Wrong alignment on FFortUIStatStyle");
static_assert(sizeof(FFortUIStatStyle) == 0x0000C0, "Wrong size on FFortUIStatStyle");
static_assert(offsetof(FFortUIStatStyle, Name) == 0x000000, "Member 'FFortUIStatStyle::Name' has a wrong offset!");
static_assert(offsetof(FFortUIStatStyle, HighestText) == 0x000018, "Member 'FFortUIStatStyle::HighestText' has a wrong offset!");
static_assert(offsetof(FFortUIStatStyle, Icon) == 0x000030, "Member 'FFortUIStatStyle::Icon' has a wrong offset!");
static_assert(offsetof(FFortUIStatStyle, NumericType) == 0x0000B8, "Member 'FFortUIStatStyle::NumericType' has a wrong offset!");
static_assert(offsetof(FFortUIStatStyle, MinimalNotableValue) == 0x0000BC, "Member 'FFortUIStatStyle::MinimalNotableValue' has a wrong offset!");

// ScriptStruct FortniteUI.DetailClassEntry
// 0x0010 (0x0010 - 0x0000)
struct FDetailClassEntry final
{
public:
	struct FGameplayTag                           IdentifierTag;                                     // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAthenaChallengeSetBaseDetails> DetailsWidgetClass;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDetailClassEntry) == 0x000008, "Wrong alignment on FDetailClassEntry");
static_assert(sizeof(FDetailClassEntry) == 0x000010, "Wrong size on FDetailClassEntry");
static_assert(offsetof(FDetailClassEntry, IdentifierTag) == 0x000000, "Member 'FDetailClassEntry::IdentifierTag' has a wrong offset!");
static_assert(offsetof(FDetailClassEntry, DetailsWidgetClass) == 0x000008, "Member 'FDetailClassEntry::DetailsWidgetClass' has a wrong offset!");

// ScriptStruct FortniteUI.FortTabButtonLabelInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FFortTabButtonLabelInfo
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            IconBrush;                                         // 0x0018(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTabButtonLabelInfo) == 0x000008, "Wrong alignment on FFortTabButtonLabelInfo");
static_assert(sizeof(FFortTabButtonLabelInfo) == 0x0000A0, "Wrong size on FFortTabButtonLabelInfo");
static_assert(offsetof(FFortTabButtonLabelInfo, DisplayName) == 0x000000, "Member 'FFortTabButtonLabelInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTabButtonLabelInfo, IconBrush) == 0x000018, "Member 'FFortTabButtonLabelInfo::IconBrush' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIFeatureStruct
// 0x0018 (0x0018 - 0x0000)
struct FFortUIFeatureStruct final
{
public:
	EFortUIFeatureState                           CurrentState;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureState                           ForcedState;                                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureStateReason                     ForcedStateReason;                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             ChangeDelegate;                                    // 0x0008(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIFeatureStruct) == 0x000008, "Wrong alignment on FFortUIFeatureStruct");
static_assert(sizeof(FFortUIFeatureStruct) == 0x000018, "Wrong size on FFortUIFeatureStruct");
static_assert(offsetof(FFortUIFeatureStruct, CurrentState) == 0x000000, "Member 'FFortUIFeatureStruct::CurrentState' has a wrong offset!");
static_assert(offsetof(FFortUIFeatureStruct, ForcedState) == 0x000001, "Member 'FFortUIFeatureStruct::ForcedState' has a wrong offset!");
static_assert(offsetof(FFortUIFeatureStruct, ForcedStateReason) == 0x000002, "Member 'FFortUIFeatureStruct::ForcedStateReason' has a wrong offset!");
static_assert(offsetof(FFortUIFeatureStruct, ChangeDelegate) == 0x000008, "Member 'FFortUIFeatureStruct::ChangeDelegate' has a wrong offset!");

// ScriptStruct FortniteUI.FortAttributeModifierDisplayData
// 0x00A8 (0x00A8 - 0x0000)
struct FFortAttributeModifierDisplayData final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModifierType;                                      // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagRequirements               SourceTags;                                        // 0x0028(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTags;                                        // 0x0068(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAttributeModifierDisplayData) == 0x000008, "Wrong alignment on FFortAttributeModifierDisplayData");
static_assert(sizeof(FFortAttributeModifierDisplayData) == 0x0000A8, "Wrong size on FFortAttributeModifierDisplayData");
static_assert(offsetof(FFortAttributeModifierDisplayData, Attribute) == 0x000000, "Member 'FFortAttributeModifierDisplayData::Attribute' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierDisplayData, Value) == 0x000020, "Member 'FFortAttributeModifierDisplayData::Value' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierDisplayData, ModifierType) == 0x000024, "Member 'FFortAttributeModifierDisplayData::ModifierType' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierDisplayData, SourceTags) == 0x000028, "Member 'FFortAttributeModifierDisplayData::SourceTags' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierDisplayData, TargetTags) == 0x000068, "Member 'FFortAttributeModifierDisplayData::TargetTags' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaNewsData
// 0x0070 (0x0070 - 0x0000)
struct FAthenaNewsData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Image;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _type;                                             // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AdSpace;                                           // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          SpotLight;                                         // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	ESubGameFilter                                SubGameFilter;                                     // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaNewsData) == 0x000008, "Wrong alignment on FAthenaNewsData");
static_assert(sizeof(FAthenaNewsData) == 0x000070, "Wrong size on FAthenaNewsData");
static_assert(offsetof(FAthenaNewsData, Title) == 0x000000, "Member 'FAthenaNewsData::Title' has a wrong offset!");
static_assert(offsetof(FAthenaNewsData, Body) == 0x000018, "Member 'FAthenaNewsData::Body' has a wrong offset!");
static_assert(offsetof(FAthenaNewsData, Image) == 0x000030, "Member 'FAthenaNewsData::Image' has a wrong offset!");
static_assert(offsetof(FAthenaNewsData, _type) == 0x000040, "Member 'FAthenaNewsData::_type' has a wrong offset!");
static_assert(offsetof(FAthenaNewsData, AdSpace) == 0x000050, "Member 'FAthenaNewsData::AdSpace' has a wrong offset!");
static_assert(offsetof(FAthenaNewsData, SpotLight) == 0x000068, "Member 'FAthenaNewsData::SpotLight' has a wrong offset!");
static_assert(offsetof(FAthenaNewsData, Hidden) == 0x000069, "Member 'FAthenaNewsData::Hidden' has a wrong offset!");
static_assert(offsetof(FAthenaNewsData, SubGameFilter) == 0x00006C, "Member 'FAthenaNewsData::SubGameFilter' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaNewsPlatformData
// 0x0090 (0x0090 - 0x0000)
struct FAthenaNewsPlatformData final
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAthenaNewsData                        MESSAGE;                                           // 0x0010(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 _type;                                             // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaNewsPlatformData) == 0x000008, "Wrong alignment on FAthenaNewsPlatformData");
static_assert(sizeof(FAthenaNewsPlatformData) == 0x000090, "Wrong size on FAthenaNewsPlatformData");
static_assert(offsetof(FAthenaNewsPlatformData, Platform) == 0x000000, "Member 'FAthenaNewsPlatformData::Platform' has a wrong offset!");
static_assert(offsetof(FAthenaNewsPlatformData, MESSAGE) == 0x000010, "Member 'FAthenaNewsPlatformData::MESSAGE' has a wrong offset!");
static_assert(offsetof(FAthenaNewsPlatformData, _type) == 0x000080, "Member 'FAthenaNewsPlatformData::_type' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaNewsMessages
// 0x0030 (0x0030 - 0x0000)
struct FAthenaNewsMessages final
{
public:
	TArray<struct FAthenaNewsData>                Messages;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAthenaNewsPlatformData>        Platform_messages;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 _type;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaNewsMessages) == 0x000008, "Wrong alignment on FAthenaNewsMessages");
static_assert(sizeof(FAthenaNewsMessages) == 0x000030, "Wrong size on FAthenaNewsMessages");
static_assert(offsetof(FAthenaNewsMessages, Messages) == 0x000000, "Member 'FAthenaNewsMessages::Messages' has a wrong offset!");
static_assert(offsetof(FAthenaNewsMessages, Platform_messages) == 0x000010, "Member 'FAthenaNewsMessages::Platform_messages' has a wrong offset!");
static_assert(offsetof(FAthenaNewsMessages, _type) == 0x000020, "Member 'FAthenaNewsMessages::_type' has a wrong offset!");

// ScriptStruct FortniteUI.SubgameDisplayData
// 0x0098 (0x0098 - 0x0000)
struct FSubgameDisplayData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SpecialMessage;                                    // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   StandardMessageLine1;                              // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   StandardMessageLine2;                              // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Image;                                             // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubgameDisplayData) == 0x000008, "Wrong alignment on FSubgameDisplayData");
static_assert(sizeof(FSubgameDisplayData) == 0x000098, "Wrong size on FSubgameDisplayData");
static_assert(offsetof(FSubgameDisplayData, Title) == 0x000000, "Member 'FSubgameDisplayData::Title' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, Description) == 0x000018, "Member 'FSubgameDisplayData::Description' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, SpecialMessage) == 0x000030, "Member 'FSubgameDisplayData::SpecialMessage' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, StandardMessageLine1) == 0x000048, "Member 'FSubgameDisplayData::StandardMessageLine1' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, StandardMessageLine2) == 0x000060, "Member 'FSubgameDisplayData::StandardMessageLine2' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, Image) == 0x000078, "Member 'FSubgameDisplayData::Image' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, Color) == 0x000088, "Member 'FSubgameDisplayData::Color' has a wrong offset!");

// ScriptStruct FortniteUI.SubgameScreenSource
// 0x01E8 (0x01E8 - 0x0000)
struct FSubgameScreenSource final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 __locale;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSubgameDisplayData                    Creative;                                          // 0x0020(0x0098)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSubgameDisplayData                    SaveTheWorld;                                      // 0x00B8(0x0098)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSubgameDisplayData                    BattleRoyale;                                      // 0x0150(0x0098)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubgameScreenSource) == 0x000008, "Wrong alignment on FSubgameScreenSource");
static_assert(sizeof(FSubgameScreenSource) == 0x0001E8, "Wrong size on FSubgameScreenSource");
static_assert(offsetof(FSubgameScreenSource, _title) == 0x000000, "Member 'FSubgameScreenSource::_title' has a wrong offset!");
static_assert(offsetof(FSubgameScreenSource, __locale) == 0x000010, "Member 'FSubgameScreenSource::__locale' has a wrong offset!");
static_assert(offsetof(FSubgameScreenSource, Creative) == 0x000020, "Member 'FSubgameScreenSource::Creative' has a wrong offset!");
static_assert(offsetof(FSubgameScreenSource, SaveTheWorld) == 0x0000B8, "Member 'FSubgameScreenSource::SaveTheWorld' has a wrong offset!");
static_assert(offsetof(FSubgameScreenSource, BattleRoyale) == 0x000150, "Member 'FSubgameScreenSource::BattleRoyale' has a wrong offset!");

// ScriptStruct FortniteUI.FortFocusedBuildingInfo
// 0x0050 (0x0050 - 0x0000)
struct FFortFocusedBuildingInfo final
{
public:
	bool                                          bIsInteractable;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBePlayerEdited;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                IndicatorRelativeLocation;                         // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingHealthDisplayRule                HealthDisplayRule;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHealth;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAnyTrapAttached;                                // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTrapAttachedFacingPlayer;                       // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPreviewTrapAttached;                            // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttachedTrapMaxDurability;                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingInteraction                      InteractionType;                                   // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InteractionCost;                                   // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpgradeBonus;                                      // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortResourceType                             BuildingMaterial;                                  // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHostile;                                        // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ContextualText;                                    // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFocusedBuildingInfo) == 0x000008, "Wrong alignment on FFortFocusedBuildingInfo");
static_assert(sizeof(FFortFocusedBuildingInfo) == 0x000050, "Wrong size on FFortFocusedBuildingInfo");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsInteractable) == 0x000000, "Member 'FFortFocusedBuildingInfo::bIsInteractable' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bCanBePlayerEdited) == 0x000001, "Member 'FFortFocusedBuildingInfo::bCanBePlayerEdited' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, IndicatorRelativeLocation) == 0x000004, "Member 'FFortFocusedBuildingInfo::IndicatorRelativeLocation' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, HealthDisplayRule) == 0x000010, "Member 'FFortFocusedBuildingInfo::HealthDisplayRule' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, MaxHealth) == 0x000014, "Member 'FFortFocusedBuildingInfo::MaxHealth' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsAnyTrapAttached) == 0x000018, "Member 'FFortFocusedBuildingInfo::bIsAnyTrapAttached' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsTrapAttachedFacingPlayer) == 0x000019, "Member 'FFortFocusedBuildingInfo::bIsTrapAttachedFacingPlayer' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsPreviewTrapAttached) == 0x00001A, "Member 'FFortFocusedBuildingInfo::bIsPreviewTrapAttached' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, AttachedTrapMaxDurability) == 0x00001C, "Member 'FFortFocusedBuildingInfo::AttachedTrapMaxDurability' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, CurrentLevel) == 0x000020, "Member 'FFortFocusedBuildingInfo::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, InteractionType) == 0x000024, "Member 'FFortFocusedBuildingInfo::InteractionType' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, InteractionCost) == 0x000028, "Member 'FFortFocusedBuildingInfo::InteractionCost' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, UpgradeBonus) == 0x00002C, "Member 'FFortFocusedBuildingInfo::UpgradeBonus' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, BuildingMaterial) == 0x000030, "Member 'FFortFocusedBuildingInfo::BuildingMaterial' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsHostile) == 0x000031, "Member 'FFortFocusedBuildingInfo::bIsHostile' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, ContextualText) == 0x000038, "Member 'FFortFocusedBuildingInfo::ContextualText' has a wrong offset!");

// ScriptStruct FortniteUI.FortBackendVersion
// 0x0098 (0x0098 - 0x0000)
struct FFortBackendVersion final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 App;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModuleName;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Branch;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildDate;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerDate;                                        // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Build;                                             // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Changelist;                                        // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverridePropertiesVersion;                         // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBackendVersion) == 0x000008, "Wrong alignment on FFortBackendVersion");
static_assert(sizeof(FFortBackendVersion) == 0x000098, "Wrong size on FFortBackendVersion");
static_assert(offsetof(FFortBackendVersion, bIsValid) == 0x000000, "Member 'FFortBackendVersion::bIsValid' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, App) == 0x000008, "Member 'FFortBackendVersion::App' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, ModuleName) == 0x000018, "Member 'FFortBackendVersion::ModuleName' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, Branch) == 0x000028, "Member 'FFortBackendVersion::Branch' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, BuildDate) == 0x000038, "Member 'FFortBackendVersion::BuildDate' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, ServerDate) == 0x000048, "Member 'FFortBackendVersion::ServerDate' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, Build) == 0x000058, "Member 'FFortBackendVersion::Build' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, Changelist) == 0x000068, "Member 'FFortBackendVersion::Changelist' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, OverridePropertiesVersion) == 0x000078, "Member 'FFortBackendVersion::OverridePropertiesVersion' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, Version) == 0x000088, "Member 'FFortBackendVersion::Version' has a wrong offset!");

// ScriptStruct FortniteUI.FortErrorInfo
// 0x0070 (0x0070 - 0x0000)
struct FFortErrorInfo final
{
public:
	class FText                                   Operation;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ErrorMessage;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ErrorCode;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortErrorSeverity                            ErrorSeverity;                                     // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ContinueButtonText;                                // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortErrorInfo) == 0x000008, "Wrong alignment on FFortErrorInfo");
static_assert(sizeof(FFortErrorInfo) == 0x000070, "Wrong size on FFortErrorInfo");
static_assert(offsetof(FFortErrorInfo, Operation) == 0x000000, "Member 'FFortErrorInfo::Operation' has a wrong offset!");
static_assert(offsetof(FFortErrorInfo, ErrorMessage) == 0x000018, "Member 'FFortErrorInfo::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FFortErrorInfo, ErrorCode) == 0x000030, "Member 'FFortErrorInfo::ErrorCode' has a wrong offset!");
static_assert(offsetof(FFortErrorInfo, ErrorSeverity) == 0x000040, "Member 'FFortErrorInfo::ErrorSeverity' has a wrong offset!");
static_assert(offsetof(FFortErrorInfo, ContinueButtonText) == 0x000048, "Member 'FFortErrorInfo::ContinueButtonText' has a wrong offset!");

// ScriptStruct FortniteUI.ShowdownTournamentData
// 0x01C8 (0x01C8 - 0x0000)
struct FShowdownTournamentData final
{
public:
	class FString                                 Tournament_Display_Id;                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title_Line_1;                                      // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Title_Line_2;                                      // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Schedule_Info;                                     // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Poster_Front_Image;                                // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Poster_Back_Image;                                 // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Flavor_Description;                                // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Details_Description;                               // 0x0090(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Short_Format_Title;                                // 0x00A8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Long_Format_Title;                                 // 0x00C0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Pin_Score_Requirement;                             // 0x00D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Pin_Earned_Text;                                   // 0x00E0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           Base_Color;                                        // 0x00F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Primary_Color;                                     // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Secondary_Color;                                   // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Highlight_Color;                                   // 0x0128(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Title_Color;                                       // 0x0138(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Shadow_Color;                                      // 0x0148(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Background_Left_Color;                             // 0x0158(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Background_Right_Color;                            // 0x0168(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Background_Text_Color;                             // 0x0178(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Poster_Fade_Color;                                 // 0x0188(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Playlist_Tile_Image;                               // 0x0198(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Loading_Screen_Image;                              // 0x01A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Style_Info_Id;                                     // 0x01B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShowdownTournamentData) == 0x000008, "Wrong alignment on FShowdownTournamentData");
static_assert(sizeof(FShowdownTournamentData) == 0x0001C8, "Wrong size on FShowdownTournamentData");
static_assert(offsetof(FShowdownTournamentData, Tournament_Display_Id) == 0x000000, "Member 'FShowdownTournamentData::Tournament_Display_Id' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Title_Line_1) == 0x000010, "Member 'FShowdownTournamentData::Title_Line_1' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Title_Line_2) == 0x000028, "Member 'FShowdownTournamentData::Title_Line_2' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Schedule_Info) == 0x000040, "Member 'FShowdownTournamentData::Schedule_Info' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Poster_Front_Image) == 0x000058, "Member 'FShowdownTournamentData::Poster_Front_Image' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Poster_Back_Image) == 0x000068, "Member 'FShowdownTournamentData::Poster_Back_Image' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Flavor_Description) == 0x000078, "Member 'FShowdownTournamentData::Flavor_Description' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Details_Description) == 0x000090, "Member 'FShowdownTournamentData::Details_Description' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Short_Format_Title) == 0x0000A8, "Member 'FShowdownTournamentData::Short_Format_Title' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Long_Format_Title) == 0x0000C0, "Member 'FShowdownTournamentData::Long_Format_Title' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Pin_Score_Requirement) == 0x0000D8, "Member 'FShowdownTournamentData::Pin_Score_Requirement' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Pin_Earned_Text) == 0x0000E0, "Member 'FShowdownTournamentData::Pin_Earned_Text' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Base_Color) == 0x0000F8, "Member 'FShowdownTournamentData::Base_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Primary_Color) == 0x000108, "Member 'FShowdownTournamentData::Primary_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Secondary_Color) == 0x000118, "Member 'FShowdownTournamentData::Secondary_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Highlight_Color) == 0x000128, "Member 'FShowdownTournamentData::Highlight_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Title_Color) == 0x000138, "Member 'FShowdownTournamentData::Title_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Shadow_Color) == 0x000148, "Member 'FShowdownTournamentData::Shadow_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Background_Left_Color) == 0x000158, "Member 'FShowdownTournamentData::Background_Left_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Background_Right_Color) == 0x000168, "Member 'FShowdownTournamentData::Background_Right_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Background_Text_Color) == 0x000178, "Member 'FShowdownTournamentData::Background_Text_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Poster_Fade_Color) == 0x000188, "Member 'FShowdownTournamentData::Poster_Fade_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Playlist_Tile_Image) == 0x000198, "Member 'FShowdownTournamentData::Playlist_Tile_Image' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Loading_Screen_Image) == 0x0001A8, "Member 'FShowdownTournamentData::Loading_Screen_Image' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Style_Info_Id) == 0x0001B8, "Member 'FShowdownTournamentData::Style_Info_Id' has a wrong offset!");

// ScriptStruct FortniteUI.ShowdownTournamentJsonObject
// 0x0010 (0x0010 - 0x0000)
struct FShowdownTournamentJsonObject final
{
public:
	TArray<struct FShowdownTournamentData>        Tournaments;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShowdownTournamentJsonObject) == 0x000008, "Wrong alignment on FShowdownTournamentJsonObject");
static_assert(sizeof(FShowdownTournamentJsonObject) == 0x000010, "Wrong size on FShowdownTournamentJsonObject");
static_assert(offsetof(FShowdownTournamentJsonObject, Tournaments) == 0x000000, "Member 'FShowdownTournamentJsonObject::Tournaments' has a wrong offset!");

// ScriptStruct FortniteUI.ShowdownTournamentSource
// 0x0030 (0x0030 - 0x0000)
struct FShowdownTournamentSource final
{
public:
	struct FShowdownTournamentJsonObject          Tournament_Info;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 _title;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _locale;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShowdownTournamentSource) == 0x000008, "Wrong alignment on FShowdownTournamentSource");
static_assert(sizeof(FShowdownTournamentSource) == 0x000030, "Wrong size on FShowdownTournamentSource");
static_assert(offsetof(FShowdownTournamentSource, Tournament_Info) == 0x000000, "Member 'FShowdownTournamentSource::Tournament_Info' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentSource, _title) == 0x000010, "Member 'FShowdownTournamentSource::_title' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentSource, _locale) == 0x000020, "Member 'FShowdownTournamentSource::_locale' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIPerk
// 0x0098 (0x0098 - 0x0000)
struct FFortUIPerk final
{
public:
	struct FFortSpecializationSlot                SpecializationSlot;                                // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortHero*                              Hero;                                              // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 Tier;                                              // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortSupportBonusType                         SupportBonusType;                                  // 0x0091(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTierPerk;                                       // 0x0092(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUpgrade;                                        // 0x0093(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEvolution;                                      // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEvolutionBranch;                                // 0x0095(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUIPerk) == 0x000008, "Wrong alignment on FFortUIPerk");
static_assert(sizeof(FFortUIPerk) == 0x000098, "Wrong size on FFortUIPerk");
static_assert(offsetof(FFortUIPerk, SpecializationSlot) == 0x000000, "Member 'FFortUIPerk::SpecializationSlot' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, Hero) == 0x000088, "Member 'FFortUIPerk::Hero' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, Tier) == 0x000090, "Member 'FFortUIPerk::Tier' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, SupportBonusType) == 0x000091, "Member 'FFortUIPerk::SupportBonusType' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, bIsTierPerk) == 0x000092, "Member 'FFortUIPerk::bIsTierPerk' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, bIsUpgrade) == 0x000093, "Member 'FFortUIPerk::bIsUpgrade' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, bIsEvolution) == 0x000094, "Member 'FFortUIPerk::bIsEvolution' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, bIsEvolutionBranch) == 0x000095, "Member 'FFortUIPerk::bIsEvolutionBranch' has a wrong offset!");

// ScriptStruct FortniteUI.FortHUDState
// 0x0014 (0x0014 - 0x0000)
struct FFortHUDState final
{
public:
	bool                                          bInBuildMode;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCombatMode;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEditMode;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCreativeMode;                                   // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsParachuteOpen;                                  // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFreeFalling;                                    // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLockedBus;                                      // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInUnlockedBus;                                    // 0x0007(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnTargeting;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnUsingScopeTargeting;                            // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnCanTarget;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnCanUseScopeTargeting;                           // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnCanUseSecondaryAbility;                         // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOpenChute;                                     // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrouching;                                        // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDBNO;                                             // 0x000F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsControllingRCPawn;                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInVehicle;                                      // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDrivingVehicle;                                 // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSwapSeats;                                     // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHUDState) == 0x000001, "Wrong alignment on FFortHUDState");
static_assert(sizeof(FFortHUDState) == 0x000014, "Wrong size on FFortHUDState");
static_assert(offsetof(FFortHUDState, bInBuildMode) == 0x000000, "Member 'FFortHUDState::bInBuildMode' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bInCombatMode) == 0x000001, "Member 'FFortHUDState::bInCombatMode' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bInEditMode) == 0x000002, "Member 'FFortHUDState::bInEditMode' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bInCreativeMode) == 0x000003, "Member 'FFortHUDState::bInCreativeMode' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bIsParachuteOpen) == 0x000004, "Member 'FFortHUDState::bIsParachuteOpen' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bIsFreeFalling) == 0x000005, "Member 'FFortHUDState::bIsFreeFalling' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bInLockedBus) == 0x000006, "Member 'FFortHUDState::bInLockedBus' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bInUnlockedBus) == 0x000007, "Member 'FFortHUDState::bInUnlockedBus' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bOnTargeting) == 0x000008, "Member 'FFortHUDState::bOnTargeting' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bOnUsingScopeTargeting) == 0x000009, "Member 'FFortHUDState::bOnUsingScopeTargeting' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bOnCanTarget) == 0x00000A, "Member 'FFortHUDState::bOnCanTarget' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bOnCanUseScopeTargeting) == 0x00000B, "Member 'FFortHUDState::bOnCanUseScopeTargeting' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bOnCanUseSecondaryAbility) == 0x00000C, "Member 'FFortHUDState::bOnCanUseSecondaryAbility' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bCanOpenChute) == 0x00000D, "Member 'FFortHUDState::bCanOpenChute' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bCrouching) == 0x00000E, "Member 'FFortHUDState::bCrouching' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bDBNO) == 0x00000F, "Member 'FFortHUDState::bDBNO' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bIsControllingRCPawn) == 0x000010, "Member 'FFortHUDState::bIsControllingRCPawn' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bIsInVehicle) == 0x000011, "Member 'FFortHUDState::bIsInVehicle' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bIsDrivingVehicle) == 0x000012, "Member 'FFortHUDState::bIsDrivingVehicle' has a wrong offset!");
static_assert(offsetof(FFortHUDState, bCanSwapSeats) == 0x000013, "Member 'FFortHUDState::bCanSwapSeats' has a wrong offset!");

// ScriptStruct FortniteUI.FortRefundDescriptionsData
// 0x0038 (0x0040 - 0x0008)
struct FFortRefundDescriptionsData final : public FTableRowBase
{
public:
	class FString                                 SearchString;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetReleaseVersion;                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RefundDescriptionText;                             // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRefundDescriptionsData) == 0x000008, "Wrong alignment on FFortRefundDescriptionsData");
static_assert(sizeof(FFortRefundDescriptionsData) == 0x000040, "Wrong size on FFortRefundDescriptionsData");
static_assert(offsetof(FFortRefundDescriptionsData, SearchString) == 0x000008, "Member 'FFortRefundDescriptionsData::SearchString' has a wrong offset!");
static_assert(offsetof(FFortRefundDescriptionsData, TargetReleaseVersion) == 0x000018, "Member 'FFortRefundDescriptionsData::TargetReleaseVersion' has a wrong offset!");
static_assert(offsetof(FFortRefundDescriptionsData, RefundDescriptionText) == 0x000028, "Member 'FFortRefundDescriptionsData::RefundDescriptionText' has a wrong offset!");

// ScriptStruct FortniteUI.FortTabListRegistrationInfo
// 0x00C8 (0x00C8 - 0x0000)
struct FFortTabListRegistrationInfo final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowedInZone;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTabButtonLabelInfo                TabLabelInfo;                                      // 0x0010(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonButton>              TabButtonType;                                     // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonUserWidget>          TabContentType;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                CreatedTabContentWidget;                           // 0x00C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTabListRegistrationInfo) == 0x000008, "Wrong alignment on FFortTabListRegistrationInfo");
static_assert(sizeof(FFortTabListRegistrationInfo) == 0x0000C8, "Wrong size on FFortTabListRegistrationInfo");
static_assert(offsetof(FFortTabListRegistrationInfo, TabNameID) == 0x000000, "Member 'FFortTabListRegistrationInfo::TabNameID' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, bHidden) == 0x000008, "Member 'FFortTabListRegistrationInfo::bHidden' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, bAllowedInZone) == 0x000009, "Member 'FFortTabListRegistrationInfo::bAllowedInZone' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, TabLabelInfo) == 0x000010, "Member 'FFortTabListRegistrationInfo::TabLabelInfo' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, TabButtonType) == 0x0000B0, "Member 'FFortTabListRegistrationInfo::TabButtonType' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, TabContentType) == 0x0000B8, "Member 'FFortTabListRegistrationInfo::TabContentType' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, CreatedTabContentWidget) == 0x0000C0, "Member 'FFortTabListRegistrationInfo::CreatedTabContentWidget' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyConditionsContext
// 0x0028 (0x0028 - 0x0000)
struct FFortPlayerSurveyConditionsContext final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayer*                                Player;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortPlayerSurveyContext*               Context;                                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyConditionsContext) == 0x000008, "Wrong alignment on FFortPlayerSurveyConditionsContext");
static_assert(sizeof(FFortPlayerSurveyConditionsContext) == 0x000028, "Wrong size on FFortPlayerSurveyConditionsContext");
static_assert(offsetof(FFortPlayerSurveyConditionsContext, Player) == 0x000008, "Member 'FFortPlayerSurveyConditionsContext::Player' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyConditionsContext, Context) == 0x000020, "Member 'FFortPlayerSurveyConditionsContext::Context' has a wrong offset!");

// ScriptStruct FortniteUI.FortAthenaItemManagementInventoryFilterTabLabelInfo
// 0x0028 (0x00C8 - 0x00A0)
struct FFortAthenaItemManagementInventoryFilterTabLabelInfo final : public FFortTabButtonLabelInfo
{
public:
	class FName                                   FilterTabNameId;                                   // 0x00A0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEmptySlotItem;                               // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   EmptyFilterDisplay;                                // 0x00B0(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaItemManagementInventoryFilterTabLabelInfo) == 0x000008, "Wrong alignment on FFortAthenaItemManagementInventoryFilterTabLabelInfo");
static_assert(sizeof(FFortAthenaItemManagementInventoryFilterTabLabelInfo) == 0x0000C8, "Wrong size on FFortAthenaItemManagementInventoryFilterTabLabelInfo");
static_assert(offsetof(FFortAthenaItemManagementInventoryFilterTabLabelInfo, FilterTabNameId) == 0x0000A0, "Member 'FFortAthenaItemManagementInventoryFilterTabLabelInfo::FilterTabNameId' has a wrong offset!");
static_assert(offsetof(FFortAthenaItemManagementInventoryFilterTabLabelInfo, bAllowEmptySlotItem) == 0x0000A8, "Member 'FFortAthenaItemManagementInventoryFilterTabLabelInfo::bAllowEmptySlotItem' has a wrong offset!");
static_assert(offsetof(FFortAthenaItemManagementInventoryFilterTabLabelInfo, EmptyFilterDisplay) == 0x0000B0, "Member 'FFortAthenaItemManagementInventoryFilterTabLabelInfo::EmptyFilterDisplay' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIPickerTrapSortModifier
// 0x0050 (0x0058 - 0x0008)
struct FFortUIPickerTrapSortModifier final : public FTableRowBase
{
public:
	struct FGameplayTagQuery                      ItemTagQuery;                                      // 0x0008(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         ScoreBonus;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUIPickerTrapSortModifier) == 0x000008, "Wrong alignment on FFortUIPickerTrapSortModifier");
static_assert(sizeof(FFortUIPickerTrapSortModifier) == 0x000058, "Wrong size on FFortUIPickerTrapSortModifier");
static_assert(offsetof(FFortUIPickerTrapSortModifier, ItemTagQuery) == 0x000008, "Member 'FFortUIPickerTrapSortModifier::ItemTagQuery' has a wrong offset!");
static_assert(offsetof(FFortUIPickerTrapSortModifier, ScoreBonus) == 0x000050, "Member 'FFortUIPickerTrapSortModifier::ScoreBonus' has a wrong offset!");

// ScriptStruct FortniteUI.ShowdownTournamentEntry
// 0x0188 (0x0188 - 0x0000)
struct FShowdownTournamentEntry final
{
public:
	class FString                                 TournamentDisplayId;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleLine1;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleLine2;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScheduleInfo;                                      // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PosterFrontImage;                                  // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PosterBackImage;                                   // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FlavorDescription;                                 // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DetailsDescription;                                // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortFormatTitle;                                  // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LongFormatTitle;                                   // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PinScoreRequirement;                               // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PinEarnedText;                                     // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseColor;                                         // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrimaryColor;                                      // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecondaryColor;                                    // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HighlightColor;                                    // 0x00E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleColor;                                        // 0x00F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShadowColor;                                       // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackgroundLeftColor;                               // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackgroundRightColor;                              // 0x0128(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackgroundTextColor;                               // 0x0138(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PosterFadeColor;                                   // 0x0148(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlaylistTileImage;                                 // 0x0158(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadingScreenImage;                                // 0x0168(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StyleInfoId;                                       // 0x0178(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShowdownTournamentEntry) == 0x000008, "Wrong alignment on FShowdownTournamentEntry");
static_assert(sizeof(FShowdownTournamentEntry) == 0x000188, "Wrong size on FShowdownTournamentEntry");
static_assert(offsetof(FShowdownTournamentEntry, TournamentDisplayId) == 0x000000, "Member 'FShowdownTournamentEntry::TournamentDisplayId' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, TitleLine1) == 0x000010, "Member 'FShowdownTournamentEntry::TitleLine1' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, TitleLine2) == 0x000020, "Member 'FShowdownTournamentEntry::TitleLine2' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, ScheduleInfo) == 0x000030, "Member 'FShowdownTournamentEntry::ScheduleInfo' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, PosterFrontImage) == 0x000040, "Member 'FShowdownTournamentEntry::PosterFrontImage' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, PosterBackImage) == 0x000050, "Member 'FShowdownTournamentEntry::PosterBackImage' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, FlavorDescription) == 0x000060, "Member 'FShowdownTournamentEntry::FlavorDescription' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, DetailsDescription) == 0x000070, "Member 'FShowdownTournamentEntry::DetailsDescription' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, ShortFormatTitle) == 0x000080, "Member 'FShowdownTournamentEntry::ShortFormatTitle' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, LongFormatTitle) == 0x000090, "Member 'FShowdownTournamentEntry::LongFormatTitle' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, PinScoreRequirement) == 0x0000A0, "Member 'FShowdownTournamentEntry::PinScoreRequirement' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, PinEarnedText) == 0x0000A8, "Member 'FShowdownTournamentEntry::PinEarnedText' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, BaseColor) == 0x0000B8, "Member 'FShowdownTournamentEntry::BaseColor' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, PrimaryColor) == 0x0000C8, "Member 'FShowdownTournamentEntry::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, SecondaryColor) == 0x0000D8, "Member 'FShowdownTournamentEntry::SecondaryColor' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, HighlightColor) == 0x0000E8, "Member 'FShowdownTournamentEntry::HighlightColor' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, TitleColor) == 0x0000F8, "Member 'FShowdownTournamentEntry::TitleColor' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, ShadowColor) == 0x000108, "Member 'FShowdownTournamentEntry::ShadowColor' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, BackgroundLeftColor) == 0x000118, "Member 'FShowdownTournamentEntry::BackgroundLeftColor' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, BackgroundRightColor) == 0x000128, "Member 'FShowdownTournamentEntry::BackgroundRightColor' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, BackgroundTextColor) == 0x000138, "Member 'FShowdownTournamentEntry::BackgroundTextColor' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, PosterFadeColor) == 0x000148, "Member 'FShowdownTournamentEntry::PosterFadeColor' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, PlaylistTileImage) == 0x000158, "Member 'FShowdownTournamentEntry::PlaylistTileImage' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, LoadingScreenImage) == 0x000168, "Member 'FShowdownTournamentEntry::LoadingScreenImage' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentEntry, StyleInfoId) == 0x000178, "Member 'FShowdownTournamentEntry::StyleInfoId' has a wrong offset!");

// ScriptStruct FortniteUI.FortBasicMissionInfo
// 0x0390 (0x0390 - 0x0000)
struct FFortBasicMissionInfo final
{
public:
	class FText                                   MissionName;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    MissionIcons;                                      // 0x0018(0x0330)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TheaterName;                                       // 0x0348(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DifficultyName;                                    // 0x0360(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMediaSource*                           EndOfMissionMediaSource;                           // 0x0378(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSource*                           EndOfMissionMediaSourceStreamed;                   // 0x0380(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipEndOfMissionVideo;                            // 0x0388(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGroupContent;                                   // 0x0389(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38A[0x6];                                      // 0x038A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBasicMissionInfo) == 0x000008, "Wrong alignment on FFortBasicMissionInfo");
static_assert(sizeof(FFortBasicMissionInfo) == 0x000390, "Wrong size on FFortBasicMissionInfo");
static_assert(offsetof(FFortBasicMissionInfo, MissionName) == 0x000000, "Member 'FFortBasicMissionInfo::MissionName' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, MissionIcons) == 0x000018, "Member 'FFortBasicMissionInfo::MissionIcons' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, TheaterName) == 0x000348, "Member 'FFortBasicMissionInfo::TheaterName' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, DifficultyName) == 0x000360, "Member 'FFortBasicMissionInfo::DifficultyName' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, EndOfMissionMediaSource) == 0x000378, "Member 'FFortBasicMissionInfo::EndOfMissionMediaSource' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, EndOfMissionMediaSourceStreamed) == 0x000380, "Member 'FFortBasicMissionInfo::EndOfMissionMediaSourceStreamed' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, bSkipEndOfMissionVideo) == 0x000388, "Member 'FFortBasicMissionInfo::bSkipEndOfMissionVideo' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, bIsGroupContent) == 0x000389, "Member 'FFortBasicMissionInfo::bIsGroupContent' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyAnswerWidgetDataTableEntry
// 0x0058 (0x0058 - 0x0000)
struct FFortPlayerSurveyAnswerWidgetDataTableEntry final
{
public:
	TMap<EFortPlayerSurveyQuestionPresentationStyle, TSubclassOf<class UFortPlayerSurveyAnswerWidgetBase>> WidgetClassMap;                                    // 0x0000(0x0050)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortPlayerSurveyAnswerWidgetBase> FallbackWidgetClass;                               // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyAnswerWidgetDataTableEntry) == 0x000008, "Wrong alignment on FFortPlayerSurveyAnswerWidgetDataTableEntry");
static_assert(sizeof(FFortPlayerSurveyAnswerWidgetDataTableEntry) == 0x000058, "Wrong size on FFortPlayerSurveyAnswerWidgetDataTableEntry");
static_assert(offsetof(FFortPlayerSurveyAnswerWidgetDataTableEntry, WidgetClassMap) == 0x000000, "Member 'FFortPlayerSurveyAnswerWidgetDataTableEntry::WidgetClassMap' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyAnswerWidgetDataTableEntry, FallbackWidgetClass) == 0x000050, "Member 'FFortPlayerSurveyAnswerWidgetDataTableEntry::FallbackWidgetClass' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaWinnerInfo
// 0x0020 (0x0020 - 0x0000)
struct FAthenaWinnerInfo final
{
public:
	class FString                                 BigNameWinnerName;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         WinnerNames;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaWinnerInfo) == 0x000008, "Wrong alignment on FAthenaWinnerInfo");
static_assert(sizeof(FAthenaWinnerInfo) == 0x000020, "Wrong size on FAthenaWinnerInfo");
static_assert(offsetof(FAthenaWinnerInfo, BigNameWinnerName) == 0x000000, "Member 'FAthenaWinnerInfo::BigNameWinnerName' has a wrong offset!");
static_assert(offsetof(FAthenaWinnerInfo, WinnerNames) == 0x000010, "Member 'FAthenaWinnerInfo::WinnerNames' has a wrong offset!");

// ScriptStruct FortniteUI.FortLandingPageDefenderSummaryInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortLandingPageDefenderSummaryInfo final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TheaterDisplayName;                                // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 TheaterUniqueId;                                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLandingPageDefenderSummaryInfo) == 0x000008, "Wrong alignment on FFortLandingPageDefenderSummaryInfo");
static_assert(sizeof(FFortLandingPageDefenderSummaryInfo) == 0x000030, "Wrong size on FFortLandingPageDefenderSummaryInfo");
static_assert(offsetof(FFortLandingPageDefenderSummaryInfo, SquadId) == 0x000000, "Member 'FFortLandingPageDefenderSummaryInfo::SquadId' has a wrong offset!");
static_assert(offsetof(FFortLandingPageDefenderSummaryInfo, TheaterDisplayName) == 0x000008, "Member 'FFortLandingPageDefenderSummaryInfo::TheaterDisplayName' has a wrong offset!");
static_assert(offsetof(FFortLandingPageDefenderSummaryInfo, TheaterUniqueId) == 0x000020, "Member 'FFortLandingPageDefenderSummaryInfo::TheaterUniqueId' has a wrong offset!");

// ScriptStruct FortniteUI.FortMaterialProgressBarSectionStyle
// 0x003C (0x003C - 0x0000)
struct FFortMaterialProgressBarSectionStyle final
{
public:
	bool                                          bGradientBar;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BarParamName;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BarColorOneParamName;                              // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BarColorTwoParamName;                              // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BarColorOne;                                       // 0x001C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BarColorTwo;                                       // 0x002C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMaterialProgressBarSectionStyle) == 0x000004, "Wrong alignment on FFortMaterialProgressBarSectionStyle");
static_assert(sizeof(FFortMaterialProgressBarSectionStyle) == 0x00003C, "Wrong size on FFortMaterialProgressBarSectionStyle");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, bGradientBar) == 0x000000, "Member 'FFortMaterialProgressBarSectionStyle::bGradientBar' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, BarParamName) == 0x000004, "Member 'FFortMaterialProgressBarSectionStyle::BarParamName' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, BarColorOneParamName) == 0x00000C, "Member 'FFortMaterialProgressBarSectionStyle::BarColorOneParamName' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, BarColorTwoParamName) == 0x000014, "Member 'FFortMaterialProgressBarSectionStyle::BarColorTwoParamName' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, BarColorOne) == 0x00001C, "Member 'FFortMaterialProgressBarSectionStyle::BarColorOne' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, BarColorTwo) == 0x00002C, "Member 'FFortMaterialProgressBarSectionStyle::BarColorTwo' has a wrong offset!");

// ScriptStruct FortniteUI.FortMaterialProgressBarSectionInfo
// 0x0040 (0x0040 - 0x0000)
struct FFortMaterialProgressBarSectionInfo final
{
public:
	struct FFortMaterialProgressBarSectionStyle   SectionStyle;                                      // 0x0000(0x003C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMaterialProgressBarSectionInfo) == 0x000004, "Wrong alignment on FFortMaterialProgressBarSectionInfo");
static_assert(sizeof(FFortMaterialProgressBarSectionInfo) == 0x000040, "Wrong size on FFortMaterialProgressBarSectionInfo");
static_assert(offsetof(FFortMaterialProgressBarSectionInfo, SectionStyle) == 0x000000, "Member 'FFortMaterialProgressBarSectionInfo::SectionStyle' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionInfo, Percent) == 0x00003C, "Member 'FFortMaterialProgressBarSectionInfo::Percent' has a wrong offset!");

// ScriptStruct FortniteUI.FortLastMissionInfo
// 0x0048 (0x0048 - 0x0000)
struct FFortLastMissionInfo final
{
public:
	class FText                                   TheaterName;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MissionName;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Difficulty;                                        // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLastMissionInfo) == 0x000008, "Wrong alignment on FFortLastMissionInfo");
static_assert(sizeof(FFortLastMissionInfo) == 0x000048, "Wrong size on FFortLastMissionInfo");
static_assert(offsetof(FFortLastMissionInfo, TheaterName) == 0x000000, "Member 'FFortLastMissionInfo::TheaterName' has a wrong offset!");
static_assert(offsetof(FFortLastMissionInfo, MissionName) == 0x000018, "Member 'FFortLastMissionInfo::MissionName' has a wrong offset!");
static_assert(offsetof(FFortLastMissionInfo, Difficulty) == 0x000030, "Member 'FFortLastMissionInfo::Difficulty' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemListFilter
// 0x0018 (0x0018 - 0x0000)
struct FFortItemListFilter final
{
public:
	class FString                                 SearchText;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          FilterType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStorageVault;                                   // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeVaultOverflow;                             // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemListFilter) == 0x000008, "Wrong alignment on FFortItemListFilter");
static_assert(sizeof(FFortItemListFilter) == 0x000018, "Wrong size on FFortItemListFilter");
static_assert(offsetof(FFortItemListFilter, SearchText) == 0x000000, "Member 'FFortItemListFilter::SearchText' has a wrong offset!");
static_assert(offsetof(FFortItemListFilter, FilterType) == 0x000010, "Member 'FFortItemListFilter::FilterType' has a wrong offset!");
static_assert(offsetof(FFortItemListFilter, bInStorageVault) == 0x000011, "Member 'FFortItemListFilter::bInStorageVault' has a wrong offset!");
static_assert(offsetof(FFortItemListFilter, bIncludeVaultOverflow) == 0x000012, "Member 'FFortItemListFilter::bIncludeVaultOverflow' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIXpInfo
// 0x002C (0x002C - 0x0000)
struct FFortUIXpInfo final
{
public:
	int32                                         InitialLevel;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialDisplayXp;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortExperienceDelta                   ChangeInXp;                                        // 0x0008(0x0024)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIXpInfo) == 0x000004, "Wrong alignment on FFortUIXpInfo");
static_assert(sizeof(FFortUIXpInfo) == 0x00002C, "Wrong size on FFortUIXpInfo");
static_assert(offsetof(FFortUIXpInfo, InitialLevel) == 0x000000, "Member 'FFortUIXpInfo::InitialLevel' has a wrong offset!");
static_assert(offsetof(FFortUIXpInfo, InitialDisplayXp) == 0x000004, "Member 'FFortUIXpInfo::InitialDisplayXp' has a wrong offset!");
static_assert(offsetof(FFortUIXpInfo, ChangeInXp) == 0x000008, "Member 'FFortUIXpInfo::ChangeInXp' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaLatestPlaylistData
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FAthenaLatestPlaylistData final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaLatestPlaylistData) == 0x000008, "Wrong alignment on FAthenaLatestPlaylistData");
static_assert(sizeof(FAthenaLatestPlaylistData) == 0x000080, "Wrong size on FAthenaLatestPlaylistData");

// ScriptStruct FortniteUI.FortStateStyle
// 0x0350 (0x0350 - 0x0000)
struct FFortStateStyle final
{
public:
	struct FFortMultiSizeBrush                    Brush;                                             // 0x0000(0x0330)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           PrimaryColor;                                      // 0x0330(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortStateStyle) == 0x000008, "Wrong alignment on FFortStateStyle");
static_assert(sizeof(FFortStateStyle) == 0x000350, "Wrong size on FFortStateStyle");
static_assert(offsetof(FFortStateStyle, Brush) == 0x000000, "Member 'FFortStateStyle::Brush' has a wrong offset!");
static_assert(offsetof(FFortStateStyle, PrimaryColor) == 0x000330, "Member 'FFortStateStyle::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FFortStateStyle, SecondaryColor) == 0x000340, "Member 'FFortStateStyle::SecondaryColor' has a wrong offset!");

// ScriptStruct FortniteUI.UINavigationData
// 0x0030 (0x0030 - 0x0000)
struct FUINavigationData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UObject*                                ObjectData;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IdData;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntData;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUINavigationData) == 0x000008, "Wrong alignment on FUINavigationData");
static_assert(sizeof(FUINavigationData) == 0x000030, "Wrong size on FUINavigationData");
static_assert(offsetof(FUINavigationData, DisplayName) == 0x000000, "Member 'FUINavigationData::DisplayName' has a wrong offset!");
static_assert(offsetof(FUINavigationData, ObjectData) == 0x000018, "Member 'FUINavigationData::ObjectData' has a wrong offset!");
static_assert(offsetof(FUINavigationData, IdData) == 0x000020, "Member 'FUINavigationData::IdData' has a wrong offset!");
static_assert(offsetof(FUINavigationData, IntData) == 0x000028, "Member 'FUINavigationData::IntData' has a wrong offset!");

// ScriptStruct FortniteUI.GridSortKey
// 0x0018 (0x0018 - 0x0000)
struct FGridSortKey final
{
public:
	float                                         Number;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGridSortKey) == 0x000008, "Wrong alignment on FGridSortKey");
static_assert(sizeof(FGridSortKey) == 0x000018, "Wrong size on FGridSortKey");
static_assert(offsetof(FGridSortKey, Number) == 0x000000, "Member 'FGridSortKey::Number' has a wrong offset!");
static_assert(offsetof(FGridSortKey, String) == 0x000008, "Member 'FGridSortKey::String' has a wrong offset!");

// ScriptStruct FortniteUI.FortDailyRewardsItemData
// 0x0010 (0x0010 - 0x0000)
struct FFortDailyRewardsItemData final
{
public:
	class UFortItem*                              RewardItem;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardDay;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCurrentReward;                                   // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClaimed;                                         // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDailyRewardsItemData) == 0x000008, "Wrong alignment on FFortDailyRewardsItemData");
static_assert(sizeof(FFortDailyRewardsItemData) == 0x000010, "Wrong size on FFortDailyRewardsItemData");
static_assert(offsetof(FFortDailyRewardsItemData, RewardItem) == 0x000000, "Member 'FFortDailyRewardsItemData::RewardItem' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsItemData, RewardDay) == 0x000008, "Member 'FFortDailyRewardsItemData::RewardDay' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsItemData, IsCurrentReward) == 0x00000C, "Member 'FFortDailyRewardsItemData::IsCurrentReward' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsItemData, IsClaimed) == 0x00000D, "Member 'FFortDailyRewardsItemData::IsClaimed' has a wrong offset!");

// ScriptStruct FortniteUI.FortDailyRewardsScheduleData
// 0x0098 (0x0098 - 0x0000)
struct FFortDailyRewardsScheduleData final
{
public:
	class FText                                   ScheduleTitle;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ScheduleDescription;                               // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ScheduleItemDescription;                           // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ScheduleEpicItemDescription;                       // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         WeekOffset;                                        // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardsGiven;                                      // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardsAllowed;                                    // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortDailyRewardsItemData>      CalendarItems;                                     // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortDailyRewardsItemData>      HighValueItems;                                    // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ClaimedToday;                                      // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDailyRewardsScheduleData) == 0x000008, "Wrong alignment on FFortDailyRewardsScheduleData");
static_assert(sizeof(FFortDailyRewardsScheduleData) == 0x000098, "Wrong size on FFortDailyRewardsScheduleData");
static_assert(offsetof(FFortDailyRewardsScheduleData, ScheduleTitle) == 0x000000, "Member 'FFortDailyRewardsScheduleData::ScheduleTitle' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, ScheduleDescription) == 0x000018, "Member 'FFortDailyRewardsScheduleData::ScheduleDescription' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, ScheduleItemDescription) == 0x000030, "Member 'FFortDailyRewardsScheduleData::ScheduleItemDescription' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, ScheduleEpicItemDescription) == 0x000048, "Member 'FFortDailyRewardsScheduleData::ScheduleEpicItemDescription' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, WeekOffset) == 0x000060, "Member 'FFortDailyRewardsScheduleData::WeekOffset' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, RewardsGiven) == 0x000064, "Member 'FFortDailyRewardsScheduleData::RewardsGiven' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, RewardsAllowed) == 0x000068, "Member 'FFortDailyRewardsScheduleData::RewardsAllowed' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, CalendarItems) == 0x000070, "Member 'FFortDailyRewardsScheduleData::CalendarItems' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, HighValueItems) == 0x000080, "Member 'FFortDailyRewardsScheduleData::HighValueItems' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, ClaimedToday) == 0x000090, "Member 'FFortDailyRewardsScheduleData::ClaimedToday' has a wrong offset!");

// ScriptStruct FortniteUI.FortDailyRewardsData
// 0x0018 (0x0018 - 0x0000)
struct FFortDailyRewardsData final
{
public:
	int32                                         CurrentLoginDays;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanClaim;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortDailyRewardsScheduleData>  Schedules;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyRewardsData) == 0x000008, "Wrong alignment on FFortDailyRewardsData");
static_assert(sizeof(FFortDailyRewardsData) == 0x000018, "Wrong size on FFortDailyRewardsData");
static_assert(offsetof(FFortDailyRewardsData, CurrentLoginDays) == 0x000000, "Member 'FFortDailyRewardsData::CurrentLoginDays' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsData, bCanClaim) == 0x000004, "Member 'FFortDailyRewardsData::bCanClaim' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsData, Schedules) == 0x000008, "Member 'FFortDailyRewardsData::Schedules' has a wrong offset!");

// ScriptStruct FortniteUI.KoreanCafeData
// 0x0038 (0x0038 - 0x0000)
struct FKoreanCafeData final
{
public:
	struct FGameplayTag                           Korean_Cafe;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Korean_Cafe_Header;                                // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Korean_Cafe_Description;                           // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoreanCafeData) == 0x000008, "Wrong alignment on FKoreanCafeData");
static_assert(sizeof(FKoreanCafeData) == 0x000038, "Wrong size on FKoreanCafeData");
static_assert(offsetof(FKoreanCafeData, Korean_Cafe) == 0x000000, "Member 'FKoreanCafeData::Korean_Cafe' has a wrong offset!");
static_assert(offsetof(FKoreanCafeData, Korean_Cafe_Header) == 0x000008, "Member 'FKoreanCafeData::Korean_Cafe_Header' has a wrong offset!");
static_assert(offsetof(FKoreanCafeData, Korean_Cafe_Description) == 0x000020, "Member 'FKoreanCafeData::Korean_Cafe_Description' has a wrong offset!");

// ScriptStruct FortniteUI.KoreanCafeJsonObject
// 0x0010 (0x0010 - 0x0000)
struct FKoreanCafeJsonObject final
{
public:
	TArray<struct FKoreanCafeData>                Cafes;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoreanCafeJsonObject) == 0x000008, "Wrong alignment on FKoreanCafeJsonObject");
static_assert(sizeof(FKoreanCafeJsonObject) == 0x000010, "Wrong size on FKoreanCafeJsonObject");
static_assert(offsetof(FKoreanCafeJsonObject, Cafes) == 0x000000, "Member 'FKoreanCafeJsonObject::Cafes' has a wrong offset!");

// ScriptStruct FortniteUI.FortReceivedItemLootInfo
// 0x0028 (0x0028 - 0x0000)
struct FFortReceivedItemLootInfo final
{
public:
	class UFortItemDefinition*                    ItemDef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TemplateId;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              GeneratedItemInstance;                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortReceivedItemLootInfo) == 0x000008, "Wrong alignment on FFortReceivedItemLootInfo");
static_assert(sizeof(FFortReceivedItemLootInfo) == 0x000028, "Wrong size on FFortReceivedItemLootInfo");
static_assert(offsetof(FFortReceivedItemLootInfo, ItemDef) == 0x000000, "Member 'FFortReceivedItemLootInfo::ItemDef' has a wrong offset!");
static_assert(offsetof(FFortReceivedItemLootInfo, Quantity) == 0x000008, "Member 'FFortReceivedItemLootInfo::Quantity' has a wrong offset!");
static_assert(offsetof(FFortReceivedItemLootInfo, TemplateId) == 0x000010, "Member 'FFortReceivedItemLootInfo::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortReceivedItemLootInfo, GeneratedItemInstance) == 0x000020, "Member 'FFortReceivedItemLootInfo::GeneratedItemInstance' has a wrong offset!");

// ScriptStruct FortniteUI.RadialOptionData
// 0x00C8 (0x00C8 - 0x0000)
struct FRadialOptionData
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0018(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SoftIcon;                                          // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRadialOptionData) == 0x000008, "Wrong alignment on FRadialOptionData");
static_assert(sizeof(FRadialOptionData) == 0x0000C8, "Wrong size on FRadialOptionData");
static_assert(offsetof(FRadialOptionData, Label) == 0x000000, "Member 'FRadialOptionData::Label' has a wrong offset!");
static_assert(offsetof(FRadialOptionData, Brush) == 0x000018, "Member 'FRadialOptionData::Brush' has a wrong offset!");
static_assert(offsetof(FRadialOptionData, SoftIcon) == 0x0000A0, "Member 'FRadialOptionData::SoftIcon' has a wrong offset!");

// ScriptStruct FortniteUI.EmoteOptionData
// 0x0008 (0x00D0 - 0x00C8)
struct FEmoteOptionData final : public FRadialOptionData
{
public:
	class FName                                   EmoteCommand;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteOptionData) == 0x000008, "Wrong alignment on FEmoteOptionData");
static_assert(sizeof(FEmoteOptionData) == 0x0000D0, "Wrong size on FEmoteOptionData");
static_assert(offsetof(FEmoteOptionData, EmoteCommand) == 0x0000C8, "Member 'FEmoteOptionData::EmoteCommand' has a wrong offset!");

// ScriptStruct FortniteUI.SquadSlotSortTypes
// 0x0010 (0x0010 - 0x0000)
struct FSquadSlotSortTypes final
{
public:
	TArray<ESquadSlotSortType>                    SortTypes;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquadSlotSortTypes) == 0x000008, "Wrong alignment on FSquadSlotSortTypes");
static_assert(sizeof(FSquadSlotSortTypes) == 0x000010, "Wrong size on FSquadSlotSortTypes");
static_assert(offsetof(FSquadSlotSortTypes, SortTypes) == 0x000000, "Member 'FSquadSlotSortTypes::SortTypes' has a wrong offset!");

// ScriptStruct FortniteUI.TimerDisplayData
// 0x0038 (0x0038 - 0x0000)
struct FTimerDisplayData final
{
public:
	struct FLinearColor                           BrushColor;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TimeRemainingDisplayText;                          // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimerDisplayData) == 0x000008, "Wrong alignment on FTimerDisplayData");
static_assert(sizeof(FTimerDisplayData) == 0x000038, "Wrong size on FTimerDisplayData");
static_assert(offsetof(FTimerDisplayData, BrushColor) == 0x000000, "Member 'FTimerDisplayData::BrushColor' has a wrong offset!");
static_assert(offsetof(FTimerDisplayData, TimeRemainingDisplayText) == 0x000010, "Member 'FTimerDisplayData::TimeRemainingDisplayText' has a wrong offset!");
static_assert(offsetof(FTimerDisplayData, TextColor) == 0x000028, "Member 'FTimerDisplayData::TextColor' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIStateTriggerEvalContext
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFortUIStateTriggerEvalContext final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsLoggedIn;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWorldReady;                                     // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUIStateTriggerEvalContext) == 0x000008, "Wrong alignment on FFortUIStateTriggerEvalContext");
static_assert(sizeof(FFortUIStateTriggerEvalContext) == 0x000018, "Wrong size on FFortUIStateTriggerEvalContext");
static_assert(offsetof(FFortUIStateTriggerEvalContext, bIsLoggedIn) == 0x000010, "Member 'FFortUIStateTriggerEvalContext::bIsLoggedIn' has a wrong offset!");
static_assert(offsetof(FFortUIStateTriggerEvalContext, bIsWorldReady) == 0x000011, "Member 'FFortUIStateTriggerEvalContext::bIsWorldReady' has a wrong offset!");

// ScriptStruct FortniteUI.MarkerLargeIndicatorType
// 0x0010 (0x0010 - 0x0000)
struct FMarkerLargeIndicatorType final
{
public:
	class UMaterialInterface*                     MarkerMaterial;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ImageSize;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarkerLargeIndicatorType) == 0x000008, "Wrong alignment on FMarkerLargeIndicatorType");
static_assert(sizeof(FMarkerLargeIndicatorType) == 0x000010, "Wrong size on FMarkerLargeIndicatorType");
static_assert(offsetof(FMarkerLargeIndicatorType, MarkerMaterial) == 0x000000, "Member 'FMarkerLargeIndicatorType::MarkerMaterial' has a wrong offset!");
static_assert(offsetof(FMarkerLargeIndicatorType, ImageSize) == 0x000008, "Member 'FMarkerLargeIndicatorType::ImageSize' has a wrong offset!");

// ScriptStruct FortniteUI.GlyphAllUpdateTransitions
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FGlyphAllUpdateTransitions final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGlyphAllUpdateTransitions) == 0x000004, "Wrong alignment on FGlyphAllUpdateTransitions");
static_assert(sizeof(FGlyphAllUpdateTransitions) == 0x000018, "Wrong size on FGlyphAllUpdateTransitions");

// ScriptStruct FortniteUI.FortTopBarTabButtonInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FFortTopBarTabButtonInfo final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            IconBrush;                                         // 0x0020(0x0088)(Edit, NativeAccessSpecifierPublic)
	EFortUIFeature                                LinkedUIFeature;                                   // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBangType                                 BangType;                                          // 0x00A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTopBarTabButtonInfo) == 0x000008, "Wrong alignment on FFortTopBarTabButtonInfo");
static_assert(sizeof(FFortTopBarTabButtonInfo) == 0x0000B0, "Wrong size on FFortTopBarTabButtonInfo");
static_assert(offsetof(FFortTopBarTabButtonInfo, TabId) == 0x000000, "Member 'FFortTopBarTabButtonInfo::TabId' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, DisplayName) == 0x000008, "Member 'FFortTopBarTabButtonInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, IconBrush) == 0x000020, "Member 'FFortTopBarTabButtonInfo::IconBrush' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, LinkedUIFeature) == 0x0000A8, "Member 'FFortTopBarTabButtonInfo::LinkedUIFeature' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, BangType) == 0x0000A9, "Member 'FFortTopBarTabButtonInfo::BangType' has a wrong offset!");

// ScriptStruct FortniteUI.GlyphUpdateTransition
// 0x000C (0x000C - 0x0000)
struct FGlyphUpdateTransition final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeOffset;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeOffset;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlyphUpdateTransition) == 0x000004, "Wrong alignment on FGlyphUpdateTransition");
static_assert(sizeof(FGlyphUpdateTransition) == 0x00000C, "Wrong size on FGlyphUpdateTransition");
static_assert(offsetof(FGlyphUpdateTransition, Count) == 0x000000, "Member 'FGlyphUpdateTransition::Count' has a wrong offset!");
static_assert(offsetof(FGlyphUpdateTransition, MinTimeOffset) == 0x000004, "Member 'FGlyphUpdateTransition::MinTimeOffset' has a wrong offset!");
static_assert(offsetof(FGlyphUpdateTransition, MaxTimeOffset) == 0x000008, "Member 'FGlyphUpdateTransition::MaxTimeOffset' has a wrong offset!");

// ScriptStruct FortniteUI.LeaderboardFilter
// 0x0028 (0x0028 - 0x0000)
struct FLeaderboardFilter final
{
public:
	class UDataTable*                             LeaderboardDisplayData;                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardFilter) == 0x000008, "Wrong alignment on FLeaderboardFilter");
static_assert(sizeof(FLeaderboardFilter) == 0x000028, "Wrong size on FLeaderboardFilter");
static_assert(offsetof(FLeaderboardFilter, LeaderboardDisplayData) == 0x000000, "Member 'FLeaderboardFilter::LeaderboardDisplayData' has a wrong offset!");

// ScriptStruct FortniteUI.CardPackOffer
// 0x0078 (0x0078 - 0x0000)
struct FCardPackOffer final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         MtxPrice;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECatalogSaleType                              SaleType;                                          // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SaleText;                                          // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegularPrice;                                      // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAccountItemDefinition*             CurrencyType;                                      // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityRemaining;                                 // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTimedOffer;                                       // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x13];                                      // 0x0065(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCardPackOffer) == 0x000008, "Wrong alignment on FCardPackOffer");
static_assert(sizeof(FCardPackOffer) == 0x000078, "Wrong size on FCardPackOffer");
static_assert(offsetof(FCardPackOffer, Title) == 0x000000, "Member 'FCardPackOffer::Title' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, Description) == 0x000018, "Member 'FCardPackOffer::Description' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, MtxPrice) == 0x000030, "Member 'FCardPackOffer::MtxPrice' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, SaleType) == 0x000034, "Member 'FCardPackOffer::SaleType' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, SaleText) == 0x000038, "Member 'FCardPackOffer::SaleText' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, Price) == 0x000050, "Member 'FCardPackOffer::Price' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, RegularPrice) == 0x000054, "Member 'FCardPackOffer::RegularPrice' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, CurrencyType) == 0x000058, "Member 'FCardPackOffer::CurrencyType' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, QuantityRemaining) == 0x000060, "Member 'FCardPackOffer::QuantityRemaining' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, bTimedOffer) == 0x000064, "Member 'FCardPackOffer::bTimedOffer' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaPlaylistLeaderboardData
// 0x0050 (0x0050 - 0x0000)
struct FAthenaPlaylistLeaderboardData final
{
public:
	class FName                                   StatId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   StatDisplayName;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TabDisplayName;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 BaseGameplayTag;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGlobal;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaPlaylistLeaderboardData) == 0x000008, "Wrong alignment on FAthenaPlaylistLeaderboardData");
static_assert(sizeof(FAthenaPlaylistLeaderboardData) == 0x000050, "Wrong size on FAthenaPlaylistLeaderboardData");
static_assert(offsetof(FAthenaPlaylistLeaderboardData, StatId) == 0x000000, "Member 'FAthenaPlaylistLeaderboardData::StatId' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistLeaderboardData, StatDisplayName) == 0x000008, "Member 'FAthenaPlaylistLeaderboardData::StatDisplayName' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistLeaderboardData, TabDisplayName) == 0x000020, "Member 'FAthenaPlaylistLeaderboardData::TabDisplayName' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistLeaderboardData, BaseGameplayTag) == 0x000038, "Member 'FAthenaPlaylistLeaderboardData::BaseGameplayTag' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistLeaderboardData, bIsGlobal) == 0x000048, "Member 'FAthenaPlaylistLeaderboardData::bIsGlobal' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaLeaderboardData
// 0x0020 (0x0028 - 0x0008)
struct FAthenaLeaderboardData final : public FTableRowBase
{
public:
	EFortAthenaPlaylist                           Playlist;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlaylistName;                                      // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonInputType                              InputType;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAthenaPlaylistLeaderboardData> Stats;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaLeaderboardData) == 0x000008, "Wrong alignment on FAthenaLeaderboardData");
static_assert(sizeof(FAthenaLeaderboardData) == 0x000028, "Wrong size on FAthenaLeaderboardData");
static_assert(offsetof(FAthenaLeaderboardData, Playlist) == 0x000008, "Member 'FAthenaLeaderboardData::Playlist' has a wrong offset!");
static_assert(offsetof(FAthenaLeaderboardData, PlaylistName) == 0x00000C, "Member 'FAthenaLeaderboardData::PlaylistName' has a wrong offset!");
static_assert(offsetof(FAthenaLeaderboardData, InputType) == 0x000014, "Member 'FAthenaLeaderboardData::InputType' has a wrong offset!");
static_assert(offsetof(FAthenaLeaderboardData, Stats) == 0x000018, "Member 'FAthenaLeaderboardData::Stats' has a wrong offset!");

// ScriptStruct FortniteUI.FortWeaponBoardDisplaySlot
// 0x0050 (0x0050 - 0x0000)
struct FFortWeaponBoardDisplaySlot final
{
public:
	struct FGameplayTag                           RequiredTag;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MeshRelativeTransform;                             // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LocalOffsetMultiplier;                             // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWeaponBoardDisplaySlot) == 0x000010, "Wrong alignment on FFortWeaponBoardDisplaySlot");
static_assert(sizeof(FFortWeaponBoardDisplaySlot) == 0x000050, "Wrong size on FFortWeaponBoardDisplaySlot");
static_assert(offsetof(FFortWeaponBoardDisplaySlot, RequiredTag) == 0x000000, "Member 'FFortWeaponBoardDisplaySlot::RequiredTag' has a wrong offset!");
static_assert(offsetof(FFortWeaponBoardDisplaySlot, MeshRelativeTransform) == 0x000010, "Member 'FFortWeaponBoardDisplaySlot::MeshRelativeTransform' has a wrong offset!");
static_assert(offsetof(FFortWeaponBoardDisplaySlot, LocalOffsetMultiplier) == 0x000040, "Member 'FFortWeaponBoardDisplaySlot::LocalOffsetMultiplier' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaTeamCountSlotData
// 0x0038 (0x0038 - 0x0000)
struct FAthenaTeamCountSlotData final
{
public:
	class FText                                   TeamNameText;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TeamCountText;                                     // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsMyTeam;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaTeamCountSlotData) == 0x000008, "Wrong alignment on FAthenaTeamCountSlotData");
static_assert(sizeof(FAthenaTeamCountSlotData) == 0x000038, "Wrong size on FAthenaTeamCountSlotData");
static_assert(offsetof(FAthenaTeamCountSlotData, TeamNameText) == 0x000000, "Member 'FAthenaTeamCountSlotData::TeamNameText' has a wrong offset!");
static_assert(offsetof(FAthenaTeamCountSlotData, TeamCountText) == 0x000018, "Member 'FAthenaTeamCountSlotData::TeamCountText' has a wrong offset!");
static_assert(offsetof(FAthenaTeamCountSlotData, bIsMyTeam) == 0x000030, "Member 'FAthenaTeamCountSlotData::bIsMyTeam' has a wrong offset!");

// ScriptStruct FortniteUI.FortResurrectionUIData
// 0x0003 (0x0003 - 0x0000)
struct FFortResurrectionUIData final
{
public:
	bool                                          bResurrectionChipAvailable;                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResurrectionChipPickedUp;                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResurrectionChipRebooting;                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortResurrectionUIData) == 0x000001, "Wrong alignment on FFortResurrectionUIData");
static_assert(sizeof(FFortResurrectionUIData) == 0x000003, "Wrong size on FFortResurrectionUIData");
static_assert(offsetof(FFortResurrectionUIData, bResurrectionChipAvailable) == 0x000000, "Member 'FFortResurrectionUIData::bResurrectionChipAvailable' has a wrong offset!");
static_assert(offsetof(FFortResurrectionUIData, bResurrectionChipPickedUp) == 0x000001, "Member 'FFortResurrectionUIData::bResurrectionChipPickedUp' has a wrong offset!");
static_assert(offsetof(FFortResurrectionUIData, bResurrectionChipRebooting) == 0x000002, "Member 'FFortResurrectionUIData::bResurrectionChipRebooting' has a wrong offset!");

// ScriptStruct FortniteUI.CreativeAdData
// 0x0068 (0x0068 - 0x0000)
struct FCreativeAdData final
{
public:
	class FString                                 Header;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sub_Header;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Creator_Name;                                      // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Island_Code;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCreativeAdType                           Ad_Type;                                           // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCreativeAdColorPreset                    Ad_Color_Preset;                                   // 0x0051(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Image;                                             // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeAdData) == 0x000008, "Wrong alignment on FCreativeAdData");
static_assert(sizeof(FCreativeAdData) == 0x000068, "Wrong size on FCreativeAdData");
static_assert(offsetof(FCreativeAdData, Header) == 0x000000, "Member 'FCreativeAdData::Header' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Sub_Header) == 0x000010, "Member 'FCreativeAdData::Sub_Header' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Description) == 0x000020, "Member 'FCreativeAdData::Description' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Creator_Name) == 0x000030, "Member 'FCreativeAdData::Creator_Name' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Island_Code) == 0x000040, "Member 'FCreativeAdData::Island_Code' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Ad_Type) == 0x000050, "Member 'FCreativeAdData::Ad_Type' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Ad_Color_Preset) == 0x000051, "Member 'FCreativeAdData::Ad_Color_Preset' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Image) == 0x000058, "Member 'FCreativeAdData::Image' has a wrong offset!");

// ScriptStruct FortniteUI.CreativeAdJsonObject
// 0x0010 (0x0010 - 0x0000)
struct FCreativeAdJsonObject final
{
public:
	TArray<struct FCreativeAdData>                Ads;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeAdJsonObject) == 0x000008, "Wrong alignment on FCreativeAdJsonObject");
static_assert(sizeof(FCreativeAdJsonObject) == 0x000010, "Wrong size on FCreativeAdJsonObject");
static_assert(offsetof(FCreativeAdJsonObject, Ads) == 0x000000, "Member 'FCreativeAdJsonObject::Ads' has a wrong offset!");

// ScriptStruct FortniteUI.CreativeAdSource
// 0x0030 (0x0030 - 0x0000)
struct FCreativeAdSource final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 __locale;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCreativeAdJsonObject                  Ad_Info;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeAdSource) == 0x000008, "Wrong alignment on FCreativeAdSource");
static_assert(sizeof(FCreativeAdSource) == 0x000030, "Wrong size on FCreativeAdSource");
static_assert(offsetof(FCreativeAdSource, _title) == 0x000000, "Member 'FCreativeAdSource::_title' has a wrong offset!");
static_assert(offsetof(FCreativeAdSource, __locale) == 0x000010, "Member 'FCreativeAdSource::__locale' has a wrong offset!");
static_assert(offsetof(FCreativeAdSource, Ad_Info) == 0x000020, "Member 'FCreativeAdSource::Ad_Info' has a wrong offset!");

// ScriptStruct FortniteUI.StatGroupData
// 0x00B0 (0x00B0 - 0x0000)
struct FStatGroupData final
{
public:
	class FText                                   GroupName;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Group;                                             // 0x0018(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChartValue;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChartOrigionalValue;                               // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatGroupData) == 0x000008, "Wrong alignment on FStatGroupData");
static_assert(sizeof(FStatGroupData) == 0x0000B0, "Wrong size on FStatGroupData");
static_assert(offsetof(FStatGroupData, GroupName) == 0x000000, "Member 'FStatGroupData::GroupName' has a wrong offset!");
static_assert(offsetof(FStatGroupData, Group) == 0x000018, "Member 'FStatGroupData::Group' has a wrong offset!");
static_assert(offsetof(FStatGroupData, Value) == 0x0000A0, "Member 'FStatGroupData::Value' has a wrong offset!");
static_assert(offsetof(FStatGroupData, ChartValue) == 0x0000A4, "Member 'FStatGroupData::ChartValue' has a wrong offset!");
static_assert(offsetof(FStatGroupData, ChartOrigionalValue) == 0x0000A8, "Member 'FStatGroupData::ChartOrigionalValue' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaReplayBrowserMatchStats
// 0x0028 (0x0028 - 0x0000)
struct FAthenaReplayBrowserMatchStats final
{
public:
	int32                                         Hits;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Headshots;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revives;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageTaken;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamagePlayers;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageStructures;                                  // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChestsOpened;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Distance;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialsGathered;                                 // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialsUsed;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaReplayBrowserMatchStats) == 0x000004, "Wrong alignment on FAthenaReplayBrowserMatchStats");
static_assert(sizeof(FAthenaReplayBrowserMatchStats) == 0x000028, "Wrong size on FAthenaReplayBrowserMatchStats");
static_assert(offsetof(FAthenaReplayBrowserMatchStats, Hits) == 0x000000, "Member 'FAthenaReplayBrowserMatchStats::Hits' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserMatchStats, Headshots) == 0x000004, "Member 'FAthenaReplayBrowserMatchStats::Headshots' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserMatchStats, Revives) == 0x000008, "Member 'FAthenaReplayBrowserMatchStats::Revives' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserMatchStats, DamageTaken) == 0x00000C, "Member 'FAthenaReplayBrowserMatchStats::DamageTaken' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserMatchStats, DamagePlayers) == 0x000010, "Member 'FAthenaReplayBrowserMatchStats::DamagePlayers' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserMatchStats, DamageStructures) == 0x000014, "Member 'FAthenaReplayBrowserMatchStats::DamageStructures' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserMatchStats, ChestsOpened) == 0x000018, "Member 'FAthenaReplayBrowserMatchStats::ChestsOpened' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserMatchStats, Distance) == 0x00001C, "Member 'FAthenaReplayBrowserMatchStats::Distance' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserMatchStats, MaterialsGathered) == 0x000020, "Member 'FAthenaReplayBrowserMatchStats::MaterialsGathered' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserMatchStats, MaterialsUsed) == 0x000024, "Member 'FAthenaReplayBrowserMatchStats::MaterialsUsed' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaReplayBrowserRowData
// 0x0090 (0x0090 - 0x0000)
struct FAthenaReplayBrowserRowData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Date;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mode;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayers;                                        // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kills;                                             // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Views;                                             // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assists;                                           // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Accuracy;                                          // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOld;                                            // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAthenaReplayBrowserMatchStats         MatchStats;                                        // 0x0050(0x0028)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsSaved;                                          // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCorrupt;                                        // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFeatured;                                       // 0x007A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x15];                                      // 0x007B(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaReplayBrowserRowData) == 0x000008, "Wrong alignment on FAthenaReplayBrowserRowData");
static_assert(sizeof(FAthenaReplayBrowserRowData) == 0x000090, "Wrong size on FAthenaReplayBrowserRowData");
static_assert(offsetof(FAthenaReplayBrowserRowData, Name) == 0x000000, "Member 'FAthenaReplayBrowserRowData::Name' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Date) == 0x000010, "Member 'FAthenaReplayBrowserRowData::Date' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Version) == 0x000018, "Member 'FAthenaReplayBrowserRowData::Version' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Size) == 0x00001C, "Member 'FAthenaReplayBrowserRowData::Size' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Mode) == 0x000020, "Member 'FAthenaReplayBrowserRowData::Mode' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Length) == 0x000030, "Member 'FAthenaReplayBrowserRowData::Length' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Rank) == 0x000034, "Member 'FAthenaReplayBrowserRowData::Rank' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, NumPlayers) == 0x000038, "Member 'FAthenaReplayBrowserRowData::NumPlayers' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Kills) == 0x00003C, "Member 'FAthenaReplayBrowserRowData::Kills' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Views) == 0x000040, "Member 'FAthenaReplayBrowserRowData::Views' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Assists) == 0x000044, "Member 'FAthenaReplayBrowserRowData::Assists' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Accuracy) == 0x000048, "Member 'FAthenaReplayBrowserRowData::Accuracy' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, bIsOld) == 0x00004C, "Member 'FAthenaReplayBrowserRowData::bIsOld' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, MatchStats) == 0x000050, "Member 'FAthenaReplayBrowserRowData::MatchStats' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, bIsSaved) == 0x000078, "Member 'FAthenaReplayBrowserRowData::bIsSaved' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, bIsCorrupt) == 0x000079, "Member 'FAthenaReplayBrowserRowData::bIsCorrupt' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, bIsFeatured) == 0x00007A, "Member 'FAthenaReplayBrowserRowData::bIsFeatured' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaNews
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FAthenaNews final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaNews) == 0x000008, "Wrong alignment on FAthenaNews");
static_assert(sizeof(FAthenaNews) == 0x000028, "Wrong size on FAthenaNews");

// ScriptStruct FortniteUI.RarityArray
// 0x0010 (0x0010 - 0x0000)
struct FRarityArray final
{
public:
	TArray<class UFortItemDefinition*>            Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRarityArray) == 0x000008, "Wrong alignment on FRarityArray");
static_assert(sizeof(FRarityArray) == 0x000010, "Wrong size on FRarityArray");
static_assert(offsetof(FRarityArray, Items) == 0x000000, "Member 'FRarityArray::Items' has a wrong offset!");

// ScriptStruct FortniteUI.KoreanCafeSource
// 0x0030 (0x0030 - 0x0000)
struct FKoreanCafeSource final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 __locale;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoreanCafeJsonObject                  Cafe_Info;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoreanCafeSource) == 0x000008, "Wrong alignment on FKoreanCafeSource");
static_assert(sizeof(FKoreanCafeSource) == 0x000030, "Wrong size on FKoreanCafeSource");
static_assert(offsetof(FKoreanCafeSource, _title) == 0x000000, "Member 'FKoreanCafeSource::_title' has a wrong offset!");
static_assert(offsetof(FKoreanCafeSource, __locale) == 0x000010, "Member 'FKoreanCafeSource::__locale' has a wrong offset!");
static_assert(offsetof(FKoreanCafeSource, Cafe_Info) == 0x000020, "Member 'FKoreanCafeSource::Cafe_Info' has a wrong offset!");

// ScriptStruct FortniteUI.UINavigationEntry
// 0x0050 (0x0050 - 0x0000)
struct FUINavigationEntry final
{
public:
	struct FUINavigationData                      Data;                                              // 0x0000(0x0030)(NativeAccessSpecifierPublic)
	TDelegate<void(const struct FUINavigationData& Data)> NavigateToDelegate;                                // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FUINavigationData& Data)> NavigateFromDelegate;                              // 0x0040(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUINavigationEntry) == 0x000008, "Wrong alignment on FUINavigationEntry");
static_assert(sizeof(FUINavigationEntry) == 0x000050, "Wrong size on FUINavigationEntry");
static_assert(offsetof(FUINavigationEntry, Data) == 0x000000, "Member 'FUINavigationEntry::Data' has a wrong offset!");
static_assert(offsetof(FUINavigationEntry, NavigateToDelegate) == 0x000030, "Member 'FUINavigationEntry::NavigateToDelegate' has a wrong offset!");
static_assert(offsetof(FUINavigationEntry, NavigateFromDelegate) == 0x000040, "Member 'FUINavigationEntry::NavigateFromDelegate' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaTeamDisplayInfo
// 0x0088 (0x0088 - 0x0000)
struct FAthenaTeamDisplayInfo final
{
public:
	TSoftObjectPtr<class UObject>                 Icon;                                              // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 Ribbon;                                            // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PedestalColor;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaTeamDisplayInfo) == 0x000008, "Wrong alignment on FAthenaTeamDisplayInfo");
static_assert(sizeof(FAthenaTeamDisplayInfo) == 0x000088, "Wrong size on FAthenaTeamDisplayInfo");
static_assert(offsetof(FAthenaTeamDisplayInfo, Icon) == 0x000000, "Member 'FAthenaTeamDisplayInfo::Icon' has a wrong offset!");
static_assert(offsetof(FAthenaTeamDisplayInfo, Ribbon) == 0x000028, "Member 'FAthenaTeamDisplayInfo::Ribbon' has a wrong offset!");
static_assert(offsetof(FAthenaTeamDisplayInfo, Name) == 0x000050, "Member 'FAthenaTeamDisplayInfo::Name' has a wrong offset!");
static_assert(offsetof(FAthenaTeamDisplayInfo, TextColor) == 0x000068, "Member 'FAthenaTeamDisplayInfo::TextColor' has a wrong offset!");
static_assert(offsetof(FAthenaTeamDisplayInfo, PedestalColor) == 0x000078, "Member 'FAthenaTeamDisplayInfo::PedestalColor' has a wrong offset!");

// ScriptStruct FortniteUI.BackgroundColors
// 0x0030 (0x0030 - 0x0000)
struct FBackgroundColors final
{
public:
	struct FLinearColor                           Color_0;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color_1;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GridColor;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBackgroundColors) == 0x000004, "Wrong alignment on FBackgroundColors");
static_assert(sizeof(FBackgroundColors) == 0x000030, "Wrong size on FBackgroundColors");
static_assert(offsetof(FBackgroundColors, Color_0) == 0x000000, "Member 'FBackgroundColors::Color_0' has a wrong offset!");
static_assert(offsetof(FBackgroundColors, Color_1) == 0x000010, "Member 'FBackgroundColors::Color_1' has a wrong offset!");
static_assert(offsetof(FBackgroundColors, GridColor) == 0x000020, "Member 'FBackgroundColors::GridColor' has a wrong offset!");

// ScriptStruct FortniteUI.BarrierObjectState
// 0x0010 (0x0010 - 0x0000)
struct FBarrierObjectState final
{
public:
	class AAthenaBarrierObjective*                ObjectiveActor;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamNum;                                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarrierFoodTeam                              FoodTeam;                                          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarrierObjectiveDamageState                  DamageState;                                       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBarrierObjectState) == 0x000008, "Wrong alignment on FBarrierObjectState");
static_assert(sizeof(FBarrierObjectState) == 0x000010, "Wrong size on FBarrierObjectState");
static_assert(offsetof(FBarrierObjectState, ObjectiveActor) == 0x000000, "Member 'FBarrierObjectState::ObjectiveActor' has a wrong offset!");
static_assert(offsetof(FBarrierObjectState, TeamNum) == 0x000008, "Member 'FBarrierObjectState::TeamNum' has a wrong offset!");
static_assert(offsetof(FBarrierObjectState, FoodTeam) == 0x000009, "Member 'FBarrierObjectState::FoodTeam' has a wrong offset!");
static_assert(offsetof(FBarrierObjectState, DamageState) == 0x00000A, "Member 'FBarrierObjectState::DamageState' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaBossHealthData
// 0x0030 (0x0030 - 0x0000)
struct FAthenaBossHealthData final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowShields;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Health;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealthMax;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Shields;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShieldsMax;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaBossHealthData) == 0x000008, "Wrong alignment on FAthenaBossHealthData");
static_assert(sizeof(FAthenaBossHealthData) == 0x000030, "Wrong size on FAthenaBossHealthData");
static_assert(offsetof(FAthenaBossHealthData, bVisible) == 0x000000, "Member 'FAthenaBossHealthData::bVisible' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, bShowShields) == 0x000001, "Member 'FAthenaBossHealthData::bShowShields' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, Name) == 0x000008, "Member 'FAthenaBossHealthData::Name' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, Health) == 0x000020, "Member 'FAthenaBossHealthData::Health' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, HealthMax) == 0x000024, "Member 'FAthenaBossHealthData::HealthMax' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, Shields) == 0x000028, "Member 'FAthenaBossHealthData::Shields' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, ShieldsMax) == 0x00002C, "Member 'FAthenaBossHealthData::ShieldsMax' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaPlaylistEntry
// 0x0078 (0x0078 - 0x0000)
struct FAthenaPlaylistEntry final
{
public:
	class FString                                 PlaylistName;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplaySubName;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Violator;                                          // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image;                                             // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExtraImages;                                       // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CropOffset;                                        // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMatchmakingTileStyle                     SpecialBorderId;                                   // 0x0074(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowRevealAnimation;                              // 0x0075(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaPlaylistEntry) == 0x000008, "Wrong alignment on FAthenaPlaylistEntry");
static_assert(sizeof(FAthenaPlaylistEntry) == 0x000078, "Wrong size on FAthenaPlaylistEntry");
static_assert(offsetof(FAthenaPlaylistEntry, PlaylistName) == 0x000000, "Member 'FAthenaPlaylistEntry::PlaylistName' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistEntry, DisplayName) == 0x000010, "Member 'FAthenaPlaylistEntry::DisplayName' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistEntry, DisplaySubName) == 0x000020, "Member 'FAthenaPlaylistEntry::DisplaySubName' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistEntry, Description) == 0x000030, "Member 'FAthenaPlaylistEntry::Description' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistEntry, Violator) == 0x000040, "Member 'FAthenaPlaylistEntry::Violator' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistEntry, Image) == 0x000050, "Member 'FAthenaPlaylistEntry::Image' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistEntry, ExtraImages) == 0x000060, "Member 'FAthenaPlaylistEntry::ExtraImages' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistEntry, CropOffset) == 0x000070, "Member 'FAthenaPlaylistEntry::CropOffset' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistEntry, SpecialBorderId) == 0x000074, "Member 'FAthenaPlaylistEntry::SpecialBorderId' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistEntry, bShowRevealAnimation) == 0x000075, "Member 'FAthenaPlaylistEntry::bShowRevealAnimation' has a wrong offset!");

// ScriptStruct FortniteUI.ShowdownLatestTournamentData
// 0x0050 (0x0050 - 0x0000)
struct FShowdownLatestTournamentData final
{
public:
	TMap<class FString, struct FShowdownTournamentEntry> Entries;                                           // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShowdownLatestTournamentData) == 0x000008, "Wrong alignment on FShowdownLatestTournamentData");
static_assert(sizeof(FShowdownLatestTournamentData) == 0x000050, "Wrong size on FShowdownLatestTournamentData");
static_assert(offsetof(FShowdownLatestTournamentData, Entries) == 0x000000, "Member 'FShowdownLatestTournamentData::Entries' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaNewsSource
// 0x0050 (0x0050 - 0x0000)
struct FAthenaNewsSource final
{
public:
	class FString                                 Header;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAthenaNewsMessages                    News;                                              // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 _locale;                                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaNewsSource) == 0x000008, "Wrong alignment on FAthenaNewsSource");
static_assert(sizeof(FAthenaNewsSource) == 0x000050, "Wrong size on FAthenaNewsSource");
static_assert(offsetof(FAthenaNewsSource, Header) == 0x000000, "Member 'FAthenaNewsSource::Header' has a wrong offset!");
static_assert(offsetof(FAthenaNewsSource, News) == 0x000010, "Member 'FAthenaNewsSource::News' has a wrong offset!");
static_assert(offsetof(FAthenaNewsSource, _locale) == 0x000040, "Member 'FAthenaNewsSource::_locale' has a wrong offset!");

// ScriptStruct FortniteUI.LobbySource
// 0x0040 (0x0040 - 0x0000)
struct FLobbySource final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 __locale;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackgroundImage;                                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Stage;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbySource) == 0x000008, "Wrong alignment on FLobbySource");
static_assert(sizeof(FLobbySource) == 0x000040, "Wrong size on FLobbySource");
static_assert(offsetof(FLobbySource, _title) == 0x000000, "Member 'FLobbySource::_title' has a wrong offset!");
static_assert(offsetof(FLobbySource, __locale) == 0x000010, "Member 'FLobbySource::__locale' has a wrong offset!");
static_assert(offsetof(FLobbySource, BackgroundImage) == 0x000020, "Member 'FLobbySource::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FLobbySource, Stage) == 0x000030, "Member 'FLobbySource::Stage' has a wrong offset!");

// ScriptStruct FortniteUI.CmsJsonMessages
// 0x0328 (0x0328 - 0x0000)
struct FCmsJsonMessages final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _locale;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAthenaNewsSource                      BattleRoyaleNews;                                  // 0x0020(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FShowdownTournamentSource              TournamentInformation;                             // 0x0070(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoreanCafeSource                      KoreanCafe;                                        // 0x00A0(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSubgameScreenSource                   SubGameInfo;                                       // 0x00D0(0x01E8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCreativeAdSource                      CreativeAds;                                       // 0x02B8(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLobbySource                           Lobby;                                             // 0x02E8(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCmsJsonMessages) == 0x000008, "Wrong alignment on FCmsJsonMessages");
static_assert(sizeof(FCmsJsonMessages) == 0x000328, "Wrong size on FCmsJsonMessages");
static_assert(offsetof(FCmsJsonMessages, _title) == 0x000000, "Member 'FCmsJsonMessages::_title' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, _locale) == 0x000010, "Member 'FCmsJsonMessages::_locale' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, BattleRoyaleNews) == 0x000020, "Member 'FCmsJsonMessages::BattleRoyaleNews' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, TournamentInformation) == 0x000070, "Member 'FCmsJsonMessages::TournamentInformation' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, KoreanCafe) == 0x0000A0, "Member 'FCmsJsonMessages::KoreanCafe' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, SubGameInfo) == 0x0000D0, "Member 'FCmsJsonMessages::SubGameInfo' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, CreativeAds) == 0x0002B8, "Member 'FCmsJsonMessages::CreativeAds' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, Lobby) == 0x0002E8, "Member 'FCmsJsonMessages::Lobby' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFortPlayerSurveyCMSDataConditionBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionBase) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionBase");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionBase) == 0x000008, "Wrong size on FFortPlayerSurveyCMSDataConditionBase");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionRandom
// 0x0008 (0x0010 - 0x0008)
struct FFortPlayerSurveyCMSDataConditionRandom final : public FFortPlayerSurveyCMSDataConditionBase
{
public:
	float                                         P;                                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionRandom) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionRandom");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionRandom) == 0x000010, "Wrong size on FFortPlayerSurveyCMSDataConditionRandom");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionRandom, P) == 0x000008, "Member 'FFortPlayerSurveyCMSDataConditionRandom::P' has a wrong offset!");

// ScriptStruct FortniteUI.HeistExitCraftIconData
// 0x0010 (0x0010 - 0x0000)
struct FHeistExitCraftIconData final
{
public:
	int32                                         IconIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeistExitCraftIconState                      IconState;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeistExitCraftIconState                      PrevIconState;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SecondsUntilIncoming;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeamHasBling;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeistExitCraftIconData) == 0x000004, "Wrong alignment on FHeistExitCraftIconData");
static_assert(sizeof(FHeistExitCraftIconData) == 0x000010, "Wrong size on FHeistExitCraftIconData");
static_assert(offsetof(FHeistExitCraftIconData, IconIndex) == 0x000000, "Member 'FHeistExitCraftIconData::IconIndex' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftIconData, IconState) == 0x000004, "Member 'FHeistExitCraftIconData::IconState' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftIconData, PrevIconState) == 0x000005, "Member 'FHeistExitCraftIconData::PrevIconState' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftIconData, SecondsUntilIncoming) == 0x000008, "Member 'FHeistExitCraftIconData::SecondsUntilIncoming' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftIconData, bTeamHasBling) == 0x00000C, "Member 'FHeistExitCraftIconData::bTeamHasBling' has a wrong offset!");

// ScriptStruct FortniteUI.SurvivalObjectiveText
// 0x0010 (0x0010 - 0x0000)
struct FSurvivalObjectiveText final
{
public:
	TArray<class FString>                         SafezoneStateText;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurvivalObjectiveText) == 0x000008, "Wrong alignment on FSurvivalObjectiveText");
static_assert(sizeof(FSurvivalObjectiveText) == 0x000010, "Wrong size on FSurvivalObjectiveText");
static_assert(offsetof(FSurvivalObjectiveText, SafezoneStateText) == 0x000000, "Member 'FSurvivalObjectiveText::SafezoneStateText' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataQuestionChoice
// 0x0018 (0x0018 - 0x0000)
struct FFortPlayerSurveyCMSDataQuestionChoice final
{
public:
	class FText                                   T;                                                 // 0x0000(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataQuestionChoice) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataQuestionChoice");
static_assert(sizeof(FFortPlayerSurveyCMSDataQuestionChoice) == 0x000018, "Wrong size on FFortPlayerSurveyCMSDataQuestionChoice");
static_assert(offsetof(FFortPlayerSurveyCMSDataQuestionChoice, T) == 0x000000, "Member 'FFortPlayerSurveyCMSDataQuestionChoice::T' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataQuestionBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFortPlayerSurveyCMSDataQuestionBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyCMSDataQuestionBase) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataQuestionBase");
static_assert(sizeof(FFortPlayerSurveyCMSDataQuestionBase) == 0x000008, "Wrong size on FFortPlayerSurveyCMSDataQuestionBase");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataQuestionStandardBase
// 0x0020 (0x0028 - 0x0008)
struct FFortPlayerSurveyCMSDataQuestionStandardBase : public FFortPlayerSurveyCMSDataQuestionBase
{
public:
	EFortPlayerSurveyCMSDataPresentationStyle     S;                                                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   T;                                                 // 0x0010(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataQuestionStandardBase) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataQuestionStandardBase");
static_assert(sizeof(FFortPlayerSurveyCMSDataQuestionStandardBase) == 0x000028, "Wrong size on FFortPlayerSurveyCMSDataQuestionStandardBase");
static_assert(offsetof(FFortPlayerSurveyCMSDataQuestionStandardBase, S) == 0x000008, "Member 'FFortPlayerSurveyCMSDataQuestionStandardBase::S' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataQuestionStandardBase, T) == 0x000010, "Member 'FFortPlayerSurveyCMSDataQuestionStandardBase::T' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataQuestionMultipleChoice
// 0x0010 (0x0038 - 0x0028)
struct FFortPlayerSurveyCMSDataQuestionMultipleChoice final : public FFortPlayerSurveyCMSDataQuestionStandardBase
{
public:
	TArray<struct FFortPlayerSurveyCMSDataQuestionChoice> C;                                                 // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataQuestionMultipleChoice) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataQuestionMultipleChoice");
static_assert(sizeof(FFortPlayerSurveyCMSDataQuestionMultipleChoice) == 0x000038, "Wrong size on FFortPlayerSurveyCMSDataQuestionMultipleChoice");
static_assert(offsetof(FFortPlayerSurveyCMSDataQuestionMultipleChoice, C) == 0x000028, "Member 'FFortPlayerSurveyCMSDataQuestionMultipleChoice::C' has a wrong offset!");

// ScriptStruct FortniteUI.SurvivalObjectiveIconData
// 0x0010 (0x0010 - 0x0000)
struct FSurvivalObjectiveIconData final
{
public:
	int32                                         IconIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurvivalObjectiveIconState                   IconState;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurvivalObjectiveIconState                   PrevIconState;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpecialActorID;                                    // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurvivalObjectiveIconData) == 0x000004, "Wrong alignment on FSurvivalObjectiveIconData");
static_assert(sizeof(FSurvivalObjectiveIconData) == 0x000010, "Wrong size on FSurvivalObjectiveIconData");
static_assert(offsetof(FSurvivalObjectiveIconData, IconIndex) == 0x000000, "Member 'FSurvivalObjectiveIconData::IconIndex' has a wrong offset!");
static_assert(offsetof(FSurvivalObjectiveIconData, IconState) == 0x000004, "Member 'FSurvivalObjectiveIconData::IconState' has a wrong offset!");
static_assert(offsetof(FSurvivalObjectiveIconData, PrevIconState) == 0x000005, "Member 'FSurvivalObjectiveIconData::PrevIconState' has a wrong offset!");
static_assert(offsetof(FSurvivalObjectiveIconData, SpecialActorID) == 0x000008, "Member 'FSurvivalObjectiveIconData::SpecialActorID' has a wrong offset!");

// ScriptStruct FortniteUI.DiscoCaptureUIData
// 0x0040 (0x0040 - 0x0000)
struct FDiscoCaptureUIData final
{
public:
	EDiscoCaptureUIState                          CurrDisplayState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAthenaCapturePoint*                    CapturePoint;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawnAthena*                  CurrPawn;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               CurrMID;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillAmount;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDiscoCaptureUIData) == 0x000008, "Wrong alignment on FDiscoCaptureUIData");
static_assert(sizeof(FDiscoCaptureUIData) == 0x000040, "Wrong size on FDiscoCaptureUIData");
static_assert(offsetof(FDiscoCaptureUIData, CurrDisplayState) == 0x000000, "Member 'FDiscoCaptureUIData::CurrDisplayState' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureUIData, CapturePoint) == 0x000008, "Member 'FDiscoCaptureUIData::CapturePoint' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureUIData, CurrPawn) == 0x000010, "Member 'FDiscoCaptureUIData::CurrPawn' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureUIData, CurrMID) == 0x000018, "Member 'FDiscoCaptureUIData::CurrMID' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureUIData, FillAmount) == 0x000020, "Member 'FDiscoCaptureUIData::FillAmount' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureUIData, DisplayText) == 0x000028, "Member 'FDiscoCaptureUIData::DisplayText' has a wrong offset!");

// ScriptStruct FortniteUI.DiscoTeamScoreData
// 0x0020 (0x0020 - 0x0000)
struct FDiscoTeamScoreData final
{
public:
	class FText                                   CurrScoreText;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         CurrScorePercent;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrScore;                                         // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDiscoTeamScoreData) == 0x000008, "Wrong alignment on FDiscoTeamScoreData");
static_assert(sizeof(FDiscoTeamScoreData) == 0x000020, "Wrong size on FDiscoTeamScoreData");
static_assert(offsetof(FDiscoTeamScoreData, CurrScoreText) == 0x000000, "Member 'FDiscoTeamScoreData::CurrScoreText' has a wrong offset!");
static_assert(offsetof(FDiscoTeamScoreData, CurrScorePercent) == 0x000018, "Member 'FDiscoTeamScoreData::CurrScorePercent' has a wrong offset!");
static_assert(offsetof(FDiscoTeamScoreData, CurrScore) == 0x00001C, "Member 'FDiscoTeamScoreData::CurrScore' has a wrong offset!");

// ScriptStruct FortniteUI.DiscoCaptureIconData
// 0x0010 (0x0010 - 0x0000)
struct FDiscoCaptureIconData final
{
public:
	EDiscoCaptureIconState                        CurrIconState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDiscoCaptureProgressState                    CurrProgressState;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrCapturePercent;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAthenaCapturePoint*                    CapturePoint;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDiscoCaptureIconData) == 0x000008, "Wrong alignment on FDiscoCaptureIconData");
static_assert(sizeof(FDiscoCaptureIconData) == 0x000010, "Wrong size on FDiscoCaptureIconData");
static_assert(offsetof(FDiscoCaptureIconData, CurrIconState) == 0x000000, "Member 'FDiscoCaptureIconData::CurrIconState' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureIconData, CurrProgressState) == 0x000001, "Member 'FDiscoCaptureIconData::CurrProgressState' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureIconData, CurrCapturePercent) == 0x000004, "Member 'FDiscoCaptureIconData::CurrCapturePercent' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureIconData, CapturePoint) == 0x000008, "Member 'FDiscoCaptureIconData::CapturePoint' has a wrong offset!");

// ScriptStruct FortniteUI.CharacterRanges
// 0x0030 (0x0030 - 0x0000)
struct FCharacterRanges final
{
public:
	TArray<int32>                                 Ranges;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 SinglePoints;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ExcludedPoints;                                    // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterRanges) == 0x000008, "Wrong alignment on FCharacterRanges");
static_assert(sizeof(FCharacterRanges) == 0x000030, "Wrong size on FCharacterRanges");
static_assert(offsetof(FCharacterRanges, Ranges) == 0x000000, "Member 'FCharacterRanges::Ranges' has a wrong offset!");
static_assert(offsetof(FCharacterRanges, SinglePoints) == 0x000010, "Member 'FCharacterRanges::SinglePoints' has a wrong offset!");
static_assert(offsetof(FCharacterRanges, ExcludedPoints) == 0x000020, "Member 'FCharacterRanges::ExcludedPoints' has a wrong offset!");

// ScriptStruct FortniteUI.CachedIslandsGroup
// 0x0028 (0x0028 - 0x0000)
struct FCachedIslandsGroup final
{
public:
	TArray<class UFortCreativeIslandLink*>        IslandLinks;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCachedIslandsGroup) == 0x000008, "Wrong alignment on FCachedIslandsGroup");
static_assert(sizeof(FCachedIslandsGroup) == 0x000028, "Wrong size on FCachedIslandsGroup");
static_assert(offsetof(FCachedIslandsGroup, IslandLinks) == 0x000000, "Member 'FCachedIslandsGroup::IslandLinks' has a wrong offset!");

// ScriptStruct FortniteUI.FortCreativeItemListCategoryData
// 0x0008 (0x0010 - 0x0008)
struct FFortCreativeItemListCategoryData final : public FTableRowBase
{
public:
	ECreativeItemCategory                         Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemCardSize                             CardSize;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollapseCardBorderPad;                            // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCreativeItemListCategoryData) == 0x000008, "Wrong alignment on FFortCreativeItemListCategoryData");
static_assert(sizeof(FFortCreativeItemListCategoryData) == 0x000010, "Wrong size on FFortCreativeItemListCategoryData");
static_assert(offsetof(FFortCreativeItemListCategoryData, Category) == 0x000008, "Member 'FFortCreativeItemListCategoryData::Category' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemListCategoryData, CardSize) == 0x000009, "Member 'FFortCreativeItemListCategoryData::CardSize' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemListCategoryData, bCollapseCardBorderPad) == 0x00000A, "Member 'FFortCreativeItemListCategoryData::bCollapseCardBorderPad' has a wrong offset!");

// ScriptStruct FortniteUI.ItemListCategoryArray
// 0x0028 (0x0028 - 0x0000)
struct FItemListCategoryArray final
{
public:
	TArray<struct FFortItemEntry>                 ItemList;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   CategoryTitle;                                     // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemListCategoryArray) == 0x000008, "Wrong alignment on FItemListCategoryArray");
static_assert(sizeof(FItemListCategoryArray) == 0x000028, "Wrong size on FItemListCategoryArray");
static_assert(offsetof(FItemListCategoryArray, ItemList) == 0x000000, "Member 'FItemListCategoryArray::ItemList' has a wrong offset!");
static_assert(offsetof(FItemListCategoryArray, CategoryTitle) == 0x000010, "Member 'FItemListCategoryArray::CategoryTitle' has a wrong offset!");

// ScriptStruct FortniteUI.OptionsReleaseInfo
// 0x0008 (0x0008 - 0x0000)
struct FOptionsReleaseInfo final
{
public:
	ESettingType                                  SettingType;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReleaseVersion;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionsReleaseInfo) == 0x000004, "Wrong alignment on FOptionsReleaseInfo");
static_assert(sizeof(FOptionsReleaseInfo) == 0x000008, "Wrong size on FOptionsReleaseInfo");
static_assert(offsetof(FOptionsReleaseInfo, SettingType) == 0x000000, "Member 'FOptionsReleaseInfo::SettingType' has a wrong offset!");
static_assert(offsetof(FOptionsReleaseInfo, ReleaseVersion) == 0x000004, "Member 'FOptionsReleaseInfo::ReleaseVersion' has a wrong offset!");

// ScriptStruct FortniteUI.FortCreativeServerDisplayOption
// 0x0018 (0x0020 - 0x0008)
struct FFortCreativeServerDisplayOption final : public FTableRowBase
{
public:
	class UTexture*                               Image;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCreativeServerDisplayOption) == 0x000008, "Wrong alignment on FFortCreativeServerDisplayOption");
static_assert(sizeof(FFortCreativeServerDisplayOption) == 0x000020, "Wrong size on FFortCreativeServerDisplayOption");
static_assert(offsetof(FFortCreativeServerDisplayOption, Image) == 0x000008, "Member 'FFortCreativeServerDisplayOption::Image' has a wrong offset!");
static_assert(offsetof(FFortCreativeServerDisplayOption, Color) == 0x000010, "Member 'FFortCreativeServerDisplayOption::Color' has a wrong offset!");

// ScriptStruct FortniteUI.ExpeditionTabInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FExpeditionTabInfo final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTabButtonLabelInfo                TabLabelInfo;                                      // 0x0008(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExpeditionTabInfo) == 0x000008, "Wrong alignment on FExpeditionTabInfo");
static_assert(sizeof(FExpeditionTabInfo) == 0x0000A8, "Wrong size on FExpeditionTabInfo");
static_assert(offsetof(FExpeditionTabInfo, TabNameID) == 0x000000, "Member 'FExpeditionTabInfo::TabNameID' has a wrong offset!");
static_assert(offsetof(FExpeditionTabInfo, TabLabelInfo) == 0x000008, "Member 'FExpeditionTabInfo::TabLabelInfo' has a wrong offset!");

// ScriptStruct FortniteUI.ConsumedCriteriaData
// 0x0018 (0x0018 - 0x0000)
struct FConsumedCriteriaData final
{
public:
	float                                         PowerMod;                                          // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CriteriaNames;                                     // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsumedCriteriaData) == 0x000008, "Wrong alignment on FConsumedCriteriaData");
static_assert(sizeof(FConsumedCriteriaData) == 0x000018, "Wrong size on FConsumedCriteriaData");
static_assert(offsetof(FConsumedCriteriaData, PowerMod) == 0x000000, "Member 'FConsumedCriteriaData::PowerMod' has a wrong offset!");
static_assert(offsetof(FConsumedCriteriaData, CriteriaNames) == 0x000008, "Member 'FConsumedCriteriaData::CriteriaNames' has a wrong offset!");

// ScriptStruct FortniteUI.FortFrontEndFeatureStruct
// 0x0018 (0x0018 - 0x0000)
struct FFortFrontEndFeatureStruct final
{
public:
	EFortFrontEndFeatureState                     CurrentState;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontEndFeatureState                     ForcedState;                                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontEndFeatureStateReason               ForcedStateReason;                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             ChangeDelegate;                                    // 0x0008(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFrontEndFeatureStruct) == 0x000008, "Wrong alignment on FFortFrontEndFeatureStruct");
static_assert(sizeof(FFortFrontEndFeatureStruct) == 0x000018, "Wrong size on FFortFrontEndFeatureStruct");
static_assert(offsetof(FFortFrontEndFeatureStruct, CurrentState) == 0x000000, "Member 'FFortFrontEndFeatureStruct::CurrentState' has a wrong offset!");
static_assert(offsetof(FFortFrontEndFeatureStruct, ForcedState) == 0x000001, "Member 'FFortFrontEndFeatureStruct::ForcedState' has a wrong offset!");
static_assert(offsetof(FFortFrontEndFeatureStruct, ForcedStateReason) == 0x000002, "Member 'FFortFrontEndFeatureStruct::ForcedStateReason' has a wrong offset!");
static_assert(offsetof(FFortFrontEndFeatureStruct, ChangeDelegate) == 0x000008, "Member 'FFortFrontEndFeatureStruct::ChangeDelegate' has a wrong offset!");

// ScriptStruct FortniteUI.UnlockableVariantPreviewInfo
// 0x0028 (0x0028 - 0x0000)
struct FUnlockableVariantPreviewInfo final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SetNumber;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetCount;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockCondition;                                   // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnlockableVariantPreviewInfo) == 0x000008, "Wrong alignment on FUnlockableVariantPreviewInfo");
static_assert(sizeof(FUnlockableVariantPreviewInfo) == 0x000028, "Wrong size on FUnlockableVariantPreviewInfo");
static_assert(offsetof(FUnlockableVariantPreviewInfo, bIsValid) == 0x000000, "Member 'FUnlockableVariantPreviewInfo::bIsValid' has a wrong offset!");
static_assert(offsetof(FUnlockableVariantPreviewInfo, SetNumber) == 0x000004, "Member 'FUnlockableVariantPreviewInfo::SetNumber' has a wrong offset!");
static_assert(offsetof(FUnlockableVariantPreviewInfo, SetCount) == 0x000008, "Member 'FUnlockableVariantPreviewInfo::SetCount' has a wrong offset!");
static_assert(offsetof(FUnlockableVariantPreviewInfo, UnlockCondition) == 0x000010, "Member 'FUnlockableVariantPreviewInfo::UnlockCondition' has a wrong offset!");

// ScriptStruct FortniteUI.FortMissionRewardInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FFortMissionRewardInfo final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortItem*                              Item;                                              // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMissionAlertReward;                             // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionRewardInfo) == 0x000008, "Wrong alignment on FFortMissionRewardInfo");
static_assert(sizeof(FFortMissionRewardInfo) == 0x0000B0, "Wrong size on FFortMissionRewardInfo");
static_assert(offsetof(FFortMissionRewardInfo, Icon) == 0x000000, "Member 'FFortMissionRewardInfo::Icon' has a wrong offset!");
static_assert(offsetof(FFortMissionRewardInfo, DisplayName) == 0x000088, "Member 'FFortMissionRewardInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortMissionRewardInfo, Item) == 0x0000A0, "Member 'FFortMissionRewardInfo::Item' has a wrong offset!");
static_assert(offsetof(FFortMissionRewardInfo, bIsMissionAlertReward) == 0x0000A8, "Member 'FFortMissionRewardInfo::bIsMissionAlertReward' has a wrong offset!");

// ScriptStruct FortniteUI.FortMissionDetails
// 0x0168 (0x0168 - 0x0000)
struct FFortMissionDetails final
{
public:
	EFortTheaterMapTileType                       TileType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TheaterDisplayName;                                // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MissionName;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MissionDescription;                                // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsGroupContent;                                   // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMissionGenerator*                  MissionDefinition;                                 // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ZoneName;                                          // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ZoneDescription;                                   // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RegionThemeName;                                   // 0x0090(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USlateBrushAsset>        RegionThemeIcon;                                   // 0x00A8(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DifficultyName;                                    // 0x00D0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionRewardInfo>         MissionRewards;                                    // 0x00E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimespan                              AvailableTime;                                     // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredBaseRating;                                // 0x0100(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedBaseRating;                             // 0x0104(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentDifficultyLevel;                            // 0x0108(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentAccountLevel;                               // 0x010C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x0110(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideConningText;                              // 0x0114(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ConningOverrideText;                               // 0x0118(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 TheaterUniqueId;                                   // 0x0130(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortCloudSaveItemDefinition*           AssociatedCloudSaveItemDefinition;                 // 0x0140(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortGameplayModifierItemDefinition*> GameplayModifiers;                                 // 0x0148(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           Objectives;                                        // 0x0158(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionDetails) == 0x000008, "Wrong alignment on FFortMissionDetails");
static_assert(sizeof(FFortMissionDetails) == 0x000168, "Wrong size on FFortMissionDetails");
static_assert(offsetof(FFortMissionDetails, TileType) == 0x000000, "Member 'FFortMissionDetails::TileType' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, TheaterDisplayName) == 0x000008, "Member 'FFortMissionDetails::TheaterDisplayName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionName) == 0x000020, "Member 'FFortMissionDetails::MissionName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionDescription) == 0x000038, "Member 'FFortMissionDetails::MissionDescription' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, bIsGroupContent) == 0x000050, "Member 'FFortMissionDetails::bIsGroupContent' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionDefinition) == 0x000058, "Member 'FFortMissionDetails::MissionDefinition' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, ZoneName) == 0x000060, "Member 'FFortMissionDetails::ZoneName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, ZoneDescription) == 0x000078, "Member 'FFortMissionDetails::ZoneDescription' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RegionThemeName) == 0x000090, "Member 'FFortMissionDetails::RegionThemeName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RegionThemeIcon) == 0x0000A8, "Member 'FFortMissionDetails::RegionThemeIcon' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, DifficultyName) == 0x0000D0, "Member 'FFortMissionDetails::DifficultyName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionRewards) == 0x0000E8, "Member 'FFortMissionDetails::MissionRewards' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, AvailableTime) == 0x0000F8, "Member 'FFortMissionDetails::AvailableTime' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RequiredBaseRating) == 0x000100, "Member 'FFortMissionDetails::RequiredBaseRating' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RecommendedBaseRating) == 0x000104, "Member 'FFortMissionDetails::RecommendedBaseRating' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, ContentDifficultyLevel) == 0x000108, "Member 'FFortMissionDetails::ContentDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, ContentAccountLevel) == 0x00010C, "Member 'FFortMissionDetails::ContentAccountLevel' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, LootLevel) == 0x000110, "Member 'FFortMissionDetails::LootLevel' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, bOverrideConningText) == 0x000114, "Member 'FFortMissionDetails::bOverrideConningText' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, ConningOverrideText) == 0x000118, "Member 'FFortMissionDetails::ConningOverrideText' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, TheaterUniqueId) == 0x000130, "Member 'FFortMissionDetails::TheaterUniqueId' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, AssociatedCloudSaveItemDefinition) == 0x000140, "Member 'FFortMissionDetails::AssociatedCloudSaveItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, GameplayModifiers) == 0x000148, "Member 'FFortMissionDetails::GameplayModifiers' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, Objectives) == 0x000158, "Member 'FFortMissionDetails::Objectives' has a wrong offset!");

// ScriptStruct FortniteUI.AttributeRequirement
// 0x0020 (0x0020 - 0x0000)
struct FAttributeRequirement final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequirementsMet;                                  // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttributeRequirement) == 0x000008, "Wrong alignment on FAttributeRequirement");
static_assert(sizeof(FAttributeRequirement) == 0x000020, "Wrong size on FAttributeRequirement");
static_assert(offsetof(FAttributeRequirement, Name) == 0x000000, "Member 'FAttributeRequirement::Name' has a wrong offset!");
static_assert(offsetof(FAttributeRequirement, Level) == 0x000018, "Member 'FAttributeRequirement::Level' has a wrong offset!");
static_assert(offsetof(FAttributeRequirement, bRequirementsMet) == 0x00001C, "Member 'FAttributeRequirement::bRequirementsMet' has a wrong offset!");

// ScriptStruct FortniteUI.BuildingRequirements
// 0x0028 (0x0028 - 0x0000)
struct FBuildingRequirements final
{
public:
	int32                                         RequiredAccountLevel;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentAccountLevel;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAttributeRequirement>          AttributeRequirements;                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RequiredPower;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPower;                                      // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredManufacturing;                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentManufacturing;                              // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingRequirements) == 0x000008, "Wrong alignment on FBuildingRequirements");
static_assert(sizeof(FBuildingRequirements) == 0x000028, "Wrong size on FBuildingRequirements");
static_assert(offsetof(FBuildingRequirements, RequiredAccountLevel) == 0x000000, "Member 'FBuildingRequirements::RequiredAccountLevel' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, CurrentAccountLevel) == 0x000004, "Member 'FBuildingRequirements::CurrentAccountLevel' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, AttributeRequirements) == 0x000008, "Member 'FBuildingRequirements::AttributeRequirements' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, RequiredPower) == 0x000018, "Member 'FBuildingRequirements::RequiredPower' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, CurrentPower) == 0x00001C, "Member 'FBuildingRequirements::CurrentPower' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, RequiredManufacturing) == 0x000020, "Member 'FBuildingRequirements::RequiredManufacturing' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, CurrentManufacturing) == 0x000024, "Member 'FBuildingRequirements::CurrentManufacturing' has a wrong offset!");

// ScriptStruct FortniteUI.GiftingErrorText
// 0x0038 (0x0038 - 0x0000)
struct FGiftingErrorText final
{
public:
	EOfferPurchaseError                           GiftingError;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ErrorTitle;                                        // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ErrorDesc;                                         // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGiftingErrorText) == 0x000008, "Wrong alignment on FGiftingErrorText");
static_assert(sizeof(FGiftingErrorText) == 0x000038, "Wrong size on FGiftingErrorText");
static_assert(offsetof(FGiftingErrorText, GiftingError) == 0x000000, "Member 'FGiftingErrorText::GiftingError' has a wrong offset!");
static_assert(offsetof(FGiftingErrorText, ErrorTitle) == 0x000008, "Member 'FGiftingErrorText::ErrorTitle' has a wrong offset!");
static_assert(offsetof(FGiftingErrorText, ErrorDesc) == 0x000020, "Member 'FGiftingErrorText::ErrorDesc' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionSimpleIntComparisonBase
// 0x0008 (0x0010 - 0x0008)
struct FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase : public FFortPlayerSurveyCMSDataConditionBase
{
public:
	EFortPlayerSurveyCMSDataBinaryComparisonOp    O;                                                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         T;                                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase) == 0x000010, "Wrong size on FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase, O) == 0x000008, "Member 'FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase::O' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase, T) == 0x00000C, "Member 'FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase::T' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionAthenaSeasonStat
// 0x0008 (0x0018 - 0x0010)
struct FFortPlayerSurveyCMSDataConditionAthenaSeasonStat final : public FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase
{
public:
	EFortPlayerSurveyCMSDataAthenaSeasonStat      S;                                                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionAthenaSeasonStat) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionAthenaSeasonStat");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionAthenaSeasonStat) == 0x000018, "Wrong size on FFortPlayerSurveyCMSDataConditionAthenaSeasonStat");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionAthenaSeasonStat, S) == 0x000010, "Member 'FFortPlayerSurveyCMSDataConditionAthenaSeasonStat::S' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemFilterDefinition
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FFortItemFilterDefinition final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemFilterDefinition) == 0x000010, "Wrong alignment on FFortItemFilterDefinition");
static_assert(sizeof(FFortItemFilterDefinition) == 0x000060, "Wrong size on FFortItemFilterDefinition");

// ScriptStruct FortniteUI.FortItemSorterDefinition
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FFortItemSorterDefinition final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemSorterDefinition) == 0x000010, "Wrong alignment on FFortItemSorterDefinition");
static_assert(sizeof(FFortItemSorterDefinition) == 0x000050, "Wrong size on FFortItemSorterDefinition");

// ScriptStruct FortniteUI.FortHeroLoadoutHeroPickerTabConfiguration
// 0x00B0 (0x00B0 - 0x0000)
struct FFortHeroLoadoutHeroPickerTabConfiguration final
{
public:
	struct FFortItemFilterDefinition              Filter;                                            // 0x0000(0x0060)(NativeAccessSpecifierPublic)
	struct FFortItemSorterDefinition              Sorter;                                            // 0x0060(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHeroLoadoutHeroPickerTabConfiguration) == 0x000010, "Wrong alignment on FFortHeroLoadoutHeroPickerTabConfiguration");
static_assert(sizeof(FFortHeroLoadoutHeroPickerTabConfiguration) == 0x0000B0, "Wrong size on FFortHeroLoadoutHeroPickerTabConfiguration");
static_assert(offsetof(FFortHeroLoadoutHeroPickerTabConfiguration, Filter) == 0x000000, "Member 'FFortHeroLoadoutHeroPickerTabConfiguration::Filter' has a wrong offset!");
static_assert(offsetof(FFortHeroLoadoutHeroPickerTabConfiguration, Sorter) == 0x000060, "Member 'FFortHeroLoadoutHeroPickerTabConfiguration::Sorter' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionAthenaMatchStat
// 0x0088 (0x0098 - 0x0010)
struct FFortPlayerSurveyCMSDataConditionAthenaMatchStat final : public FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase
{
public:
	TArray<EFortPlayerSurveyCMSDataPlaylistCategory> Pt;                                                // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class FName>                             P;                                                 // 0x0020(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         I;                                                 // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 S;                                                 // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPlayerSurveyCMSDataAggregateOp           Ag;                                                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionAthenaMatchStat) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionAthenaMatchStat");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionAthenaMatchStat) == 0x000098, "Wrong size on FFortPlayerSurveyCMSDataConditionAthenaMatchStat");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionAthenaMatchStat, Pt) == 0x000010, "Member 'FFortPlayerSurveyCMSDataConditionAthenaMatchStat::Pt' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionAthenaMatchStat, P) == 0x000020, "Member 'FFortPlayerSurveyCMSDataConditionAthenaMatchStat::P' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionAthenaMatchStat, I) == 0x000070, "Member 'FFortPlayerSurveyCMSDataConditionAthenaMatchStat::I' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionAthenaMatchStat, S) == 0x000080, "Member 'FFortPlayerSurveyCMSDataConditionAthenaMatchStat::S' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionAthenaMatchStat, Ag) == 0x000090, "Member 'FFortPlayerSurveyCMSDataConditionAthenaMatchStat::Ag' has a wrong offset!");

// ScriptStruct FortniteUI.FortInGamePerkDisplayData
// 0x0010 (0x0010 - 0x0000)
struct FFortInGamePerkDisplayData final
{
public:
	EFortHeroPerkDisplayType                      PerkDisplayType;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortInGamePerkDisplayData) == 0x000004, "Wrong alignment on FFortInGamePerkDisplayData");
static_assert(sizeof(FFortInGamePerkDisplayData) == 0x000010, "Wrong size on FFortInGamePerkDisplayData");
static_assert(offsetof(FFortInGamePerkDisplayData, PerkDisplayType) == 0x000000, "Member 'FFortInGamePerkDisplayData::PerkDisplayType' has a wrong offset!");
static_assert(offsetof(FFortInGamePerkDisplayData, Index) == 0x000004, "Member 'FFortInGamePerkDisplayData::Index' has a wrong offset!");
static_assert(offsetof(FFortInGamePerkDisplayData, Row) == 0x000008, "Member 'FFortInGamePerkDisplayData::Row' has a wrong offset!");
static_assert(offsetof(FFortInGamePerkDisplayData, Column) == 0x00000C, "Member 'FFortInGamePerkDisplayData::Column' has a wrong offset!");

// ScriptStruct FortniteUI.FortHeroNamesData
// 0x0030 (0x0038 - 0x0008)
struct FFortHeroNamesData final : public FTableRowBase
{
public:
	class FString                                 FirstName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NickName;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastName;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHeroNamesData) == 0x000008, "Wrong alignment on FFortHeroNamesData");
static_assert(sizeof(FFortHeroNamesData) == 0x000038, "Wrong size on FFortHeroNamesData");
static_assert(offsetof(FFortHeroNamesData, FirstName) == 0x000008, "Member 'FFortHeroNamesData::FirstName' has a wrong offset!");
static_assert(offsetof(FFortHeroNamesData, NickName) == 0x000018, "Member 'FFortHeroNamesData::NickName' has a wrong offset!");
static_assert(offsetof(FFortHeroNamesData, LastName) == 0x000028, "Member 'FFortHeroNamesData::LastName' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemDelta
// 0x0010 (0x0010 - 0x0000)
struct FFortItemDelta final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseAmount;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeltaAmount;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemDelta) == 0x000008, "Wrong alignment on FFortItemDelta");
static_assert(sizeof(FFortItemDelta) == 0x000010, "Wrong size on FFortItemDelta");
static_assert(offsetof(FFortItemDelta, ItemDefinition) == 0x000000, "Member 'FFortItemDelta::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortItemDelta, BaseAmount) == 0x000008, "Member 'FFortItemDelta::BaseAmount' has a wrong offset!");
static_assert(offsetof(FFortItemDelta, DeltaAmount) == 0x00000C, "Member 'FFortItemDelta::DeltaAmount' has a wrong offset!");

// ScriptStruct FortniteUI.FortKillerVisualInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FFortKillerVisualInfo final
{
public:
	struct FSlateBrush                            KillerBrush;                                       // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   KillerName;                                        // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortKillerVisualInfo) == 0x000008, "Wrong alignment on FFortKillerVisualInfo");
static_assert(sizeof(FFortKillerVisualInfo) == 0x0000A0, "Wrong size on FFortKillerVisualInfo");
static_assert(offsetof(FFortKillerVisualInfo, KillerBrush) == 0x000000, "Member 'FFortKillerVisualInfo::KillerBrush' has a wrong offset!");
static_assert(offsetof(FFortKillerVisualInfo, KillerName) == 0x000088, "Member 'FFortKillerVisualInfo::KillerName' has a wrong offset!");

// ScriptStruct FortniteUI.FortActionBeingUnbound
// 0x000C (0x000C - 0x0000)
struct FFortActionBeingUnbound final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputIndex;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortActionBeingUnbound) == 0x000004, "Wrong alignment on FFortActionBeingUnbound");
static_assert(sizeof(FFortActionBeingUnbound) == 0x00000C, "Wrong size on FFortActionBeingUnbound");
static_assert(offsetof(FFortActionBeingUnbound, ActionName) == 0x000000, "Member 'FFortActionBeingUnbound::ActionName' has a wrong offset!");
static_assert(offsetof(FFortActionBeingUnbound, InputIndex) == 0x000008, "Member 'FFortActionBeingUnbound::InputIndex' has a wrong offset!");

// ScriptStruct FortniteUI.ItemDefinitionChangedStruct
// 0x0010 (0x0010 - 0x0000)
struct FItemDefinitionChangedStruct final
{
public:
	UMulticastInlineDelegateProperty_             ChangeDelegate;                                    // 0x0000(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDefinitionChangedStruct) == 0x000008, "Wrong alignment on FItemDefinitionChangedStruct");
static_assert(sizeof(FItemDefinitionChangedStruct) == 0x000010, "Wrong size on FItemDefinitionChangedStruct");
static_assert(offsetof(FItemDefinitionChangedStruct, ChangeDelegate) == 0x000000, "Member 'FItemDefinitionChangedStruct::ChangeDelegate' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_StackCountBlock_Configuration
// 0x0030 (0x0030 - 0x0000)
struct FFortItemCard_StackCountBlock_Configuration final
{
public:
	bool                                          bShowShorthandStackCount;                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   TextStyle;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_StackCountBlock_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_StackCountBlock_Configuration");
static_assert(sizeof(FFortItemCard_StackCountBlock_Configuration) == 0x000030, "Wrong size on FFortItemCard_StackCountBlock_Configuration");
static_assert(offsetof(FFortItemCard_StackCountBlock_Configuration, bShowShorthandStackCount) == 0x000000, "Member 'FFortItemCard_StackCountBlock_Configuration::bShowShorthandStackCount' has a wrong offset!");
static_assert(offsetof(FFortItemCard_StackCountBlock_Configuration, TextStyle) == 0x000008, "Member 'FFortItemCard_StackCountBlock_Configuration::TextStyle' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XXS_ItemInstance_Configuration
// 0x0030 (0x0030 - 0x0000)
struct FFortItemCard_XXS_ItemInstance_Configuration final
{
public:
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_XXS_ItemInstance_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_XXS_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_XXS_ItemInstance_Configuration) == 0x000030, "Wrong size on FFortItemCard_XXS_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_XXS_ItemInstance_Configuration, StackCountBlock) == 0x000000, "Member 'FFortItemCard_XXS_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XS_TransformKey_Configuration
// 0x0048 (0x0048 - 0x0000)
struct FFortItemCard_XS_TransformKey_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformKeyIconSize;                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_XS_TransformKey_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_XS_TransformKey_Configuration");
static_assert(sizeof(FFortItemCard_XS_TransformKey_Configuration) == 0x000048, "Wrong size on FFortItemCard_XS_TransformKey_Configuration");
static_assert(offsetof(FFortItemCard_XS_TransformKey_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XS_TransformKey_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_TransformKey_Configuration, StackCountBlock) == 0x000010, "Member 'FFortItemCard_XS_TransformKey_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_TransformKey_Configuration, TransformKeyIconSize) == 0x000040, "Member 'FFortItemCard_XS_TransformKey_Configuration::TransformKeyIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_PowerRatingBlock_Configuration
// 0x0050 (0x0050 - 0x0000)
struct FFortItemCard_PowerRatingBlock_Configuration
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                CustomRatingInternalPadding;                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              CustomRatingIconSize;                              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CustomRatingTextStyle;                             // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ComparisonIndicatorSize;                           // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_PowerRatingBlock_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_PowerRatingBlock_Configuration");
static_assert(sizeof(FFortItemCard_PowerRatingBlock_Configuration) == 0x000050, "Wrong size on FFortItemCard_PowerRatingBlock_Configuration");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_Configuration, CustomRatingInternalPadding) == 0x000008, "Member 'FFortItemCard_PowerRatingBlock_Configuration::CustomRatingInternalPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_Configuration, CustomRatingIconSize) == 0x000018, "Member 'FFortItemCard_PowerRatingBlock_Configuration::CustomRatingIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_Configuration, CustomRatingTextStyle) == 0x000020, "Member 'FFortItemCard_PowerRatingBlock_Configuration::CustomRatingTextStyle' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_Configuration, ComparisonIndicatorSize) == 0x000048, "Member 'FFortItemCard_PowerRatingBlock_Configuration::ComparisonIndicatorSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_PowerRatingBlock_ItemInstance_Configuration
// 0x00B0 (0x0100 - 0x0050)
struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration final : public FFortItemCard_PowerRatingBlock_Configuration
{
public:
	struct FSlateBrush                            PowerRatingIconBrush;                              // 0x0050(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PowerRatingTextStyle;                              // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_PowerRatingBlock_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration) == 0x000100, "Wrong size on FFortItemCard_PowerRatingBlock_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration, PowerRatingIconBrush) == 0x000050, "Member 'FFortItemCard_PowerRatingBlock_ItemInstance_Configuration::PowerRatingIconBrush' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration, PowerRatingTextStyle) == 0x0000D8, "Member 'FFortItemCard_PowerRatingBlock_ItemInstance_Configuration::PowerRatingTextStyle' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_DurabilityMeter_Configuration
// 0x0014 (0x0014 - 0x0000)
struct FFortItemCard_DurabilityMeter_Configuration final
{
public:
	float                                         MeterThickness;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                MeterPadding;                                      // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_DurabilityMeter_Configuration) == 0x000004, "Wrong alignment on FFortItemCard_DurabilityMeter_Configuration");
static_assert(sizeof(FFortItemCard_DurabilityMeter_Configuration) == 0x000014, "Wrong size on FFortItemCard_DurabilityMeter_Configuration");
static_assert(offsetof(FFortItemCard_DurabilityMeter_Configuration, MeterThickness) == 0x000000, "Member 'FFortItemCard_DurabilityMeter_Configuration::MeterThickness' has a wrong offset!");
static_assert(offsetof(FFortItemCard_DurabilityMeter_Configuration, MeterPadding) == 0x000004, "Member 'FFortItemCard_DurabilityMeter_Configuration::MeterPadding' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XS_ItemInstance_Configuration
// 0x0188 (0x0188 - 0x0000)
struct FFortItemCard_XS_ItemInstance_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PowerRatingBlockPadding;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration PowerRatingBlock;                                  // 0x0020(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TraitBoxPadding;                                   // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstTraitSize;                                    // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0140(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortItemCard_DurabilityMeter_Configuration DurabilityMeter;                                   // 0x0170(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_XS_ItemInstance_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_XS_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_XS_ItemInstance_Configuration) == 0x000188, "Wrong size on FFortItemCard_XS_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XS_ItemInstance_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, PowerRatingBlockPadding) == 0x000010, "Member 'FFortItemCard_XS_ItemInstance_Configuration::PowerRatingBlockPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, PowerRatingBlock) == 0x000020, "Member 'FFortItemCard_XS_ItemInstance_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, BookmarkImageSize) == 0x000120, "Member 'FFortItemCard_XS_ItemInstance_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, TraitBoxPadding) == 0x000128, "Member 'FFortItemCard_XS_ItemInstance_Configuration::TraitBoxPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, FirstTraitSize) == 0x000138, "Member 'FFortItemCard_XS_ItemInstance_Configuration::FirstTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, StackCountBlock) == 0x000140, "Member 'FFortItemCard_XS_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, DurabilityMeter) == 0x000170, "Member 'FFortItemCard_XS_ItemInstance_Configuration::DurabilityMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_TierMeter_Configuration
// 0x000C (0x000C - 0x0000)
struct FFortItemCard_TierMeter_Configuration final
{
public:
	struct FVector2D                              PipSize;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterPipPadding;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_TierMeter_Configuration) == 0x000004, "Wrong alignment on FFortItemCard_TierMeter_Configuration");
static_assert(sizeof(FFortItemCard_TierMeter_Configuration) == 0x00000C, "Wrong size on FFortItemCard_TierMeter_Configuration");
static_assert(offsetof(FFortItemCard_TierMeter_Configuration, PipSize) == 0x000000, "Member 'FFortItemCard_TierMeter_Configuration::PipSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_TierMeter_Configuration, InterPipPadding) == 0x000008, "Member 'FFortItemCard_TierMeter_Configuration::InterPipPadding' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration
// 0x0160 (0x01B0 - 0x0050)
struct FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration final : public FFortItemCard_PowerRatingBlock_Configuration
{
public:
	struct FSlateBrush                            PersonnelPowerRatingIconBrush;                     // 0x0050(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PersonnelPowerRatingTextStyle;                     // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SchematicPowerRatingIconBrush;                     // 0x0100(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SchematicPowerRatingTextStyle;                     // 0x0188(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration) == 0x0001B0, "Wrong size on FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration, PersonnelPowerRatingIconBrush) == 0x000050, "Member 'FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration::PersonnelPowerRatingIconBrush' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration, PersonnelPowerRatingTextStyle) == 0x0000D8, "Member 'FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration::PersonnelPowerRatingTextStyle' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration, SchematicPowerRatingIconBrush) == 0x000100, "Member 'FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration::SchematicPowerRatingIconBrush' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration, SchematicPowerRatingTextStyle) == 0x000188, "Member 'FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration::SchematicPowerRatingTextStyle' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_NameplateBorder_Configuration
// 0x0098 (0x0098 - 0x0000)
struct FFortItemCard_NameplateBorder_Configuration final
{
public:
	struct FMargin                                Padding;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0010(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_NameplateBorder_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_NameplateBorder_Configuration");
static_assert(sizeof(FFortItemCard_NameplateBorder_Configuration) == 0x000098, "Wrong size on FFortItemCard_NameplateBorder_Configuration");
static_assert(offsetof(FFortItemCard_NameplateBorder_Configuration, Padding) == 0x000000, "Member 'FFortItemCard_NameplateBorder_Configuration::Padding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_NameplateBorder_Configuration, Brush) == 0x000010, "Member 'FFortItemCard_NameplateBorder_Configuration::Brush' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_DefenderWeaponTypeIcon_Configuration
// 0x0008 (0x0008 - 0x0000)
struct FFortItemCard_DefenderWeaponTypeIcon_Configuration final
{
public:
	struct FVector2D                              IconConstraints;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_DefenderWeaponTypeIcon_Configuration) == 0x000004, "Wrong alignment on FFortItemCard_DefenderWeaponTypeIcon_Configuration");
static_assert(sizeof(FFortItemCard_DefenderWeaponTypeIcon_Configuration) == 0x000008, "Wrong size on FFortItemCard_DefenderWeaponTypeIcon_Configuration");
static_assert(offsetof(FFortItemCard_DefenderWeaponTypeIcon_Configuration, IconConstraints) == 0x000000, "Member 'FFortItemCard_DefenderWeaponTypeIcon_Configuration::IconConstraints' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_DetailAreaBorder_Configuration
// 0x0014 (0x0014 - 0x0000)
struct FFortItemCard_DetailAreaBorder_Configuration final
{
public:
	float                                         MinimumHeight;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_DetailAreaBorder_Configuration) == 0x000004, "Wrong alignment on FFortItemCard_DetailAreaBorder_Configuration");
static_assert(sizeof(FFortItemCard_DetailAreaBorder_Configuration) == 0x000014, "Wrong size on FFortItemCard_DetailAreaBorder_Configuration");
static_assert(offsetof(FFortItemCard_DetailAreaBorder_Configuration, MinimumHeight) == 0x000000, "Member 'FFortItemCard_DetailAreaBorder_Configuration::MinimumHeight' has a wrong offset!");
static_assert(offsetof(FFortItemCard_DetailAreaBorder_Configuration, Padding) == 0x000004, "Member 'FFortItemCard_DetailAreaBorder_Configuration::Padding' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_LevelMeter_Configuration
// 0x0014 (0x0014 - 0x0000)
struct FFortItemCard_LevelMeter_Configuration final
{
public:
	float                                         MeterThickness;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                MeterPadding;                                      // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_LevelMeter_Configuration) == 0x000004, "Wrong alignment on FFortItemCard_LevelMeter_Configuration");
static_assert(sizeof(FFortItemCard_LevelMeter_Configuration) == 0x000014, "Wrong size on FFortItemCard_LevelMeter_Configuration");
static_assert(offsetof(FFortItemCard_LevelMeter_Configuration, MeterThickness) == 0x000000, "Member 'FFortItemCard_LevelMeter_Configuration::MeterThickness' has a wrong offset!");
static_assert(offsetof(FFortItemCard_LevelMeter_Configuration, MeterPadding) == 0x000004, "Member 'FFortItemCard_LevelMeter_Configuration::MeterPadding' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_M_PersonnelAndSchematics_Configuration
// 0x02C8 (0x02C8 - 0x0000)
struct FFortItemCard_M_PersonnelAndSchematics_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration PowerRatingBlock;                                  // 0x0010(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_NameplateBorder_Configuration Nameplate;                                         // 0x01C8(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ClassIconSize;                                     // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeadSurvivorTypeIconSize;                          // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstIconSlotSize;                                 // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenIconSlots;                           // 0x0278(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SecondIconSlotSize;                                // 0x027C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_DefenderWeaponTypeIcon_Configuration DefenderWeaponTypeIcon;                            // 0x0284(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DetailAreaBorder_Configuration DetailAreaBorder;                                  // 0x028C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_LevelMeter_Configuration LevelMeter;                                        // 0x02A0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TierMeterLeftPadding;                              // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x02B8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_M_PersonnelAndSchematics_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_M_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_M_PersonnelAndSchematics_Configuration) == 0x0002C8, "Wrong size on FFortItemCard_M_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, PowerRatingBlock) == 0x000010, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, BookmarkImageSize) == 0x0001C0, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, Nameplate) == 0x0001C8, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::Nameplate' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, ClassIconSize) == 0x000260, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::ClassIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, LeadSurvivorTypeIconSize) == 0x000268, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::LeadSurvivorTypeIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, FirstIconSlotSize) == 0x000270, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::FirstIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, PaddingBetweenIconSlots) == 0x000278, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::PaddingBetweenIconSlots' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, SecondIconSlotSize) == 0x00027C, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::SecondIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, DefenderWeaponTypeIcon) == 0x000284, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::DefenderWeaponTypeIcon' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, DetailAreaBorder) == 0x00028C, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::DetailAreaBorder' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, LevelMeter) == 0x0002A0, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::LevelMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, TierMeterLeftPadding) == 0x0002B4, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::TierMeterLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, TierMeter) == 0x0002B8, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::TierMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortUITutorialData
// 0x0050 (0x0058 - 0x0008)
struct FFortUITutorialData final : public FTableRowBase
{
public:
	class FName                                   TutorialWidgetName;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 DevComment;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           Descriptions;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      PreviewImages;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUITutorialData) == 0x000008, "Wrong alignment on FFortUITutorialData");
static_assert(sizeof(FFortUITutorialData) == 0x000058, "Wrong size on FFortUITutorialData");
static_assert(offsetof(FFortUITutorialData, TutorialWidgetName) == 0x000008, "Member 'FFortUITutorialData::TutorialWidgetName' has a wrong offset!");
static_assert(offsetof(FFortUITutorialData, Title) == 0x000010, "Member 'FFortUITutorialData::Title' has a wrong offset!");
static_assert(offsetof(FFortUITutorialData, DevComment) == 0x000028, "Member 'FFortUITutorialData::DevComment' has a wrong offset!");
static_assert(offsetof(FFortUITutorialData, Descriptions) == 0x000038, "Member 'FFortUITutorialData::Descriptions' has a wrong offset!");
static_assert(offsetof(FFortUITutorialData, PreviewImages) == 0x000048, "Member 'FFortUITutorialData::PreviewImages' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XS_PersonnelAndSchematics_Configuration
// 0x0034 (0x0034 - 0x0000)
struct FFortItemCard_XS_PersonnelAndSchematics_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_DetailAreaBorder_Configuration DetailAreaBorder;                                  // 0x0018(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              AvailableUpgradeIconSize;                          // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_XS_PersonnelAndSchematics_Configuration) == 0x000004, "Wrong alignment on FFortItemCard_XS_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_XS_PersonnelAndSchematics_Configuration) == 0x000034, "Wrong size on FFortItemCard_XS_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_XS_PersonnelAndSchematics_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XS_PersonnelAndSchematics_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_PersonnelAndSchematics_Configuration, BookmarkImageSize) == 0x000010, "Member 'FFortItemCard_XS_PersonnelAndSchematics_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_PersonnelAndSchematics_Configuration, DetailAreaBorder) == 0x000018, "Member 'FFortItemCard_XS_PersonnelAndSchematics_Configuration::DetailAreaBorder' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_PersonnelAndSchematics_Configuration, AvailableUpgradeIconSize) == 0x00002C, "Member 'FFortItemCard_XS_PersonnelAndSchematics_Configuration::AvailableUpgradeIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortHealthyGamingData
// 0x0088 (0x0090 - 0x0008)
struct FFortHealthyGamingData final : public FTableRowBase
{
public:
	float                                         HealthWarningToastInterval;                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HealthWarningToastDescriptionFormat;               // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HealthWarningScreenText;                           // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   GameplayRestrictionText;                           // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         GameplayRestrictionWarningTimeOffset;              // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AntiAddictionTotalDescriptionFormat;               // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUsePlayerTimeLimitSystem;                         // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UTexture2D>>      RatingIcons;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHealthyGamingData) == 0x000008, "Wrong alignment on FFortHealthyGamingData");
static_assert(sizeof(FFortHealthyGamingData) == 0x000090, "Wrong size on FFortHealthyGamingData");
static_assert(offsetof(FFortHealthyGamingData, HealthWarningToastInterval) == 0x000008, "Member 'FFortHealthyGamingData::HealthWarningToastInterval' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, HealthWarningToastDescriptionFormat) == 0x000010, "Member 'FFortHealthyGamingData::HealthWarningToastDescriptionFormat' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, HealthWarningScreenText) == 0x000028, "Member 'FFortHealthyGamingData::HealthWarningScreenText' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, GameplayRestrictionText) == 0x000040, "Member 'FFortHealthyGamingData::GameplayRestrictionText' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, GameplayRestrictionWarningTimeOffset) == 0x000058, "Member 'FFortHealthyGamingData::GameplayRestrictionWarningTimeOffset' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, AntiAddictionTotalDescriptionFormat) == 0x000060, "Member 'FFortHealthyGamingData::AntiAddictionTotalDescriptionFormat' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, bUsePlayerTimeLimitSystem) == 0x000078, "Member 'FFortHealthyGamingData::bUsePlayerTimeLimitSystem' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, RatingIcons) == 0x000080, "Member 'FFortHealthyGamingData::RatingIcons' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_S_TransformKey_Configuration
// 0x0048 (0x0048 - 0x0000)
struct FFortItemCard_S_TransformKey_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformKeyIconSize;                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_S_TransformKey_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_S_TransformKey_Configuration");
static_assert(sizeof(FFortItemCard_S_TransformKey_Configuration) == 0x000048, "Wrong size on FFortItemCard_S_TransformKey_Configuration");
static_assert(offsetof(FFortItemCard_S_TransformKey_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_S_TransformKey_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_TransformKey_Configuration, StackCountBlock) == 0x000010, "Member 'FFortItemCard_S_TransformKey_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_TransformKey_Configuration, TransformKeyIconSize) == 0x000040, "Member 'FFortItemCard_S_TransformKey_Configuration::TransformKeyIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_S_ItemInstance_Configuration
// 0x01A0 (0x01A0 - 0x0000)
struct FFortItemCard_S_ItemInstance_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PowerRatingBlockPadding;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration PowerRatingBlock;                                  // 0x0020(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0128(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                TraitBoxPadding;                                   // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstTraitSize;                                    // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TierMeterPadding;                                  // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x0180(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DurabilityMeter_Configuration DurabilityMeter;                                   // 0x018C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_S_ItemInstance_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_S_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_S_ItemInstance_Configuration) == 0x0001A0, "Wrong size on FFortItemCard_S_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_S_ItemInstance_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, PowerRatingBlockPadding) == 0x000010, "Member 'FFortItemCard_S_ItemInstance_Configuration::PowerRatingBlockPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, PowerRatingBlock) == 0x000020, "Member 'FFortItemCard_S_ItemInstance_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, BookmarkImageSize) == 0x000120, "Member 'FFortItemCard_S_ItemInstance_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, StackCountBlock) == 0x000128, "Member 'FFortItemCard_S_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, TraitBoxPadding) == 0x000158, "Member 'FFortItemCard_S_ItemInstance_Configuration::TraitBoxPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, FirstTraitSize) == 0x000168, "Member 'FFortItemCard_S_ItemInstance_Configuration::FirstTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, TierMeterPadding) == 0x000170, "Member 'FFortItemCard_S_ItemInstance_Configuration::TierMeterPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, TierMeter) == 0x000180, "Member 'FFortItemCard_S_ItemInstance_Configuration::TierMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, DurabilityMeter) == 0x00018C, "Member 'FFortItemCard_S_ItemInstance_Configuration::DurabilityMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_S_PersonnelAndSchematics_Configuration
// 0x02C8 (0x02C8 - 0x0000)
struct FFortItemCard_S_PersonnelAndSchematics_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration PowerRatingBlock;                                  // 0x0010(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_NameplateBorder_Configuration Nameplate;                                         // 0x01C8(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ClassIconSize;                                     // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeadSurvivorTypeIconSize;                          // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstIconSlotSize;                                 // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenIconSlots;                           // 0x0278(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SecondIconSlotSize;                                // 0x027C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_DefenderWeaponTypeIcon_Configuration DefenderWeaponTypeIcon;                            // 0x0284(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DetailAreaBorder_Configuration DetailAreaBorder;                                  // 0x028C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_LevelMeter_Configuration LevelMeter;                                        // 0x02A0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TierMeterLeftPadding;                              // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x02B8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_S_PersonnelAndSchematics_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_S_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_S_PersonnelAndSchematics_Configuration) == 0x0002C8, "Wrong size on FFortItemCard_S_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, PowerRatingBlock) == 0x000010, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, BookmarkImageSize) == 0x0001C0, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, Nameplate) == 0x0001C8, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::Nameplate' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, ClassIconSize) == 0x000260, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::ClassIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, LeadSurvivorTypeIconSize) == 0x000268, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::LeadSurvivorTypeIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, FirstIconSlotSize) == 0x000270, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::FirstIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, PaddingBetweenIconSlots) == 0x000278, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::PaddingBetweenIconSlots' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, SecondIconSlotSize) == 0x00027C, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::SecondIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, DefenderWeaponTypeIcon) == 0x000284, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::DefenderWeaponTypeIcon' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, DetailAreaBorder) == 0x00028C, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::DetailAreaBorder' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, LevelMeter) == 0x0002A0, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::LevelMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, TierMeterLeftPadding) == 0x0002B4, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::TierMeterLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, TierMeter) == 0x0002B8, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::TierMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XL_PersonnelAndSchematics_Configuration
// 0x0350 (0x0350 - 0x0000)
struct FFortItemCard_XL_PersonnelAndSchematics_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration PowerRatingBlock;                                  // 0x0010(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_NameplateBorder_Configuration Nameplate;                                         // 0x01C8(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ItemNameTextStyle;                                 // 0x0260(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeadSurvivorTypeIconSize;                          // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstIconSlotSize;                                 // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenIconSlots;                           // 0x0298(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SecondIconSlotSize;                                // 0x029C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_DefenderWeaponTypeIcon_Configuration DefenderWeaponTypeIcon;                            // 0x02A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DetailAreaBorder_Configuration DetailAreaBorder;                                  // 0x02AC(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RarityNameTextLeftPadding;                         // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   RarityNameTextStyle;                               // 0x02C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClassIconImageLeftPadding;                         // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ClassIconSize;                                     // 0x02F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenClassIconAndName;                    // 0x02FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ClassNameTextStyle;                                // 0x0300(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TierMeterLeftPadding;                              // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x032C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                IconSlotOverNameplatePadding;                      // 0x0338(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              IconSlotOverNameplateSize;                         // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_XL_PersonnelAndSchematics_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_XL_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_XL_PersonnelAndSchematics_Configuration) == 0x000350, "Wrong size on FFortItemCard_XL_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, PowerRatingBlock) == 0x000010, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, BookmarkImageSize) == 0x0001C0, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, Nameplate) == 0x0001C8, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::Nameplate' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, ItemNameTextStyle) == 0x000260, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::ItemNameTextStyle' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, LeadSurvivorTypeIconSize) == 0x000288, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::LeadSurvivorTypeIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, FirstIconSlotSize) == 0x000290, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::FirstIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, PaddingBetweenIconSlots) == 0x000298, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::PaddingBetweenIconSlots' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, SecondIconSlotSize) == 0x00029C, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::SecondIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, DefenderWeaponTypeIcon) == 0x0002A4, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::DefenderWeaponTypeIcon' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, DetailAreaBorder) == 0x0002AC, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::DetailAreaBorder' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, RarityNameTextLeftPadding) == 0x0002C0, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::RarityNameTextLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, RarityNameTextStyle) == 0x0002C8, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::RarityNameTextStyle' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, ClassIconImageLeftPadding) == 0x0002F0, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::ClassIconImageLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, ClassIconSize) == 0x0002F4, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::ClassIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, PaddingBetweenClassIconAndName) == 0x0002FC, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::PaddingBetweenClassIconAndName' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, ClassNameTextStyle) == 0x000300, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::ClassNameTextStyle' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, TierMeterLeftPadding) == 0x000328, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::TierMeterLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, TierMeter) == 0x00032C, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::TierMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, IconSlotOverNameplatePadding) == 0x000338, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::IconSlotOverNameplatePadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, IconSlotOverNameplateSize) == 0x000348, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::IconSlotOverNameplateSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_M_TransformKey_Configuration
// 0x0048 (0x0048 - 0x0000)
struct FFortItemCard_M_TransformKey_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformKeyIconSize;                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_M_TransformKey_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_M_TransformKey_Configuration");
static_assert(sizeof(FFortItemCard_M_TransformKey_Configuration) == 0x000048, "Wrong size on FFortItemCard_M_TransformKey_Configuration");
static_assert(offsetof(FFortItemCard_M_TransformKey_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_M_TransformKey_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_TransformKey_Configuration, StackCountBlock) == 0x000010, "Member 'FFortItemCard_M_TransformKey_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_TransformKey_Configuration, TransformKeyIconSize) == 0x000040, "Member 'FFortItemCard_M_TransformKey_Configuration::TransformKeyIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_M_ItemInstance_Configuration
// 0x01B0 (0x01B0 - 0x0000)
struct FFortItemCard_M_ItemInstance_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PowerRatingBlockPadding;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration PowerRatingBlock;                                  // 0x0020(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0128(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                TraitBoxPadding;                                   // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstTraitSize;                                    // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenTraitIcons;                          // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SecondTraitSize;                                   // 0x0174(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TierMeterPadding;                                  // 0x017C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x018C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DurabilityMeter_Configuration DurabilityMeter;                                   // 0x0198(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_M_ItemInstance_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_M_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_M_ItemInstance_Configuration) == 0x0001B0, "Wrong size on FFortItemCard_M_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_M_ItemInstance_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, PowerRatingBlockPadding) == 0x000010, "Member 'FFortItemCard_M_ItemInstance_Configuration::PowerRatingBlockPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, PowerRatingBlock) == 0x000020, "Member 'FFortItemCard_M_ItemInstance_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, BookmarkImageSize) == 0x000120, "Member 'FFortItemCard_M_ItemInstance_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, StackCountBlock) == 0x000128, "Member 'FFortItemCard_M_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, TraitBoxPadding) == 0x000158, "Member 'FFortItemCard_M_ItemInstance_Configuration::TraitBoxPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, FirstTraitSize) == 0x000168, "Member 'FFortItemCard_M_ItemInstance_Configuration::FirstTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, PaddingBetweenTraitIcons) == 0x000170, "Member 'FFortItemCard_M_ItemInstance_Configuration::PaddingBetweenTraitIcons' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, SecondTraitSize) == 0x000174, "Member 'FFortItemCard_M_ItemInstance_Configuration::SecondTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, TierMeterPadding) == 0x00017C, "Member 'FFortItemCard_M_ItemInstance_Configuration::TierMeterPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, TierMeter) == 0x00018C, "Member 'FFortItemCard_M_ItemInstance_Configuration::TierMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, DurabilityMeter) == 0x000198, "Member 'FFortItemCard_M_ItemInstance_Configuration::DurabilityMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_L_TransformKey_Configuration
// 0x0048 (0x0048 - 0x0000)
struct FFortItemCard_L_TransformKey_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformKeyIconSize;                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_L_TransformKey_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_L_TransformKey_Configuration");
static_assert(sizeof(FFortItemCard_L_TransformKey_Configuration) == 0x000048, "Wrong size on FFortItemCard_L_TransformKey_Configuration");
static_assert(offsetof(FFortItemCard_L_TransformKey_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_L_TransformKey_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_TransformKey_Configuration, StackCountBlock) == 0x000010, "Member 'FFortItemCard_L_TransformKey_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_TransformKey_Configuration, TransformKeyIconSize) == 0x000040, "Member 'FFortItemCard_L_TransformKey_Configuration::TransformKeyIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.BundledItemInfo
// 0x0018 (0x0018 - 0x0000)
struct FBundledItemInfo final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwned;                                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBundledItemInfo) == 0x000008, "Wrong alignment on FBundledItemInfo");
static_assert(sizeof(FBundledItemInfo) == 0x000018, "Wrong size on FBundledItemInfo");
static_assert(offsetof(FBundledItemInfo, TemplateId) == 0x000000, "Member 'FBundledItemInfo::TemplateId' has a wrong offset!");
static_assert(offsetof(FBundledItemInfo, Quantity) == 0x000010, "Member 'FBundledItemInfo::Quantity' has a wrong offset!");
static_assert(offsetof(FBundledItemInfo, bOwned) == 0x000014, "Member 'FBundledItemInfo::bOwned' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_L_ItemInstance_Configuration
// 0x01B0 (0x01B0 - 0x0000)
struct FFortItemCard_L_ItemInstance_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PowerRatingBlockPadding;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration PowerRatingBlock;                                  // 0x0020(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0128(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                TraitBoxPadding;                                   // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstTraitSize;                                    // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenTraitIcons;                          // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SecondTraitSize;                                   // 0x0174(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TierMeterPadding;                                  // 0x017C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x018C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DurabilityMeter_Configuration DurabilityMeter;                                   // 0x0198(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_L_ItemInstance_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_L_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_L_ItemInstance_Configuration) == 0x0001B0, "Wrong size on FFortItemCard_L_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_L_ItemInstance_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, PowerRatingBlockPadding) == 0x000010, "Member 'FFortItemCard_L_ItemInstance_Configuration::PowerRatingBlockPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, PowerRatingBlock) == 0x000020, "Member 'FFortItemCard_L_ItemInstance_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, BookmarkImageSize) == 0x000120, "Member 'FFortItemCard_L_ItemInstance_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, StackCountBlock) == 0x000128, "Member 'FFortItemCard_L_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, TraitBoxPadding) == 0x000158, "Member 'FFortItemCard_L_ItemInstance_Configuration::TraitBoxPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, FirstTraitSize) == 0x000168, "Member 'FFortItemCard_L_ItemInstance_Configuration::FirstTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, PaddingBetweenTraitIcons) == 0x000170, "Member 'FFortItemCard_L_ItemInstance_Configuration::PaddingBetweenTraitIcons' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, SecondTraitSize) == 0x000174, "Member 'FFortItemCard_L_ItemInstance_Configuration::SecondTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, TierMeterPadding) == 0x00017C, "Member 'FFortItemCard_L_ItemInstance_Configuration::TierMeterPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, TierMeter) == 0x00018C, "Member 'FFortItemCard_L_ItemInstance_Configuration::TierMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, DurabilityMeter) == 0x000198, "Member 'FFortItemCard_L_ItemInstance_Configuration::DurabilityMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_L_PersonnelAndSchematics_Configuration
// 0x02C8 (0x02C8 - 0x0000)
struct FFortItemCard_L_PersonnelAndSchematics_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration PowerRatingBlock;                                  // 0x0010(0x01B0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_NameplateBorder_Configuration Nameplate;                                         // 0x01C8(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ClassIconSize;                                     // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeadSurvivorTypeIconSize;                          // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstIconSlotSize;                                 // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenIconSlots;                           // 0x0278(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SecondIconSlotSize;                                // 0x027C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_DefenderWeaponTypeIcon_Configuration DefenderWeaponTypeIcon;                            // 0x0284(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DetailAreaBorder_Configuration DetailAreaBorder;                                  // 0x028C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_LevelMeter_Configuration LevelMeter;                                        // 0x02A0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TierMeterLeftPadding;                              // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x02B8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_L_PersonnelAndSchematics_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_L_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_L_PersonnelAndSchematics_Configuration) == 0x0002C8, "Wrong size on FFortItemCard_L_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, PowerRatingBlock) == 0x000010, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, BookmarkImageSize) == 0x0001C0, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, Nameplate) == 0x0001C8, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::Nameplate' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, ClassIconSize) == 0x000260, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::ClassIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, LeadSurvivorTypeIconSize) == 0x000268, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::LeadSurvivorTypeIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, FirstIconSlotSize) == 0x000270, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::FirstIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, PaddingBetweenIconSlots) == 0x000278, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::PaddingBetweenIconSlots' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, SecondIconSlotSize) == 0x00027C, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::SecondIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, DefenderWeaponTypeIcon) == 0x000284, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::DefenderWeaponTypeIcon' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, DetailAreaBorder) == 0x00028C, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::DetailAreaBorder' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, LevelMeter) == 0x0002A0, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::LevelMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, TierMeterLeftPadding) == 0x0002B4, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::TierMeterLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, TierMeter) == 0x0002B8, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::TierMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortUISurvivorSquadStatMatch
// 0x0370 (0x0370 - 0x0000)
struct FFortUISurvivorSquadStatMatch final
{
public:
	struct FFortMultiSizeBrush                    Icons;                                             // 0x0000(0x0330)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MagnitudeText;                                     // 0x0330(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AttributeDisplayName;                              // 0x0348(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         NumMembersMeetingCriteria;                         // 0x0360(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMembersRequired;                                // 0x0364(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUISurvivorSquadMatchType                 MatchType;                                         // 0x0368(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuffState                                PreviewEffect;                                     // 0x0369(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUISurvivorSquadStatMatch) == 0x000008, "Wrong alignment on FFortUISurvivorSquadStatMatch");
static_assert(sizeof(FFortUISurvivorSquadStatMatch) == 0x000370, "Wrong size on FFortUISurvivorSquadStatMatch");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, Icons) == 0x000000, "Member 'FFortUISurvivorSquadStatMatch::Icons' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, MagnitudeText) == 0x000330, "Member 'FFortUISurvivorSquadStatMatch::MagnitudeText' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, AttributeDisplayName) == 0x000348, "Member 'FFortUISurvivorSquadStatMatch::AttributeDisplayName' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, NumMembersMeetingCriteria) == 0x000360, "Member 'FFortUISurvivorSquadStatMatch::NumMembersMeetingCriteria' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, NumMembersRequired) == 0x000364, "Member 'FFortUISurvivorSquadStatMatch::NumMembersRequired' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, MatchType) == 0x000368, "Member 'FFortUISurvivorSquadStatMatch::MatchType' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, PreviewEffect) == 0x000369, "Member 'FFortUISurvivorSquadStatMatch::PreviewEffect' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XL_TransformKey_Configuration
// 0x0048 (0x0048 - 0x0000)
struct FFortItemCard_XL_TransformKey_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformKeyIconSize;                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_XL_TransformKey_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_XL_TransformKey_Configuration");
static_assert(sizeof(FFortItemCard_XL_TransformKey_Configuration) == 0x000048, "Wrong size on FFortItemCard_XL_TransformKey_Configuration");
static_assert(offsetof(FFortItemCard_XL_TransformKey_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XL_TransformKey_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_TransformKey_Configuration, StackCountBlock) == 0x000010, "Member 'FFortItemCard_XL_TransformKey_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_TransformKey_Configuration, TransformKeyIconSize) == 0x000040, "Member 'FFortItemCard_XL_TransformKey_Configuration::TransformKeyIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XL_ItemInstance_Configuration
// 0x01B0 (0x01B0 - 0x0000)
struct FFortItemCard_XL_ItemInstance_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PowerRatingBlockPadding;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration PowerRatingBlock;                                  // 0x0020(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0128(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                TraitBoxPadding;                                   // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstTraitSize;                                    // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenTraitIcons;                          // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SecondTraitSize;                                   // 0x0174(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TierMeterPadding;                                  // 0x017C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x018C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DurabilityMeter_Configuration DurabilityMeter;                                   // 0x0198(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_XL_ItemInstance_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_XL_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_XL_ItemInstance_Configuration) == 0x0001B0, "Wrong size on FFortItemCard_XL_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XL_ItemInstance_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, PowerRatingBlockPadding) == 0x000010, "Member 'FFortItemCard_XL_ItemInstance_Configuration::PowerRatingBlockPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, PowerRatingBlock) == 0x000020, "Member 'FFortItemCard_XL_ItemInstance_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, BookmarkImageSize) == 0x000120, "Member 'FFortItemCard_XL_ItemInstance_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, StackCountBlock) == 0x000128, "Member 'FFortItemCard_XL_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, TraitBoxPadding) == 0x000158, "Member 'FFortItemCard_XL_ItemInstance_Configuration::TraitBoxPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, FirstTraitSize) == 0x000168, "Member 'FFortItemCard_XL_ItemInstance_Configuration::FirstTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, PaddingBetweenTraitIcons) == 0x000170, "Member 'FFortItemCard_XL_ItemInstance_Configuration::PaddingBetweenTraitIcons' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, SecondTraitSize) == 0x000174, "Member 'FFortItemCard_XL_ItemInstance_Configuration::SecondTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, TierMeterPadding) == 0x00017C, "Member 'FFortItemCard_XL_ItemInstance_Configuration::TierMeterPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, TierMeter) == 0x00018C, "Member 'FFortItemCard_XL_ItemInstance_Configuration::TierMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, DurabilityMeter) == 0x000198, "Member 'FFortItemCard_XL_ItemInstance_Configuration::DurabilityMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemListViewConfig
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x10) FFortItemListViewConfig final
{
public:
	uint8                                         Pad_0[0xC0];                                       // 0x0000(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemListViewConfig) == 0x000010, "Wrong alignment on FFortItemListViewConfig");
static_assert(sizeof(FFortItemListViewConfig) == 0x0000C0, "Wrong size on FFortItemListViewConfig");

// ScriptStruct FortniteUI.FortItemManagementInventoryFilterTabLabelInfo
// 0x0008 (0x00A8 - 0x00A0)
struct FFortItemManagementInventoryFilterTabLabelInfo final : public FFortTabButtonLabelInfo
{
public:
	class FName                                   FilterTabNameId;                                   // 0x00A0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemManagementInventoryFilterTabLabelInfo) == 0x000008, "Wrong alignment on FFortItemManagementInventoryFilterTabLabelInfo");
static_assert(sizeof(FFortItemManagementInventoryFilterTabLabelInfo) == 0x0000A8, "Wrong size on FFortItemManagementInventoryFilterTabLabelInfo");
static_assert(offsetof(FFortItemManagementInventoryFilterTabLabelInfo, FilterTabNameId) == 0x0000A0, "Member 'FFortItemManagementInventoryFilterTabLabelInfo::FilterTabNameId' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemEntryPreviewData
// 0x0008 (0x0008 - 0x0000)
struct FFortItemEntryPreviewData final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemInspectionMode                       InspectMode;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemEntryPreviewData) == 0x000004, "Wrong alignment on FFortItemEntryPreviewData");
static_assert(sizeof(FFortItemEntryPreviewData) == 0x000008, "Wrong size on FFortItemEntryPreviewData");
static_assert(offsetof(FFortItemEntryPreviewData, Quantity) == 0x000000, "Member 'FFortItemEntryPreviewData::Quantity' has a wrong offset!");
static_assert(offsetof(FFortItemEntryPreviewData, InspectMode) == 0x000004, "Member 'FFortItemEntryPreviewData::InspectMode' has a wrong offset!");

// ScriptStruct FortniteUI.MeasuredText
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMeasuredText final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeasuredText) == 0x000008, "Wrong alignment on FMeasuredText");
static_assert(sizeof(FMeasuredText) == 0x000028, "Wrong size on FMeasuredText");

// ScriptStruct FortniteUI.OfferGroup
// 0x0018 (0x0018 - 0x0000)
struct FOfferGroup final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumberToShow;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOfferGroup) == 0x000008, "Wrong alignment on FOfferGroup");
static_assert(sizeof(FOfferGroup) == 0x000018, "Wrong size on FOfferGroup");
static_assert(offsetof(FOfferGroup, Name) == 0x000000, "Member 'FOfferGroup::Name' has a wrong offset!");
static_assert(offsetof(FOfferGroup, MaxNumberToShow) == 0x000010, "Member 'FOfferGroup::MaxNumberToShow' has a wrong offset!");

// ScriptStruct FortniteUI.ContentPushState
// 0x0003 (0x0003 - 0x0000)
struct FContentPushState final
{
public:
	bool                                          bHideHeader;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideFooter;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChatWidget;                                   // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentPushState) == 0x000001, "Wrong alignment on FContentPushState");
static_assert(sizeof(FContentPushState) == 0x000003, "Wrong size on FContentPushState");
static_assert(offsetof(FContentPushState, bHideHeader) == 0x000000, "Member 'FContentPushState::bHideHeader' has a wrong offset!");
static_assert(offsetof(FContentPushState, bHideFooter) == 0x000001, "Member 'FContentPushState::bHideFooter' has a wrong offset!");
static_assert(offsetof(FContentPushState, bHideChatWidget) == 0x000002, "Member 'FContentPushState::bHideChatWidget' has a wrong offset!");

// ScriptStruct FortniteUI.FortModalContainerSizeEntry
// 0x001C (0x001C - 0x0000)
struct FFortModalContainerSizeEntry final
{
public:
	float                                         AbsoluteWidth;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopPercent;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MiddlePercent;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomPercent;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalPadding;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalPadding;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContentPadding;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortModalContainerSizeEntry) == 0x000004, "Wrong alignment on FFortModalContainerSizeEntry");
static_assert(sizeof(FFortModalContainerSizeEntry) == 0x00001C, "Wrong size on FFortModalContainerSizeEntry");
static_assert(offsetof(FFortModalContainerSizeEntry, AbsoluteWidth) == 0x000000, "Member 'FFortModalContainerSizeEntry::AbsoluteWidth' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, TopPercent) == 0x000004, "Member 'FFortModalContainerSizeEntry::TopPercent' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, MiddlePercent) == 0x000008, "Member 'FFortModalContainerSizeEntry::MiddlePercent' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, BottomPercent) == 0x00000C, "Member 'FFortModalContainerSizeEntry::BottomPercent' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, VerticalPadding) == 0x000010, "Member 'FFortModalContainerSizeEntry::VerticalPadding' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, HorizontalPadding) == 0x000014, "Member 'FFortModalContainerSizeEntry::HorizontalPadding' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, ContentPadding) == 0x000018, "Member 'FFortModalContainerSizeEntry::ContentPadding' has a wrong offset!");

// ScriptStruct FortniteUI.FortMtxGradient
// 0x0020 (0x0020 - 0x0000)
struct FFortMtxGradient final
{
public:
	struct FLinearColor                           Start;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Stop;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMtxGradient) == 0x000004, "Wrong alignment on FFortMtxGradient");
static_assert(sizeof(FFortMtxGradient) == 0x000020, "Wrong size on FFortMtxGradient");
static_assert(offsetof(FFortMtxGradient, Start) == 0x000000, "Member 'FFortMtxGradient::Start' has a wrong offset!");
static_assert(offsetof(FFortMtxGradient, Stop) == 0x000010, "Member 'FFortMtxGradient::Stop' has a wrong offset!");

// ScriptStruct FortniteUI.FortMtxDetailsAttribute
// 0x0030 (0x0030 - 0x0000)
struct FFortMtxDetailsAttribute final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMtxDetailsAttribute) == 0x000008, "Wrong alignment on FFortMtxDetailsAttribute");
static_assert(sizeof(FFortMtxDetailsAttribute) == 0x000030, "Wrong size on FFortMtxDetailsAttribute");
static_assert(offsetof(FFortMtxDetailsAttribute, Name) == 0x000000, "Member 'FFortMtxDetailsAttribute::Name' has a wrong offset!");
static_assert(offsetof(FFortMtxDetailsAttribute, Value) == 0x000018, "Member 'FFortMtxDetailsAttribute::Value' has a wrong offset!");

// ScriptStruct FortniteUI.PlatformOverrides
// 0x0038 (0x0038 - 0x0000)
struct FPlatformOverrides final
{
public:
	bool                                          DisplayOnPlatform;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PlatformDisplayText;                               // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   PlatformHoverText;                                 // 0x0020(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformOverrides) == 0x000008, "Wrong alignment on FPlatformOverrides");
static_assert(sizeof(FPlatformOverrides) == 0x000038, "Wrong size on FPlatformOverrides");
static_assert(offsetof(FPlatformOverrides, DisplayOnPlatform) == 0x000000, "Member 'FPlatformOverrides::DisplayOnPlatform' has a wrong offset!");
static_assert(offsetof(FPlatformOverrides, PlatformDisplayText) == 0x000008, "Member 'FPlatformOverrides::PlatformDisplayText' has a wrong offset!");
static_assert(offsetof(FPlatformOverrides, PlatformHoverText) == 0x000020, "Member 'FPlatformOverrides::PlatformHoverText' has a wrong offset!");

// ScriptStruct FortniteUI.SliderSettings
// 0x0020 (0x0020 - 0x0000)
struct FSliderSettings final
{
public:
	int32                                         MinIntegralDigits;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIntegralDigits;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFractionalDigits;                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFractionalDigits;                               // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSensitivityValue;                               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSensitivityValue;                               // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERoundingMode                                 RoundingMode;                                      // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSliderSettings) == 0x000004, "Wrong alignment on FSliderSettings");
static_assert(sizeof(FSliderSettings) == 0x000020, "Wrong size on FSliderSettings");
static_assert(offsetof(FSliderSettings, MinIntegralDigits) == 0x000000, "Member 'FSliderSettings::MinIntegralDigits' has a wrong offset!");
static_assert(offsetof(FSliderSettings, MaxIntegralDigits) == 0x000004, "Member 'FSliderSettings::MaxIntegralDigits' has a wrong offset!");
static_assert(offsetof(FSliderSettings, MinFractionalDigits) == 0x000008, "Member 'FSliderSettings::MinFractionalDigits' has a wrong offset!");
static_assert(offsetof(FSliderSettings, MaxFractionalDigits) == 0x00000C, "Member 'FSliderSettings::MaxFractionalDigits' has a wrong offset!");
static_assert(offsetof(FSliderSettings, MinSensitivityValue) == 0x000010, "Member 'FSliderSettings::MinSensitivityValue' has a wrong offset!");
static_assert(offsetof(FSliderSettings, MaxSensitivityValue) == 0x000014, "Member 'FSliderSettings::MaxSensitivityValue' has a wrong offset!");
static_assert(offsetof(FSliderSettings, StepSize) == 0x000018, "Member 'FSliderSettings::StepSize' has a wrong offset!");
static_assert(offsetof(FSliderSettings, RoundingMode) == 0x00001C, "Member 'FSliderSettings::RoundingMode' has a wrong offset!");

// ScriptStruct FortniteUI.SettingData
// 0x0198 (0x0198 - 0x0000)
struct FSettingData final
{
public:
	ESettingType                                  SettingType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortOptionsMenuSetting>    SettingWidgetType;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   HoverText;                                         // 0x0028(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPlatformOverrides                     PlatformPCOverrides;                               // 0x0040(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPlatformOverrides                     PlatformXboxOverrides;                             // 0x0078(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPlatformOverrides                     PlatformPS4Overrides;                              // 0x00B0(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPlatformOverrides                     PlatformSwitchOverrides;                           // 0x00E8(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPlatformOverrides                     PlatformMobileOverrides;                           // 0x0120(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ESubGame>                              HiddenModes;                                       // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSliderSettings                        SliderSettings;                                    // 0x0168(0x0020)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   Curve;                                             // 0x0188(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSettingData) == 0x000008, "Wrong alignment on FSettingData");
static_assert(sizeof(FSettingData) == 0x000198, "Wrong size on FSettingData");
static_assert(offsetof(FSettingData, SettingType) == 0x000000, "Member 'FSettingData::SettingType' has a wrong offset!");
static_assert(offsetof(FSettingData, SettingWidgetType) == 0x000008, "Member 'FSettingData::SettingWidgetType' has a wrong offset!");
static_assert(offsetof(FSettingData, DisplayText) == 0x000010, "Member 'FSettingData::DisplayText' has a wrong offset!");
static_assert(offsetof(FSettingData, HoverText) == 0x000028, "Member 'FSettingData::HoverText' has a wrong offset!");
static_assert(offsetof(FSettingData, PlatformPCOverrides) == 0x000040, "Member 'FSettingData::PlatformPCOverrides' has a wrong offset!");
static_assert(offsetof(FSettingData, PlatformXboxOverrides) == 0x000078, "Member 'FSettingData::PlatformXboxOverrides' has a wrong offset!");
static_assert(offsetof(FSettingData, PlatformPS4Overrides) == 0x0000B0, "Member 'FSettingData::PlatformPS4Overrides' has a wrong offset!");
static_assert(offsetof(FSettingData, PlatformSwitchOverrides) == 0x0000E8, "Member 'FSettingData::PlatformSwitchOverrides' has a wrong offset!");
static_assert(offsetof(FSettingData, PlatformMobileOverrides) == 0x000120, "Member 'FSettingData::PlatformMobileOverrides' has a wrong offset!");
static_assert(offsetof(FSettingData, HiddenModes) == 0x000158, "Member 'FSettingData::HiddenModes' has a wrong offset!");
static_assert(offsetof(FSettingData, SliderSettings) == 0x000168, "Member 'FSettingData::SliderSettings' has a wrong offset!");
static_assert(offsetof(FSettingData, Curve) == 0x000188, "Member 'FSettingData::Curve' has a wrong offset!");

// ScriptStruct FortniteUI.OptionsTabData
// 0x0010 (0x0010 - 0x0000)
struct FOptionsTabData final
{
public:
	TArray<struct FSettingData>                   SettingDatas;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionsTabData) == 0x000008, "Wrong alignment on FOptionsTabData");
static_assert(sizeof(FOptionsTabData) == 0x000010, "Wrong size on FOptionsTabData");
static_assert(offsetof(FOptionsTabData, SettingDatas) == 0x000000, "Member 'FOptionsTabData::SettingDatas' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIPerkTier
// 0x0020 (0x0020 - 0x0000)
struct FFortUIPerkTier final
{
public:
	class UFortHeroSpecialization*                HeroSpecialization;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 Tier;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHero*                              CurrentHero;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUpgrade;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEvolution;                                      // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUIPerkTier) == 0x000008, "Wrong alignment on FFortUIPerkTier");
static_assert(sizeof(FFortUIPerkTier) == 0x000020, "Wrong size on FFortUIPerkTier");
static_assert(offsetof(FFortUIPerkTier, HeroSpecialization) == 0x000000, "Member 'FFortUIPerkTier::HeroSpecialization' has a wrong offset!");
static_assert(offsetof(FFortUIPerkTier, Tier) == 0x000008, "Member 'FFortUIPerkTier::Tier' has a wrong offset!");
static_assert(offsetof(FFortUIPerkTier, CurrentHero) == 0x000010, "Member 'FFortUIPerkTier::CurrentHero' has a wrong offset!");
static_assert(offsetof(FFortUIPerkTier, bIsUpgrade) == 0x000018, "Member 'FFortUIPerkTier::bIsUpgrade' has a wrong offset!");
static_assert(offsetof(FFortUIPerkTier, bIsEvolution) == 0x000019, "Member 'FFortUIPerkTier::bIsEvolution' has a wrong offset!");

// ScriptStruct FortniteUI.FortPickerTemporaryWheelItem
// 0x0020 (0x0020 - 0x0000)
struct FFortPickerTemporaryWheelItem final
{
public:
	class FText                                   LabelOverride;                                     // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    Item;                                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPickerTemporaryWheelItem) == 0x000008, "Wrong alignment on FFortPickerTemporaryWheelItem");
static_assert(sizeof(FFortPickerTemporaryWheelItem) == 0x000020, "Wrong size on FFortPickerTemporaryWheelItem");
static_assert(offsetof(FFortPickerTemporaryWheelItem, LabelOverride) == 0x000000, "Member 'FFortPickerTemporaryWheelItem::LabelOverride' has a wrong offset!");
static_assert(offsetof(FFortPickerTemporaryWheelItem, Item) == 0x000018, "Member 'FFortPickerTemporaryWheelItem::Item' has a wrong offset!");

// ScriptStruct FortniteUI.FortPickerTemporaryWheel
// 0x0030 (0x0030 - 0x0000)
struct FFortPickerTemporaryWheel final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortPickerTemporaryWheelItem>  Items;                                             // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPickerTemporaryWheel) == 0x000008, "Wrong alignment on FFortPickerTemporaryWheel");
static_assert(sizeof(FFortPickerTemporaryWheel) == 0x000030, "Wrong size on FFortPickerTemporaryWheel");
static_assert(offsetof(FFortPickerTemporaryWheel, Items) == 0x000020, "Member 'FFortPickerTemporaryWheel::Items' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataSurveyDescriptionMessage
// 0x0030 (0x0030 - 0x0000)
struct FFortPlayerSurveyCMSDataSurveyDescriptionMessage final
{
public:
	class FText                                   T;                                                 // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   M;                                                 // 0x0018(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataSurveyDescriptionMessage) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataSurveyDescriptionMessage");
static_assert(sizeof(FFortPlayerSurveyCMSDataSurveyDescriptionMessage) == 0x000030, "Wrong size on FFortPlayerSurveyCMSDataSurveyDescriptionMessage");
static_assert(offsetof(FFortPlayerSurveyCMSDataSurveyDescriptionMessage, T) == 0x000000, "Member 'FFortPlayerSurveyCMSDataSurveyDescriptionMessage::T' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataSurveyDescriptionMessage, M) == 0x000018, "Member 'FFortPlayerSurveyCMSDataSurveyDescriptionMessage::M' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataSurvey
// 0x0098 (0x0098 - 0x0000)
struct FFortPlayerSurveyCMSDataSurvey final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   T;                                                 // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	bool                                          Rt;                                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJsonObjectWrapper>             C;                                                 // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortPlayerSurveyCMSDataSurveyDescriptionMessage Cm;                                                // 0x0040(0x0030)(NativeAccessSpecifierPublic)
	EFortPlayerSurveyCMSDataTrigger               R;                                                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFortPlayerSurveyCMSDataGameMode>      Sg;                                                // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJsonObjectWrapper>             Q;                                                 // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataSurvey) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataSurvey");
static_assert(sizeof(FFortPlayerSurveyCMSDataSurvey) == 0x000098, "Wrong size on FFortPlayerSurveyCMSDataSurvey");
static_assert(offsetof(FFortPlayerSurveyCMSDataSurvey, ID) == 0x000000, "Member 'FFortPlayerSurveyCMSDataSurvey::ID' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataSurvey, T) == 0x000010, "Member 'FFortPlayerSurveyCMSDataSurvey::T' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataSurvey, Rt) == 0x000028, "Member 'FFortPlayerSurveyCMSDataSurvey::Rt' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataSurvey, C) == 0x000030, "Member 'FFortPlayerSurveyCMSDataSurvey::C' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataSurvey, Cm) == 0x000040, "Member 'FFortPlayerSurveyCMSDataSurvey::Cm' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataSurvey, R) == 0x000070, "Member 'FFortPlayerSurveyCMSDataSurvey::R' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataSurvey, Sg) == 0x000078, "Member 'FFortPlayerSurveyCMSDataSurvey::Sg' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataSurvey, Q) == 0x000088, "Member 'FFortPlayerSurveyCMSDataSurvey::Q' has a wrong offset!");

// ScriptStruct FortniteUI.SquadQuickChatOptionData
// 0x0018 (0x00E0 - 0x00C8)
struct FSquadQuickChatOptionData final : public FRadialOptionData
{
public:
	struct FAthenaQuickChatActiveEntry            ChatEntry;                                         // 0x00C8(0x0014)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSquadQuickChatOptionData) == 0x000008, "Wrong alignment on FSquadQuickChatOptionData");
static_assert(sizeof(FSquadQuickChatOptionData) == 0x0000E0, "Wrong size on FSquadQuickChatOptionData");
static_assert(offsetof(FSquadQuickChatOptionData, ChatEntry) == 0x0000C8, "Member 'FSquadQuickChatOptionData::ChatEntry' has a wrong offset!");
static_assert(offsetof(FSquadQuickChatOptionData, bEnabled) == 0x0000DC, "Member 'FSquadQuickChatOptionData::bEnabled' has a wrong offset!");

// ScriptStruct FortniteUI.ItemDefOptionData
// 0x0008 (0x00D0 - 0x00C8)
struct FItemDefOptionData final : public FRadialOptionData
{
public:
	class UObject*                                ItemDef;                                           // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDefOptionData) == 0x000008, "Wrong alignment on FItemDefOptionData");
static_assert(sizeof(FItemDefOptionData) == 0x0000D0, "Wrong size on FItemDefOptionData");
static_assert(offsetof(FItemDefOptionData, ItemDef) == 0x0000C8, "Member 'FItemDefOptionData::ItemDef' has a wrong offset!");

// ScriptStruct FortniteUI.MapNoteOptionData
// 0x0018 (0x00E0 - 0x00C8)
struct FMapNoteOptionData final : public FRadialOptionData
{
public:
	class FText                                   MapNoteText;                                       // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapNoteOptionData) == 0x000008, "Wrong alignment on FMapNoteOptionData");
static_assert(sizeof(FMapNoteOptionData) == 0x0000E0, "Wrong size on FMapNoteOptionData");
static_assert(offsetof(FMapNoteOptionData, MapNoteText) == 0x0000C8, "Member 'FMapNoteOptionData::MapNoteText' has a wrong offset!");

// ScriptStruct FortniteUI.SquadChatOptionData
// 0x0018 (0x00E0 - 0x00C8)
struct FSquadChatOptionData final : public FRadialOptionData
{
public:
	class FText                                   ChatText;                                          // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquadChatOptionData) == 0x000008, "Wrong alignment on FSquadChatOptionData");
static_assert(sizeof(FSquadChatOptionData) == 0x0000E0, "Wrong size on FSquadChatOptionData");
static_assert(offsetof(FSquadChatOptionData, ChatText) == 0x0000C8, "Member 'FSquadChatOptionData::ChatText' has a wrong offset!");

// ScriptStruct FortniteUI.ChatOptionData
// 0x0018 (0x00E0 - 0x00C8)
struct FChatOptionData final : public FRadialOptionData
{
public:
	class FText                                   ChatText;                                          // 0x00C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChatOptionData) == 0x000008, "Wrong alignment on FChatOptionData");
static_assert(sizeof(FChatOptionData) == 0x0000E0, "Wrong size on FChatOptionData");
static_assert(offsetof(FChatOptionData, ChatText) == 0x0000C8, "Member 'FChatOptionData::ChatText' has a wrong offset!");

// ScriptStruct FortniteUI.ItemCategoryOptionData
// 0x0018 (0x00E0 - 0x00C8)
struct FItemCategoryOptionData final : public FRadialOptionData
{
public:
	class FString                                 TemplatePrefix;                                    // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuildingAttachmentType                       BuildingAttachmentType;                            // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemCategoryOptionData) == 0x000008, "Wrong alignment on FItemCategoryOptionData");
static_assert(sizeof(FItemCategoryOptionData) == 0x0000E0, "Wrong size on FItemCategoryOptionData");
static_assert(offsetof(FItemCategoryOptionData, TemplatePrefix) == 0x0000C8, "Member 'FItemCategoryOptionData::TemplatePrefix' has a wrong offset!");
static_assert(offsetof(FItemCategoryOptionData, BuildingAttachmentType) == 0x0000D8, "Member 'FItemCategoryOptionData::BuildingAttachmentType' has a wrong offset!");

// ScriptStruct FortniteUI.BuildingOptionData
// 0x0018 (0x00E0 - 0x00C8)
struct FBuildingOptionData final : public FRadialOptionData
{
public:
	class FString                                 ClassSuffix;                                       // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClassMirrored;                                     // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingOptionData) == 0x000008, "Wrong alignment on FBuildingOptionData");
static_assert(sizeof(FBuildingOptionData) == 0x0000E0, "Wrong size on FBuildingOptionData");
static_assert(offsetof(FBuildingOptionData, ClassSuffix) == 0x0000C8, "Member 'FBuildingOptionData::ClassSuffix' has a wrong offset!");
static_assert(offsetof(FBuildingOptionData, ClassMirrored) == 0x0000D8, "Member 'FBuildingOptionData::ClassMirrored' has a wrong offset!");

// ScriptStruct FortniteUI.BuildingCategoryOptionData
// 0x0008 (0x00D0 - 0x00C8)
struct FBuildingCategoryOptionData final : public FRadialOptionData
{
public:
	EFortBuildingType                             BuildingType;                                      // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingCategoryOptionData) == 0x000008, "Wrong alignment on FBuildingCategoryOptionData");
static_assert(sizeof(FBuildingCategoryOptionData) == 0x0000D0, "Wrong size on FBuildingCategoryOptionData");
static_assert(offsetof(FBuildingCategoryOptionData, BuildingType) == 0x0000C8, "Member 'FBuildingCategoryOptionData::BuildingType' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusInfo
// 0x0008 (0x0008 - 0x0000)
struct FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusInfo final
{
public:
	EFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusType FocusType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusInfo) == 0x000004, "Wrong alignment on FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusInfo");
static_assert(sizeof(FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusInfo) == 0x000008, "Wrong size on FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusInfo");
static_assert(offsetof(FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusInfo, FocusType) == 0x000000, "Member 'FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusInfo::FocusType' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusInfo, Index) == 0x000004, "Member 'FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetFocusInfo::Index' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBaseInternalButtonData
// 0x0018 (0x0018 - 0x0000)
struct FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBaseInternalButtonData final
{
public:
	class UCommonButton*                          ButtonWidget;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBaseInternalButtonData) == 0x000008, "Wrong alignment on FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBaseInternalButtonData");
static_assert(sizeof(FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBaseInternalButtonData) == 0x000018, "Wrong size on FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBaseInternalButtonData");
static_assert(offsetof(FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBaseInternalButtonData, ButtonWidget) == 0x000000, "Member 'FFortPlayerSurveyButtonListMultipleSelectionAnswerWidgetBaseInternalButtonData::ButtonWidget' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataCondition
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortPlayerSurveyCMSDataCondition final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyCMSDataCondition) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataCondition");
static_assert(sizeof(FFortPlayerSurveyCMSDataCondition) == 0x000010, "Wrong size on FFortPlayerSurveyCMSDataCondition");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionGroupBase
// 0x0010 (0x0018 - 0x0008)
struct FFortPlayerSurveyCMSDataConditionGroupBase : public FFortPlayerSurveyCMSDataConditionBase
{
public:
	TArray<struct FJsonObjectWrapper>             C;                                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionGroupBase) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionGroupBase");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionGroupBase) == 0x000018, "Wrong size on FFortPlayerSurveyCMSDataConditionGroupBase");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionGroupBase, C) == 0x000008, "Member 'FFortPlayerSurveyCMSDataConditionGroupBase::C' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionAnd
// 0x0000 (0x0018 - 0x0018)
struct FFortPlayerSurveyCMSDataConditionAnd final : public FFortPlayerSurveyCMSDataConditionGroupBase
{
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionAnd) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionAnd");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionAnd) == 0x000018, "Wrong size on FFortPlayerSurveyCMSDataConditionAnd");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataGameplayTagQuery
// 0x0018 (0x0018 - 0x0000)
struct FFortPlayerSurveyCMSDataGameplayTagQuery final
{
public:
	EFortPlayerSurveyCMSDataGameplayTagQueryExprType T;                                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           N;                                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataGameplayTagQuery) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataGameplayTagQuery");
static_assert(sizeof(FFortPlayerSurveyCMSDataGameplayTagQuery) == 0x000018, "Wrong size on FFortPlayerSurveyCMSDataGameplayTagQuery");
static_assert(offsetof(FFortPlayerSurveyCMSDataGameplayTagQuery, T) == 0x000000, "Member 'FFortPlayerSurveyCMSDataGameplayTagQuery::T' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataGameplayTagQuery, N) == 0x000008, "Member 'FFortPlayerSurveyCMSDataGameplayTagQuery::N' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionAthenaPoi
// 0x0018 (0x0020 - 0x0008)
struct FFortPlayerSurveyCMSDataConditionAthenaPoi final : public FFortPlayerSurveyCMSDataConditionBase
{
public:
	struct FFortPlayerSurveyCMSDataGameplayTagQuery Q;                                                 // 0x0008(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionAthenaPoi) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionAthenaPoi");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionAthenaPoi) == 0x000020, "Wrong size on FFortPlayerSurveyCMSDataConditionAthenaPoi");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionAthenaPoi, Q) == 0x000008, "Member 'FFortPlayerSurveyCMSDataConditionAthenaPoi::Q' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionAthenaSeasonBookState
// 0x0008 (0x0010 - 0x0008)
struct FFortPlayerSurveyCMSDataConditionAthenaSeasonBookState final : public FFortPlayerSurveyCMSDataConditionBase
{
public:
	bool                                          T;                                                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionAthenaSeasonBookState) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionAthenaSeasonBookState");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionAthenaSeasonBookState) == 0x000010, "Wrong size on FFortPlayerSurveyCMSDataConditionAthenaSeasonBookState");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionAthenaSeasonBookState, T) == 0x000008, "Member 'FFortPlayerSurveyCMSDataConditionAthenaSeasonBookState::T' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionGroup
// 0x0018 (0x0018 - 0x0000)
struct FFortPlayerSurveyCMSDataConditionGroup final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJsonObjectWrapper>             C;                                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionGroup) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionGroup");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionGroup) == 0x000018, "Wrong size on FFortPlayerSurveyCMSDataConditionGroup");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionGroup, ID) == 0x000000, "Member 'FFortPlayerSurveyCMSDataConditionGroup::ID' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionGroup, C) == 0x000008, "Member 'FFortPlayerSurveyCMSDataConditionGroup::C' has a wrong offset!");

// ScriptStruct FortniteUI.PlatformPrefixIcon
// 0x0018 (0x0018 - 0x0000)
struct FPlatformPrefixIcon final
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PrefixIcon;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformPrefixIcon) == 0x000008, "Wrong alignment on FPlatformPrefixIcon");
static_assert(sizeof(FPlatformPrefixIcon) == 0x000018, "Wrong size on FPlatformPrefixIcon");
static_assert(offsetof(FPlatformPrefixIcon, Platform) == 0x000000, "Member 'FPlatformPrefixIcon::Platform' has a wrong offset!");
static_assert(offsetof(FPlatformPrefixIcon, PrefixIcon) == 0x000010, "Member 'FPlatformPrefixIcon::PrefixIcon' has a wrong offset!");

// ScriptStruct FortniteUI.PlatformPrefixIconList
// 0x0010 (0x0010 - 0x0000)
struct FPlatformPrefixIconList final
{
public:
	TArray<struct FPlatformPrefixIcon>            PlatformPrefixIcons;                               // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformPrefixIconList) == 0x000008, "Wrong alignment on FPlatformPrefixIconList");
static_assert(sizeof(FPlatformPrefixIconList) == 0x000010, "Wrong size on FPlatformPrefixIconList");
static_assert(offsetof(FPlatformPrefixIconList, PlatformPrefixIcons) == 0x000000, "Member 'FPlatformPrefixIconList::PlatformPrefixIcons' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionGroupReference
// 0x0008 (0x0010 - 0x0008)
struct FFortPlayerSurveyCMSDataConditionGroupReference final : public FFortPlayerSurveyCMSDataConditionBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionGroupReference) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionGroupReference");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionGroupReference) == 0x000010, "Wrong size on FFortPlayerSurveyCMSDataConditionGroupReference");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionGroupReference, ID) == 0x000008, "Member 'FFortPlayerSurveyCMSDataConditionGroupReference::ID' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataRelativeSurveyKey
// 0x0018 (0x0018 - 0x0000)
struct FFortPlayerSurveyCMSDataRelativeSurveyKey final
{
public:
	EFortPlayerSurveyCMSDataRelativeSurveyKeyType T;                                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataRelativeSurveyKey) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataRelativeSurveyKey");
static_assert(sizeof(FFortPlayerSurveyCMSDataRelativeSurveyKey) == 0x000018, "Wrong size on FFortPlayerSurveyCMSDataRelativeSurveyKey");
static_assert(offsetof(FFortPlayerSurveyCMSDataRelativeSurveyKey, T) == 0x000000, "Member 'FFortPlayerSurveyCMSDataRelativeSurveyKey::T' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataRelativeSurveyKey, ID) == 0x000008, "Member 'FFortPlayerSurveyCMSDataRelativeSurveyKey::ID' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionMostRecentlyCompleted
// 0x0028 (0x0030 - 0x0008)
struct FFortPlayerSurveyCMSDataConditionMostRecentlyCompleted final : public FFortPlayerSurveyCMSDataConditionBase
{
public:
	struct FFortPlayerSurveyCMSDataRelativeSurveyKey S;                                                 // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	EFortPlayerSurveyCMSDataBinaryComparisonOp    O;                                                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        T;                                                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionMostRecentlyCompleted) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionMostRecentlyCompleted");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionMostRecentlyCompleted) == 0x000030, "Wrong size on FFortPlayerSurveyCMSDataConditionMostRecentlyCompleted");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionMostRecentlyCompleted, S) == 0x000008, "Member 'FFortPlayerSurveyCMSDataConditionMostRecentlyCompleted::S' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionMostRecentlyCompleted, O) == 0x000020, "Member 'FFortPlayerSurveyCMSDataConditionMostRecentlyCompleted::O' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionMostRecentlyCompleted, T) == 0x000028, "Member 'FFortPlayerSurveyCMSDataConditionMostRecentlyCompleted::T' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionOr
// 0x0000 (0x0018 - 0x0018)
struct FFortPlayerSurveyCMSDataConditionOr final : public FFortPlayerSurveyCMSDataConditionGroupBase
{
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionOr) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionOr");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionOr) == 0x000018, "Wrong size on FFortPlayerSurveyCMSDataConditionOr");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionPlatform
// 0x0050 (0x0058 - 0x0008)
struct FFortPlayerSurveyCMSDataConditionPlatform final : public FFortPlayerSurveyCMSDataConditionBase
{
public:
	TSet<class FString>                           P;                                                 // 0x0008(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionPlatform) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionPlatform");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionPlatform) == 0x000058, "Wrong size on FFortPlayerSurveyCMSDataConditionPlatform");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionPlatform, P) == 0x000008, "Member 'FFortPlayerSurveyCMSDataConditionPlatform::P' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionQuestState
// 0x0028 (0x0030 - 0x0008)
struct FFortPlayerSurveyCMSDataConditionQuestState final : public FFortPlayerSurveyCMSDataConditionBase
{
public:
	EFortPlayerSurveyCMSDataGameMode              Sg;                                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Q;                                                 // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EFortPlayerSurveyCMSDataQuestState>    St;                                                // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionQuestState) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionQuestState");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionQuestState) == 0x000030, "Wrong size on FFortPlayerSurveyCMSDataConditionQuestState");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionQuestState, Sg) == 0x000008, "Member 'FFortPlayerSurveyCMSDataConditionQuestState::Sg' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionQuestState, Q) == 0x000010, "Member 'FFortPlayerSurveyCMSDataConditionQuestState::Q' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionQuestState, St) == 0x000020, "Member 'FFortPlayerSurveyCMSDataConditionQuestState::St' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionSeasonNumber
// 0x0000 (0x0010 - 0x0010)
struct FFortPlayerSurveyCMSDataConditionSeasonNumber final : public FFortPlayerSurveyCMSDataConditionSimpleIntComparisonBase
{
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionSeasonNumber) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionSeasonNumber");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionSeasonNumber) == 0x000010, "Wrong size on FFortPlayerSurveyCMSDataConditionSeasonNumber");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataConditionTimesCompleted
// 0x0020 (0x0028 - 0x0008)
struct FFortPlayerSurveyCMSDataConditionTimesCompleted final : public FFortPlayerSurveyCMSDataConditionBase
{
public:
	struct FFortPlayerSurveyCMSDataRelativeSurveyKey S;                                                 // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	EFortPlayerSurveyCMSDataBinaryComparisonOp    O;                                                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         T;                                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataConditionTimesCompleted) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataConditionTimesCompleted");
static_assert(sizeof(FFortPlayerSurveyCMSDataConditionTimesCompleted) == 0x000028, "Wrong size on FFortPlayerSurveyCMSDataConditionTimesCompleted");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionTimesCompleted, S) == 0x000008, "Member 'FFortPlayerSurveyCMSDataConditionTimesCompleted::S' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionTimesCompleted, O) == 0x000020, "Member 'FFortPlayerSurveyCMSDataConditionTimesCompleted::O' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataConditionTimesCompleted, T) == 0x000024, "Member 'FFortPlayerSurveyCMSDataConditionTimesCompleted::T' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataQuestion
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortPlayerSurveyCMSDataQuestion final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyCMSDataQuestion) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataQuestion");
static_assert(sizeof(FFortPlayerSurveyCMSDataQuestion) == 0x000010, "Wrong size on FFortPlayerSurveyCMSDataQuestion");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataQuestionFreeFormText
// 0x0020 (0x0048 - 0x0028)
struct FFortPlayerSurveyCMSDataQuestionFreeFormText final : public FFortPlayerSurveyCMSDataQuestionStandardBase
{
public:
	class FText                                   Ht;                                                // 0x0028(0x0018)(NativeAccessSpecifierPublic)
	bool                                          R;                                                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L;                                                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataQuestionFreeFormText) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataQuestionFreeFormText");
static_assert(sizeof(FFortPlayerSurveyCMSDataQuestionFreeFormText) == 0x000048, "Wrong size on FFortPlayerSurveyCMSDataQuestionFreeFormText");
static_assert(offsetof(FFortPlayerSurveyCMSDataQuestionFreeFormText, Ht) == 0x000028, "Member 'FFortPlayerSurveyCMSDataQuestionFreeFormText::Ht' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataQuestionFreeFormText, R) == 0x000040, "Member 'FFortPlayerSurveyCMSDataQuestionFreeFormText::R' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataQuestionFreeFormText, L) == 0x000044, "Member 'FFortPlayerSurveyCMSDataQuestionFreeFormText::L' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataQuestionMultipleSelection
// 0x0018 (0x0040 - 0x0028)
struct FFortPlayerSurveyCMSDataQuestionMultipleSelection final : public FFortPlayerSurveyCMSDataQuestionStandardBase
{
public:
	TArray<struct FFortPlayerSurveyCMSDataQuestionChoice> C;                                                 // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Mn;                                                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mx;                                                // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataQuestionMultipleSelection) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataQuestionMultipleSelection");
static_assert(sizeof(FFortPlayerSurveyCMSDataQuestionMultipleSelection) == 0x000040, "Wrong size on FFortPlayerSurveyCMSDataQuestionMultipleSelection");
static_assert(offsetof(FFortPlayerSurveyCMSDataQuestionMultipleSelection, C) == 0x000028, "Member 'FFortPlayerSurveyCMSDataQuestionMultipleSelection::C' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataQuestionMultipleSelection, Mn) == 0x000038, "Member 'FFortPlayerSurveyCMSDataQuestionMultipleSelection::Mn' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataQuestionMultipleSelection, Mx) == 0x00003C, "Member 'FFortPlayerSurveyCMSDataQuestionMultipleSelection::Mx' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSDataRoot
// 0x0028 (0x0028 - 0x0000)
struct FFortPlayerSurveyCMSDataRoot final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortPlayerSurveyCMSDataConditionGroup> Cg;                                                // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortPlayerSurveyCMSDataSurvey> S;                                                 // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSDataRoot) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSDataRoot");
static_assert(sizeof(FFortPlayerSurveyCMSDataRoot) == 0x000028, "Wrong size on FFortPlayerSurveyCMSDataRoot");
static_assert(offsetof(FFortPlayerSurveyCMSDataRoot, E) == 0x000000, "Member 'FFortPlayerSurveyCMSDataRoot::E' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataRoot, Cg) == 0x000008, "Member 'FFortPlayerSurveyCMSDataRoot::Cg' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSDataRoot, S) == 0x000018, "Member 'FFortPlayerSurveyCMSDataRoot::S' has a wrong offset!");

// ScriptStruct FortniteUI.PlatformSupportDesc
// 0x0020 (0x0020 - 0x0000)
struct FPlatformSupportDesc final
{
public:
	class FText                                   DisableDesc;                                       // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	EFortLoginAccountType                         AccountType;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlatformSupportDesc) == 0x000008, "Wrong alignment on FPlatformSupportDesc");
static_assert(sizeof(FPlatformSupportDesc) == 0x000020, "Wrong size on FPlatformSupportDesc");
static_assert(offsetof(FPlatformSupportDesc, DisableDesc) == 0x000000, "Member 'FPlatformSupportDesc::DisableDesc' has a wrong offset!");
static_assert(offsetof(FPlatformSupportDesc, AccountType) == 0x000018, "Member 'FPlatformSupportDesc::AccountType' has a wrong offset!");

// ScriptStruct FortniteUI.FortRichTextStyleData
// 0x0270 (0x0278 - 0x0008)
struct FFortRichTextStyleData final : public FTableRowBase
{
public:
	struct FTextBlockStyle                        TextStyle;                                         // 0x0008(0x0268)(Edit, NativeAccessSpecifierPublic)
	bool                                          bHyperlinkStyle;                                   // 0x0270(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRichTextStyleData) == 0x000008, "Wrong alignment on FFortRichTextStyleData");
static_assert(sizeof(FFortRichTextStyleData) == 0x000278, "Wrong size on FFortRichTextStyleData");
static_assert(offsetof(FFortRichTextStyleData, TextStyle) == 0x000008, "Member 'FFortRichTextStyleData::TextStyle' has a wrong offset!");
static_assert(offsetof(FFortRichTextStyleData, bHyperlinkStyle) == 0x000270, "Member 'FFortRichTextStyleData::bHyperlinkStyle' has a wrong offset!");

// ScriptStruct FortniteUI.FortEventStyleInfo
// 0x00A0 (0x00A8 - 0x0008)
struct FFortEventStyleInfo final : public FTableRowBase
{
public:
	struct FLinearColor                           BaseColor;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PrimaryColor;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HighlightColor;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TitleColor;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundLeftColor;                               // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundRightColor;                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundTextColor;                               // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PosterFadeColor;                                   // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEventStyleInfo) == 0x000008, "Wrong alignment on FFortEventStyleInfo");
static_assert(sizeof(FFortEventStyleInfo) == 0x0000A8, "Wrong size on FFortEventStyleInfo");
static_assert(offsetof(FFortEventStyleInfo, BaseColor) == 0x000008, "Member 'FFortEventStyleInfo::BaseColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, PrimaryColor) == 0x000018, "Member 'FFortEventStyleInfo::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, SecondaryColor) == 0x000028, "Member 'FFortEventStyleInfo::SecondaryColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, HighlightColor) == 0x000038, "Member 'FFortEventStyleInfo::HighlightColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, TitleColor) == 0x000048, "Member 'FFortEventStyleInfo::TitleColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, ShadowColor) == 0x000058, "Member 'FFortEventStyleInfo::ShadowColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, BackgroundLeftColor) == 0x000068, "Member 'FFortEventStyleInfo::BackgroundLeftColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, BackgroundRightColor) == 0x000078, "Member 'FFortEventStyleInfo::BackgroundRightColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, BackgroundTextColor) == 0x000088, "Member 'FFortEventStyleInfo::BackgroundTextColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, PosterFadeColor) == 0x000098, "Member 'FFortEventStyleInfo::PosterFadeColor' has a wrong offset!");

// ScriptStruct FortniteUI.FortTournamentDisplayInfo
// 0x0168 (0x0170 - 0x0008)
struct FFortTournamentDisplayInfo final : public FTableRowBase
{
public:
	class FText                                   TitleLine1;                                        // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TitleLine2;                                        // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ScheduleInfo;                                      // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FlavorDescription;                                 // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DetailsDescription;                                // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ShortFormatTitle;                                  // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   LongFormatTitle;                                   // 0x0098(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         PinScoreRequirement;                               // 0x00B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PinEarnedText;                                     // 0x00B8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColor;                                         // 0x00D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PrimaryColor;                                      // 0x00E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HighlightColor;                                    // 0x0100(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TitleColor;                                        // 0x0110(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0120(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundLeftColor;                               // 0x0130(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundRightColor;                              // 0x0140(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundTextColor;                               // 0x0150(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PosterFadeColor;                                   // 0x0160(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTournamentDisplayInfo) == 0x000008, "Wrong alignment on FFortTournamentDisplayInfo");
static_assert(sizeof(FFortTournamentDisplayInfo) == 0x000170, "Wrong size on FFortTournamentDisplayInfo");
static_assert(offsetof(FFortTournamentDisplayInfo, TitleLine1) == 0x000008, "Member 'FFortTournamentDisplayInfo::TitleLine1' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, TitleLine2) == 0x000020, "Member 'FFortTournamentDisplayInfo::TitleLine2' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, ScheduleInfo) == 0x000038, "Member 'FFortTournamentDisplayInfo::ScheduleInfo' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, FlavorDescription) == 0x000050, "Member 'FFortTournamentDisplayInfo::FlavorDescription' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, DetailsDescription) == 0x000068, "Member 'FFortTournamentDisplayInfo::DetailsDescription' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, ShortFormatTitle) == 0x000080, "Member 'FFortTournamentDisplayInfo::ShortFormatTitle' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, LongFormatTitle) == 0x000098, "Member 'FFortTournamentDisplayInfo::LongFormatTitle' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, PinScoreRequirement) == 0x0000B0, "Member 'FFortTournamentDisplayInfo::PinScoreRequirement' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, PinEarnedText) == 0x0000B8, "Member 'FFortTournamentDisplayInfo::PinEarnedText' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, BaseColor) == 0x0000D0, "Member 'FFortTournamentDisplayInfo::BaseColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, PrimaryColor) == 0x0000E0, "Member 'FFortTournamentDisplayInfo::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, SecondaryColor) == 0x0000F0, "Member 'FFortTournamentDisplayInfo::SecondaryColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, HighlightColor) == 0x000100, "Member 'FFortTournamentDisplayInfo::HighlightColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, TitleColor) == 0x000110, "Member 'FFortTournamentDisplayInfo::TitleColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, ShadowColor) == 0x000120, "Member 'FFortTournamentDisplayInfo::ShadowColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, BackgroundLeftColor) == 0x000130, "Member 'FFortTournamentDisplayInfo::BackgroundLeftColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, BackgroundRightColor) == 0x000140, "Member 'FFortTournamentDisplayInfo::BackgroundRightColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, BackgroundTextColor) == 0x000150, "Member 'FFortTournamentDisplayInfo::BackgroundTextColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, PosterFadeColor) == 0x000160, "Member 'FFortTournamentDisplayInfo::PosterFadeColor' has a wrong offset!");

// ScriptStruct FortniteUI.FortShowdownScoringRuleDisplayInfo
// 0x0040 (0x0048 - 0x0008)
struct FFortShowdownScoringRuleDisplayInfo final : public FTableRowBase
{
public:
	class FText                                   Description;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortShowdownScoringRuleDisplayInfo) == 0x000008, "Wrong alignment on FFortShowdownScoringRuleDisplayInfo");
static_assert(sizeof(FFortShowdownScoringRuleDisplayInfo) == 0x000048, "Wrong size on FFortShowdownScoringRuleDisplayInfo");
static_assert(offsetof(FFortShowdownScoringRuleDisplayInfo, Description) == 0x000008, "Member 'FFortShowdownScoringRuleDisplayInfo::Description' has a wrong offset!");
static_assert(offsetof(FFortShowdownScoringRuleDisplayInfo, Icon) == 0x000020, "Member 'FFortShowdownScoringRuleDisplayInfo::Icon' has a wrong offset!");

// ScriptStruct FortniteUI.FortShowdownEventBestResultsSummary
// 0x0018 (0x0018 - 0x0000)
struct FFortShowdownEventBestResultsSummary final
{
public:
	int32                                         TotalScore;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchesPlayed;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumVictoryRoyales;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlacementPoints;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EliminationPoints;                                 // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryFeePoints;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortShowdownEventBestResultsSummary) == 0x000004, "Wrong alignment on FFortShowdownEventBestResultsSummary");
static_assert(sizeof(FFortShowdownEventBestResultsSummary) == 0x000018, "Wrong size on FFortShowdownEventBestResultsSummary");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, TotalScore) == 0x000000, "Member 'FFortShowdownEventBestResultsSummary::TotalScore' has a wrong offset!");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, MatchesPlayed) == 0x000004, "Member 'FFortShowdownEventBestResultsSummary::MatchesPlayed' has a wrong offset!");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, NumVictoryRoyales) == 0x000008, "Member 'FFortShowdownEventBestResultsSummary::NumVictoryRoyales' has a wrong offset!");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, PlacementPoints) == 0x00000C, "Member 'FFortShowdownEventBestResultsSummary::PlacementPoints' has a wrong offset!");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, EliminationPoints) == 0x000010, "Member 'FFortShowdownEventBestResultsSummary::EliminationPoints' has a wrong offset!");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, EntryFeePoints) == 0x000014, "Member 'FFortShowdownEventBestResultsSummary::EntryFeePoints' has a wrong offset!");

// ScriptStruct FortniteUI.FortUserListHeaderInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortUserListHeaderInfo final
{
public:
	class USocialUserListHeader*                  ListHeader;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSocialUserTreeView*                OwningTreeView;                                    // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUserListHeaderInfo) == 0x000008, "Wrong alignment on FFortUserListHeaderInfo");
static_assert(sizeof(FFortUserListHeaderInfo) == 0x000018, "Wrong size on FFortUserListHeaderInfo");
static_assert(offsetof(FFortUserListHeaderInfo, ListHeader) == 0x000000, "Member 'FFortUserListHeaderInfo::ListHeader' has a wrong offset!");
static_assert(offsetof(FFortUserListHeaderInfo, OwningTreeView) == 0x000008, "Member 'FFortUserListHeaderInfo::OwningTreeView' has a wrong offset!");

// ScriptStruct FortniteUI.PotentialSpectatorTarget
// 0x0010 (0x0010 - 0x0000)
struct FPotentialSpectatorTarget final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPlayerStateAthena>  PlayerState;                                       // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrentViewTarget;                                // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPotentialSpectatorTarget) == 0x000004, "Wrong alignment on FPotentialSpectatorTarget");
static_assert(sizeof(FPotentialSpectatorTarget) == 0x000010, "Wrong size on FPotentialSpectatorTarget");
static_assert(offsetof(FPotentialSpectatorTarget, Rank) == 0x000000, "Member 'FPotentialSpectatorTarget::Rank' has a wrong offset!");
static_assert(offsetof(FPotentialSpectatorTarget, PlayerState) == 0x000004, "Member 'FPotentialSpectatorTarget::PlayerState' has a wrong offset!");
static_assert(offsetof(FPotentialSpectatorTarget, bCurrentViewTarget) == 0x00000C, "Member 'FPotentialSpectatorTarget::bCurrentViewTarget' has a wrong offset!");

// ScriptStruct FortniteUI.FortAttributeModifierAccumulation
// 0x0030 (0x0030 - 0x0000)
struct FFortAttributeModifierAccumulation final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModifierOp;                                        // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Magnitude;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAttributeModifierAccumulation) == 0x000008, "Wrong alignment on FFortAttributeModifierAccumulation");
static_assert(sizeof(FFortAttributeModifierAccumulation) == 0x000030, "Wrong size on FFortAttributeModifierAccumulation");
static_assert(offsetof(FFortAttributeModifierAccumulation, GameplayTag) == 0x000000, "Member 'FFortAttributeModifierAccumulation::GameplayTag' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierAccumulation, Attribute) == 0x000008, "Member 'FFortAttributeModifierAccumulation::Attribute' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierAccumulation, ModifierOp) == 0x000028, "Member 'FFortAttributeModifierAccumulation::ModifierOp' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierAccumulation, Magnitude) == 0x00002C, "Member 'FFortAttributeModifierAccumulation::Magnitude' has a wrong offset!");

// ScriptStruct FortniteUI.OpenedCardPack
// 0x0010 (0x0010 - 0x0000)
struct FOpenedCardPack final
{
public:
	class UFortCardPackItemDefinition*            CardPackDefinition;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayLevel;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOpenedCardPack) == 0x000008, "Wrong alignment on FOpenedCardPack");
static_assert(sizeof(FOpenedCardPack) == 0x000010, "Wrong size on FOpenedCardPack");
static_assert(offsetof(FOpenedCardPack, CardPackDefinition) == 0x000000, "Member 'FOpenedCardPack::CardPackDefinition' has a wrong offset!");
static_assert(offsetof(FOpenedCardPack, DisplayLevel) == 0x000008, "Member 'FOpenedCardPack::DisplayLevel' has a wrong offset!");

// ScriptStruct FortniteUI.Card
// 0x0018 (0x0018 - 0x0000)
struct FCard final
{
public:
	int32                                         QuantityReceived;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPauseType                                    PauseType;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCard) == 0x000008, "Wrong alignment on FCard");
static_assert(sizeof(FCard) == 0x000018, "Wrong size on FCard");
static_assert(offsetof(FCard, QuantityReceived) == 0x000000, "Member 'FCard::QuantityReceived' has a wrong offset!");
static_assert(offsetof(FCard, Item) == 0x000008, "Member 'FCard::Item' has a wrong offset!");
static_assert(offsetof(FCard, PauseType) == 0x000010, "Member 'FCard::PauseType' has a wrong offset!");

// ScriptStruct FortniteUI.FortToastDisplayInfo
// 0x0060 (0x0060 - 0x0000)
struct FFortToastDisplayInfo final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0030(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortToastType                                Type;                                              // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortToastDisplayInfo) == 0x000008, "Wrong alignment on FFortToastDisplayInfo");
static_assert(sizeof(FFortToastDisplayInfo) == 0x000060, "Wrong size on FFortToastDisplayInfo");
static_assert(offsetof(FFortToastDisplayInfo, Header) == 0x000000, "Member 'FFortToastDisplayInfo::Header' has a wrong offset!");
static_assert(offsetof(FFortToastDisplayInfo, Body) == 0x000018, "Member 'FFortToastDisplayInfo::Body' has a wrong offset!");
static_assert(offsetof(FFortToastDisplayInfo, Image) == 0x000030, "Member 'FFortToastDisplayInfo::Image' has a wrong offset!");
static_assert(offsetof(FFortToastDisplayInfo, Type) == 0x000058, "Member 'FFortToastDisplayInfo::Type' has a wrong offset!");

// ScriptStruct FortniteUI.StoreCallout
// 0x0090 (0x0090 - 0x0000)
struct FStoreCallout final
{
public:
	struct FFortToastDisplayInfo                  ToastDisplayInfo;                                  // 0x0000(0x0060)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ItemName;                                          // 0x0060(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   ItemSet;                                           // 0x0078(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreCallout) == 0x000008, "Wrong alignment on FStoreCallout");
static_assert(sizeof(FStoreCallout) == 0x000090, "Wrong size on FStoreCallout");
static_assert(offsetof(FStoreCallout, ToastDisplayInfo) == 0x000000, "Member 'FStoreCallout::ToastDisplayInfo' has a wrong offset!");
static_assert(offsetof(FStoreCallout, ItemName) == 0x000060, "Member 'FStoreCallout::ItemName' has a wrong offset!");
static_assert(offsetof(FStoreCallout, ItemSet) == 0x000078, "Member 'FStoreCallout::ItemSet' has a wrong offset!");

// ScriptStruct FortniteUI.FortSurvivorSquadSlottingFeedbackData
// 0x00B0 (0x00B0 - 0x0000)
struct FFortSurvivorSquadSlottingFeedbackData final
{
public:
	bool                                          HadLeaderMatch;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasLeaderMatch;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, int32>              PreviousSetBonusCounts;                            // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, int32>              CurrentSetBonusCounts;                             // 0x0058(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PreviousPersonalityMatchCount;                     // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPersonalityMatchCount;                      // 0x00AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSurvivorSquadSlottingFeedbackData) == 0x000008, "Wrong alignment on FFortSurvivorSquadSlottingFeedbackData");
static_assert(sizeof(FFortSurvivorSquadSlottingFeedbackData) == 0x0000B0, "Wrong size on FFortSurvivorSquadSlottingFeedbackData");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, HadLeaderMatch) == 0x000000, "Member 'FFortSurvivorSquadSlottingFeedbackData::HadLeaderMatch' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, HasLeaderMatch) == 0x000001, "Member 'FFortSurvivorSquadSlottingFeedbackData::HasLeaderMatch' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, PreviousSetBonusCounts) == 0x000008, "Member 'FFortSurvivorSquadSlottingFeedbackData::PreviousSetBonusCounts' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, CurrentSetBonusCounts) == 0x000058, "Member 'FFortSurvivorSquadSlottingFeedbackData::CurrentSetBonusCounts' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, PreviousPersonalityMatchCount) == 0x0000A8, "Member 'FFortSurvivorSquadSlottingFeedbackData::PreviousPersonalityMatchCount' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, CurrentPersonalityMatchCount) == 0x0000AC, "Member 'FFortSurvivorSquadSlottingFeedbackData::CurrentPersonalityMatchCount' has a wrong offset!");

// ScriptStruct FortniteUI.FortSurvivorSquadSelectorButtonPersonalityMatches
// 0x0340 (0x0340 - 0x0000)
struct FFortSurvivorSquadSelectorButtonPersonalityMatches final
{
public:
	int32                                         NumPersonalityMatches;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNonLeaderSquadMembers;                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HavePersonalityIcons;                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMultiSizeBrush                    PersonalityIcons;                                  // 0x0010(0x0330)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSurvivorSquadSelectorButtonPersonalityMatches) == 0x000008, "Wrong alignment on FFortSurvivorSquadSelectorButtonPersonalityMatches");
static_assert(sizeof(FFortSurvivorSquadSelectorButtonPersonalityMatches) == 0x000340, "Wrong size on FFortSurvivorSquadSelectorButtonPersonalityMatches");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonPersonalityMatches, NumPersonalityMatches) == 0x000000, "Member 'FFortSurvivorSquadSelectorButtonPersonalityMatches::NumPersonalityMatches' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonPersonalityMatches, TotalNonLeaderSquadMembers) == 0x000004, "Member 'FFortSurvivorSquadSelectorButtonPersonalityMatches::TotalNonLeaderSquadMembers' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonPersonalityMatches, HavePersonalityIcons) == 0x000008, "Member 'FFortSurvivorSquadSelectorButtonPersonalityMatches::HavePersonalityIcons' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonPersonalityMatches, PersonalityIcons) == 0x000010, "Member 'FFortSurvivorSquadSelectorButtonPersonalityMatches::PersonalityIcons' has a wrong offset!");

// ScriptStruct FortniteUI.FortSurvivorSquadSelectorButtonSummaryStats
// 0x0070 (0x0070 - 0x0000)
struct FFortSurvivorSquadSelectorButtonSummaryStats final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     FortAttribute;                                     // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FortAttributeValue;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     FortTeamAttribute;                                 // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamFortAttributeValue;                            // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SquadPowerValue;                                   // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FortAttributeName;                                 // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSurvivorSquadSelectorButtonSummaryStats) == 0x000008, "Wrong alignment on FFortSurvivorSquadSelectorButtonSummaryStats");
static_assert(sizeof(FFortSurvivorSquadSelectorButtonSummaryStats) == 0x000070, "Wrong size on FFortSurvivorSquadSelectorButtonSummaryStats");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, SquadId) == 0x000000, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::SquadId' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, FortAttribute) == 0x000008, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::FortAttribute' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, FortAttributeValue) == 0x000028, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::FortAttributeValue' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, FortTeamAttribute) == 0x000030, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::FortTeamAttribute' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, TeamFortAttributeValue) == 0x000050, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::TeamFortAttributeValue' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, SquadPowerValue) == 0x000054, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::SquadPowerValue' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, FortAttributeName) == 0x000058, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::FortAttributeName' has a wrong offset!");

// ScriptStruct FortniteUI.FortSwipeDetector
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FFortSwipeDetector final
{
public:
	struct FVector2D                              SwipeThreshold;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x68];                                       // 0x0008(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSwipeDetector) == 0x000008, "Wrong alignment on FFortSwipeDetector");
static_assert(sizeof(FFortSwipeDetector) == 0x000070, "Wrong size on FFortSwipeDetector");
static_assert(offsetof(FFortSwipeDetector, SwipeThreshold) == 0x000000, "Member 'FFortSwipeDetector::SwipeThreshold' has a wrong offset!");

// ScriptStruct FortniteUI.CachedComponentMaterials
// 0x0018 (0x0018 - 0x0000)
struct FCachedComponentMaterials final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             OriginalMaterials;                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedComponentMaterials) == 0x000008, "Wrong alignment on FCachedComponentMaterials");
static_assert(sizeof(FCachedComponentMaterials) == 0x000018, "Wrong size on FCachedComponentMaterials");
static_assert(offsetof(FCachedComponentMaterials, OriginalMaterials) == 0x000008, "Member 'FCachedComponentMaterials::OriginalMaterials' has a wrong offset!");

// ScriptStruct FortniteUI.TouchMove
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FTouchMove final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTouchMove) == 0x000004, "Wrong alignment on FTouchMove");
static_assert(sizeof(FTouchMove) == 0x00000C, "Wrong size on FTouchMove");

// ScriptStruct FortniteUI.FortItemTransformFilterTabLabelInfo
// 0x00C0 (0x00C0 - 0x0000)
struct FFortItemTransformFilterTabLabelInfo final
{
public:
	class FName                                   FilterTabNameId;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTabButtonLabelInfo                TabButtonLabelInfo;                                // 0x0008(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<EFortInventoryFilter>                  ItemFilters;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EFortItemType                                 ItemType;                                          // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemTransformFilterTabLabelInfo) == 0x000008, "Wrong alignment on FFortItemTransformFilterTabLabelInfo");
static_assert(sizeof(FFortItemTransformFilterTabLabelInfo) == 0x0000C0, "Wrong size on FFortItemTransformFilterTabLabelInfo");
static_assert(offsetof(FFortItemTransformFilterTabLabelInfo, FilterTabNameId) == 0x000000, "Member 'FFortItemTransformFilterTabLabelInfo::FilterTabNameId' has a wrong offset!");
static_assert(offsetof(FFortItemTransformFilterTabLabelInfo, TabButtonLabelInfo) == 0x000008, "Member 'FFortItemTransformFilterTabLabelInfo::TabButtonLabelInfo' has a wrong offset!");
static_assert(offsetof(FFortItemTransformFilterTabLabelInfo, ItemFilters) == 0x0000A8, "Member 'FFortItemTransformFilterTabLabelInfo::ItemFilters' has a wrong offset!");
static_assert(offsetof(FFortItemTransformFilterTabLabelInfo, ItemType) == 0x0000B8, "Member 'FFortItemTransformFilterTabLabelInfo::ItemType' has a wrong offset!");

// ScriptStruct FortniteUI.StateWidgetEntry
// 0x0030 (0x0030 - 0x0000)
struct FStateWidgetEntry final
{
public:
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortNamedBundle                              Bundle;                                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateWidgetEntry) == 0x000008, "Wrong alignment on FStateWidgetEntry");
static_assert(sizeof(FStateWidgetEntry) == 0x000030, "Wrong size on FStateWidgetEntry");
static_assert(offsetof(FStateWidgetEntry, Class) == 0x000000, "Member 'FStateWidgetEntry::Class' has a wrong offset!");
static_assert(offsetof(FStateWidgetEntry, Bundle) == 0x000028, "Member 'FStateWidgetEntry::Bundle' has a wrong offset!");

// ScriptStruct FortniteUI.FortUINavigationOperation
// 0x0030 (0x0030 - 0x0000)
struct FFortUINavigationOperation final
{
public:
	EFortUINavigationOp                           Operation;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SquadId;                                           // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PageId;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NodeId;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              Item;                                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeature                                Feature;                                           // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontendInventoryFilter                  ItemManagementFilter;                              // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUINavigationOperation) == 0x000008, "Wrong alignment on FFortUINavigationOperation");
static_assert(sizeof(FFortUINavigationOperation) == 0x000030, "Wrong size on FFortUINavigationOperation");
static_assert(offsetof(FFortUINavigationOperation, Operation) == 0x000000, "Member 'FFortUINavigationOperation::Operation' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, SquadId) == 0x000004, "Member 'FFortUINavigationOperation::SquadId' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, SquadSlotIndex) == 0x00000C, "Member 'FFortUINavigationOperation::SquadSlotIndex' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, PageId) == 0x000010, "Member 'FFortUINavigationOperation::PageId' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, NodeId) == 0x000018, "Member 'FFortUINavigationOperation::NodeId' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, Item) == 0x000020, "Member 'FFortUINavigationOperation::Item' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, Feature) == 0x000028, "Member 'FFortUINavigationOperation::Feature' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, ItemManagementFilter) == 0x000029, "Member 'FFortUINavigationOperation::ItemManagementFilter' has a wrong offset!");

// ScriptStruct FortniteUI.FortUINavigationRequest
// 0x0010 (0x0010 - 0x0000)
struct FFortUINavigationRequest final
{
public:
	TArray<struct FFortUINavigationOperation>     Operations;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUINavigationRequest) == 0x000008, "Wrong alignment on FFortUINavigationRequest");
static_assert(sizeof(FFortUINavigationRequest) == 0x000010, "Wrong size on FFortUINavigationRequest");
static_assert(offsetof(FFortUINavigationRequest, Operations) == 0x000000, "Member 'FFortUINavigationRequest::Operations' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIPickerTrapSortScores
// 0x0018 (0x0018 - 0x0000)
struct FFortUIPickerTrapSortScores final
{
public:
	float                                         UniqueTrapBonus;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlottedBonus;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FavoriteBonus;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PinnedBonus;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTrackedTrapBonusTime;                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackedTrapBonusMultiplier;                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIPickerTrapSortScores) == 0x000004, "Wrong alignment on FFortUIPickerTrapSortScores");
static_assert(sizeof(FFortUIPickerTrapSortScores) == 0x000018, "Wrong size on FFortUIPickerTrapSortScores");
static_assert(offsetof(FFortUIPickerTrapSortScores, UniqueTrapBonus) == 0x000000, "Member 'FFortUIPickerTrapSortScores::UniqueTrapBonus' has a wrong offset!");
static_assert(offsetof(FFortUIPickerTrapSortScores, SlottedBonus) == 0x000004, "Member 'FFortUIPickerTrapSortScores::SlottedBonus' has a wrong offset!");
static_assert(offsetof(FFortUIPickerTrapSortScores, FavoriteBonus) == 0x000008, "Member 'FFortUIPickerTrapSortScores::FavoriteBonus' has a wrong offset!");
static_assert(offsetof(FFortUIPickerTrapSortScores, PinnedBonus) == 0x00000C, "Member 'FFortUIPickerTrapSortScores::PinnedBonus' has a wrong offset!");
static_assert(offsetof(FFortUIPickerTrapSortScores, MaxTrackedTrapBonusTime) == 0x000010, "Member 'FFortUIPickerTrapSortScores::MaxTrackedTrapBonusTime' has a wrong offset!");
static_assert(offsetof(FFortUIPickerTrapSortScores, TrackedTrapBonusMultiplier) == 0x000014, "Member 'FFortUIPickerTrapSortScores::TrackedTrapBonusMultiplier' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIStyleWindowButtons
// 0x09E0 (0x09E0 - 0x0000)
struct FFortUIStyleWindowButtons final
{
public:
	struct FButtonStyle                           Close;                                             // 0x0000(0x0278)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           Minimize;                                          // 0x0278(0x0278)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           Maximize;                                          // 0x04F0(0x0278)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           Restore;                                           // 0x0768(0x0278)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIStyleWindowButtons) == 0x000008, "Wrong alignment on FFortUIStyleWindowButtons");
static_assert(sizeof(FFortUIStyleWindowButtons) == 0x0009E0, "Wrong size on FFortUIStyleWindowButtons");
static_assert(offsetof(FFortUIStyleWindowButtons, Close) == 0x000000, "Member 'FFortUIStyleWindowButtons::Close' has a wrong offset!");
static_assert(offsetof(FFortUIStyleWindowButtons, Minimize) == 0x000278, "Member 'FFortUIStyleWindowButtons::Minimize' has a wrong offset!");
static_assert(offsetof(FFortUIStyleWindowButtons, Maximize) == 0x0004F0, "Member 'FFortUIStyleWindowButtons::Maximize' has a wrong offset!");
static_assert(offsetof(FFortUIStyleWindowButtons, Restore) == 0x000768, "Member 'FFortUIStyleWindowButtons::Restore' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIStyleDefinition
// 0x09E0 (0x09E0 - 0x0000)
struct FFortUIStyleDefinition final
{
public:
	struct FFortUIStyleWindowButtons              WindowButtons;                                     // 0x0000(0x09E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIStyleDefinition) == 0x000008, "Wrong alignment on FFortUIStyleDefinition");
static_assert(sizeof(FFortUIStyleDefinition) == 0x0009E0, "Wrong size on FFortUIStyleDefinition");
static_assert(offsetof(FFortUIStyleDefinition, WindowButtons) == 0x000000, "Member 'FFortUIStyleDefinition::WindowButtons' has a wrong offset!");

// ScriptStruct FortniteUI.FortSquadIconData
// 0x0330 (0x0338 - 0x0008)
struct FFortSquadIconData final : public FTableRowBase
{
public:
	struct FFortMultiSizeBrush                    Brush;                                             // 0x0008(0x0330)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSquadIconData) == 0x000008, "Wrong alignment on FFortSquadIconData");
static_assert(sizeof(FFortSquadIconData) == 0x000338, "Wrong size on FFortSquadIconData");
static_assert(offsetof(FFortSquadIconData, Brush) == 0x000008, "Member 'FFortSquadIconData::Brush' has a wrong offset!");

// ScriptStruct FortniteUI.FortDisplayAttribute
// 0x0070 (0x0070 - 0x0000)
struct FFortDisplayAttribute final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0020)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Label;                                             // 0x0020(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0038(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   HoverText;                                         // 0x0050(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         NumericValue;                                      // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortStatValueDisplayType                     DisplayType;                                       // 0x006C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuffState                                BuffState;                                         // 0x006D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortClampState                               ClampState;                                        // 0x006E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortComparisonType                           ComparisonType;                                    // 0x006F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDisplayAttribute) == 0x000008, "Wrong alignment on FFortDisplayAttribute");
static_assert(sizeof(FFortDisplayAttribute) == 0x000070, "Wrong size on FFortDisplayAttribute");
static_assert(offsetof(FFortDisplayAttribute, Attribute) == 0x000000, "Member 'FFortDisplayAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, Label) == 0x000020, "Member 'FFortDisplayAttribute::Label' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, Value) == 0x000038, "Member 'FFortDisplayAttribute::Value' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, HoverText) == 0x000050, "Member 'FFortDisplayAttribute::HoverText' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, NumericValue) == 0x000068, "Member 'FFortDisplayAttribute::NumericValue' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, DisplayType) == 0x00006C, "Member 'FFortDisplayAttribute::DisplayType' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, BuffState) == 0x00006D, "Member 'FFortDisplayAttribute::BuffState' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, ClampState) == 0x00006E, "Member 'FFortDisplayAttribute::ClampState' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, ComparisonType) == 0x00006F, "Member 'FFortDisplayAttribute::ComparisonType' has a wrong offset!");

// ScriptStruct FortniteUI.FortDisplayModifier
// 0x0038 (0x0038 - 0x0000)
struct FFortDisplayModifier final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	EFortStatValueDisplayType                     DisplayType;                                       // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuffState                                BuffState;                                         // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDisplayModifier) == 0x000008, "Wrong alignment on FFortDisplayModifier");
static_assert(sizeof(FFortDisplayModifier) == 0x000038, "Wrong size on FFortDisplayModifier");
static_assert(offsetof(FFortDisplayModifier, Label) == 0x000000, "Member 'FFortDisplayModifier::Label' has a wrong offset!");
static_assert(offsetof(FFortDisplayModifier, Value) == 0x000018, "Member 'FFortDisplayModifier::Value' has a wrong offset!");
static_assert(offsetof(FFortDisplayModifier, DisplayType) == 0x000030, "Member 'FFortDisplayModifier::DisplayType' has a wrong offset!");
static_assert(offsetof(FFortDisplayModifier, BuffState) == 0x000031, "Member 'FFortDisplayModifier::BuffState' has a wrong offset!");

// ScriptStruct FortniteUI.HomebaseNodeDisplayData
// 0x0088 (0x0090 - 0x0008)
struct FHomebaseNodeDisplayData final : public FTableRowBase
{
public:
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LargePreviewImage;                                 // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SmallPreviewImage;                                 // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSource*                           PreviewVideoMediaSource;                           // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseNodeDisplayData) == 0x000008, "Wrong alignment on FHomebaseNodeDisplayData");
static_assert(sizeof(FHomebaseNodeDisplayData) == 0x000090, "Wrong size on FHomebaseNodeDisplayData");
static_assert(offsetof(FHomebaseNodeDisplayData, Title) == 0x000008, "Member 'FHomebaseNodeDisplayData::Title' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeDisplayData, Description) == 0x000020, "Member 'FHomebaseNodeDisplayData::Description' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeDisplayData, LargePreviewImage) == 0x000038, "Member 'FHomebaseNodeDisplayData::LargePreviewImage' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeDisplayData, SmallPreviewImage) == 0x000060, "Member 'FHomebaseNodeDisplayData::SmallPreviewImage' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeDisplayData, PreviewVideoMediaSource) == 0x000088, "Member 'FHomebaseNodeDisplayData::PreviewVideoMediaSource' has a wrong offset!");

// ScriptStruct FortniteUI.FortVideoInfo
// 0x0058 (0x0058 - 0x0000)
struct FFortVideoInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PreviewImage;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSource*                           VideoSource;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalizedOverlays*                     SubtitleOverlays;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsQuestDrivenVideo;                               // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPrimaryAssetId                        RequiredActiveQuest;                               // 0x0024(0x0010)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        RequiredCompletedQuest;                            // 0x0034(0x0010)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    EventMovieQuestObjective;                          // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortVideoInfo) == 0x000008, "Wrong alignment on FFortVideoInfo");
static_assert(sizeof(FFortVideoInfo) == 0x000058, "Wrong size on FFortVideoInfo");
static_assert(offsetof(FFortVideoInfo, ID) == 0x000000, "Member 'FFortVideoInfo::ID' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, PreviewImage) == 0x000008, "Member 'FFortVideoInfo::PreviewImage' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, VideoSource) == 0x000010, "Member 'FFortVideoInfo::VideoSource' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, SubtitleOverlays) == 0x000018, "Member 'FFortVideoInfo::SubtitleOverlays' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, bIsQuestDrivenVideo) == 0x000020, "Member 'FFortVideoInfo::bIsQuestDrivenVideo' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, RequiredActiveQuest) == 0x000024, "Member 'FFortVideoInfo::RequiredActiveQuest' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, RequiredCompletedQuest) == 0x000034, "Member 'FFortVideoInfo::RequiredCompletedQuest' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, EventMovieQuestObjective) == 0x000048, "Member 'FFortVideoInfo::EventMovieQuestObjective' has a wrong offset!");

// ScriptStruct FortniteUI.FortWeaponBoardDisplaySlotItem
// 0x0060 (0x0060 - 0x0000)
struct FFortWeaponBoardDisplaySlotItem final
{
public:
	struct FFortWeaponBoardDisplaySlot            DisplaySlot;                                       // 0x0000(0x0050)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWeaponBoardDisplaySlotItem) == 0x000010, "Wrong alignment on FFortWeaponBoardDisplaySlotItem");
static_assert(sizeof(FFortWeaponBoardDisplaySlotItem) == 0x000060, "Wrong size on FFortWeaponBoardDisplaySlotItem");
static_assert(offsetof(FFortWeaponBoardDisplaySlotItem, DisplaySlot) == 0x000000, "Member 'FFortWeaponBoardDisplaySlotItem::DisplaySlot' has a wrong offset!");

// ScriptStruct FortniteUI.GGCenterDisplayEntry
// 0x0017 (0x0018 - 0x0001)
struct FGGCenterDisplayEntry final : public FFortChangeMonitoringStruct
{
public:
	bool                                          bIsEnabled;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFinal;                                          // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWeaponItemDefinition*              WeaponAt;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayersAtWeapon;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGGCenterDisplayEntry) == 0x000008, "Wrong alignment on FGGCenterDisplayEntry");
static_assert(sizeof(FGGCenterDisplayEntry) == 0x000018, "Wrong size on FGGCenterDisplayEntry");
static_assert(offsetof(FGGCenterDisplayEntry, bIsEnabled) == 0x000001, "Member 'FGGCenterDisplayEntry::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FGGCenterDisplayEntry, bIsFinal) == 0x000002, "Member 'FGGCenterDisplayEntry::bIsFinal' has a wrong offset!");
static_assert(offsetof(FGGCenterDisplayEntry, WeaponAt) == 0x000008, "Member 'FGGCenterDisplayEntry::WeaponAt' has a wrong offset!");
static_assert(offsetof(FGGCenterDisplayEntry, PlayersAtWeapon) == 0x000010, "Member 'FGGCenterDisplayEntry::PlayersAtWeapon' has a wrong offset!");

// ScriptStruct FortniteUI.GoosePickupDisplayData
// 0x0020 (0x0020 - 0x0000)
struct FGoosePickupDisplayData final
{
public:
	class FName                                   ChestName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoosePickupDisplayData) == 0x000008, "Wrong alignment on FGoosePickupDisplayData");
static_assert(sizeof(FGoosePickupDisplayData) == 0x000020, "Wrong size on FGoosePickupDisplayData");
static_assert(offsetof(FGoosePickupDisplayData, ChestName) == 0x000000, "Member 'FGoosePickupDisplayData::ChestName' has a wrong offset!");
static_assert(offsetof(FGoosePickupDisplayData, DisplayText) == 0x000008, "Member 'FGoosePickupDisplayData::DisplayText' has a wrong offset!");

// ScriptStruct FortniteUI.GooseWeaponDisplayData
// 0x0038 (0x0038 - 0x0000)
struct FGooseWeaponDisplayData final
{
public:
	struct FGameplayTag                           WeaponTag;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChestName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     IconMaterial;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGooseWeaponDisplayData) == 0x000008, "Wrong alignment on FGooseWeaponDisplayData");
static_assert(sizeof(FGooseWeaponDisplayData) == 0x000038, "Wrong size on FGooseWeaponDisplayData");
static_assert(offsetof(FGooseWeaponDisplayData, WeaponTag) == 0x000000, "Member 'FGooseWeaponDisplayData::WeaponTag' has a wrong offset!");
static_assert(offsetof(FGooseWeaponDisplayData, ChestName) == 0x000008, "Member 'FGooseWeaponDisplayData::ChestName' has a wrong offset!");
static_assert(offsetof(FGooseWeaponDisplayData, IconTexture) == 0x000010, "Member 'FGooseWeaponDisplayData::IconTexture' has a wrong offset!");
static_assert(offsetof(FGooseWeaponDisplayData, IconMaterial) == 0x000018, "Member 'FGooseWeaponDisplayData::IconMaterial' has a wrong offset!");
static_assert(offsetof(FGooseWeaponDisplayData, DisplayText) == 0x000020, "Member 'FGooseWeaponDisplayData::DisplayText' has a wrong offset!");

// ScriptStruct FortniteUI.HeistBlingIconData
// 0x0008 (0x0008 - 0x0000)
struct FHeistBlingIconData final
{
public:
	int32                                         IconIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeistBlingIconState                          IconState;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeistBlingIconState                          PrevIconState;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeistBlingIconData) == 0x000004, "Wrong alignment on FHeistBlingIconData");
static_assert(sizeof(FHeistBlingIconData) == 0x000008, "Wrong size on FHeistBlingIconData");
static_assert(offsetof(FHeistBlingIconData, IconIndex) == 0x000000, "Member 'FHeistBlingIconData::IconIndex' has a wrong offset!");
static_assert(offsetof(FHeistBlingIconData, IconState) == 0x000004, "Member 'FHeistBlingIconData::IconState' has a wrong offset!");
static_assert(offsetof(FHeistBlingIconData, PrevIconState) == 0x000005, "Member 'FHeistBlingIconData::PrevIconState' has a wrong offset!");

// ScriptStruct FortniteUI.SoundThreshold
// 0x0010 (0x0010 - 0x0000)
struct FSoundThreshold final
{
public:
	class USoundCue*                              SoundCue;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoundThreshold) == 0x000008, "Wrong alignment on FSoundThreshold");
static_assert(sizeof(FSoundThreshold) == 0x000010, "Wrong size on FSoundThreshold");
static_assert(offsetof(FSoundThreshold, SoundCue) == 0x000000, "Member 'FSoundThreshold::SoundCue' has a wrong offset!");
static_assert(offsetof(FSoundThreshold, Threshold) == 0x000008, "Member 'FSoundThreshold::Threshold' has a wrong offset!");

// ScriptStruct FortniteUI.TDMTeamScoreData
// 0x0020 (0x0020 - 0x0000)
struct FTDMTeamScoreData final
{
public:
	class FText                                   CurrScoreText;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         CurrScorePercent;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrScore;                                         // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTDMTeamScoreData) == 0x000008, "Wrong alignment on FTDMTeamScoreData");
static_assert(sizeof(FTDMTeamScoreData) == 0x000020, "Wrong size on FTDMTeamScoreData");
static_assert(offsetof(FTDMTeamScoreData, CurrScoreText) == 0x000000, "Member 'FTDMTeamScoreData::CurrScoreText' has a wrong offset!");
static_assert(offsetof(FTDMTeamScoreData, CurrScorePercent) == 0x000018, "Member 'FTDMTeamScoreData::CurrScorePercent' has a wrong offset!");
static_assert(offsetof(FTDMTeamScoreData, CurrScore) == 0x00001C, "Member 'FTDMTeamScoreData::CurrScore' has a wrong offset!");

// ScriptStruct FortniteUI.WaxPlacementData
// 0x0020 (0x0020 - 0x0000)
struct FWaxPlacementData final
{
public:
	int32                                         Placement;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinCount;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayer;                                         // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaxPlacementData) == 0x000008, "Wrong alignment on FWaxPlacementData");
static_assert(sizeof(FWaxPlacementData) == 0x000020, "Wrong size on FWaxPlacementData");
static_assert(offsetof(FWaxPlacementData, Placement) == 0x000000, "Member 'FWaxPlacementData::Placement' has a wrong offset!");
static_assert(offsetof(FWaxPlacementData, PlayerName) == 0x000008, "Member 'FWaxPlacementData::PlayerName' has a wrong offset!");
static_assert(offsetof(FWaxPlacementData, CoinCount) == 0x000018, "Member 'FWaxPlacementData::CoinCount' has a wrong offset!");
static_assert(offsetof(FWaxPlacementData, bIsPlayer) == 0x00001C, "Member 'FWaxPlacementData::bIsPlayer' has a wrong offset!");

}

