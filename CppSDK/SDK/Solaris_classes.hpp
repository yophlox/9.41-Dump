#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Solaris

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class Solaris.MathLibrary_Bool
// 0x0000 (0x0028 - 0x0028)
class UMathLibrary_Bool final : public UObject
{
public:
	static bool Logical_not(bool Value);
	static bool Logical_xor(bool LHS, bool RHS);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MathLibrary_Bool">();
	}
	static class UMathLibrary_Bool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMathLibrary_Bool>();
	}
};
static_assert(alignof(UMathLibrary_Bool) == 0x000008, "Wrong alignment on UMathLibrary_Bool");
static_assert(sizeof(UMathLibrary_Bool) == 0x000028, "Wrong size on UMathLibrary_Bool");

// Class Solaris.MathLibrary_Int
// 0x0000 (0x0028 - 0x0028)
class UMathLibrary_Int final : public UObject
{
public:
	static int32 Abs(int32 Value);
	static int32 Add(int32 LHS, int32 RHS);
	static int32 Divide(int32 LHS, int32 RHS);
	static bool Equal(int32 LHS, int32 RHS);
	static bool Greater(int32 LHS, int32 RHS);
	static bool Greater_equal(int32 LHS, int32 RHS);
	static bool Less(int32 LHS, int32 RHS);
	static bool Less_equal(int32 LHS, int32 RHS);
	static int32 Max(int32 LHS, int32 RHS);
	static int32 Min(int32 LHS, int32 RHS);
	static int32 Multiply(int32 LHS, int32 RHS);
	static int32 Negate(int32 Value);
	static bool Not_equal(int32 LHS, int32 RHS);
	static int32 Subtract(int32 LHS, int32 RHS);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MathLibrary_Int">();
	}
	static class UMathLibrary_Int* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMathLibrary_Int>();
	}
};
static_assert(alignof(UMathLibrary_Int) == 0x000008, "Wrong alignment on UMathLibrary_Int");
static_assert(sizeof(UMathLibrary_Int) == 0x000028, "Wrong size on UMathLibrary_Int");

// Class Solaris.MathLibrary_Real
// 0x0000 (0x0028 - 0x0028)
class UMathLibrary_Real final : public UObject
{
public:
	static float Abs(float Value);
	static float Add(float LHS, float RHS);
	static float Divide(float LHS, float RHS);
	static bool Equal(float LHS, float RHS);
	static bool Greater(float LHS, float RHS);
	static bool Greater_equal(float LHS, float RHS);
	static bool Less(float LHS, float RHS);
	static bool Less_equal(float LHS, float RHS);
	static float Max(float LHS, float RHS);
	static float Min(float LHS, float RHS);
	static float Multiply(float LHS, float RHS);
	static float Negate(float Value);
	static bool Not_equal(float LHS, float RHS);
	static float Subtract(float LHS, float RHS);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MathLibrary_Real">();
	}
	static class UMathLibrary_Real* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMathLibrary_Real>();
	}
};
static_assert(alignof(UMathLibrary_Real) == 0x000008, "Wrong alignment on UMathLibrary_Real");
static_assert(sizeof(UMathLibrary_Real) == 0x000028, "Wrong size on UMathLibrary_Real");

// Class Solaris.SolarisGameSettings
// 0x0020 (0x0058 - 0x0038)
class USolarisGameSettings final : public UDeveloperSettings
{
public:
	TArray<class FString>                         WhiteList;                                         // 0x0038(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         Blacklist;                                         // 0x0048(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisGameSettings">();
	}
	static class USolarisGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisGameSettings>();
	}
};
static_assert(alignof(USolarisGameSettings) == 0x000008, "Wrong alignment on USolarisGameSettings");
static_assert(sizeof(USolarisGameSettings) == 0x000058, "Wrong size on USolarisGameSettings");
static_assert(offsetof(USolarisGameSettings, WhiteList) == 0x000038, "Member 'USolarisGameSettings::WhiteList' has a wrong offset!");
static_assert(offsetof(USolarisGameSettings, Blacklist) == 0x000048, "Member 'USolarisGameSettings::Blacklist' has a wrong offset!");

// Class Solaris.SolUserWidget
// 0x0030 (0x0258 - 0x0228)
class USolUserWidget final : public UUserWidget
{
public:
	uint8                                         Pad_228[0x30];                                     // 0x0228(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolUserWidget">();
	}
	static class USolUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolUserWidget>();
	}
};
static_assert(alignof(USolUserWidget) == 0x000008, "Wrong alignment on USolUserWidget");
static_assert(sizeof(USolUserWidget) == 0x000258, "Wrong size on USolUserWidget");

}

