#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GAT_ActiveAbility

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GAT_ActiveAbility.GAT_ActiveAbility_C.ExecuteUbergraph_GAT_ActiveAbility
// 0x0004 (0x0004 - 0x0000)
struct GAT_ActiveAbility_C_ExecuteUbergraph_GAT_ActiveAbility final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GAT_ActiveAbility_C_ExecuteUbergraph_GAT_ActiveAbility) == 0x000004, "Wrong alignment on GAT_ActiveAbility_C_ExecuteUbergraph_GAT_ActiveAbility");
static_assert(sizeof(GAT_ActiveAbility_C_ExecuteUbergraph_GAT_ActiveAbility) == 0x000004, "Wrong size on GAT_ActiveAbility_C_ExecuteUbergraph_GAT_ActiveAbility");
static_assert(offsetof(GAT_ActiveAbility_C_ExecuteUbergraph_GAT_ActiveAbility, EntryPoint) == 0x000000, "Member 'GAT_ActiveAbility_C_ExecuteUbergraph_GAT_ActiveAbility::EntryPoint' has a wrong offset!");

// Function GAT_ActiveAbility.GAT_ActiveAbility_C.SetPawnCollision
// 0x0018 (0x0018 - 0x0000)
struct GAT_ActiveAbility_C_SetPawnCollision final
{
public:
	class AFortPawn*                              FortPawn;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CollisionOn;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCollisionProfileName_ReturnValue;      // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GAT_ActiveAbility_C_SetPawnCollision) == 0x000008, "Wrong alignment on GAT_ActiveAbility_C_SetPawnCollision");
static_assert(sizeof(GAT_ActiveAbility_C_SetPawnCollision) == 0x000018, "Wrong size on GAT_ActiveAbility_C_SetPawnCollision");
static_assert(offsetof(GAT_ActiveAbility_C_SetPawnCollision, FortPawn) == 0x000000, "Member 'GAT_ActiveAbility_C_SetPawnCollision::FortPawn' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetPawnCollision, CollisionOn) == 0x000008, "Member 'GAT_ActiveAbility_C_SetPawnCollision::CollisionOn' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetPawnCollision, CallFunc_NotEqual_NameName_ReturnValue) == 0x000009, "Member 'GAT_ActiveAbility_C_SetPawnCollision::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetPawnCollision, CallFunc_GetCollisionProfileName_ReturnValue) == 0x00000C, "Member 'GAT_ActiveAbility_C_SetPawnCollision::CallFunc_GetCollisionProfileName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetPawnCollision, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'GAT_ActiveAbility_C_SetPawnCollision::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GAT_ActiveAbility.GAT_ActiveAbility_C.SetKnockbackImmunity
// 0x0020 (0x0020 - 0x0000)
struct GAT_ActiveAbility_C_SetKnockbackImmunity final
{
public:
	bool                                          ImmunityOn;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue; // 0x0008(0x0010)()
	struct FActiveGameplayEffectHandle            CallFunc_K2_ApplyGameplayEffectSpecToOwner_ReturnValue; // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GAT_ActiveAbility_C_SetKnockbackImmunity) == 0x000008, "Wrong alignment on GAT_ActiveAbility_C_SetKnockbackImmunity");
static_assert(sizeof(GAT_ActiveAbility_C_SetKnockbackImmunity) == 0x000020, "Wrong size on GAT_ActiveAbility_C_SetKnockbackImmunity");
static_assert(offsetof(GAT_ActiveAbility_C_SetKnockbackImmunity, ImmunityOn) == 0x000000, "Member 'GAT_ActiveAbility_C_SetKnockbackImmunity::ImmunityOn' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetKnockbackImmunity, CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue) == 0x000008, "Member 'GAT_ActiveAbility_C_SetKnockbackImmunity::CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetKnockbackImmunity, CallFunc_K2_ApplyGameplayEffectSpecToOwner_ReturnValue) == 0x000018, "Member 'GAT_ActiveAbility_C_SetKnockbackImmunity::CallFunc_K2_ApplyGameplayEffectSpecToOwner_ReturnValue' has a wrong offset!");

// Function GAT_ActiveAbility.GAT_ActiveAbility_C.ActiveAbilitySetup
// 0x0010 (0x0010 - 0x0000)
struct GAT_ActiveAbility_C_ActiveAbilitySetup final
{
public:
	class UAbilitySystemComponent*                AbilitySystemIn;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                AbilitySystemOut;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GAT_ActiveAbility_C_ActiveAbilitySetup) == 0x000008, "Wrong alignment on GAT_ActiveAbility_C_ActiveAbilitySetup");
static_assert(sizeof(GAT_ActiveAbility_C_ActiveAbilitySetup) == 0x000010, "Wrong size on GAT_ActiveAbility_C_ActiveAbilitySetup");
static_assert(offsetof(GAT_ActiveAbility_C_ActiveAbilitySetup, AbilitySystemIn) == 0x000000, "Member 'GAT_ActiveAbility_C_ActiveAbilitySetup::AbilitySystemIn' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_ActiveAbilitySetup, AbilitySystemOut) == 0x000008, "Member 'GAT_ActiveAbility_C_ActiveAbilitySetup::AbilitySystemOut' has a wrong offset!");

// Function GAT_ActiveAbility.GAT_ActiveAbility_C.SetHolsterWeaponWithName
// 0x0030 (0x0030 - 0x0000)
struct GAT_ActiveAbility_C_SetHolsterWeaponWithName final
{
public:
	class AFortPawn*                              Target_Fort_Pawn;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldHolster;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PlayEquipAnim;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowDebugPrintName;                                // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsWeaponHolstered;                                 // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OperationSuccessful;                               // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperationSuccessful;                              // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GAT_ActiveAbility_C_SetHolsterWeaponWithName) == 0x000008, "Wrong alignment on GAT_ActiveAbility_C_SetHolsterWeaponWithName");
static_assert(sizeof(GAT_ActiveAbility_C_SetHolsterWeaponWithName) == 0x000030, "Wrong size on GAT_ActiveAbility_C_SetHolsterWeaponWithName");
static_assert(offsetof(GAT_ActiveAbility_C_SetHolsterWeaponWithName, Target_Fort_Pawn) == 0x000000, "Member 'GAT_ActiveAbility_C_SetHolsterWeaponWithName::Target_Fort_Pawn' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetHolsterWeaponWithName, ShouldHolster) == 0x000008, "Member 'GAT_ActiveAbility_C_SetHolsterWeaponWithName::ShouldHolster' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetHolsterWeaponWithName, PlayEquipAnim) == 0x000009, "Member 'GAT_ActiveAbility_C_SetHolsterWeaponWithName::PlayEquipAnim' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetHolsterWeaponWithName, ShowDebugPrintName) == 0x00000A, "Member 'GAT_ActiveAbility_C_SetHolsterWeaponWithName::ShowDebugPrintName' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetHolsterWeaponWithName, IsWeaponHolstered) == 0x00000B, "Member 'GAT_ActiveAbility_C_SetHolsterWeaponWithName::IsWeaponHolstered' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetHolsterWeaponWithName, OperationSuccessful) == 0x00000C, "Member 'GAT_ActiveAbility_C_SetHolsterWeaponWithName::OperationSuccessful' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetHolsterWeaponWithName, bOperationSuccessful) == 0x00000D, "Member 'GAT_ActiveAbility_C_SetHolsterWeaponWithName::bOperationSuccessful' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetHolsterWeaponWithName, CallFunc_BooleanXOR_ReturnValue) == 0x00000E, "Member 'GAT_ActiveAbility_C_SetHolsterWeaponWithName::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetHolsterWeaponWithName, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'GAT_ActiveAbility_C_SetHolsterWeaponWithName::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetHolsterWeaponWithName, CallFunc_GetClassDisplayName_ReturnValue) == 0x000018, "Member 'GAT_ActiveAbility_C_SetHolsterWeaponWithName::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_SetHolsterWeaponWithName, CallFunc_Conv_StringToName_ReturnValue) == 0x000028, "Member 'GAT_ActiveAbility_C_SetHolsterWeaponWithName::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function GAT_ActiveAbility.GAT_ActiveAbility_C.SendHeroAbilityActivationEvent
// 0x0008 (0x0008 - 0x0000)
struct GAT_ActiveAbility_C_SendHeroAbilityActivationEvent final
{
public:
	struct FGameplayTag                           T_Event_HeroAbilityActivate;                       // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GAT_ActiveAbility_C_SendHeroAbilityActivationEvent) == 0x000004, "Wrong alignment on GAT_ActiveAbility_C_SendHeroAbilityActivationEvent");
static_assert(sizeof(GAT_ActiveAbility_C_SendHeroAbilityActivationEvent) == 0x000008, "Wrong size on GAT_ActiveAbility_C_SendHeroAbilityActivationEvent");
static_assert(offsetof(GAT_ActiveAbility_C_SendHeroAbilityActivationEvent, T_Event_HeroAbilityActivate) == 0x000000, "Member 'GAT_ActiveAbility_C_SendHeroAbilityActivationEvent::T_Event_HeroAbilityActivate' has a wrong offset!");

// Function GAT_ActiveAbility.GAT_ActiveAbility_C.K2_ShouldAbilityRespondToEvent
// 0x00F8 (0x00F8 - 0x0000)
struct GAT_ActiveAbility_C_K2_ShouldAbilityRespondToEvent final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayEventData                     Payload;                                           // 0x0040(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GAT_ActiveAbility_C_K2_ShouldAbilityRespondToEvent) == 0x000008, "Wrong alignment on GAT_ActiveAbility_C_K2_ShouldAbilityRespondToEvent");
static_assert(sizeof(GAT_ActiveAbility_C_K2_ShouldAbilityRespondToEvent) == 0x0000F8, "Wrong size on GAT_ActiveAbility_C_K2_ShouldAbilityRespondToEvent");
static_assert(offsetof(GAT_ActiveAbility_C_K2_ShouldAbilityRespondToEvent, ActorInfo) == 0x000000, "Member 'GAT_ActiveAbility_C_K2_ShouldAbilityRespondToEvent::ActorInfo' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_K2_ShouldAbilityRespondToEvent, Payload) == 0x000040, "Member 'GAT_ActiveAbility_C_K2_ShouldAbilityRespondToEvent::Payload' has a wrong offset!");
static_assert(offsetof(GAT_ActiveAbility_C_K2_ShouldAbilityRespondToEvent, ReturnValue) == 0x0000F0, "Member 'GAT_ActiveAbility_C_K2_ShouldAbilityRespondToEvent::ReturnValue' has a wrong offset!");

}

