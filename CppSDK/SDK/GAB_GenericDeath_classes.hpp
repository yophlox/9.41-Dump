#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GAB_GenericDeath

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GAB_GenericDeath.GAB_GenericDeath_C
// 0x0198 (0x0AD8 - 0x0940)
class UGAB_GenericDeath_C : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0940(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAnimMontage*                           DeathMontage;                                      // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DeathMontageSectionName;                           // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DeathHitDirection;                                 // 0x0958(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             DeathHitResult;                                    // 0x0964(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_9EC[0x4];                                      // 0x09EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x09F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  SpawnDroneTags;                                    // 0x0A10(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           Front;                                             // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Left;                                              // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Right;                                             // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Back;                                              // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Head_Front;                                        // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Head_Left;                                         // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Head_Right;                                        // 0x0A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Head_Back;                                         // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FrontSectionNameCount;                             // 0x0A70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeftSectionNameCount;                              // 0x0A74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RightSectionNameCount;                             // 0x0A78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BackSectionNameCount;                              // 0x0A7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Head_FrontSectionNameCount;                        // 0x0A80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Head_LeftSectionNameCount;                         // 0x0A84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Head_RightSectionNameCount;                        // 0x0A88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Head_BackSectionNameCount;                         // 0x0A8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FrontMontageSectionPrefix;                         // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BackMontageSectionPrefix;                          // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LeftMontageSectionPrefix;                          // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RightMontageSectionPrefix;                         // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeadFrontMontageSectionPrefix;                     // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeadBackMontageSectionPrefix;                      // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeadLeftMontageSectionPrefix;                      // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeadRightMontageSectionPrefix;                     // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TeleportOutCue;                                    // 0x0AD0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GAB_GenericDeath(int32 EntryPoint);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void PickDeathMontageSection();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnCompleted_CD8A514040DDA2A4EF94DD913E1B01E4();
	void OnBlendOut_CD8A514040DDA2A4EF94DD913E1B01E4();
	void OnInterrupted_CD8A514040DDA2A4EF94DD913E1B01E4();
	void OnCancelled_CD8A514040DDA2A4EF94DD913E1B01E4();
	void InitializeDeathHitDirection(const struct FGameplayEventData& EventHitData);
	void GetRandomSectionName(int32 MaxNumberOfSections, class FName OriginalSectionName, class FName* SectionName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GAB_GenericDeath_C">();
	}
	static class UGAB_GenericDeath_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGAB_GenericDeath_C>();
	}
};
static_assert(alignof(UGAB_GenericDeath_C) == 0x000008, "Wrong alignment on UGAB_GenericDeath_C");
static_assert(sizeof(UGAB_GenericDeath_C) == 0x000AD8, "Wrong size on UGAB_GenericDeath_C");
static_assert(offsetof(UGAB_GenericDeath_C, UberGraphFrame) == 0x000940, "Member 'UGAB_GenericDeath_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, DeathMontage) == 0x000948, "Member 'UGAB_GenericDeath_C::DeathMontage' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, DeathMontageSectionName) == 0x000950, "Member 'UGAB_GenericDeath_C::DeathMontageSectionName' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, DeathHitDirection) == 0x000958, "Member 'UGAB_GenericDeath_C::DeathHitDirection' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, DeathHitResult) == 0x000964, "Member 'UGAB_GenericDeath_C::DeathHitResult' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, DamageTags) == 0x0009F0, "Member 'UGAB_GenericDeath_C::DamageTags' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, SpawnDroneTags) == 0x000A10, "Member 'UGAB_GenericDeath_C::SpawnDroneTags' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Front) == 0x000A30, "Member 'UGAB_GenericDeath_C::Front' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Left) == 0x000A38, "Member 'UGAB_GenericDeath_C::Left' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Right) == 0x000A40, "Member 'UGAB_GenericDeath_C::Right' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Back) == 0x000A48, "Member 'UGAB_GenericDeath_C::Back' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Head_Front) == 0x000A50, "Member 'UGAB_GenericDeath_C::Head_Front' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Head_Left) == 0x000A58, "Member 'UGAB_GenericDeath_C::Head_Left' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Head_Right) == 0x000A60, "Member 'UGAB_GenericDeath_C::Head_Right' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Head_Back) == 0x000A68, "Member 'UGAB_GenericDeath_C::Head_Back' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, FrontSectionNameCount) == 0x000A70, "Member 'UGAB_GenericDeath_C::FrontSectionNameCount' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, LeftSectionNameCount) == 0x000A74, "Member 'UGAB_GenericDeath_C::LeftSectionNameCount' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, RightSectionNameCount) == 0x000A78, "Member 'UGAB_GenericDeath_C::RightSectionNameCount' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, BackSectionNameCount) == 0x000A7C, "Member 'UGAB_GenericDeath_C::BackSectionNameCount' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Head_FrontSectionNameCount) == 0x000A80, "Member 'UGAB_GenericDeath_C::Head_FrontSectionNameCount' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Head_LeftSectionNameCount) == 0x000A84, "Member 'UGAB_GenericDeath_C::Head_LeftSectionNameCount' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Head_RightSectionNameCount) == 0x000A88, "Member 'UGAB_GenericDeath_C::Head_RightSectionNameCount' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, Head_BackSectionNameCount) == 0x000A8C, "Member 'UGAB_GenericDeath_C::Head_BackSectionNameCount' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, FrontMontageSectionPrefix) == 0x000A90, "Member 'UGAB_GenericDeath_C::FrontMontageSectionPrefix' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, BackMontageSectionPrefix) == 0x000A98, "Member 'UGAB_GenericDeath_C::BackMontageSectionPrefix' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, LeftMontageSectionPrefix) == 0x000AA0, "Member 'UGAB_GenericDeath_C::LeftMontageSectionPrefix' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, RightMontageSectionPrefix) == 0x000AA8, "Member 'UGAB_GenericDeath_C::RightMontageSectionPrefix' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, HeadFrontMontageSectionPrefix) == 0x000AB0, "Member 'UGAB_GenericDeath_C::HeadFrontMontageSectionPrefix' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, HeadBackMontageSectionPrefix) == 0x000AB8, "Member 'UGAB_GenericDeath_C::HeadBackMontageSectionPrefix' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, HeadLeftMontageSectionPrefix) == 0x000AC0, "Member 'UGAB_GenericDeath_C::HeadLeftMontageSectionPrefix' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, HeadRightMontageSectionPrefix) == 0x000AC8, "Member 'UGAB_GenericDeath_C::HeadRightMontageSectionPrefix' has a wrong offset!");
static_assert(offsetof(UGAB_GenericDeath_C, TeleportOutCue) == 0x000AD0, "Member 'UGAB_GenericDeath_C::TeleportOutCue' has a wrong offset!");

}

