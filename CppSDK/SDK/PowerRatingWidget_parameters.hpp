#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PowerRatingWidget

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function PowerRatingWidget.PowerRatingWidget_C.ExecuteUbergraph_PowerRatingWidget
// 0x00A8 (0x00A8 - 0x0000)
struct PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTeamMembers_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_BasePowerRating;                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_TeamPowerRating;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0010(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	float                                         K2Node_Event_BaseRatingProgress;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_TeamRatingProgress;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0070(0x0018)()
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93[0x1];                                       // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBasePowerRating_ReturnValue;           // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTeamPowerRating_ReturnValue;           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default_2;                           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget) == 0x000008, "Wrong alignment on PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget");
static_assert(sizeof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget) == 0x0000A8, "Wrong size on PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, EntryPoint) == 0x000000, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, CallFunc_HasTeamMembers_ReturnValue) == 0x000004, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::CallFunc_HasTeamMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, Temp_bool_Variable) == 0x000005, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, Temp_byte_Variable) == 0x000006, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, Temp_byte_Variable_1) == 0x000007, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, K2Node_Event_BasePowerRating) == 0x000008, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::K2Node_Event_BasePowerRating' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, K2Node_Event_TeamPowerRating) == 0x00000C, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::K2Node_Event_TeamPowerRating' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, K2Node_MakeStruct_FormatArgumentData) == 0x000010, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000050, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, K2Node_MakeArray_Array) == 0x000058, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, K2Node_Event_BaseRatingProgress) == 0x000068, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::K2Node_Event_BaseRatingProgress' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, K2Node_Event_TeamRatingProgress) == 0x00006C, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::K2Node_Event_TeamRatingProgress' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, CallFunc_Format_ReturnValue) == 0x000070, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000088, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, K2Node_Select_Default) == 0x00008C, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, K2Node_Event_IsDesignTime) == 0x00008D, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, Temp_byte_Variable_2) == 0x00008E, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00008F, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, Temp_byte_Variable_3) == 0x000090, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, Temp_bool_Variable_1) == 0x000091, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, K2Node_Select_Default_1) == 0x000092, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, CallFunc_GetBasePowerRating_ReturnValue) == 0x000094, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::CallFunc_GetBasePowerRating_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, CallFunc_GetTeamPowerRating_ReturnValue) == 0x000098, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::CallFunc_GetTeamPowerRating_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, Temp_bool_Variable_2) == 0x00009C, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00009D, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget, K2Node_Select_Default_2) == 0x0000A0, "Member 'PowerRatingWidget_C_ExecuteUbergraph_PowerRatingWidget::K2Node_Select_Default_2' has a wrong offset!");

// Function PowerRatingWidget.PowerRatingWidget_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct PowerRatingWidget_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PowerRatingWidget_C_PreConstruct) == 0x000001, "Wrong alignment on PowerRatingWidget_C_PreConstruct");
static_assert(sizeof(PowerRatingWidget_C_PreConstruct) == 0x000001, "Wrong size on PowerRatingWidget_C_PreConstruct");
static_assert(offsetof(PowerRatingWidget_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'PowerRatingWidget_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function PowerRatingWidget.PowerRatingWidget_C.OnPowerRatingProgressUpdated
// 0x0008 (0x0008 - 0x0000)
struct PowerRatingWidget_C_OnPowerRatingProgressUpdated final
{
public:
	float                                         BaseRatingProgress;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TeamRatingProgress;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PowerRatingWidget_C_OnPowerRatingProgressUpdated) == 0x000004, "Wrong alignment on PowerRatingWidget_C_OnPowerRatingProgressUpdated");
static_assert(sizeof(PowerRatingWidget_C_OnPowerRatingProgressUpdated) == 0x000008, "Wrong size on PowerRatingWidget_C_OnPowerRatingProgressUpdated");
static_assert(offsetof(PowerRatingWidget_C_OnPowerRatingProgressUpdated, BaseRatingProgress) == 0x000000, "Member 'PowerRatingWidget_C_OnPowerRatingProgressUpdated::BaseRatingProgress' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_OnPowerRatingProgressUpdated, TeamRatingProgress) == 0x000004, "Member 'PowerRatingWidget_C_OnPowerRatingProgressUpdated::TeamRatingProgress' has a wrong offset!");

// Function PowerRatingWidget.PowerRatingWidget_C.OnTeamPowerRatingUpdated
// 0x0004 (0x0004 - 0x0000)
struct PowerRatingWidget_C_OnTeamPowerRatingUpdated final
{
public:
	int32                                         TeamPowerRating;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PowerRatingWidget_C_OnTeamPowerRatingUpdated) == 0x000004, "Wrong alignment on PowerRatingWidget_C_OnTeamPowerRatingUpdated");
static_assert(sizeof(PowerRatingWidget_C_OnTeamPowerRatingUpdated) == 0x000004, "Wrong size on PowerRatingWidget_C_OnTeamPowerRatingUpdated");
static_assert(offsetof(PowerRatingWidget_C_OnTeamPowerRatingUpdated, TeamPowerRating) == 0x000000, "Member 'PowerRatingWidget_C_OnTeamPowerRatingUpdated::TeamPowerRating' has a wrong offset!");

// Function PowerRatingWidget.PowerRatingWidget_C.OnBasePowerRatingUpdated
// 0x0004 (0x0004 - 0x0000)
struct PowerRatingWidget_C_OnBasePowerRatingUpdated final
{
public:
	int32                                         BasePowerRating;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PowerRatingWidget_C_OnBasePowerRatingUpdated) == 0x000004, "Wrong alignment on PowerRatingWidget_C_OnBasePowerRatingUpdated");
static_assert(sizeof(PowerRatingWidget_C_OnBasePowerRatingUpdated) == 0x000004, "Wrong size on PowerRatingWidget_C_OnBasePowerRatingUpdated");
static_assert(offsetof(PowerRatingWidget_C_OnBasePowerRatingUpdated, BasePowerRating) == 0x000000, "Member 'PowerRatingWidget_C_OnBasePowerRatingUpdated::BasePowerRating' has a wrong offset!");

// Function PowerRatingWidget.PowerRatingWidget_C.UpdateWidgetState
// 0x0240 (0x0240 - 0x0000)
struct PowerRatingWidget_C_UpdateWidgetState final
{
public:
	bool                                          IsContributingToTeamPowerRating;                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBasePowerRating_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTeamMembers_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBasePowerRating_ReturnValue_1;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasTeamMembers_ReturnValue_1;             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0020(0x0088)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush_1;                    // 0x00A8(0x0088)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush_2;                    // 0x0130(0x0088)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush_3;                    // 0x01B8(0x0088)()
};
static_assert(alignof(PowerRatingWidget_C_UpdateWidgetState) == 0x000008, "Wrong alignment on PowerRatingWidget_C_UpdateWidgetState");
static_assert(sizeof(PowerRatingWidget_C_UpdateWidgetState) == 0x000240, "Wrong size on PowerRatingWidget_C_UpdateWidgetState");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, IsContributingToTeamPowerRating) == 0x000000, "Member 'PowerRatingWidget_C_UpdateWidgetState::IsContributingToTeamPowerRating' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, Temp_byte_Variable) == 0x000001, "Member 'PowerRatingWidget_C_UpdateWidgetState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, Temp_bool_Has_Been_Initd_Variable) == 0x000002, "Member 'PowerRatingWidget_C_UpdateWidgetState::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, Temp_bool_IsClosed_Variable) == 0x000003, "Member 'PowerRatingWidget_C_UpdateWidgetState::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, Temp_byte_Variable_1) == 0x000004, "Member 'PowerRatingWidget_C_UpdateWidgetState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, CallFunc_GetBasePowerRating_ReturnValue) == 0x000008, "Member 'PowerRatingWidget_C_UpdateWidgetState::CallFunc_GetBasePowerRating_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, CallFunc_HasTeamMembers_ReturnValue) == 0x00000C, "Member 'PowerRatingWidget_C_UpdateWidgetState::CallFunc_HasTeamMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, CallFunc_GetBasePowerRating_ReturnValue_1) == 0x000010, "Member 'PowerRatingWidget_C_UpdateWidgetState::CallFunc_GetBasePowerRating_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000014, "Member 'PowerRatingWidget_C_UpdateWidgetState::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'PowerRatingWidget_C_UpdateWidgetState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, CallFunc_HasTeamMembers_ReturnValue_1) == 0x000016, "Member 'PowerRatingWidget_C_UpdateWidgetState::CallFunc_HasTeamMembers_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, Temp_bool_Variable) == 0x000017, "Member 'PowerRatingWidget_C_UpdateWidgetState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, CallFunc_BooleanAND_ReturnValue_1) == 0x000018, "Member 'PowerRatingWidget_C_UpdateWidgetState::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, CallFunc_BooleanAND_ReturnValue_2) == 0x000019, "Member 'PowerRatingWidget_C_UpdateWidgetState::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, K2Node_Select_Default) == 0x00001A, "Member 'PowerRatingWidget_C_UpdateWidgetState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, K2Node_MakeStruct_SlateBrush) == 0x000020, "Member 'PowerRatingWidget_C_UpdateWidgetState::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, K2Node_MakeStruct_SlateBrush_1) == 0x0000A8, "Member 'PowerRatingWidget_C_UpdateWidgetState::K2Node_MakeStruct_SlateBrush_1' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, K2Node_MakeStruct_SlateBrush_2) == 0x000130, "Member 'PowerRatingWidget_C_UpdateWidgetState::K2Node_MakeStruct_SlateBrush_2' has a wrong offset!");
static_assert(offsetof(PowerRatingWidget_C_UpdateWidgetState, K2Node_MakeStruct_SlateBrush_3) == 0x0001B8, "Member 'PowerRatingWidget_C_UpdateWidgetState::K2Node_MakeStruct_SlateBrush_3' has a wrong offset!");

}

