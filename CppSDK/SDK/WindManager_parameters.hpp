#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "StaticMeshMaterialArrayCombo_structs.hpp"
#include "WaterMeshAssetsToReplace_structs.hpp"
#include "FlowMapMaterials_structs.hpp"


namespace SDK::Params
{

// Function WindManager.WindManager_C.ExecuteUbergraph_WindManager
// 0x0850 (0x0850 - 0x0000)
struct WindManager_C_ExecuteUbergraph_WindManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortStaticMeshActor*>           CallFunc_GetAllActorsOfClass_OutActors;            // 0x0060(0x0010)(ZeroConstructor, ReferenceParm)
	class UParticleSystem*                        K2Node_CustomEvent_EmitterTemplate;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_CustomEvent_InTransform;                    // 0x0080(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScalarParameterValue_ReturnValue;      // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_Effect_Water_Interaction_FX;    // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_Gameplay_Wind_INteraction_Effects; // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0127(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStaticMeshMaterialArrayCombo          CallFunc_Array_Get_Item;                           // 0x0130(0x0018)(ZeroConstructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_Array_Get_Item_1;                         // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWaterMeshAssetsToReplace              CallFunc_Array_Get_Item_2;                         // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWaterMeshAssetsToReplace              CallFunc_Array_Get_Item_3;                         // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakColor_R;                             // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G;                             // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B;                             // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A;                             // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_R_1;                           // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G_1;                           // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B_1;                           // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A_1;                           // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x01E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x01EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0224(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0234(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0244(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0254(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFlowMapMaterials                      CallFunc_Array_Get_Item_4;                         // 0x02E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortStaticMeshActor*                   CallFunc_Array_Get_Item_5;                         // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorBounds_Origin;                    // 0x0300(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorBounds_BoxExtent;                 // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0318(0x0010)(ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0328(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStaticMeshMaterialArrayCombo          K2Node_MakeStruct_StaticMeshMaterialArrayCombo;    // 0x0350(0x0018)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0368(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_2;                       // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x038C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x039C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Calculate_Camera_Position_ReturnValue;    // 0x03B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x03C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult_1;     // 0x03CC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakVector_X_4;                          // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x045C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x046C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x046D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x046E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x046F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0471(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_5;         // 0x0472(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0473(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0474(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_475[0x3];                                      // 0x0475(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x0478(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0489(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x048A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48B[0x1];                                      // 0x048B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x048C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UStaticMesh*                      Temp_object_Variable;                              // 0x0498(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A1[0x3];                                      // 0x04A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_6;                   // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_6;                  // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_6;                         // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_6;                // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x04B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA[0x2];                                      // 0x04BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               K2Node_Event_ParticleSystemComponent;              // 0x04C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortWindImpulseCylinder               K2Node_Event_WindImpulseCylinder_2;                // 0x04C8(0x0048)(ConstParm, NoDestructor)
	struct FFortWindImpulseCylinderDelta          K2Node_Event_WindImpulseCylinderDelta;             // 0x0510(0x0090)(ConstParm, NoDestructor)
	struct FFortWindImpulseCylinder               K2Node_Event_WindImpulseCylinder_1;                // 0x05A0(0x0048)(ConstParm, NoDestructor)
	struct FFortWindImpulseCylinder               K2Node_Event_WindImpulseCylinder;                  // 0x05E8(0x0048)(ConstParm, NoDestructor)
	float                                         CallFunc_GetGlobalWindIntensityAndDirection_WindIntensity; // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetGlobalWindIntensityAndDirection_WindDirection; // 0x0634(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation; // 0x0640(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius; // 0x064C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius; // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection; // 0x0654(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude; // 0x0660(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds; // 0x0664(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging; // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending; // 0x0681(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_682[0x2];                                      // 0x0682(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0684(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Storm_Cyl_Mesh_Match; // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_691[0x3];                                      // 0x0691(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Wind_Cyl_Mesh_Array_Match_Index; // 0x0694(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetWindMatVariables_NewParam;             // 0x0698(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_699[0x3];                                      // 0x0699(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Radius;                         // 0x069C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_ImpulseMagnitude;               // 0x06A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x06A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x06B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4[0xC];                                      // 0x06B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_CustomEvent_Particle_Transform;             // 0x06C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x06F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0778(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77C[0x4];                                      // 0x077C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_CustomEvent_InComponent;                    // 0x0780(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0788(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NewMagnitude;                   // 0x0794(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortWindImpulseCylinder               CallFunc_MakeWindImpulseCylinder_ReturnValue;      // 0x0798(0x0048)(NoDestructor)
	struct FFortWindImpulseHandle                 CallFunc_AddWindImpulseCylinder_ReturnValue;       // 0x07E0(0x0004)(NoDestructor)
	bool                                          CallFunc_SetWindImpulseCylinderMagnitude_ReturnValue; // 0x07E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E5[0x3];                                      // 0x07E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_7;                  // 0x07E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x07EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_7;                // 0x07F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F5[0x3];                                      // 0x07F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x07F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_1;            // 0x07FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_2;            // 0x0804(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_7;                   // 0x080C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_Array_Get_Item_7;                         // 0x0810(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_8;                         // 0x0818(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0820(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_821[0x7];                                      // 0x0821(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0838(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_839[0x3];                                      // 0x0839(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x083C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0840(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WindManager_C_ExecuteUbergraph_WindManager) == 0x000010, "Wrong alignment on WindManager_C_ExecuteUbergraph_WindManager");
static_assert(sizeof(WindManager_C_ExecuteUbergraph_WindManager) == 0x000850, "Wrong size on WindManager_C_ExecuteUbergraph_WindManager");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, EntryPoint) == 0x000000, "Member 'WindManager_C_ExecuteUbergraph_WindManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_struct_Variable) == 0x000010, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_AddComponent_ReturnValue) == 0x000040, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Array_Index_Variable) == 0x000048, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000050, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_GetAllActorsOfClass_OutActors) == 0x000060, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_CustomEvent_EmitterTemplate) == 0x000070, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_CustomEvent_EmitterTemplate' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_CustomEvent_InTransform) == 0x000080, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_CustomEvent_InTransform' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakTransform_Location) == 0x0000B0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakTransform_Rotation) == 0x0000BC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakTransform_Scale) == 0x0000C8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Loop_Counter_Variable) == 0x0000D4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0000D8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Less_IntInt_ReturnValue) == 0x0000E0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_IntInt_ReturnValue) == 0x0000E4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Loop_Counter_Variable_1) == 0x0000E8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000EC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Loop_Counter_Variable_2) == 0x0000F0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_GetScalarParameterValue_ReturnValue) == 0x0000F4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000F8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_Event_DeltaSeconds) == 0x0000FC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_CustomEvent_Effect_Water_Interaction_FX) == 0x000100, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_CustomEvent_Effect_Water_Interaction_FX' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_CustomEvent_Gameplay_Wind_INteraction_Effects) == 0x000108, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_CustomEvent_Gameplay_Wind_INteraction_Effects' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Array_Index_Variable_1) == 0x000110, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Length_ReturnValue_1) == 0x000114, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Length_ReturnValue_2) == 0x000118, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Less_IntInt_ReturnValue_1) == 0x00011C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_bool_True_if_break_was_hit_Variable) == 0x00011D, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Length_ReturnValue_3) == 0x000120, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Not_PreBool_ReturnValue) == 0x000124, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BooleanAND_ReturnValue) == 0x000125, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_IsDedicatedServer_ReturnValue) == 0x000126, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000127, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Array_Index_Variable_2) == 0x000128, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Get_Item) == 0x000130, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Get_Item_1) == 0x000148, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Length_ReturnValue_4) == 0x000150, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Less_IntInt_ReturnValue_2) == 0x000154, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Loop_Counter_Variable_3) == 0x000158, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_IntInt_ReturnValue_3) == 0x00015C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000160, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Get_Item_2) == 0x000168, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Get_Item_3) == 0x000180, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Length_ReturnValue_5) == 0x000198, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_LastIndex_ReturnValue) == 0x00019C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Less_IntInt_ReturnValue_3) == 0x0001A0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakColor_R) == 0x0001A4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakColor_R' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakColor_G) == 0x0001A8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakColor_G' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakColor_B) == 0x0001AC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakColor_B' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakColor_A) == 0x0001B0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakColor_A' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakColor_R_1) == 0x0001B4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakColor_R_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakColor_G_1) == 0x0001B8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakColor_G_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakColor_B_1) == 0x0001BC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakColor_B_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakColor_A_1) == 0x0001C0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakColor_A_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0001C4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_MakeVector2D_ReturnValue) == 0x0001D0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_X) == 0x0001D8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Y) == 0x0001DC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Z) == 0x0001E0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_MakeVector2D_ReturnValue_1) == 0x0001E4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x0001EC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector2D_X) == 0x0001F4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector2D_Y) == 0x0001F8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Abs_ReturnValue) == 0x0001FC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Abs_ReturnValue_1) == 0x000200, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Loop_Counter_Variable_4) == 0x000204, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_MakeVector2D_ReturnValue_2) == 0x000208, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector2D_X_1) == 0x000210, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector2D_Y_1) == 0x000214, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x000218, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_FMax_ReturnValue) == 0x000220, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000224, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector2D_X_2) == 0x00022C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector2D_Y_2) == 0x000230, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_MakeVector_ReturnValue) == 0x000234, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Less_IntInt_ReturnValue_4) == 0x000240, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000244, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000254, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_IntInt_ReturnValue_4) == 0x0002DC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Array_Index_Variable_3) == 0x0002E0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Array_Index_Variable_4) == 0x0002E4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Get_Item_4) == 0x0002E8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Get_Item_5) == 0x0002F8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_GetActorBounds_Origin) == 0x000300, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_GetActorBounds_Origin' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_GetActorBounds_BoxExtent) == 0x00030C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_GetActorBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_GetMaterials_ReturnValue) == 0x000318, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000328, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Length_ReturnValue_6) == 0x000334, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_X_1) == 0x000338, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Y_1) == 0x00033C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Z_1) == 0x000340, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Length_ReturnValue_7) == 0x000344, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_FMin_ReturnValue) == 0x000348, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_FMin_ReturnValue_1) == 0x00034C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_MakeStruct_StaticMeshMaterialArrayCombo) == 0x000350, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_MakeStruct_StaticMeshMaterialArrayCombo' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_VectorVector_ReturnValue) == 0x000368, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_X_2) == 0x000374, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Y_2) == 0x000378, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Z_2) == 0x00037C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_FMax_ReturnValue_1) == 0x000380, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Find_ReturnValue) == 0x000384, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_FMax_ReturnValue_2) == 0x000388, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_FMax_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_MakeStruct_LinearColor) == 0x00038C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00039C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_X_3) == 0x0003A8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Y_3) == 0x0003AC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Z_3) == 0x0003B0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Calculate_Camera_Position_ReturnValue) == 0x0003B4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Calculate_Camera_Position_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0003C0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_K2_SetWorldLocation_SweepHitResult_1) == 0x0003CC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_K2_SetWorldLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_X_4) == 0x000454, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Y_4) == 0x000458, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Z_4) == 0x00045C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_X_5) == 0x000460, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Y_5) == 0x000464, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakVector_Z_5) == 0x000468, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00046C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00046D, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x00046E, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x00046F, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x000470, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BooleanAND_ReturnValue_1) == 0x000471, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Greater_FloatFloat_ReturnValue_5) == 0x000472, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Greater_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BooleanAND_ReturnValue_2) == 0x000473, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BooleanAND_ReturnValue_3) == 0x000474, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x000478, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BooleanAND_ReturnValue_4) == 0x000488, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BooleanAND_ReturnValue_5) == 0x000489, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_bool_True_if_break_was_hit_Variable_1) == 0x00048A, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Array_Index_Variable_5) == 0x00048C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Not_PreBool_ReturnValue_1) == 0x000490, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Loop_Counter_Variable_5) == 0x000494, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_object_Variable) == 0x000498, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Less_IntInt_ReturnValue_5) == 0x0004A0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_IntInt_ReturnValue_5) == 0x0004A4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Array_Index_Variable_6) == 0x0004A8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Array_Index_Variable_6' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Loop_Counter_Variable_6) == 0x0004AC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Loop_Counter_Variable_6' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Get_Item_6) == 0x0004B0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Less_IntInt_ReturnValue_6) == 0x0004B8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Less_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BooleanAND_ReturnValue_6) == 0x0004B9, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_IntInt_ReturnValue_6) == 0x0004BC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_Event_ParticleSystemComponent) == 0x0004C0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_Event_ParticleSystemComponent' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_Event_WindImpulseCylinder_2) == 0x0004C8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_Event_WindImpulseCylinder_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_Event_WindImpulseCylinderDelta) == 0x000510, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_Event_WindImpulseCylinderDelta' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_Event_WindImpulseCylinder_1) == 0x0005A0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_Event_WindImpulseCylinder_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_Event_WindImpulseCylinder) == 0x0005E8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_Event_WindImpulseCylinder' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_GetGlobalWindIntensityAndDirection_WindIntensity) == 0x000630, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_GetGlobalWindIntensityAndDirection_WindIntensity' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_GetGlobalWindIntensityAndDirection_WindDirection) == 0x000634, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_GetGlobalWindIntensityAndDirection_WindDirection' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation) == 0x000640, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius) == 0x00064C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius) == 0x000650, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection) == 0x000654, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude) == 0x000660, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds) == 0x000664, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging) == 0x000680, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending) == 0x000681, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Cross_VectorVector_ReturnValue) == 0x000684, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Storm_Cyl_Mesh_Match) == 0x000690, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Storm_Cyl_Mesh_Match' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Wind_Cyl_Mesh_Array_Match_Index) == 0x000694, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Wind_Cyl_Mesh_Array_Match_Index' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_SetWindMatVariables_NewParam) == 0x000698, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_SetWindMatVariables_NewParam' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_CustomEvent_Radius) == 0x00069C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_CustomEvent_Radius' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_CustomEvent_ImpulseMagnitude) == 0x0006A0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_CustomEvent_ImpulseMagnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_MakeVector_ReturnValue_1) == 0x0006A4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_FloatFloat_ReturnValue) == 0x0006B0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_CustomEvent_Particle_Transform) == 0x0006C0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_CustomEvent_Particle_Transform' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x0006F0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000778, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_CustomEvent_InComponent) == 0x000780, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_CustomEvent_InComponent' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_MakeVector_ReturnValue_2) == 0x000788, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_CustomEvent_NewMagnitude) == 0x000794, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_CustomEvent_NewMagnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_MakeWindImpulseCylinder_ReturnValue) == 0x000798, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_MakeWindImpulseCylinder_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_AddWindImpulseCylinder_ReturnValue) == 0x0007E0, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_AddWindImpulseCylinder_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_SetWindImpulseCylinderMagnitude_ReturnValue) == 0x0007E4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_SetWindImpulseCylinderMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Loop_Counter_Variable_7) == 0x0007E8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Loop_Counter_Variable_7' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_MakeLiteralName_ReturnValue) == 0x0007EC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Less_IntInt_ReturnValue_7) == 0x0007F4, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Less_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Add_IntInt_ReturnValue_7) == 0x0007F8, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_MakeLiteralName_ReturnValue_1) == 0x0007FC, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_MakeLiteralName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_MakeLiteralName_ReturnValue_2) == 0x000804, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_MakeLiteralName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, Temp_int_Array_Index_Variable_7) == 0x00080C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::Temp_int_Array_Index_Variable_7' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Get_Item_7) == 0x000810, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_Array_Get_Item_8) == 0x000818, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000820, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_GetMaterial_ReturnValue) == 0x000828, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000830, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, K2Node_DynamicCast_bSuccess) == 0x000838, "Member 'WindManager_C_ExecuteUbergraph_WindManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x00083C, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_ExecuteUbergraph_WindManager, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000840, "Member 'WindManager_C_ExecuteUbergraph_WindManager::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function WindManager.WindManager_C.Update Test
// 0x0004 (0x0004 - 0x0000)
struct WindManager_C_Update_Test final
{
public:
	float                                         NewMagnitude;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindManager_C_Update_Test) == 0x000004, "Wrong alignment on WindManager_C_Update_Test");
static_assert(sizeof(WindManager_C_Update_Test) == 0x000004, "Wrong size on WindManager_C_Update_Test");
static_assert(offsetof(WindManager_C_Update_Test, NewMagnitude) == 0x000000, "Member 'WindManager_C_Update_Test::NewMagnitude' has a wrong offset!");

// Function WindManager.WindManager_C.Add Wind Component
// 0x0008 (0x0008 - 0x0000)
struct WindManager_C_Add_Wind_Component final
{
public:
	class UPrimitiveComponent*                    InComponent;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindManager_C_Add_Wind_Component) == 0x000008, "Wrong alignment on WindManager_C_Add_Wind_Component");
static_assert(sizeof(WindManager_C_Add_Wind_Component) == 0x000008, "Wrong size on WindManager_C_Add_Wind_Component");
static_assert(offsetof(WindManager_C_Add_Wind_Component, InComponent) == 0x000000, "Member 'WindManager_C_Add_Wind_Component::InComponent' has a wrong offset!");

// Function WindManager.WindManager_C.Play Water Splash Particle System At Location
// 0x0030 (0x0030 - 0x0000)
struct WindManager_C_Play_Water_Splash_Particle_System_At_Location final
{
public:
	struct FTransform                             Particle_Transform;                                // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WindManager_C_Play_Water_Splash_Particle_System_At_Location) == 0x000010, "Wrong alignment on WindManager_C_Play_Water_Splash_Particle_System_At_Location");
static_assert(sizeof(WindManager_C_Play_Water_Splash_Particle_System_At_Location) == 0x000030, "Wrong size on WindManager_C_Play_Water_Splash_Particle_System_At_Location");
static_assert(offsetof(WindManager_C_Play_Water_Splash_Particle_System_At_Location, Particle_Transform) == 0x000000, "Member 'WindManager_C_Play_Water_Splash_Particle_System_At_Location::Particle_Transform' has a wrong offset!");

// Function WindManager.WindManager_C.SpawnTestWind
// 0x0008 (0x0008 - 0x0000)
struct WindManager_C_SpawnTestWind final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulseMagnitude;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindManager_C_SpawnTestWind) == 0x000004, "Wrong alignment on WindManager_C_SpawnTestWind");
static_assert(sizeof(WindManager_C_SpawnTestWind) == 0x000008, "Wrong size on WindManager_C_SpawnTestWind");
static_assert(offsetof(WindManager_C_SpawnTestWind, Radius) == 0x000000, "Member 'WindManager_C_SpawnTestWind::Radius' has a wrong offset!");
static_assert(offsetof(WindManager_C_SpawnTestWind, ImpulseMagnitude) == 0x000004, "Member 'WindManager_C_SpawnTestWind::ImpulseMagnitude' has a wrong offset!");

// Function WindManager.WindManager_C.OnWindImpulseCylinderDeltaComplete
// 0x0048 (0x0048 - 0x0000)
struct WindManager_C_OnWindImpulseCylinderDeltaComplete final
{
public:
	struct FFortWindImpulseCylinder               WindImpulseCylinder;                               // 0x0000(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(WindManager_C_OnWindImpulseCylinderDeltaComplete) == 0x000004, "Wrong alignment on WindManager_C_OnWindImpulseCylinderDeltaComplete");
static_assert(sizeof(WindManager_C_OnWindImpulseCylinderDeltaComplete) == 0x000048, "Wrong size on WindManager_C_OnWindImpulseCylinderDeltaComplete");
static_assert(offsetof(WindManager_C_OnWindImpulseCylinderDeltaComplete, WindImpulseCylinder) == 0x000000, "Member 'WindManager_C_OnWindImpulseCylinderDeltaComplete::WindImpulseCylinder' has a wrong offset!");

// Function WindManager.WindManager_C.OnWindImpulseCylinderDeath
// 0x0048 (0x0048 - 0x0000)
struct WindManager_C_OnWindImpulseCylinderDeath final
{
public:
	struct FFortWindImpulseCylinder               WindImpulseCylinder;                               // 0x0000(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(WindManager_C_OnWindImpulseCylinderDeath) == 0x000004, "Wrong alignment on WindManager_C_OnWindImpulseCylinderDeath");
static_assert(sizeof(WindManager_C_OnWindImpulseCylinderDeath) == 0x000048, "Wrong size on WindManager_C_OnWindImpulseCylinderDeath");
static_assert(offsetof(WindManager_C_OnWindImpulseCylinderDeath, WindImpulseCylinder) == 0x000000, "Member 'WindManager_C_OnWindImpulseCylinderDeath::WindImpulseCylinder' has a wrong offset!");

// Function WindManager.WindManager_C.OnWindImpulseCylinderCreation
// 0x00D8 (0x00D8 - 0x0000)
struct WindManager_C_OnWindImpulseCylinderCreation final
{
public:
	struct FFortWindImpulseCylinder               WindImpulseCylinder;                               // 0x0000(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FFortWindImpulseCylinderDelta          WindImpulseCylinderDelta;                          // 0x0048(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(WindManager_C_OnWindImpulseCylinderCreation) == 0x000004, "Wrong alignment on WindManager_C_OnWindImpulseCylinderCreation");
static_assert(sizeof(WindManager_C_OnWindImpulseCylinderCreation) == 0x0000D8, "Wrong size on WindManager_C_OnWindImpulseCylinderCreation");
static_assert(offsetof(WindManager_C_OnWindImpulseCylinderCreation, WindImpulseCylinder) == 0x000000, "Member 'WindManager_C_OnWindImpulseCylinderCreation::WindImpulseCylinder' has a wrong offset!");
static_assert(offsetof(WindManager_C_OnWindImpulseCylinderCreation, WindImpulseCylinderDelta) == 0x000048, "Member 'WindManager_C_OnWindImpulseCylinderCreation::WindImpulseCylinderDelta' has a wrong offset!");

// Function WindManager.WindManager_C.AddWindParticleSystemComponent
// 0x0008 (0x0008 - 0x0000)
struct WindManager_C_AddWindParticleSystemComponent final
{
public:
	class UParticleSystemComponent*               ParticleSystemComponent;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindManager_C_AddWindParticleSystemComponent) == 0x000008, "Wrong alignment on WindManager_C_AddWindParticleSystemComponent");
static_assert(sizeof(WindManager_C_AddWindParticleSystemComponent) == 0x000008, "Wrong size on WindManager_C_AddWindParticleSystemComponent");
static_assert(offsetof(WindManager_C_AddWindParticleSystemComponent, ParticleSystemComponent) == 0x000000, "Member 'WindManager_C_AddWindParticleSystemComponent::ParticleSystemComponent' has a wrong offset!");

// Function WindManager.WindManager_C.Register player for render to texture purposes
// 0x0010 (0x0010 - 0x0000)
struct WindManager_C_Register_player_for_render_to_texture_purposes final
{
public:
	class UPrimitiveComponent*                    Effect_Water_Interaction_FX;                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Gameplay_Wind_INteraction_Effects;                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindManager_C_Register_player_for_render_to_texture_purposes) == 0x000008, "Wrong alignment on WindManager_C_Register_player_for_render_to_texture_purposes");
static_assert(sizeof(WindManager_C_Register_player_for_render_to_texture_purposes) == 0x000010, "Wrong size on WindManager_C_Register_player_for_render_to_texture_purposes");
static_assert(offsetof(WindManager_C_Register_player_for_render_to_texture_purposes, Effect_Water_Interaction_FX) == 0x000000, "Member 'WindManager_C_Register_player_for_render_to_texture_purposes::Effect_Water_Interaction_FX' has a wrong offset!");
static_assert(offsetof(WindManager_C_Register_player_for_render_to_texture_purposes, Gameplay_Wind_INteraction_Effects) == 0x000008, "Member 'WindManager_C_Register_player_for_render_to_texture_purposes::Gameplay_Wind_INteraction_Effects' has a wrong offset!");

// Function WindManager.WindManager_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct WindManager_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindManager_C_ReceiveTick) == 0x000004, "Wrong alignment on WindManager_C_ReceiveTick");
static_assert(sizeof(WindManager_C_ReceiveTick) == 0x000004, "Wrong size on WindManager_C_ReceiveTick");
static_assert(offsetof(WindManager_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'WindManager_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function WindManager.WindManager_C.Add Render To Texture Particle
// 0x0040 (0x0040 - 0x0000)
struct WindManager_C_Add_Render_To_Texture_Particle final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WindManager_C_Add_Render_To_Texture_Particle) == 0x000010, "Wrong alignment on WindManager_C_Add_Render_To_Texture_Particle");
static_assert(sizeof(WindManager_C_Add_Render_To_Texture_Particle) == 0x000040, "Wrong size on WindManager_C_Add_Render_To_Texture_Particle");
static_assert(offsetof(WindManager_C_Add_Render_To_Texture_Particle, EmitterTemplate) == 0x000000, "Member 'WindManager_C_Add_Render_To_Texture_Particle::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(WindManager_C_Add_Render_To_Texture_Particle, InTransform) == 0x000010, "Member 'WindManager_C_Add_Render_To_Texture_Particle::InTransform' has a wrong offset!");

// Function WindManager.WindManager_C.UserConstructionScript
// 0x0050 (0x0050 - 0x0000)
struct WindManager_C_UserConstructionScript final
{
public:
	float                                         CallFunc_GetScalarParameterValue_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_AddComponent_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindManager_C_UserConstructionScript) == 0x000010, "Wrong alignment on WindManager_C_UserConstructionScript");
static_assert(sizeof(WindManager_C_UserConstructionScript) == 0x000050, "Wrong size on WindManager_C_UserConstructionScript");
static_assert(offsetof(WindManager_C_UserConstructionScript, CallFunc_GetScalarParameterValue_ReturnValue) == 0x000000, "Member 'WindManager_C_UserConstructionScript::CallFunc_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UserConstructionScript, Temp_struct_Variable) == 0x000010, "Member 'WindManager_C_UserConstructionScript::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_UserConstructionScript, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000040, "Member 'WindManager_C_UserConstructionScript::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UserConstructionScript, CallFunc_AddComponent_ReturnValue) == 0x000048, "Member 'WindManager_C_UserConstructionScript::CallFunc_AddComponent_ReturnValue' has a wrong offset!");

// Function WindManager.WindManager_C.SetRenderOnlyAssets
// 0x0008 (0x0008 - 0x0000)
struct WindManager_C_SetRenderOnlyAssets final
{
public:
	class UPrimitiveComponent*                    InComponent;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindManager_C_SetRenderOnlyAssets) == 0x000008, "Wrong alignment on WindManager_C_SetRenderOnlyAssets");
static_assert(sizeof(WindManager_C_SetRenderOnlyAssets) == 0x000008, "Wrong size on WindManager_C_SetRenderOnlyAssets");
static_assert(offsetof(WindManager_C_SetRenderOnlyAssets, InComponent) == 0x000000, "Member 'WindManager_C_SetRenderOnlyAssets::InComponent' has a wrong offset!");

// Function WindManager.WindManager_C.Calculate Camera Position
// 0x00C0 (0x00C0 - 0x0000)
struct WindManager_C_Calculate_Camera_Position final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               Scene_Capture;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorFloat_ReturnValue;         // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue_1;                      // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue_2;                      // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_4;            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindManager_C_Calculate_Camera_Position) == 0x000008, "Wrong alignment on WindManager_C_Calculate_Camera_Position");
static_assert(sizeof(WindManager_C_Calculate_Camera_Position) == 0x0000C0, "Wrong size on WindManager_C_Calculate_Camera_Position");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, Scale) == 0x000000, "Member 'WindManager_C_Calculate_Camera_Position::Scale' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, Scene_Capture) == 0x000008, "Member 'WindManager_C_Calculate_Camera_Position::Scene_Capture' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, ReturnValue) == 0x000010, "Member 'WindManager_C_Calculate_Camera_Position::ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000020, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_GetCameraLocation_ReturnValue) == 0x000028, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000034, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000040, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000050, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_MakeVector_ReturnValue_1) == 0x000054, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000060, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_Divide_VectorVector_ReturnValue) == 0x00006C, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_Subtract_VectorFloat_ReturnValue) == 0x000078, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_Subtract_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_BreakVector_X) == 0x000084, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_BreakVector_Y) == 0x000088, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_BreakVector_Z) == 0x00008C, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_FCeil_ReturnValue) == 0x000090, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_FCeil_ReturnValue_1) == 0x000094, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_FCeil_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000098, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x00009C, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_FCeil_ReturnValue_2) == 0x0000A0, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_FCeil_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_Conv_IntToFloat_ReturnValue_4) == 0x0000A4, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_Conv_IntToFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_MakeVector_ReturnValue_2) == 0x0000A8, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_Calculate_Camera_Position, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0000B4, "Member 'WindManager_C_Calculate_Camera_Position::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");

// Function WindManager.WindManager_C.UpdateStormWindCylinder
// 0x0320 (0x0320 - 0x0000)
struct WindManager_C_UpdateStormWindCylinder final
{
public:
	struct FFortWindImpulseCylinder               Wind_Impulse;                                      // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FFortWindImpulseCylinderDelta          Wind_Delta;                                        // 0x0048(0x0090)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00E0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakWindImpulseCylinderDelta_WindDeltaCenter; // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakWindImpulseCylinderDelta_bWindImpulseInitialized; // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakWindImpulseCylinderDelta_bWindRipplesOutward; // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionWidth; // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderDelta_WindDeltaInnerSectionRadius; // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderDelta_WindDeltaOuterSectionRadius; // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderDelta_WindDeltaMaximumRadius; // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderDelta_WindDeltaDesiredOverallBlendTime; // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionBlendTime; // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionCurrentBlendTime; // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderDelta_WindDeltaPreviousMagnitude; // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionCurrentMagnitude; // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderDelta_WindDeltaDesiredMagnitude; // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_BreakWindImpulseCylinderDelta_WindDeltaOuterWorldBounds; // 0x0148(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                   CallFunc_BreakWindImpulseCylinderDelta_WindDeltaInnerWorldBounds; // 0x0164(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                   CallFunc_BreakWindImpulseCylinderDelta_WindImpulseBounds; // 0x0180(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFortWindImpulseHandle                 CallFunc_BreakWindImpulseCylinderDelta_WindImpulseHandleToModify; // 0x019C(0x0004)(NoDestructor)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation; // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius; // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius; // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection; // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude; // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds; // 0x01CC(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging; // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending; // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0230(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Storm_Cyl_Mesh_Match; // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Wind_Cyl_Mesh_Array_Match_Index; // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0268(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_MakeLiteralBool_ReturnValue;              // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWindMatVariables_NewParam;             // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x02F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetWindMatVariables_NewParam_1;           // 0x0319(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WindManager_C_UpdateStormWindCylinder) == 0x000010, "Wrong alignment on WindManager_C_UpdateStormWindCylinder");
static_assert(sizeof(WindManager_C_UpdateStormWindCylinder) == 0x000320, "Wrong size on WindManager_C_UpdateStormWindCylinder");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, Wind_Impulse) == 0x000000, "Member 'WindManager_C_UpdateStormWindCylinder::Wind_Impulse' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, Wind_Delta) == 0x000048, "Member 'WindManager_C_UpdateStormWindCylinder::Wind_Delta' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_MakeTransform_ReturnValue) == 0x0000E0, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaCenter) == 0x000110, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaCenter' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_bWindImpulseInitialized) == 0x00011C, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_bWindImpulseInitialized' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_bWindRipplesOutward) == 0x00011D, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_bWindRipplesOutward' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionWidth) == 0x000120, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionWidth' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaInnerSectionRadius) == 0x000124, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaInnerSectionRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaOuterSectionRadius) == 0x000128, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaOuterSectionRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaMaximumRadius) == 0x00012C, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaMaximumRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaDesiredOverallBlendTime) == 0x000130, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaDesiredOverallBlendTime' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionBlendTime) == 0x000134, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionBlendTime' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionCurrentBlendTime) == 0x000138, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionCurrentBlendTime' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaPreviousMagnitude) == 0x00013C, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaPreviousMagnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionCurrentMagnitude) == 0x000140, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaSectionCurrentMagnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaDesiredMagnitude) == 0x000144, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaDesiredMagnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaOuterWorldBounds) == 0x000148, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaOuterWorldBounds' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindDeltaInnerWorldBounds) == 0x000164, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindDeltaInnerWorldBounds' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindImpulseBounds) == 0x000180, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindImpulseBounds' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderDelta_WindImpulseHandleToModify) == 0x00019C, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderDelta_WindImpulseHandleToModify' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_AddComponent_ReturnValue) == 0x0001A0, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation) == 0x0001A8, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius) == 0x0001B4, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius) == 0x0001B8, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection) == 0x0001BC, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude) == 0x0001C8, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds) == 0x0001CC, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging) == 0x0001E8, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending) == 0x0001E9, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0001F0, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_Cross_VectorVector_ReturnValue) == 0x0001F8, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000204, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000208, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000214, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000218, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00021C, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000220, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_MakeTransform_ReturnValue_1) == 0x000230, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Storm_Cyl_Mesh_Match) == 0x000260, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Storm_Cyl_Mesh_Match' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Wind_Cyl_Mesh_Array_Match_Index) == 0x000264, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_Find_Matching_Wind_Mesh_Index_And_Write_Bool_Wind_Cyl_Mesh_Array_Match_Index' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000268, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_MakeLiteralBool_ReturnValue) == 0x0002F0, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_MakeLiteralBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_SetWindMatVariables_NewParam) == 0x0002F1, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_SetWindMatVariables_NewParam' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_Array_Get_Item) == 0x0002F8, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_Array_Add_ReturnValue) == 0x000300, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_GetMaterial_ReturnValue) == 0x000308, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000310, "Member 'WindManager_C_UpdateStormWindCylinder::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, K2Node_DynamicCast_bSuccess) == 0x000318, "Member 'WindManager_C_UpdateStormWindCylinder::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateStormWindCylinder, CallFunc_SetWindMatVariables_NewParam_1) == 0x000319, "Member 'WindManager_C_UpdateStormWindCylinder::CallFunc_SetWindMatVariables_NewParam_1' has a wrong offset!");

// Function WindManager.WindManager_C.RemoveWindCylinder
// 0x00E8 (0x00E8 - 0x0000)
struct WindManager_C_RemoveWindCylinder final
{
public:
	struct FFortWindImpulseCylinder               WindImpulseCylinder;                               // 0x0000(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	class UStaticMeshComponent*                   CurrentStormCylinder;                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation; // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius; // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection; // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds; // 0x0078(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging; // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending; // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WindManager_C_RemoveWindCylinder) == 0x000008, "Wrong alignment on WindManager_C_RemoveWindCylinder");
static_assert(sizeof(WindManager_C_RemoveWindCylinder) == 0x0000E8, "Wrong size on WindManager_C_RemoveWindCylinder");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, WindImpulseCylinder) == 0x000000, "Member 'WindManager_C_RemoveWindCylinder::WindImpulseCylinder' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CurrentStormCylinder) == 0x000048, "Member 'WindManager_C_RemoveWindCylinder::CurrentStormCylinder' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, Temp_bool_True_if_break_was_hit_Variable) == 0x000050, "Member 'WindManager_C_RemoveWindCylinder::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation) == 0x000054, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindLocation' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius) == 0x000060, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindInnerRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius) == 0x000064, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindOuterRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection) == 0x000068, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldDirection' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude) == 0x000074, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindMagnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds) == 0x000078, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_WindWorldBounds' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging) == 0x000094, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChanging' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending) == 0x000095, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_BreakWindImpulseCylinderAdvanced_bIsWindChangePending' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000098, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_Not_PreBool_ReturnValue) == 0x0000A4, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, Temp_int_Array_Index_Variable) == 0x0000A8, "Member 'WindManager_C_RemoveWindCylinder::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, Temp_int_Loop_Counter_Variable) == 0x0000AC, "Member 'WindManager_C_RemoveWindCylinder::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_Add_IntInt_ReturnValue) == 0x0000B0, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_Array_Get_Item) == 0x0000B8, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_Array_Length_ReturnValue) == 0x0000C0, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_Less_IntInt_ReturnValue) == 0x0000C4, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_Array_RemoveItem_ReturnValue) == 0x0000C5, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_BooleanAND_ReturnValue) == 0x0000C6, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000C8, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0000D4, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_RemoveWindCylinder, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x0000E0, "Member 'WindManager_C_RemoveWindCylinder::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");

// Function WindManager.WindManager_C.UpdateWindDeltaCyl
// 0x0040 (0x0040 - 0x0000)
struct WindManager_C_UpdateWindDeltaCyl final
{
public:
	float                                         Static_Cylinder_Outer_Radius;                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Duration;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Wind_Circular_;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindManager_C_UpdateWindDeltaCyl) == 0x000008, "Wrong alignment on WindManager_C_UpdateWindDeltaCyl");
static_assert(sizeof(WindManager_C_UpdateWindDeltaCyl) == 0x000040, "Wrong size on WindManager_C_UpdateWindDeltaCyl");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, Static_Cylinder_Outer_Radius) == 0x000000, "Member 'WindManager_C_UpdateWindDeltaCyl::Static_Cylinder_Outer_Radius' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, Duration) == 0x000004, "Member 'WindManager_C_UpdateWindDeltaCyl::Duration' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, Mid) == 0x000008, "Member 'WindManager_C_UpdateWindDeltaCyl::Mid' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, Is_Wind_Circular_) == 0x000010, "Member 'WindManager_C_UpdateWindDeltaCyl::Is_Wind_Circular_' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, Temp_float_Variable) == 0x000014, "Member 'WindManager_C_UpdateWindDeltaCyl::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, Temp_bool_Variable) == 0x000018, "Member 'WindManager_C_UpdateWindDeltaCyl::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, Temp_float_Variable_1) == 0x00001C, "Member 'WindManager_C_UpdateWindDeltaCyl::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, Temp_bool_Variable_1) == 0x000020, "Member 'WindManager_C_UpdateWindDeltaCyl::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, Temp_bool_Variable_2) == 0x000021, "Member 'WindManager_C_UpdateWindDeltaCyl::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, Temp_bool_Variable_3) == 0x000022, "Member 'WindManager_C_UpdateWindDeltaCyl::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'WindManager_C_UpdateWindDeltaCyl::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'WindManager_C_UpdateWindDeltaCyl::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, K2Node_Select_Default) == 0x00002C, "Member 'WindManager_C_UpdateWindDeltaCyl::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, K2Node_Select_Default_1) == 0x000030, "Member 'WindManager_C_UpdateWindDeltaCyl::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, K2Node_Select_Default_2) == 0x000034, "Member 'WindManager_C_UpdateWindDeltaCyl::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_UpdateWindDeltaCyl, K2Node_Select_Default_3) == 0x000038, "Member 'WindManager_C_UpdateWindDeltaCyl::K2Node_Select_Default_3' has a wrong offset!");

// Function WindManager.WindManager_C.SetWindMatVariables
// 0x0110 (0x0110 - 0x0000)
struct WindManager_C_SetWindMatVariables final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_AnimatedCylinderCenter;                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AnimatedCylinderCenter;                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_Animating_Wind_Magnitude;                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Animating_Wind_Magnitude;                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_Static_Wind_Magnitude;                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Static_Wind_Magnitude;                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_CylinderCenter;                                // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CylinderCenter;                                    // 0x002C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_WindVector;                                    // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WindVector;                                        // 0x003C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_WindCrossVector;                               // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WindCrossVector;                                   // 0x004C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_OverallOuterRadius;                            // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverallOuterRadius;                                // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_OverallInnerRadius;                            // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverallInnerRadius;                                // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_Wind_Still_0_or_Animating_1;                   // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Wind_Still_0_or_Animating_1;                       // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_Circular_Shader_;                              // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Circular_Shader_;                                  // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x007C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_1;            // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_2;            // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_3;            // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_4;            // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_5;            // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x00BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_6;            // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_7;            // 0x00D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_8;            // 0x00DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_9;            // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_2;   // 0x00EC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_3;   // 0x00FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WindManager_C_SetWindMatVariables) == 0x000008, "Wrong alignment on WindManager_C_SetWindMatVariables");
static_assert(sizeof(WindManager_C_SetWindMatVariables) == 0x000110, "Wrong size on WindManager_C_SetWindMatVariables");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Mid) == 0x000000, "Member 'WindManager_C_SetWindMatVariables::Mid' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Set_AnimatedCylinderCenter) == 0x000008, "Member 'WindManager_C_SetWindMatVariables::Set_AnimatedCylinderCenter' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, AnimatedCylinderCenter) == 0x00000C, "Member 'WindManager_C_SetWindMatVariables::AnimatedCylinderCenter' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Set_Animating_Wind_Magnitude) == 0x000018, "Member 'WindManager_C_SetWindMatVariables::Set_Animating_Wind_Magnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Animating_Wind_Magnitude) == 0x00001C, "Member 'WindManager_C_SetWindMatVariables::Animating_Wind_Magnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Set_Static_Wind_Magnitude) == 0x000020, "Member 'WindManager_C_SetWindMatVariables::Set_Static_Wind_Magnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Static_Wind_Magnitude) == 0x000024, "Member 'WindManager_C_SetWindMatVariables::Static_Wind_Magnitude' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Set_CylinderCenter) == 0x000028, "Member 'WindManager_C_SetWindMatVariables::Set_CylinderCenter' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CylinderCenter) == 0x00002C, "Member 'WindManager_C_SetWindMatVariables::CylinderCenter' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Set_WindVector) == 0x000038, "Member 'WindManager_C_SetWindMatVariables::Set_WindVector' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, WindVector) == 0x00003C, "Member 'WindManager_C_SetWindMatVariables::WindVector' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Set_WindCrossVector) == 0x000048, "Member 'WindManager_C_SetWindMatVariables::Set_WindCrossVector' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, WindCrossVector) == 0x00004C, "Member 'WindManager_C_SetWindMatVariables::WindCrossVector' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Set_OverallOuterRadius) == 0x000058, "Member 'WindManager_C_SetWindMatVariables::Set_OverallOuterRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, OverallOuterRadius) == 0x00005C, "Member 'WindManager_C_SetWindMatVariables::OverallOuterRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Set_OverallInnerRadius) == 0x000060, "Member 'WindManager_C_SetWindMatVariables::Set_OverallInnerRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, OverallInnerRadius) == 0x000064, "Member 'WindManager_C_SetWindMatVariables::OverallInnerRadius' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Set_Wind_Still_0_or_Animating_1) == 0x000068, "Member 'WindManager_C_SetWindMatVariables::Set_Wind_Still_0_or_Animating_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Wind_Still_0_or_Animating_1) == 0x00006C, "Member 'WindManager_C_SetWindMatVariables::Wind_Still_0_or_Animating_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Set_Circular_Shader_) == 0x000070, "Member 'WindManager_C_SetWindMatVariables::Set_Circular_Shader_' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, Circular_Shader_) == 0x000074, "Member 'WindManager_C_SetWindMatVariables::Circular_Shader_' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, NewParam) == 0x000078, "Member 'WindManager_C_SetWindMatVariables::NewParam' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x00007C, "Member 'WindManager_C_SetWindMatVariables::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_MakeLiteralName_ReturnValue) == 0x00008C, "Member 'WindManager_C_SetWindMatVariables::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_MakeLiteralName_ReturnValue_1) == 0x000094, "Member 'WindManager_C_SetWindMatVariables::CallFunc_MakeLiteralName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_MakeLiteralName_ReturnValue_2) == 0x00009C, "Member 'WindManager_C_SetWindMatVariables::CallFunc_MakeLiteralName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_MakeLiteralName_ReturnValue_3) == 0x0000A4, "Member 'WindManager_C_SetWindMatVariables::CallFunc_MakeLiteralName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_MakeLiteralName_ReturnValue_4) == 0x0000AC, "Member 'WindManager_C_SetWindMatVariables::CallFunc_MakeLiteralName_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_MakeLiteralName_ReturnValue_5) == 0x0000B4, "Member 'WindManager_C_SetWindMatVariables::CallFunc_MakeLiteralName_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x0000BC, "Member 'WindManager_C_SetWindMatVariables::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_MakeLiteralName_ReturnValue_6) == 0x0000CC, "Member 'WindManager_C_SetWindMatVariables::CallFunc_MakeLiteralName_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_MakeLiteralName_ReturnValue_7) == 0x0000D4, "Member 'WindManager_C_SetWindMatVariables::CallFunc_MakeLiteralName_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_MakeLiteralName_ReturnValue_8) == 0x0000DC, "Member 'WindManager_C_SetWindMatVariables::CallFunc_MakeLiteralName_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_MakeLiteralName_ReturnValue_9) == 0x0000E4, "Member 'WindManager_C_SetWindMatVariables::CallFunc_MakeLiteralName_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_Conv_VectorToLinearColor_ReturnValue_2) == 0x0000EC, "Member 'WindManager_C_SetWindMatVariables::CallFunc_Conv_VectorToLinearColor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WindManager_C_SetWindMatVariables, CallFunc_Conv_VectorToLinearColor_ReturnValue_3) == 0x0000FC, "Member 'WindManager_C_SetWindMatVariables::CallFunc_Conv_VectorToLinearColor_ReturnValue_3' has a wrong offset!");

// Function WindManager.WindManager_C.Find Matching Wind Mesh Index And Write Bool
// 0x0068 (0x0068 - 0x0000)
struct WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool final
{
public:
	struct FVector                                Wind_location;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_Storm_Cyl_Mesh_Match;                        // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Wind_Cyl_Mesh_Array_Match_Index;             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool) == 0x000008, "Wrong alignment on WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool");
static_assert(sizeof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool) == 0x000068, "Wrong size on WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, Wind_location) == 0x000000, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::Wind_location' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, Param_Storm_Cyl_Mesh_Match) == 0x00000C, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::Param_Storm_Cyl_Mesh_Match' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, Param_Wind_Cyl_Mesh_Array_Match_Index) == 0x000010, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::Param_Wind_Cyl_Mesh_Array_Match_Index' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000014, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, Temp_bool_True_if_break_was_hit_Variable) == 0x000020, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, Temp_int_Array_Index_Variable) == 0x000024, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, CallFunc_Array_Get_Item) == 0x000038, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000044, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000054, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000060, "Member 'WindManager_C_Find_Matching_Wind_Mesh_Index_And_Write_Bool::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");

}

