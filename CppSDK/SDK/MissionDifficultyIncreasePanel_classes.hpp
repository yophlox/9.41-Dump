#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MissionDifficultyIncreasePanel

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass MissionDifficultyIncreasePanel.MissionDifficultyIncreasePanel_C
// 0x00E0 (0x0338 - 0x0258)
class UMissionDifficultyIncreasePanel_C final : public UFortMissionActivationWidgetPanel
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0258(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       HideLockout;                                       // 0x0260(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ShowLockout;                                       // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HoverStateMinusOff;                                // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ClosePanel;                                        // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HoverStateMinusOn;                                 // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       OpenPanel;                                         // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 DifficultyMeter;                                   // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       DifficultyRating;                                  // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageHighlighted;                                  // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageLockout;                                      // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IncreaseArrow;                                     // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       LockoutText;                                       // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       LockoutTimeRemainingText;                          // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             RewardsList;                                       // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           RewardsWrapper;                                    // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Shadow;                                            // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Title;                                             // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         List_Item_Index;                                   // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RewardListAnimTimer;                               // 0x02F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           LockoutTimer;                                      // 0x02F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PlaySpeed;                                         // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortVoteType                                 CurrentVoteType;                                   // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             LockoutEndedAnimFinished;                          // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             HidePanelAnimFinished;                             // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UTexture*>                       Difficulty_Image_List;                             // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void LockoutEndedAnimFinished__DelegateSignature();
	void HidePanelAnimFinished__DelegateSignature();
	void ExecuteUbergraph_MissionDifficultyIncreasePanel(int32 EntryPoint);
	void OnActiveVoteChangedBP(EFortVoteType VoteType, bool bIsVoteActive, int32 VoteResult);
	void HandleHidePanelFinished();
	void RewardAnimTrigger();
	void Destruct();
	void Construct();
	void InfoObjectUpdated();
	void HidePanel();
	void ShowPanel(bool ForceFinalState);
	void UpdateRewards();
	void UpdateDifficultyRating();
	void HoverMinusAnim();
	void LeaveMinusAnim();
	void RewardMinusListAnim();
	void RewadMinusIntroRewind();
	void RewardMinusIntroReset();
	void ShowLockoutState();
	void UpdateLockoutTimer();
	void DifficultyVoteUpdated(EFortVoteStatus VoteStatus, TArray<struct FVoter>& Voters);
	void HideLockoutState();
	void BindDelegates();
	void UnbindDelegates();
	void GetIsGroupMission(bool* IsGroupMission);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MissionDifficultyIncreasePanel_C">();
	}
	static class UMissionDifficultyIncreasePanel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMissionDifficultyIncreasePanel_C>();
	}
};
static_assert(alignof(UMissionDifficultyIncreasePanel_C) == 0x000008, "Wrong alignment on UMissionDifficultyIncreasePanel_C");
static_assert(sizeof(UMissionDifficultyIncreasePanel_C) == 0x000338, "Wrong size on UMissionDifficultyIncreasePanel_C");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, UberGraphFrame) == 0x000258, "Member 'UMissionDifficultyIncreasePanel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, HideLockout) == 0x000260, "Member 'UMissionDifficultyIncreasePanel_C::HideLockout' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, ShowLockout) == 0x000268, "Member 'UMissionDifficultyIncreasePanel_C::ShowLockout' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, HoverStateMinusOff) == 0x000270, "Member 'UMissionDifficultyIncreasePanel_C::HoverStateMinusOff' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, ClosePanel) == 0x000278, "Member 'UMissionDifficultyIncreasePanel_C::ClosePanel' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, HoverStateMinusOn) == 0x000280, "Member 'UMissionDifficultyIncreasePanel_C::HoverStateMinusOn' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, OpenPanel) == 0x000288, "Member 'UMissionDifficultyIncreasePanel_C::OpenPanel' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, DifficultyMeter) == 0x000290, "Member 'UMissionDifficultyIncreasePanel_C::DifficultyMeter' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, DifficultyRating) == 0x000298, "Member 'UMissionDifficultyIncreasePanel_C::DifficultyRating' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, ImageHighlighted) == 0x0002A0, "Member 'UMissionDifficultyIncreasePanel_C::ImageHighlighted' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, ImageLockout) == 0x0002A8, "Member 'UMissionDifficultyIncreasePanel_C::ImageLockout' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, IncreaseArrow) == 0x0002B0, "Member 'UMissionDifficultyIncreasePanel_C::IncreaseArrow' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, LockoutText) == 0x0002B8, "Member 'UMissionDifficultyIncreasePanel_C::LockoutText' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, LockoutTimeRemainingText) == 0x0002C0, "Member 'UMissionDifficultyIncreasePanel_C::LockoutTimeRemainingText' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, RewardsList) == 0x0002C8, "Member 'UMissionDifficultyIncreasePanel_C::RewardsList' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, RewardsWrapper) == 0x0002D0, "Member 'UMissionDifficultyIncreasePanel_C::RewardsWrapper' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, Shadow) == 0x0002D8, "Member 'UMissionDifficultyIncreasePanel_C::Shadow' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, Title) == 0x0002E0, "Member 'UMissionDifficultyIncreasePanel_C::Title' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, List_Item_Index) == 0x0002E8, "Member 'UMissionDifficultyIncreasePanel_C::List_Item_Index' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, RewardListAnimTimer) == 0x0002F0, "Member 'UMissionDifficultyIncreasePanel_C::RewardListAnimTimer' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, LockoutTimer) == 0x0002F8, "Member 'UMissionDifficultyIncreasePanel_C::LockoutTimer' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, PlaySpeed) == 0x000300, "Member 'UMissionDifficultyIncreasePanel_C::PlaySpeed' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, CurrentVoteType) == 0x000304, "Member 'UMissionDifficultyIncreasePanel_C::CurrentVoteType' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, LockoutEndedAnimFinished) == 0x000308, "Member 'UMissionDifficultyIncreasePanel_C::LockoutEndedAnimFinished' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, HidePanelAnimFinished) == 0x000318, "Member 'UMissionDifficultyIncreasePanel_C::HidePanelAnimFinished' has a wrong offset!");
static_assert(offsetof(UMissionDifficultyIncreasePanel_C, Difficulty_Image_List) == 0x000328, "Member 'UMissionDifficultyIncreasePanel_C::Difficulty_Image_List' has a wrong offset!");

}

