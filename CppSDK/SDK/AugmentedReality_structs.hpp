#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AugmentedReality

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum AugmentedReality.EARTrackingState
// NumValues: 0x0005
enum class EARTrackingState : uint8
{
	Unknown                                  = 0,
	Tracking                                 = 1,
	NotTracking                              = 2,
	StoppedTracking                          = 3,
	EARTrackingState_MAX                     = 4,
};

// Enum AugmentedReality.EARFaceTrackingUpdate
// NumValues: 0x0003
enum class EARFaceTrackingUpdate : uint8
{
	CurvesAndGeo                             = 0,
	CurvesOnly                               = 1,
	EARFaceTrackingUpdate_MAX                = 2,
};

// Enum AugmentedReality.EAREnvironmentCaptureProbeType
// NumValues: 0x0004
enum class EAREnvironmentCaptureProbeType : uint8
{
	None                                     = 0,
	Manual                                   = 1,
	Automatic                                = 2,
	EAREnvironmentCaptureProbeType_MAX       = 3,
};

// Enum AugmentedReality.EARFrameSyncMode
// NumValues: 0x0003
enum class EARFrameSyncMode : uint8
{
	SyncTickWithCameraImage                  = 0,
	SyncTickWithoutCameraImage               = 1,
	EARFrameSyncMode_MAX                     = 2,
};

// Enum AugmentedReality.EARLightEstimationMode
// NumValues: 0x0004
enum class EARLightEstimationMode : uint8
{
	None                                     = 0,
	AmbientLightEstimate                     = 1,
	DirectionalLightEstimate                 = 2,
	EARLightEstimationMode_MAX               = 3,
};

// Enum AugmentedReality.EARPlaneDetectionMode
// NumValues: 0x0004
enum class EARPlaneDetectionMode : uint8
{
	None                                     = 0,
	HorizontalPlaneDetection                 = 1,
	VerticalPlaneDetection                   = 2,
	EARPlaneDetectionMode_MAX                = 3,
};

// Enum AugmentedReality.EARSessionType
// NumValues: 0x0007
enum class EARSessionType : uint8
{
	None                                     = 0,
	Orientation                              = 1,
	World                                    = 2,
	Face                                     = 3,
	Image                                    = 4,
	ObjectScanning                           = 5,
	EARSessionType_MAX                       = 6,
};

// Enum AugmentedReality.EARWorldAlignment
// NumValues: 0x0004
enum class EARWorldAlignment : uint8
{
	Gravity                                  = 0,
	GravityAndHeading                        = 1,
	Camera                                   = 2,
	EARWorldAlignment_MAX                    = 3,
};

// Enum AugmentedReality.EARDepthAccuracy
// NumValues: 0x0004
enum class EARDepthAccuracy : uint8
{
	Unkown                                   = 0,
	Approximate                              = 1,
	Accurate                                 = 2,
	EARDepthAccuracy_MAX                     = 3,
};

// Enum AugmentedReality.EARDepthQuality
// NumValues: 0x0004
enum class EARDepthQuality : uint8
{
	Unkown                                   = 0,
	Low                                      = 1,
	High                                     = 2,
	EARDepthQuality_MAX                      = 3,
};

// Enum AugmentedReality.EARTextureType
// NumValues: 0x0004
enum class EARTextureType : uint8
{
	CameraImage                              = 0,
	CameraDepth                              = 1,
	EnvironmentCapture                       = 2,
	EARTextureType_MAX                       = 3,
};

// Enum AugmentedReality.EAREye
// NumValues: 0x0003
enum class EAREye : uint8
{
	LeftEye                                  = 0,
	RightEye                                 = 1,
	EAREye_MAX                               = 2,
};

// Enum AugmentedReality.EARFaceBlendShape
// NumValues: 0x003E
enum class EARFaceBlendShape : uint8
{
	EyeBlinkLeft                             = 0,
	EyeLookDownLeft                          = 1,
	EyeLookInLeft                            = 2,
	EyeLookOutLeft                           = 3,
	EyeLookUpLeft                            = 4,
	EyeSquintLeft                            = 5,
	EyeWideLeft                              = 6,
	EyeBlinkRight                            = 7,
	EyeLookDownRight                         = 8,
	EyeLookInRight                           = 9,
	EyeLookOutRight                          = 10,
	EyeLookUpRight                           = 11,
	EyeSquintRight                           = 12,
	EyeWideRight                             = 13,
	JawForward                               = 14,
	JawLeft                                  = 15,
	JawRight                                 = 16,
	JawOpen                                  = 17,
	MouthClose                               = 18,
	MouthFunnel                              = 19,
	MouthPucker                              = 20,
	MouthLeft                                = 21,
	MouthRight                               = 22,
	MouthSmileLeft                           = 23,
	MouthSmileRight                          = 24,
	MouthFrownLeft                           = 25,
	MouthFrownRight                          = 26,
	MouthDimpleLeft                          = 27,
	MouthDimpleRight                         = 28,
	MouthStretchLeft                         = 29,
	MouthStretchRight                        = 30,
	MouthRollLower                           = 31,
	MouthRollUpper                           = 32,
	MouthShrugLower                          = 33,
	MouthShrugUpper                          = 34,
	MouthPressLeft                           = 35,
	MouthPressRight                          = 36,
	MouthLowerDownLeft                       = 37,
	MouthLowerDownRight                      = 38,
	MouthUpperUpLeft                         = 39,
	MouthUpperUpRight                        = 40,
	BrowDownLeft                             = 41,
	BrowDownRight                            = 42,
	BrowInnerUp                              = 43,
	BrowOuterUpLeft                          = 44,
	BrowOuterUpRight                         = 45,
	CheekPuff                                = 46,
	CheekSquintLeft                          = 47,
	CheekSquintRight                         = 48,
	NoseSneerLeft                            = 49,
	NoseSneerRight                           = 50,
	TongueOut                                = 51,
	HeadYaw                                  = 52,
	HeadPitch                                = 53,
	HeadRoll                                 = 54,
	LeftEyeYaw                               = 55,
	LeftEyePitch                             = 56,
	LeftEyeRoll                              = 57,
	RightEyeYaw                              = 58,
	RightEyePitch                            = 59,
	RightEyeRoll                             = 60,
	MAX                                      = 61,
};

// Enum AugmentedReality.EARFaceTrackingDirection
// NumValues: 0x0003
enum class EARFaceTrackingDirection : uint8
{
	FaceRelative                             = 0,
	FaceMirrored                             = 1,
	EARFaceTrackingDirection_MAX             = 2,
};

// Enum AugmentedReality.EARCandidateImageOrientation
// NumValues: 0x0003
enum class EARCandidateImageOrientation : uint8
{
	Landscape                                = 0,
	Portrait                                 = 1,
	EARCandidateImageOrientation_MAX         = 2,
};

// Enum AugmentedReality.EARWorldMappingState
// NumValues: 0x0005
enum class EARWorldMappingState : uint8
{
	NotAvailable                             = 0,
	StillMappingNotRelocalizable             = 1,
	StillMappingRelocalizable                = 2,
	Mapped                                   = 3,
	EARWorldMappingState_MAX                 = 4,
};

// Enum AugmentedReality.EARSessionStatus
// NumValues: 0x0008
enum class EARSessionStatus : uint8
{
	NotStarted                               = 0,
	Running                                  = 1,
	NotSupported                             = 2,
	FatalError                               = 3,
	PermissionNotGranted                     = 4,
	UnsupportedConfiguration                 = 5,
	Other                                    = 6,
	EARSessionStatus_MAX                     = 7,
};

// Enum AugmentedReality.EARTrackingQualityReason
// NumValues: 0x0006
enum class EARTrackingQualityReason : uint8
{
	None                                     = 0,
	Initializing                             = 1,
	Relocalizing                             = 2,
	ExcessiveMotion                          = 3,
	InsufficientFeatures                     = 4,
	EARTrackingQualityReason_MAX             = 5,
};

// Enum AugmentedReality.EARTrackingQuality
// NumValues: 0x0004
enum class EARTrackingQuality : uint8
{
	NotTracking                              = 0,
	OrientationOnly                          = 1,
	OrientationAndPosition                   = 2,
	EARTrackingQuality_MAX                   = 3,
};

// Enum AugmentedReality.EARLineTraceChannels
// NumValues: 0x0006
enum class EARLineTraceChannels : uint8
{
	None                                     = 0,
	FeaturePoint                             = 1,
	GroundPlane                              = 2,
	PlaneUsingExtent                         = 4,
	PlaneUsingBoundaryPolygon                = 8,
	EARLineTraceChannels_MAX                 = 9,
};

// ScriptStruct AugmentedReality.ARSharedWorldReplicationState
// 0x0008 (0x0008 - 0x0000)
struct FARSharedWorldReplicationState final
{
public:
	int32                                         PreviewImageOffset;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ARWorldOffset;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FARSharedWorldReplicationState) == 0x000004, "Wrong alignment on FARSharedWorldReplicationState");
static_assert(sizeof(FARSharedWorldReplicationState) == 0x000008, "Wrong size on FARSharedWorldReplicationState");
static_assert(offsetof(FARSharedWorldReplicationState, PreviewImageOffset) == 0x000000, "Member 'FARSharedWorldReplicationState::PreviewImageOffset' has a wrong offset!");
static_assert(offsetof(FARSharedWorldReplicationState, ARWorldOffset) == 0x000004, "Member 'FARSharedWorldReplicationState::ARWorldOffset' has a wrong offset!");

// ScriptStruct AugmentedReality.ARTraceResult
// 0x0060 (0x0060 - 0x0000)
struct FARTraceResult final
{
public:
	float                                         DistanceFromCamera;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EARLineTraceChannels                          TraceChannel;                                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalToTrackingTransform;                          // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	class UARTrackedGeometry*                     TrackedGeometry;                                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FARTraceResult) == 0x000010, "Wrong alignment on FARTraceResult");
static_assert(sizeof(FARTraceResult) == 0x000060, "Wrong size on FARTraceResult");
static_assert(offsetof(FARTraceResult, DistanceFromCamera) == 0x000000, "Member 'FARTraceResult::DistanceFromCamera' has a wrong offset!");
static_assert(offsetof(FARTraceResult, TraceChannel) == 0x000004, "Member 'FARTraceResult::TraceChannel' has a wrong offset!");
static_assert(offsetof(FARTraceResult, LocalToTrackingTransform) == 0x000010, "Member 'FARTraceResult::LocalToTrackingTransform' has a wrong offset!");
static_assert(offsetof(FARTraceResult, TrackedGeometry) == 0x000040, "Member 'FARTraceResult::TrackedGeometry' has a wrong offset!");

// ScriptStruct AugmentedReality.ARVideoFormat
// 0x000C (0x000C - 0x0000)
struct FARVideoFormat final
{
public:
	int32                                         FPS;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FARVideoFormat) == 0x000004, "Wrong alignment on FARVideoFormat");
static_assert(sizeof(FARVideoFormat) == 0x00000C, "Wrong size on FARVideoFormat");
static_assert(offsetof(FARVideoFormat, FPS) == 0x000000, "Member 'FARVideoFormat::FPS' has a wrong offset!");
static_assert(offsetof(FARVideoFormat, Width) == 0x000004, "Member 'FARVideoFormat::Width' has a wrong offset!");
static_assert(offsetof(FARVideoFormat, Height) == 0x000008, "Member 'FARVideoFormat::Height' has a wrong offset!");

// ScriptStruct AugmentedReality.ARSessionStatus
// 0x0018 (0x0018 - 0x0000)
struct FARSessionStatus final
{
public:
	class FString                                 AdditionalInfo;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EARSessionStatus                              Status;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FARSessionStatus) == 0x000008, "Wrong alignment on FARSessionStatus");
static_assert(sizeof(FARSessionStatus) == 0x000018, "Wrong size on FARSessionStatus");
static_assert(offsetof(FARSessionStatus, AdditionalInfo) == 0x000000, "Member 'FARSessionStatus::AdditionalInfo' has a wrong offset!");
static_assert(offsetof(FARSessionStatus, Status) == 0x000010, "Member 'FARSessionStatus::Status' has a wrong offset!");

}

