#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MIDIDevice

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "MIDIDevice_structs.hpp"


namespace SDK
{

// Class MIDIDevice.MIDIDeviceController
// 0x0038 (0x0060 - 0x0028)
class UMIDIDeviceController final : public UObject
{
public:
	UMulticastInlineDelegateProperty_             OnMIDIEvent;                                       // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         DeviceID;                                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceName;                                        // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MIDIDeviceController">();
	}
	static class UMIDIDeviceController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMIDIDeviceController>();
	}
};
static_assert(alignof(UMIDIDeviceController) == 0x000008, "Wrong alignment on UMIDIDeviceController");
static_assert(sizeof(UMIDIDeviceController) == 0x000060, "Wrong size on UMIDIDeviceController");
static_assert(offsetof(UMIDIDeviceController, OnMIDIEvent) == 0x000028, "Member 'UMIDIDeviceController::OnMIDIEvent' has a wrong offset!");
static_assert(offsetof(UMIDIDeviceController, DeviceID) == 0x000038, "Member 'UMIDIDeviceController::DeviceID' has a wrong offset!");
static_assert(offsetof(UMIDIDeviceController, DeviceName) == 0x000040, "Member 'UMIDIDeviceController::DeviceName' has a wrong offset!");

// Class MIDIDevice.MIDIDeviceInputController
// 0x0098 (0x00C0 - 0x0028)
class UMIDIDeviceInputController final : public UObject
{
public:
	UMulticastInlineDelegateProperty_             OnMIDINoteOn;                                      // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMIDINoteOff;                                     // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMIDIPitchBend;                                   // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMIDIAftertouch;                                  // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMIDIControlChange;                               // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMIDIProgramChange;                               // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastInlineDelegateProperty_             OnMIDIChannelAftertouch;                           // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         DeviceID;                                          // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceName;                                        // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MIDIDeviceInputController">();
	}
	static class UMIDIDeviceInputController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMIDIDeviceInputController>();
	}
};
static_assert(alignof(UMIDIDeviceInputController) == 0x000008, "Wrong alignment on UMIDIDeviceInputController");
static_assert(sizeof(UMIDIDeviceInputController) == 0x0000C0, "Wrong size on UMIDIDeviceInputController");
static_assert(offsetof(UMIDIDeviceInputController, OnMIDINoteOn) == 0x000028, "Member 'UMIDIDeviceInputController::OnMIDINoteOn' has a wrong offset!");
static_assert(offsetof(UMIDIDeviceInputController, OnMIDINoteOff) == 0x000038, "Member 'UMIDIDeviceInputController::OnMIDINoteOff' has a wrong offset!");
static_assert(offsetof(UMIDIDeviceInputController, OnMIDIPitchBend) == 0x000048, "Member 'UMIDIDeviceInputController::OnMIDIPitchBend' has a wrong offset!");
static_assert(offsetof(UMIDIDeviceInputController, OnMIDIAftertouch) == 0x000058, "Member 'UMIDIDeviceInputController::OnMIDIAftertouch' has a wrong offset!");
static_assert(offsetof(UMIDIDeviceInputController, OnMIDIControlChange) == 0x000068, "Member 'UMIDIDeviceInputController::OnMIDIControlChange' has a wrong offset!");
static_assert(offsetof(UMIDIDeviceInputController, OnMIDIProgramChange) == 0x000078, "Member 'UMIDIDeviceInputController::OnMIDIProgramChange' has a wrong offset!");
static_assert(offsetof(UMIDIDeviceInputController, OnMIDIChannelAftertouch) == 0x000088, "Member 'UMIDIDeviceInputController::OnMIDIChannelAftertouch' has a wrong offset!");
static_assert(offsetof(UMIDIDeviceInputController, DeviceID) == 0x000098, "Member 'UMIDIDeviceInputController::DeviceID' has a wrong offset!");
static_assert(offsetof(UMIDIDeviceInputController, DeviceName) == 0x0000A0, "Member 'UMIDIDeviceInputController::DeviceName' has a wrong offset!");

// Class MIDIDevice.MIDIDeviceManager
// 0x0000 (0x0028 - 0x0028)
class UMIDIDeviceManager final : public UBlueprintFunctionLibrary
{
public:
	static class UMIDIDeviceController* CreateMIDIDeviceController(const int32 DeviceID, const int32 MIDIBufferSize);
	static class UMIDIDeviceInputController* CreateMIDIDeviceInputController(const int32 DeviceID, const int32 MIDIBufferSize);
	static class UMIDIDeviceOutputController* CreateMIDIDeviceOutputController(const int32 DeviceID);
	static void FindAllMIDIDeviceInfo(TArray<struct FMIDIDeviceInfo>* OutMIDIInputDevices, TArray<struct FMIDIDeviceInfo>* OutMIDIOutputDevices);
	static void FindMIDIDevices(TArray<struct FFoundMIDIDevice>* OutMIDIDevices);
	static void GetDefaultIMIDIInputDeviceID(int32* DeviceID);
	static void GetDefaultIMIDIOutputDeviceID(int32* DeviceID);
	static void GetMIDIInputDeviceIDByName(const class FString& DeviceName, int32* DeviceID);
	static void GetMIDIOutputDeviceIDByName(const class FString& DeviceName, int32* DeviceID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MIDIDeviceManager">();
	}
	static class UMIDIDeviceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMIDIDeviceManager>();
	}
};
static_assert(alignof(UMIDIDeviceManager) == 0x000008, "Wrong alignment on UMIDIDeviceManager");
static_assert(sizeof(UMIDIDeviceManager) == 0x000028, "Wrong size on UMIDIDeviceManager");

// Class MIDIDevice.MIDIDeviceOutputController
// 0x0020 (0x0048 - 0x0028)
class UMIDIDeviceOutputController final : public UObject
{
public:
	int32                                         DeviceID;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceName;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SendMIDIChannelAftertouch(int32 Channel, float Amount);
	void SendMIDIControlChange(int32 Channel, int32 Type, int32 Value);
	void SendMIDIEvent(EMIDIEventType EventType, int32 Channel, int32 Data1, int32 Data2);
	void SendMIDINoteAftertouch(int32 Channel, int32 Note, float Amount);
	void SendMIDINoteOff(int32 Channel, int32 Note, int32 Velocity);
	void SendMIDINoteOn(int32 Channel, int32 Note, int32 Velocity);
	void SendMIDIPitchBend(int32 Channel, int32 Pitch);
	void SendMIDIProgramChange(int32 Channel, int32 ProgramNumber);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MIDIDeviceOutputController">();
	}
	static class UMIDIDeviceOutputController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMIDIDeviceOutputController>();
	}
};
static_assert(alignof(UMIDIDeviceOutputController) == 0x000008, "Wrong alignment on UMIDIDeviceOutputController");
static_assert(sizeof(UMIDIDeviceOutputController) == 0x000048, "Wrong size on UMIDIDeviceOutputController");
static_assert(offsetof(UMIDIDeviceOutputController, DeviceID) == 0x000028, "Member 'UMIDIDeviceOutputController::DeviceID' has a wrong offset!");
static_assert(offsetof(UMIDIDeviceOutputController, DeviceName) == 0x000030, "Member 'UMIDIDeviceOutputController::DeviceName' has a wrong offset!");

}

