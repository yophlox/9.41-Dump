#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NetUI

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class NetUI.BadNetworkIndicator
// 0x0040 (0x0268 - 0x0228)
class UBadNetworkIndicator final : public UUserWidget
{
public:
	bool                                          bEnabled;                                          // 0x0228(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDisplayTime;                                // 0x022C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UpdateTime;                                        // 0x0230(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InitialDelay;                                      // 0x0234(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_238[0x30];                                     // 0x0238(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateDisplay();

	float GetPacketLoss() const;
	float GetPing() const;
	bool HasBadPacketLoss() const;
	bool HasBadPing() const;
	bool HasSeverePacketLoss() const;
	bool HasSeverePing() const;
	bool ShouldDisplay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BadNetworkIndicator">();
	}
	static class UBadNetworkIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBadNetworkIndicator>();
	}
};
static_assert(alignof(UBadNetworkIndicator) == 0x000008, "Wrong alignment on UBadNetworkIndicator");
static_assert(sizeof(UBadNetworkIndicator) == 0x000268, "Wrong size on UBadNetworkIndicator");
static_assert(offsetof(UBadNetworkIndicator, bEnabled) == 0x000228, "Member 'UBadNetworkIndicator::bEnabled' has a wrong offset!");
static_assert(offsetof(UBadNetworkIndicator, MinimumDisplayTime) == 0x00022C, "Member 'UBadNetworkIndicator::MinimumDisplayTime' has a wrong offset!");
static_assert(offsetof(UBadNetworkIndicator, UpdateTime) == 0x000230, "Member 'UBadNetworkIndicator::UpdateTime' has a wrong offset!");
static_assert(offsetof(UBadNetworkIndicator, InitialDelay) == 0x000234, "Member 'UBadNetworkIndicator::InitialDelay' has a wrong offset!");

// Class NetUI.NetDebugWidget
// 0x0100 (0x0328 - 0x0228)
class UNetDebugWidget final : public UUserWidget
{
public:
	class UCommonTextBlock*                       PingUI;                                            // 0x0228(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       PacketInRateUI;                                    // 0x0230(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       PacketOutRateUI;                                   // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       PacketInLossUI;                                    // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       PacketOutLossUI;                                   // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       UpBandwidthUI;                                     // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       DownBandwidthUI;                                   // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_260[0xC8];                                     // 0x0260(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartTimer();
	void StopTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetDebugWidget">();
	}
	static class UNetDebugWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetDebugWidget>();
	}
};
static_assert(alignof(UNetDebugWidget) == 0x000008, "Wrong alignment on UNetDebugWidget");
static_assert(sizeof(UNetDebugWidget) == 0x000328, "Wrong size on UNetDebugWidget");
static_assert(offsetof(UNetDebugWidget, PingUI) == 0x000228, "Member 'UNetDebugWidget::PingUI' has a wrong offset!");
static_assert(offsetof(UNetDebugWidget, PacketInRateUI) == 0x000230, "Member 'UNetDebugWidget::PacketInRateUI' has a wrong offset!");
static_assert(offsetof(UNetDebugWidget, PacketOutRateUI) == 0x000238, "Member 'UNetDebugWidget::PacketOutRateUI' has a wrong offset!");
static_assert(offsetof(UNetDebugWidget, PacketInLossUI) == 0x000240, "Member 'UNetDebugWidget::PacketInLossUI' has a wrong offset!");
static_assert(offsetof(UNetDebugWidget, PacketOutLossUI) == 0x000248, "Member 'UNetDebugWidget::PacketOutLossUI' has a wrong offset!");
static_assert(offsetof(UNetDebugWidget, UpBandwidthUI) == 0x000250, "Member 'UNetDebugWidget::UpBandwidthUI' has a wrong offset!");
static_assert(offsetof(UNetDebugWidget, DownBandwidthUI) == 0x000258, "Member 'UNetDebugWidget::DownBandwidthUI' has a wrong offset!");

// Class NetUI.NetGraph
// 0x0030 (0x0258 - 0x0228)
class UNetGraph final : public UUserWidget
{
public:
	struct FColor                                 BackgroundColor;                                   // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 PingLineColor;                                     // 0x022C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 PacketLossLineColor;                               // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DesiredSize;                                       // 0x0234(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxPingToGraph;                                    // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_240[0x18];                                     // 0x0240(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetGraph">();
	}
	static class UNetGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetGraph>();
	}
};
static_assert(alignof(UNetGraph) == 0x000008, "Wrong alignment on UNetGraph");
static_assert(sizeof(UNetGraph) == 0x000258, "Wrong size on UNetGraph");
static_assert(offsetof(UNetGraph, BackgroundColor) == 0x000228, "Member 'UNetGraph::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UNetGraph, PingLineColor) == 0x00022C, "Member 'UNetGraph::PingLineColor' has a wrong offset!");
static_assert(offsetof(UNetGraph, PacketLossLineColor) == 0x000230, "Member 'UNetGraph::PacketLossLineColor' has a wrong offset!");
static_assert(offsetof(UNetGraph, DesiredSize) == 0x000234, "Member 'UNetGraph::DesiredSize' has a wrong offset!");
static_assert(offsetof(UNetGraph, MaxPingToGraph) == 0x00023C, "Member 'UNetGraph::MaxPingToGraph' has a wrong offset!");

}

